/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipShort_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue1_YZoH0() {
    byte[] bytes = new byte[] {0x01, 0x02};
    int offset = 0;
    ZipShort zipShort = new ZipShort(bytes, offset);
    assertEquals(0x0102, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue3_OYFG2() {
    byte[] bytes = new byte[] {0x01, 0x02};
    ZipShort zipShort = new ZipShort(bytes);
    assertEquals(0x0102, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_byteArray_KEOR1() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5};
    ZipShort zipShort = new ZipShort(bytes, 0);
    assertEquals(10, zipShort.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_byteArrayWithOffset_EFak2() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5};
    ZipShort zipShort = new ZipShort(bytes, 2);
    assertEquals(3, zipShort.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_InvalidOffset_Regm2() {
    byte[] bytes = {0x01, 0x02, 0x03, 0x04};
    int offset = 3;
    int expected = 0;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithByteArrayAndOffset_iANK0() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int offset = 1;
    ZipShort zipShort = new ZipShort(bytes, offset);
    String expected = "ZipShort value: 0x0203";
    String actual = zipShort.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithIntValue_vovr1() {
    int value = 0x0102;
    ZipShort zipShort = new ZipShort(value);
    String expected = "ZipShort value: 0x0102";
    String actual = zipShort.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithByteArray_EggJ2() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    ZipShort zipShort = new ZipShort(bytes);
    String expected = "ZipShort value: 0x0102";
    String actual = zipShort.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithZeroValue_KkdH3() {
    int value = 0;
    ZipShort zipShort = new ZipShort(value);
    String expected = "ZipShort value: 0x0000";
    String actual = zipShort.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNegativeValue_BCfN4() {
    int value = -1;
    ZipShort zipShort = new ZipShort(value);
    String expected = "ZipShort value: 0xFFFF";
    String actual = zipShort.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentOffsets_Kqpk4() {
    ZipShort zipShort1 = new ZipShort(new byte[] { 0x01, 0x02 }, 0);
    ZipShort zipShort2 = new ZipShort(new byte[] { 0x01, 0x02 }, 1);
    assertFalse(zipShort1.equals(zipShort2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_1_Iton0() {
    byte[] bytes = new byte[] {0x01, 0x02};
    int expected = 0x0102;
    int actual = ZipShort.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_2_RERF1() {
    byte[] bytes = new byte[] {0x01, 0x02, 0x03, 0x04};
    int expected = 0x0102;
    int actual = ZipShort.getValue(bytes, 0);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_3_AjsB2() {
    byte[] bytes = new byte[] {0x01, 0x02, 0x03, 0x04};
    int expected = 0x0304;
    int actual = ZipShort.getValue(bytes, 2);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithNullBytes_Vxbp4() {
    ZipShort zipShort = new ZipShort(null);
    ZipShort clone = (ZipShort) zipShort.clone();
    assertEquals(zipShort, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithEmptyBytes_VEhQ5() {
    ZipShort zipShort = new ZipShort(new byte[0]);
    ZipShort clone = (ZipShort) zipShort.clone();
    assertEquals(zipShort, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithNegativeOffset_MUIS6() {
    ZipShort zipShort = new ZipShort(new byte[] { 1, 2, 3, 4 }, -1);
    ZipShort clone = (ZipShort) zipShort.clone();
    assertEquals(zipShort, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithTooLargeOffset_SEsD7() {
    ZipShort zipShort = new ZipShort(new byte[] { 1, 2, 3, 4 }, 5);
    ZipShort clone = (ZipShort) zipShort.clone();
    assertEquals(zipShort, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_InvalidOffset_Regm2_fid1() {
    byte[] bytes = {0x01, 0x02, 0x03, 0x04};
    int offset = 3;
    int expected = 0x0403;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithNullBytes_Vxbp4_fid1() {
    ZipShort zipShort = new ZipShort(new byte[0]);
    ZipShort clone = (ZipShort) zipShort.clone();
    assertEquals(0, clone.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithEmptyBytes_VEhQ5_fid1() {
    ZipShort zipShort = new ZipShort(new byte[1]);
    ZipShort clone = (ZipShort) zipShort.clone();
    assertEquals(zipShort, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithTooLargeOffset_SEsD7_fid1() {
    ZipShort zipShort = new ZipShort(new byte[] { 1, 2, 3, 4 }, 3);
    ZipShort clone = (ZipShort) zipShort.clone();
    assertEquals(zipShort, clone);
}
}