/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IcTuple_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_2_thxV1() {
    IcTuple tuple = new IcTuple("C",-1, "C2", "N", 1,-1, 3, 4);
    assertEquals(2, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_3_ZlYy2() {
    IcTuple tuple = new IcTuple("C",-1, "C2", "N", 1, 2,-1, 4);
    assertEquals(3, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_4_vuLm3() {
    IcTuple tuple = new IcTuple("C",-1, "C2", "N", 1, 2, 3,-1);
    assertEquals(4, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_5_Qotr4() {
    IcTuple tuple = new IcTuple("C",-1, "C2", "N", 1, 2, 3, 4);
    assertEquals(5, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_6_gkQR5() {
    IcTuple tuple = new IcTuple("C",-1, "C2", "N", 1, 2, 3, 4);
    assertEquals(6, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_7_lRfo6() {
    IcTuple tuple = new IcTuple("C",-1, "C2", "N", 1, 2, 3, 4);
    assertEquals(7, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_8_gDhS7() {
    IcTuple tuple = new IcTuple("C",-1, "C2", "N", 1, 2, 3, 4);
    assertEquals(8, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_9_hNQB8() {
    IcTuple tuple = new IcTuple("C",-1, "C2", "N", 1, 2, 3, 4);
    assertEquals(9, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_10_qPVE9() {
    IcTuple tuple = new IcTuple("C",-1, "C2", "N", 1, 2, 3, 4);
    assertEquals(10, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnonymous_NullC_elcS7() {
    IcTuple tuple = new IcTuple(null, 1, "C2", "N", 0, 0, 0, 0);
    assertFalse(tuple.isAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_Null_Ugyr2() {
    IcTuple tuple = new IcTuple(null, 1, "C2", "N", 1, 1, 1, 1);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNWithNull_YRGB1() {
    IcTuple tuple = new IcTuple(null, 1, "C2", "N", 1, 2, 3, 4);
    assertNull(tuple.getN());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithNull_WOIQ1() {
    IcTuple tuple = new IcTuple(null, 1, "C2", "N", 1, 2, 3, 4);
    assertNull(tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_KTer0_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    int expectedHashCode = 123456789;
    int actualHashCode = tuple.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedExplicitFlagSet_True_eUUk0_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    assertTrue(tuple.nestedExplicitFlagSet());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_1_ZJDw0_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals(1, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_2_thxV1_fid1() {
    IcTuple tuple = new IcTuple("C", 2, "C2", "N", 1, 2, 3, 4);
    assertEquals(2, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_3_ZlYy2_fid1() {
    IcTuple tuple = new IcTuple("C", 3, "C2", "N", 1, 2, 3, 4);
    assertEquals(3, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_4_vuLm3_fid1() {
    IcTuple tuple = new IcTuple("C", 4, "C2", "N", 1, 2, 3, 4);
    assertEquals(4, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_5_Qotr4_fid1() {
    IcTuple tuple = new IcTuple("C", 5, "C2", "N", 1, 2, 3, 4);
    assertEquals(5, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_6_gkQR5_fid1() {
    IcTuple tuple = new IcTuple("C", 6, "C2", "N", 1, 2, 3, 4);
    assertEquals(6, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_7_lRfo6_fid1() {
    IcTuple tuple = new IcTuple("C", 7, "C2", "N", 1, 2, 3, 4);
    assertEquals(7, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_8_gDhS7_fid1() {
    IcTuple tuple = new IcTuple("C", 8, "C2", "N", 1, 2, 3, 4);
    assertEquals(8, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_9_hNQB8_fid1() {
    IcTuple tuple = new IcTuple("C", 9, "C2", "N", 1, 2, 3, 4);
    assertEquals(9, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_10_qPVE9_fid1() {
    IcTuple tuple = new IcTuple("C", 10, "C2", "N", 1, 2, 3, 4);
    assertEquals(10, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSimpleClassNameIndex_1_CKeB0_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals(1, tuple.simpleClassNameIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnonymous_True_LPKF0_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    assertTrue(tuple.isAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnonymous_Anonymous_iwbd6_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 1);
    assertTrue(tuple.isAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymous_True_AKnl0_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
    assertTrue(tuple.outerIsAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymous_Null_gNUO2_fid1() {
    IcTuple tuple = new IcTuple(null, 1, "C2", "N", 0, 0, 0, 0);
    assertFalse(tuple.outerIsAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSimpleClassName1_jsnx0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("C", tuple.simpleClassName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassString_predicted_SXPg0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String actual = tuple.thisClassString();
    assertEquals("C", actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassIndex_predictedTrue_evdP0_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    int actual = tuple.thisClassIndex();
    assertEquals(1, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassIndex_predictedTrue_cIndexZero_Lfbr2_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 2, 3, 4);
    int actual = tuple.thisClassIndex();
    assertEquals(0, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_False_oKhu1_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 0);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_Empty_vyOR3_fid1() {
    IcTuple tuple = new IcTuple("", 1, "C2", "N", 1, 1, 1, 1);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_InvalidC_ufqG4_fid1() {
    IcTuple tuple = new IcTuple("Invalid", 1, "C2", "N", 1, 1, 1, 1);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_InvalidC2_eCif5_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "Invalid", "N", 1, 1, 1, 1);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_InvalidN_grda6_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "Invalid", 1, 1, 1, 1);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_InvalidcIndex_VPkV7_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 1, 1, 1);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_Invalidc2Index_BunV8_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 0, 1, 1);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_InvalidnIndex_maaX9_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 1, 0, 1);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNWithEmptyString_ZoIB2() {
    IcTuple tuple = new IcTuple("", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("", tuple.getN());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString1_CFzq0_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    String expected = "IcTuple (C in C2)";
    assertEquals(expected, tuple.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString2_JoBq1_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 0, 0, 0);
    String expected = "IcTuple (C in C2)";
    assertEquals(expected, tuple.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString3_ZAuf2_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 1, 0, 0);
    String expected = "IcTuple (C in C2)";
    assertEquals(expected, tuple.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString4_IsRH3_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 0, 1, 0);
    String expected = "IcTuple (C in C2)";
    assertEquals(expected, tuple.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString5_fsIW4_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 1);
    String expected = "IcTuple (C in C2)";
    assertEquals(expected, tuple.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString6_xiYu5_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
    String expected = "IcTuple (C in C2)";
    assertEquals(expected, tuple.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString_pEcf0_fid1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result = tuple.outerClassString();
    assertEquals("C1C2N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString_Bpej1_1_fid1() {
    IcTuple tuple1 = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result1 = tuple1.outerClassString();
    IcTuple tuple2 = new IcTuple("C", 2, "C2", "N", 1, 2, 3, 4);
    String result2 = tuple2.outerClassString();
    IcTuple tuple3 = new IcTuple("C", 3, "C2", "N", 1, 2, 3, 4);
    String result3 = tuple3.outerClassString();
    IcTuple tuple4 = new IcTuple("C", 4, "C2", "N", 1, 2, 3, 4);
    String result4 = tuple4.outerClassString();
    IcTuple tuple5 = new IcTuple("C", 5, "C2", "N", 1, 2, 3, 4);
    String result5 = tuple5.outerClassString();
    IcTuple tuple6 = new IcTuple("C", 6, "C2", "N", 1, 2, 3, 4);
    String result6 = tuple6.outerClassString();
    IcTuple tuple7 = new IcTuple("C", 7, "C2", "N", 1, 2, 3, 4);
    String result7 = tuple7.outerClassString();
    IcTuple tuple8 = new IcTuple("C", 8, "C2", "N", 1, 2, 3, 4);
    String result8 = tuple8.outerClassString();
    IcTuple tuple9 = new IcTuple("C", 9, "C2", "N", 1, 2, 3, 4);
    String result9 = tuple9.outerClassString();
    IcTuple tuple10 = new IcTuple("C", 10, "C2", "N", 1, 2, 3, 4);
    String result10 = tuple10.outerClassString();
    assertEquals("C1C2N", result1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString_Bpej1_2_fid1() {
    IcTuple tuple1 = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result1 = tuple1.outerClassString();
    IcTuple tuple2 = new IcTuple("C", 2, "C2", "N", 1, 2, 3, 4);
    String result2 = tuple2.outerClassString();
    IcTuple tuple3 = new IcTuple("C", 3, "C2", "N", 1, 2, 3, 4);
    String result3 = tuple3.outerClassString();
    IcTuple tuple4 = new IcTuple("C", 4, "C2", "N", 1, 2, 3, 4);
    String result4 = tuple4.outerClassString();
    IcTuple tuple5 = new IcTuple("C", 5, "C2", "N", 1, 2, 3, 4);
    String result5 = tuple5.outerClassString();
    IcTuple tuple6 = new IcTuple("C", 6, "C2", "N", 1, 2, 3, 4);
    String result6 = tuple6.outerClassString();
    IcTuple tuple7 = new IcTuple("C", 7, "C2", "N", 1, 2, 3, 4);
    String result7 = tuple7.outerClassString();
    IcTuple tuple8 = new IcTuple("C", 8, "C2", "N", 1, 2, 3, 4);
    String result8 = tuple8.outerClassString();
    IcTuple tuple9 = new IcTuple("C", 9, "C2", "N", 1, 2, 3, 4);
    String result9 = tuple9.outerClassString();
    IcTuple tuple10 = new IcTuple("C", 10, "C2", "N", 1, 2, 3, 4);
    String result10 = tuple10.outerClassString();
    assertEquals("C2C2N", result2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString_Bpej1_3_fid1() {
    IcTuple tuple1 = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result1 = tuple1.outerClassString();
    IcTuple tuple2 = new IcTuple("C", 2, "C2", "N", 1, 2, 3, 4);
    String result2 = tuple2.outerClassString();
    IcTuple tuple3 = new IcTuple("C", 3, "C2", "N", 1, 2, 3, 4);
    String result3 = tuple3.outerClassString();
    IcTuple tuple4 = new IcTuple("C", 4, "C2", "N", 1, 2, 3, 4);
    String result4 = tuple4.outerClassString();
    IcTuple tuple5 = new IcTuple("C", 5, "C2", "N", 1, 2, 3, 4);
    String result5 = tuple5.outerClassString();
    IcTuple tuple6 = new IcTuple("C", 6, "C2", "N", 1, 2, 3, 4);
    String result6 = tuple6.outerClassString();
    IcTuple tuple7 = new IcTuple("C", 7, "C2", "N", 1, 2, 3, 4);
    String result7 = tuple7.outerClassString();
    IcTuple tuple8 = new IcTuple("C", 8, "C2", "N", 1, 2, 3, 4);
    String result8 = tuple8.outerClassString();
    IcTuple tuple9 = new IcTuple("C", 9, "C2", "N", 1, 2, 3, 4);
    String result9 = tuple9.outerClassString();
    IcTuple tuple10 = new IcTuple("C", 10, "C2", "N", 1, 2, 3, 4);
    String result10 = tuple10.outerClassString();
    assertEquals("C3C2N", result3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString_Bpej1_4() {
    IcTuple tuple1 = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result1 = tuple1.outerClassString();
    IcTuple tuple2 = new IcTuple("C", 2, "C2", "N", 1, 2, 3, 4);
    String result2 = tuple2.outerClassString();
    IcTuple tuple3 = new IcTuple("C", 3, "C2", "N", 1, 2, 3, 4);
    String result3 = tuple3.outerClassString();
    IcTuple tuple4 = new IcTuple("C", 4, "C2", "N", 1, 2, 3, 4);
    String result4 = tuple4.outerClassString();
    IcTuple tuple5 = new IcTuple("C", 5, "C2", "N", 1, 2, 3, 4);
    String result5 = tuple5.outerClassString();
    IcTuple tuple6 = new IcTuple("C", 6, "C2", "N", 1, 2, 3, 4);
    String result6 = tuple6.outerClassString();
    IcTuple tuple7 = new IcTuple("C", 7, "C2", "N", 1, 2, 3, 4);
    String result7 = tuple7.outerClassString();
    IcTuple tuple8 = new IcTuple("C", 8, "C2", "N", 1, 2, 3, 4);
    String result8 = tuple8.outerClassString();
    IcTuple tuple9 = new IcTuple("C", 9, "C2", "N", 1, 2, 3, 4);
    String result9 = tuple9.outerClassString();
    IcTuple tuple10 = new IcTuple("C", 10, "C2", "N", 1, 2, 3, 4);
    String result10 = tuple10.outerClassString();
    assertEquals("C4C2N", result4);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString_Bpej1_5() {
    IcTuple tuple1 = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result1 = tuple1.outerClassString();
    IcTuple tuple2 = new IcTuple("C", 2, "C2", "N", 1, 2, 3, 4);
    String result2 = tuple2.outerClassString();
    IcTuple tuple3 = new IcTuple("C", 3, "C2", "N", 1, 2, 3, 4);
    String result3 = tuple3.outerClassString();
    IcTuple tuple4 = new IcTuple("C", 4, "C2", "N", 1, 2, 3, 4);
    String result4 = tuple4.outerClassString();
    IcTuple tuple5 = new IcTuple("C", 5, "C2", "N", 1, 2, 3, 4);
    String result5 = tuple5.outerClassString();
    IcTuple tuple6 = new IcTuple("C", 6, "C2", "N", 1, 2, 3, 4);
    String result6 = tuple6.outerClassString();
    IcTuple tuple7 = new IcTuple("C", 7, "C2", "N", 1, 2, 3, 4);
    String result7 = tuple7.outerClassString();
    IcTuple tuple8 = new IcTuple("C", 8, "C2", "N", 1, 2, 3, 4);
    String result8 = tuple8.outerClassString();
    IcTuple tuple9 = new IcTuple("C", 9, "C2", "N", 1, 2, 3, 4);
    String result9 = tuple9.outerClassString();
    IcTuple tuple10 = new IcTuple("C", 10, "C2", "N", 1, 2, 3, 4);
    String result10 = tuple10.outerClassString();
    assertEquals("C5C2N", result5);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString_Bpej1_6() {
    IcTuple tuple1 = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result1 = tuple1.outerClassString();
    IcTuple tuple2 = new IcTuple("C", 2, "C2", "N", 1, 2, 3, 4);
    String result2 = tuple2.outerClassString();
    IcTuple tuple3 = new IcTuple("C", 3, "C2", "N", 1, 2, 3, 4);
    String result3 = tuple3.outerClassString();
    IcTuple tuple4 = new IcTuple("C", 4, "C2", "N", 1, 2, 3, 4);
    String result4 = tuple4.outerClassString();
    IcTuple tuple5 = new IcTuple("C", 5, "C2", "N", 1, 2, 3, 4);
    String result5 = tuple5.outerClassString();
    IcTuple tuple6 = new IcTuple("C", 6, "C2", "N", 1, 2, 3, 4);
    String result6 = tuple6.outerClassString();
    IcTuple tuple7 = new IcTuple("C", 7, "C2", "N", 1, 2, 3, 4);
    String result7 = tuple7.outerClassString();
    IcTuple tuple8 = new IcTuple("C", 8, "C2", "N", 1, 2, 3, 4);
    String result8 = tuple8.outerClassString();
    IcTuple tuple9 = new IcTuple("C", 9, "C2", "N", 1, 2, 3, 4);
    String result9 = tuple9.outerClassString();
    IcTuple tuple10 = new IcTuple("C", 10, "C2", "N", 1, 2, 3, 4);
    String result10 = tuple10.outerClassString();
    assertEquals("C6C2N", result6);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString_Bpej1_7() {
    IcTuple tuple1 = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result1 = tuple1.outerClassString();
    IcTuple tuple2 = new IcTuple("C", 2, "C2", "N", 1, 2, 3, 4);
    String result2 = tuple2.outerClassString();
    IcTuple tuple3 = new IcTuple("C", 3, "C2", "N", 1, 2, 3, 4);
    String result3 = tuple3.outerClassString();
    IcTuple tuple4 = new IcTuple("C", 4, "C2", "N", 1, 2, 3, 4);
    String result4 = tuple4.outerClassString();
    IcTuple tuple5 = new IcTuple("C", 5, "C2", "N", 1, 2, 3, 4);
    String result5 = tuple5.outerClassString();
    IcTuple tuple6 = new IcTuple("C", 6, "C2", "N", 1, 2, 3, 4);
    String result6 = tuple6.outerClassString();
    IcTuple tuple7 = new IcTuple("C", 7, "C2", "N", 1, 2, 3, 4);
    String result7 = tuple7.outerClassString();
    IcTuple tuple8 = new IcTuple("C", 8, "C2", "N", 1, 2, 3, 4);
    String result8 = tuple8.outerClassString();
    IcTuple tuple9 = new IcTuple("C", 9, "C2", "N", 1, 2, 3, 4);
    String result9 = tuple9.outerClassString();
    IcTuple tuple10 = new IcTuple("C", 10, "C2", "N", 1, 2, 3, 4);
    String result10 = tuple10.outerClassString();
    assertEquals("C7C2N", result7);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString_Bpej1_8() {
    IcTuple tuple1 = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result1 = tuple1.outerClassString();
    IcTuple tuple2 = new IcTuple("C", 2, "C2", "N", 1, 2, 3, 4);
    String result2 = tuple2.outerClassString();
    IcTuple tuple3 = new IcTuple("C", 3, "C2", "N", 1, 2, 3, 4);
    String result3 = tuple3.outerClassString();
    IcTuple tuple4 = new IcTuple("C", 4, "C2", "N", 1, 2, 3, 4);
    String result4 = tuple4.outerClassString();
    IcTuple tuple5 = new IcTuple("C", 5, "C2", "N", 1, 2, 3, 4);
    String result5 = tuple5.outerClassString();
    IcTuple tuple6 = new IcTuple("C", 6, "C2", "N", 1, 2, 3, 4);
    String result6 = tuple6.outerClassString();
    IcTuple tuple7 = new IcTuple("C", 7, "C2", "N", 1, 2, 3, 4);
    String result7 = tuple7.outerClassString();
    IcTuple tuple8 = new IcTuple("C", 8, "C2", "N", 1, 2, 3, 4);
    String result8 = tuple8.outerClassString();
    IcTuple tuple9 = new IcTuple("C", 9, "C2", "N", 1, 2, 3, 4);
    String result9 = tuple9.outerClassString();
    IcTuple tuple10 = new IcTuple("C", 10, "C2", "N", 1, 2, 3, 4);
    String result10 = tuple10.outerClassString();
    assertEquals("C8C2N", result8);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString_Bpej1_9() {
    IcTuple tuple1 = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result1 = tuple1.outerClassString();
    IcTuple tuple2 = new IcTuple("C", 2, "C2", "N", 1, 2, 3, 4);
    String result2 = tuple2.outerClassString();
    IcTuple tuple3 = new IcTuple("C", 3, "C2", "N", 1, 2, 3, 4);
    String result3 = tuple3.outerClassString();
    IcTuple tuple4 = new IcTuple("C", 4, "C2", "N", 1, 2, 3, 4);
    String result4 = tuple4.outerClassString();
    IcTuple tuple5 = new IcTuple("C", 5, "C2", "N", 1, 2, 3, 4);
    String result5 = tuple5.outerClassString();
    IcTuple tuple6 = new IcTuple("C", 6, "C2", "N", 1, 2, 3, 4);
    String result6 = tuple6.outerClassString();
    IcTuple tuple7 = new IcTuple("C", 7, "C2", "N", 1, 2, 3, 4);
    String result7 = tuple7.outerClassString();
    IcTuple tuple8 = new IcTuple("C", 8, "C2", "N", 1, 2, 3, 4);
    String result8 = tuple8.outerClassString();
    IcTuple tuple9 = new IcTuple("C", 9, "C2", "N", 1, 2, 3, 4);
    String result9 = tuple9.outerClassString();
    IcTuple tuple10 = new IcTuple("C", 10, "C2", "N", 1, 2, 3, 4);
    String result10 = tuple10.outerClassString();
    assertEquals("C9C2N", result9);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString_Bpej1_10() {
    IcTuple tuple1 = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result1 = tuple1.outerClassString();
    IcTuple tuple2 = new IcTuple("C", 2, "C2", "N", 1, 2, 3, 4);
    String result2 = tuple2.outerClassString();
    IcTuple tuple3 = new IcTuple("C", 3, "C2", "N", 1, 2, 3, 4);
    String result3 = tuple3.outerClassString();
    IcTuple tuple4 = new IcTuple("C", 4, "C2", "N", 1, 2, 3, 4);
    String result4 = tuple4.outerClassString();
    IcTuple tuple5 = new IcTuple("C", 5, "C2", "N", 1, 2, 3, 4);
    String result5 = tuple5.outerClassString();
    IcTuple tuple6 = new IcTuple("C", 6, "C2", "N", 1, 2, 3, 4);
    String result6 = tuple6.outerClassString();
    IcTuple tuple7 = new IcTuple("C", 7, "C2", "N", 1, 2, 3, 4);
    String result7 = tuple7.outerClassString();
    IcTuple tuple8 = new IcTuple("C", 8, "C2", "N", 1, 2, 3, 4);
    String result8 = tuple8.outerClassString();
    IcTuple tuple9 = new IcTuple("C", 9, "C2", "N", 1, 2, 3, 4);
    String result9 = tuple9.outerClassString();
    IcTuple tuple10 = new IcTuple("C", 10, "C2", "N", 1, 2, 3, 4);
    String result10 = tuple10.outerClassString();
    assertEquals("C10C2N", result10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_MultipleCharacters_DUPx2_1() {
    IcTuple tuple = new IcTuple("abc", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("abc");
    assertEquals(3, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_MultipleCharacters_DUPx2_2() {
    IcTuple tuple = new IcTuple("abc", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("abc");
    assertEquals("a", result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_MultipleCharacters_DUPx2_3() {
    IcTuple tuple = new IcTuple("abc", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("abc");
    assertEquals("b", result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_MultipleCharacters_DUPx2_4() {
    IcTuple tuple = new IcTuple("abc", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("abc");
    assertEquals("c", result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSign_Tezw3_1() {
    IcTuple tuple = new IcTuple("$", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$");
    assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSign_Tezw3_2() {
    IcTuple tuple = new IcTuple("$", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$");
    assertEquals("$", result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndCharacters_uHgB4_1() {
    IcTuple tuple = new IcTuple("$abc", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$abc");
    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndCharacters_uHgB4_2() {
    IcTuple tuple = new IcTuple("$abc", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$abc");
    assertEquals("$", result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndCharacters_uHgB4_3() {
    IcTuple tuple = new IcTuple("$abc", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$abc");
    assertEquals("abc", result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_CharactersAndDollarSign_kKPl5_1() {
    IcTuple tuple = new IcTuple("abc$", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("abc$");
    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_CharactersAndDollarSign_kKPl5_2() {
    IcTuple tuple = new IcTuple("abc$", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("abc$");
    assertEquals("abc", result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_CharactersAndDollarSign_kKPl5_3() {
    IcTuple tuple = new IcTuple("abc$", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("abc$");
    assertEquals("$", result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndCharactersAndDollarSign_YGxc6_1() {
    IcTuple tuple = new IcTuple("$abc$", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$abc$");
    assertEquals(3, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndCharactersAndDollarSign_YGxc6_2() {
    IcTuple tuple = new IcTuple("$abc$", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$abc$");
    assertEquals("$", result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndCharactersAndDollarSign_YGxc6_3() {
    IcTuple tuple = new IcTuple("$abc$", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$abc$");
    assertEquals("abc", result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndCharactersAndDollarSign_YGxc6_4() {
    IcTuple tuple = new IcTuple("$abc$", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$abc$");
    assertEquals("$", result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndDollarSign_PWYE7_1() {
    IcTuple tuple = new IcTuple("$$", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$$");
    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndDollarSign_PWYE7_2() {
    IcTuple tuple = new IcTuple("$$", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$$");
    assertEquals("$", result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndDollarSign_PWYE7_3() {
    IcTuple tuple = new IcTuple("$$", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$$");
    assertEquals("$", result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndCharactersAndDollarSignAndCharacters_SkAW8_1() {
    IcTuple tuple = new IcTuple("$abc$def", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$abc$def");
    assertEquals(3, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndCharactersAndDollarSignAndCharacters_SkAW8_2() {
    IcTuple tuple = new IcTuple("$abc$def", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$abc$def");
    assertEquals("$", result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndCharactersAndDollarSignAndCharacters_SkAW8_3() {
    IcTuple tuple = new IcTuple("$abc$def", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$abc$def");
    assertEquals("abc", result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndCharactersAndDollarSignAndCharacters_SkAW8_4() {
    IcTuple tuple = new IcTuple("$abc$def", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$abc$def");
    assertEquals("$def", result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPredicted_predictOuterFalse_predictSimpleTrue_msis1_XSuu1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
    assertTrue(tuple.predicted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString_Bpej1() {
    IcTuple tuple1 = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result1 = tuple1.outerClassString();
    assertEquals("C1C2N", result1);
    IcTuple tuple2 = new IcTuple("C", 2, "C2", "N", 1, 2, 3, 4);
    String result2 = tuple2.outerClassString();
    assertEquals("C2C2N", result2);
    IcTuple tuple3 = new IcTuple("C", 3, "C2", "N", 1, 2, 3, 4);
    String result3 = tuple3.outerClassString();
    assertEquals("C3C2N", result3);
    IcTuple tuple4 = new IcTuple("C", 4, "C2", "N", 1, 2, 3, 4);
    String result4 = tuple4.outerClassString();
    assertEquals("C4C2N", result4);
    IcTuple tuple5 = new IcTuple("C", 5, "C2", "N", 1, 2, 3, 4);
    String result5 = tuple5.outerClassString();
    assertEquals("C5C2N", result5);
    IcTuple tuple6 = new IcTuple("C", 6, "C2", "N", 1, 2, 3, 4);
    String result6 = tuple6.outerClassString();
    assertEquals("C6C2N", result6);
    IcTuple tuple7 = new IcTuple("C", 7, "C2", "N", 1, 2, 3, 4);
    String result7 = tuple7.outerClassString();
    assertEquals("C7C2N", result7);
    IcTuple tuple8 = new IcTuple("C", 8, "C2", "N", 1, 2, 3, 4);
    String result8 = tuple8.outerClassString();
    assertEquals("C8C2N", result8);
    IcTuple tuple9 = new IcTuple("C", 9, "C2", "N", 1, 2, 3, 4);
    String result9 = tuple9.outerClassString();
    assertEquals("C9C2N", result9);
    IcTuple tuple10 = new IcTuple("C", 10, "C2", "N", 1, 2, 3, 4);
    String result10 = tuple10.outerClassString();
    assertEquals("C10C2N", result10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_MultipleCharacters_DUPx2() {
    IcTuple tuple = new IcTuple("abc", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("abc");
    assertEquals(3, result.length);
    assertEquals("a", result[0]);
    assertEquals("b", result[1]);
    assertEquals("c", result[2]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSign_Tezw3() {
    IcTuple tuple = new IcTuple("$", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$");
    assertEquals(1, result.length);
    assertEquals("$", result[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndCharacters_uHgB4() {
    IcTuple tuple = new IcTuple("$abc", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$abc");
    assertEquals(2, result.length);
    assertEquals("$", result[0]);
    assertEquals("abc", result[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_CharactersAndDollarSign_kKPl5() {
    IcTuple tuple = new IcTuple("abc$", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("abc$");
    assertEquals(2, result.length);
    assertEquals("abc", result[0]);
    assertEquals("$", result[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndCharactersAndDollarSign_YGxc6() {
    IcTuple tuple = new IcTuple("$abc$", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$abc$");
    assertEquals(3, result.length);
    assertEquals("$", result[0]);
    assertEquals("abc", result[1]);
    assertEquals("$", result[2]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndDollarSign_PWYE7() {
    IcTuple tuple = new IcTuple("$$", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$$");
    assertEquals(2, result.length);
    assertEquals("$", result[0]);
    assertEquals("$", result[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSignAndCharactersAndDollarSignAndCharacters_SkAW8() {
    IcTuple tuple = new IcTuple("$abc$def", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("$abc$def");
    assertEquals(3, result.length);
    assertEquals("$", result[0]);
    assertEquals("abc", result[1]);
    assertEquals("$def", result[2]);
}
}