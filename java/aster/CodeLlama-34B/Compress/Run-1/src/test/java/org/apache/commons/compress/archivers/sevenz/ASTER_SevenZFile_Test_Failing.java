/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZFile_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithNullEntry_VDDB2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'t', 'e', 's', 't'});
    SevenZArchiveEntry entry = null;
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithEmptyEntry_MWhl3() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'t', 'e', 's', 't'});
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead1_TiYz0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b);
    assertEquals(10, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead2_HZkJ1() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 0, 5);
    assertEquals(5, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead3_DgWU2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 5, 5);
    assertEquals(5, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead4_vVKx3() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 10, 0);
    assertEquals(0, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead5_dqYs4() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 0, 10);
    assertEquals(10, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithNullEntry_VDDB2_fid1() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'t', 'e', 's', 't'});
    SevenZArchiveEntry entry = null;
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithEmptyEntry_MWhl3_fid1() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'t', 'e', 's', 't'});
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead4_vVKx3_fid1() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 10, 0);
    assertEquals(10, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_EmptyArray_BByS0_mDxp0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"));
    byte[] b = new byte[0];
    int off = 0;
    int len = 0;
    int cnt = sevenZFile.read(b, off, len);
    assertEquals(0, cnt);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_NonEmptyArray_bUuH1_YBBG0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"));
    byte[] b = new byte[10];
    int off = 0;
    int len = 10;
    int cnt = sevenZFile.read(b, off, len);
    assertEquals(10, cnt);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatisticsForCurrentEntry_ZALW0_ZyXc0_1() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"));
    InputStreamStatistics statistics = sevenZFile.getStatisticsForCurrentEntry();
    assertTrue(statistics.getCompressedCount() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatisticsForCurrentEntry_ZALW0_ZyXc0_2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"));
    InputStreamStatistics statistics = sevenZFile.getStatisticsForCurrentEntry();
    assertTrue(statistics.getUncompressedCount() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithInvalidEntry_bhzt1_fzys0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'t', 'e', 's', 't'});
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("test.txt");
    entry.setSize(100);
    entry.setLastModifiedTime(java.nio.file.attribute.FileTime.fromMillis(System.currentTimeMillis()));
    entry.setLastModifiedDate(new Date());
    entry.setHasCrc(true);
    entry.setHasCreationDate(true);
    entry.setCrcValue(123456789);
    entry.setAccessDate(new Date());
    entry.setAccessTime(java.nio.file.attribute.FileTime.fromMillis(System.currentTimeMillis()));
    entry.setHasStream(true);
    entry.setHasWindowsAttributes(true);
    entry.setWindowsAttributes(123456789);
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_HFUY1_NcTU0_fid2() {
    byte[] signature = new byte[] {(byte)0x37, (byte)0x7A, (byte)0xBC, (byte)0xAF, (byte)0x27, (byte)0x1C};
    int length = signature.length;
    assertFalse(SevenZFile.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_NonEmptyArray_bUuH1_YBBG0_fid2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"));
    byte[] b = new byte[10];
    int off = 0;
    int len = 10;
    int cnt = sevenZFile.read(b, off, len);
    assertTrue(cnt > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithInvalidEntry_bhzt1_fzys0_fid2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'t', 'e', 's', 't'});
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("test.txt");
    entry.setSize(100);
    entry.setLastModifiedTime(java.nio.file.attribute.FileTime.fromMillis(System.currentTimeMillis()));
    entry.setLastModifiedDate(new Date());
    entry.setHasCrc(true);
    entry.setHasCreationDate(true);
    entry.setCrcValue(123456789);
    entry.setAccessDate(new Date());
    entry.setAccessTime(java.nio.file.attribute.FileTime.fromMillis(System.currentTimeMillis()));
    entry.setHasStream(true);
    entry.setHasWindowsAttributes(true);
    entry.setWindowsAttributes(123456789);
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNull(inputStream);
}
}