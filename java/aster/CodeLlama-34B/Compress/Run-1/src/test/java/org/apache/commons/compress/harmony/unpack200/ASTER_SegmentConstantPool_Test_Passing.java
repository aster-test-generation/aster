/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentConstantPool_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatches_Error_KUGU3() {
    String regexString = "invalid regex";
    String compareString = "any string";
    try {
        SegmentConstantPool.regexMatches(regexString, compareString);
        fail("Expected an Error to be thrown");
    } catch (Error e) {
        assertEquals("regex trying to match a pattern I don't know: " + regexString, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_primaryCompareStringNull_JPFK2() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, null, "a", 0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_secondaryCompareRegexNull_BZHC3() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, "a", ".*", 0);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_primaryArrayEmpty_EpEz6() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[] {}, new String[] {"a", "b", "c"}, "a", "a", 0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_primaryCompareStringEmpty_bvka8() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, "", "a", 0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatches_MatchAll_cSYi0_eRoU0() {
    String regexString = ".*";
    String compareString = "any string";
    boolean result = SegmentConstantPool.regexMatches(regexString, compareString);
    assertTrue(result);
}
}