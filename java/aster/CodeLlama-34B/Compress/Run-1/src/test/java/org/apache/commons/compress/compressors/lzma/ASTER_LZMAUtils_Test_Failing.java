/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMAUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilename_nullPath_xmez7() {
    String fileName = null;
    String expected = null;
    String actual = LZMAUtils.getUncompressedFilename(fileName);
    assertNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_Null_qMEf1() {
    String fileName = null;
    assertNull(LZMAUtils.isCompressedFilename(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_null_txth0() {
    String fileName = null;
    String expected = null;
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_nullExtension_hKfk4() {
    String fileName = "file.txt..";
    String expected = "file.txt.";
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_invalidExtension_yTZd6() {
    String fileName = "file.txt.invalid.invalid";
    String expected = "file.txt.invalid";
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nonEmptySignature_YFyQ1_fid2() {
    byte[] signature = new byte[] { 0x01, 0x02, 0x03 };
    int length = 3;
    assertTrue(LZMAUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithInvalidFileName_jhqB3() {
    String fileName = "";
    String expected = "";
    String actual = LZMAUtils.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithNullFileName_jzGg4() {
    String fileName = null;
    String expected = null;
    String actual = LZMAUtils.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_NullFileName_HWYB2() {
    String fileName = null;
    assertFalse(LZMAUtils.isCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilename_null_otXb0() {
    String fileName = null;
    String expected = null;
    String actual = LZMAUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilename_invalid_tALV3_fid2() {
    String fileName = "file.txt";
    String expected = null;
    String actual = LZMAUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilename_emptyExtension_foSD5_fid2() {
    String fileName = "file.txt.";
    String expected = "file.txt";
    String actual = LZMAUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilename_invalidExtension_hGcT6_fid2() {
    String fileName = "file.txt.zip";
    String expected = null;
    String actual = LZMAUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilename_invalidPath_GCgT10_fid2() {
    String fileName = "path/to/file.txt";
    String expected = null;
    String actual = LZMAUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_Null_qMEf1_fid2() {
    String fileName = null;
    assertFalse(LZMAUtils.isCompressedFilename(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_ValidGZFile_Zovb6_fid2() {
    String fileName = "file.gz";
    assertTrue(LZMAUtils.isCompressedFilename(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_ValidGZFileWithPath_NGBF7_fid2() {
    String fileName = "path/to/file.gz";
    assertTrue(LZMAUtils.isCompressedFilename(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_ValidXZFile_HxAQ10_fid2() {
    String fileName = "file.xz";
    assertTrue(LZMAUtils.isCompressedFilename(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_ValidXZFileWithPath_oqzW11_fid2() {
    String fileName = "path/to/file.xz";
    assertTrue(LZMAUtils.isCompressedFilename(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_ValidBZ2File_kezf14_fid2() {
    String fileName = "file.bz2";
    assertTrue(LZMAUtils.isCompressedFilename(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_ValidBZ2FileWithPath_MGNT15_fid2() {
    String fileName = "path/to/file.bz2";
    assertTrue(LZMAUtils.isCompressedFilename(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_null_txth0_fid2() {
    String fileName = null;
    String expected = null;
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_nullExtension_hKfk4_fid2() {
    String fileName = "file.txt.";
    String expected = "file.txt";
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_invalidExtension_yTZd6_fid2() {
    String fileName = "file.txt.invalid";
    String expected = "file.txt";
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_invalidFileNameAndExtension_KCyZ14_fid2() {
    String fileName = "file.txt.invalid.lzma";
    String expected = "file.txt";
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_emptyFileName_FUBb0() {
    String fileName = "";
    String expected = "";
    String actual = LZMAUtils.getCompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_nullFileName_QaYa1() {
    String fileName = null;
    String expected = null;
    String actual = LZMAUtils.getCompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_validFileNameWithDotAtEndAndStart_TorL12() {
    String fileName = "file.txt..";
    String expected = "file.txt..lzma";
    String actual = LZMAUtils.getCompressedFileName(fileName);
    assertEquals(expected, actual);
}
}