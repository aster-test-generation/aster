/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.nio.file.attribute.FileTime;
import java.time.Instant;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TimeUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_nonUnixTime_rZyi1() {
    FileTime time = FileTime.fromMillis(1000);
    assertFalse(TimeUtils.isUnixTime(time));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_InvalidSeconds_YBFJ1() {
    long seconds = -1000000000L;
    assertFalse(TimeUtils.isUnixTime(seconds));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDate_invalidFileTime_jRqH2() {
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() - 10000000000L);
    Date expectedDate = new Date(fileTime.toMillis());
    Date actualDate = TimeUtils.toDate(fileTime);
    assertNotEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToFileTime_HAdI0() {
    long ntfsTime = 1234567890;
    FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
    assertEquals(1234567890, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToFileTime_zero_zvnA1() {
    long ntfsTime = 0;
    FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
    assertEquals(0, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToFileTime_negative_ertP2() {
    long ntfsTime = -1;
    FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
    assertEquals(-1, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTime_ValidInput_Ibax0() {
    long time = 1000000000;
    FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
    assertEquals(time, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTime_InvalidInput_Dxhp1() {
    long time = -1;
    try {
        TimeUtils.unixTimeToFileTime(time);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid time value: -1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_YJes0() {
    long javaTime = 1000000000000L;
    long expectedNtfsTime = 116444736000000000L;
    long actualNtfsTime = TimeUtils.toNtfsTime(javaTime);
    assertEquals(expectedNtfsTime, actualNtfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_zero_ylKZ1() {
    long javaTime = 0L;
    long expectedNtfsTime = 0L;
    long actualNtfsTime = TimeUtils.toNtfsTime(javaTime);
    assertEquals(expectedNtfsTime, actualNtfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_negative_poCu2() {
    long javaTime = -1000000000000L;
    long expectedNtfsTime = -116444736000000000L;
    long actualNtfsTime = TimeUtils.toNtfsTime(javaTime);
    assertEquals(expectedNtfsTime, actualNtfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDate_XtcK0() {
    long ntfsTime = 1234567890;
    Date expected = new Date(ntfsTime * 1000);
    Date actual = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDateWithNegativeValue_vvbu1() {
    long ntfsTime = -1234567890;
    Date expected = new Date(ntfsTime * 1000);
    Date actual = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDateWithZeroValue_UXkG2() {
    long ntfsTime = 0;
    Date expected = new Date(ntfsTime * 1000);
    Date actual = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDateWithMaxValue_ZZEm3() {
    long ntfsTime = Long.MAX_VALUE;
    Date expected = new Date(ntfsTime * 1000);
    Date actual = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDateWithMinValue_AKPo4() {
    long ntfsTime = Long.MIN_VALUE;
    Date expected = new Date(ntfsTime * 1000);
    Date actual = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDateWithInvalidValue_YWVT5() {
    long ntfsTime = -1;
    Date expected = new Date(ntfsTime * 1000);
    Date actual = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateToHundredNanos_1_iITy0() {
    FileTime fileTime = FileTime.from(Instant.ofEpochSecond(1000, 1000));
    FileTime result = TimeUtils.truncateToHundredNanos(fileTime);
    assertEquals(FileTime.from(Instant.ofEpochSecond(1000, 100000)), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_xuSF0_BCoB0() {
    FileTime fileTime = FileTime.fromMillis(1000000000000L);
    long expected = 116444736000000000L;
    long actual = TimeUtils.toNtfsTime(fileTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDate_XtcK0_fid2() {
    long ntfsTime = 1234567890;
    Date expected = new Date(ntfsTime * 1000);
    Date actual = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expected.getTime(), actual.getTime());
}
}