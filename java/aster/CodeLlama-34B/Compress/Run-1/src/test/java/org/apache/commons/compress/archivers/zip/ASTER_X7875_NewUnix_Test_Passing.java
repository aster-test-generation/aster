/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X7875_NewUnix_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_MbKk0() {
    X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
    ZipShort headerId = x7875_NewUnix.getHeaderId();
    assertEquals(headerId.getValue(), 0x7875);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_XDmW0() {
    X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
    byte[] centralDirectoryData = x7875_NewUnix.getCentralDirectoryData();
    assertEquals(ByteUtils.EMPTY_BYTE_ARRAY, centralDirectoryData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_TJNv0() {
    X7875_NewUnix x = new X7875_NewUnix();
    assertTrue(x.equals(x));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullInput_zJXA0() {
    byte[] input = null;
    byte[] expected = null;
    byte[] actual = X7875_NewUnix.trimLeadingZeroesForceMinLength(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLeadingZeroes_sPJc2() {
    byte[] input = new byte[] {0, 0, 0, 1, 2, 3};
    byte[] expected = new byte[] {1, 2, 3};
    byte[] actual = X7875_NewUnix.trimLeadingZeroesForceMinLength(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNoLeadingZeroes_bTWF3() {
    byte[] input = new byte[] {1, 2, 3};
    byte[] expected = new byte[] {1, 2, 3};
    byte[] actual = X7875_NewUnix.trimLeadingZeroesForceMinLength(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_version_zXwf0() {
    X7875_NewUnix x7875 = new X7875_NewUnix();
    byte[] data = x7875.getLocalFileDataData();
    assertEquals(1, data[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_ValidInput_sLyr0() {
    X7875_NewUnix x7875 = new X7875_NewUnix();
    long l = 1234567890L;
    x7875.setGID(l);
    assertEquals(l, x7875.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_MaxValue_UcSN3() {
    X7875_NewUnix x7875 = new X7875_NewUnix();
    long l = Long.MAX_VALUE;
    x7875.setGID(l);
    assertEquals(l, x7875.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_Zero_KNHe5() {
    X7875_NewUnix x7875 = new X7875_NewUnix();
    long l = 0L;
    x7875.setGID(l);
    assertEquals(l, x7875.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_cGEx0() throws CloneNotSupportedException {
    X7875_NewUnix obj = new X7875_NewUnix();
    Object clone = obj.clone();
    assertNotNull(clone);
    assertEquals(obj.getClass(), clone.getClass());
    assertEquals(obj.hashCode(), clone.hashCode());
    assertEquals(obj.toString(), clone.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdCoverage_AQJn1_3() {
    X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
    ZipShort headerId = x7875_NewUnix.getHeaderId();
    assertEquals(headerId.hashCode(), 0x7875);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdCoverage_AQJn1_4() {
    X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
    ZipShort headerId = x7875_NewUnix.getHeaderId();
    assertEquals(ZipShort.getValue(headerId.getBytes()), 0x7875);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdCoverage_AQJn1_5() {
    X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
    ZipShort headerId = x7875_NewUnix.getHeaderId();
    assertEquals(ZipShort.getValue(headerId.getBytes(), 0), 0x7875);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_Qaah0_1() {
    X7875_NewUnix x7875 = new X7875_NewUnix();
    ZipShort centralDirectoryLength = x7875.getCentralDirectoryLength();
    assertEquals(0, centralDirectoryLength.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_cGEx0_1() throws CloneNotSupportedException {
    X7875_NewUnix obj = new X7875_NewUnix();
    Object clone = obj.clone();
    assertNotNull(clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_cGEx0_2() throws CloneNotSupportedException {
    X7875_NewUnix obj = new X7875_NewUnix();
    Object clone = obj.clone();
    assertEquals(obj.getClass(), clone.getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_cGEx0_3() throws CloneNotSupportedException {
    X7875_NewUnix obj = new X7875_NewUnix();
    Object clone = obj.clone();
    assertEquals(obj.hashCode(), clone.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_cGEx0_4() throws CloneNotSupportedException {
    X7875_NewUnix obj = new X7875_NewUnix();
    Object clone = obj.clone();
    assertEquals(obj.toString(), clone.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_NullInput_bFcZ2_uxcf0() {
    X7875_NewUnix x7875 = new X7875_NewUnix();
    long l = 0L;
    x7875.setGID(l);
    assertEquals(0L, x7875.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID_nLzp1000() {
        X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
        long gid = x7875_NewUnix.getGID();
        assertEquals(1000, gid);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_dAdF1_fid2() {
    X7875_NewUnix x = new X7875_NewUnix();
    X7875_NewUnix y = new X7875_NewUnix();
    assertTrue(x.equals(y));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEmptyInput_MIoq1_fid2() {
    byte[] input = new byte[0];
    byte[] expected = new byte[1];
    byte[] actual = X7875_NewUnix.trimLeadingZeroesForceMinLength(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_InvalidUidSize_fMFM2_fid2() {
    X7875_NewUnix x7875 = new X7875_NewUnix();
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    int offset = 0;
    int length = data.length;
    try {
        x7875.parseFromLocalFileData(data, offset, length);
        assertTrue(true);
    } catch (ZipException e) {
        assertEquals("X7875_NewUnix invalid: uidSize 2 doesn't fit into 10 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_InvalidGidSize_aGwB3_fid2() {
    X7875_NewUnix x7875 = new X7875_NewUnix();
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    int offset = 0;
    int length = data.length;
    try {
        x7875.parseFromLocalFileData(data, offset, length);
    } catch (ZipException e) {
        assertEquals("X7875_NewUnix invalid: gidSize 3 doesn't fit into 10 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_Lbiy0_fid2() {
    X7875_NewUnix x7875 = new X7875_NewUnix();
    String expected = "0x7875 Zip Extra Field: UID=1000 GID=1000";
    String actual = x7875.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithUID_lOjC1_fid2() {
    X7875_NewUnix x7875 = new X7875_NewUnix();
    x7875.setUID(1234);
    String expected = "0x7875 Zip Extra Field: UID=1234 GID=1000";
    String actual = x7875.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithGID_bPmg2_fid2() {
    X7875_NewUnix x7875 = new X7875_NewUnix();
    x7875.setGID(5678);
    String expected = "0x7875 Zip Extra Field: UID=0 GID=5678";
    String actual = x7875.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_uidBytes_Fjxz2_fid2() {
    X7875_NewUnix x7875 = new X7875_NewUnix();
    byte[] data = x7875.getLocalFileDataData();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUID_FRba0_fid2() {
    X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
    long l = 1234567890;
    x7875_NewUnix.setUID(l);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUIDNegative_oPGL1_fid2() {
    X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
    long l = -1234567890;
    x7875_NewUnix.setUID(l);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_InvalidInput_AWQu1_fid2() {
    X7875_NewUnix x7875 = new X7875_NewUnix();
    long l = -1L;
    x7875.setGID(l);
    assertEquals(4294967295L, x7875.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_Negative_JcHd6_fid2() {
    X7875_NewUnix x7875 = new X7875_NewUnix();
    long l =3060399406L;
    x7875.setGID(l);
    assertEquals(l, x7875.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_KKUe0_fid2() {
    X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
    long uid = x7875_NewUnix.getUID();
    assertEquals(uid,1000L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_Qaah2_2() {
    X7875_NewUnix x7875 = new X7875_NewUnix();
    ZipShort centralDirectoryLength = x7875.getCentralDirectoryLength();
    assertEquals(2, centralDirectoryLength.getBytes().length);}
}