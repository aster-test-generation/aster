/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.jar.JarOutputStream;
import org.apache.commons.io.input.BoundedInputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200UnpackerAdapter_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpack_nullOutputStream_qQaK1() throws IOException {
    Pack200UnpackerAdapter unpacker = new Pack200UnpackerAdapter();
    File file = new File("test.jar");
    JarOutputStream out = null;
    try {
        unpacker.unpack(file, out);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Must specify both input and output streams", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStream_TtRi0_JWod0() throws IOException, URISyntaxException {
    URL url = new URL("https://www.example.com");
    BoundedInputStream boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream(url.getPath());
    assertNotNull(boundedInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithEmptyPath_ihZm4_fid1() throws IOException {
    String path = "";
    BoundedInputStream bis = Pack200UnpackerAdapter.newBoundedInputStream(path);
    assertNotNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithEmptyPaths_MDvT7_fid1() throws IOException {
    String path1 = "";
    String path2 = "";
    BoundedInputStream bis = Pack200UnpackerAdapter.newBoundedInputStream(path1, path2);
    assertNotNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithInvalidURL_kcXT2_AsUR0_fid1() throws IOException, URISyntaxException {
    URL url = new URL("https://www.example.com");
    url.openConnection().setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36");
    BoundedInputStream boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream(url.getPath());
    assertNotNull(boundedInputStream);
}
}