/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileNameUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_emptyFileName_qOkA0() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    String compressedFileName = fileNameUtil.getCompressedFileName("");
    assertEquals("", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_shortFileName_TRZd1() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    String compressedFileName = fileNameUtil.getCompressedFileName("file");
    assertEquals("file", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_longFileName_CenQ2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    String compressedFileName = fileNameUtil.getCompressedFileName("file.txt.gz");
    assertEquals("file.txt.gz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_defaultExtension_aHeb3() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    String compressedFileName = fileNameUtil.getCompressedFileName("file");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_emptyFileName_VVuh0() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFilename(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_invalidFileName_vIeK2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFilename("file.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_validFileName_Ocab3() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFilename("file.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_validFileNameWithExtension_yeZU4() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_validFileNameWithMultipleExtensions_rQUY5() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFilename("file.zip.txt.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_validFileNameWithoutExtension_MAHS6() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFilename("file"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_validFileNameWithDotAtEnd_dhIo7() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFilename("file."));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_validFileNameWithDotAtStart_cAzk8() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFilename(".file"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_validFileNameWithDotInMiddle_uond9() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFilename("file.txt.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName1_Vabn0() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    uncompressSuffix.put("rar", "");
    String defaultExtension = "txt";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    String fileName = "file.zip";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFileName(fileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName2_rMWl1() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    uncompressSuffix.put("rar", "");
    String defaultExtension = "txt";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    String fileName = "file.rar";
    String expected = "file.";
    String actual = fileNameUtil.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName3_SSAi2() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    uncompressSuffix.put("rar", "");
    String defaultExtension = "txt";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    String fileName = "file.txt";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_EmptyFileName_LGiU0() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFileName(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_ValidCompressedFileName_GYFE1() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "zip");
    assertTrue(fileNameUtil.isCompressedFileName("file.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_InvalidCompressedFileName_Alhe2() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "zip");
    assertFalse(fileNameUtil.isCompressedFileName("file.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_ValidCompressedFileNameWithLongSuffix_gMtJ3() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "zip");
    assertTrue(fileNameUtil.isCompressedFileName("file.zip.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_InvalidCompressedFileNameWithLongSuffix_ejwl4() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "zip");
    assertTrue(fileNameUtil.isCompressedFileName("file.txt.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_ValidCompressedFileNameWithShortSuffix_hAEv5() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "zip");
    assertFalse(fileNameUtil.isCompressedFileName("file.z"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_InvalidCompressedFileNameWithShortSuffix_hlTK6() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "zip");
    assertFalse(fileNameUtil.isCompressedFileName("file.t"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_ValidCompressedFileNameWithMultipleSuffixes_pIMG9_1() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    uncompressSuffix.put("rar", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "zip");
    assertTrue(fileNameUtil.isCompressedFileName("file.zip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_ValidCompressedFileNameWithMultipleSuffixes_pIMG9_2() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    uncompressSuffix.put("rar", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "zip");
    assertTrue(fileNameUtil.isCompressedFileName("file.rar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithSuffix_gwvb1() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    String fileName = "file.txt.gz";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithDefaultExtensionAndMultipleSuffix_NyvX5() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    String fileName = "file.txt.gz.bz2";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithCustomSuffixAndMultipleSuffixAndDefaultExtensionAndCustomSuffix_ychK10() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    String fileName = "file.txt.custom.gz.custom";
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilename_eBWp0() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "");
    String fileName = "file.txt";
    String expected = "file.txt";
    String actual = fileNameUtil.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithSuffix_YDql1() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "gz");
    String fileName = "file.txt";
    String expected = "file.txt.gz";
    String actual = fileNameUtil.getCompressedFilename(fileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithDefaultExtension_giLI2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "txt");
    String fileName = "file.txt";
    String expected = "file.txttxt";
    String actual = fileNameUtil.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithMultipleSuffix_cuGr3() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "gz");
    String fileName = "file.txt.gz";
    String expected = "file.txt.gzgz";
    String actual = fileNameUtil.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithMultipleDefaultExtension_vicG4() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "txt");
    String fileName = "file.txt.txt";
    String expected = "file.txt.txttxt";
    String actual = fileNameUtil.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithMultipleSuffixAndDefaultExtension_zOdy5() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "gz");
    String fileName = "file.txt.gz.txt";
    String expected = "file.txt.gz.txtgz";
    String actual = fileNameUtil.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithMultipleDefaultExtensionAndSuffix_LrvR6() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "txt");
    String fileName = "file.txt.txt.gz";
    String expected = "file.txt.txt.gz.txt";
    String actual = fileNameUtil.getCompressedFilename(fileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithInvalidFileName_atbe10() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "");
}
}