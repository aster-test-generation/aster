/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X0016_CertificateIdForCentralDirectory_Test_Passing {
X0016_CertificateIdForCentralDirectory certificateIdForCentralDirectory = new X0016_CertificateIdForCentralDirectory();
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_vdPJ0() {
        certificateIdForCentralDirectory = new X0016_CertificateIdForCentralDirectory();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordCount_HrdH1() {
        int expected = 10;
        int actual = certificateIdForCentralDirectory.getRecordCount();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordCountWithZeroRecords_MpiJ2() {
        int expected = 0;
        int actual = certificateIdForCentralDirectory.getRecordCount();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordCountWithNegativeRecords_GsHC3() {
        int expected = -1;
        int actual = certificateIdForCentralDirectory.getRecordCount();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordCountWithLargeRecords_nliJ4() {
        int expected = 1000;
        int actual = certificateIdForCentralDirectory.getRecordCount();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setUp_vdPJ0_dfKy0() {
    X0016_CertificateIdForCentralDirectory certificateIdForCentralDirectory = new X0016_CertificateIdForCentralDirectory();
    assertEquals(0, certificateIdForCentralDirectory.getRecordCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRecordCountWithNegativeRecords_GsHC3_NduO1() {
    X0016_CertificateIdForCentralDirectory certificateIdForCentralDirectory = new X0016_CertificateIdForCentralDirectory();
    int expected = -1;
    int actual = certificateIdForCentralDirectory.getRecordCount();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRecordCountWithLargeRecords_nliJ4_zBFR1() {
    int expected = 1000;
    X0016_CertificateIdForCentralDirectory certificateIdForCentralDirectory = new X0016_CertificateIdForCentralDirectory();
    int actual = certificateIdForCentralDirectory.getRecordCount();
    assertEquals(expected, actual);
}
}