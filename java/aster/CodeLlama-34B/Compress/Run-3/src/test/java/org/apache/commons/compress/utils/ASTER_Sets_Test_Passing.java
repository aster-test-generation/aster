/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.HashSet;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sets_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_empty_Sbdp0() {
    HashSet<String> set = Sets.newHashSet();
    assertTrue(set.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_singleElement_LrKy1_1() {
    HashSet<String> set = Sets.newHashSet("apple");
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_singleElement_LrKy1_2() {
    HashSet<String> set = Sets.newHashSet("apple");
    assertTrue(set.contains("apple"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_multipleElements_FDXa2_1() {
    HashSet<String> set = Sets.newHashSet("apple", "banana", "cherry");
    assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_multipleElements_FDXa2_2() {
    HashSet<String> set = Sets.newHashSet("apple", "banana", "cherry");
    assertTrue(set.contains("apple"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_multipleElements_FDXa2_3() {
    HashSet<String> set = Sets.newHashSet("apple", "banana", "cherry");
    assertTrue(set.contains("banana"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_multipleElements_FDXa2_4() {
    HashSet<String> set = Sets.newHashSet("apple", "banana", "cherry");
    assertTrue(set.contains("cherry"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullElement_kcJS3_1() {
    HashSet<String> set = Sets.newHashSet((String) null);
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullElement_kcJS3_2() {
    HashSet<String> set = Sets.newHashSet((String) null);
    assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_duplicateElements_hFzv4_1() {
    HashSet<String> set = Sets.newHashSet("apple", "apple", "banana");
    assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_duplicateElements_hFzv4_2() {
    HashSet<String> set = Sets.newHashSet("apple", "apple", "banana");
    assertTrue(set.contains("apple"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_duplicateElements_hFzv4_3() {
    HashSet<String> set = Sets.newHashSet("apple", "apple", "banana");
    assertTrue(set.contains("banana"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullElements_ONjd5() {
    HashSet<String> set = Sets.newHashSet((String[]) null);
    assertEquals(0, set.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_emptyArray_uowF6() {
    HashSet<String> set = Sets.newHashSet(new String[0]);
    assertEquals(0, set.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullArrayElement_ZHxM8_1() {
    HashSet<String> set = Sets.newHashSet(new String[] { null });
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullArrayElement_ZHxM8_2() {
    HashSet<String> set = Sets.newHashSet(new String[] { null });
    assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullArrayElements_GFJS9_1() {
    HashSet<String> set = Sets.newHashSet(new String[] { null, null });
    assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullArrayElements_GFJS9_2() {
    HashSet<String> set = Sets.newHashSet(new String[] { null, null });
    assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullArrayAndElements_uuNi10_1() {
    HashSet<String> set = Sets.newHashSet(new String[] { null, "apple" });
    assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullArrayAndElements_uuNi10_2() {
    HashSet<String> set = Sets.newHashSet(new String[] { null, "apple" });
    assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullArrayAndElements_uuNi10_3() {
    HashSet<String> set = Sets.newHashSet(new String[] { null, "apple" });
    assertTrue(set.contains("apple"));}
}