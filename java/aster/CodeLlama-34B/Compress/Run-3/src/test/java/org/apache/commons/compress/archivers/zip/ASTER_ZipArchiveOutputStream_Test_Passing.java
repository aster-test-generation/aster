/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.util.LinkedList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveOutputStream_Test_Passing {
private long cdDiskNumberStart;
private StreamCompressor streamCompressor;
private long cdOffset;
private OutputStream outputStream;
private long eocdLength;
private List<ZipArchiveEntry> entries = new LinkedList<>();
        private long bytesRead;
        private long dataStart;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSeekable_OutputStream_boiC4() {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    assertFalse(zipOutputStream.isSeekable());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_alreadyFinished_wugd0() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipOutputStream.finish();
    try {
        zipOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("This archive has already been finished", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithComment_KNdS4() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.setComment("test comment");
    zipArchiveOutputStream.finish();
    assertTrue(zipArchiveOutputStream.finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_whenCommentIsNotNull_wYlO4() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipOutputStream.setComment("This is a comment");
    zipOutputStream.finish();
    assertTrue(zipOutputStream.finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithComment_fUlf4() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry zipEntry = new ZipArchiveEntry("test.txt");
    zipOutputStream.putArchiveEntry(zipEntry);
    zipOutputStream.write("Hello World!".getBytes());
    zipOutputStream.closeArchiveEntry();
    zipOutputStream.setComment("This is a comment");
    zipOutputStream.finish();
    assertTrue(zipOutputStream.finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinish_nrHi0() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipArchiveOutputStream.finish();
        assertTrue(zipArchiveOutputStream.finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithSplitZip_mOwO2() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024 * 1024);
        zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
        zipArchiveOutputStream.write(new byte[1024 * 1024]);
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.finish();
        assertTrue(zipArchiveOutputStream.finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithZip64_hmWo3() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
        zipArchiveOutputStream.write(new byte[1024 * 1024]);
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.finish();
        assertTrue(zipArchiveOutputStream.finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithComment_IiuP4() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipArchiveOutputStream.setComment("This is a comment");
        zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
        zipArchiveOutputStream.write(new byte[1024 * 1024]);
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.finish();
        assertTrue(zipArchiveOutputStream.finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithClosedOutputStream_cjSm6() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
        zipArchiveOutputStream.write(new byte[1024 * 1024]);
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.close();
        zipArchiveOutputStream.finish();
        assertTrue(zipArchiveOutputStream.finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithSplitZipAndClosedOutputStream_buLX7() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024 * 1024);
        zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
        zipArchiveOutputStream.write(new byte[1024 * 1024]);
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.close();
        zipArchiveOutputStream.finish();
        assertTrue(zipArchiveOutputStream.finished);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithComment_yVLJ4() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
    zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
    zipArchiveOutputStream.write("test".getBytes());
    zipArchiveOutputStream.closeArchiveEntry();
    zipArchiveOutputStream.setComment("test comment");
    zipArchiveOutputStream.finish();
    assertTrue(zipArchiveOutputStream.finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOutWithInvalidData_Jcat1() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[] {1, 2, 3, 4, 5};
    zipOutputStream.writeOut(data, -1, data.length);
    assertThrows(IndexOutOfBoundsException.class, () -> zipOutputStream.writeOut(data, -1, data.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOutWithInvalidLength_xXsg2() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[] {1, 2, 3, 4, 5};
    zipOutputStream.writeOut(data, 0, -1);
    assertThrows(IndexOutOfBoundsException.class, () -> zipOutputStream.writeOut(data, 0, -1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOutWithNullData_DFvr3() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipOutputStream.writeOut(null, 0, 0);
    assertThrows(NullPointerException.class, () -> zipOutputStream.writeOut(null, 0, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithZip64RequiredExceptionAndNeverMode_Ogcs4() throws IOException {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWrittenWithFile_QFjZ2() throws IOException {
    File file = new File("test.zip");
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(file);
    byte[] data = "Hello, World!".getBytes();
    zipOutputStream.write(data);
    long bytesWritten = zipOutputStream.getBytesWritten();
    assertEquals(data.length, bytesWritten);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWrittenWithOutputStream_nxvp4() throws IOException {
    OutputStream out = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(out);
    byte[] data = "Hello, World!".getBytes();
    zipOutputStream.write(data);
    long bytesWritten = zipOutputStream.getBytesWritten();
    assertEquals(data.length, bytesWritten);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreambleWithInvalidOffset_ZFya2() throws IOException {
    byte[] preamble = new byte[10];
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    try {
        zos.writePreamble(preamble, -1, 5);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreambleWithInvalidLength_nchx3() throws IOException {
    byte[] preamble = new byte[10];
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    try {
        zos.writePreamble(preamble, 0, -1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreambleWithNullPreamble_lgvu4() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    try {
        zos.writePreamble(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSeekable_RandomAccessOutputStream_tzaS0_ycKR0() {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    assertTrue(zipOutputStream.isSeekable());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreambleWithEmptyPreamble_BZfA5_jhmi1() throws IOException {
    byte[] preamble = new byte[0];
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.writePreamble(preamble);
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSeekable_File_WWyd2_itYB0() {
    try {
        ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        assertTrue(zipOutputStream.isSeekable());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSeekable_File_NotSeekable_TmnE6_nALE0() {
    try {
        ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        assertFalse(zipOutputStream.isSeekable());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEncoding_default_AEPO0_OvTp0() {
    try {
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
        String encoding = zos.getEncoding();
        assertEquals("UTF-8", encoding);
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEncoding_fileAndSplitSize_ilHr2_OzLn0() {
    try {
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"), 1024);
        String encoding = zos.getEncoding();
        assertEquals("UTF-8", encoding);
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLevel_InvalidLevel_JEQR1_KyvG0() {
    try {
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
        zos.setLevel(10);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid compression level: 10", e.getMessage());
    } catch (IOException e) {
        fail("Unexpected IOException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryData_ZipArchiveEntry_ePWA0_grGV0() {
    ZipArchiveOutputStream zos = null;
    try {
        zos = new ZipArchiveOutputStream(new File("test.zip"));
    } catch (IOException e) {
        e.printStackTrace();
    }
    ZipArchiveEntry zae = new ZipArchiveEntry("test.txt");
    zae.setMethod(ZipMethod.DEFLATED.getCode());
    assertTrue(zos.canWriteEntryData(zae));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryData_ImplodingMethod_nnoF2_vfeu0() {
    ZipArchiveOutputStream zos = null;
    try {
        zos = new ZipArchiveOutputStream(new File("test.zip"));
    } catch (IOException e) {
        e.printStackTrace();
    }
    ZipArchiveEntry zae = new ZipArchiveEntry("test.txt");
    zae.setMethod(ZipMethod.IMPLODING.getCode());
    assertFalse(zos.canWriteEntryData(zae));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryData_UnshrinkingMethod_gDcV3_vLnL0() {
    try {
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry zae = new ZipArchiveEntry("test.txt");
        zae.setMethod(ZipMethod.UNSHRINKING.getCode());
        assertFalse(zos.canWriteEntryData(zae));
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryData_InvalidMethod_QAJp4_VdAs0() {
    try {
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry zae = new ZipArchiveEntry("test.txt");
        zae.setMethod(999); // invalid method
        assertFalse(zos.canWriteEntryData(zae));
    } catch (IOException e) {
        e.printStackTrace();
    }
}
}