/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.io.IOException;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCalculateChecksum_ValidInput_nFAX0() {
    byte[] buffer = new byte[1024];
    for (int i = 0; i < 256; i++) {
        buffer[4 * i] = (byte) (i % 256);
    }
    int expectedChecksum = 0;
    for (int i = 0; i < 256; i++) {
        expectedChecksum += DumpArchiveUtil.convert32(buffer, 4 * i);
    }
    expectedChecksum = DumpArchiveConstants.CHECKSUM - (expectedChecksum - DumpArchiveUtil.convert32(buffer, 28));
    int actualChecksum = DumpArchiveUtil.calculateChecksum(buffer);
    assertEquals(expectedChecksum, actualChecksum);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCalculateChecksum_InvalidInput_ClBr1() {
    byte[] buffer = new byte[1024];
    for (int i = 0; i < 256; i++) {
        buffer[4 * i] = (byte) (i % 256);
    }
    int expectedChecksum = 0;
    for (int i = 0; i < 256; i++) {
        expectedChecksum += DumpArchiveUtil.convert32(buffer, 4 * i);
    }
    expectedChecksum = DumpArchiveConstants.CHECKSUM - (expectedChecksum - DumpArchiveUtil.convert32(buffer, 28));
    int actualChecksum = DumpArchiveUtil.calculateChecksum(buffer);
    assertNotEquals(expectedChecksum, actualChecksum);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_1_KgEA0() {
    byte[] buffer = new byte[8];
    int offset = 0;
    long expected = 0;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_2_IAaN1() {
    byte[] buffer = new byte[8];
    int offset = 1;
    long expected = 1;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_3_habM2() {
    byte[] buffer = new byte[8];
    int offset = 2;
    long expected = 2;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_4_ruhV3() {
    byte[] buffer = new byte[8];
    int offset = 3;
    long expected = 3;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_5_MYsV4() {
    byte[] buffer = new byte[8];
    int offset = 4;
    long expected = 4;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_6_MktS5() {
    byte[] buffer = new byte[8];
    int offset = 5;
    long expected = 5;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_7_KqOn6() {
    byte[] buffer = new byte[8];
    int offset = 6;
    long expected = 6;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_8_WVEh7() {
    byte[] buffer = new byte[8];
    int offset = 7;
    long expected = 7;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_9_GxiR8() {
    byte[] buffer = new byte[8];
    int offset = 8;
    long expected = 8;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_10_opsW9() {
    byte[] buffer = new byte[8];
    int offset = 9;
    long expected = 9;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_11_TuRO10() {
    byte[] buffer = new byte[8];
    int offset = 10;
    long expected = 10;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_12_gCHH11() {
    byte[] buffer = new byte[8];
    int offset = 11;
    long expected = 11;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_13_IoYZ12() {
    byte[] buffer = new byte[8];
    int offset = 12;
    long expected = 12;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIno_fJvv0() {
    byte[] buffer = new byte[24];
    int ino = DumpArchiveUtil.getIno(buffer);
    assertEquals(0, ino);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInoWithNonZeroBuffer_uhjg1() {
    byte[] buffer = new byte[24];
    buffer[0] = 1;
    int ino = DumpArchiveUtil.getIno(buffer);
    assertEquals(1, ino);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInoWithNegativeBuffer_InVW2() {
    byte[] buffer = new byte[24];
    buffer[0] = -1;
    int ino = DumpArchiveUtil.getIno(buffer);
    assertEquals(-1, ino);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInoWithMaxValueBuffer_hHQJ3() {
    byte[] buffer = new byte[24];
    buffer[0] = Byte.MAX_VALUE;
    int ino = DumpArchiveUtil.getIno(buffer);
    assertEquals(Byte.MAX_VALUE, ino);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInoWithMinValueBuffer_irof4() {
    byte[] buffer = new byte[24];
    buffer[0] = Byte.MIN_VALUE;
    int ino = DumpArchiveUtil.getIno(buffer);
    assertEquals(Byte.MIN_VALUE, ino);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInoWithNullBuffer_ctrf5() {
    byte[] buffer = null;
    int ino = DumpArchiveUtil.getIno(buffer);
    assertEquals(0, ino);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInoWithEmptyBuffer_EorN6() {
    byte[] buffer = new byte[0];
    int ino = DumpArchiveUtil.getIno(buffer);
    assertEquals(0, ino);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInoWithInvalidBuffer_KTGr7() {
    byte[] buffer = new byte[24];
    buffer[0] = 1;
    buffer[1] = 2;
    int ino = DumpArchiveUtil.getIno(buffer);
    assertEquals(1, ino);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInoWithInvalidBuffer2_aGtR8() {
    byte[] buffer = new byte[24];
    buffer[0] = 1;
    buffer[1] = 2;
    buffer[2] = 3;
    int ino = DumpArchiveUtil.getIno(buffer);
    assertEquals(1, ino);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInoWithInvalidBuffer3_wDhr9() {
    byte[] buffer = new byte[24];
    buffer[0] = 1;
    buffer[1] = 2;
    buffer[2] = 3;
    buffer[3] = 4;
    int ino = DumpArchiveUtil.getIno(buffer);
    assertEquals(1, ino);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInoWithInvalidBuffer4_vCSZ10() {
    byte[] buffer = new byte[24];
    buffer[0] = 1;
    buffer[1] = 2;
    buffer[2] = 3;
    buffer[3] = 4;
    buffer[4] = 5;
    int ino = DumpArchiveUtil.getIno(buffer);
    assertEquals(1, ino);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInoWithInvalidBuffer5_cprV11() {
    byte[] buffer = new byte[24];
    buffer[0] = 1;
    buffer[1] = 2;
    buffer[2] = 3;
    buffer[3] = 4;
    buffer[4] = 5;
    buffer[5] = 6;
    int ino = DumpArchiveUtil.getIno(buffer);
    assertEquals(1, ino);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInoWithInvalidBuffer6_wvzl12() {
    byte[] buffer = new byte[24];
    buffer[0] = 1;
    buffer[1] = 2;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_1_IpJz0() {
    byte[] buffer = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int offset = 2;
    int result = DumpArchiveUtil.convert16(buffer, offset);
    assertEquals(0x0304, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_2_ondK1() {
    byte[] buffer = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int offset = 4;
    int result = DumpArchiveUtil.convert16(buffer, offset);
    assertEquals(0x0506, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_3_Omxg2() {
    byte[] buffer = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int offset = 6;
    int result = DumpArchiveUtil.convert16(buffer, offset);
    assertEquals(0x0708, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_4_uOIL3() {
    byte[] buffer = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int offset = 8;
    int result = DumpArchiveUtil.convert16(buffer, offset);
    assertEquals(0x090A, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_5_hFZu4() {
    byte[] buffer = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int offset = 10;
    int result = DumpArchiveUtil.convert16(buffer, offset);
    assertEquals(0x0B0C, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_6_ShMz5() {
    byte[] buffer = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int offset = 12;
    int result = DumpArchiveUtil.convert16(buffer, offset);
    assertEquals(0x0D0E, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_7_QUfD6() {
    byte[] buffer = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int offset = 14;
    int result = DumpArchiveUtil.convert16(buffer, offset);
    assertEquals(0x0F10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_8_rgDL7() {
    byte[] buffer = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int offset = 16;
    int result = DumpArchiveUtil.convert16(buffer, offset);
    assertEquals(0x1112, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeWithNullEncoding_Dull4() throws IOException {
    ZipEncoding encoding = null;
    byte[] b = new byte[10];
    int offset = 0;
    int len = 5;
    String expected = null;
    String actual = DumpArchiveUtil.decode(encoding, b, offset, len);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_1_dJSE0() {
    byte[] buffer = new byte[4];
    int offset = 0;
    int expected = 0;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_2_qBYp1() {
    byte[] buffer = new byte[4];
    int offset = 1;
    int expected = 1;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_3_tjII2() {
    byte[] buffer = new byte[4];
    int offset = 2;
    int expected = 2;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_4_nCYN3() {
    byte[] buffer = new byte[4];
    int offset = 3;
    int expected = 3;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_5_aEGh4() {
    byte[] buffer = new byte[4];
    int offset = 4;
    int expected = 4;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_6_ekwv5() {
    byte[] buffer = new byte[4];
    int offset = 5;
    int expected = 5;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_7_ankz6() {
    byte[] buffer = new byte[4];
    int offset = 6;
    int expected = 6;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_8_QiQS7() {
    byte[] buffer = new byte[4];
    int offset = 7;
    int expected = 7;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_9_XaZJ8() {
    byte[] buffer = new byte[4];
    int offset = 8;
    int expected = 8;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_10_ePMH9() {
    byte[] buffer = new byte[4];
    int offset = 9;
    int expected = 9;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_11_TtZA10() {
    byte[] buffer = new byte[4];
    int offset = 10;
    int expected = 10;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_12_YxHt11() {
    byte[] buffer = new byte[4];
    int offset = 11;
    int expected = 11;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_13_YSRs12() {
    byte[] buffer = new byte[4];
    int offset = 12;
    int expected = 12;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerify_nullBuffer_GmVY0() {
    byte[] buffer = null;
    assertFalse(DumpArchiveUtil.verify(buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerify_invalidMagic_jQgJ1() {
    byte[] buffer = new byte[32];
    buffer[24] = 0x01;
    buffer[25] = 0x02;
    buffer[26] = 0x03;
    buffer[27] = 0x04;
    assertFalse(DumpArchiveUtil.verify(buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerify_invalidChecksum_TDdi2() {
    byte[] buffer = new byte[32];
    buffer[24] = 0x01;
    buffer[25] = 0x02;
    buffer[26] = 0x03;
    buffer[27] = 0x04;
    buffer[28] = 0x05;
    buffer[29] = 0x06;
    buffer[30] = 0x07;
    buffer[31] = 0x08;
    assertFalse(DumpArchiveUtil.verify(buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerify_validBuffer_eZHe3() {
    byte[] buffer = new byte[32];
    buffer[24] = 0x01;
    buffer[25] = 0x02;
    buffer[26] = 0x03;
    buffer[27] = 0x04;
    buffer[28] = 0x05;
    buffer[29] = 0x06;
    buffer[30] = 0x07;
    buffer[31] = 0x08;
    assertTrue(DumpArchiveUtil.verify(buffer));
}
}