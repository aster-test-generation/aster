/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_NullArray_YuVd2() {
    LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(10, null, null, null, null, null);
    int[] startPCs = localVariableTableAttribute.getStartPCs();
    assertNull(startPCs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_InvalidLength_2_owib4_1() {
    LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(10, new int[] {1, 2, 3}, new int[] {4, 5, 6}, new CPUTF8[] {new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3")}, new CPUTF8[] {new CPUTF8("descriptor1"), new CPUTF8("descriptor2"), new CPUTF8("descriptor3")}, new int[] {7, 8, 9});
    int[] startPCs = localVariableTableAttribute.getStartPCs();
    assertEquals(3, startPCs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_InvalidLength_2_owib4_2() {
    LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(10, new int[] {1, 2, 3}, new int[] {4, 5, 6}, new CPUTF8[] {new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3")}, new CPUTF8[] {new CPUTF8("descriptor1"), new CPUTF8("descriptor2"), new CPUTF8("descriptor3")}, new int[] {7, 8, 9});
    int[] startPCs = localVariableTableAttribute.getStartPCs();
    assertEquals(1, startPCs[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_InvalidLength_2_owib4_3() {
    LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(10, new int[] {1, 2, 3}, new int[] {4, 5, 6}, new CPUTF8[] {new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3")}, new CPUTF8[] {new CPUTF8("descriptor1"), new CPUTF8("descriptor2"), new CPUTF8("descriptor3")}, new int[] {7, 8, 9});
    int[] startPCs = localVariableTableAttribute.getStartPCs();
    assertEquals(2, startPCs[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_InvalidLength_2_owib4_4() {
    LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(10, new int[] {1, 2, 3}, new int[] {4, 5, 6}, new CPUTF8[] {new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3")}, new CPUTF8[] {new CPUTF8("descriptor1"), new CPUTF8("descriptor2"), new CPUTF8("descriptor3")}, new int[] {7, 8, 9});
    int[] startPCs = localVariableTableAttribute.getStartPCs();
    assertEquals(3, startPCs[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_Wabe0() {
    LocalVariableTableAttribute attr = new LocalVariableTableAttribute(10, new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, new int[]{10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3"), new CPUTF8("name4"), new CPUTF8("name5"), new CPUTF8("name6"), new CPUTF8("name7"), new CPUTF8("name8"), new CPUTF8("name9"), new CPUTF8("name10")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2"), new CPUTF8("descriptor3"), new CPUTF8("descriptor4"), new CPUTF8("descriptor5"), new CPUTF8("descriptor6"), new CPUTF8("descriptor7"), new CPUTF8("descriptor8"), new CPUTF8("descriptor9"), new CPUTF8("descriptor10")}, new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});
    assertEquals(20, attr.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithNullStartPcs_fEpi3() {
    LocalVariableTableAttribute attr = new LocalVariableTableAttribute(10, null, new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3"), new CPUTF8("name4"), new CPUTF8("name5"), new CPUTF8("name6"), new CPUTF8("name7"), new CPUTF8("name8"), new CPUTF8("name9"), new CPUTF8("name10")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2"), new CPUTF8("descriptor3"), new CPUTF8("descriptor4"), new CPUTF8("descriptor5"), new CPUTF8("descriptor6"), new CPUTF8("descriptor7"), new CPUTF8("descriptor8"), new CPUTF8("descriptor9"), new CPUTF8("descriptor10")}, new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});
    assertEquals(20, attr.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithZeroVariables_bEsV1_tAzz0() {
    LocalVariableTableAttribute lvta = new LocalVariableTableAttribute(0, new int[] {}, new int[] {}, new CPUTF8[] {}, new CPUTF8[] {}, new int[] {});
    assertEquals("", lvta.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_empty_Cuew0_feIS0() {
    LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(0, new int[0], new int[0], new CPUTF8[0], new CPUTF8[0], new int[0]);
    ClassFileEntry[] nestedEntries = attribute.getNestedClassFileEntries();
    assertEquals(0, nestedEntries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_nonEmpty_WkXg1_QBvt0_1() {
    int localVariableTableLength = 2;
    int[] startPcs = {0, 10};
    int[] lengths = {5, 10};
    CPUTF8[] names = {new CPUTF8("name1"), new CPUTF8("name2")};
    CPUTF8[] descriptors = {new CPUTF8("descriptor1"), new CPUTF8("descriptor2")};
    int[] indexes = {0, 1};
    LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(localVariableTableLength, startPcs, lengths, names, descriptors, indexes);
    ClassFileEntry[] nestedEntries = attribute.getNestedClassFileEntries();
    assertEquals(4, nestedEntries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_nonEmpty_WkXg1_QBvt0_2() {
    int localVariableTableLength = 2;
    int[] startPcs = {0, 10};
    int[] lengths = {5, 10};
    CPUTF8[] names = {new CPUTF8("name1"), new CPUTF8("name2")};
    CPUTF8[] descriptors = {new CPUTF8("descriptor1"), new CPUTF8("descriptor2")};
    int[] indexes = {0, 1};
    LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(localVariableTableLength, startPcs, lengths, names, descriptors, indexes);
    ClassFileEntry[] nestedEntries = attribute.getNestedClassFileEntries();
    assertEquals(names[0], nestedEntries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_nonEmpty_WkXg1_QBvt0_3() {
    int localVariableTableLength = 2;
    int[] startPcs = {0, 10};
    int[] lengths = {5, 10};
    CPUTF8[] names = {new CPUTF8("name1"), new CPUTF8("name2")};
    CPUTF8[] descriptors = {new CPUTF8("descriptor1"), new CPUTF8("descriptor2")};
    int[] indexes = {0, 1};
    LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(localVariableTableLength, startPcs, lengths, names, descriptors, indexes);
    ClassFileEntry[] nestedEntries = attribute.getNestedClassFileEntries();
    assertEquals(descriptors[0], nestedEntries[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_nonEmpty_WkXg1_QBvt0_4() {
    int localVariableTableLength = 2;
    int[] startPcs = {0, 10};
    int[] lengths = {5, 10};
    CPUTF8[] names = {new CPUTF8("name1"), new CPUTF8("name2")};
    CPUTF8[] descriptors = {new CPUTF8("descriptor1"), new CPUTF8("descriptor2")};
    int[] indexes = {0, 1};
    LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(localVariableTableLength, startPcs, lengths, names, descriptors, indexes);
    ClassFileEntry[] nestedEntries = attribute.getNestedClassFileEntries();
    assertEquals(names[1], nestedEntries[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_nonEmpty_WkXg1_QBvt0_5() {
    int localVariableTableLength = 2;
    int[] startPcs = {0, 10};
    int[] lengths = {5, 10};
    CPUTF8[] names = {new CPUTF8("name1"), new CPUTF8("name2")};
    CPUTF8[] descriptors = {new CPUTF8("descriptor1"), new CPUTF8("descriptor2")};
    int[] indexes = {0, 1};
    LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(localVariableTableLength, startPcs, lengths, names, descriptors, indexes);
    ClassFileEntry[] nestedEntries = attribute.getNestedClassFileEntries();
    assertEquals(descriptors[1], nestedEntries[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_EmptyArray_ARFg1_IrAW0() {
    LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(0, new int[] {}, new int[] {}, new CPUTF8[] {}, new CPUTF8[] {}, new int[] {});
    int[] startPcs = localVariableTableAttribute.getStartPCs();
    assertEquals(0, startPcs.length);
}
}