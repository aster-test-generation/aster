/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Segment_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassBands_qqrh0() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    assertNotNull(classBands);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawClassFlags_ezcM1_1() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    long[] rawClassFlags = classBands.getRawClassFlags();
    assertNotNull(rawClassFlags);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawClassFlags_ezcM1_2() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    long[] rawClassFlags = classBands.getRawClassFlags();
    assertEquals(0, rawClassFlags.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_Vomq2_1() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] classSuperInts = classBands.getClassSuperInts();
    assertNotNull(classSuperInts);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_Vomq2_2() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] classSuperInts = classBands.getClassSuperInts();
    assertEquals(0, classSuperInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassMethodCount_aOEy3_1() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] classMethodCount = classBands.getClassMethodCount();
    assertNotNull(classMethodCount);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassMethodCount_aOEy3_2() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] classMethodCount = classBands.getClassMethodCount();
    assertEquals(0, classMethodCount.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_rXdP4_1() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] classThisInts = classBands.getClassThisInts();
    assertNotNull(classThisInts);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_rXdP4_2() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] classThisInts = classBands.getClassThisInts();
    assertEquals(0, classThisInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlags_qGiT5_1() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    long[] classFlags = classBands.getClassFlags();
    assertNotNull(classFlags);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlags_qGiT5_2() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    long[] classFlags = classBands.getClassFlags();
    assertEquals(0, classFlags.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerStartP_duKC6_1() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[][] codeHandlerStartP = classBands.getCodeHandlerStartP();
    assertNotNull(codeHandlerStartP);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerStartP_duKC6_2() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[][] codeHandlerStartP = classBands.getCodeHandlerStartP();
    assertEquals(0, codeHandlerStartP.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributes_mUJj7_1() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertNotNull(fieldAttributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributes_mUJj7_2() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertEquals(0, fieldAttributes.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodAttributes_IbSd8_1() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    ArrayList<Attribute>[][] methodAttributes = classBands.getMethodAttributes();
    assertNotNull(methodAttributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodAttributes_IbSd8_2() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    ArrayList<Attribute>[][] methodAttributes = classBands.getMethodAttributes();
    assertEquals(0, methodAttributes.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIcLocal_nDlE9_1() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    IcTuple[][] icLocal = classBands.getIcLocal();
    assertNotNull(icLocal);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIcLocal_nDlE9_2() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    IcTuple[][] icLocal = classBands.getIcLocal();
    assertEquals(0, icLocal.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeMaxNALocals_lztd10_1() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
    assertNotNull(codeMaxNALocals);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeMaxNALocals_lztd10_2() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
    assertEquals(0, codeMaxNALocals.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_hmfy11_1() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertNotNull(codeHandlerCount);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_hmfy11_2() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertEquals(0, codeHandlerCount.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackRead_vpao1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    segment.unpackRead(inputStream);
    assertEquals(0, inputStream.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantPool_vwMk0() {
    Segment segment = new Segment();
    SegmentConstantPool constantPool = segment.getConstantPool();
    assertNotNull(constantPool);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantPoolWithClass_rtxw2() {
    Segment segment = new Segment();
    SegmentConstantPool constantPool = segment.getConstantPool();
    String name = "java.lang.String";
    ClassFileEntry entry = constantPool.getClassPoolEntry(name);
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantPoolWithInvalidCp_cVfG6() {
    Segment segment = new Segment();
    SegmentConstantPool constantPool = segment.getConstantPool();
    int cp = -1;
    long value = 10;
    try {
        constantPool.getConstantPoolEntry(cp, value);
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantPoolWithInvalidValue_ZkOS8() {
    Segment segment = new Segment();
    SegmentConstantPool constantPool = segment.getConstantPool();
    int cp = 1;
    long value = -1;
    try {
        constantPool.getValue(cp, value);
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIcBands_dPik0_1() {
    Segment segment = new Segment();
    IcBands icBands = segment.getIcBands();
    assertNotNull(icBands);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIcBands_dPik0_2() {
    Segment segment = new Segment();
    IcBands icBands = segment.getIcBands();
    assertEquals(icBands.getRelevantIcTuples("className", null).length, 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIcBands_dPik0_3() {
    Segment segment = new Segment();
    IcBands icBands = segment.getIcBands();
    assertEquals(icBands.getIcTuples().length, 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttrDefinitionBands_zsLW0_QwUN0() {
    Segment segment = new Segment();
    AttrDefinitionBands attrDefinitionBands = segment.getAttrDefinitionBands();
    assertNotNull(attrDefinitionBands);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackRead_IZFI0_NzOK0_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    segment.unpackRead(inputStream);
    assertEquals(0, segment.getIcBands().getRelevantIcTuples(null, null).length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackRead_IZFI0_NzOK0_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    segment.unpackRead(inputStream);
    assertEquals(0, segment.getIcBands().getIcTuples().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLogLevelNullLevel_AYNe3_uHFf0() {
    Segment segment = new Segment();
    segment.setLogLevel(0);
    assertNull(segment.getIcBands());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackProcess_internalBufferNull_yNfx1_JDwf0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    segment.unpackProcess();
    assertNull(segment.getIcBands());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantPoolWithCp_UqVD1_CVaU0() {
    Segment segment = new Segment();
    SegmentConstantPool constantPool = segment.getConstantPool();
    int cp = 1;
    long value = 10;
    try {
        ConstantPoolEntry entry = constantPool.getConstantPoolEntry(cp, value);
        assertNotNull(entry);
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantPoolWithInitMethod_FLjS4_BfYE0() {
    Segment segment = new Segment();
    SegmentConstantPool constantPool = segment.getConstantPool();
    int cp = 1;
    long value = 10;
    String desiredClassName = "java.lang.String";
    try {
        ConstantPoolEntry entry = constantPool.getInitMethodPoolEntry(cp, value, desiredClassName);
        assertNotNull(entry);
    } catch (Pack200Exception e) {
        fail("Exception thrown: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantPoolWithClassSpecific_xfJu5_vyKi0() {
    Segment segment = new Segment();
    SegmentConstantPool constantPool = segment.getConstantPool();
    int cp = 1;
    long desiredIndex = 10;
    String desiredClassName = "java.lang.String";
    try {
        ConstantPoolEntry entry = constantPool.getClassSpecificPoolEntry(cp, desiredIndex, desiredClassName);
        assertNotNull(entry);
    } catch (Pack200Exception e) {
        fail("Exception thrown: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawClassFlags_ezcM1() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    long[] rawClassFlags = classBands.getRawClassFlags();
    assertNotNull(rawClassFlags);
    assertEquals(0, rawClassFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_Vomq2() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] classSuperInts = classBands.getClassSuperInts();
    assertNotNull(classSuperInts);
    assertEquals(0, classSuperInts.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassMethodCount_aOEy3() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] classMethodCount = classBands.getClassMethodCount();
    assertNotNull(classMethodCount);
    assertEquals(0, classMethodCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_rXdP4() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] classThisInts = classBands.getClassThisInts();
    assertNotNull(classThisInts);
    assertEquals(0, classThisInts.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlags_qGiT5() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    long[] classFlags = classBands.getClassFlags();
    assertNotNull(classFlags);
    assertEquals(0, classFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerStartP_duKC6() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[][] codeHandlerStartP = classBands.getCodeHandlerStartP();
    assertNotNull(codeHandlerStartP);
    assertEquals(0, codeHandlerStartP.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributes_mUJj7() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertNotNull(fieldAttributes);
    assertEquals(0, fieldAttributes.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodAttributes_IbSd8() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    ArrayList<Attribute>[][] methodAttributes = classBands.getMethodAttributes();
    assertNotNull(methodAttributes);
    assertEquals(0, methodAttributes.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIcLocal_nDlE9() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    IcTuple[][] icLocal = classBands.getIcLocal();
    assertNotNull(icLocal);
    assertEquals(0, icLocal.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeMaxNALocals_lztd10() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
    assertNotNull(codeMaxNALocals);
    assertEquals(0, codeMaxNALocals.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_hmfy11() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertNotNull(codeHandlerCount);
    assertEquals(0, codeHandlerCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIcBands_dPik0() {
    Segment segment = new Segment();
    IcBands icBands = segment.getIcBands();
    assertNotNull(icBands);
    assertEquals(icBands.getRelevantIcTuples("className", null).length, 0);
    assertEquals(icBands.getIcTuples().length, 0);
}
}