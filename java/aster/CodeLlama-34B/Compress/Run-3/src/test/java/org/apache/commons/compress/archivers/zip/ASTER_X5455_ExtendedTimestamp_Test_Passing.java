/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X5455_ExtendedTimestamp_Test_Passing {
    private X5455_ExtendedTimestamp timestamp;
    private long dateToZipLong(Date date) {
        return (date.getTime() / 1000) * 1000;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_nlDj0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = timestamp.getModifyTime();
    assertNotNull(modifyTime);
    assertEquals(0, modifyTime.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_zLsd0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertNotNull(centralDirectoryData);
    assertEquals(centralDirectoryData.length, timestamp.getCentralDirectoryLength().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_fKwP0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    timestamp.setAccessFileTime(time);
    assertEquals(time, timestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_YrBy0() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(1000000000000L);
    x5455.setAccessFileTime(time);
    assertEquals(new ZipLong(1000000000000L), x5455.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_qYoS0() {
        timestamp = new X5455_ExtendedTimestamp();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFlags_Uqny1() {
        byte flags = timestamp.getFlags();
        assertEquals(0, flags);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFlagsWithNonZeroFlags_oUUC2() {
        byte flags = 1;
        timestamp.setFlags(flags);
        assertEquals(flags, timestamp.getFlags());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFlagsWithMaxValue_zCDz3() {
        byte flags = Byte.MAX_VALUE;
        timestamp.setFlags(flags);
        assertEquals(flags, timestamp.getFlags());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFlagsWithMinValue_upNl4() {
        byte flags = Byte.MIN_VALUE;
        timestamp.setFlags(flags);
        assertEquals(flags, timestamp.getFlags());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFlagsWithInvalidValue_CHXK5() {
        byte flags = -1;
        timestamp.setFlags(flags);
        assertEquals(Byte.MIN_VALUE, timestamp.getFlags());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_bit2_createTimePresent_false_zyKE5() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModifyFileTimeWithNull_XEkg2() {
        timestamp.setModifyTime(null);
        FileTime fileTime = timestamp.getModifyFileTime();
        assertNull(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_tWVY0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    assertTrue(timestamp.equals(timestamp));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_NDQK1() {
    X5455_ExtendedTimestamp timestamp1 = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp timestamp2 = new X5455_ExtendedTimestamp();
    assertFalse(timestamp1.equals(timestamp2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_EEZW2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    assertFalse(timestamp.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_uuJg3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Object object = new Object();
    assertFalse(timestamp.equals(object));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ValidData_hFRI0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        timestamp.parseFromLocalFileData(data, offset, length);
        assertEquals(0, timestamp.getFlags());
        assertNull(timestamp.getModifyTime());
        assertNull(timestamp.getAccessTime());
        assertNull(timestamp.getCreateTime());
    } catch (ZipException e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_InvalidData_YfGP1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        timestamp.parseFromLocalFileData(data, offset, length);
        fail("Exception should be thrown");
    } catch (ZipException e) {
        assertEquals("X5455_ExtendedTimestamp too short, only 10 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ModifyTimePresent_szaU2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        timestamp.parseFromLocalFileData(data, offset, length);
        assertEquals(1, timestamp.getFlags());
        assertNotNull(timestamp.getModifyTime());
        assertNull(timestamp.getAccessTime());
        assertNull(timestamp.getCreateTime());
    } catch (ZipException e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_AccessTimePresent_IGLY3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        timestamp.parseFromLocalFileData(data, offset, length);
        assertEquals(2, timestamp.getFlags());
        assertNull(timestamp.getModifyTime());
        assertNotNull(timestamp.getAccessTime());
        assertNull(timestamp.getCreateTime());
    } catch (ZipException e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_CreateTimePresent_XDHH4() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        timestamp.parseFromLocalFileData(data, offset, length);
        assertEquals(4, timestamp.getFlags());
        assertNull(timestamp.getModifyTime());
        assertNull(timestamp.getAccessTime());
        assertNotNull(timestamp.getCreateTime());
    } catch (ZipException e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime_KwaB0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    timestamp.setCreateJavaTime(date);
    assertEquals(dateToZipLong(date), timestamp.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTime_GtvS0() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        Date date = new Date();
        timestamp.setModifyJavaTime(date);
        assertEquals(dateToZipLong(date), timestamp.getModifyTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTimeWithNull_MlrR1() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        Date date = null;
        timestamp.setModifyJavaTime(date);
        assertEquals(0, timestamp.getModifyTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTimeWithInvalidDate_YVKp2() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        Date date = new Date(0, 0, 0, 0, 0, 0);
        timestamp.setModifyJavaTime(date);
        assertEquals(0, timestamp.getModifyTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTimeWithValidDate_Fuzr3() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        Date date = new Date(2023, 2, 28, 12, 30, 0);
        timestamp.setModifyJavaTime(date);
        assertEquals(dateToZipLong(date), timestamp.getModifyTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBit1_accessTimePresent_VdEO1() {
        assertTrue(timestamp.isBit1_accessTimePresent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_NoFlags_CwFr0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    String expected = "0x5455 Zip Extra Field: Flags=0";
    assertEquals(expected, timestamp.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateFileTimeWithNull_NNti4() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        FileTime time = null;
        timestamp.setCreateFileTime(time);
        assertNotNull(timestamp.getCreateTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessJavaTime_qDax0() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    Date expectedDate = new Date(1234567890L);
    extendedTimestamp.setAccessTime(new ZipLong(1234567890L));
    Date actualDate = extendedTimestamp.getAccessJavaTime();
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessJavaTimeWithNullAccessTime_NfwR1() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    Date expectedDate = null;
    extendedTimestamp.setAccessTime(null);
    Date actualDate = extendedTimestamp.getAccessJavaTime();
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_FUZo0() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = extendedTimestamp.getCreateTime();
    assertNotNull(createTime);
    assertEquals(0, createTime.getValue());
    assertEquals(0, createTime.getIntValue());
    assertEquals(0, createTime.hashCode());
    assertEquals(0, createTime.getBytes().length);
    assertEquals(0, createTime.getBytes(0).length);
    assertEquals(0, createTime.getValue(new byte[0]));
    assertEquals(0, createTime.getValue(new byte[0], 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateJavaTime_XEiL0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date expected = new Date(1234567890);
    Date actual = timestamp.getCreateJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_oqTh0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong accessTime = timestamp.getAccessTime();
    assertNotNull(accessTime);
    assertEquals(0, accessTime.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyJavaTime_ZcEr0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date expected = new Date(1234567890);
    Date actual = timestamp.getModifyJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTime_EhmO0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(1000);
    timestamp.setModifyFileTime(time);
    assertEquals(1000, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithNull_Vwkr1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyFileTime(null);
    assertEquals(0, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithInvalidTime_ibDQ2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(-1);
    timestamp.setModifyFileTime(time);
    assertEquals(0, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithMaxTime_DIUd4() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(Long.MAX_VALUE);
    timestamp.setModifyFileTime(time);
    assertEquals(Long.MAX_VALUE, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithMinTime_JlSz5() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(Long.MIN_VALUE);
    timestamp.setModifyFileTime(time);
    assertEquals(Long.MIN_VALUE, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithCurrentTime_XTdu6() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    timestamp.setModifyFileTime(time);
    assertEquals(System.currentTimeMillis(), timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit0_modifyTimePresent_erOx0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    assertTrue(timestamp.isBit0_modifyTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit2_createTimePresent_FYuB0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    boolean result = timestamp.isBit2_createTimePresent();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_XnKT0() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp clone = (X5455_ExtendedTimestamp) obj.clone();
    assertEquals(obj, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentObject_WGjN1() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp obj1 = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp obj2 = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp clone = (X5455_ExtendedTimestamp) obj1.clone();
    assertNotEquals(obj2, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithNullObject_zEiP2() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp clone = (X5455_ExtendedTimestamp) obj.clone();
    assertNotNull(clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithCloneNotSupportedException_vPYM3() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp clone = (X5455_ExtendedTimestamp) obj.clone();
    assertThrows(CloneNotSupportedException.class, () -> {
        clone.clone();
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTime_lGji0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    timestamp.setAccessJavaTime(date);
    assertEquals(dateToZipLong(date), timestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTimeWithNull_tyhb1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(null);
    assertEquals(0, timestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTimeWithInvalidDate_yiiL2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date date = new Date(0);
    timestamp.setAccessJavaTime(date);
    assertEquals(0, timestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTimeWithValidDate_UxVO3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date date = new Date(1000000000);
    timestamp.setAccessJavaTime(date);
    assertEquals(1000000000, timestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_nlDj0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = timestamp.getModifyTime();
    assertNotNull(modifyTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_nlDj0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = timestamp.getModifyTime();
    assertEquals(0, modifyTime.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_zLsd0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertNotNull(centralDirectoryData);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_zLsd0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertEquals(centralDirectoryData.length, timestamp.getCentralDirectoryLength().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_FUZo0_1() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = extendedTimestamp.getCreateTime();
    assertNotNull(createTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_FUZo0_2() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = extendedTimestamp.getCreateTime();
    assertEquals(0, createTime.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_FUZo0_3() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = extendedTimestamp.getCreateTime();
    assertEquals(0, createTime.getIntValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_FUZo0_4() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = extendedTimestamp.getCreateTime();
    assertEquals(0, createTime.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_FUZo0_5() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = extendedTimestamp.getCreateTime();
    assertEquals(0, createTime.getBytes().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_FUZo0_6() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = extendedTimestamp.getCreateTime();
    assertEquals(0, createTime.getBytes(0).length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_FUZo0_7() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = extendedTimestamp.getCreateTime();
    assertEquals(0, createTime.getValue(new byte[0]));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_FUZo0_8() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = extendedTimestamp.getCreateTime();
    assertEquals(0, createTime.getValue(new byte[0], 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_oqTh0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong accessTime = timestamp.getAccessTime();
    assertNotNull(accessTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_oqTh0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong accessTime = timestamp.getAccessTime();
    assertEquals(0, accessTime.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTimeNonZero_jdzC1_pcUF0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(new ZipLong(1234567890));
    ZipLong modifyTime = timestamp.getModifyTime();
    assertNotNull(modifyTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTimeNonZero_jdzC1_pcUF0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(new ZipLong(1234567890));
    ZipLong modifyTime = timestamp.getModifyTime();
    assertEquals(1234567890, modifyTime.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_accessTime_pRpw2_ZSqH0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date(1234567890));
    int expected = -123 * (0x07 & 0x07) ^ Integer.rotateLeft(timestamp.getAccessJavaTime().hashCode(), 11);
    int actual = timestamp.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_createTime_UmkB3_tVDY0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setCreateTime(new ZipLong(1234567890));
    int expected = -123 * (0x07 & 0x07) ^ Integer.rotateLeft(timestamp.getCreateTime().hashCode(), 22);
    int actual = timestamp.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessFileTimeWithNullParameter_XVzO5_COyZ0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = timestamp.getAccessFileTime();
    assertNull(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_rwPB1_aDRP1() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipShort headerId = extendedTimestamp.getHeaderId();
    assertEquals(headerId.getValue(), 0x5455);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_AccessTimePresent_dIYi2_zpgq0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date());
    String expected = "0x5455 Zip Extra Field: Flags=2 Access:[";
    assertTrue(timestamp.toString().startsWith(expected));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_CreateTimePresent_vJQx3_psMz0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setCreateTime(new ZipLong(new Date().getTime()));
    String expected = "0x5455 Zip Extra Field: Flags=4 Create:[";
    assertTrue(timestamp.toString().startsWith(expected));
}
}