/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveEntry_Test_Passing {
public void testSetAccessTime_FMNj0() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date atime = new Date();
entry.setAccessTime(atime);
assertEquals(atime.getTime(), entry.getAccessTime().getTime());
}
public void testSetAccessTimeWithNull_PCqF1() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date atime = null;
entry.setAccessTime(atime);
assertNull(entry.getAccessTime());
}
public void testSetAccessTimeWithInvalidDate_yINW2() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date atime = new Date(0);
entry.setAccessTime(atime);
assertEquals(atime.getTime(), entry.getAccessTime().getTime());
}
public void testSetAccessTimeWithValidDate_DDXS3() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date atime = new Date(1000);
entry.setAccessTime(atime);
assertEquals(atime.getTime(), entry.getAccessTime().getTime());
}
public void testSetAccessTimeWithFutureDate_URRn4() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date atime = new Date(System.currentTimeMillis() + 1000);
entry.setAccessTime(atime);
assertEquals(atime.getTime(), entry.getAccessTime().getTime());
}
public void testSetAccessTimeWithPastDate_SXXi5() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date atime = new Date(System.currentTimeMillis() - 1000);
entry.setAccessTime(atime);
assertEquals(atime.getTime(), entry.getAccessTime().getTime());
}
public void testSetAccessTimeWithDifferentTimeZone_XYQI6() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date atime = new Date(System.currentTimeMillis() - 1000);
entry.setAccessTime(atime);
assertEquals(atime.getTime(), entry.getAccessTime().getTime());
}
public void testSetAccessTimeWithDifferentLocale_bfiy7() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date atime = new Date(System.currentTimeMillis() - 1000);
entry.setAccessTime(atime);
assertEquals(atime.getTime(), entry.getAccessTime().getTime());
}
public void testSetAccessTimeWithDifferentTimeZoneAndLocale_eNIg8() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date atime = new Date(System.currentTimeMillis() - 1000);
entry.setAccessTime(atime);
assertEquals(atime.getTime(), entry.getAccessTime().getTime());
}
public void testSetAccessTimeWithInvalidTimeZone_cFFC9() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date atime = new Date(System.currentTimeMillis() - 1000);
entry.setAccessTime(atime);
assertEquals(atime.getTime(), entry.getAccessTime().getTime());
}
public void testIsDeleted_Whiteout_iTpB0() {
}
public void testIsDeleted_Socket_GgIA1() {
}
public void testIsDeleted_Link_ZacG2() {
}
public void testIsDeleted_File_Oyev3() {
}
public void testIsDeleted_Blkdev_kASQ4() {
}
public void testIsDeleted_Directory_pOCR5() {
}
public void testIsDeleted_Chrdev_xjgW6() {
}
public void testIsDeleted_Fifo_sINo7() {
}
public void testIsDeleted_Unknown_lhJR8() {
}
public void testIsDeleted_Null_kPvL9() {
}
public void testSetCreationTime_PHDm0() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date ctime = new Date();
entry.setCreationTime(ctime);
assertEquals(ctime.getTime(), entry.getCreationTime().getTime());
}
public void testSetCreationTimeWithNull_Rokj1() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date ctime = null;
entry.setCreationTime(ctime);
assertNull(entry.getCreationTime());
}
public void testSetCreationTimeWithInvalidDate_URrk2() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date ctime = new Date(0);
entry.setCreationTime(ctime);
assertEquals(ctime.getTime(), entry.getCreationTime().getTime());
}
public void testSetCreationTimeWithValidDate_zccR3() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date ctime = new Date(1000);
entry.setCreationTime(ctime);
assertEquals(ctime.getTime(), entry.getCreationTime().getTime());
}
public void testSetCreationTimeWithFutureDate_bCbF4() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date ctime = new Date(System.currentTimeMillis() + 1000);
entry.setCreationTime(ctime);
assertEquals(ctime.getTime(), entry.getCreationTime().getTime());
}
public void testSetCreationTimeWithPastDate_zykX5() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date ctime = new Date(System.currentTimeMillis() - 1000);
entry.setCreationTime(ctime);
assertEquals(ctime.getTime(), entry.getCreationTime().getTime());
}
public void testSetCreationTimeWithDifferentTimeZone_YAqy6() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date ctime = new Date(System.currentTimeMillis() - 1000);
entry.setCreationTime(ctime);
assertEquals(ctime.getTime(), entry.getCreationTime().getTime());
}
public void testSetCreationTimeWithDifferentLocale_SQSY7() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date ctime = new Date(System.currentTimeMillis() - 1000);
entry.setCreationTime(ctime);
assertEquals(ctime.getTime(), entry.getCreationTime().getTime());
}
public void testSetCreationTimeWithDifferentTimeZoneAndLocale_DpOB8() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
Date ctime = new Date(System.currentTimeMillis() - 1000);
entry.setCreationTime(ctime);
assertEquals(ctime.getTime(), entry.getCreationTime().getTime());
}
public void testSetCreationTimeWithNullName_vaZV9() {
DumpArchiveEntry entry = new DumpArchiveEntry(null, "simpleName");
Date ctime = new Date();
entry.setCreationTime(ctime);
assertEquals(ctime.getTime(), entry.getCreationTime().getTime());
}
public void testGetGeneration_Whiteout_pQRP0() {
}
public void testGetGeneration_Socket_uTID1() {
}
public void testGetGeneration_Link_VYuD2() {
}
public void testGetGeneration_File_Wtll3() {
}
public void testGetGeneration_Blkdev_nggq4() {
}
public void testGetGeneration_Chrdev_QvCb5() {
}
public void testGetGeneration_Fifo_duhJ6() {
}
public void testGetGeneration_Unknown_ERHs7() {
}
public void testGetGeneration_Null_frYW8() {
}
public void testGetGeneration_Empty_zGAj9() {
}
public void testSetSimpleName_iOjm0() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setSimpleName("newSimpleName");
assertEquals("newSimpleName", entry.getSimpleName());
}
public void testSetSimpleNameWithNull_qYds1() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setSimpleName(null);
assertNull(entry.getSimpleName());
}
public void testSetSimpleNameWithEmptyString_vAgp2() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setSimpleName("");
assertEquals("", entry.getSimpleName());
}
public void testSetSimpleNameWithSameName_zSyg3() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setSimpleName("simpleName");
assertEquals("simpleName", entry.getSimpleName());
}
public void testSetSimpleNameWithDifferentName_iWds4() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setSimpleName("differentName");
assertEquals("differentName", entry.getSimpleName());
}
public void testSetSimpleNameWithWhiteSpace_QBCp5() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setSimpleName("  ");
assertEquals("  ", entry.getSimpleName());
}
public void testSetSimpleNameWithSpecialCharacters_Bcqi6() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setSimpleName("$%^&*()");
assertEquals("$%^&*()", entry.getSimpleName());
}
public void testSetSimpleNameWithLongName_tYJt7() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setSimpleName("ThisIsAVeryLongNameThatIsLongerThanTheMaximumLengthOfTheSimpleName");
assertEquals("ThisIsAVeryLongNameThatIsLongerThanTheMaximumLengthOfTheSimpleName", entry.getSimpleName());
}
public void testSetSimpleNameWithInvalidCharacters_ecgj8() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setSimpleName("ThisIsANameWithInvalidCharacters!");
assertEquals("ThisIsANameWithInvalidCharacters!", entry.getSimpleName());
}
public void testSetSimpleNameWithNullName_vZPz9() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setSimpleName(null);
assertNull(entry.getSimpleName());
}
public void testSetTypeWhiteout_gebL0() {
}
public void testSetTypeSocket_zmjP1() {
}
public void testSetTypeLink_hHJz2() {
}
public void testSetTypeFile_SNdK3() {
}
public void testSetTypeBlkdev_HZyt4() {
}
public void testSetTypeChrdev_kNYL5() {
}
public void testSetTypeFifo_BTVq6() {
}
public void testSetTypeUnknown_blvw7() {
}
public void testSetTypeNull_NHoN8() {
}
public void testSetTypeInvalid_fWPK9() {
}
public void testGetEntrySize_Whiteout_bBqR0() {
}
public void testGetEntrySize_Socket_tmNb1() {
}
public void testGetEntrySize_Link_WDgJ2() {
}
public void testGetEntrySize_File_HCZY3() {
}
public void testGetEntrySize_Blkdev_YeMS4() {
}
public void testGetEntrySize_Chrdev_ceBO5() {
}
public void testGetEntrySize_Fifo_Jsaz6() {
}
public void testGetEntrySize_Unknown_lpah7() {
}
public void testGetEntrySize_Null_OCxQ8() {
}
public void testGetEntrySize_Empty_ztnl9() {
}
public void testGetGroupId_ZfOt0() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
int gid = entry.getGroupId();
assertEquals(0, gid);
}
public void testGetGroupIdWithIno_UATx1() {
}
public void testGetGroupIdWithType_UNuu2() {
}
public void testGetGroupIdWithName_qnoE3() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
int gid = entry.getGroupId();
assertEquals(0, gid);
}
public void testGetGroupIdWithSimpleName_WKtT4() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
int gid = entry.getGroupId();
assertEquals(0, gid);
}
public void testGetGroupIdWithInoAndType_MOLt5() {
}
public void testGetGroupIdWithNameAndSimpleName_aQwF6() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
int gid = entry.getGroupId();
assertEquals(0, gid);
}
public void testGetGroupIdWithInoAndTypeAndName_HILE7() {
}
public void testGetGroupIdWithInoAndTypeAndSimpleName_eYmf8() {
}
public void testGetGroupIdWithInoAndTypeAndNameAndSimpleName_ZCtR9() {
}
public void testGetUserId_Whiteout_oRWs0() {
}
public void testGetUserId_Socket_padv1() {
}
public void testGetUserId_Link_FFmZ2() {
}
public void testGetUserId_File_nhQu3() {
}
public void testGetUserId_Blkdev_crlk4() {
}
public void testGetUserId_Chrdev_XdPb5() {
}
public void testGetUserId_Fifo_XZmw6() {
}
public void testGetUserId_Unknown_DqWL7() {
}
public void testGetUserId_Null_ewqQ8() {
}
public void testGetUserId_Invalid_rsRP9() {
}
public void testSetUserId_VsHl0() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setUserId(1000);
assertEquals(1000, entry.getUserId());
}
public void testSetUserIdWithNegativeValue_obpg1() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setUserId(-1);
assertEquals(-1, entry.getUserId());
}
public void testSetUserIdWithZeroValue_IPtN2() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setUserId(0);
assertEquals(0, entry.getUserId());
}
public void testSetUserIdWithMaxValue_bNgw3() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setUserId(Integer.MAX_VALUE);
assertEquals(Integer.MAX_VALUE, entry.getUserId());
}
public void testSetUserIdWithMinValue_ZOOe4() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setUserId(Integer.MIN_VALUE);
assertEquals(Integer.MIN_VALUE, entry.getUserId());
}
public void testSetUserIdWithInvalidValue_HhQV5() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setUserId(Integer.MAX_VALUE + 1);
assertEquals(Integer.MAX_VALUE + 1, entry.getUserId());
}
public void testSetUserIdWithNullValue_nTQH6() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
assertNull(entry.getUserId());
}
public void testSetUserIdWithEmptyString_MwSA7() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
assertEquals("", entry.getUserId());
}
public void testSetUserIdWithInvalidString_mrAr8() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
assertEquals("invalid", entry.getUserId());
}
public void testSetUserIdWithValidString_LaVA9() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
assertEquals("1000", entry.getUserId());
}
public void testGetHeaderCount_empty_KNzd0() {
DumpArchiveEntry entry = new DumpArchiveEntry("", "");
assertEquals(0, entry.getHeaderCount());
}
public void testGetHeaderCount_single_Yolv1() {
DumpArchiveEntry entry = new DumpArchiveEntry("file1", "file1");
assertEquals(1, entry.getHeaderCount());
}
public void testGetHeaderCount_multiple_klsp2() {
DumpArchiveEntry entry = new DumpArchiveEntry("file1", "file1");
assertEquals(2, entry.getHeaderCount());
}
public void testGetHeaderCount_nested_Zzeo3() {
DumpArchiveEntry entry = new DumpArchiveEntry("file1", "file1");
assertEquals(3, entry.getHeaderCount());
}
public void testGetHeaderCount_withType_fIiR4() {
}
public void testGetHeaderCount_withSimpleName_ZAZb5() {
DumpArchiveEntry entry = new DumpArchiveEntry("file1", "file1");
assertEquals(1, entry.getHeaderCount());
}
public void testGetHeaderCount_withIno_UQdj6() {
}
public void testGetHeaderCount_withTypeAndSimpleName_UzIY7() {
}
public void testGetHeaderCount_withTypeAndIno_RDef8() {
}
public void testGetHeaderCount_withSimpleNameAndIno_iwPu9() {
}
public void testSetGroupId_lAfB0() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setGroupId(1000);
assertEquals(1000, entry.getGroupId());
}
public void testSetGroupIdWithNegativeValue_Tcmy1() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setGroupId(-1000);
assertEquals(-1000, entry.getGroupId());
}
public void testSetGroupIdWithZeroValue_wZpH2() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setGroupId(0);
assertEquals(0, entry.getGroupId());
}
public void testSetGroupIdWithMaxValue_YmYQ3() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setGroupId(Integer.MAX_VALUE);
assertEquals(Integer.MAX_VALUE, entry.getGroupId());
}
public void testSetGroupIdWithMinValue_zkYR4() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setGroupId(Integer.MIN_VALUE);
assertEquals(Integer.MIN_VALUE, entry.getGroupId());
}
public void testSetGroupIdWithNullName_kDFF5() {
DumpArchiveEntry entry = new DumpArchiveEntry(null, "simpleName");
entry.setGroupId(1000);
assertEquals(1000, entry.getGroupId());
}
public void testSetGroupIdWithEmptyName_TcNK6() {
DumpArchiveEntry entry = new DumpArchiveEntry("", "simpleName");
entry.setGroupId(1000);
assertEquals(1000, entry.getGroupId());
}
public void testSetGroupIdWithNullSimpleName_apDM7() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", null);
entry.setGroupId(1000);
assertEquals(1000, entry.getGroupId());
}
public void testSetGroupIdWithEmptySimpleName_MaJt8() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "");
entry.setGroupId(1000);
assertEquals(1000, entry.getGroupId());
}
public void testSetGroupIdWithInvalidType_XsiW9() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setGroupId(1000);
assertEquals(1000, entry.getGroupId());
}
public void testSetDeletedTrue_lxCs0() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setDeleted(true);
assertTrue(entry.isDeleted());
}
public void testSetDeletedFalse_Ruse1() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
entry.setDeleted(false);
assertFalse(entry.isDeleted());
}
public void testSetDeletedNull_qJGy2() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
assertNull(entry.isDeleted());
}
public void testSetDeletedEmptyString_QIZu3() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
assertEquals("", entry.isDeleted());
}
public void testSetDeletedNonEmptyString_zJDV4() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
assertEquals("nonEmptyString", entry.isDeleted());
}
public void testSetDeletedInteger_euah5() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
assertEquals(1, entry.isDeleted());
}
public void testSetDeletedFloat_pwZq6() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
assertEquals(1.0f, entry.isDeleted());
}
public void testSetDeletedDouble_WlbU7() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
assertEquals(1.0d, entry.isDeleted());
}
public void testSetDeletedLong_rwwX8() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
assertEquals(1L, entry.isDeleted());
}
public void testSetDeletedObject_LjcB9() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
assertEquals(new Object(), entry.isDeleted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_vxQF0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setMode(07777);
    assertEquals(07777, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModeWithInvalidMode_pgVe2() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    try {
        entry.setMode(010000);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid mode: 010000", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_KllV0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectSameValues_fIdC1() {
    DumpArchiveEntry entry1 = new DumpArchiveEntry("name", "simpleName");
    DumpArchiveEntry entry2 = new DumpArchiveEntry("name", "simpleName");
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectDifferentValues_upIR2() {
    DumpArchiveEntry entry1 = new DumpArchiveEntry("name1", "simpleName1");
    DumpArchiveEntry entry2 = new DumpArchiveEntry("name2", "simpleName2");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_Ujpu3() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_WMai4() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    assertFalse(entry.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_wEWA0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        Date lastModifiedDate = entry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
        assertEquals(new Date(0), lastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithValidNameAndSimpleName_XHNW0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    String expected = "name";
    String actual = entry.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOffset_jMiZ0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        entry.setOffset(100L);
        assertEquals(100L, entry.getOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVolume_validVolume_KLaC0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setVolume(1);
    assertEquals(1, entry.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVolume_invalidVolume_Nmji1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setVolume(0);
    assertEquals(0, entry.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVolume_negativeVolume_nzRB3() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setVolume(-1);
    assertEquals(-1, entry.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVolume_largeVolume_DhQx4() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setVolume(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVolume_smallVolume_YvRt5() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setVolume(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVolume_nullName_nDSx8() {
    DumpArchiveEntry entry = new DumpArchiveEntry(null, "simpleName");
    entry.setVolume(1);
    assertEquals(1, entry.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVolume_nullSimpleName_tJfO9() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", null);
    entry.setVolume(1);
    assertEquals(1, entry.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGeneration_valid_YJMI0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setGeneration(1);
    assertEquals(1, entry.getGeneration());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGeneration_invalid_WVNp1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setGeneration(-1);
    assertEquals(0, entry.getGeneration());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGeneration_zero_JHah7() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setGeneration(0);
    assertEquals(0, entry.getGeneration());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGeneration_large_oRLO8() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setGeneration(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getGeneration());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGeneration_small_diWA9() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setGeneration(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getGeneration());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate_bufferHasMultipleNonHoles_wpmP7() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    byte[] buffer = new byte[512];
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameNull_qJAB0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("test", "test");
    entry.setName(null);
    assertEquals(null, entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameNonNull_XKoR1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("test", "test");
    entry.setName("newName");
    assertEquals("newName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetSizePositive_Iajz0() {
		DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
		entry.setSize(100L);
		assertEquals(100L, entry.getSize());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetSizeNegative_xvyW1() {
		DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
		entry.setSize(-100L);
		assertEquals(-100L, entry.getSize());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetSizeZero_ahWv2() {
		DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
		entry.setSize(0L);
		assertEquals(0L, entry.getSize());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetSizeLargePositive_BQTA3() {
		DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
		entry.setSize(Long.MAX_VALUE);
		assertEquals(Long.MAX_VALUE, entry.getSize());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetSizeLargeNegative_cqXh4() {
		DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
		entry.setSize(Long.MIN_VALUE);
		assertEquals(Long.MIN_VALUE, entry.getSize());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetSizeNonNull_SCVq6() {
		DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
		entry.setSize(100L);
		assertNotNull(entry.getSize());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetSizeInvalidSize_XYBK8() {
		DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
		entry.setSize(-1L);
		assertNull(entry.getSize());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNlink_valid_fgnk0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setNlink(1);
    assertEquals(1, entry.getNlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNlink_invalid_cGdf1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setNlink(0);
    assertEquals(0, entry.getNlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNlink_negative_tNlZ2() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setNlink(-1);
    assertEquals(-1, entry.getNlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetType_Null_QhdF9() {
    DumpArchiveEntry entry = new DumpArchiveEntry(null, null, 0, null);
    assertNull(entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_ZzpO0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    Date mtime = new Date();
    entry.setLastModifiedDate(mtime);
    assertEquals(mtime.getTime(), entry.getLastModifiedDate().getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateNull_sUBO2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertThrows(IllegalArgumentException.class, () -> entry.setLastModifiedDate(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateBeforeEpoch_ZElI3() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        Date mtime = new Date(0);
        assertThrows(IllegalArgumentException.class, () -> entry.setLastModifiedDate(mtime));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateAfterMaxDate_BXMF4() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        Date mtime = new Date(Long.MAX_VALUE);
        assertThrows(IllegalArgumentException.class, () -> entry.setLastModifiedDate(mtime));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderType_null_RgOb9() {
    DumpArchiveEntry entry = new DumpArchiveEntry("null", "null", 10, null);
    assertEquals(null, entry.getHeaderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOriginalName1_EPBj0() {
DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
String originalName = entry.getOriginalName();
assertEquals("name", originalName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolumeWithNullType_MTLi3() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, null);
        assertEquals(123, entry.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolumeWithNullEntry_TrIf10() {
        DumpArchiveEntry entry = null;
        assertEquals(0, entry.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTimeWithInvalidType_IfxO4() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, null);
    Date accessTime = entry.getAccessTime();
    assertNull(accessTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_wEWA0_1() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        Date lastModifiedDate = entry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_wEWA0_2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        Date lastModifiedDate = entry.getLastModifiedDate();
        assertEquals(new Date(0), lastModifiedDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModeWithNullMode_HNOn5_vjZT0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    try {
        entry.setMode(0);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Mode cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVolume_nullVolume_ssxh2_cUph0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setVolume(0);
    assertNull(entry.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNlinkWithNullType_qIaB7_CvYU0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, null);
    assertNull(entry.getNlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeNull_CgLH5_msZl0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setSize(0L);
    assertNull(entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeNotANumber_BtFn7_pQXC0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setSize(0);
    assertNull(entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNlink_null_jKNT3_uGdi0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setNlink(0);
    assertNull(entry.getNlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNlink_nonNumeric_YkeT7_NgWZ0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setNlink(1);
    assertEquals("1", entry.getNlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNlink_nonNumericWithNonNumeric_bxgi9_Xkjt0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    entry.setNlink(1);
    assertEquals("abc1.5", entry.getNlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVolumeWithNullTypeAndIno_SExE12_WUJb0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 0, null);
    assertEquals(0, entry.getVolume());
}
}