/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.IOException;
import java.util.ArrayList;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_VVMb0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classSuperInts = classBands.getClassSuperInts();
    for (int i = 0; i < classSuperInts.length; i++) {
    }
    assertEquals(classSuperInts.length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassMethodCount_OYWk0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classMethodCount = classBands.getClassMethodCount();
    assertEquals(0, classMethodCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassMethodCountWithNonZeroCount_XVDi1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classMethodCount = classBands.getClassMethodCount();
    assertEquals(1, classMethodCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassMethodCountWithMultipleMethods_tRvf2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classMethodCount = classBands.getClassMethodCount();
    assertEquals(2, classMethodCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassMethodCountWithDifferentMethods_NBDL3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classMethodCount = classBands.getClassMethodCount();
    assertEquals(3, classMethodCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassMethodCountWithNullSegment_Nxkt4() {
    ClassBands classBands = new ClassBands(null);
    int[] classMethodCount = classBands.getClassMethodCount();
    assertEquals(0, classMethodCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_HCSe0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classThisInts = classBands.getClassThisInts();
    assertNotNull(classThisInts);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_HCSe0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classThisInts = classBands.getClassThisInts();
    assertEquals(classThisInts.length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlags_Eodt0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] classFlags = classBands.getClassFlags();
    assertEquals(16, classFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlagsWithDefaultLayout_Eeuz1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] classFlags = classBands.getClassFlags();
    assertEquals(0, classFlags[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlagsWithNonDefaultLayout_rkTL2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] classFlags = classBands.getClassFlags();
    assertNotEquals(0, classFlags[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlagsWithAllFlagsSet_vhHm3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] classFlags = classBands.getClassFlags();
    assertEquals(0x7FFF, classFlags[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlagsWithSomeFlagsSet_OQIN4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] classFlags = classBands.getClassFlags();
    assertNotEquals(0x7FFF, classFlags[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerStartP_zRjZ0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerStartP = classBands.getCodeHandlerStartP();
        assertNotNull(codeHandlerStartP);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerStartP_zRjZ0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerStartP = classBands.getCodeHandlerStartP();
        assertEquals(1, codeHandlerStartP.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerStartP_zRjZ0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerStartP = classBands.getCodeHandlerStartP();
        assertEquals(1, codeHandlerStartP[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerStartP_zRjZ0_4() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerStartP = classBands.getCodeHandlerStartP();
        assertEquals(0, codeHandlerStartP[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributes_6_NJrK5_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertNotNull(fieldAttributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributes_6_NJrK5_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertEquals(2, fieldAttributes.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributes_6_NJrK5_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertEquals(2, fieldAttributes[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocal_CblA0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
        assertNotNull(icLocal);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocal_CblA0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
        assertEquals(10, icLocal.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocal_CblA0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
        assertEquals(10, icLocal[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNullSegment_Rzgo1() {
        ClassBands classBands = new ClassBands(null);
        IcTuple[][] icLocal = classBands.getIcLocal();
        assertNull(icLocal);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithEmptySegment_OVAN2_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
        assertEquals(0, icLocal.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocals_ZZTK0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] expected = new int[] {1, 2, 3};
        int[] actual = classBands.getCodeMaxNALocals();
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocalsWithNullSegment_AenX1() {
        ClassBands classBands = new ClassBands(null);
        int[] expected = new int[] {};
        int[] actual = classBands.getCodeMaxNALocals();
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocalsWithEmptySegment_HZiu2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] expected = new int[] {};
        int[] actual = classBands.getCodeMaxNALocals();
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_lcpW0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertNotNull(codeHandlerCount);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_lcpW0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertEquals(0, codeHandlerCount.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFieldCount_pBPc0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classFieldCount = classBands.getClassFieldCount();
    assertEquals(classFieldCount.length, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFieldCountWithNullSegment_ORIL4() {
    ClassBands classBands = new ClassBands(null);
    int[] classFieldCount = classBands.getClassFieldCount();
    assertEquals(classFieldCount.length, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrInts_dWnY0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
        assertNotNull(methodDescrInts);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrInts_dWnY0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
        assertEquals(1, methodDescrInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrInts_dWnY0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
        assertEquals(1, methodDescrInts[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrInts_dWnY0_4() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
        assertEquals(1, methodDescrInts[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassVersionMajor_UaJv0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] classVersionMajor = classBands.getClassVersionMajor();
        assertEquals(classVersionMajor.length, 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassVersionMajor_UaJv0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] classVersionMajor = classBands.getClassVersionMajor();
        assertEquals(classVersionMajor[0], 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassVersionMajorWithNullSegment_tYiU1() {
        ClassBands classBands = new ClassBands(null);
        int[] classVersionMajor = classBands.getClassVersionMajor();
        assertNull(classVersionMajor);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassVersionMajorWithEmptySegment_APiT2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] classVersionMajor = classBands.getClassVersionMajor();
        assertEquals(classVersionMajor.length, 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerEndPO_EKjl0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] expected = new int[2][2];
        expected[0][0] = 1;
        expected[0][1] = 2;
        expected[1][0] = 3;
        expected[1][1] = 4;
        int[][] actual = classBands.getCodeHandlerEndPO();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHasAttributes_oyzo0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
        for (int i = 0; i < codeHasAttributes.length; i++) {
        }
        assertEquals(codeHasAttributes.length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_pgeF0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    classBands.read(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_ftgX0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertEquals(fieldDescrInts.length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_ftgX0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertEquals(fieldDescrInts[0].length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_ftgX0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertEquals(fieldDescrInts[1].length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_ftgX0_4() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertEquals(fieldDescrInts[2].length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_ftgX0_5() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertEquals(fieldDescrInts[3].length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_ftgX0_6() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertEquals(fieldDescrInts[4].length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_ftgX0_7() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertEquals(fieldDescrInts[5].length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_ftgX0_8() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertEquals(fieldDescrInts[6].length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_ftgX0_9() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertEquals(fieldDescrInts[7].length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_ftgX0_10() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertEquals(fieldDescrInts[8].length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_ftgX0_11() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertEquals(fieldDescrInts[9].length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassInterfacesInts_lIMw0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] classInterfacesInts = classBands.getClassInterfacesInts();
        assertNotNull(classInterfacesInts);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassInterfacesInts_lIMw0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] classInterfacesInts = classBands.getClassInterfacesInts();
        assertEquals(0, classInterfacesInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassInterfacesIntsWithNullSegment_FywX3() {
        ClassBands classBands = new ClassBands(null);
        int[][] classInterfacesInts = classBands.getClassInterfacesInts();
        assertNull(classInterfacesInts);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags1_uOxJ0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    for (int i = 0; i < methodFlags.length; i++) {
        for (int j = 0; j < methodFlags[i].length; j++) {
        }
    }
    assertEquals(16, methodFlags.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCatchPO_PBUD0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerCatchPO = classBands.getCodeHandlerCatchPO();
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
        }
    }
    assertNotNull(codeHandlerCatchPO);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCatchPO_PBUD0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerCatchPO = classBands.getCodeHandlerCatchPO();
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
        }
    }
    assertEquals(10, codeHandlerCatchPO.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCatchPO_PBUD0_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerCatchPO = classBands.getCodeHandlerCatchPO();
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
        }
    }
    assertEquals(10, codeHandlerCatchPO[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerClassRCN_tRNo0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] expected = new int[][] {{1, 2}, {3, 4}};
        int[][] actual = classBands.getCodeHandlerClassRCN();
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerClassRCNWithNullSegment_uqpN1() {
        ClassBands classBands = new ClassBands(null);
        int[][] expected = new int[][] {{1, 2}, {3, 4}};
        int[][] actual = classBands.getCodeHandlerClassRCN();
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerClassRCNWithEmptySegment_uNQT2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] expected = new int[][] {};
        int[][] actual = classBands.getCodeHandlerClassRCN();
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxStack_pfIi0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxStack = classBands.getCodeMaxStack();
        assertNotNull(codeMaxStack);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxStack_pfIi0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxStack = classBands.getCodeMaxStack();
        assertEquals(1, codeMaxStack.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxStack_pfIi0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxStack = classBands.getCodeMaxStack();
        assertEquals(0, codeMaxStack[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxStackWithNonZeroValue_tseE1_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxStack = classBands.getCodeMaxStack();
        assertEquals(1, codeMaxStack[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxStackWithMultipleValues_Saot2_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxStack = classBands.getCodeMaxStack();
        assertEquals(2, codeMaxStack.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxStackWithMultipleValues_Saot2_4() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxStack = classBands.getCodeMaxStack();
        assertEquals(1, codeMaxStack[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxStackWithNullSegment_qqLr3() {
        ClassBands classBands = new ClassBands(null);
        int[] codeMaxStack = classBands.getCodeMaxStack();
        assertNull(codeMaxStack);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxStackWithInvalidSegment_MCuD4() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxStack = classBands.getCodeMaxStack();
        assertNull(codeMaxStack);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescr_JTYp0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    String[][] methodDescr = classBands.getMethodDescr();
    assertNotNull(methodDescr);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescr_JTYp0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    String[][] methodDescr = classBands.getMethodDescr();
    assertEquals(1, methodDescr.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescr_JTYp0_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    String[][] methodDescr = classBands.getMethodDescr();
    assertEquals(1, methodDescr[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescr_JTYp0_4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    String[][] methodDescr = classBands.getMethodDescr();
    assertEquals("methodDescr", methodDescr[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescrWithNullSegment_jiJr1() {
    ClassBands classBands = new ClassBands(null);
    String[][] methodDescr = classBands.getMethodDescr();
    assertNull(methodDescr);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescrWithEmptySegment_TpgA2_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    String[][] methodDescr = classBands.getMethodDescr();
    assertEquals(0, methodDescr.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags1_INTz0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertEquals(0, fieldFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags2_LEDB1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertEquals(1, fieldFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags3_VKBs2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertEquals(16, fieldFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags4_uXxK3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertEquals(0x7FFF, fieldFlags[0].length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags5_pdwg4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertEquals(0x7FFF, fieldFlags[15].length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags6_AgPh5() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertEquals(0x7FFF, fieldFlags[0][0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags7_YIEZ6() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertEquals(0x7FFF, fieldFlags[15][15]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassAttributes_XykN0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        ArrayList<Attribute>[] classAttributes = classBands.getClassAttributes();
        assertNotNull(classAttributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassAttributes_XykN0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        ArrayList<Attribute>[] classAttributes = classBands.getClassAttributes();
        assertEquals(1, classAttributes.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassAttributes_XykN0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        ArrayList<Attribute>[] classAttributes = classBands.getClassAttributes();
        assertEquals(Attribute.class, classAttributes[0].getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinor_wrWR0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNotNull(classVersionMinor);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinor_wrWR0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(2, classVersionMinor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinor_wrWR0_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(0, classVersionMinor[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinor_wrWR0_4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(0, classVersionMinor[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNonZeroValues_qqXk1_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(1, classVersionMinor[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNonZeroValues_qqXk1_4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(2, classVersionMinor[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNegativeValues_ATeQ2_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(-1, classVersionMinor[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNegativeValues_ATeQ2_4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(-2, classVersionMinor[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithInvalidValues_iLzj3_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(Integer.MAX_VALUE, classVersionMinor[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithInvalidValues_iLzj3_4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(Integer.MIN_VALUE, classVersionMinor[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNullSegment_mdCA4() {
    ClassBands classBands = new ClassBands(null);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNull(classVersionMinor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNullClassBands_OXBu5() {
    ClassBands classBands = null;
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNull(classVersionMinor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescrWithMultipleSegments_wYoK4_RgXL0_1() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    ClassBands classBands = new ClassBands(segment1);
    String[][] methodDescr = classBands.getMethodDescr();
    assertNotNull(methodDescr);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescrWithMultipleSegments_wYoK4_RgXL0_2() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    ClassBands classBands = new ClassBands(segment1);
    String[][] methodDescr = classBands.getMethodDescr();
    assertEquals(2, methodDescr.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescrWithMultipleSegments_wYoK4_RgXL0_3() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    ClassBands classBands = new ClassBands(segment1);
    String[][] methodDescr = classBands.getMethodDescr();
    assertEquals(1, methodDescr[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescrWithMultipleSegments_wYoK4_RgXL0_4() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    ClassBands classBands = new ClassBands(segment1);
    String[][] methodDescr = classBands.getMethodDescr();
    assertEquals("methodDescr", methodDescr[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescrWithMultipleSegments_wYoK4_RgXL0_5() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    ClassBands classBands = new ClassBands(segment1);
    String[][] methodDescr = classBands.getMethodDescr();
    assertEquals(1, methodDescr[1].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescrWithMultipleSegments_wYoK4_RgXL0_6() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    ClassBands classBands = new ClassBands(segment1);
    String[][] methodDescr = classBands.getMethodDescr();
    assertEquals("methodDescr", methodDescr[1][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawClassFlags_iPOi0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] rawClassFlags = classBands.getRawClassFlags();
    assertNotNull(rawClassFlags);
    assertEquals(10, rawClassFlags.length);
    for (int i = 0; i < 10; i++) {
        assertEquals(i, rawClassFlags[i]);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawClassFlagsWithNullSegment_Afmn1() {
    ClassBands classBands = new ClassBands(null);
    long[] rawClassFlags = classBands.getRawClassFlags();
    assertNull(rawClassFlags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawClassFlagsWithEmptySegment_ERyG4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] rawClassFlags = classBands.getRawClassFlags();
    assertNotNull(rawClassFlags);
    assertEquals(0, rawClassFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawClassFlagsWithNullClassBands_igeB5() {
    ClassBands classBands = null;
    long[] rawClassFlags = classBands.getRawClassFlags();
    assertNull(rawClassFlags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawClassFlagsWithValidClassBands_KDfN7() {
    ClassBands classBands = new ClassBands(new Segment());
    long[] rawClassFlags = classBands.getRawClassFlags();
    assertNotNull(rawClassFlags);
    assertEquals(10, rawClassFlags.length);
    for (int i = 0; i < 10; i++) {
        assertEquals(i, rawClassFlags[i]);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawClassFlagsWithEmptyClassBands_ovMM8() {
    ClassBands classBands = new ClassBands(new Segment());
    long[] rawClassFlags = classBands.getRawClassFlags();
    assertNotNull(rawClassFlags);
    assertEquals(0, rawClassFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_VVMb0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classSuperInts = classBands.getClassSuperInts();
    assertEquals(classSuperInts.length, 10);
    for (int i = 0; i < classSuperInts.length; i++) {
        assertEquals(classSuperInts[i], i);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_HCSe0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classThisInts = classBands.getClassThisInts();
    assertNotNull(classThisInts);
    assertEquals(classThisInts.length, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerStartP_zRjZ0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerStartP = classBands.getCodeHandlerStartP();
        assertNotNull(codeHandlerStartP);
        assertEquals(1, codeHandlerStartP.length);
        assertEquals(1, codeHandlerStartP[0].length);
        assertEquals(0, codeHandlerStartP[0][0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributes_6_NJrK5() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertNotNull(fieldAttributes);
    assertEquals(2, fieldAttributes.length);
    assertEquals(2, fieldAttributes[0].length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocal_CblA0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
        assertNotNull(icLocal);
        assertEquals(10, icLocal.length);
        assertEquals(10, icLocal[0].length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithEmptySegment_OVAN2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
        assertNotNull(icLocal);
        assertEquals(0, icLocal.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_lcpW0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertNotNull(codeHandlerCount);
    assertEquals(0, codeHandlerCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrInts_dWnY0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
        assertNotNull(methodDescrInts);
        assertEquals(1, methodDescrInts.length);
        assertEquals(1, methodDescrInts[0].length);
        assertEquals(1, methodDescrInts[0][0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassVersionMajor_UaJv0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] classVersionMajor = classBands.getClassVersionMajor();
        assertEquals(classVersionMajor.length, 1);
        assertEquals(classVersionMajor[0], 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHasAttributes_oyzo0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
        assertEquals(codeHasAttributes.length, 10);
        for (int i = 0; i < codeHasAttributes.length; i++) {
            assertEquals(codeHasAttributes[i], false);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_ftgX0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertEquals(fieldDescrInts.length, 10);
        assertEquals(fieldDescrInts[0].length, 10);
        assertEquals(fieldDescrInts[1].length, 10);
        assertEquals(fieldDescrInts[2].length, 10);
        assertEquals(fieldDescrInts[3].length, 10);
        assertEquals(fieldDescrInts[4].length, 10);
        assertEquals(fieldDescrInts[5].length, 10);
        assertEquals(fieldDescrInts[6].length, 10);
        assertEquals(fieldDescrInts[7].length, 10);
        assertEquals(fieldDescrInts[8].length, 10);
        assertEquals(fieldDescrInts[9].length, 10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassInterfacesInts_lIMw0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] classInterfacesInts = classBands.getClassInterfacesInts();
        assertNotNull(classInterfacesInts);
        assertEquals(0, classInterfacesInts.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags1_uOxJ0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertEquals(16, methodFlags.length);
    for (int i = 0; i < methodFlags.length; i++) {
        assertEquals(16, methodFlags[i].length);
        for (int j = 0; j < methodFlags[i].length; j++) {
            assertTrue(methodFlags[i][j] >= 0);
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags2_wjGG1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertEquals(16, methodFlags.length);
    for (int i = 0; i < methodFlags.length; i++) {
        assertEquals(16, methodFlags[i].length);
        for (int j = 0; j < methodFlags[i].length; j++) {
            assertTrue(methodFlags[i][j] <= 0x7FFF);
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags3_MfwH2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertEquals(16, methodFlags.length);
    for (int i = 0; i < methodFlags.length; i++) {
        assertEquals(16, methodFlags[i].length);
        for (int j = 0; j < methodFlags[i].length; j++) {
            assertTrue(methodFlags[i][j] == 0);
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags4_UbGL3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertEquals(16, methodFlags.length);
    for (int i = 0; i < methodFlags.length; i++) {
        assertEquals(16, methodFlags[i].length);
        for (int j = 0; j < methodFlags[i].length; j++) {
            assertTrue(methodFlags[i][j] != 0);
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags5_YuTp4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertEquals(16, methodFlags.length);
    for (int i = 0; i < methodFlags.length; i++) {
        assertEquals(16, methodFlags[i].length);
        for (int j = 0; j < methodFlags[i].length; j++) {
            assertTrue(methodFlags[i][j] == 0x7FFF);
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags6_SSEC5() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertEquals(16, methodFlags.length);
    for (int i = 0; i < methodFlags.length; i++) {
        assertEquals(16, methodFlags[i].length);
        for (int j = 0; j < methodFlags[i].length; j++) {
            assertTrue(methodFlags[i][j] != 0x7FFF);
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCatchPO_PBUD0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerCatchPO = classBands.getCodeHandlerCatchPO();
    assertNotNull(codeHandlerCatchPO);
    assertEquals(10, codeHandlerCatchPO.length);
    assertEquals(10, codeHandlerCatchPO[0].length);
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            assertEquals(i * j, codeHandlerCatchPO[i][j]);
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxStack_pfIi0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxStack = classBands.getCodeMaxStack();
        assertNotNull(codeMaxStack);
        assertEquals(1, codeMaxStack.length);
        assertEquals(0, codeMaxStack[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxStackWithNonZeroValue_tseE1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxStack = classBands.getCodeMaxStack();
        assertNotNull(codeMaxStack);
        assertEquals(1, codeMaxStack.length);
        assertEquals(1, codeMaxStack[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxStackWithMultipleValues_Saot2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxStack = classBands.getCodeMaxStack();
        assertNotNull(codeMaxStack);
        assertEquals(2, codeMaxStack.length);
        assertEquals(0, codeMaxStack[0]);
        assertEquals(1, codeMaxStack[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescr_JTYp0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    String[][] methodDescr = classBands.getMethodDescr();
    assertNotNull(methodDescr);
    assertEquals(1, methodDescr.length);
    assertEquals(1, methodDescr[0].length);
    assertEquals("methodDescr", methodDescr[0][0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescrWithEmptySegment_TpgA2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    String[][] methodDescr = classBands.getMethodDescr();
    assertNotNull(methodDescr);
    assertEquals(0, methodDescr.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassAttributes_XykN0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        ArrayList<Attribute>[] classAttributes = classBands.getClassAttributes();
        assertNotNull(classAttributes);
        assertEquals(1, classAttributes.length);
        assertEquals(Attribute.class, classAttributes[0].getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinor_wrWR0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNotNull(classVersionMinor);
    assertEquals(2, classVersionMinor.length);
    assertEquals(0, classVersionMinor[0]);
    assertEquals(0, classVersionMinor[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNonZeroValues_qqXk1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNotNull(classVersionMinor);
    assertEquals(2, classVersionMinor.length);
    assertEquals(1, classVersionMinor[0]);
    assertEquals(2, classVersionMinor[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNegativeValues_ATeQ2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNotNull(classVersionMinor);
    assertEquals(2, classVersionMinor.length);
    assertEquals(-1, classVersionMinor[0]);
    assertEquals(-2, classVersionMinor[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithInvalidValues_iLzj3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNotNull(classVersionMinor);
    assertEquals(2, classVersionMinor.length);
    assertEquals(Integer.MAX_VALUE, classVersionMinor[0]);
    assertEquals(Integer.MIN_VALUE, classVersionMinor[1]);
}
}