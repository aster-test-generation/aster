/**
 * Generated by Aster
 */
package org.apache.commons.compress.parallel;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileBasedScatterGatherBackingStore_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_InvalidFile_yhbR4() throws IOException {
    FileBasedScatterGatherBackingStore store = new FileBasedScatterGatherBackingStore(new File("invalid.txt"));
    InputStream inputStream = store.getInputStream();
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_FileNotFoundException_SUBb6() throws IOException {
    FileBasedScatterGatherBackingStore store = new FileBasedScatterGatherBackingStore(new File("test.txt"));
    InputStream inputStream = store.getInputStream();
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_invalidData_failure_UEFY1() throws IOException {
    FileBasedScatterGatherBackingStore store = new FileBasedScatterGatherBackingStore(new File("test.txt"));
    byte[] data = null;
    int offset = 0;
    int length = 0;
    try {
        store.writeOut(data, offset, length);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertTrue(true);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_invalidOffset_failure_dXxy2() throws IOException {
    FileBasedScatterGatherBackingStore store = new FileBasedScatterGatherBackingStore(new File("test.txt"));
    byte[] data = "Hello, World!".getBytes();
    int offset = -1;
    int length = data.length;
    try {
        store.writeOut(data, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
        assertTrue(true);
    }
}
}