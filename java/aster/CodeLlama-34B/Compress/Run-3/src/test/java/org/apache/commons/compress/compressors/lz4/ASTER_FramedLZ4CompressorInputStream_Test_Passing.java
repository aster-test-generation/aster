/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lz4;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FramedLZ4CompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_emptySignature_uvgw0() {
    byte[] signature = new byte[0];
    int length = 0;
    assertFalse(FramedLZ4CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_validSignature_xMRf1() {
    byte[] signature = new byte[] { 0x04, 0x22, 0x4D, 0x18 };
    int length = signature.length;
    assertTrue(FramedLZ4CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testReadWithNullInput_PVRp2() throws IOException {
		FramedLZ4CompressorInputStream inputStream = new FramedLZ4CompressorInputStream(null);
		byte[] b = new byte[10];
		int len = inputStream.read(b, 0, 10);
		assertEquals(-1, len);
}
}