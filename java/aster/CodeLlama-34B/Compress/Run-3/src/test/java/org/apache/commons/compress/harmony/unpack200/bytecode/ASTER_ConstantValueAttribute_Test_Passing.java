/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ConstantValueAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_mdIk0() {
    ConstantValueAttribute attribute = new ConstantValueAttribute(new ByteCode(1));
    assertTrue(attribute.equals(attribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectSameValues_pukr1() {
    ConstantValueAttribute attribute1 = new ConstantValueAttribute(new ByteCode(1));
    ConstantValueAttribute attribute2 = new ConstantValueAttribute(new ByteCode(1));
    assertTrue(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectDifferentValues_DRLX2() {
    ConstantValueAttribute attribute1 = new ConstantValueAttribute(new ByteCode(1));
    ConstantValueAttribute attribute2 = new ConstantValueAttribute(new ByteCode(2));
    assertFalse(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_zEWe3() {
    ConstantValueAttribute attribute = new ConstantValueAttribute(new ByteCode(1));
    assertFalse(attribute.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_mIjz4() {
    ConstantValueAttribute attribute = new ConstantValueAttribute(new ByteCode(1));
    assertFalse(attribute.equals(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectDifferentValuesDifferentOrder_tHdX6() {
    ConstantValueAttribute attribute1 = new ConstantValueAttribute(new ByteCode(1));
    ConstantValueAttribute attribute2 = new ConstantValueAttribute(new ByteCode(3));
    assertFalse(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClassAndNotNull_VWly8_2() {
    ConstantValueAttribute attribute = new ConstantValueAttribute(new ByteCode(1));
    assertFalse(attribute.equals(new Object()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_Zxsf0() {
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(entry);
    String expected = "Constant:1";
    String actual = constantValueAttribute.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_avNF0() {
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithNested_zlVC1() {
    ByteCode entry = new ByteCode(1, new ClassFileEntry[0]);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_mwWl13() {
    ClassConstantPool pool = new ClassConstantPool();
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_entryNull_HakZ0() {
    ConstantValueAttribute attribute = new ConstantValueAttribute(null);
    int expected = 1;
    int actual = attribute.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_entryNotNull_MnlH1() {
    ByteCode entry = new ByteCode(1, new ClassFileEntry[0]);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    int expected = 32;
    int actual = attribute.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullAndNotNull_ggGi7() {
    ConstantValueAttribute attribute = new ConstantValueAttribute(new ByteCode(1));
    assertFalse(attribute.equals(null));
    assertFalse(attribute.equals(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClassAndNotNull_VWly8() {
    ConstantValueAttribute attribute = new ConstantValueAttribute(new ByteCode(1));
    assertFalse(attribute.equals(""));
    assertFalse(attribute.equals(new Object()));
}
}