/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_RunCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Pweo0() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    byte[] result = runCodec.encode(10, 20);
    assertEquals(10, result[0]);
    assertEquals(20, result[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithLast_TAyL1() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    byte[] result = runCodec.encode(10, 20);
    assertEquals(10, result[0]);
    assertEquals(20, result[1]);
    assertEquals(20, result[2]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_NYAj0() throws Pack200Exception {
    int b = 10;
    int h = 20;
    int s = 30;
    int d = 40;
    BHSDCodec aCodec = new BHSDCodec(b, h, s, d);
    BHSDCodec bCodec = new BHSDCodec(b, h, s);
    RunCodec runCodec = new RunCodec(10, aCodec, bCodec);
    byte[] encoded = runCodec.encode(10);
    assertEquals(10, encoded.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Pweo0_1() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    byte[] result = runCodec.encode(10, 20);
    assertEquals(10, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Pweo0_2() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    byte[] result = runCodec.encode(10, 20);
    assertEquals(20, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithLast_TAyL1_3() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    byte[] result = runCodec.encode(10, 20);
    assertEquals(20, result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBCodec_fRpI0_jHoL0() {
    int b = 1;
    int h = 2;
    int s = 3;
    int d = 4;
    BHSDCodec aCodec = new BHSDCodec(b, h, s, d);
    BHSDCodec bCodec = new BHSDCodec(b, h, s);
    try {
        RunCodec runCodec = new RunCodec(1, aCodec, bCodec);
        Codec codec = runCodec.getBCodec();
        assertEquals(bCodec, codec);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBCodec_NqJx1_IliV0() {
    int b = 1;
    int h = 2;
    int s = 3;
    int d = 4;
    BHSDCodec aCodec = new BHSDCodec(b, h, s, d);
    BHSDCodec bCodec = new BHSDCodec(b, h, s);
    try {
        RunCodec runCodec = new RunCodec(1, aCodec, bCodec);
        Codec codec = runCodec.getBCodec();
        assertEquals(bCodec, codec);
        assertEquals(bCodec, runCodec.getBCodec());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetACodecWithDifferentBHSDCodec_JASN1_CuYz0() {
    BHSDCodec aCodec = new BHSDCodec(8, 4);
    BHSDCodec bCodec = new BHSDCodec(8, 4, 2, 1);
    try {
        RunCodec runCodec = new RunCodec(1, aCodec, bCodec);
        Codec codec = runCodec.getACodec();
        assertNotEquals(bCodec, codec);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetACodecWithDifferentRunCodec_aJbT2_bEAm0() {
    BHSDCodec aCodec = new BHSDCodec(8, 4);
    BHSDCodec bCodec = new BHSDCodec(8, 4, 2, 1);
    try {
        RunCodec runCodec = new RunCodec(2, aCodec, bCodec);
        Codec codec = runCodec.getACodec();
        assertNotEquals(aCodec, codec);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetACodecWithDifferentBHSDCodecAndRunCodecAndK_WusC7_HmLM0() {
    BHSDCodec aCodec = new BHSDCodec(8, 4);
    BHSDCodec bCodec = new BHSDCodec(8, 4, 2, 1);
    try {
        RunCodec runCodec = new RunCodec(2, aCodec, bCodec);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_uyhA0_TwxT0() {
    BHSDCodec aCodec = new BHSDCodec(8, 4);
    BHSDCodec bCodec = new BHSDCodec(8, 4);
    try {
        RunCodec runCodec = new RunCodec(1, aCodec, bCodec);
        String result = runCodec.toString();
        assertNotNull(result);
        assertTrue(result.contains("RunCodec[k=1;aCodec=BHSDCodec[b=8;h=4;s=0;d=0];bCodec=BHSDCodec[b=8;h=4;s=0;d=0]]"));
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetK_GKUm0_ITzx0() {
    BHSDCodec aCodec = new BHSDCodec(8, 8);
    BHSDCodec bCodec = new BHSDCodec(8, 8);
    try {
        RunCodec runCodec = new RunCodec(10, aCodec, bCodec);
        assertEquals(10, runCodec.getK());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetKWithDifferentB_IBJM1_pZlM0() {
    BHSDCodec aCodec = new BHSDCodec(8, 8);
    BHSDCodec bCodec = new BHSDCodec(16, 8);
    try {
        RunCodec runCodec = new RunCodec(10, aCodec, bCodec);
        assertEquals(10, runCodec.getK());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
}