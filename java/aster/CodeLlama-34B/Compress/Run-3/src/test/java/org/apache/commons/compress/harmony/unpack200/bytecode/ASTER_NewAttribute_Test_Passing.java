/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NewAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_TCAf0_1() {
    CPUTF8 attributeName = new CPUTF8("attributeName");
    int layoutIndex = 0;
    NewAttribute newAttribute = new NewAttribute(attributeName, layoutIndex);
    int[] startPCs = newAttribute.getStartPCs();
    assertNotNull(startPCs);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_TCAf0_2() {
    CPUTF8 attributeName = new CPUTF8("attributeName");
    int layoutIndex = 0;
    NewAttribute newAttribute = new NewAttribute(attributeName, layoutIndex);
    int[] startPCs = newAttribute.getStartPCs();
    assertEquals(0, startPCs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayoutIndex_qjqR0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 1);
    int layoutIndex = newAttribute.getLayoutIndex();
    assertEquals(1, layoutIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayoutIndexWithDifferentCPUTF8_AaJe1() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("differentAttributeName"), 2);
    int layoutIndex = newAttribute.getLayoutIndex();
    assertEquals(2, layoutIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayoutIndexWithDifferentGlobalIndex_yhhL2() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 3);
    int layoutIndex = newAttribute.getLayoutIndex();
    assertEquals(3, layoutIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayoutIndexWithNullCPUTF8_kgBb3() {
    NewAttribute newAttribute = new NewAttribute(null, 1);
    int layoutIndex = newAttribute.getLayoutIndex();
    assertEquals(1, layoutIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInteger_InvalidLength_qEcA1() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 0);
    try {
        newAttribute.addInteger(-1, 1234567890L);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Length must be positive", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInteger_InvalidValue_AQcD2() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 0);
    try {
        newAttribute.addInteger(10, -1234567890L);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Value must be non-negative", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_empty_TUjE0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8(""), 0);
    assertEquals(0, newAttribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_nonEmpty_tISN1() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("test"), 1);
    assertEquals(4, newAttribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRenumber_emptyList_FUPJ0() {
    NewAttribute attribute = new NewAttribute(new CPUTF8("AttributeName"), 0);
    List<Integer> byteCodeOffsets = new ArrayList<>();
    attribute.renumber(byteCodeOffsets);
    assertTrue(attribute.renumbered);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayoutIndexWithNullGlobalIndex_pLKI4_mItO0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 0);
    int layoutIndex = newAttribute.getLayoutIndex();
    assertEquals(0, layoutIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayoutIndexWithBothNull_wFcy5_oljw0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8(""), 0);
    int layoutIndex = newAttribute.getLayoutIndex();
    assertEquals(0, layoutIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInteger_NullLength_DBLh3_LSVG0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 0);
    try {
        newAttribute.addInteger(0, 1234567890L);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Length must not be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInteger_NullValue_DLNH4_fEdY0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 0);
    try {
        newAttribute.addInteger(10, 0L);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Value must not be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_nonEmptyLengthsNonZeroLayoutIndex_fwxI2_ueGO0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("test"), 1);
    newAttribute.addBCOffset(1, 1);
    assertEquals(5, newAttribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_TCAf0() {
    CPUTF8 attributeName = new CPUTF8("attributeName");
    int layoutIndex = 0;
    NewAttribute newAttribute = new NewAttribute(attributeName, layoutIndex);
    int[] startPCs = newAttribute.getStartPCs();
    assertNotNull(startPCs);
    assertEquals(0, startPCs.length);
}
}