/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassConstantPool_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEntries_VzOk0() {
    ClassConstantPool constantPool = new ClassConstantPool();
    List<ClassFileEntry> entries = constantPool.entries();
    assertEquals(0, entries.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEntriesWithNullConstantPool_DzEY8() {
    ClassConstantPool constantPool = null;
    List<ClassFileEntry> entries = constantPool.entries();
    assertEquals(0, entries.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGet_Resolved_MEUI0() {
    ClassConstantPool pool = new ClassConstantPool();
    ClassFileEntry entry = pool.get(1);
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGet_NotResolved_INOS1() {
    ClassConstantPool pool = new ClassConstantPool();
    try {
        pool.get(1);
        fail("Expected IllegalStateException");
    } catch (IllegalStateException e) {
        assertEquals("Constant pool is not yet resolved; this does not make any sense", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGet_Resolved_OutOfBounds_GFjv2() {
    ClassConstantPool pool = new ClassConstantPool();
    try {
        pool.get(100);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
        assertEquals("Index 100 out of bounds for length 10", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddNull_yOLQ3() {
    ClassConstantPool pool = new ClassConstantPool();
    ClassFileEntry entry = null;
    ClassFileEntry result = pool.add(entry);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_empty_NVCC0() {
    ClassConstantPool pool = new ClassConstantPool();
    assertEquals(0, pool.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddByteCode_rerf0_VFiw0() {
    ClassConstantPool pool = new ClassConstantPool();
    ByteCode byteCode = new ByteCode(0);
    ClassFileEntry entry = pool.add(byteCode);
    assertNull(entry);
}
}