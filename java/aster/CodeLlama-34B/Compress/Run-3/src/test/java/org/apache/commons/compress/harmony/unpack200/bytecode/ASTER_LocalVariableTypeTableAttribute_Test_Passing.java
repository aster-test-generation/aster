/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTypeTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullSignatures_fxtN5() {
    LocalVariableTypeTableAttribute attr = new LocalVariableTypeTableAttribute(10, new int[] { 0, 1, 2 }, new int[] { 3, 4, 5 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3") }, null, new int[] { 6, 7, 8 });
    String expected = "LocalVariableTypeTable: 10 variables";
    String actual = attr.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_czMo0_1() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[] { 0 }, new int[] { 1 }, new CPUTF8[] { new CPUTF8("name") }, new CPUTF8[] { new CPUTF8("signature") }, new int[] { 0 });
    ClassFileEntry[] nestedEntries = attribute.getNestedClassFileEntries();
    assertEquals(2, nestedEntries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_czMo0_2() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[] { 0 }, new int[] { 1 }, new CPUTF8[] { new CPUTF8("name") }, new CPUTF8[] { new CPUTF8("signature") }, new int[] { 0 });
    ClassFileEntry[] nestedEntries = attribute.getNestedClassFileEntries();
    assertEquals(new CPUTF8("name"), nestedEntries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_czMo0_3() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[] { 0 }, new int[] { 1 }, new CPUTF8[] { new CPUTF8("name") }, new CPUTF8[] { new CPUTF8("signature") }, new int[] { 0 });
    ClassFileEntry[] nestedEntries = attribute.getNestedClassFileEntries();
    assertEquals(new CPUTF8("signature"), nestedEntries[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_gWlW0_1() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(10, new int[] { 0, 1, 2 }, new int[] { 3, 4, 5 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3") }, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2"), new CPUTF8("signature3") }, new int[] { 6, 7, 8 });
    int[] startPcs = attribute.getStartPCs();
    assertEquals(3, startPcs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_gWlW0_2() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(10, new int[] { 0, 1, 2 }, new int[] { 3, 4, 5 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3") }, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2"), new CPUTF8("signature3") }, new int[] { 6, 7, 8 });
    int[] startPcs = attribute.getStartPCs();
    assertEquals(0, startPcs[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_gWlW0_3() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(10, new int[] { 0, 1, 2 }, new int[] { 3, 4, 5 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3") }, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2"), new CPUTF8("signature3") }, new int[] { 6, 7, 8 });
    int[] startPcs = attribute.getStartPCs();
    assertEquals(1, startPcs[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_gWlW0_4() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(10, new int[] { 0, 1, 2 }, new int[] { 3, 4, 5 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3") }, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2"), new CPUTF8("signature3") }, new int[] { 6, 7, 8 });
    int[] startPcs = attribute.getStartPCs();
    assertEquals(2, startPcs[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCsWithEmptyStartPCs_ocni2() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(10, new int[] {}, new int[] { 3, 4, 5 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3") }, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2"), new CPUTF8("signature3") }, new int[] { 6, 7, 8 });
    int[] startPcs = attribute.getStartPCs();
    assertEquals(0, startPcs.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_jHNa0() {
    LocalVariableTypeTableAttribute attr = new LocalVariableTypeTableAttribute(10, new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }, new int[] { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3"), new CPUTF8("name4"), new CPUTF8("name5"), new CPUTF8("name6"), new CPUTF8("name7"), new CPUTF8("name8"), new CPUTF8("name9"), new CPUTF8("name10") }, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2"), new CPUTF8("signature3"), new CPUTF8("signature4"), new CPUTF8("signature5"), new CPUTF8("signature6"), new CPUTF8("signature7"), new CPUTF8("signature8"), new CPUTF8("signature9"), new CPUTF8("signature10") }, new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 });
    assertEquals(20, attr.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithZeroLength_bywm1() {
    LocalVariableTypeTableAttribute attr = new LocalVariableTypeTableAttribute(0, new int[0], new int[0], new CPUTF8[0], new CPUTF8[0], new int[0]);
    assertEquals(2, attr.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithOneElement_LhoL2() {
    LocalVariableTypeTableAttribute attr = new LocalVariableTypeTableAttribute(1, new int[] { 0 }, new int[] { 10 }, new CPUTF8[] { new CPUTF8("name1") }, new CPUTF8[] { new CPUTF8("signature1") }, new int[] { 0 });
    assertEquals(12, attr.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithMultipleElements_NyAz3() {
    LocalVariableTypeTableAttribute attr = new LocalVariableTypeTableAttribute(3, new int[] { 0, 1, 2 }, new int[] { 10, 11, 12 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3") }, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2"), new CPUTF8("signature3") }, new int[] { 0, 1, 2 });
    assertEquals(36, attr.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_TlXy0_yEjM0() {
    LocalVariableTypeTableAttribute attr = new LocalVariableTypeTableAttribute(10, new int[] { 0, 1, 2 }, new int[] { 3, 4, 5 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3") }, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2"), new CPUTF8("signature3") }, new int[] { 6, 7, 8 });
    String expected = "LocalVariableTypeTable: 10 variables";
    String actual = attr.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithZeroLength_svDd1_wVlw0() {
    LocalVariableTypeTableAttribute attr = new LocalVariableTypeTableAttribute(0, new int[] { }, new int[] { }, new CPUTF8[] { }, new CPUTF8[] { }, new int[] { });
    String expected = "LocalVariableTypeTable: 0 variables";
    String actual = attr.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullStartPcs_bqLM2_fqSA0() {
    LocalVariableTypeTableAttribute attr = new LocalVariableTypeTableAttribute(10, new int[] { 0 }, new int[] { 3, 4, 5 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3") }, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2"), new CPUTF8("signature3") }, new int[] { 6, 7, 8 });
    String expected = "LocalVariableTypeTable: 10 variables";
    String actual = attr.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullLengths_fERH3_Fecl0() {
    LocalVariableTypeTableAttribute attr = new LocalVariableTypeTableAttribute(10, new int[] { 0, 1, 2 }, null, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3") }, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2"), new CPUTF8("signature3") }, new int[] { 6, 7, 8 });
    String expected = "LocalVariableTypeTable: 10 variables";
    String actual = attr.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullNames_pxyf4() {
    LocalVariableTypeTableAttribute attr = new LocalVariableTypeTableAttribute(10, new int[] { 0, 1, 2 }, new int[] { 3, 4, 5 }, null, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2"), new CPUTF8("signature3") }, new int[] { 6, 7, 8 });
    String expected = "LocalVariableTypeTable: 10 variables";
    String actual = attr.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_czMo0() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[] { 0 }, new int[] { 1 }, new CPUTF8[] { new CPUTF8("name") }, new CPUTF8[] { new CPUTF8("signature") }, new int[] { 0 });
    ClassFileEntry[] nestedEntries = attribute.getNestedClassFileEntries();
    assertEquals(2, nestedEntries.length);
    assertEquals(new CPUTF8("name"), nestedEntries[0]);
    assertEquals(new CPUTF8("signature"), nestedEntries[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_gWlW0() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(10, new int[] { 0, 1, 2 }, new int[] { 3, 4, 5 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3") }, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2"), new CPUTF8("signature3") }, new int[] { 6, 7, 8 });
    int[] startPcs = attribute.getStartPCs();
    assertEquals(3, startPcs.length);
    assertEquals(0, startPcs[0]);
    assertEquals(1, startPcs[1]);
    assertEquals(2, startPcs[2]);
}
}