/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GeneralPurposeBit_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSlidingDictionarySize_YDJq0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int slidingDictionarySize = gpb.getSlidingDictionarySize();
    assertEquals(0, slidingDictionarySize);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_YHkT0() {
    GeneralPurposeBit bit = new GeneralPurposeBit();
    assertTrue(bit.equals(bit));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_MceH1() {
    GeneralPurposeBit bit1 = new GeneralPurposeBit();
    GeneralPurposeBit bit2 = new GeneralPurposeBit();
    assertFalse(bit1.equals(bit2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_uwiW2() {
    GeneralPurposeBit bit = new GeneralPurposeBit();
    assertFalse(bit.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_Tvzi3() {
    GeneralPurposeBit bit = new GeneralPurposeBit();
    Object obj = new Object();
    assertFalse(bit.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesEncryption_Ired0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    boolean result = gpb.usesEncryption();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_slidingDictionarySizeFlag_Zszc4() {
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int offset = 0;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(8192, b.getSlidingDictionarySize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_numberOfShannonFanoTreesFlag_onEh5() {
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int offset = 0;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(3, b.getNumberOfShannonFanoTrees());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumberOfShannonFanoTrees_wOOS0() {
        GeneralPurposeBit gpb = new GeneralPurposeBit();
        int expected = 10;
        int actual = gpb.getNumberOfShannonFanoTrees();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTreesWithZero_JMvb1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 0;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTreesWithOne_NJsa2() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 1;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTreesWithNegative_pRxK3() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = -1;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_wmZa0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = gpb.encode();
    assertEquals(2, result.length);
    assertEquals(0, result[0]);
    assertEquals(0, result[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_hKMv0() {
    GeneralPurposeBit bit = new GeneralPurposeBit();
    Object clone = bit.clone();
    assertNotNull(clone);
    assertTrue(clone instanceof GeneralPurposeBit);
    assertEquals(bit, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_wmZa0_1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = gpb.encode();
    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_wmZa0_2() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = gpb.encode();
    assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_wmZa0_3() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = gpb.encode();
    assertEquals(0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_hKMv0_1() {
    GeneralPurposeBit bit = new GeneralPurposeBit();
    Object clone = bit.clone();
    assertNotNull(clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_hKMv0_2() {
    GeneralPurposeBit bit = new GeneralPurposeBit();
    Object clone = bit.clone();
    assertTrue(clone instanceof GeneralPurposeBit);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_hKMv0_3() {
    GeneralPurposeBit bit = new GeneralPurposeBit();
    Object clone = bit.clone();
    assertEquals(bit, clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameValues_OHfk4_fMEG0() {
    GeneralPurposeBit bit1 = new GeneralPurposeBit();
    GeneralPurposeBit bit2 = new GeneralPurposeBit();
    assertTrue(bit1.equals(bit2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesUTF8ForNames_true_iSHk0_Ipec0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertTrue(gpb.usesUTF8ForNames());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesUTF8ForNames_false_SqkZ1_BUlS0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertFalse(gpb.usesUTF8ForNames());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesUTF8ForNames_null_QeFx2_jvGP0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertNull(gpb.usesUTF8ForNames());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesDataDescriptor_True_HAUe0_fjkM0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertTrue(gpb.usesDataDescriptor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesDataDescriptor_False_RVzg1_DSSR0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertFalse(gpb.usesDataDescriptor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesDataDescriptor_Null_AmKn2_wcsP0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertNull(gpb.usesDataDescriptor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_encryptionFlagTrue_strongEncryptionFlagTrue_languageEncodingFlagTrue_dataDescriptorFlagTrue_nJsd0_ieQQ0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expectedHashCode = 3 * (7 * (13 * (17 * 1 + 1) + 1) + 1);
    assertEquals(expectedHashCode, gpb.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_encryptionFlagTrue_strongEncryptionFlagTrue_languageEncodingFlagFalse_dataDescriptorFlagTrue_KYAW1_EhhE0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expectedHashCode = 3 * (7 * (13 * (17 * 1 + 1) + 0) + 1);
    assertEquals(expectedHashCode, gpb.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_encryptionFlagTrue_strongEncryptionFlagFalse_languageEncodingFlagTrue_dataDescriptorFlagTrue_Vqlv2_eyky0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expectedHashCode = 3 * (7 * (13 * (17 * 1 + 0) + 1) + 1);
    assertEquals(expectedHashCode, gpb.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_encryptionFlagTrue_strongEncryptionFlagFalse_languageEncodingFlagFalse_dataDescriptorFlagTrue_dnOX3_WoMQ0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expectedHashCode = 3 * (7 * (13 * (17 * 1 + 0) + 0) + 1);
    assertEquals(expectedHashCode, gpb.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_encryptionFlagFalse_strongEncryptionFlagTrue_languageEncodingFlagTrue_dataDescriptorFlagTrue_NwMh4_wIeU0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expectedHashCode = 3 * (7 * (13 * (17 * 0 + 1) + 1) + 1);
    assertEquals(expectedHashCode, gpb.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_encryptionFlagFalse_strongEncryptionFlagTrue_languageEncodingFlagFalse_dataDescriptorFlagTrue_sPUP5_WTZl0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expectedHashCode = 3 * (7 * (13 * (17 * 0 + 1) + 0) + 1);
    assertEquals(expectedHashCode, gpb.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_encryptionFlagFalse_strongEncryptionFlagFalse_languageEncodingFlagTrue_dataDescriptorFlagTrue_fZay6_UREk0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expectedHashCode = 3 * (7 * (13 * (17 * 0 + 0) + 1) + 1);
    assertEquals(expectedHashCode, gpb.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesStrongEncryption_True_HZNr0_jJpZ0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertTrue(gpb.usesStrongEncryption());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesStrongEncryption_False_khPj1_RnaJ0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertFalse(gpb.usesStrongEncryption());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesStrongEncryption_Null_TIhy2_ifuE0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertNull(gpb.usesStrongEncryption());
}
}