/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NewAttributeBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_CAtp0() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 1));
    int[] backwardsCalls = {1, 2, 3};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(3, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithEmptyBackwardsCalls_xRps1() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 1));
    int[] backwardsCalls = {};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(0, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithNullBackwardsCalls_KWsS2() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 1));
    int[] backwardsCalls = null;
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(0, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithMultipleCalls_kOPD3() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 1));
    int[] backwardsCalls = {1, 2, 3, 4, 5};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(5, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithNullInput_uXTG3() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("test", 1, "test", 1));
    int[] backwardsCalls = null;
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(0, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackWithException_pBed2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    try {
        newAttributeBands.unpack();
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNullInputStream_bGfT4() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    InputStream in = null;
    newAttributeBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCount_eIJT0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    assertEquals(0, backwardsCallCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCountWithDefault_AVaf1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0, true);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    assertEquals(0, backwardsCallCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCountWithNonDefault_bJeO2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0, false);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    assertEquals(0, backwardsCallCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCountWithNegativeIndex_wSle3() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", -1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    assertEquals(0, backwardsCallCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCountWithInvalidContext_xaLC4() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", -1, "layout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    assertEquals(0, backwardsCallCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCountWithNullLayout_NtjR5() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 0, null, 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    assertEquals(0, backwardsCallCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCountWithNullName_YMnJ6() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout(null, 0, "layout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    assertEquals(0, backwardsCallCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCountWithNullSegment_epgY7() throws IOException, Pack200Exception {
    Segment segment = null;
    AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    assertEquals(0, backwardsCallCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCountWithNullAttributeLayout_MLnS8() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = null;
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    assertEquals(0, backwardsCallCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls1_FjnB0_Dkzk0() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 1));
    int[] backwardsCalls = {1, 2, 3};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(1, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_dYBC0_RoUQ0() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
    int[] backwardsCalls = {1, 2, 3};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(1, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithNoCalls_agPi2_HblE0() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
    assertEquals(0, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithNullCalls_gVZj3_YsWH0() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
    int[] backwardsCalls = null;
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(0, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_EOwN0_DhNb0() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("test", 1, "test", 1));
    int[] backwardsCalls = {1, 2, 3};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(1, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithNoCalls_VYFU2_wEKX0() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("test", 1, "test", 1));
    assertEquals(0, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithNullCalls_RsHT3_NimV0() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("test", 1, "test", 1));
    int[] backwardsCalls = null;
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(1, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpack_fRYj0_hZGa0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    newAttributeBands.unpack();
    assertEquals(0, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackWithDefault_VzRB1_VoCD0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2, true);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    newAttributeBands.unpack();
    assertTrue(newAttributeBands.getBackwardsCallCount() == 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void read(InputStream in) throws IOException, Pack200Exception {
    }
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodec_RS_TEHs6_npOb0() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0, false);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        BHSDCodec codec = newAttributeBands.getCodec("RS");
        assertEquals(Codec.UNSIGNED5, codec);
    }
}