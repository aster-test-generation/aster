/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DumpArchiveInputStream_Test_Passing {
private DumpArchiveEntry active;
    private int recordOffset;
    private long entryOffset;
    private int readIdx;
    private final byte[] readBuf = new byte[DumpArchiveConstants.TP_SIZE];
    private long filepos;
    private boolean hasHitEOF;
    private final Map<Integer, Dirent> names = new HashMap<>();
    private long entrySize;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_smallBuffer_xRcc0() {
    byte[] buffer = new byte[31];
    assertFalse(DumpArchiveInputStream.matches(buffer, buffer.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_largeBuffer_pdWa1() {
    byte[] buffer = new byte[DumpArchiveConstants.TP_SIZE];
    assertTrue(DumpArchiveInputStream.matches(buffer, buffer.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nfsMagic_OjQx2_lfqb0() {
    byte[] buffer = new byte[24];
    buffer[24] = (byte) DumpArchiveConstants.NFS_MAGIC;
    assertTrue(DumpArchiveInputStream.matches(buffer, buffer.length));
}
}