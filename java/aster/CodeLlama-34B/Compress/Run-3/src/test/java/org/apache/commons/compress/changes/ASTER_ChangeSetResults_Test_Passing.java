/**
 * Generated by Aster
 */
package org.apache.commons.compress.changes;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ChangeSetResults_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_LBEO0() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("file1.txt");
    assertEquals(1, changeSetResults.getAddedFromChangeSet().size());
    assertEquals("file1.txt", changeSetResults.getAddedFromChangeSet().get(0));
    changeSetResults.addedFromChangeSet("file2.txt");
    assertEquals(2, changeSetResults.getAddedFromChangeSet().size());
    assertEquals("file2.txt", changeSetResults.getAddedFromChangeSet().get(1));
    changeSetResults.addedFromChangeSet("file3.txt");
    assertEquals(3, changeSetResults.getAddedFromChangeSet().size());
    assertEquals("file3.txt", changeSetResults.getAddedFromChangeSet().get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasBeenAdded_notAdded_Bzfu2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    assertFalse(changeSetResults.hasBeenAdded("file3.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSet_eyHz0() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    assertEquals(0, addedFromChangeSet.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithOneElement_QYdR1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("element1");
    assertEquals(1, addedFromChangeSet.size());
    assertEquals("element1", addedFromChangeSet.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithMultipleElements_paBj2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("element1");
    addedFromChangeSet.add("element2");
    addedFromChangeSet.add("element3");
    assertEquals(3, addedFromChangeSet.size());
    assertEquals("element1", addedFromChangeSet.get(0));
    assertEquals("element2", addedFromChangeSet.get(1));
    assertEquals("element3", addedFromChangeSet.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithDuplicateElements_VlTj3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("element1");
    addedFromChangeSet.add("element2");
    addedFromChangeSet.add("element3");
    addedFromChangeSet.add("element1");
    assertEquals(3, addedFromChangeSet.size());
    assertEquals("element1", addedFromChangeSet.get(0));
    assertEquals("element2", addedFromChangeSet.get(1));
    assertEquals("element3", addedFromChangeSet.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithNullElement_AEiK4() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add(null);
    assertEquals(1, addedFromChangeSet.size());
    assertNull(addedFromChangeSet.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithEmptyString_axPd5() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("");
    assertEquals(1, addedFromChangeSet.size());
    assertEquals("", addedFromChangeSet.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithNullChangeSetResults_MJDa9() {
    ChangeSetResults changeSetResults = null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeleted_emptyList_bebQ0() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> deleted = changeSetResults.getDeleted();
    assertEquals(0, deleted.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_emptyString_PmYZ0() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("");
    assertEquals(0, changeSetResults.getAddedFromStream().size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_nonEmptyString_fLKE1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    assertEquals(1, changeSetResults.getAddedFromStream().size());
    assertTrue(changeSetResults.getAddedFromStream().contains("file1.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_nullString_VVBS2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream(null);
    assertEquals(0, changeSetResults.getAddedFromStream().size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_duplicateString_snJQ3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file1.txt");
    assertEquals(1, changeSetResults.getAddedFromStream().size());
    assertTrue(changeSetResults.getAddedFromStream().contains("file1.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStrings_ymgK4() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    assertEquals(2, changeSetResults.getAddedFromStream().size());
    assertTrue(changeSetResults.getAddedFromStream().contains("file1.txt"));
    assertTrue(changeSetResults.getAddedFromStream().contains("file2.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStringsWithDuplicates_yOXT5() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    changeSetResults.addedFromStream("file1.txt");
    assertEquals(2, changeSetResults.getAddedFromStream().size());
    assertTrue(changeSetResults.getAddedFromStream().contains("file1.txt"));
    assertTrue(changeSetResults.getAddedFromStream().contains("file2.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStringsWithDuplicatesAndNull_DITJ6() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream(null);
    assertEquals(2, changeSetResults.getAddedFromStream().size());
    assertTrue(changeSetResults.getAddedFromStream().contains("file1.txt"));
    assertTrue(changeSetResults.getAddedFromStream().contains("file2.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStringsWithDuplicatesAndEmptyString_aDeF7() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("");
    assertEquals(2, changeSetResults.getAddedFromStream().size());
    assertTrue(changeSetResults.getAddedFromStream().contains("file1.txt"));
    assertTrue(changeSetResults.getAddedFromStream().contains("file2.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStringsWithDuplicatesAndNullAndEmptyString_yWQD8() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    changeSetResults.addedFromStream("file1.txt");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeleted_yKPE0() {
        ChangeSetResults changeSetResults = new ChangeSetResults();
        changeSetResults.deleted("file1.txt");
        assertEquals(1, changeSetResults.getDeleted().size());
        assertEquals("file1.txt", changeSetResults.getDeleted().get(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeletedWithMultipleFiles_UdCI1() {
        ChangeSetResults changeSetResults = new ChangeSetResults();
        changeSetResults.deleted("file1.txt");
        changeSetResults.deleted("file2.txt");
        assertEquals(2, changeSetResults.getDeleted().size());
        assertEquals("file1.txt", changeSetResults.getDeleted().get(0));
        assertEquals("file2.txt", changeSetResults.getDeleted().get(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeletedWithDuplicateFiles_xImf2() {
        ChangeSetResults changeSetResults = new ChangeSetResults();
        changeSetResults.deleted("file1.txt");
        changeSetResults.deleted("file1.txt");
        assertEquals(1, changeSetResults.getDeleted().size());
        assertEquals("file1.txt", changeSetResults.getDeleted().get(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeletedWithNullFileName_ksKG3() {
        ChangeSetResults changeSetResults = new ChangeSetResults();
        changeSetResults.deleted(null);
        assertEquals(0, changeSetResults.getDeleted().size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeletedWithEmptyFileName_hNJy4() {
        ChangeSetResults changeSetResults = new ChangeSetResults();
        changeSetResults.deleted("");
        assertEquals(0, changeSetResults.getDeleted().size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_LBEO0_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("file1.txt");
    changeSetResults.addedFromChangeSet("file2.txt");
    changeSetResults.addedFromChangeSet("file3.txt");
    assertEquals(1, changeSetResults.getAddedFromChangeSet().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_LBEO0_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("file1.txt");
    changeSetResults.addedFromChangeSet("file2.txt");
    changeSetResults.addedFromChangeSet("file3.txt");
    assertEquals("file1.txt", changeSetResults.getAddedFromChangeSet().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_LBEO0_3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("file1.txt");
    changeSetResults.addedFromChangeSet("file2.txt");
    changeSetResults.addedFromChangeSet("file3.txt");
    assertEquals(2, changeSetResults.getAddedFromChangeSet().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_LBEO0_4() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("file1.txt");
    changeSetResults.addedFromChangeSet("file2.txt");
    changeSetResults.addedFromChangeSet("file3.txt");
    assertEquals("file2.txt", changeSetResults.getAddedFromChangeSet().get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_LBEO0_5() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("file1.txt");
    changeSetResults.addedFromChangeSet("file2.txt");
    changeSetResults.addedFromChangeSet("file3.txt");
    assertEquals(3, changeSetResults.getAddedFromChangeSet().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_LBEO0_6() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("file1.txt");
    changeSetResults.addedFromChangeSet("file2.txt");
    changeSetResults.addedFromChangeSet("file3.txt");
    assertEquals("file3.txt", changeSetResults.getAddedFromChangeSet().get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithOneElement_QYdR1_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("element1");
    assertEquals(1, addedFromChangeSet.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithOneElement_QYdR1_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("element1");
    assertEquals("element1", addedFromChangeSet.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithMultipleElements_paBj2_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("element1");
    addedFromChangeSet.add("element2");
    addedFromChangeSet.add("element3");
    assertEquals(3, addedFromChangeSet.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithMultipleElements_paBj2_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("element1");
    addedFromChangeSet.add("element2");
    addedFromChangeSet.add("element3");
    assertEquals("element1", addedFromChangeSet.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithMultipleElements_paBj2_3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("element1");
    addedFromChangeSet.add("element2");
    addedFromChangeSet.add("element3");
    assertEquals("element2", addedFromChangeSet.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithMultipleElements_paBj2_4() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("element1");
    addedFromChangeSet.add("element2");
    addedFromChangeSet.add("element3");
    assertEquals("element3", addedFromChangeSet.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithDuplicateElements_VlTj3_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("element1");
    addedFromChangeSet.add("element2");
    addedFromChangeSet.add("element3");
    addedFromChangeSet.add("element1");
    assertEquals(3, addedFromChangeSet.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithDuplicateElements_VlTj3_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("element1");
    addedFromChangeSet.add("element2");
    addedFromChangeSet.add("element3");
    addedFromChangeSet.add("element1");
    assertEquals("element1", addedFromChangeSet.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithDuplicateElements_VlTj3_3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("element1");
    addedFromChangeSet.add("element2");
    addedFromChangeSet.add("element3");
    addedFromChangeSet.add("element1");
    assertEquals("element2", addedFromChangeSet.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithDuplicateElements_VlTj3_4() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("element1");
    addedFromChangeSet.add("element2");
    addedFromChangeSet.add("element3");
    addedFromChangeSet.add("element1");
    assertEquals("element3", addedFromChangeSet.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithNullElement_AEiK4_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add(null);
    assertEquals(1, addedFromChangeSet.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithNullElement_AEiK4_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add(null);
    assertNull(addedFromChangeSet.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithEmptyString_axPd5_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("");
    assertEquals(1, addedFromChangeSet.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithEmptyString_axPd5_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("");
    assertEquals("", addedFromChangeSet.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_nonEmptyString_fLKE1_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    assertEquals(1, changeSetResults.getAddedFromStream().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_nonEmptyString_fLKE1_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    assertTrue(changeSetResults.getAddedFromStream().contains("file1.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_duplicateString_snJQ3_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file1.txt");
    assertEquals(1, changeSetResults.getAddedFromStream().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_duplicateString_snJQ3_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file1.txt");
    assertTrue(changeSetResults.getAddedFromStream().contains("file1.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStrings_ymgK4_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    assertEquals(2, changeSetResults.getAddedFromStream().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStrings_ymgK4_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    assertTrue(changeSetResults.getAddedFromStream().contains("file1.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStrings_ymgK4_3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    assertTrue(changeSetResults.getAddedFromStream().contains("file2.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStringsWithDuplicates_yOXT5_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    changeSetResults.addedFromStream("file1.txt");
    assertEquals(2, changeSetResults.getAddedFromStream().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStringsWithDuplicates_yOXT5_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    changeSetResults.addedFromStream("file1.txt");
    assertTrue(changeSetResults.getAddedFromStream().contains("file1.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStringsWithDuplicates_yOXT5_3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    changeSetResults.addedFromStream("file1.txt");
    assertTrue(changeSetResults.getAddedFromStream().contains("file2.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStringsWithDuplicatesAndNull_DITJ6_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream(null);
    assertEquals(2, changeSetResults.getAddedFromStream().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStringsWithDuplicatesAndNull_DITJ6_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream(null);
    assertTrue(changeSetResults.getAddedFromStream().contains("file1.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStringsWithDuplicatesAndNull_DITJ6_3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream(null);
    assertTrue(changeSetResults.getAddedFromStream().contains("file2.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStringsWithDuplicatesAndEmptyString_aDeF7_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("");
    assertEquals(2, changeSetResults.getAddedFromStream().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStringsWithDuplicatesAndEmptyString_aDeF7_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("");
    assertTrue(changeSetResults.getAddedFromStream().contains("file1.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStringsWithDuplicatesAndEmptyString_aDeF7_3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("");
    assertTrue(changeSetResults.getAddedFromStream().contains("file2.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeleted_yKPE0_1() {
        ChangeSetResults changeSetResults = new ChangeSetResults();
        changeSetResults.deleted("file1.txt");
        assertEquals(1, changeSetResults.getDeleted().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeleted_yKPE0_2() {
        ChangeSetResults changeSetResults = new ChangeSetResults();
        changeSetResults.deleted("file1.txt");
        assertEquals("file1.txt", changeSetResults.getDeleted().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeletedWithMultipleFiles_UdCI1_1() {
        ChangeSetResults changeSetResults = new ChangeSetResults();
        changeSetResults.deleted("file1.txt");
        changeSetResults.deleted("file2.txt");
        assertEquals(2, changeSetResults.getDeleted().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeletedWithMultipleFiles_UdCI1_2() {
        ChangeSetResults changeSetResults = new ChangeSetResults();
        changeSetResults.deleted("file1.txt");
        changeSetResults.deleted("file2.txt");
        assertEquals("file1.txt", changeSetResults.getDeleted().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeletedWithMultipleFiles_UdCI1_3() {
        ChangeSetResults changeSetResults = new ChangeSetResults();
        changeSetResults.deleted("file1.txt");
        changeSetResults.deleted("file2.txt");
        assertEquals("file2.txt", changeSetResults.getDeleted().get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeletedWithDuplicateFiles_xImf2_1() {
        ChangeSetResults changeSetResults = new ChangeSetResults();
        changeSetResults.deleted("file1.txt");
        changeSetResults.deleted("file1.txt");
        assertEquals(1, changeSetResults.getDeleted().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeletedWithDuplicateFiles_xImf2_2() {
        ChangeSetResults changeSetResults = new ChangeSetResults();
        changeSetResults.deleted("file1.txt");
        changeSetResults.deleted("file1.txt");
        assertEquals("file1.txt", changeSetResults.getDeleted().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithNonStringElement_cxRy6_TvJb0_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("java.lang.Object");
    assertEquals(1, addedFromChangeSet.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSetWithNonStringElement_cxRy6_TvJb0_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    addedFromChangeSet.add("java.lang.Object");
    assertEquals("java.lang.Object", addedFromChangeSet.get(0));}
}