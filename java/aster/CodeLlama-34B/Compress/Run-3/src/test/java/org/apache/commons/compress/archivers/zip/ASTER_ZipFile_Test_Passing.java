/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Iterator;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipFile_Test_Passing {
private static final byte[] ONE_ZERO_BYTE = new byte[1];
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithUnsupportedZipFeatureException_BYyk1() throws IOException {
    ZipFile zipFile = new ZipFile("test.zip");
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setMethod(ZipMethod.AES_ENCRYPTED.getCode());
    try {
        zipFile.getInputStream(entry);
        fail("UnsupportedZipFeatureException should have been thrown");
    } catch (UnsupportedZipFeatureException e) {
        assertEquals(ZipMethod.AES_ENCRYPTED, e.getFeature());
        assertEquals(entry, e.getEntry());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnixSymlinkWithoutSymlink_JwrF4() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"));
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setUnixMode(0777);
    String symlink = zipFile.getUnixSymlink(entry);
    assertNull(symlink);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentBeforeFirstLocalFileHeader1_MCjl0() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true);
    InputStream inputStream = zipFile.getContentBeforeFirstLocalFileHeader();
    assertNotNull(inputStream);
    assertEquals(0, inputStream.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentBeforeFirstLocalFileHeader2_VnGq1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true, true);
    InputStream inputStream = zipFile.getContentBeforeFirstLocalFileHeader();
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries_emptyZipFile_tiip0() throws IOException {
    ZipFile zipFile = new ZipFile(new File("empty.zip"));
    Enumeration<ZipArchiveEntry> entries = zipFile.getEntries();
    assertFalse(entries.hasMoreElements());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries_nonEmptyZipFile_FrEK1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("non_empty.zip"));
    Enumeration<ZipArchiveEntry> entries = zipFile.getEntries();
    assertTrue(entries.hasMoreElements());
    assertEquals(1, entries.nextElement().getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseQuietly_wBdo0() throws IOException {
    ZipFile zipFile = mock(ZipFile.class);
    ZipFile.closeQuietly(zipFile);
    verify(zipFile).close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseQuietlyWithException_mDFs1() throws IOException {
    ZipFile zipFile = mock(ZipFile.class);
    doThrow(new IOException()).when(zipFile).close();
    ZipFile.closeQuietly(zipFile);
    verify(zipFile).close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseQuietlyWithNull_nQWB2() throws IOException {
    ZipFile.closeQuietly(null);
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawInputStream_XcpT0() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"));
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    InputStream inputStream = zipFile.getRawInputStream(entry);
    assertNotNull(inputStream);
    assertEquals(100, inputStream.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawInputStreamWithUnknownDataOffset_bauW1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"));
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setDataOffset(EntryStreamOffsets.OFFSET_UNKNOWN);
    InputStream inputStream = zipFile.getRawInputStream(entry);
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawInputStreamWithNullEntry_kfiD2() throws IOException {
    ZipFile zipFile = new ZipFile("test.zip");
    InputStream inputStream = zipFile.getRawInputStream(null);
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntriesInPhysicalOrder_Pyeq0() throws IOException {
ZipFile zipFile = new ZipFile(new File("test.zip"));
Enumeration<ZipArchiveEntry> entries = zipFile.getEntriesInPhysicalOrder();
assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntriesInPhysicalOrderWithEncoding_TIMr1() throws IOException {
ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8");
Enumeration<ZipArchiveEntry> entries = zipFile.getEntriesInPhysicalOrder();
assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntriesInPhysicalOrderWithUseUnicodeExtraFields_SdJs2() throws IOException {
ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true);
Enumeration<ZipArchiveEntry> entries = zipFile.getEntriesInPhysicalOrder();
assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntriesInPhysicalOrderWithIgnoreLocalFileHeader_MJTJ3() throws IOException {
ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true, true);
Enumeration<ZipArchiveEntry> entries = zipFile.getEntriesInPhysicalOrder();
assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentBeforeFirstLocalFileHeader1_MCjl0_1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true);
    InputStream inputStream = zipFile.getContentBeforeFirstLocalFileHeader();
    assertNotNull(inputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentBeforeFirstLocalFileHeader1_MCjl0_2() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true);
    InputStream inputStream = zipFile.getContentBeforeFirstLocalFileHeader();
    assertEquals(0, inputStream.available());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries_nonEmptyZipFile_FrEK1_1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("non_empty.zip"));
    Enumeration<ZipArchiveEntry> entries = zipFile.getEntries();
    assertTrue(entries.hasMoreElements());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries_nonEmptyZipFile_FrEK1_2() throws IOException {
    ZipFile zipFile = new ZipFile(new File("non_empty.zip"));
    Enumeration<ZipArchiveEntry> entries = zipFile.getEntries();
    assertEquals(1, entries.nextElement().getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawInputStream_XcpT0_1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"));
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    InputStream inputStream = zipFile.getRawInputStream(entry);
    assertNotNull(inputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawInputStream_XcpT0_2() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"));
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    InputStream inputStream = zipFile.getRawInputStream(entry);
    assertEquals(100, inputStream.available());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanReadEntryDataWithFile_qWoj6_ZcqJ0() throws IOException {
        File file = new File("path/to/zip/file.zip");
        ZipFile zipFile = new ZipFile(file);
        ZipArchiveEntry entry = zipFile.getEntry("entryName");
        assertTrue(zipFile.canReadEntryData(entry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryDataWithFileAndEncoding_FfrL7_Pvpq0() throws IOException {
    File file = new File("path/to/zip/file.zip");
    ZipFile zipFile = new ZipFile(file, "UTF-8");
    ZipArchiveEntry entry = zipFile.getEntry("entryName");
    assertTrue(zipFile.canReadEntryData(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEncoding10_mXdP9_pvIJ1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("path/to/file.zip"), "US-ASCII", false);
    assertEquals("US-ASCII", zipFile.getEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntriesWithEmptyName_gQeF2_TcaM0_1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"));
    Iterable<ZipArchiveEntry> entries = zipFile.getEntries("");
    assertNotNull(entries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntriesWithEmptyName_gQeF2_TcaM0_2() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"));
    Iterable<ZipArchiveEntry> entries = zipFile.getEntries("");
    assertEquals(0, ((Collection<?>) entries).size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntriesWithDifferentEncodingAndInvalidName_oUKh9_JWdK0_1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8");
    Iterable<ZipArchiveEntry> entries = zipFile.getEntries("invalid.txt");
    Iterator<ZipArchiveEntry> iterator = entries.iterator();
    while (iterator.hasNext()) {
        iterator.next();
    }
    assertNotNull(entries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntriesWithDifferentEncodingAndInvalidName_oUKh9_JWdK0_2() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8");
    Iterable<ZipArchiveEntry> entries = zipFile.getEntries("invalid.txt");
    Iterator<ZipArchiveEntry> iterator = entries.iterator();
    while (iterator.hasNext()) {
        iterator.next();
    }
    assertFalse(iterator.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries_nullZipFile_HuxM2_gbvZ0() throws IOException {
    ZipFile zipFile = new ZipFile(new File(""));
    Enumeration<ZipArchiveEntry> entries = zipFile.getEntries();
    assertFalse(entries.hasMoreElements());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries_emptyZipFile_useUnicodeExtraFields_ignoreLocalFileHeader_lLLT9_ddnx0() throws IOException {
    ZipFile zipFile = new ZipFile(new File("empty.zip"), "UTF-8", true, true);
    Enumeration<ZipArchiveEntry> entries = zipFile.getEntries();
    assertFalse(entries.hasMoreElements());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntry_jjXC0_AJNo0() {
        try {
            ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true);
            ZipArchiveEntry entry = zipFile.getEntry("test.txt");
            Assertions.assertNotNull(entry);
            Assertions.assertEquals("test.txt", entry.getName());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntryWithNonExistentFile_XzjR1_iznk0() {
        try {
            ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true);
            ZipArchiveEntry entry = zipFile.getEntry("non_existent.txt");
            Assertions.assertNull(entry);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryWithDifferentEncoding_hLXA2_ABMB0() {
    try {
        ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-16", true);
        ZipArchiveEntry entry = zipFile.getEntry("test.txt");
        Assertions.assertNotNull(entry);
        Assertions.assertEquals("test.txt", entry.getName());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryWithIgnoreLocalFileHeader_dByD3_hdnU0() {
    try {
        ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true, true);
        ZipArchiveEntry entry = zipFile.getEntry("test.txt");
        Assertions.assertNotNull(entry);
        Assertions.assertEquals("test.txt", entry.getName());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntryWithPath_jTKC7_gtWC0() {
        try {
            ZipFile zipFile = new ZipFile(new File("test.zip").toPath(), "UTF-8", true);
            ZipArchiveEntry entry = zipFile.getEntry("test.txt");
            Assertions.assertNotNull(entry);
            Assertions.assertEquals("test.txt", entry.getName());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntryWithPathAndIgnoreLocalFileHeader_MKMd8_NKQt0() {
        try {
            ZipFile zipFile = new ZipFile(new File("test.zip").toPath(), "UTF-8", true, true);
            ZipArchiveEntry entry = zipFile.getEntry("test.txt");
            Assertions.assertNotNull(entry);
            Assertions.assertEquals("test.txt", entry.getName());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}