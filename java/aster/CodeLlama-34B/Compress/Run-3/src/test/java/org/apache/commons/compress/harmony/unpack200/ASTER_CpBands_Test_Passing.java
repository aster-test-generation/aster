/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpack_nold0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        cpBands.unpack();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptor_rNfg0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertNotNull(cpDescriptor);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptor_rNfg0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertEquals(1, cpDescriptor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptor_rNfg0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertEquals("CP", cpDescriptor[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorWithMultipleCp_CInX1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertEquals(2, cpDescriptor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorWithMultipleCp_CInX1_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertEquals("CP", cpDescriptor[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorWithNoCp_Ddxg2_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertEquals(0, cpDescriptor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantPool_GEbr0() {
    CpBands cpBands = new CpBands(new Segment());
    SegmentConstantPool pool = cpBands.getConstantPool();
    assertNotNull(pool);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntry_CPKY2() {
    CpBands cpBands = new CpBands(new Segment());
    SegmentConstantPool pool = cpBands.getConstantPool();
    ConstantPoolEntry entry = pool.getClassPoolEntry("java.lang.Object");
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpDoubleValue_InvalidIndex_zeLs1() {
    CpBands cpBands = new CpBands(new Segment());
    CPDouble cpDouble = cpBands.cpDoubleValue(10);
    assertNull(cpDouble);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpDoubleValue_NegativeIndex_LuUQ2() {
    CpBands cpBands = new CpBands(new Segment());
    CPDouble cpDouble = cpBands.cpDoubleValue(-1);
    assertNull(cpDouble);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpDoubleValue_NullSegment_BGFB4() {
    CpBands cpBands = new CpBands(null);
    CPDouble cpDouble = cpBands.cpDoubleValue(0);
    assertNull(cpDouble);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameInts_VDkI0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] expected = new int[] {1, 2, 3};
    int[] actual = cpBands.getCpDescriptorNameInts();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpFieldClass_lCTE0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpFieldClass = cpBands.getCpFieldClass();
    assertEquals(2, cpFieldClass.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpFieldClass_lCTE0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpFieldClass = cpBands.getCpFieldClass();
    assertEquals("cp_field_class_1", cpFieldClass[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpFieldClass_lCTE0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpFieldClass = cpBands.getCpFieldClass();
    assertEquals("cp_field_class_2", cpFieldClass[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpFieldClassWithNullSegment_Ogps1() {
    CpBands cpBands = new CpBands(null);
    String[] cpFieldClass = cpBands.getCpFieldClass();
    assertNull(cpFieldClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpFieldClassWithEmptySegment_FAja2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpFieldClass = cpBands.getCpFieldClass();
    assertEquals(0, cpFieldClass.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClass_Uozv0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpClass = cpBands.getCpClass();
    for (int i = 0; i < cpClass.length; i++) {
    }
    assertNotNull(cpClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClass_Uozv0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpClass = cpBands.getCpClass();
    for (int i = 0; i < cpClass.length; i++) {
    }
    assertEquals(cpClass.length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_kPDq0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String string = "Test String";
    CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string, true);
    assertEquals(string, cpUTF8.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8ValueWithFalse_XLdY1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String string = "Test String";
    CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string, false);
    assertEquals(string, cpUTF8.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8ValueWithNull_xvSj2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String string = null;
    CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string, true);
    assertNull(cpUTF8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8ValueWithEmptyString_UCGa3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String string = "";
    CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string, true);
    assertEquals(string, cpUTF8.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8ValueWithNonUTF8String_Orgw4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String string = "Test String";
    CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string, true);
    assertNotEquals(string, cpUTF8.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8ValueWithInvalidUTF8StringAndFalse_UBjP8() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String string = "Test String";
    CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string, false);
    assertNotEquals(string, cpUTF8.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_nullString_SEbd0() {
    CpBands cpBands = new CpBands(new Segment());
    CPClass cpClass = cpBands.cpClassValue(null);
    assertNull(cpClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_emptyString_zxrD1() {
    CpBands cpBands = new CpBands(new Segment());
    CPClass cpClass = cpBands.cpClassValue("");
    assertNull(cpClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_nonExistentString_IBaq2() {
    CpBands cpBands = new CpBands(new Segment());
    CPClass cpClass = cpBands.cpClassValue("nonExistentString");
    assertNull(cpClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptor_Qlhp0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] expected = new String[] {"cpMethodDescriptor"};
    String[] actual = cpBands.getCpMethodDescriptor();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptorWithNullSegment_bTBO1() {
    CpBands cpBands = new CpBands(null);
    String[] expected = new String[] {"cpMethodDescriptor"};
    String[] actual = cpBands.getCpMethodDescriptor();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptorWithEmptySegment_RtfT2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] expected = new String[] {};
    String[] actual = cpBands.getCpMethodDescriptor();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptorWithNullCpBands_JGgu3() {
    CpBands cpBands = null;
    String[] expected = new String[] {"cpMethodDescriptor"};
    String[] actual = cpBands.getCpMethodDescriptor();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptorWithEmptyCpBands_FrXg4() {
    CpBands cpBands = new CpBands(new Segment());
    String[] expected = new String[] {};
    String[] actual = cpBands.getCpMethodDescriptor();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptorWithInvalidCpBands_qwhR5() {
    CpBands cpBands = new CpBands(new Segment());
    String[] expected = new String[] {"cpMethodDescriptor"};
    String[] actual = cpBands.getCpMethodDescriptor();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFieldValueWithInvalidIndex_ZXLl1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = -1;
    CPFieldRef cpFieldRef = cpBands.cpFieldValue(index);
    assertNull(cpFieldRef);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpIMethodClass_oybA0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] expected = new String[]{"CP_I_METHOD_CLASS"};
    String[] actual = cpBands.getCpIMethodClass();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpIMethodClassWithNullSegment_RejT1() {
    CpBands cpBands = new CpBands(null);
    String[] expected = new String[]{"CP_I_METHOD_CLASS"};
    String[] actual = cpBands.getCpIMethodClass();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpIMethodClassWithNullCpBands_yzrf4() {
    CpBands cpBands = null;
    String[] expected = new String[]{"CP_I_METHOD_CLASS"};
    String[] actual = cpBands.getCpIMethodClass();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpIMethodClassWithEmptyCpBands_MrIQ5() {
    CpBands cpBands = new CpBands(new Segment());
    String[] expected = new String[]{"CP_I_METHOD_CLASS"};
    String[] actual = cpBands.getCpIMethodClass();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpInt_Vzei0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpInt = cpBands.getCpInt();
    for (int i = 0; i < 10; i++) {
    }
    assertNotNull(cpInt);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpInt_Vzei0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpInt = cpBands.getCpInt();
    for (int i = 0; i < 10; i++) {
    }
    assertEquals(10, cpInt.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValue_InvalidIndex_TNpa1() {
    CpBands cpBands = new CpBands(new Segment());
    CPLong cpLong = cpBands.cpLongValue(-1);
    assertNull(cpLong);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValue_InvalidNonZeroIndex_JcFa3() {
    CpBands cpBands = new CpBands(new Segment());
    CPLong cpLong = cpBands.cpLongValue(2);
    assertNull(cpLong);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValue_NullSegment_ucuD4() {
    CpBands cpBands = new CpBands(null);
    CPLong cpLong = cpBands.cpLongValue(0);
    assertNull(cpLong);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValueWithInvalidIndex_BVtP1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = -1;
    CPClass cpClass = cpBands.cpClassValue(index);
    assertNull(cpClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFloatValueWithNegativeIndex_rkiU2() {
    CpBands cpBands = new CpBands(new Segment());
    try {
        cpBands.cpFloatValue(-1);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFloatValueWithLargeIndex_rlyO3() {
    CpBands cpBands = new CpBands(new Segment());
    try {
        cpBands.cpFloatValue(1000);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFloatValueWithNullSegment_YpvH4() {
    CpBands cpBands = new CpBands(null);
    try {
        cpBands.cpFloatValue(0);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFloatValueWithNoFloats_WaiN5() {
    CpBands cpBands = new CpBands(new Segment());
    CPFloat cpFloat = cpBands.cpFloatValue(0);
    assertNull(cpFloat);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptorTypeInts_HPlH0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int[] cpDescriptorTypeInts = cpBands.getCpDescriptorTypeInts();
        assertNotNull(cpDescriptorTypeInts);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptorTypeInts_HPlH0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int[] cpDescriptorTypeInts = cpBands.getCpDescriptorTypeInts();
        assertEquals(1, cpDescriptorTypeInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptorTypeInts_HPlH0_3() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int[] cpDescriptorTypeInts = cpBands.getCpDescriptorTypeInts();
        assertEquals(1, cpDescriptorTypeInts[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_YVgd0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        for (int i = 0; i < 10; i++) {
        }
        assertNotNull(cpLong);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_YVgd0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        for (int i = 0; i < 10; i++) {
        }
        assertEquals(10, cpLong.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpSignature_RSCJ0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpSignature = cpBands.getCpSignature();
    assertNotNull(cpSignature);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpSignature_RSCJ0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpSignature = cpBands.getCpSignature();
    assertEquals(2, cpSignature.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpSignature_RSCJ0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpSignature = cpBands.getCpSignature();
    assertEquals("CP1", cpSignature[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpSignature_RSCJ0_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpSignature = cpBands.getCpSignature();
    assertEquals("CP2", cpSignature[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpStringValue_zBmE0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 0;
    CPString cpString = cpBands.cpStringValue(index);
    assertEquals(cpString.hashCode(), cpBands.cpStringValue(index).hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpStringValueWithNonExistentIndex_QfMe1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 100;
    CPString cpString = cpBands.cpStringValue(index);
    assertNull(cpString);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpNameAndTypeValue_null_fcOj2() {
    CpBands cpBands = new CpBands(new Segment());
    String descriptor = null;
    CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(descriptor);
    assertNull(cpNameAndType);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_index0_hSVG0() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(0);
    assertEquals(0, cputf8.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_index1_Hhtn1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(1);
    assertEquals(1, cputf8.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_index2_cpAj2() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(2);
    assertEquals(2, cputf8.getGlobalIndex());
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpMethodClass_ZTBI0_sHZx0_1() {
        CpBands cpBands = new CpBands(new Segment());
        String[] cpMethodClass = cpBands.getCpMethodClass();
        assertEquals(2, cpMethodClass.length);}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpMethodClass_ZTBI0_sHZx0_2() {
        CpBands cpBands = new CpBands(new Segment());
        String[] cpMethodClass = cpBands.getCpMethodClass();
        assertEquals("CPMethodClass1", cpMethodClass[0]);}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpMethodClass_ZTBI0_sHZx0_3() {
        CpBands cpBands = new CpBands(new Segment());
        String[] cpMethodClass = cpBands.getCpMethodClass();
        assertEquals("CPMethodClass2", cpMethodClass[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodClassNotNull_YVOb2_DjPv0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpMethodClass = cpBands.getCpMethodClass();
    assertNotNull(cpMethodClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodClassLengthZero_vcvM3_hXac1() {
    CpBands cpBands = new CpBands(new Segment());
    String[] cpMethodClass = cpBands.getCpMethodClass();
    assertEquals(0, cpMethodClass.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpUTF8_umWS0_lyzy0_1() {
    CpBands cpBands = new CpBands(new Segment());
    String[] cpUTF8 = cpBands.getCpUTF8();
    for (int i = 0; i < 10; i++) {
    }
    assertNotNull(cpUTF8);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpUTF8_umWS0_lyzy0_2() {
    CpBands cpBands = new CpBands(new Segment());
    String[] cpUTF8 = cpBands.getCpUTF8();
    for (int i = 0; i < 10; i++) {
    }
    assertEquals(10, cpUTF8.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpDoubleValue_ValidIndex_eUoa0_cUPI0() {
    CpBands cpBands = new CpBands(new Segment());
    CPDouble cpDouble = cpBands.cpDoubleValue(0);
    assertEquals(0, cpDouble.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpDoubleValue_NonIntegerIndex_EUWm3_snEP0() {
    CpBands cpBands = new CpBands(new Segment());
    CPDouble cpDouble = cpBands.cpDoubleValue(1);
    assertNull(cpDouble);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpDoubleValue_NullDouble_mubh5_zgfF0() {
    CpBands cpBands = new CpBands(new Segment());
    CPDouble cpDouble = cpBands.cpDoubleValue(0);
    assertNull(cpDouble);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIntegerValue_validIndex_phdz0_QmfR0() {
    CpBands cpBands = new CpBands(new Segment());
    CPInteger cpInteger = cpBands.cpIntegerValue(0);
    assertEquals(0, cpInteger.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValue_ValidIndex_FEaf0_OrEI0() {
    CpBands cpBands = new CpBands(new Segment());
    CPLong cpLong = cpBands.cpLongValue(0);
    assertEquals(0, cpLong.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValue_ValidNonZeroIndex_rKNG2_UTee0() {
    CpBands cpBands = new CpBands(new Segment());
    CPLong cpLong = cpBands.cpLongValue(1);
    assertEquals(1, cpLong.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValue_NullCpLongArray_RDQv5_XifT0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPLong cpLong = cpBands.cpLongValue(0);
    assertNull(cpLong);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFloatValue_OhXe0_aHOj0() {
    CpBands cpBands = new CpBands(new Segment());
    CPFloat cpFloat = cpBands.cpFloatValue(0);
    assertEquals(0, cpFloat.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpSignatureValue_string_MAmi1_xaye0() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "test";
    CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string);
    assertEquals(string, cpUTF8.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpSignatureValue_null_CFKs2_PRji0() {
    CpBands cpBands = new CpBands(new Segment());
    String string = null;
    CPUTF8 cpUTF8 = cpBands.cpSignatureValue(0);
    assertNull(cpUTF8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantPoolEntry_abMZ1_GRDT0() {
    CpBands cpBands = new CpBands(new Segment());
    SegmentConstantPool pool = cpBands.getConstantPool();
    try {
        ConstantPoolEntry entry = pool.getConstantPoolEntry(1, 1L);
        assertNotNull(entry);
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_xtSh3_uQUg0() {
    CpBands cpBands = new CpBands(new Segment());
    SegmentConstantPool pool = cpBands.getConstantPool();
    try {
        ClassFileEntry entry = pool.getValue(1, 1L);
        assertNotNull(entry);
    } catch (Pack200Exception e) {
        fail("Exception thrown: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitMethodPoolEntry_cgKY4_tJll0() {
    CpBands cpBands = new CpBands(new Segment());
    SegmentConstantPool pool = cpBands.getConstantPool();
    try {
        ConstantPoolEntry entry = pool.getInitMethodPoolEntry(1, 1L, "java.lang.Object");
        assertNotNull(entry);
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSpecificPoolEntry_qTqd5_OGDk0() {
    CpBands cpBands = new CpBands(new Segment());
    SegmentConstantPool pool = cpBands.getConstantPool();
    try {
        ConstantPoolEntry entry = pool.getClassSpecificPoolEntry(1, 1L, "java.lang.Object");
        assertNotNull(entry);
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptor_rNfg0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertNotNull(cpDescriptor);
    assertEquals(1, cpDescriptor.length);
    assertEquals("CP", cpDescriptor[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorWithMultipleCp_CInX1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertNotNull(cpDescriptor);
    assertEquals(2, cpDescriptor.length);
    assertEquals("CP", cpDescriptor[0]);
    assertEquals("CP", cpDescriptor[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorWithNoCp_Ddxg2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertNotNull(cpDescriptor);
    assertEquals(0, cpDescriptor.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpFieldClass_lCTE0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpFieldClass = cpBands.getCpFieldClass();
    assertEquals(2, cpFieldClass.length);
    assertEquals("cp_field_class_1", cpFieldClass[0]);
    assertEquals("cp_field_class_2", cpFieldClass[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClass_Uozv0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpClass = cpBands.getCpClass();
    assertNotNull(cpClass);
    assertEquals(cpClass.length, 10);
    for (int i = 0; i < cpClass.length; i++) {
        assertEquals(cpClass[i], "CP" + i);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpInt_Vzei0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpInt = cpBands.getCpInt();
    assertNotNull(cpInt);
    assertEquals(10, cpInt.length);
    for (int i = 0; i < 10; i++) {
        assertEquals(i, cpInt[i]);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptorTypeInts_HPlH0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int[] cpDescriptorTypeInts = cpBands.getCpDescriptorTypeInts();
        assertNotNull(cpDescriptorTypeInts);
        assertEquals(1, cpDescriptorTypeInts.length);
        assertEquals(1, cpDescriptorTypeInts[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_YVgd0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        assertNotNull(cpLong);
        assertEquals(10, cpLong.length);
        for (int i = 0; i < 10; i++) {
            assertEquals(i, cpLong[i]);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpSignature_RSCJ0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpSignature = cpBands.getCpSignature();
    assertNotNull(cpSignature);
    assertEquals(2, cpSignature.length);
    assertEquals("CP1", cpSignature[0]);
    assertEquals("CP2", cpSignature[1]);
}
}