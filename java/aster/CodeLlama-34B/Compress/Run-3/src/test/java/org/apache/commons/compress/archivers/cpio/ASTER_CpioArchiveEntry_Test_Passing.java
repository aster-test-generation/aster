/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_CpioArchiveEntry_dZzn0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
    assertTrue(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_CpioArchiveEntry_WithName_vqBK2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertTrue(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_jzFv5() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_eGjv6() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100L);
    assertEquals(100L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_UbnK7() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
    assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_format1_cWma0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1);
    long time = entry.getTime();
    assertEquals(0, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_format2_Xjjf1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)2);
    long time = entry.getTime();
    assertEquals(0, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_format3_XUCa2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)3);
    long time = entry.getTime();
    assertEquals(0, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_format4_ivIK3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)4);
    long time = entry.getTime();
    assertEquals(0, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_format5_OzxH4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)5);
    long time = entry.getTime();
    assertEquals(0, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_format6_QqgW5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)6);
    long time = entry.getTime();
    assertEquals(0, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_format7_tQQo6() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)7);
    long time = entry.getTime();
    assertEquals(0, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_format8_tKDG7() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)8);
    long time = entry.getTime();
    assertEquals(0, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_format9_gKRe8() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)9);
    long time = entry.getTime();
    assertEquals(0, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_format10_fhGU9() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)10);
    long time = entry.getTime();
    assertEquals(0, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_format11_QNro10() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)11);
    long time = entry.getTime();
    assertEquals(0, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_format12_XYjd11() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)12);
    long time = entry.getTime();
    assertEquals(0, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_format13_CxSp12() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)13);
    long time = entry.getTime();
    assertEquals(0, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_format14_Bplk13() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)14);
    long time = entry.getTime();
    assertEquals(0, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_format15_LXkF14() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)15);
    long time = entry.getTime();
    assertEquals(0, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_format16_OaPX15() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)16);
    long time = entry.getTime();
    assertEquals(0, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary1_zDdS0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100L);
assertEquals(100, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary2_sJTx1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test.txt", 100L);
assertEquals(100, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary3_RFjn2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 3, "test.txt", 100L);
assertEquals(100, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary4_IfqM3() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 4, "test.txt", 100L);
assertEquals(100, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary5_gWze4() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 5, "test.txt", 100L);
assertEquals(100, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary6_NBsn5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 6, "test.txt", 100L);
assertEquals(100, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary7_YFag6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 7, "test.txt", 100L);
assertEquals(100, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary8_MfSB7() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 8, "test.txt", 100L);
assertEquals(100, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary9_AeJo8() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 9, "test.txt", 100L);
assertEquals(100, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary10_Bpgm9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 10, "test.txt", 100L);
assertEquals(100, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_shortFormat_duBh0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_shortFormatAndName_aUbR1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_shortFormatAndNameAndSize_AKOd3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_formatAndFileAndEntryName_pRSy8() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_nameAndSize_xWhn9() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_inputFileAndEntryName_HdjL10() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork_shortFormat_nXPB0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertFalse(entry.isNetwork());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork_longFormat_TThw1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2);
    assertFalse(entry.isNetwork());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInode_USvs0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setInode(10);
    assertEquals(10, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInodeWithNegativeValue_FVsu1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setInode(-10);
    assertEquals(-10, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInodeWithZeroValue_lYSG2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setInode(0);
    assertEquals(0, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInodeWithMaxValue_eCeA3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setInode(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInodeWithMinValue_kNrX4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setInode(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_yMlZ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectSameValues_UJLS1() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    CpioArchiveEntry entry2 = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectDifferentValues_vaIS2() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    CpioArchiveEntry entry2 = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test2", 200);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_xTfH3() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_XQFl4() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    assertFalse(entry.equals("test"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_True_tAjA0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_False_kAoG1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConstructor_ShortFormat_BYlq2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConstructor_ShortFormatName_FpqI3_1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(1, entry.getFormat());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConstructor_ShortFormatNameSize_gxck4_1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertEquals(1, entry.getFormat());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConstructor_ShortFormatNameSize_gxck4_3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertEquals(100, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConstructor_NameSize_LudK9_2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
    assertEquals(100, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConstructor_FileInputFileEntryName_NjXM10() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceMin_ybro0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
assertEquals(10L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceMinWithName_SFaz2() {
CpioArchiveEntry entry = new CpioArchiveEntry("test.txt");
assertEquals(0L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceMinWithFormatAndName_amwZ5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt");
assertEquals(0L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceMinWithFile_dmsL6() {
CpioArchiveEntry entry = new CpioArchiveEntry(new File("test.txt"), "test.txt");
assertEquals(0L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceMinWithFormatAndFile_ROQq7() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("test.txt"), "test.txt");
assertEquals(0L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceMinWithNameAndSize_YwRO8() {
CpioArchiveEntry entry = new CpioArchiveEntry("test.txt", 10L);
assertEquals(10L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_format1_gCyy0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertEquals(new Date(1000 * 1), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_format2_rJkB1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2);
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertEquals(new Date(1000 * 2), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_format3_LhWu2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 3);
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertEquals(new Date(1000 * 3), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_format4_erWa3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 4);
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertEquals(new Date(1000 * 4), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_format5_LvuK4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 5);
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertEquals(new Date(1000 * 5), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_format6_lIfl5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 6);
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertEquals(new Date(1000 * 6), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_format7_HXhJ6() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 7);
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertEquals(new Date(1000 * 7), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_format8_SlAR7() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 8);
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertEquals(new Date(1000 * 8), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_format9_vPqB8() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 9);
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertEquals(new Date(1000 * 9), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_format10_kpze9() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 10);
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertEquals(new Date(1000 * 10), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_format11_HDyw10() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 11);
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertEquals(new Date(1000 * 11), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_format12_yFHn11() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12);
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertEquals(new Date(1000 * 12), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDevice_QZax0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
        assertEquals(1, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceWithNewFormat_Pikc2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "name", 100L);
        assertEquals(0, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceWithNullFormat_guEJ3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 100L);
        assertEquals(0, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceWithInvalidFormat_COSL4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) -1, "name", 100L);
        assertEquals(0, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceWithNullName_rkLX5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, null, 100L);
        assertEquals(0, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceWithEmptyName_QfIT6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "", 100L);
        assertEquals(0, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceWithZeroSize_YVlV8() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 0L);
        assertEquals(0, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceWithNegativeSize_cUIL9() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", -100L);
        assertEquals(0, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceWithInvalidSize_dkMI10() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", -1L);
        assertEquals(0, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_shortFormat_kuXj0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(1, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_shortFormat_name_vTFz1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
    assertEquals(1, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_shortFormat_name_size_QSNl2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
    assertEquals(1, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_file_WOIB5() {
    File inputFile = new File("path/to/file");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "entryName");
    assertEquals(1, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_name_sILu7() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    assertEquals(1, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_shortFormat_KoyU0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_stringName_TWrM1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    assertEquals((short) 0, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_shortFormatStringName_QhgA4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
    assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_shortFormatFileInputFile_nwrH5() {
    File inputFile = new File("path/to/file");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "entryName");
    assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_stringNameLongSize_BGrG6() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
    assertEquals((short) 0, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_fileInputFileStringName_AgPa7() {
    File inputFile = new File("path/to/file");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "entryName");
    assertEquals((short) 0, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_shortFormatStringNameLongSize_rjgH8() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
    assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_ZvYc0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
    entry.setChksum(100L);
    assertEquals(100L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksumWithNegativeValue_ulDG1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
    entry.setChksum(-100L);
    assertEquals(-100L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksumWithZeroValue_Nxym2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
    entry.setChksum(0L);
    assertEquals(0L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksumWithMaxValue_ncVw3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
    entry.setChksum(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksumWithMinValue_yHfS4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
    entry.setChksum(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_format_name_size_NcNB0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertEquals(1, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_format_name_jfma1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(1, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_name_size_teeo2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_iMwI0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
    assertEquals(1, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceWithFormat_TpQb1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test", 100L);
    assertEquals(2, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceWithName_Ayxr2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(0, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceWithFormatAndName_OADs5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(1, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceWithFile_xRDU6() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals(0, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceWithFormatAndFile_ZJAG7() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
    assertEquals(1, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceWithSize_DUyS8() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100L);
    assertEquals(0, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMin_uqUy0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
    assertEquals(100L, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMinWithName_AAly2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(0L, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMinWithFormatAndName_SMFo5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(0L, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMinWithFormatAndFile_LZLB6() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
    assertEquals(0L, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMinWithNameAndSize_wKre7() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100L);
    assertEquals(100L, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMinWithFileAndName_vwWl8() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals(0L, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMinWithInvalidFormat_KCdb9() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100L);
    assertEquals(0L, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_NullName_ZuQq0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, null, 0);
    int padCount = entry.getHeaderPadCount(null);
    assertEquals(0, padCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_NonNullName_nUyR1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 0);
    int padCount = entry.getHeaderPadCount(null);
    assertEquals(0, padCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe_CpioArchiveEntry_QhLq0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test.txt", 100L);
    assertTrue(entry.isPipe());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize_shortFormat_qnEk0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(1, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize_shortFormatAndName_JrCX1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(1, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize_shortFormatAndNameAndSize_aaNu2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    assertEquals(1, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize_name_Yjsx3() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(1, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize_nameAndSize_nQQJ8() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 10);
    assertEquals(1, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize_fileAndName_fmzC9() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals(1, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetNameValid_FDGb0() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short)1, "test.txt", 10L);
		entry.setName("newName");
		assertEquals("newName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetNameNull_Oqin1() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short)1, "test.txt", 10L);
		entry.setName(null);
		assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetNameEmpty_yMFJ2() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short)1, "test.txt", 10L);
		entry.setName("");
		assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_shortFormat_xYpW0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100L);
    assertTrue(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_stringName_PybL1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test.txt");
    assertTrue(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_fileInputPath_BDHU3() {
    CpioArchiveEntry entry = new CpioArchiveEntry(new File("test.txt"), "test.txt");
    assertTrue(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_nullInputPath_AaTD5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, null, "test.txt");
    assertFalse(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_invalidFormat_bXep7() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test.txt", 100L);
    assertFalse(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocket_shortFormat_CguX0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertTrue(entry.isSocket());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocket_stringName_dIiC1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test.txt");
    assertFalse(entry.isSocket());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInode_AmjO0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertEquals(1, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithName_uyKN1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(0, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithFile_iSEt3() {
    File inputFile = new File("test.cpio");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals(0, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithSize_WkFf5() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
    assertEquals(0, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithFormatAndName_GLRA8() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(1, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_format1_YeaW0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(Objects.hash(entry.getName()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_format2_hmjs1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2);
    assertEquals(Objects.hash(entry.getName()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_format3_mgzC2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 3);
    assertEquals(Objects.hash(entry.getName()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_format4_ePjQ3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 4);
    assertEquals(Objects.hash(entry.getName()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_format5_eLHN4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 5);
    assertEquals(Objects.hash(entry.getName()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_format6_Rnbv5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 6);
    assertEquals(Objects.hash(entry.getName()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_format7_uLBe6() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 7);
    assertEquals(Objects.hash(entry.getName()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_format8_STWo7() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 8);
    assertEquals(Objects.hash(entry.getName()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_format9_STxF8() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 9);
    assertEquals(Objects.hash(entry.getName()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_format10_Rlsn9() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 10);
    assertEquals(Objects.hash(entry.getName()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_FvQv0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setTime(1000);
    assertEquals(1000, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount_format_JARz0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount_name_JgIs1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount1_MBMh0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    int padCount = entry.getHeaderPadCount(10);
    assertEquals(0, padCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount2_qJgz1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    int padCount = entry.getHeaderPadCount(10);
    assertEquals(1, padCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount3_THty2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    int padCount = entry.getHeaderPadCount(10);
    assertEquals(2, padCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount4_HMjP3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    int padCount = entry.getHeaderPadCount(10);
    assertEquals(3, padCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_shortFormat_cZac0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(1, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_shortFormat_name_BcSS1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(1, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_shortFormat_name_size_Ejhu2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertEquals(1, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_name_FCoZ3() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(0, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_name_size_UtFc4() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
    assertEquals(0, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_file_name_OIKx7() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals(0, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_shortFormat_file_name_SaFQ9() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
    assertEquals(1, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_shortFormat_ZvNk0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_shortFormatAndName_nzJr1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_shortFormatAndNameAndSize_BjDo2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    assertEquals(10, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_name_mSfz3() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_shortFormatAndNameAndInputFileAndEntryName_kjMg6() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_nameAndSize_IeNS7() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 10);
    assertEquals(10, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks_formatConstructor_WyKy1() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW);
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks_nameConstructor_gxRc2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks_nameSizeConstructor_kmOS5() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks_fileConstructor_cbou6() {
    File inputFile = new File("test.cpio");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks_formatFileConstructor_zRDV7() {
    File inputFile = new File("test.cpio");
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, inputFile, "test");
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks_directory_BjTE8() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 0);
    assertEquals(2, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks_link_KLsk9() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 1);
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_shortFormat_HIjD0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertTrue(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_longFormat_PVIb1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2);
    assertFalse(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInodeWithNull_HugR5_CfUv0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setInode(0L);
    assertNull(entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInodeWithNonNumericString_QvNr9_Pvbk0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setInode(Long.parseLong("123"));
    assertNull(entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceMinWithFileAndSize_ZgmS9_ZfWo0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals(10L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_empty_ZosV3_fmjR0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "", 0);
    assertFalse(entry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceWithNullSize_XSZi7_dlIL0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 0);
    assertEquals(0, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceWithEmptyInputPath_oJzm12_jDRN0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
    assertEquals(0, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksumWithNonEmptyString_ZBQE7_uLHG0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
    entry.setChksum(1234567890L);
    assertEquals(1234567890L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksumWithNonNumericString_gqLZ8_mBVr0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
    entry.setChksum(Long.parseLong("abcdefghij"));
    assertEquals(Long.parseLong("abcdefghij"), entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksumWithNonNumericStringAndNull_Pdbv9_VOKU0_1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
    entry.setChksum(0L);
    entry.setChksum(0L);
    assertEquals(0L, entry.getChksum());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameDifferentFormatAndInputPath_pUMq4_Tvts2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1, "test.txt", 10L);
    entry.setRemoteDeviceMin(2);
    assertEquals("newName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_nullEntryName_rxJl6_gvGu0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 0);
    assertFalse(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithName_Lwpq2_twtv0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    entry.setTime(1000);
    assertEquals(1000, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountWithNullPathAndNullName_HHLx9_sXiw0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(null, null);
    int actual = entry.getHeaderPadCount();
    assertEquals(0, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceWithNullInputPath_SMhQ11_vifS1() {
    try {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, null, "name", null);
        assertEquals(0, entry.getRemoteDevice());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_format17_nKXi16() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)17);
    long time = entry.getTime();
    assertEquals(0, time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConstructor_ShortFormatName_FpqI3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(1, entry.getFormat());
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConstructor_ShortFormatNameSize_gxck4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertEquals(1, entry.getFormat());
    assertEquals("test", entry.getName());
    assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConstructor_NameSize_LudK9() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
    assertEquals("test", entry.getName());
    assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_name_size_Vqag8() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
    assertEquals(1, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_BAdn2() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test.txt", 100L);
    assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_inputFileAndEntryName_jDsd8() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_octalFormat_eIED2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 8);
    assertFalse(entry.isCharacterDevice());
}
}