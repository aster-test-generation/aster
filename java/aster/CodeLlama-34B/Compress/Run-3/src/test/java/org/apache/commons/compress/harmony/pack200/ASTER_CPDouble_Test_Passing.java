/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPDouble_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_7_UQqj6() {
    CPDouble cpDouble = new CPDouble(7.0);
    double result = cpDouble.getDouble();
    assertEquals(7.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_8_rTQN7() {
    CPDouble cpDouble = new CPDouble(8.0);
    double result = cpDouble.getDouble();
    assertEquals(8.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_9_mdFO8() {
    CPDouble cpDouble = new CPDouble(9.0);
    double result = cpDouble.getDouble();
    assertEquals(9.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_10_uljM9() {
    CPDouble cpDouble = new CPDouble(10.0);
    double result = cpDouble.getDouble();
    assertEquals(10.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_11_QVUF10() {
    CPDouble cpDouble = new CPDouble(11.0);
    double result = cpDouble.getDouble();
    assertEquals(11.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_12_fQnA11() {
    CPDouble cpDouble = new CPDouble(12.0);
    double result = cpDouble.getDouble();
    assertEquals(12.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_13_zBPT12() {
    CPDouble cpDouble = new CPDouble(13.0);
    double result = cpDouble.getDouble();
    assertEquals(13.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_14_GrRS13() {
    CPDouble cpDouble = new CPDouble(14.0);
    double result = cpDouble.getDouble();
    assertEquals(14.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_15_RxUS14() {
    CPDouble cpDouble = new CPDouble(15.0);
    double result = cpDouble.getDouble();
    assertEquals(15.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_16_XpII15() {
    CPDouble cpDouble = new CPDouble(16.0);
    double result = cpDouble.getDouble();
    assertEquals(16.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_Equal_VqqN0_JhNm0() {
    CPDouble obj1 = new CPDouble(1.0);
    CPDouble obj2 = new CPDouble(1.0);
    int result = obj1.compareTo(obj2);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_Greater_JVAB1_usmz0() {
    CPDouble obj1 = new CPDouble(2.0);
    CPDouble obj2 = new CPDouble(1.0);
    int result = obj1.compareTo(obj2);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_Less_krbA2_MxVm0() {
    CPDouble obj1 = new CPDouble(1.0);
    CPDouble obj2 = new CPDouble(2.0);
    int result = obj1.compareTo(obj2);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_Null_EDvi3_cqcF0() {
    CPDouble obj1 = new CPDouble(1.0);
    CPDouble obj2 = new CPDouble(0.0);
    int result = obj1.compareTo(obj2);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_2_rzYC1_GbYG0() {
    CPDouble cpDouble = new CPDouble(2.0);
    double result = cpDouble.getDouble();
    assertEquals(2.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_3_Schs2_NVNx0() {
    CPDouble cpDouble = new CPDouble(3.0);
    double result = cpDouble.getDouble();
    assertEquals(3.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_4_UmAN3_VhSm0() {
    CPDouble cpDouble = new CPDouble(4.0);
    double result = cpDouble.getDouble();
    assertEquals(4.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_5_VhjK4_JwFl0() {
    CPDouble cpDouble = new CPDouble(5.0);
    double result = cpDouble.getDouble();
    assertEquals(5.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_6_yihN5_LLrz0() {
    CPDouble cpDouble = new CPDouble(6.0);
    double result = cpDouble.getDouble();
    assertEquals(6.0, result, 0.0);
}
}