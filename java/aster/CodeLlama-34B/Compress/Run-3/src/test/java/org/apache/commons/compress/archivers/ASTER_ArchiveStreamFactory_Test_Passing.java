/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ArchiveStreamFactory_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProvidersWithEncoding_qGYl0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertEquals(3, providers.size());
    assertTrue(providers.containsKey("zip"));
    assertTrue(providers.containsKey("tar"));
    assertTrue(providers.containsKey("jar"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_WBlR0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertEquals(8, archiveNames.size());
    assertTrue(archiveNames.contains("AR"));
    assertTrue(archiveNames.contains("ARJ"));
    assertTrue(archiveNames.contains("ZIP"));
    assertTrue(archiveNames.contains("TAR"));
    assertTrue(archiveNames.contains("JAR"));
    assertTrue(archiveNames.contains("CPIO"));
    assertTrue(archiveNames.contains("DUMP"));
    assertTrue(archiveNames.contains("SEVEN_Z"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_evAg0() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> map = archiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertEquals(map.size(), 2);
    assertTrue(map.containsKey("DEFAULT"));
    assertTrue(map.containsKey("CUSTOM"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEncoding_AgtI1() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> map = archiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertEquals(map.size(), 2);
    assertTrue(map.containsKey("DEFAULT"));
    assertTrue(map.containsKey("CUSTOM"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEmptyEncoding_QzfM2() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("");
    SortedMap<String, ArchiveStreamProvider> map = archiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertEquals(map.size(), 1);
    assertTrue(map.containsKey("DEFAULT"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithNullEncoding_CPpe3() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory(null);
    SortedMap<String, ArchiveStreamProvider> map = archiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertEquals(map.size(), 1);
    assertTrue(map.containsKey("DEFAULT"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStream_NullOutputStream_kmQr7() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream out = null;
    String archiverName = "AR";
    String actualEncoding = "UTF-8";
    try {
        factory.createArchiveOutputStream(archiverName, out, actualEncoding);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("OutputStream must not be null.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_dfNc0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertEquals(6, archiveNames.size());
    assertTrue(archiveNames.contains("AR"));
    assertTrue(archiveNames.contains("ZIP"));
    assertTrue(archiveNames.contains("TAR"));
    assertTrue(archiveNames.contains("JAR"));
    assertTrue(archiveNames.contains("CPIO"));
    assertTrue(archiveNames.contains("SEVEN_Z"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNamesWithEncoding_MVtc1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertEquals(6, archiveNames.size());
    assertTrue(archiveNames.contains("AR"));
    assertTrue(archiveNames.contains("ZIP"));
    assertTrue(archiveNames.contains("TAR"));
    assertTrue(archiveNames.contains("JAR"));
    assertTrue(archiveNames.contains("CPIO"));
    assertTrue(archiveNames.contains("SEVEN_Z"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersWithEncoding_lYeV0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
    assertNotNull(providers);
    assertEquals(1, providers.size());
    assertTrue(providers.containsKey("UTF-8"));
    assertEquals(ArchiveStreamProvider.class, providers.get("UTF-8").getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersWithoutEncoding_TKmQ1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
    assertNotNull(providers);
    assertEquals(0, providers.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryEncoding_DefaultEncoding_NLNz0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    String encoding = factory.getEntryEncoding();
    assertEquals("UTF-8", encoding);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryEncoding_CustomEncoding_Jqmx1() {
    String encoding = "ISO-8859-1";
    ArchiveStreamFactory factory = new ArchiveStreamFactory(encoding);
    String actualEncoding = factory.getEntryEncoding();
    assertEquals(encoding, actualEncoding);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProvidersWithEncoding_qGYl0_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertEquals(3, providers.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProvidersWithEncoding_qGYl0_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertTrue(providers.containsKey("zip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProvidersWithEncoding_qGYl0_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertTrue(providers.containsKey("tar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProvidersWithEncoding_qGYl0_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertTrue(providers.containsKey("jar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_WBlR0_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertEquals(8, archiveNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_WBlR0_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("AR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_WBlR0_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("ARJ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_WBlR0_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("ZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_WBlR0_5() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("TAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_WBlR0_6() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("JAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_WBlR0_7() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("CPIO"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_WBlR0_8() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("DUMP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_WBlR0_9() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("SEVEN_Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_evAg0_1() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> map = archiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertEquals(map.size(), 2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_evAg0_2() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> map = archiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("DEFAULT"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_evAg0_3() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> map = archiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("CUSTOM"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEncoding_AgtI1_1() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> map = archiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertEquals(map.size(), 2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEncoding_AgtI1_2() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> map = archiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("DEFAULT"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEncoding_AgtI1_3() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> map = archiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("CUSTOM"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEmptyEncoding_QzfM2_1() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("");
    SortedMap<String, ArchiveStreamProvider> map = archiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertEquals(map.size(), 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEmptyEncoding_QzfM2_2() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("");
    SortedMap<String, ArchiveStreamProvider> map = archiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("DEFAULT"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithNullEncoding_CPpe3_1() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory(null);
    SortedMap<String, ArchiveStreamProvider> map = archiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertEquals(map.size(), 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithNullEncoding_CPpe3_2() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory(null);
    SortedMap<String, ArchiveStreamProvider> map = archiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("DEFAULT"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_dfNc0_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertEquals(6, archiveNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_dfNc0_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("AR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_dfNc0_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("ZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_dfNc0_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("TAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_dfNc0_5() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("JAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_dfNc0_6() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("CPIO"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_dfNc0_7() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("SEVEN_Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNamesWithEncoding_MVtc1_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertEquals(6, archiveNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNamesWithEncoding_MVtc1_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("AR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNamesWithEncoding_MVtc1_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("ZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNamesWithEncoding_MVtc1_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("TAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNamesWithEncoding_MVtc1_5() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("JAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNamesWithEncoding_MVtc1_6() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("CPIO"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNamesWithEncoding_MVtc1_7() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("SEVEN_Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersWithEncoding_lYeV0_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersWithEncoding_lYeV0_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
    assertEquals(1, providers.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersWithEncoding_lYeV0_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
    assertTrue(providers.containsKey("UTF-8"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersWithEncoding_lYeV0_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
    assertEquals(ArchiveStreamProvider.class, providers.get("UTF-8").getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersWithoutEncoding_TKmQ1_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersWithoutEncoding_TKmQ1_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
    assertEquals(0, providers.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEntryEncoding_null_fRbZ0_qsIg1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    factory.setEntryEncoding(null);
    assertNull(factory.getEntryEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEntryEncoding_empty_fZtm1_JVYN2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    factory.setEntryEncoding("");
    assertEquals("", factory.getEntryEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEntryEncoding_valid_KkAP2_tplP3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    factory.setEntryEncoding("UTF-8");
    assertEquals("UTF-8", factory.getEntryEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEntryEncoding_invalid_ikmw3_MtMP4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    factory.setEntryEncoding("invalid");
    assertNull(factory.getEntryEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEntryEncoding_null_encoding_with_constructor_hdUP8_uUmk9() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory(null);
    factory.setEntryEncoding(null);
    assertNull(factory.getEntryEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEntryEncoding_empty_encoding_with_constructor_QTXF9_WTRj10() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("");
    factory.setEntryEncoding("");
    assertEquals("", factory.getEntryEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_ValidArchiverName_ValidInputStream_uZas0_Zujv0() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    String archiverName = "zip";
    InputStream in = new ByteArrayInputStream(new byte[0]);
    ArchiveInputStream archiveInputStream = factory.createArchiveInputStream(archiverName, in);
    assertNotNull(archiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_ValidArchiverName_ValidInputStream_WithEncoding_xKXA4_NLfa0() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    String archiverName = "zip";
    InputStream in = new ByteArrayInputStream(new byte[0]);
    ArchiveInputStream archiveInputStream = factory.createArchiveInputStream(archiverName, in);
    assertNotNull(archiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_giLO0_qNVC0_1() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    names.add("name3");
    ArchiveStreamProvider provider = null;
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_giLO0_qNVC0_2() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    names.add("name3");
    ArchiveStreamProvider provider = null;
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertTrue(map.containsKey("name1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_giLO0_qNVC0_3() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    names.add("name3");
    ArchiveStreamProvider provider = null;
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertTrue(map.containsKey("name2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_giLO0_qNVC0_4() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    names.add("name3");
    ArchiveStreamProvider provider = null;
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertTrue(map.containsKey("name3"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_nullStream_dTkP0_fJdQ0() {
    try {
        ArchiveStreamFactory.detect(null);
        fail("Should throw IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Stream must not be null.", e.getMessage());
    } catch (ArchiveException e) {
        fail("Should not throw ArchiveException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_nonMarkSupportedStream_VekQ1_KYPO0() {
    InputStream in = mock(InputStream.class);
    when(in.markSupported()).thenReturn(false);
    try {
        ArchiveStreamFactory.detect(in);
        fail("Should throw IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Mark is not supported.", e.getMessage());
    } catch (ArchiveException e) {
        fail("Should not throw ArchiveException");
    }
}
}