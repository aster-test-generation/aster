/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.NoSuchElementException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.NoSuchElementException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveEntry_Test_Passing {
private int versionRequired;
private GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
private long externalAttributes;
private UnparseableExtraFieldData unparseableExtra;
private int internalAttributes;
private int rawFlag;
private long time = -1;
private long diskNumberStart;
private int method = ZipMethod.UNKNOWN_CODE;
private boolean lastModifiedDateSet;
private int versionMadeBy;
private byte[] rawName;
private boolean isStreamContiguous;
    private static final int SHORT_SHIFT = 16;
    private String name;
    private static final String ZIP_DIR_SEP = "/";
    private static final int SHORT_MASK = 0xFFFF;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode_fGzj0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test");
    entry.setUnixMode(0755);
    assertEquals(0755, entry.getExternalAttributes() >> SHORT_SHIFT);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode_fGzj0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test");
    entry.setUnixMode(0755);
    assertEquals(1, entry.getExternalAttributes() & 0x10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode_fGzj0_3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test");
    entry.setUnixMode(0755);
    assertEquals(0, entry.getExternalAttributes() & 0x20);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixModeWithDirectory_GCvU1_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test");
    entry.setUnixMode(0755 | 0x10);
    assertEquals(0755, entry.getExternalAttributes() >> SHORT_SHIFT);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixModeWithDirectory_GCvU1_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test");
    entry.setUnixMode(0755 | 0x10);
    assertEquals(1, entry.getExternalAttributes() & 0x10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixModeWithDirectory_GCvU1_3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test");
    entry.setUnixMode(0755 | 0x10);
    assertEquals(0, entry.getExternalAttributes() & 0x20);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_KYMK0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjects_Qvtg1() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test1.zip");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test2.zip");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_PcbJ2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_uGlS3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    assertFalse(entry.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameName_KObJ4() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test.zip");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test.zip");
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameComment_yHxX6() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test.zip");
    entry1.setComment("test comment");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test.zip");
    entry2.setComment("test comment");
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentComment_CKcm7() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test.zip");
    entry1.setComment("test comment");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test.zip");
    entry2.setComment("different comment");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_BqFC0() {
ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
Date lastModifiedDate = entry.getLastModifiedDate();
assertNotNull(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDateWithStringName_lHkx4() {
ZipArchiveEntry entry = new ZipArchiveEntry("entry1");
Date lastModifiedDate = entry.getLastModifiedDate();
assertNotNull(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveUnparseableExtraFieldData_Dndr0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.removeUnparseableExtraFieldData();
    assertNull(entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag_withName_pCdm3() {
    String name = "test.txt";
    ZipArchiveEntry entry = new ZipArchiveEntry(name);
    assertEquals(0, entry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag_withInputFile_MOWp4() {
    File inputFile = new File("test.zip");
    String entryName = "test.txt";
    ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
    assertEquals(0, entry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag_withRawFlagAndName_FiBG8() {
    String name = "test.txt";
    ZipArchiveEntry entry = new ZipArchiveEntry(name);
    entry.setRawFlag(1);
    assertEquals(1, entry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag_withRawFlagAndInputFile_LPVI9() {
    File inputFile = new File("test.zip");
    String entryName = "test.txt";
    ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
    entry.setRawFlag(1);
    assertEquals(1, entry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentWithStringName_uKEP3() {
    String name = "entryName";
    ZipArchiveEntry entry = new ZipArchiveEntry(name);
    assertEquals(0, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentWithFileInput_wYGC4() {
    File inputFile = new File("path/to/input/file");
    String entryName = "entryName";
    ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
    assertEquals(0, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentWithNullStringName_BwTO9() {
    String name = null;
    ZipArchiveEntry entry = new ZipArchiveEntry(name);
    assertEquals(0, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentWithNullFileInput_Gqto10() {
    File inputFile = null;
    String entryName = "entryName";
    ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
    assertEquals(0, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCommentSource_null_pfUx2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test.txt");
    entry.setCommentSource(null);
    assertNull(entry.getCommentSource());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_empty_RStd1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("");
    entry.setName("");
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_valid_IsMw2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setName("newName.txt");
    assertEquals("newName.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_invalid_hflQ3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    try {
        entry.setName("newName.txt");
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid name: newName.txt", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_ValidSize_heqh0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setSize(100);
    assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous_True_QwKZ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    assertTrue(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous_False_PaSX1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setStreamContiguous(false);
    assertFalse(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtra_ValidInput_NeTL0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    byte[] extraData = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    entry.setCentralDirectoryExtra(extraData);
    assertArrayEquals(extraData, entry.getCentralDirectoryExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtra_NullInput_TvQG1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    byte[] extraData = null;
    entry.setCentralDirectoryExtra(extraData);
    assertNull(entry.getCentralDirectoryExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtra_EmptyInput_GYAf2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    byte[] extraData = new byte[0];
    entry.setCentralDirectoryExtra(extraData);
    assertArrayEquals(extraData, entry.getCentralDirectoryExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_ValidExtra_ooDW0() throws IOException {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    byte[] extra = new byte[10];
    entry.setExtra(extra);
    assertEquals(extra, entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_NullExtra_tMgA1() throws IOException {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setExtra(null);
    assertNull(entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_EmptyExtra_TKUs2() throws IOException {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    byte[] extra = new byte[0];
    entry.setExtra(extra);
    assertEquals(extra, entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_InvalidExtra_iDlw3() throws IOException {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    byte[] extra = new byte[10];
    extra[0] = -1;
    try {
        entry.setExtra(extra);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Error parsing extra fields for entry: entry - Invalid extra field", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_ExtraWithInvalidLength_ceDZ4() throws IOException {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    byte[] extra = new byte[10];
    extra[0] = 10;
    try {
        entry.setExtra(extra);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Error parsing extra fields for entry: entry - Invalid extra field length", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_ExtraWithInvalidType_AfOJ5() throws IOException {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    byte[] extra = new byte[10];
    extra[0] = 1;
    try {
        entry.setExtra(extra);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Error parsing extra fields for entry: entry - Invalid extra field type", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_ExtraWithInvalidData_INvP6() throws IOException {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    byte[] extra = new byte[10];
    extra[0] = 1;
    extra[1] = 2;
    try {
        entry.setExtra(extra);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Error parsing extra fields for entry: entry - Invalid extra field data", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_DefaultConstructor_YRFQ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    int method = entry.getMethod();
    assertEquals(0, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_StringConstructor_pkLK3() {
    String name = "entryName";
    ZipArchiveEntry entry = new ZipArchiveEntry(name);
    int method = entry.getMethod();
    assertEquals(0, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_FileConstructor_rzHW4() {
    File inputFile = new File("path/to/file.zip");
    String entryName = "entryName";
    ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
    int method = entry.getMethod();
    assertEquals(0, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_InvalidMethod_gcmn6() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setMethod(-1);
    int method = entry.getMethod();
    assertEquals(-1, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_ValidMethod_jwIt7() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setMethod(0);
    int method = entry.getMethod();
    assertEquals(0, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_ROFP0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(fileTime);
    assertEquals(fileTime, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithNullFileTime_pcxj1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setLastModifiedTime(null);
    assertNull(entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithInvalidFileTime_jjTT2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() - 1000000000000L);
    entry.setLastModifiedTime(fileTime);
    assertEquals(fileTime, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithFutureFileTime_yZOf3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() + 1000000000000L);
    entry.setLastModifiedTime(fileTime);
    assertEquals(fileTime, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName() {
    // Create a ZipArchiveEntry object with a valid name
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
    // Call the getName method on the object
    String name = zipArchiveEntry.getName();
    // Check that the returned name is the same as the name used to construct the object
    assertEquals("test.txt", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_nullName_yRXA0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(null, null);
    assertEquals(null, entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_true_TEIF0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "dir/");
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_false_vLON1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "file.txt");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_null_HOAg2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), null);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_empty_JbzP3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_slash_rMoR4() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "/");
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_backslash_NkGY5() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "\\");
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_dot_lRxF6() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), ".");
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_dotdot_Wfnp7() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "..");
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_dotdotdot_iirW8() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "...");
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_dotdotdotdot_HxVe9() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "....");
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithFileTime_nkyQ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    entry.setTime(fileTime);
    assertEquals(fileTime.toMillis(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithLong_SznJ1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    long time = System.currentTimeMillis();
    entry.setTime(time);
    assertEquals(time, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNullFileTime_gHwv2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    FileTime fileTime = null;
    entry.setTime(fileTime);
    assertNull(entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithInvalidFileTime_szXA4() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() - 10000000000L);
    entry.setTime(fileTime);
    assertEquals(fileTime.toMillis(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithInvalidLong_bYgV5() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    long time = System.currentTimeMillis() - 10000000000L;
    entry.setTime(time);
    assertEquals(time, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithValidFileTime_rxwM6() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() + 10000000000L);
    entry.setTime(fileTime);
    assertEquals(fileTime.toMillis(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithValidLong_vZsj7() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    long time = System.currentTimeMillis() + 10000000000L;
    entry.setTime(time);
    assertEquals(time, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithZeroFileTime_cOXJ8() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    FileTime fileTime = FileTime.fromMillis(0);
    entry.setTime(fileTime);
    assertEquals(fileTime.toMillis(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithZeroLong_kapB9() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    long time = 0;
    entry.setTime(time);
    assertEquals(time, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDiskNumberStartWithStringName_NlHD3() {
ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
long diskNumberStart = entry.getDiskNumberStart();
assertEquals(0, diskNumberStart);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDiskNumberStartWithFileAndEntryName_eEad4() {
ZipArchiveEntry entry = new ZipArchiveEntry(new File("inputFile"), "entryName");
long diskNumberStart = entry.getDiskNumberStart();
assertEquals(0, diskNumberStart);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDiskNumberStartWithNullInputPath_BJLH5() {
ZipArchiveEntry entry = new ZipArchiveEntry(null, "entryName");
long diskNumberStart = entry.getDiskNumberStart();
assertEquals(0, diskNumberStart);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDiskNumberStartWithNullFileAndEntryName_sUIA8() {
ZipArchiveEntry entry = new ZipArchiveEntry(null, null);
long diskNumberStart = entry.getDiskNumberStart();
assertEquals(0, diskNumberStart);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_SENj0_1() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getName(), clone.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_SENj0_2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getSize(), clone.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_SENj0_3() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getCompressedSize(), clone.getCompressedSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_SENj0_4() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getCrc(), clone.getCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_SENj0_5() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getMethod(), clone.getMethod());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_SENj0_6() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getExtraFields(), clone.getExtraFields());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_SENj0_7() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getInternalAttributes(), clone.getInternalAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_SENj0_8() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getExternalAttributes(), clone.getExternalAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentName_kWar1_1() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setName("entry2");
    assertEquals("entry2", clone.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentName_kWar1_2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setName("entry2");
    assertNotEquals(entry.getName(), clone.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentSize_caQS2_1() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setSize(100);
    assertEquals(100, clone.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentSize_caQS2_2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setSize(100);
    assertNotEquals(entry.getSize(), clone.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentCompressedSize_tYfi3_1() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setCompressedSize(50);
    assertEquals(50, clone.getCompressedSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentCompressedSize_tYfi3_2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setCompressedSize(50);
    assertNotEquals(entry.getCompressedSize(), clone.getCompressedSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentCrc_EeMj4_1() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setCrc(12345);
    assertEquals(12345, clone.getCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentCrc_EeMj4_2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setCrc(12345);
    assertNotEquals(entry.getCrc(), clone.getCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentMethod_mlbW5_1() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setMethod(ZipEntry.DEFLATED);
    assertEquals(ZipEntry.DEFLATED, clone.getMethod());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentMethod_mlbW5_2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setMethod(ZipEntry.DEFLATED);
    assertNotEquals(entry.getMethod(), clone.getMethod());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentInternalAttributes_lmLA7_1() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setInternalAttributes(12345);
    assertEquals(12345, clone.getInternalAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentInternalAttributes_lmLA7_2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setInternalAttributes(12345);
    assertNotEquals(entry.getInternalAttributes(), clone.getInternalAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryExtraWithStringName_HtFf3() {
ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
byte[] centralDirectoryExtra = entry.getCentralDirectoryExtra();
assertNotNull(centralDirectoryExtra);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryExtraWithFileInputFile_iCBJ4() {
ZipArchiveEntry entry = new ZipArchiveEntry(new File("inputFile"), "entryName");
byte[] centralDirectoryExtra = entry.getCentralDirectoryExtra();
assertNotNull(centralDirectoryExtra);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryExtraWithNullInputPath_LnrK5() {
ZipArchiveEntry entry = new ZipArchiveEntry(null, "entryName");
byte[] centralDirectoryExtra = entry.getCentralDirectoryExtra();
assertNull(centralDirectoryExtra);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryExtraWithEmptyStringName_tJna9() {
ZipArchiveEntry entry = new ZipArchiveEntry("");
byte[] centralDirectoryExtra = entry.getCentralDirectoryExtra();
assertNull(centralDirectoryExtra);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixSymlink_true_MErQ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test.txt");
    entry.setUnixMode(UnixStat.LINK_FLAG);
    assertTrue(entry.isUnixSymlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixSymlink_false_CIwO1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test.txt");
    entry.setUnixMode(UnixStat.FILE_TYPE_FLAG);
    assertFalse(entry.isUnixSymlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixSymlink_null_gJmV2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(null, null);
    assertFalse(entry.isUnixSymlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVersionRequired_rvyz0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setVersionRequired(10);
    assertEquals(10, entry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVersionRequiredWithInvalidValue_KfCj1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    try {
        entry.setVersionRequired(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid version required: -1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVersionRequiredWithNullEntry_Qdqc2() {
    ZipArchiveEntry entry = null;
    try {
        entry.setVersionRequired(10);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("entry is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAlignment_powerOfTwo_LrmV0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setAlignment(2);
    assertEquals(2, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAlignment_notPowerOfTwo_HGgz1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    try {
        entry.setAlignment(3);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid value for alignment, must be power of two and no bigger than " + 0xffff + " but is " + 3, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAlignment_powerOfTwoAndGreaterThan0xffff_FkyI4() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    try {
        entry.setAlignment(0x10000);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid value for alignment, must be power of two and no bigger than " + 0xffff + " but is " + 0x10000, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMethod_Valid_xYvt0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setMethod(ZipEntry.DEFLATED);
    assertEquals(ZipEntry.DEFLATED, entry.getMethod());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMethod_Valid_Stored_jeYX2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setMethod(ZipEntry.STORED);
    assertEquals(ZipEntry.STORED, entry.getMethod());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_Empty_TBxf0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    ZipExtraField[] extraFields = entry.getExtraFields();
    assertEquals(0, extraFields.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_EmptyEntry_KbnU0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_FileEntry_SPQi3() {
    File file = new File("test.txt");
    ZipArchiveEntry entry = new ZipArchiveEntry(file, "entry3");
    assertEquals(30, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_StringEntry_VCHR4() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry4");
    assertEquals(40, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_DefaultConstructor_xJPN0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    assertEquals(0, entry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_ZipEntryConstructor_CVDr2() throws ZipException {
    java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entryName");
    ZipArchiveEntry zipEntry = new ZipArchiveEntry(entry);
    assertEquals(0, zipEntry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_StringConstructor_tezo3() {
    String name = "entryName";
    ZipArchiveEntry entry = new ZipArchiveEntry(name);
    assertEquals(0, entry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_FileConstructor_sJKb4() {
    File inputFile = new File("path/to/file.zip");
    String entryName = "entryName";
    ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
    assertEquals(0, entry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_NonDefaultValue_rwOa5() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setPlatform(1);
    assertEquals(1, entry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_InvalidValue_yQcW7() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setPlatform(-1);
    assertEquals(0, entry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_MaxValue_gEVf8() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setPlatform(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_MinValue_aFRY9() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setPlatform(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInternalAttributes_Default_PhpL0_MgPX2() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    assertEquals(0, entry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInternalAttributes_StringName_kcwg4_UOSJ6() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    assertEquals(0, entry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInternalAttributes_FileInputFile_PdoM5_QrIz7() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entryName");
    assertEquals(0, entry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInternalAttributes_Null_dKOS6_wbgn8() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setInternalAttributes(0);
    assertEquals(0, entry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInternalAttributes_Invalid_khBS7_hpXl9() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setInternalAttributes(-1);
    assertEquals(0, entry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInternalAttributes_Valid_tdYe8_kphb10() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setInternalAttributes(1);
    assertEquals(1, entry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameLastModifiedTime_AmEj8_qOQc0() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test.zip");
    entry1.setLastModifiedTime(FileTime.fromMillis(1000L));
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test.zip");
    entry2.setLastModifiedTime(FileTime.fromMillis(1000L));
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLastModifiedTime_ROHQ9_emHI0() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test.zip");
    entry1.setLastModifiedTime(FileTime.fromMillis(1000L));
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test.zip");
    entry2.setLastModifiedTime(FileTime.fromMillis(2000L));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameLastAccessTime_czQy10_wgJF0() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test.zip");
    entry1.setLastAccessTime(FileTime.fromMillis(1000L));
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test.zip");
    entry2.setLastAccessTime(FileTime.fromMillis(1000L));
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInfoZipExtendedTimestamp_eXpp5_zHlw0_1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    zipArchiveEntry.setCreationTime(fileTime);
    assertEquals(fileTime, zipArchiveEntry.getCreationTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInfoZipExtendedTimestamp_eXpp5_zHlw0_2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    zipArchiveEntry.setCreationTime(fileTime);
    assertNotNull(zipArchiveEntry.getExtraFields());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInfoZipExtendedTimestamp_eXpp5_zHlw0_3() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    zipArchiveEntry.setCreationTime(fileTime);
    assertNotNull(zipArchiveEntry.getExtraField(X5455_ExtendedTimestamp.HEADER_ID));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithLastModifiedTime_IPgR2_tYow0_1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
    zipArchiveEntry.setCreationTime(FileTime.fromMillis(1000));
    zipArchiveEntry.setLastModifiedTime(FileTime.fromMillis(3000));
    assertEquals(FileTime.fromMillis(1000), zipArchiveEntry.getCreationTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithLastModifiedTime_IPgR2_tYow0_2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
    zipArchiveEntry.setCreationTime(FileTime.fromMillis(1000));
    zipArchiveEntry.setLastModifiedTime(FileTime.fromMillis(3000));
    assertEquals(FileTime.fromMillis(3000), zipArchiveEntry.getLastModifiedTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_QXZQ0_CaFr0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test.zip"), "entryName");
    zipArchiveEntry.setExtra();
    assertEquals(ExtraFieldUtils.mergeLocalFileDataData(zipArchiveEntry.getExtraFields()), zipArchiveEntry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous_Valid_hkFa5_JHLA0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setStreamContiguous(true);
    assertTrue(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsExcludeUnparseable_VcJV1_yLrE0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    ZipExtraField[] extraFields = entry.getExtraFields(false);
    assertNotNull(extraFields);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsExcludeUnparseable_VcJV1_yLrE0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    ZipExtraField[] extraFields = entry.getExtraFields(false);
    assertEquals(extraFields.length, 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_emptyName_QYzK2_EFZL0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "");
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNullLong_JlDj3_gZEZ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    long time = 0L;
    entry.setTime(time);
    assertEquals(time, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDiskNumberStartWithNullJavaUtilZipEntry_CGst6_pjZs0() {
ZipArchiveEntry entry = new ZipArchiveEntry();
long diskNumberStart = entry.getDiskNumberStart();
assertEquals(0, diskNumberStart);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithNoExtraFields_EORP5_okaR0_1() throws ZipException {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    ZipExtraField[] extraFields = entry.getExtraFields();
    assertNotNull(extraFields);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithNoExtraFields_EORP5_okaR0_2() throws ZipException {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    ZipExtraField[] extraFields = entry.getExtraFields();
    assertEquals(0, extraFields.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveExtraFieldWithNonExistentType_qsCH1_Ssza0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    try {
        entry.removeExtraField(new ZipShort(2));
        fail("Expected NoSuchElementException");
    } catch (NoSuchElementException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixSymlink_invalid_guNc3_HesN0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test.txt");
    entry.setUnixMode(UnixStat.LINK_FLAG);
    assertFalse(entry.isUnixSymlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVersionRequiredWithNullVersion_jSZf7_kDFd0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    try {
        entry.setVersionRequired(0);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("version is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVersionRequiredWithInvalidVersionType_YKns8_PiVc0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    try {
        entry.setVersionRequired(Integer.parseInt("invalid version"));
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid version required: invalid version", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_OneExtraField_uWPJ1_qUSh0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    ZipExtraField extraField = new UnparseableExtraFieldData();
    entry.addExtraField(extraField);
    ZipExtraField[] extraFields = entry.getExtraFields();
    assertEquals(1, extraFields.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_OneExtraField_uWPJ1_qUSh0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    ZipExtraField extraField = new UnparseableExtraFieldData();
    entry.addExtraField(extraField);
    ZipExtraField[] extraFields = entry.getExtraFields();
    assertSame(extraField, extraFields[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_InvalidExtraFields_FcYN5_UiJu0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    ZipExtraField extraField = new UnparseableExtraFieldData();
    entry.addExtraField(extraField);
    ZipExtraField[] extraFields = entry.getExtraFields();
    assertNotSame(extraField, extraFields[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_NonExistentEntry_SKRB7_bbxI0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry7");
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_Null_GuOJ6_KWYI0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setPlatform(0);
    assertEquals(0, entry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired2_mFip1_uIZh0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry2");
    assertEquals(2, entry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired5_IwRV4_BWYF0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry5");
    assertEquals(5, entry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired6_EQEu5_qmVL0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry6");
    assertEquals(6, entry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired7_NOBg6_fAKl0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry7");
    assertEquals(7, entry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired8_zegM7_Pxrq0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry8");
    assertEquals(8, entry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired10_Ykyk9_Jduy0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry10");
    assertEquals(10, entry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag_default_sOxr0_TiXb0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    assertEquals(0, entry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag_withZipEntry_HSVt2_ZpPp0() {
    java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("test.txt");
    try {
        ZipArchiveEntry zipEntry = new ZipArchiveEntry(entry);
        assertEquals(0, zipEntry.getRawFlag());
    } catch (ZipException e) {
        e.printStackTrace();
    }
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRawFlag_withRawFlag_MSVf5_ATVK0() throws ZipException, IOException {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
        entry.setRawFlag(1);
        assertEquals(1, entry.getRawFlag());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidFileTime_QwJe2_VhDv0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    zipArchiveEntry.setCreationTime(fileTime);
    assertNotEquals(fileTime, zipArchiveEntry.getCreationTime());
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithExtraTimeFields_ucUw4_eaSK0_1() throws ZipException, IOException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        zipArchiveEntry.setCreationTime(fileTime);
        assertEquals(fileTime, zipArchiveEntry.getCreationTime());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithExtraTimeFields_ucUw4_eaSK0_2() throws ZipException, IOException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        zipArchiveEntry.setCreationTime(fileTime);
        assertNotNull(zipArchiveEntry.getExtra());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithValidName_NpJP0_vFnb0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    entry.setName("test", new byte[0]);
    assertEquals("test", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithValidName_NpJP0_vFnb0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    entry.setName("test", new byte[0]);
    assertArrayEquals(new byte[0], entry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithNullName_lsjy1_BIPJ0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    entry.setName(null, new byte[0]);
    assertNull(entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithNullName_lsjy1_BIPJ0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    entry.setName(null, new byte[0]);
    assertArrayEquals(new byte[0], entry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithEmptyName_eiZW2_CGUp0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    entry.setName("", new byte[0]);
    assertEquals("", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithEmptyName_eiZW2_CGUp0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    entry.setName("", new byte[0]);
    assertArrayEquals(new byte[0], entry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithEmptyNameAndValidRawName_mODd7_FrEV0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    entry.setName("", new byte[] { 1, 2, 3 });
    assertEquals("", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithEmptyNameAndValidRawName_mODd7_FrEV0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    entry.setName("", new byte[] { 1, 2, 3 });
    assertArrayEquals(new byte[] { 1, 2, 3 }, entry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment_FbxI0_dIHn0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    assertEquals(0, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentWithJavaUtilZipEntry_ttgD2_UtoF0() {
    java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entryName");
    try {
        ZipArchiveEntry zipEntry = new ZipArchiveEntry(entry);
        assertEquals(0, zipEntry.getAlignment());
    } catch (ZipException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentWithNullInputPath_PkRc6_CyhS0() {
    Path inputPath = null;
    String entryName = "entryName";
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(inputPath, entryName);
        assertEquals(0, entry.getAlignment());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_gIwC0_mDZA0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry1");
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_2_agMh1_BQNU0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entry2");
        assertEquals(entry.getName().hashCode(), entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_4_eeWC3_dNBJ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry4");
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_5_HAmE4_uERr0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry5");
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_7_cHHg6_Avyh0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry7");
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalHeaderOffset1_AnAW0_bLqe0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry1");
    long offset = entry.getLocalHeaderOffset();
    assertEquals(0, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalHeaderOffset2_xpPa1_gmQJ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry2");
    long offset = entry.getLocalHeaderOffset();
    assertEquals(0, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalHeaderOffset5_aohT4_IYVT0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry5");
    long offset = entry.getLocalHeaderOffset();
    assertEquals(0, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalHeaderOffset6_czLP5_jMEd0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry6");
    long offset = entry.getLocalHeaderOffset();
    assertEquals(0, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalHeaderOffset7_vAZM6_JDHA0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry7");
    long offset = entry.getLocalHeaderOffset();
    assertEquals(0, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalHeaderOffset8_ZFXa7_rHEn0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry8");
    long offset = entry.getLocalHeaderOffset();
    assertEquals(0, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalHeaderOffset9_PfRh8_KaLG0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry9");
    long offset = entry.getLocalHeaderOffset();
    assertEquals(0, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalHeaderOffset10_EdAG9_jCJV0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry10");
    long offset = entry.getLocalHeaderOffset();
    assertEquals(0, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_ZipEntryConstructor_rUWu2_MqGw0() {
    java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entryName");
    try {
        ZipArchiveEntry zipEntry = new ZipArchiveEntry(entry);
        int method = zipEntry.getMethod();
        assertEquals(0, method);
    } catch (ZipException e) {
        fail("ZipException thrown: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawName_NonNull_hAHU1_ClbR0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    assertNotNull(entry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawName_NonNull_hAHU1_ClbR0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    assertEquals(entry.getRawName().length, 4);}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRawName_ValidName_AKBG4_OAxg0_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
        entry.setName("test");
        assertNotNull(entry.getRawName());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRawName_ValidName_AKBG4_OAxg0_2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
        entry.setName("test");
        assertEquals(entry.getRawName().length, 4);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryExtraWithJavaUtilZipEntry_ZFKF2_yHCR0() {
    ZipArchiveEntry entry = null;
    try {
        entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entryName"));
    } catch (ZipException e) {
        e.printStackTrace();
    }
    byte[] centralDirectoryExtra = entry.getCentralDirectoryExtra();
    assertNotNull(centralDirectoryExtra);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAsFirstExtraField_UnparseableExtraFieldData_jBUn0_YqAA0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    UnparseableExtraFieldData extraField = new UnparseableExtraFieldData();
    entry.addAsFirstExtraField(extraField);
    assertEquals(extraField, entry.getExtraField(extraField.getHeaderId()));
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_ZipEntry_XJxO2_Pnth0() throws ZipException {
        ZipEntry zipEntry = new ZipEntry("entry2");
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        assertEquals(20, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_NullEntry_qcYo5_DtCC0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(null, "entry5", LinkOption.NOFOLLOW_LINKS);
        assertEquals(0, entry.getSize());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_NullPath_EnLj9_MqsW0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(null, "entry9", LinkOption.NOFOLLOW_LINKS);
        assertEquals(0, entry.getSize());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode_fGzj0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test");
    entry.setUnixMode(0755);
    assertEquals(0755, entry.getExternalAttributes() >> SHORT_SHIFT);
    assertEquals(1, entry.getExternalAttributes() & 0x10);
    assertEquals(0, entry.getExternalAttributes() & 0x20);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixModeWithDirectory_GCvU1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test");
    entry.setUnixMode(0755 | 0x10);
    assertEquals(0755, entry.getExternalAttributes() >> SHORT_SHIFT);
    assertEquals(1, entry.getExternalAttributes() & 0x10);
    assertEquals(0, entry.getExternalAttributes() & 0x20);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_SENj0() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getName(), clone.getName());
    assertEquals(entry.getSize(), clone.getSize());
    assertEquals(entry.getCompressedSize(), clone.getCompressedSize());
    assertEquals(entry.getCrc(), clone.getCrc());
    assertEquals(entry.getMethod(), clone.getMethod());
    assertEquals(entry.getExtraFields(), clone.getExtraFields());
    assertEquals(entry.getInternalAttributes(), clone.getInternalAttributes());
    assertEquals(entry.getExternalAttributes(), clone.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentName_kWar1() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setName("entry2");
    assertEquals("entry2", clone.getName());
    assertNotEquals(entry.getName(), clone.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentSize_caQS2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setSize(100);
    assertEquals(100, clone.getSize());
    assertNotEquals(entry.getSize(), clone.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentCompressedSize_tYfi3() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setCompressedSize(50);
    assertEquals(50, clone.getCompressedSize());
    assertNotEquals(entry.getCompressedSize(), clone.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentCrc_EeMj4() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setCrc(12345);
    assertEquals(12345, clone.getCrc());
    assertNotEquals(entry.getCrc(), clone.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentMethod_mlbW5() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setMethod(ZipEntry.DEFLATED);
    assertEquals(ZipEntry.DEFLATED, clone.getMethod());
    assertNotEquals(entry.getMethod(), clone.getMethod());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentInternalAttributes_lmLA7() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    clone.setInternalAttributes(12345);
    assertEquals(12345, clone.getInternalAttributes());
    assertNotEquals(entry.getInternalAttributes(), clone.getInternalAttributes());
}
}