/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Folder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForInStream_validIndex_ifkB0() {
    Folder folder = new Folder();
    int index = 0;
    int expected = 0;
    int actual = folder.findBindPairForInStream(index);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForInStream_invalidIndex_BXKn1() {
    Folder folder = new Folder();
    int index = -1;
    int expected = -1;
    int actual = folder.findBindPairForInStream(index);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForInStream_nullBindPairs_kBqu2() {
    Folder folder = new Folder();
    folder.bindPairs = null;
    int index = 0;
    int expected = -1;
    int actual = folder.findBindPairForInStream(index);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForInStream_emptyBindPairs_vCTw3() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[0];
    int index = 0;
    int expected = -1;
    int actual = folder.findBindPairForInStream(index);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_emptyBindPairs_Ljuc0() {
    Folder folder = new Folder();
    int result = folder.findBindPairForOutStream(0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_nonEmptyBindPairs_DqUx1() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[1];
    folder.bindPairs[0] = new BindPair(0, 1);
    int result = folder.findBindPairForOutStream(0);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_nonEmptyBindPairs_differentIndex_GBIM2() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[1];
    folder.bindPairs[0] = new BindPair(0, 1);
    int result = folder.findBindPairForOutStream(1);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_nullBindPairs_ePIB3() {
    Folder folder = new Folder();
    folder.bindPairs = null;
    int result = folder.findBindPairForOutStream(0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsZero_AAzx0() {
    Folder folder = new Folder();
    long actual = folder.getUnpackSize();
    assertEquals(0, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsOne_decK1() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 1;
    long actual = folder.getUnpackSize();
    assertEquals(0, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsGreaterThanOne_ExMi2() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 2;
    long actual = folder.getUnpackSize();
    assertEquals(0, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_RlNq0() {
    Folder folder = new Folder();
    String expected = "Folder with 0 coders, 0 input streams, 0 output streams, 0 bind pairs, 0 packed streams, 0 unpack sizes, without CRC and 0 unpack streams";
    assertEquals(expected, folder.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSizeForCoder_NullCoder_hbTw0() {
    Folder folder = new Folder();
    long result = folder.getUnpackSizeForCoder(null);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSizeForCoder_NullCoders_QoDr2_xmVC0() {
    Folder folder = new Folder();
    Coder coder = null;
    folder.coders = null;
    long result = folder.getUnpackSizeForCoder(coder);
    assertEquals(0, result);
}
}