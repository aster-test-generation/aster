/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Path;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipSplitReadOnlySeekableByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_nullFiles_ctuq0() throws IOException {
    File lastSegmentFile = new File("last_segment.zip");
    Iterable<File> files = null;
    try {
        ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("files", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_nullLastSegmentFile_YuOE1() throws IOException {
    File lastSegmentFile = null;
    Iterable<File> files = Arrays.asList(new File("file1.zip"), new File("file2.zip"));
    try {
        ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("lastSegmentFile", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_emptyFiles_bOro2() throws IOException {
    File lastSegmentFile = new File("last_segment.zip");
    Iterable<File> files = Collections.emptyList();
    try {
        ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("files must not be empty", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForOrderedSeekableByteChannels_singleChannel_LHtm0() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel);
    assertSame(channel, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForOrderedSeekableByteChannels_multipleChannels_uRdR1_1() throws IOException {
    SeekableByteChannel channel1 = mock(SeekableByteChannel.class);
    SeekableByteChannel channel2 = mock(SeekableByteChannel.class);
    SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2);
    assertNotSame(channel1, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForOrderedSeekableByteChannels_multipleChannels_uRdR1_2() throws IOException {
    SeekableByteChannel channel1 = mock(SeekableByteChannel.class);
    SeekableByteChannel channel2 = mock(SeekableByteChannel.class);
    SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2);
    assertNotSame(channel2, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForOrderedSeekableByteChannels_multipleChannels_uRdR1_3() throws IOException {
    SeekableByteChannel channel1 = mock(SeekableByteChannel.class);
    SeekableByteChannel channel2 = mock(SeekableByteChannel.class);
    SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2);
    assertTrue(result instanceof ZipSplitReadOnlySeekableByteChannel);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildFromLastSplitSegment_NullPath_cUQi2() throws IOException {
    Path lastSegmentPath = null;
    try {
        ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentPath);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("lastSegmentPath", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFilesWithInvalidFiles_WLVy1() throws IOException {
    File file1 = new File("file1.txt");
    File file2 = new File("file2.txt");
    File file3 = new File("file3.txt");
    File[] files = new File[] { file1, file2, file3 };
    files[1] = null;
    try {
        SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(files);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Invalid file: null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildFromLastSplitSegment_InvalidFile_eAvt1() throws IOException {
    File lastSegmentFile = new File("last_segment.zip");
    lastSegmentFile.delete();
    SeekableByteChannel actualChannel = ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentFile);
    assertNull(actualChannel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildFromLastSplitSegment_NullFile_IFmS2() throws IOException {
    File lastSegmentFile = null;
    SeekableByteChannel actualChannel = ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentFile);
    assertNull(actualChannel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildFromLastSplitSegment_EmptyFile_Xkox3() throws IOException {
    File lastSegmentFile = new File("last_segment.zip");
    lastSegmentFile.createNewFile();
    SeekableByteChannel actualChannel = ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentFile);
    assertNull(actualChannel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildFromLastSplitSegment_NullPath_fjJd5() throws IOException {
    File lastSegmentFile = new File("last_segment.zip");
    lastSegmentFile.createNewFile();
    Path path = lastSegmentFile.toPath();
    path = null;
    SeekableByteChannel actualChannel = ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentFile);
    assertNull(actualChannel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForOrderedSeekableByteChannels_multipleChannels_uRdR1() throws IOException {
    SeekableByteChannel channel1 = mock(SeekableByteChannel.class);
    SeekableByteChannel channel2 = mock(SeekableByteChannel.class);
    SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2);
    assertNotSame(channel1, result);
    assertNotSame(channel2, result);
    assertTrue(result instanceof ZipSplitReadOnlySeekableByteChannel);
}
}