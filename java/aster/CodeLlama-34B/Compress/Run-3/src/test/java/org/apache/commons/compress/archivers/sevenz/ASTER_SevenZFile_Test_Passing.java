/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.SeekableByteChannel;
import java.util.Arrays;
import org.apache.commons.compress.utils.InputStreamStatistics;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZFile_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_emptySignature_Spoc0() {
    byte[] signature = new byte[0];
    int length = 0;
    assertFalse(SevenZFile.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nullSignature_IBiI3() {
    byte[] signature = null;
    int length = 0;
    assertFalse(SevenZFile.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_SeekableByteChannel_AKzZ0() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    SevenZFile file = new SevenZFile(channel);
    assertEquals("SevenZFile[channel=" + channel + "]", file.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_SeekableByteChannel_FileName_qGwP1() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    String fileName = "test.7z";
    SevenZFile file = new SevenZFile(channel, fileName);
    assertEquals("SevenZFile[channel=" + channel + ", fileName=" + fileName + "]", file.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_SeekableByteChannel_Password_zkFr2() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    char[] password = "password".toCharArray();
    SevenZFile file = new SevenZFile(channel, password);
    assertEquals("SevenZFile[channel=" + channel + ", password=" + Arrays.toString(password) + "]", file.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_SeekableByteChannel_FileName_Password_clUU3() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    String fileName = "test.7z";
    char[] password = "password".toCharArray();
    SevenZFile file = new SevenZFile(channel, fileName, password);
    assertEquals("SevenZFile[channel=" + channel + ", fileName=" + fileName + ", password=" + Arrays.toString(password) + "]", file.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_SeekableByteChannel_Options_Pjxg4() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    SevenZFileOptions options = mock(SevenZFileOptions.class);
    SevenZFile file = new SevenZFile(channel, options);
    assertEquals("SevenZFile[channel=" + channel + ", options=" + options + "]", file.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_SeekableByteChannel_FileName_Options_twvc5() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    String fileName = "test.7z";
    SevenZFileOptions options = mock(SevenZFileOptions.class);
    SevenZFile file = new SevenZFile(channel, fileName, options);
    assertEquals("SevenZFile[channel=" + channel + ", fileName=" + fileName + ", options=" + options + "]", file.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_SeekableByteChannel_Password_Options_VmWa6() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    char[] password = "password".toCharArray();
    SevenZFileOptions options = mock(SevenZFileOptions.class);
    SevenZFile file = new SevenZFile(channel, password, options);
    assertEquals("SevenZFile[channel=" + channel + ", password=" + Arrays.toString(password) + ", options=" + options + "]", file.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_SeekableByteChannel_FileName_Password_Options_MYUe7() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    String fileName = "test.7z";
    char[] password = "password".toCharArray();
    SevenZFileOptions options = mock(SevenZFileOptions.class);
    SevenZFile file = new SevenZFile(channel, fileName, password, options);
    assertEquals("SevenZFile[channel=" + channel + ", fileName=" + fileName + ", password=" + Arrays.toString(password) + ", options=" + options + "]", file.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_File_jYaQ8() throws IOException {
    File file = mock(File.class);
    SevenZFile sevenZFile = new SevenZFile(file);
    assertEquals("SevenZFile[file=" + file + "]", sevenZFile.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithEmptyEntry_Lrtp3() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'t', 'e', 's', 't'});
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_BMnP0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[0]);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamForDirectory_cIXC2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[0]);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setDirectory(true);
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithCRC_Ewyh3() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[0]);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrcValue(123456789);
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithNullEntry_iZxg2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'t', 'e', 's', 't'});
    SevenZArchiveEntry entry = null;
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead1_AMSc0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[0]);
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b);
    assertEquals(10, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead2_FCwE1() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[0]);
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 0, 5);
    assertEquals(5, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead3_qBLs2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[0]);
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 5, 5);
    assertEquals(5, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead4_ppgI3() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[0]);
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 10, 0);
    assertEquals(0, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead5_gReq4() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[0]);
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 10, 10);
    assertEquals(10, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead6_joCY5() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[0]);
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 0, 10);
    assertEquals(10, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_QYjs0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    int b = sevenZFile.read();
    assertEquals(b, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithValidEntry_iQPT0_PZHR0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's'});
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("test.txt");
    entry.setSize(100);
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithInvalidEntry_jDJd1_wUEK0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[]{'p', 'a', 's', 's'});
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("test.txt");
    entry.setSize(100);
    InputStream inputStream = sevenZFile.getInputStream(null);
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_EmptyArray_Axnx0_vzVN0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"));
    byte[] b = new byte[0];
    int off = 0;
    int len = 0;
    int cnt = sevenZFile.read(b, off, len);
    assertEquals(0, cnt);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_NonEmptyArray_CvXW1_ABBM0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"));
    byte[] b = new byte[10];
    int off = 0;
    int len = 10;
    int cnt = sevenZFile.read(b, off, len);
    assertEquals(10, cnt);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithFile_Hvwv0_TyDl0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'t', 'e', 's', 't'});
    sevenZFile.close();
    assertNull(sevenZFile.getDefaultName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatisticsForCurrentEntry_MLRy0_ndVa0() {
    try {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'t', 'e', 's', 't'});
        InputStreamStatistics statistics = sevenZFile.getStatisticsForCurrentEntry();
        assertEquals(10, statistics.getCompressedCount());
        assertEquals(20, statistics.getUncompressedCount());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuilder_vBCZ0_JPBv0() {
    try {
        SevenZFile sevenZFile = SevenZFile.builder().get();
        assertNotNull(sevenZFile);
    } catch (IOException e) {
        e.printStackTrace();
    }
}
}