/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_OperandManager_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextCaseValues_xggV0() {
    int[] bcCaseCount = {1, 2, 3};
    int[] bcCaseValue = {10, 20, 30};
    int[] bcByte = {1, 2, 3};
    int[] bcShort = {1, 2, 3};
    int[] bcLocal = {1, 2, 3};
    int[] bcLabel = {1, 2, 3};
    int[] bcIntRef = {1, 2, 3};
    int[] bcFloatRef = {1, 2, 3};
    int[] bcLongRef = {1, 2, 3};
    int[] bcDoubleRef = {1, 2, 3};
    int[] bcStringRef = {1, 2, 3};
    int[] bcClassRef = {1, 2, 3};
    int[] bcFieldRef = {1, 2, 3};
    int[] bcMethodRef = {1, 2, 3};
    int[] bcIMethodRef = {1, 2, 3};
    int[] bcThisField = {1, 2, 3};
    int[] bcSuperField = {1, 2, 3};
    int[] bcThisMethod = {1, 2, 3};
    int[] bcSuperMethod = {1, 2, 3};
    int[] bcInitRef = {1, 2, 3};
    int[] wideByteCodes = {1, 2, 3};
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextCaseValues();
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisFieldRef_FxZP0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisFieldRefWithMultipleCases_wfwQ1() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[0], result);
    result = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[1], result);
    result = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[2], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLocal_GyBA0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextLocal();
    assertEquals(bcLocal[0], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLocalWithMultipleCalls_ejpA1() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextLocal();
    assertEquals(bcLocal[0], actual);
    actual = operandManager.nextLocal();
    assertEquals(bcLocal[1], actual);
    actual = operandManager.nextLocal();
    assertEquals(bcLocal[2], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextInitRef_Emcc0() {
    int[] bcCaseCount = new int[0];
    int[] bcCaseValue = new int[0];
    int[] bcByte = new int[0];
    int[] bcShort = new int[0];
    int[] bcLocal = new int[0];
    int[] bcLabel = new int[0];
    int[] bcIntRef = new int[0];
    int[] bcFloatRef = new int[0];
    int[] bcLongRef = new int[0];
    int[] bcDoubleRef = new int[0];
    int[] bcStringRef = new int[0];
    int[] bcClassRef = new int[0];
    int[] bcFieldRef = new int[0];
    int[] bcMethodRef = new int[0];
    int[] bcIMethodRef = new int[0];
    int[] bcThisField = new int[0];
    int[] bcSuperField = new int[0];
    int[] bcThisMethod = new int[0];
    int[] bcSuperMethod = new int[0];
    int[] bcInitRef = new int[0];
    int[] wideByteCodes = new int[0];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextInitRef();
    assertEquals(0, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextInitRefWithNonZeroIndex_DosH1() {
    int[] bcCaseCount = new int[0];
    int[] bcCaseValue = new int[0];
    int[] bcByte = new int[0];
    int[] bcShort = new int[0];
    int[] bcLocal = new int[0];
    int[] bcLabel = new int[0];
    int[] bcIntRef = new int[0];
    int[] bcFloatRef = new int[0];
    int[] bcLongRef = new int[0];
    int[] bcDoubleRef = new int[0];
    int[] bcStringRef = new int[0];
    int[] bcClassRef = new int[0];
    int[] bcFieldRef = new int[0];
    int[] bcMethodRef = new int[0];
    int[] bcIMethodRef = new int[0];
    int[] bcThisField = new int[0];
    int[] bcSuperField = new int[0];
    int[] bcThisMethod = new int[0];
    int[] bcSuperMethod = new int[0];
    int[] bcInitRef = new int[1];
    bcInitRef[0] = 1;
    int[] wideByteCodes = new int[0];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextInitRef();
    assertEquals(1, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextStringRef_nKip0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextStringRef();
    assertEquals(bcStringRef[0], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextStringRefWithDifferentValues_JCmo1() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextStringRef();
    assertEquals(bcStringRef[1], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextCaseCount_Xjqs0() {
    int[] bcCaseCount = {1, 2, 3};
    int[] bcCaseValue = {1, 2, 3};
    int[] bcByte = {1, 2, 3};
    int[] bcShort = {1, 2, 3};
    int[] bcLocal = {1, 2, 3};
    int[] bcLabel = {1, 2, 3};
    int[] bcIntRef = {1, 2, 3};
    int[] bcFloatRef = {1, 2, 3};
    int[] bcLongRef = {1, 2, 3};
    int[] bcDoubleRef = {1, 2, 3};
    int[] bcStringRef = {1, 2, 3};
    int[] bcClassRef = {1, 2, 3};
    int[] bcFieldRef = {1, 2, 3};
    int[] bcMethodRef = {1, 2, 3};
    int[] bcIMethodRef = {1, 2, 3};
    int[] bcThisField = {1, 2, 3};
    int[] bcSuperField = {1, 2, 3};
    int[] bcThisMethod = {1, 2, 3};
    int[] bcSuperMethod = {1, 2, 3};
    int[] bcInitRef = {1, 2, 3};
    int[] wideByteCodes = {1, 2, 3};
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextCaseCount();
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisMethodRef_zgZM0() {
    int[] bcCaseCount = {1, 2, 3};
    int[] bcCaseValue = {1, 2, 3};
    int[] bcByte = {1, 2, 3};
    int[] bcShort = {1, 2, 3};
    int[] bcLocal = {1, 2, 3};
    int[] bcLabel = {1, 2, 3};
    int[] bcIntRef = {1, 2, 3};
    int[] bcFloatRef = {1, 2, 3};
    int[] bcLongRef = {1, 2, 3};
    int[] bcDoubleRef = {1, 2, 3};
    int[] bcStringRef = {1, 2, 3};
    int[] bcClassRef = {1, 2, 3};
    int[] bcFieldRef = {1, 2, 3};
    int[] bcMethodRef = {1, 2, 3};
    int[] bcIMethodRef = {1, 2, 3};
    int[] bcThisField = {1, 2, 3};
    int[] bcSuperField = {1, 2, 3};
    int[] bcThisMethod = {1, 2, 3};
    int[] bcSuperMethod = {1, 2, 3};
    int[] bcInitRef = {1, 2, 3};
    int[] wideByteCodes = {1, 2, 3};
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextThisMethodRef();
    assertEquals(1, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisMethodRefWithEmptyArray_lbLy1() {
    int[] bcCaseCount = {};
    int[] bcCaseValue = {};
    int[] bcByte = {};
    int[] bcShort = {};
    int[] bcLocal = {};
    int[] bcLabel = {};
    int[] bcIntRef = {};
    int[] bcFloatRef = {};
    int[] bcLongRef = {};
    int[] bcDoubleRef = {};
    int[] bcStringRef = {};
    int[] bcClassRef = {};
    int[] bcFieldRef = {};
    int[] bcMethodRef = {};
    int[] bcIMethodRef = {};
    int[] bcThisField = {};
    int[] bcSuperField = {};
    int[] bcThisMethod = {};
    int[] bcSuperMethod = {};
    int[] bcInitRef = {};
    int[] wideByteCodes = {};
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextThisMethodRef();
    assertEquals(0, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSuperFieldRef_sNbU0() {
    int[] bcCaseCount = {1, 2, 3};
    int[] bcCaseValue = {4, 5, 6};
    int[] bcByte = {7, 8, 9};
    int[] bcShort = {10, 11, 12};
    int[] bcLocal = {13, 14, 15};
    int[] bcLabel = {16, 17, 18};
    int[] bcIntRef = {19, 20, 21};
    int[] bcFloatRef = {22, 23, 24};
    int[] bcLongRef = {25, 26, 27};
    int[] bcDoubleRef = {28, 29, 30};
    int[] bcStringRef = {31, 32, 33};
    int[] bcClassRef = {34, 35, 36};
    int[] bcFieldRef = {37, 38, 39};
    int[] bcMethodRef = {40, 41, 42};
    int[] bcIMethodRef = {43, 44, 45};
    int[] bcThisField = {46, 47, 48};
    int[] bcSuperField = {49, 50, 51};
    int[] bcThisMethod = {52, 53, 54};
    int[] bcSuperMethod = {55, 56, 57};
    int[] bcInitRef = {58, 59, 60};
    int[] wideByteCodes = {61, 62, 63};
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextSuperFieldRef();
    assertEquals(49, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFieldRef_LwaY0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextFieldRef();
    assertEquals(bcFieldRef[0], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFieldRefWithMultipleCases_VIqC1() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextFieldRef();
    assertEquals(bcFieldRef[0], actual);
    actual = operandManager.nextFieldRef();
    assertEquals(bcFieldRef[1], actual);
    actual = operandManager.nextFieldRef();
    assertEquals(bcFieldRef[2], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFieldRefWithWideByteCodes_nLoo2() {
    int[] bcCaseCount = new int[10];
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextMethodRef_harG0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextMethodRef();
    assertEquals(bcMethodRef[0], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextMethodRefWithDifferentValues_XYEO1() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextMethodRef();
    assertEquals(bcMethodRef[1], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextWideByteCode_OmPI0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextWideByteCode();
    assertEquals(wideByteCodes[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextDoubleRef_mBRb0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextDoubleRef();
    assertEquals(bcDoubleRef[0], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextDoubleRefWithMultipleValues_ecYD1() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextDoubleRef();
    assertEquals(bcDoubleRef[0], actual);
    actual = operandManager.nextDoubleRef();
    assertEquals(bcDoubleRef[1], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextClassRef_pLsF0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int expected = bcClassRef[0];
    int actual = operandManager.nextClassRef();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextClassRefWithMultipleValues_ANVJ1() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int expected = bcClassRef[1];
    int actual = operandManager.nextClassRef();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLongRef_WSft0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextLongRef();
    assertEquals(bcLongRef[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLongRefWithMultipleValues_ycYW1() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextLongRef();
    assertEquals(bcLongRef[0], result);
    result = operandManager.nextLongRef();
    assertEquals(bcLongRef[1], result);
    result = operandManager.nextLongRef();
    assertEquals(bcLongRef[2], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFloatRef_leEj0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextFloatRef();
    assertEquals(bcFloatRef[0], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIMethodRef_AGLE0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextIMethodRef();
    assertEquals(bcIMethodRef[0], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIMethodRefWithMultipleValues_dxAG1() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextIMethodRef();
    assertEquals(bcIMethodRef[0], actual);
    actual = operandManager.nextIMethodRef();
    assertEquals(bcIMethodRef[1], actual);
    actual = operandManager.nextIMethodRef();
    assertEquals(bcIMethodRef[2], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSuperMethodRef_VRue0() {
    int[] bcCaseCount = new int[] { 1, 2, 3 };
    int[] bcCaseValue = new int[] { 1, 2, 3 };
    int[] bcByte = new int[] { 1, 2, 3 };
    int[] bcShort = new int[] { 1, 2, 3 };
    int[] bcLocal = new int[] { 1, 2, 3 };
    int[] bcLabel = new int[] { 1, 2, 3 };
    int[] bcIntRef = new int[] { 1, 2, 3 };
    int[] bcFloatRef = new int[] { 1, 2, 3 };
    int[] bcLongRef = new int[] { 1, 2, 3 };
    int[] bcDoubleRef = new int[] { 1, 2, 3 };
    int[] bcStringRef = new int[] { 1, 2, 3 };
    int[] bcClassRef = new int[] { 1, 2, 3 };
    int[] bcFieldRef = new int[] { 1, 2, 3 };
    int[] bcMethodRef = new int[] { 1, 2, 3 };
    int[] bcIMethodRef = new int[] { 1, 2, 3 };
    int[] bcThisField = new int[] { 1, 2, 3 };
    int[] bcSuperField = new int[] { 1, 2, 3 };
    int[] bcThisMethod = new int[] { 1, 2, 3 };
    int[] bcSuperMethod = new int[] { 1, 2, 3 };
    int[] bcInitRef = new int[] { 1, 2, 3 };
    int[] wideByteCodes = new int[] { 1, 2, 3 };
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int expected = 1;
    int actual = operandManager.nextSuperMethodRef();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIntRef_wsED0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int expected = bcIntRef[0];
    int actual = operandManager.nextIntRef();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisFieldRefWithMultipleCases_wfwQ1_1() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextThisFieldRef();
    result = operandManager.nextThisFieldRef();
    result = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[0], result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisFieldRefWithMultipleCases_wfwQ1_2() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextThisFieldRef();
    result = operandManager.nextThisFieldRef();
    result = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[1], result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisFieldRefWithMultipleCases_wfwQ1_3() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextThisFieldRef();
    result = operandManager.nextThisFieldRef();
    result = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[2], result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLocalWithMultipleCalls_ejpA1_1() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextLocal();
    actual = operandManager.nextLocal();
    actual = operandManager.nextLocal();
    assertEquals(bcLocal[0], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLocalWithMultipleCalls_ejpA1_2() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextLocal();
    actual = operandManager.nextLocal();
    actual = operandManager.nextLocal();
    assertEquals(bcLocal[1], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLocalWithMultipleCalls_ejpA1_3() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextLocal();
    actual = operandManager.nextLocal();
    actual = operandManager.nextLocal();
    assertEquals(bcLocal[2], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFieldRefWithMultipleCases_VIqC1_1() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextFieldRef();
    actual = operandManager.nextFieldRef();
    actual = operandManager.nextFieldRef();
    assertEquals(bcFieldRef[0], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFieldRefWithMultipleCases_VIqC1_2() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextFieldRef();
    actual = operandManager.nextFieldRef();
    actual = operandManager.nextFieldRef();
    assertEquals(bcFieldRef[1], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFieldRefWithMultipleCases_VIqC1_3() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextFieldRef();
    actual = operandManager.nextFieldRef();
    actual = operandManager.nextFieldRef();
    assertEquals(bcFieldRef[2], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextDoubleRefWithMultipleValues_ecYD1_1() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextDoubleRef();
    actual = operandManager.nextDoubleRef();
    assertEquals(bcDoubleRef[0], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextDoubleRefWithMultipleValues_ecYD1_2() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextDoubleRef();
    actual = operandManager.nextDoubleRef();
    assertEquals(bcDoubleRef[1], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLongRefWithMultipleValues_ycYW1_1() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextLongRef();
    result = operandManager.nextLongRef();
    result = operandManager.nextLongRef();
    assertEquals(bcLongRef[0], result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLongRefWithMultipleValues_ycYW1_2() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextLongRef();
    result = operandManager.nextLongRef();
    result = operandManager.nextLongRef();
    assertEquals(bcLongRef[1], result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLongRefWithMultipleValues_ycYW1_3() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextLongRef();
    result = operandManager.nextLongRef();
    result = operandManager.nextLongRef();
    assertEquals(bcLongRef[2], result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIMethodRefWithMultipleValues_dxAG1_1() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextIMethodRef();
    actual = operandManager.nextIMethodRef();
    actual = operandManager.nextIMethodRef();
    assertEquals(bcIMethodRef[0], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIMethodRefWithMultipleValues_dxAG1_2() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextIMethodRef();
    actual = operandManager.nextIMethodRef();
    actual = operandManager.nextIMethodRef();
    assertEquals(bcIMethodRef[1], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIMethodRefWithMultipleValues_dxAG1_3() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextIMethodRef();
    actual = operandManager.nextIMethodRef();
    actual = operandManager.nextIMethodRef();
    assertEquals(bcIMethodRef[2], actual);}
}