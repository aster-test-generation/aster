/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AES256SHA256Decoder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Password_1_rhPk0() {
    byte[] password = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int numCyclesPower = 1;
    byte[] salt = new byte[] { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
    byte[] actual = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Password_2_zPbk1() {
    byte[] password = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int numCyclesPower = 2;
    byte[] salt = new byte[] { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 };
    byte[] actual = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUtf16Decode_null_cVWi0() {
    assertNull(AES256SHA256Decoder.utf16Decode(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUtf16Decode_empty_nBKU1() {
    assertArrayEquals(new byte[0], AES256SHA256Decoder.utf16Decode(new char[0]));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUtf16Decode_nonEmpty_NUiX2() {
    char[] chars = new char[] {'a', 'b', 'c'};
    byte[] expected = new byte[] {97, 98, 99};
    assertArrayEquals(expected, AES256SHA256Decoder.utf16Decode(chars));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOptionsAsProperties_nullOptions_zCgf0_pldI0() {
    AES256SHA256Decoder decoder = new AES256SHA256Decoder();
    try {
        byte[] props = decoder.getOptionsAsProperties(null);
        assertNull(props);
    } catch (IOException e) {
        e.printStackTrace();
    }
}
}