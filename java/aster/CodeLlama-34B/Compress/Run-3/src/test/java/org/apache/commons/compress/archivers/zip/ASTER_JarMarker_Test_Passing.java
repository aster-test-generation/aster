/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JarMarker_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_withData_CaYq0() {
    JarMarker jarMarker = new JarMarker();
    byte[] data = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        jarMarker.parseFromLocalFileData(data, offset, length);
        fail("Expected ZipException");
    } catch (ZipException e) {
        assertEquals("JarMarker doesn't expect any data", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_VUSF0() {
    JarMarker jarMarker = new JarMarker();
    byte[] centralDirectoryData = jarMarker.getCentralDirectoryData();
    assertEquals(ByteUtils.EMPTY_BYTE_ARRAY, centralDirectoryData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_yXpd0() {
    JarMarker jarMarker = new JarMarker();
    ZipShort headerId = jarMarker.getHeaderId();
    assertEquals(headerId.getValue(), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_EmptyByteArray_KfSG0() {
    JarMarker jarMarker = new JarMarker();
    byte[] actual = jarMarker.getLocalFileDataData();
    assertEquals(ByteUtils.EMPTY_BYTE_ARRAY, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonEmptyByteArray_ggcK1() {
    JarMarker jarMarker = new JarMarker();
    byte[] expected = new byte[] { 1, 2, 3, 4, 5 };
    byte[] actual = jarMarker.getLocalFileDataData();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_Null_UhEF2() {
    JarMarker jarMarker = new JarMarker();
    byte[] actual = jarMarker.getLocalFileDataData();
    assertNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_FEbP0() {
    JarMarker jarMarker = new JarMarker();
    ZipShort zipShort = jarMarker.getLocalFileDataLength();
    assertNotNull(zipShort);
    assertEquals(0, zipShort.getValue());
    assertEquals(0, zipShort.getBytes().length);
    assertEquals(0, zipShort.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_rMLy0() {
    JarMarker jarMarker = new JarMarker();
    ZipShort centralDirectoryLength = jarMarker.getCentralDirectoryLength();
    assertNotNull(centralDirectoryLength);
    assertEquals(0, centralDirectoryLength.getValue());
    assertEquals(0, centralDirectoryLength.getBytes().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_LineCoverage_OOTm1() {
    JarMarker jarMarker = new JarMarker();
    ZipShort centralDirectoryLength = jarMarker.getCentralDirectoryLength();
    assertNotNull(centralDirectoryLength);
    assertEquals(0, centralDirectoryLength.getValue());
    assertEquals(0, centralDirectoryLength.getBytes().length);
    assertEquals(0, centralDirectoryLength.hashCode());
    assertEquals(0, centralDirectoryLength.getBytes(0).length);
    assertEquals(0, centralDirectoryLength.getValue(new byte[0]));
    assertEquals(0, centralDirectoryLength.getValue(new byte[0], 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_FEbP0_1() {
    JarMarker jarMarker = new JarMarker();
    ZipShort zipShort = jarMarker.getLocalFileDataLength();
    assertNotNull(zipShort);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_FEbP0_2() {
    JarMarker jarMarker = new JarMarker();
    ZipShort zipShort = jarMarker.getLocalFileDataLength();
    assertEquals(0, zipShort.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_FEbP0_3() {
    JarMarker jarMarker = new JarMarker();
    ZipShort zipShort = jarMarker.getLocalFileDataLength();
    assertEquals(0, zipShort.getBytes().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_FEbP0_4() {
    JarMarker jarMarker = new JarMarker();
    ZipShort zipShort = jarMarker.getLocalFileDataLength();
    assertEquals(0, zipShort.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_rMLy0_1() {
    JarMarker jarMarker = new JarMarker();
    ZipShort centralDirectoryLength = jarMarker.getCentralDirectoryLength();
    assertNotNull(centralDirectoryLength);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_rMLy0_2() {
    JarMarker jarMarker = new JarMarker();
    ZipShort centralDirectoryLength = jarMarker.getCentralDirectoryLength();
    assertEquals(0, centralDirectoryLength.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_rMLy0_3() {
    JarMarker jarMarker = new JarMarker();
    ZipShort centralDirectoryLength = jarMarker.getCentralDirectoryLength();
    assertEquals(0, centralDirectoryLength.getBytes().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_LineCoverage_OOTm1_4() {
    JarMarker jarMarker = new JarMarker();
    ZipShort centralDirectoryLength = jarMarker.getCentralDirectoryLength();
    assertEquals(0, centralDirectoryLength.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_LineCoverage_OOTm1_5() {
    JarMarker jarMarker = new JarMarker();
    ZipShort centralDirectoryLength = jarMarker.getCentralDirectoryLength();
    assertEquals(0, centralDirectoryLength.getBytes(0).length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_LineCoverage_OOTm1_6() {
    JarMarker jarMarker = new JarMarker();
    ZipShort centralDirectoryLength = jarMarker.getCentralDirectoryLength();
    assertEquals(0, centralDirectoryLength.getValue(new byte[0]));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_LineCoverage_OOTm1_7() {
    JarMarker jarMarker = new JarMarker();
    ZipShort centralDirectoryLength = jarMarker.getCentralDirectoryLength();
    assertEquals(0, centralDirectoryLength.getValue(new byte[0], 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdWithBytes_xBNc1_KknG0() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    JarMarker jarMarker = new JarMarker();
    ZipShort headerId = jarMarker.getHeaderId();
    assertEquals(headerId.getValue(), 0x0102);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdWithOffset_zRYd2_iWPG0() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int offset = 2;
    JarMarker jarMarker = new JarMarker();
    ZipShort headerId = jarMarker.getCentralDirectoryLength();
    assertEquals(headerId.getValue(), 0x0304);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_LocalFileDataLength_IBLf4_NYJz0() {
    ZipShort localFileDataLength = new ZipShort(10);
    JarMarker jarMarker = new JarMarker();
    assertEquals(localFileDataLength, jarMarker.getLocalFileDataLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_CentralDirectoryLength_bwjz5_KPlp0() {
    ZipShort centralDirectoryLength = new ZipShort(10);
    JarMarker jarMarker = new JarMarker();
    assertEquals(centralDirectoryLength, jarMarker.getCentralDirectoryLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_NegativeOffset_eohU2_KNBU0() {
    JarMarker jarMarker = new JarMarker();
    byte[] buffer = new byte[10];
    int offset = -1;
    int length = 10;
    try {
        jarMarker.parseFromCentralDirectoryData(buffer, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_NegativeLength_mdVH3_QolO0() {
    JarMarker jarMarker = new JarMarker();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = -1;
    try {
        jarMarker.parseFromCentralDirectoryData(buffer, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_OffsetGreaterThanBufferLength_Kijf4_MKbD0() {
    JarMarker jarMarker = new JarMarker();
    byte[] buffer = new byte[10];
    int offset = 11;
    int length = 10;
    try {
        jarMarker.parseFromCentralDirectoryData(buffer, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    } catch (ZipException e) {
        fail("Unexpected ZipException caught");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_LengthGreaterThanBufferLength_sWle5_kvVe0() {
    JarMarker jarMarker = new JarMarker();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 11;
    try {
        jarMarker.parseFromCentralDirectoryData(buffer, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_OffsetAndLengthLessThanZero_lnEF7_cIGC0() {
    JarMarker jarMarker = new JarMarker();
    byte[] buffer = new byte[10];
    int offset = -1;
    int length = -1;
    try {
        jarMarker.parseFromCentralDirectoryData(buffer, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    } catch (ZipException e) {
    }
}
}