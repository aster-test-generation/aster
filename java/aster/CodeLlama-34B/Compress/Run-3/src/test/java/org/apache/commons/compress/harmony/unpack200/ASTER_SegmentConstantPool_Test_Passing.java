/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SegmentConstantPool_Test_Passing {
private static final int CP_CLASS = 7;
private final SegmentConstantPoolArrayCache arrayCache = new SegmentConstantPoolArrayCache();
private static final int CP_STRING = 0;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatches_noMatch_cQmp2() {
    String regexString = "something";
    String compareString = "anything";
    assertFalse(SegmentConstantPool.regexMatches(regexString, compareString));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatches_invalidRegex_gCmZ3() {
    String regexString = "invalid";
    String compareString = "anything";
    assertThrows(Error.class, () -> SegmentConstantPool.regexMatches(regexString, compareString));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntry_InvalidName_tlij1() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    String name = "invalid.class.name";
    ConstantPoolEntry entry = pool.getClassPoolEntry(name);
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_EmptyIndexList_NlWu0() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    String[] primaryArray = new String[] {"primary1", "primary2"};
    String[] secondaryArray = new String[] {"secondary1", "secondary2"};
    String primaryCompareString = "primary1";
    String secondaryCompareRegex = "secondary1";
    int desiredIndex = 0;
    int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
    assertEquals(-1, actualIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_NonEmptyIndexList_Gwqv1() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    String[] primaryArray = new String[] {"primary1", "primary2"};
    String[] secondaryArray = new String[] {"secondary1", "secondary2"};
    String primaryCompareString = "primary1";
    String secondaryCompareRegex = "secondary1";
    int desiredIndex = 0;
    int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
    assertEquals(0, actualIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_NonMatchingRegex_OpFw2() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    String[] primaryArray = new String[] {"primary1", "primary2"};
    String[] secondaryArray = new String[] {"secondary1", "secondary2"};
    String primaryCompareString = "primary1";
    String secondaryCompareRegex = "secondary3";
    int desiredIndex = 0;
    int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
    assertEquals(-1, actualIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_DesiredIndexOutOfBounds_JYkL4() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    String[] primaryArray = new String[] {"primary1", "primary2"};
    String[] secondaryArray = new String[] {"secondary1", "secondary2"};
    String primaryCompareString = "primary1";
    String secondaryCompareRegex = "secondary1";
    int desiredIndex = 2;
    int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
    assertEquals(-1, actualIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_withValidInput_shouldReturnExpectedIndex_UhkH0() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    String[] nameArray = new String[] {"name1", "name2", "name3"};
    String compareString = "name2";
    int desiredIndex = 1;
    int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
    assertEquals(desiredIndex, actualIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_withValidInput_shouldReturnExpectedIndex_2_TOSx1() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    String[] nameArray = new String[] {"name1", "name2", "name3"};
    String compareString = "name3";
    int desiredIndex = 2;
    int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
    assertEquals(desiredIndex, actualIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_withValidInput_shouldReturnExpectedIndex_3_WnQU2() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    String[] nameArray = new String[] {"name1", "name2", "name3"};
    String compareString = "name1";
    int desiredIndex = 0;
    int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
    assertEquals(desiredIndex, actualIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_withValidInput_shouldReturnExpectedIndex_4_pQEx3() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    String[] nameArray = new String[] {"name1", "name2", "name3"};
    String compareString = "name4";
    int desiredIndex = -1;
    int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
    assertEquals(desiredIndex, actualIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_withValidInput_shouldReturnExpectedIndex_5_coQJ4() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    String[] nameArray = new String[] {"name1", "name2", "name3"};
    String compareString = "name5";
    int desiredIndex = -1;
    int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
    assertEquals(desiredIndex, actualIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_withValidInput_shouldReturnExpectedIndex_6_VSHv5() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    String[] nameArray = new String[] {"name1", "name2", "name3"};
    String compareString = "name6";
    int desiredIndex = -1;
    int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
    assertEquals(desiredIndex, actualIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_withValidInput_shouldReturnExpectedIndex_7_uBnL6() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    String[] nameArray = new String[] {"name1", "name2", "name3"};
    String compareString = "name7";
    int desiredIndex = -1;
    int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
    assertEquals(desiredIndex, actualIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntry_ValidName_Yamq0_1() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    String name = "java.lang.String";
    ConstantPoolEntry entry = pool.getClassPoolEntry(name);
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntry_ValidName_Yamq0_2() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    String name = "java.lang.String";
    ConstantPoolEntry entry = pool.getClassPoolEntry(name);
    assertEquals(CP_CLASS, entry.getTag());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntry_ValidName_Yamq0_3() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    String name = "java.lang.String";
    ConstantPoolEntry entry = pool.getClassPoolEntry(name);
    assertEquals(0, entry.getGlobalIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatches_matchAll_rvxi0_xURk0() {
    String regexString = ".*";
    String compareString = "anything";
    assertTrue(SegmentConstantPool.regexMatches(regexString, compareString));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatches_matchInit_KtoW1_JHqF0() {
    String regexString = "init";
    String compareString = "init";
    assertTrue(SegmentConstantPool.regexMatches(regexString, compareString));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_InvalidTag_QvEE9_hLmU0() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    try {
        ConstantPoolEntry entry = pool.getClassSpecificPoolEntry(100, 0, "");
        assertNull(entry);
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
}