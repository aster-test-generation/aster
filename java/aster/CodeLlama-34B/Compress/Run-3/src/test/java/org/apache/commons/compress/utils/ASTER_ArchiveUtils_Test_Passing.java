/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_EqualBuffers_uEtg0() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
        assertTrue(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_DifferentBuffers_SRHm1() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 6};
        assertFalse(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_DifferentLengths_qoTd2() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 5, 6};
        assertFalse(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_DifferentOffsets_Pdtx3() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
        assertTrue(ArchiveUtils.isEqual(buffer1, 1, buffer1.length - 1, buffer2, 1, buffer2.length - 1, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_DifferentIgnoreTrailingNulls_pEMV4() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
        assertTrue(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_NullBuffer1_YlEA5() {
        byte[] buffer1 = null;
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
        assertFalse(ArchiveUtils.isEqual(buffer1, 0, 0, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_NullBuffer2_nZrr6() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = null;
        assertFalse(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, 0, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_NegativeOffset1_bVrp7() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
        assertFalse(ArchiveUtils.isEqual(buffer1, -1, buffer1.length, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_NegativeOffset2_bcPt8() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
        assertFalse(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, -1, buffer2.length, true));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_SameArrays_bgYw0() {
    byte[] buffer1 = new byte[] { 1, 2, 3 };
    byte[] buffer2 = new byte[] { 1, 2, 3 };
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentArrays_GZpf1() {
    byte[] buffer1 = new byte[] { 1, 2, 3 };
    byte[] buffer2 = new byte[] { 4, 5, 6 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_NullArrays_TAEa2() {
    byte[] buffer1 = null;
    byte[] buffer2 = null;
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_OneNullArray_dQFZ3() {
    byte[] buffer1 = new byte[] { 1, 2, 3 };
    byte[] buffer2 = null;
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_EmptyArrays_fcXC4() {
    byte[] buffer1 = new byte[0];
    byte[] buffer2 = new byte[0];
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLengthArrays_OlJO5() {
    byte[] buffer1 = new byte[] { 1, 2, 3 };
    byte[] buffer2 = new byte[] { 1, 2 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_OneEmptyArray_GdxF7() {
    byte[] buffer1 = new byte[0];
    byte[] buffer2 = new byte[] { 1, 2, 3 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_tWDP0() {
    String inputString = "Hello, World!";
    byte[] expectedBytes = new byte[] { 72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33 };
    byte[] actualBytes = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expectedBytes, actualBytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytesWithEmptyString_wSFM1() {
    String inputString = "";
    byte[] expectedBytes = new byte[] {};
    byte[] actualBytes = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expectedBytes, actualBytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytesWithNullString_HIbE2() {
    String inputString = null;
    byte[] expectedBytes = null;
    byte[] actualBytes = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expectedBytes, actualBytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytesWithNonAsciiCharacters_CSPV3() {
    String inputString = "Hello, !";
    byte[] expectedBytes = new byte[] { 72, 101, 108, 108, 111, 44, 32, -17, -65, -67, -17, -65, -67, 33 };
    byte[] actualBytes = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expectedBytes, actualBytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_emptyString_msox0() {
    String input = "";
    String expected = "";
    String actual = ArchiveUtils.sanitize(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_nullString_ipJg1() {
    String input = null;
    String expected = null;
    String actual = ArchiveUtils.sanitize(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_shortString_vVTE2() {
    String input = "abc";
    String expected = "abc";
    String actual = ArchiveUtils.sanitize(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_longString_YgDM3() {
    String input = "abcdefghijklmnopqrstuvwxyz";
    String expected = "abcdefghijklmnopqrstuvwxyz";
    String actual = ArchiveUtils.sanitize(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_EqualBuffers_azGu0() {
    byte[] buffer1 = new byte[10];
    byte[] buffer2 = new byte[10];
    for (int i = 0; i < 10; i++) {
        buffer1[i] = (byte) i;
        buffer2[i] = (byte) i;
    }
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_UnequalBuffers_zeKA1() {
    byte[] buffer1 = new byte[10];
    byte[] buffer2 = new byte[10];
    for (int i = 0; i < 10; i++) {
        buffer1[i] = (byte) i;
        buffer2[i] = (byte) (i + 1);
    }
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLengths_gMpD2() {
    byte[] buffer1 = new byte[10];
    byte[] buffer2 = new byte[11];
    for (int i = 0; i < 10; i++) {
        buffer1[i] = (byte) i;
        buffer2[i] = (byte) i;
    }
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_IgnoreTrailingNulls_AjIm3() {
    byte[] buffer1 = new byte[10];
    byte[] buffer2 = new byte[10];
    for (int i = 0; i < 10; i++) {
        buffer1[i] = (byte) i;
        buffer2[i] = (byte) i;
    }
    buffer2[9] = 0;
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentOffsets_YpsS4() {
    byte[] buffer1 = new byte[10];
    byte[] buffer2 = new byte[10];
    for (int i = 0; i < 10; i++) {
        buffer1[i] = (byte) i;
        buffer2[i] = (byte) i;
    }
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 5, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLengthsAndOffsets_uTOn5() {
    byte[] buffer1 = new byte[10];
    byte[] buffer2 = new byte[11];
    for (int i = 0; i < 10; i++) {
        buffer1[i] = (byte) i;
        buffer2[i] = (byte) i;
    }
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 6, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_NullBuffer1_KtIS6() {
    byte[] buffer2 = new byte[10];
    for (int i = 0; i < 10; i++) {
        buffer2[i] = (byte) i;
    }
    assertFalse(ArchiveUtils.isEqual(null, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_NullBuffer2_FkQC7() {
    byte[] buffer1 = new byte[10];
    for (int i = 0; i < 10; i++) {
        buffer1[i] = (byte) i;
    }
    assertFalse(ArchiveUtils.isEqual(buffer1, null, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_NullBuffers_pjKg8() {
    assertFalse(ArchiveUtils.isEqual(null, null, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_nullBuffer_TLoK5() {
    String expected = "hello";
    byte[] buffer = null;
    int offset = 0;
    int length = 0;
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer, offset, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayZero_emptyArray_SflZ0() {
    byte[] a = new byte[0];
    assertTrue(ArchiveUtils.isArrayZero(a, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayZero_nonZeroArray_UwpV1() {
    byte[] a = new byte[] { 1, 2, 3 };
    assertFalse(ArchiveUtils.isArrayZero(a, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayZero_zeroArray_lDXe2() {
    byte[] a = new byte[] { 0, 0, 0 };
    assertTrue(ArchiveUtils.isArrayZero(a, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_null_rySX0() {
    byte[] inputBytes = null;
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_empty_Baxi1() {
    byte[] inputBytes = new byte[0];
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_singleByte_OrNL2() {
    byte[] inputBytes = new byte[] { 65 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("A", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_multipleBytes_xAZI3() {
    byte[] inputBytes = new byte[] { 65, 66, 67 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("ABC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_invalidBytes_pIma4() {
    byte[] inputBytes = new byte[] { -1, -2, -3 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_nullChar_odoh5() {
    byte[] inputBytes = new byte[] { 0 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("\0", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_nonAsciiChar_YQzq6() {
    byte[] inputBytes = new byte[] { -128 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_asciiString_sQFc8() {
    byte[] inputBytes = new byte[] { 65, 66, 67, 68, 69 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("ABCDE", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_nonAsciiString_hBpX9() {
    byte[] inputBytes = new byte[] { -128, -127, -126, -125, -124 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_SameArrays_NtZS0() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
    byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentArrays_CGRa1() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
    byte[] buffer2 = new byte[] {6, 7, 8, 9, 10};
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_SameArraysDifferentOffsets_gKZH2() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
    byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
    assertTrue(ArchiveUtils.isEqual(buffer1, 1, buffer1.length - 1, buffer2, 1, buffer2.length - 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentArraysDifferentOffsets_ayBQ3() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
    byte[] buffer2 = new byte[] {6, 7, 8, 9, 10};
    assertFalse(ArchiveUtils.isEqual(buffer1, 1, buffer1.length - 1, buffer2, 1, buffer2.length - 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_SameArraysDifferentLengths_aMXu4() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
    byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, buffer1.length - 1, buffer2, 0, buffer2.length - 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentArraysDifferentLengths_BMkc5() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
    byte[] buffer2 = new byte[] {6, 7, 8, 9, 10};
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, buffer1.length - 1, buffer2, 0, buffer2.length - 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_SameArraysDifferentOffsetsAndLengths_htJi6() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
    byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
    assertTrue(ArchiveUtils.isEqual(buffer1, 1, buffer1.length - 2, buffer2, 1, buffer2.length - 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentArraysDifferentOffsetsAndLengths_WmHA7() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
    byte[] buffer2 = new byte[] {6, 7, 8, 9, 10};
    assertFalse(ArchiveUtils.isEqual(buffer1, 1, buffer1.length - 2, buffer2, 1, buffer2.length - 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_NullArrays_KntY8() {
    byte[] buffer1 = null;
    byte[] buffer2 = null;
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 0, buffer2, 0, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_OqsR0() {
    byte[] buffer = new byte[10];
    String expected = "hello";
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBufferWithOffset_eyKF1() {
    byte[] buffer = new byte[10];
    String expected = "hello";
    int offset = 2;
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer, offset, buffer.length - offset);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBufferWithInvalidOffset_Wahp2() {
    byte[] buffer = new byte[10];
    String expected = "hello";
    int offset = 11;
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer, offset, buffer.length - offset);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBufferWithInvalidLength_sHwC3() {
    byte[] buffer = new byte[10];
    String expected = "hello";
    int length = 11;
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer, 0, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBufferWithNullBuffer_fjVX4() {
    String expected = "hello";
    byte[] buffer = null;
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBufferWithNullExpected_QAEo5() {
    byte[] buffer = new byte[10];
    String expected = null;
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBufferWithEmptyExpected_Utog6() {
    byte[] buffer = new byte[10];
    String expected = "";
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBufferWithEmptyBuffer_JVmo7() {
    byte[] buffer = new byte[0];
    String expected = "hello";
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBufferWithNullBufferAndExpected_UqkU8() {
    byte[] buffer = null;
    String expected = null;
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBufferWithNullBufferAndEmptyExpected_KZoc9() {
    byte[] buffer = null;
    String expected = "";
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBufferWithEmptyBufferAndNullExpected_fPZq10() {
    byte[] buffer = new byte[0];
    String expected = null;
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBufferWithEmptyBufferAndEmptyExpected_IKtZ11() {
    byte[] buffer = new byte[0];
    String expected = "";
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_EmptyInput_wjXy0() {
    byte[] inputBytes = new byte[0];
    int offset = 0;
    int length = 0;
    String result = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_NonEmptyInput_GOIA1() {
    byte[] inputBytes = new byte[] { 65, 66, 67 };
    int offset = 0;
    int length = 3;
    String result = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals("ABC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_Offset_QlpK2() {
    byte[] inputBytes = new byte[] { 65, 66, 67, 68, 69 };
    int offset = 1;
    int length = 3;
    String result = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals("BCD", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_Length_nvFb3() {
    byte[] inputBytes = new byte[] { 65, 66, 67, 68, 69 };
    int offset = 0;
    int length = 2;
    String result = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals("AB", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_NegativeOffset_TsSR4() {
    byte[] inputBytes = new byte[] { 65, 66, 67, 68, 69 };
    int offset = -1;
    int length = 3;
    String result = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals("ABC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_NegativeLength_rnrH5() {
    byte[] inputBytes = new byte[] { 65, 66, 67, 68, 69 };
    int offset = 0;
    int length = -1;
    String result = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_OffsetAndLength_ZoNw6() {
    byte[] inputBytes = new byte[] { 65, 66, 67, 68, 69 };
    int offset = 1;
    int length = 2;
    String result = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals("BC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_NullInput_pton7() {
    byte[] inputBytes = null;
    int offset = 0;
    int length = 0;
    String result = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_InvalidOffset_wsfi8() {
    byte[] inputBytes = new byte[] { 65, 66, 67, 68, 69 };
    int offset = 6;
    int length = 3;
    String result = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_InvalidLength_Tong9() {
    byte[] inputBytes = new byte[] { 65, 66, 67, 68, 69 };
    int offset = 0;
    int length = 6;
    String result = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_NullBuffer1_uZle0() {
    byte[] buffer1 = null;
    int offset1 = 0;
    int length1 = 0;
    byte[] buffer2 = new byte[10];
    int offset2 = 0;
    int length2 = 10;
    assertFalse(ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_NullBuffer2_orLL1() {
    byte[] buffer1 = new byte[10];
    int offset1 = 0;
    int length1 = 10;
    byte[] buffer2 = null;
    int offset2 = 0;
    int length2 = 0;
    assertFalse(ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_DifferentLengths_JxjY2() {
    byte[] buffer1 = new byte[10];
    int offset1 = 0;
    int length1 = 10;
    byte[] buffer2 = new byte[10];
    int offset2 = 0;
    int length2 = 5;
    assertFalse(ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_SameLengths_tuPP3() {
    byte[] buffer1 = new byte[10];
    int offset1 = 0;
    int length1 = 10;
    byte[] buffer2 = new byte[10];
    int offset2 = 0;
    int length2 = 10;
    assertTrue(ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_DifferentOffsets_oFRe4() {
    byte[] buffer1 = new byte[10];
    int offset1 = 0;
    int length1 = 10;
    byte[] buffer2 = new byte[10];
    int offset2 = 5;
    int length2 = 10;
    assertFalse(ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_DifferentBuffers_RVAX6() {
    byte[] buffer1 = new byte[10];
    int offset1 = 0;
    int length1 = 10;
    byte[] buffer2 = new byte[10];
    int offset2 = 0;
    int length2 = 10;
    assertFalse(ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_SameBuffers_CJhg7() {
    byte[] buffer1 = new byte[10];
    int offset1 = 0;
    int length1 = 10;
    byte[] buffer2 = buffer1;
    int offset2 = 0;
    int length2 = 10;
    assertTrue(ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentTypes_fVMl8_lzoR0() {
    byte[] buffer1 = new byte[] { 1, 2, 3 };
    byte[] buffer2 = new byte[] { 1, 2, 3 };
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, true));
}
}