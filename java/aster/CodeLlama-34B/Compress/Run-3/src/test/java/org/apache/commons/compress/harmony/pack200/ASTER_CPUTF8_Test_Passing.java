/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPUTF8_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_RWur0() {
    CPUTF8 cputf8 = new CPUTF8("hello");
    String expected = "hello";
    String actual = cputf8.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithEmptyString_Qdxt1() {
    CPUTF8 cputf8 = new CPUTF8("");
    String expected = "";
    String actual = cputf8.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNonAsciiString_CTzN3() {
    CPUTF8 cputf8 = new CPUTF8("hello world ");
    String expected = "hello world ";
    String actual = cputf8.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithEscapeCharacters_qHRs4() {
    CPUTF8 cputf8 = new CPUTF8("hello\nworld");
    String expected = "hello\nworld";
    String actual = cputf8.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithMixedAsciiAndNonAsciiCharacters_vrTD5() {
    CPUTF8 cputf8 = new CPUTF8("hello world \n");
    String expected = "hello world \n";
    String actual = cputf8.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnderlyingStringWithUTF8StringAndNullString_xjGi6_twaO0() {
    CPUTF8 cputf8 = new CPUTF8("hello");
    String underlyingString = cputf8.toString();
    assertNotNull(underlyingString);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnderlyingStringWithUTF8StringAndEmptyString_GHhQ7_RZmG0() {
    CPUTF8 cputf8 = new CPUTF8("hello");
    String underlyingString = cputf8.toString();
    assertNotEquals("", underlyingString);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnderlyingStringWithNonUTF8StringAndNullString_YHGj8_saFm0_2() {
    CPUTF8 cputf8 = new CPUTF8("hello");
    String underlyingString = cputf8.toString();
    assertEquals("hello", underlyingString);}
}