/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentOptions_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasFieldFlagsHi_False_LLSZ1_UpHg0() {
    try {
        SegmentOptions options = new SegmentOptions(0);
        assertFalse(options.hasFieldFlagsHi());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasCPNumberCounts_false_GBIx1_aHkV0() {
    try {
        SegmentOptions options = new SegmentOptions(0);
        assertFalse(options.hasCPNumberCounts());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasClassFlagsHi_False_bgMu1_Vupg0() {
    try {
        SegmentOptions options = new SegmentOptions(0);
        assertFalse(options.hasClassFlagsHi());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasFileSizeHi_false_uGBs1_yVnc0() {
    try {
        SegmentOptions options = new SegmentOptions(0);
        assertFalse(options.hasFileSizeHi());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasSpecialFormats_false_ngFt1_cPac0() {
    try {
        SegmentOptions options = new SegmentOptions(0);
        assertFalse(options.hasSpecialFormats());
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testShouldDeflate_withoutDeflateHint_yekF1_obvw0() {
    try {
        SegmentOptions options = new SegmentOptions(0);
        assertFalse(options.shouldDeflate());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasMethodFlagsHi_False_bdfn1_AjmS0() {
    try {
        SegmentOptions options = new SegmentOptions(0);
        assertFalse(options.hasMethodFlagsHi());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasFileModtime_false_oklG1_btwX0() {
    try {
        SegmentOptions options = new SegmentOptions(0);
        assertFalse(options.hasFileModtime());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
}