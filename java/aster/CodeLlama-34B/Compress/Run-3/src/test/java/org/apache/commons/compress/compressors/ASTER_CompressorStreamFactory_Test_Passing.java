/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.io.InputStream;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CompressorStreamFactory_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZstandard_Gzhp0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String zstandard = factory.getZstandard();
    assertEquals("zstd", zstandard);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZstandardWithMemoryLimit_JAGX1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String zstandard = factory.getZstandard();
    assertEquals("zstd", zstandard);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBzip2_lFZd0() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        assertEquals("bzip2", factory.getBzip2());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_decompressUntilEOF_rGIH0_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_decompressUntilEOF_rGIH0_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertEquals(1, providers.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_decompressUntilEOF_rGIH0_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertTrue(providers.containsKey("deflate"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_decompressUntilEOF_rGIH0_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertEquals("org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream", providers.get("deflate").getClass().getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_fEWd0_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertEquals(13, compressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_fEWd0_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("GZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_fEWd0_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("BROTLI"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_fEWd0_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("BZIP2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_fEWd0_5() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("XZ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_fEWd0_6() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZMA"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_fEWd0_7() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("PACK200"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_fEWd0_8() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_fEWd0_9() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_RAW"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_fEWd0_10() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_fEWd0_11() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_fEWd0_12() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_BLOCK"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_fEWd0_13() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_fEWd0_14() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("ZSTANDARD"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_fEWd0_15() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE64"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_nlyF1_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertEquals(13, compressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_nlyF1_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("GZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_nlyF1_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("BROTLI"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_nlyF1_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("BZIP2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_nlyF1_5() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("XZ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_nlyF1_6() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZMA"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_nlyF1_7() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("PACK200"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_nlyF1_8() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_nlyF1_9() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_RAW"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_nlyF1_10() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_nlyF1_11() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_nlyF1_12() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_BLOCK"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_nlyF1_13() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_nlyF1_14() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("ZSTANDARD"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_nlyF1_15() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE64"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDefaultConstructor_JJba0_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(map);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDefaultConstructor_JJba0_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDefaultConstructor_JJba0_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("gzip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDefaultConstructor_JJba0_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("deflate"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDefaultConstructor_JJba0_5() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("bzip2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOFConstructor_jeJL1_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(map);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOFConstructor_jeJL1_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOFConstructor_jeJL1_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("gzip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOFConstructor_jeJL1_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("deflate"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOFConstructor_jeJL1_5() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("bzip2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOFAndMemoryLimitInKbConstructor_jwBe2_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(map);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOFAndMemoryLimitInKbConstructor_jwBe2_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOFAndMemoryLimitInKbConstructor_jwBe2_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("gzip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOFAndMemoryLimitInKbConstructor_jwBe2_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("deflate"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOFAndMemoryLimitInKbConstructor_jwBe2_5() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("bzip2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZ_decompressUntilEOF_RPlu0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String z = factory.getZ();
    assertEquals("Z", z);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZ_noDecompressUntilEOF_xDkI1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    String z = factory.getZ();
    assertEquals("Z", z);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4Framed_gMin0() {
    String expected = "LZ4_FRAMED";
    String actual = CompressorStreamFactory.getLZ4Framed();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4FramedWithDecompressUntilEOF_XGZb1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String expected = "LZ4_FRAMED";
    String actual = factory.getLZ4Framed();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4FramedWithMemoryLimit_ygoR2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    String expected = "LZ4_FRAMED";
    String actual = factory.getLZ4Framed();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithNullInputStream_QqDd3() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = null;
    Set<String> compressorNames = new HashSet<>();
    CompressorInputStream compressorInputStream = factory.createCompressorInputStream(in, compressorNames);
    assertNull(compressorInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzip_decompressUntilEOF_WCLn0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String gzip = factory.getGzip();
    assertEquals("gzip", gzip);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzip_noDecompressUntilEOF_qmXF1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    String gzip = factory.getGzip();
    assertEquals("gzip", gzip);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_DefaultConstructor_lFSI0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    assertFalse(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_DecompressUntilEOF_mzRv1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    assertTrue(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_DecompressUntilEOF_MemoryLimit_feya2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    assertTrue(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_NoDecompressUntilEOF_Gkbf3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    assertFalse(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_NoDecompressUntilEOF_MemoryLimit_UbVb4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    assertFalse(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_InvalidMemoryLimit_DORV7() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, -1);
    assertFalse(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_InvalidMemoryLimit_NoDecompressUntilEOF_gGLy8() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, -1);
    assertFalse(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzma_vUEN0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    String lzma = factory.getLzma();
    assertEquals("LZMA", lzma);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzmaWithDecompressUntilEOF_RsFB1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String lzma = factory.getLzma();
    assertEquals("LZMA", lzma);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyRaw_ezpz0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String snappyRaw = factory.getSnappyRaw();
    assertEquals("snappy_raw", snappyRaw);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyRawWithDecompressUntilEOFFalse_YVBM1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    String snappyRaw = factory.getSnappyRaw();
    assertEquals("snappy_raw", snappyRaw);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_tspe0_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertEquals(9, compressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_tspe0_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("GZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_tspe0_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("BZIP2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_tspe0_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("XZ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_tspe0_5() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZMA"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_tspe0_6() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("PACK200"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_tspe0_7() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_tspe0_8() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_tspe0_9() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_BLOCK"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_tspe0_10() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_tspe0_11() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("ZSTANDARD"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOFFalse_Ujco1_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertEquals(9, compressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOFFalse_Ujco1_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("GZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOFFalse_Ujco1_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("BZIP2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOFFalse_Ujco1_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("XZ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOFFalse_Ujco1_5() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZMA"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOFFalse_Ujco1_6() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("PACK200"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOFFalse_Ujco1_7() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOFFalse_Ujco1_8() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOFFalse_Ujco1_9() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_BLOCK"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOFFalse_Ujco1_10() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOFFalse_Ujco1_11() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("ZSTANDARD"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimitInKb_tliy2_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertEquals(9, compressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimitInKb_tliy2_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("GZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimitInKb_tliy2_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("BZIP2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimitInKb_tliy2_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("XZ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimitInKb_tliy2_5() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZMA"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimitInKb_tliy2_6() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("PACK200"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimitInKb_tliy2_7() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimitInKb_tliy2_8() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimitInKb_tliy2_9() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_BLOCK"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimitInKb_tliy2_10() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimitInKb_tliy2_11() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("ZSTANDARD"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF_True_bKRR0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    assertTrue(factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF_False_BxdD1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    assertFalse(factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF_Default_TaAc2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    assertFalse(factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPack200_decompressUntilEOF_vBXr0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String pack200 = factory.getPack200();
    assertEquals("PACK200", pack200);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPack200_noDecompressUntilEOF_dNYq1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    String pack200 = factory.getPack200();
    assertEquals("PACK200", pack200);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4Block_oqfT0() {
    String expected = "LZ4_BLOCK";
    String actual = CompressorStreamFactory.getLZ4Block();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4BlockWithDecompressUntilEOF_plYD1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String expected = "LZ4_BLOCK";
    String actual = factory.getLZ4Block();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4BlockWithMemoryLimit_ikWc2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    String expected = "LZ4_BLOCK";
    String actual = factory.getLZ4Block();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4BlockWithDecompressUntilEOFAndMemoryLimit_kyNX3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String expected = "LZ4_BLOCK";
    String actual = factory.getLZ4Block();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflateWithDefaultConstructor_qLiV0() {
CompressorStreamFactory factory = new CompressorStreamFactory();
String deflate = factory.getDeflate();
assertEquals("deflate", deflate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflateWithDecompressUntilEOFConstructor_FwWo1() {
CompressorStreamFactory factory = new CompressorStreamFactory(true);
String deflate = factory.getDeflate();
assertEquals("deflate", deflate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflateWithDecompressUntilEOFAndMemoryLimitInKbConstructor_Ngck2() {
CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
String deflate = factory.getDeflate();
assertEquals("deflate", deflate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflate64_euXq0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String expected = "deflate64";
    String actual = factory.getDeflate64();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflate64WithMemoryLimit_ewzF1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String expected = "deflate64";
    String actual = factory.getDeflate64();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProviders_vfet0_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorInputStreamProviders();
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProviders_vfet0_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorInputStreamProviders();
    assertTrue(map.containsKey("gzip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProviders_vfet0_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorInputStreamProviders();
    assertTrue(map.containsKey("deflate"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProviders_vfet0_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorInputStreamProviders();
    assertTrue(map.containsKey("bzip2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProvidersWithDecompressUntilEOF_ZKoz1_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorInputStreamProviders();
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProvidersWithDecompressUntilEOF_ZKoz1_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorInputStreamProviders();
    assertTrue(map.containsKey("gzip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProvidersWithDecompressUntilEOF_ZKoz1_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorInputStreamProviders();
    assertTrue(map.containsKey("deflate"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProvidersWithDecompressUntilEOF_ZKoz1_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorInputStreamProviders();
    assertTrue(map.containsKey("bzip2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProvidersWithMemoryLimit_eDMH2_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorInputStreamProviders();
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProvidersWithMemoryLimit_eDMH2_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorInputStreamProviders();
    assertTrue(map.containsKey("gzip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProvidersWithMemoryLimit_eDMH2_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorInputStreamProviders();
    assertTrue(map.containsKey("deflate"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProvidersWithMemoryLimit_eDMH2_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorInputStreamProviders();
    assertTrue(map.containsKey("bzip2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBrotli_decompressUntilEOF_true_SLOc0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String brotli = factory.getBrotli();
    assertEquals("BROTLI", brotli);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBrotli_decompressUntilEOF_false_yziO1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    String brotli = factory.getBrotli();
    assertEquals("BROTLI", brotli);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBrotli_memoryLimitInKb_1024_jOVa2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String brotli = factory.getBrotli();
    assertEquals("BROTLI", brotli);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullProvider_AIsE3_1() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, null, map);
    assertEquals(2, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullProvider_AIsE3_2() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, null, map);
    assertTrue(map.containsKey("name1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullProvider_AIsE3_3() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, null, map);
    assertTrue(map.containsKey("name2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullProvider_AIsE3_4() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, null, map);
    assertNull(map.get("name1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullProvider_AIsE3_5() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, null, map);
    assertNull(map.get("name2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullSetAndProvider_PijY5() {
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(null, null, map);
    assertTrue(map.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithInvalidInputStream_AUYF4() throws CompressorException {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    String name = "test.txt";
    InputStream in = null;
    try {
        compressorStreamFactory.createCompressorInputStream(name, in);
        fail("Expected CompressorException");
    } catch (CompressorException e) {
        assertEquals("Invalid input stream", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXz_decompressUntilEOF_YdaM0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String xz = factory.getXz();
    assertEquals("xz", xz);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXz_noDecompressUntilEOF_RtsQ1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    String xz = factory.getXz();
    assertEquals("xz", xz);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullProviderAndMap_KeMq7_ABth0() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    CompressorStreamFactory.putAll(names, null, null);
    assertTrue(names.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders_decompressUntilEOF_XdTN0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
    assertNotNull(providers);
    assertEquals(1, providers.size());
    assertTrue(providers.containsKey("deflate"));
    assertEquals("org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream", providers.get("deflate").getClass().getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_decompressUntilEOF_rGIH0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertNotNull(providers);
    assertEquals(1, providers.size());
    assertTrue(providers.containsKey("deflate"));
    assertEquals("org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream", providers.get("deflate").getClass().getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_fEWd0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertEquals(13, compressorNames.size());
    assertTrue(compressorNames.contains("GZIP"));
    assertTrue(compressorNames.contains("BROTLI"));
    assertTrue(compressorNames.contains("BZIP2"));
    assertTrue(compressorNames.contains("XZ"));
    assertTrue(compressorNames.contains("LZMA"));
    assertTrue(compressorNames.contains("PACK200"));
    assertTrue(compressorNames.contains("DEFLATE"));
    assertTrue(compressorNames.contains("SNAPPY_RAW"));
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));
    assertTrue(compressorNames.contains("Z"));
    assertTrue(compressorNames.contains("LZ4_BLOCK"));
    assertTrue(compressorNames.contains("LZ4_FRAMED"));
    assertTrue(compressorNames.contains("ZSTANDARD"));
    assertTrue(compressorNames.contains("DEFLATE64"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_nlyF1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertEquals(13, compressorNames.size());
    assertTrue(compressorNames.contains("GZIP"));
    assertTrue(compressorNames.contains("BROTLI"));
    assertTrue(compressorNames.contains("BZIP2"));
    assertTrue(compressorNames.contains("XZ"));
    assertTrue(compressorNames.contains("LZMA"));
    assertTrue(compressorNames.contains("PACK200"));
    assertTrue(compressorNames.contains("DEFLATE"));
    assertTrue(compressorNames.contains("SNAPPY_RAW"));
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));
    assertTrue(compressorNames.contains("Z"));
    assertTrue(compressorNames.contains("LZ4_BLOCK"));
    assertTrue(compressorNames.contains("LZ4_FRAMED"));
    assertTrue(compressorNames.contains("ZSTANDARD"));
    assertTrue(compressorNames.contains("DEFLATE64"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDefaultConstructor_JJba0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(map);
    assertEquals(3, map.size());
    assertTrue(map.containsKey("gzip"));
    assertTrue(map.containsKey("deflate"));
    assertTrue(map.containsKey("bzip2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOFConstructor_jeJL1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(map);
    assertEquals(3, map.size());
    assertTrue(map.containsKey("gzip"));
    assertTrue(map.containsKey("deflate"));
    assertTrue(map.containsKey("bzip2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOFAndMemoryLimitInKbConstructor_jwBe2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(map);
    assertEquals(3, map.size());
    assertTrue(map.containsKey("gzip"));
    assertTrue(map.containsKey("deflate"));
    assertTrue(map.containsKey("bzip2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzmaWithMemoryLimit_nLrW2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    String lzma = factory.getLzma();
    assertEquals("LZMA", lzma);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_tspe0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertEquals(9, compressorNames.size());
    assertTrue(compressorNames.contains("GZIP"));
    assertTrue(compressorNames.contains("BZIP2"));
    assertTrue(compressorNames.contains("XZ"));
    assertTrue(compressorNames.contains("LZMA"));
    assertTrue(compressorNames.contains("PACK200"));
    assertTrue(compressorNames.contains("DEFLATE"));
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));
    assertTrue(compressorNames.contains("LZ4_BLOCK"));
    assertTrue(compressorNames.contains("LZ4_FRAMED"));
    assertTrue(compressorNames.contains("ZSTANDARD"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOFFalse_Ujco1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertEquals(9, compressorNames.size());
    assertTrue(compressorNames.contains("GZIP"));
    assertTrue(compressorNames.contains("BZIP2"));
    assertTrue(compressorNames.contains("XZ"));
    assertTrue(compressorNames.contains("LZMA"));
    assertTrue(compressorNames.contains("PACK200"));
    assertTrue(compressorNames.contains("DEFLATE"));
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));
    assertTrue(compressorNames.contains("LZ4_BLOCK"));
    assertTrue(compressorNames.contains("LZ4_FRAMED"));
    assertTrue(compressorNames.contains("ZSTANDARD"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimitInKb_tliy2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertEquals(9, compressorNames.size());
    assertTrue(compressorNames.contains("GZIP"));
    assertTrue(compressorNames.contains("BZIP2"));
    assertTrue(compressorNames.contains("XZ"));
    assertTrue(compressorNames.contains("LZMA"));
    assertTrue(compressorNames.contains("PACK200"));
    assertTrue(compressorNames.contains("DEFLATE"));
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));
    assertTrue(compressorNames.contains("LZ4_BLOCK"));
    assertTrue(compressorNames.contains("LZ4_FRAMED"));
    assertTrue(compressorNames.contains("ZSTANDARD"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProviders_vfet0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorInputStreamProviders();
    assertEquals(3, map.size());
    assertTrue(map.containsKey("gzip"));
    assertTrue(map.containsKey("deflate"));
    assertTrue(map.containsKey("bzip2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProvidersWithDecompressUntilEOF_ZKoz1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorInputStreamProviders();
    assertEquals(3, map.size());
    assertTrue(map.containsKey("gzip"));
    assertTrue(map.containsKey("deflate"));
    assertTrue(map.containsKey("bzip2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProvidersWithMemoryLimit_eDMH2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorInputStreamProviders();
    assertEquals(3, map.size());
    assertTrue(map.containsKey("gzip"));
    assertTrue(map.containsKey("deflate"));
    assertTrue(map.containsKey("bzip2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullProvider_AIsE3() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, null, map);
    assertEquals(2, map.size());
    assertTrue(map.containsKey("name1"));
    assertTrue(map.containsKey("name2"));
    assertNull(map.get("name1"));
    assertNull(map.get("name2"));
}
}