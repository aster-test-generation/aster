/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SourceFileAttribute_Test_Passing {
SourceFileAttribute attribute = new SourceFileAttribute(new CPUTF8("test", 0));
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullName_MNTV2() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(null);
    String actual = sourceFileAttribute.toString();
    String expected = "SourceFile: null";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSourceFileAttribute_jkAp0() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(new CPUTF8("test.java"));
    assertTrue(sourceFileAttribute.isSourceFileAttribute());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSourceFileAttributeWithGlobalIndex_dtaz1() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(new CPUTF8("test.java", 1));
    assertTrue(sourceFileAttribute.isSourceFileAttribute());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSourceFileAttributeWithNullName_ixFy2() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(null);
    assertFalse(sourceFileAttribute.isSourceFileAttribute());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSourceFileAttributeWithEmptyName_jbGm3() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(new CPUTF8(""));
    assertFalse(sourceFileAttribute.isSourceFileAttribute());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSourceFileAttributeWithInvalidName_sbhR4() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(new CPUTF8("test"));
    assertFalse(sourceFileAttribute.isSourceFileAttribute());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameNull_SNWo0() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(null);
    int actual = sourceFileAttribute.hashCode();
    int expected = 1;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameNotNull_RvsY1() {
    CPUTF8 name = new CPUTF8("test");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    int actual = sourceFileAttribute.hashCode();
    int expected = 31 * 1 + name.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_OIae0_TqQQ0() {
    CPUTF8 name = new CPUTF8("test");
    SourceFileAttribute attribute = new SourceFileAttribute(name);
    assertTrue(attribute.equals(attribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectSameValues_LmTM1_ecgi0() {
    CPUTF8 name = new CPUTF8("test");
    SourceFileAttribute attribute1 = new SourceFileAttribute(name);
    SourceFileAttribute attribute2 = new SourceFileAttribute(name);
    assertTrue(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectDifferentValues_ZPFp2_tXWS0() {
    SourceFileAttribute attribute1 = new SourceFileAttribute(new CPUTF8("test1", 0));
    SourceFileAttribute attribute2 = new SourceFileAttribute(new CPUTF8("test2", 0));
    assertFalse(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_TLTy3_lEsg0() {
    CPUTF8 name = new CPUTF8("test");
    SourceFileAttribute attribute = new SourceFileAttribute(name);
    assertFalse(attribute.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_TLTy3_SMLr1() {
    CPUTF8 name = new CPUTF8("test");
    SourceFileAttribute attribute = new SourceFileAttribute(new CPUTF8("test", 0));
    assertFalse(attribute.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_NtJH4_EnvL0() {
    SourceFileAttribute attribute = new SourceFileAttribute(new CPUTF8("test"));
    assertFalse(attribute.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_HHqr0_NmCy0() {
    CPUTF8 name = new CPUTF8("SourceFile", 0);
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    String actual = sourceFileAttribute.toString();
    String expected = "SourceFile: " + name;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithEmptyName_IFMJ3_ZhqE0() {
    CPUTF8 name = new CPUTF8("", 0);
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    String actual = sourceFileAttribute.toString();
    String expected = "SourceFile: ";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullNameAndGlobalIndex_lVaX4_XqzW0() {
    CPUTF8 name = new CPUTF8(null, 1);
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    String actual = sourceFileAttribute.toString();
    String expected = "SourceFile: null (1)";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_CEye0_ZDtJ0_1() {
    CPUTF8 name = new CPUTF8("TestName", 0);
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    ClassFileEntry[] nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    assertEquals(2, nestedClassFileEntries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_CEye0_ZDtJ0_2() {
    CPUTF8 name = new CPUTF8("TestName", 0);
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    ClassFileEntry[] nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    assertEquals(name, nestedClassFileEntries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_CEye0_ZDtJ0_3() {
    CPUTF8 name = new CPUTF8("TestName", 0);
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    ClassFileEntry[] nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    assertEquals(name, nestedClassFileEntries[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_Uljh1_hxYd0_1() {
    CPUTF8 name = new CPUTF8("TestName");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    ClassFileEntry[] nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    name = null;
    sourceFileAttribute = new SourceFileAttribute(name);
    nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    name = new CPUTF8("");
    sourceFileAttribute = new SourceFileAttribute(name);
    nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    name = new CPUTF8("TestName");
    sourceFileAttribute = new SourceFileAttribute(name);
    nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    name = new CPUTF8("TestName");
    sourceFileAttribute = new SourceFileAttribute(name);
    nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    assertEquals(2, nestedClassFileEntries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_Uljh1_hxYd0_2() {
    CPUTF8 name = new CPUTF8("TestName");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    ClassFileEntry[] nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    name = null;
    sourceFileAttribute = new SourceFileAttribute(name);
    nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    name = new CPUTF8("");
    sourceFileAttribute = new SourceFileAttribute(name);
    nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    name = new CPUTF8("TestName");
    sourceFileAttribute = new SourceFileAttribute(name);
    nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    name = new CPUTF8("TestName");
    sourceFileAttribute = new SourceFileAttribute(name);
    nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    assertEquals(name, nestedClassFileEntries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_Uljh1_hxYd0_3() {
    CPUTF8 name = new CPUTF8("TestName");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    ClassFileEntry[] nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    name = null;
    sourceFileAttribute = new SourceFileAttribute(name);
    nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    name = new CPUTF8("");
    sourceFileAttribute = new SourceFileAttribute(name);
    nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    name = new CPUTF8("TestName");
    sourceFileAttribute = new SourceFileAttribute(name);
    nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    name = new CPUTF8("TestName");
    sourceFileAttribute = new SourceFileAttribute(name);
    nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    assertEquals(name, nestedClassFileEntries[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_Uljh1_hxYd0_4() {
    CPUTF8 name = new CPUTF8("TestName");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    ClassFileEntry[] nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    name = null;
    sourceFileAttribute = new SourceFileAttribute(name);
    nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    name = new CPUTF8("");
    sourceFileAttribute = new SourceFileAttribute(name);
    nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    name = new CPUTF8("TestName");
    sourceFileAttribute = new SourceFileAttribute(name);
    nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    name = new CPUTF8("TestName");
    sourceFileAttribute = new SourceFileAttribute(name);
    nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    assertEquals(0, nestedClassFileEntries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_rsYi1_hUcZ0_1() {
    CPUTF8 name = new CPUTF8("SourceFileAttribute");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    int length = sourceFileAttribute.getLength();
    name = new CPUTF8("DifferentName");
    sourceFileAttribute = new SourceFileAttribute(name);
    length = sourceFileAttribute.getLength();
    assertEquals(2, length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_rsYi1_hUcZ0_2() {
    CPUTF8 name = new CPUTF8("SourceFileAttribute");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    int length = sourceFileAttribute.getLength();
    name = new CPUTF8("DifferentName");
    sourceFileAttribute = new SourceFileAttribute(name);
    length = sourceFileAttribute.getLength();
    assertEquals(10, length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAttributeName_InvalidValue_IFxb3_EWja0() {
    try {
        SourceFileAttribute.setAttributeName(new CPUTF8("Invalid"));
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid value for attributeName", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameEmptyString_Tmoc2_VhKD0() {
    CPUTF8 name = new CPUTF8("");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    int actual = sourceFileAttribute.hashCode();
    int expected = 1;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameMixedCase_BsIO4_aYsg0() {
    CPUTF8 name = new CPUTF8("TeSt");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    int actual = sourceFileAttribute.hashCode();
    int expected = 31 * 1 + "TeSt".hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameMixedCharacters_Cypi5_FWMb0() {
    CPUTF8 name = new CPUTF8("Te$t");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    int actual = sourceFileAttribute.hashCode();
    int expected = 31 * 1 + "Te$t".hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameMixedLettersAndNumbers_NTto6_SeMA0() {
    CPUTF8 name = new CPUTF8("Te123");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    int actual = sourceFileAttribute.hashCode();
    int expected = 31 * 1 + "Te123".hashCode();
    assertEquals(expected, actual);
}
}