/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPMember_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithGlobalIndex_Ojby1() {
    CPUTF8 name = new CPUTF8("name", 1);
    CPUTF8 descriptor = new CPUTF8("descriptor", 2);
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    assertEquals(expected, member.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithFlags_WcNO2() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 1;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    assertEquals(expected, member.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_emptyAttributes_XxBB0_1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember cpMember = new CPMember(name, descriptor, 0, attributes);
    ClassFileEntry[] entries = cpMember.getNestedClassFileEntries();
    assertEquals(2, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_emptyAttributes_XxBB0_2() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember cpMember = new CPMember(name, descriptor, 0, attributes);
    ClassFileEntry[] entries = cpMember.getNestedClassFileEntries();
    assertEquals(name, entries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_emptyAttributes_XxBB0_3() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember cpMember = new CPMember(name, descriptor, 0, attributes);
    ClassFileEntry[] entries = cpMember.getNestedClassFileEntries();
    assertEquals(descriptor, entries[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithAllNull_OldC4() {
    CPMember member = new CPMember(null, null, 0, null);
    int expectedHashCode = 1;
    assertEquals(expectedHashCode, member.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_fSZd0_FHOq0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, 0, attributes);
    assertTrue(member.equals(member));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_JKQy1_tzIK0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember member1 = new CPMember(name, descriptor, 0, attributes);
    CPMember member2 = new CPMember(name, descriptor, 0, attributes);
    assertFalse(member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_voeq2_aqqS0() {
    CPUTF8 name1 = new CPUTF8("name1");
    CPUTF8 name2 = new CPUTF8("name2");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<Attribute>();
    CPMember member1 = new CPMember(name1, descriptor, 0, attributes);
    CPMember member2 = new CPMember(name2, descriptor, 0, attributes);
    assertFalse(member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentDescriptor_woeW3_gcfx0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor1 = new CPUTF8("descriptor1");
    CPUTF8 descriptor2 = new CPUTF8("descriptor2");
    List<Attribute> attributes = new ArrayList<Attribute>();
    CPMember member1 = new CPMember(name, descriptor1, 0, attributes);
    CPMember member2 = new CPMember(name, descriptor2, 0, attributes);
    assertFalse(member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentFlags_HHWL4_uyOg0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    CPMember member1 = new CPMember(name, descriptor, 1, new ArrayList<Attribute>());
    CPMember member2 = new CPMember(name, descriptor, 2, new ArrayList<Attribute>());
    assertFalse(member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_OYhu6_FSvW0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<Attribute>();
    CPMember member = new CPMember(name, descriptor, 0, attributes);
    assertFalse(member.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_NhAY0_Obsh0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    assertEquals(expected, member.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_meYH0_xvTJ0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 1;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    int expectedHashCode = 1;
    expectedHashCode = 31 * expectedHashCode + name.hashCode();
    expectedHashCode = 31 * expectedHashCode + descriptor.hashCode();
    expectedHashCode = 31 * expectedHashCode + (int) flags;
    expectedHashCode = 31 * expectedHashCode + attributes.hashCode();
    assertEquals(expectedHashCode, member.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNullName_iuQk1_YZYB0() {
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 1;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(null, descriptor, flags, attributes);
    int expectedHashCode = 1;
    expectedHashCode = 31 * expectedHashCode + descriptor.hashCode();
    expectedHashCode = 31 * expectedHashCode + (int) flags;
    expectedHashCode = 31 * expectedHashCode + attributes.hashCode();
    assertEquals(expectedHashCode, member.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNullDescriptor_qChh2_piIX0() {
    CPUTF8 name = new CPUTF8("name");
    long flags = 1;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, null, flags, attributes);
    int expectedHashCode = 1;
    expectedHashCode = 31 * expectedHashCode + name.hashCode();
    expectedHashCode = 31 * expectedHashCode + (int) flags;
    expectedHashCode = 31 * expectedHashCode + attributes.hashCode();
    assertEquals(expectedHashCode, member.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNullAttributes_TxkI3_wqqA0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 1;
    CPMember member = new CPMember(name, descriptor, flags, null);
    int expectedHashCode = 1;
    expectedHashCode = 31 * expectedHashCode + name.hashCode();
    expectedHashCode = 31 * expectedHashCode + descriptor.hashCode();
    expectedHashCode = 31 * expectedHashCode + (int) flags;
    assertEquals(expectedHashCode, member.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_emptyAttributes_XxBB0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember cpMember = new CPMember(name, descriptor, 0, attributes);
    ClassFileEntry[] entries = cpMember.getNestedClassFileEntries();
    assertEquals(2, entries.length);
    assertEquals(name, entries[0]);
    assertEquals(descriptor, entries[1]);
}
}