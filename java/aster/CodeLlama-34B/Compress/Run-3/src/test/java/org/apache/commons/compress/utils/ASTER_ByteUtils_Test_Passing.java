/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ByteUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_1_cLrC0() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int off = 0;
    int length = 4;
    long expected = 0x04030201;
    long actual = ByteUtils.fromLittleEndian(bytes, off, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_2_Yraf1() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int off = 4;
    int length = 4;
    long expected = 0x08070605;
    long actual = ByteUtils.fromLittleEndian(bytes, off, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToLittleEndian_1_YQlG0() {
    byte[] b = new byte[4];
    long value = 0x12345678;
    int off = 0;
    int length = 4;
    ByteUtils.toLittleEndian(b, value, off, length);
    assertArrayEquals(new byte[] {0x78, 0x56, 0x34, 0x12}, b);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_1_VqdD0() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    long expected = 0x0807060504030201L;
    long actual = ByteUtils.fromLittleEndian(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_2_CdZb1() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    long expected = 0x0807060504030201L;
    long actual = ByteUtils.fromLittleEndian(bytes, 0, bytes.length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_3_qyvK2() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    long expected = 0x0807060504030201L;
    long actual = ByteUtils.fromLittleEndian(bytes, 1, bytes.length - 1);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_4_eDrh3() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    long expected = 0x0807060504030201L;
    long actual = ByteUtils.fromLittleEndian(bytes, 2, bytes.length - 2);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_5_zIXp4() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    long expected = 0x0807060504030201L;
    long actual = ByteUtils.fromLittleEndian(bytes, 3, bytes.length - 3);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_6_KNiX5() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    long expected = 0x0807060504030201L;
    long actual = ByteUtils.fromLittleEndian(bytes, 4, bytes.length - 4);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_7_Anly6() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    long expected = 0x0807060504030201L;
    long actual = ByteUtils.fromLittleEndian(bytes, 5, bytes.length - 5);
    assertEquals(expected, actual);
}
}