/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import org.apache.commons.compress.archivers.ArchiveException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArjArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_validSignature_EyJq0() {
    byte[] signature = new byte[] { (byte) 0xff, (byte) 0xff };
    int length = 2;
    assertTrue(ArjArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_LQra1() {
    byte[] signature = new byte[] { (byte) 0xff, (byte) 0xff };
    int length = 1;
    assertFalse(ArjArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nullSignature_ByZv2() {
    byte[] signature = null;
    int length = 2;
    assertFalse(ArjArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_signatureWithLengthGreaterThan2_qHZB5() {
    byte[] signature = new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff };
    int length = 3;
    assertTrue(ArjArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_signatureWithZeroBytes_Bbzu7() {
    byte[] signature = new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00 };
    int length = 3;
    assertFalse(ArjArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveName_kaYO0() throws ArchiveException {
    ArjArchiveInputStream inputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    String archiveName = inputStream.getArchiveName();
    assertEquals("", archiveName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveNameWithCharsetName_WXQn1() throws ArchiveException {
    ArjArchiveInputStream inputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
    String archiveName = inputStream.getArchiveName();
    assertEquals("", archiveName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveNameWithInvalidCharsetName_sILp2() throws ArchiveException {
    ArjArchiveInputStream inputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]), "invalid_charset");
    String archiveName = inputStream.getArchiveName();
    assertEquals("", archiveName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveNameWithNullCharsetName_eCrz3() throws ArchiveException {
    ArjArchiveInputStream inputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]), null);
    String archiveName = inputStream.getArchiveName();
    assertEquals("", archiveName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveNameWithEmptyCharsetName_bVAU4() throws ArchiveException {
    ArjArchiveInputStream inputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]), "");
    String archiveName = inputStream.getArchiveName();
    assertEquals("", archiveName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveNameWithNullInputStream_iDPO5() throws ArchiveException {
    ArjArchiveInputStream inputStream = new ArjArchiveInputStream(null);
    String archiveName = inputStream.getArchiveName();
    assertEquals("", archiveName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveComment_xPmC0() throws ArchiveException {
    ArjArchiveInputStream inputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    String comment = inputStream.getArchiveComment();
    assertEquals("", comment);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_MNCa0_SecI0() throws IOException {
    ArjArchiveInputStream inputStream = null;
    try {
        inputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    } catch (ArchiveException e) {
        fail("Failed to create ArjArchiveInputStream");
    }
    ArjArchiveEntry entry = inputStream.getNextEntry();
    assertNotNull(entry);
    assertEquals("", entry.getName());
    assertEquals(0, entry.getSize());
    assertEquals(0, entry.getHostOs());
    assertEquals(0, entry.getMode());
    assertEquals(0, entry.getUnixMode());
    assertEquals(0, entry.getLastModifiedDate().getTime());
}
}