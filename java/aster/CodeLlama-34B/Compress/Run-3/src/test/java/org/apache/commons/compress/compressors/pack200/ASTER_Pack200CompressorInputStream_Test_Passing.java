/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200CompressorInputStream_Test_Passing {
public void testMarkSupported_InputStream_OHJe0() throws IOException {
}
public void testMarkSupported_File_fpEL1() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"));
    assertTrue(inputStream.markSupported());
}
public void testMarkSupported_InputStream_Properties_AhiL2() throws IOException {
    Map<String, String> properties = new HashMap<>();
    properties.put("key", "value");
}
public void testMarkSupported_File_Properties_ZBay3() throws IOException {
    Map<String, String> properties = new HashMap<>();
    properties.put("key", "value");
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), properties);
    assertTrue(inputStream.markSupported());
}
public void testMarkSupported_InputStream_Mode_oEKs4() throws IOException {
}
public void testMarkSupported_File_Mode_yWao5() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY);
    assertTrue(inputStream.markSupported());
}
public void testMarkSupported_InputStream_Mode_Properties_Jfxs6() throws IOException {
    Map<String, String> properties = new HashMap<>();
    properties.put("key", "value");
}
public void testMarkSupported_File_Mode_Properties_nFjJ7() throws IOException {
    Map<String, String> properties = new HashMap<>();
    properties.put("key", "value");
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY, properties);
    assertTrue(inputStream.markSupported());
}
public void testMarkSupported_InputStream_Mode_NullProperties_OhJf8() throws IOException {
}
public void testMarkSupported_File_Mode_NullProperties_Qjqa9() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY, null);
    assertTrue(inputStream.markSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailable_KdSX0() throws IOException {
    Pack200CompressorInputStream compressor = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY, new HashMap<String, String>());
    int available = compressor.available();
    assertTrue(available > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailableWithTempFile_YGDe1() throws IOException {
    Pack200CompressorInputStream compressor = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.TEMP_FILE, new HashMap<String, String>());
    int available = compressor.available();
    assertTrue(available > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailableWithProperties_cMDe2() throws IOException {
    Pack200CompressorInputStream compressor = new Pack200CompressorInputStream(new File("test.txt"), new HashMap<String, String>());
    int available = compressor.available();
    assertTrue(available > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailableWithFileAndStrategy_DvOR7() throws IOException {
    Pack200CompressorInputStream compressor = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.TEMP_FILE);
    int available = compressor.available();
    assertTrue(available > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_NullSignature_PJho2() {
    byte[] signature = null;
    int length = 4;
    assertFalse(Pack200CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_EmptySignature_yzIA3() {
    byte[] signature = new byte[] {};
    int length = 0;
    assertFalse(Pack200CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkip_FXCI0() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY, new HashMap<String, String>());
    long count = 10;
    long skipped = inputStream.skip(count);
    assertEquals(count, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithTempFile_YrZl1() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.TEMP_FILE, new HashMap<String, String>());
    long count = 10;
    long skipped = inputStream.skip(count);
    assertEquals(count, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithProperties_iBYQ2() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), new HashMap<String, String>());
    long count = 10;
    long skipped = inputStream.skip(count);
    assertEquals(count, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithFileAndStrategy_FXlG6() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.TEMP_FILE);
    long count = 10;
    long skipped = inputStream.skip(count);
    assertEquals(count, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMark_WithFile_vpgx6_iOnd0() throws IOException {
    File file = new File("test.txt");
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(file);
    inputStream.mark(10);
    assertEquals(10, inputStream.markSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMark_WithFileAndProperties_eGSa7_NFfH0() throws IOException {
    File file = new File("test.txt");
    Map<String, String> properties = new HashMap<>();
    properties.put("key", "value");
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(file, properties);
    inputStream.mark(10);
    assertEquals(10, inputStream.markSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMark_WithFileAndStrategy_EgRR8_kuaU0() throws IOException {
    File file = new File("test.txt");
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(file, Pack200Strategy.IN_MEMORY);
    inputStream.mark(10);
    assertEquals(10, inputStream.markSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ValidSignature_YgsX0_oIqk0() {
    byte[] signature = new byte[] { (byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE };
    int length = 4;
    assertTrue(Pack200CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidSignature_NJLi1_MLlp0() {
    byte[] signature = new byte[] { (byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE };
    int length = 3;
    assertFalse(Pack200CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_TempFile_bGQQ1_pSDQ0() throws IOException {
    File tempFile = File.createTempFile("test", ".tmp");
    Pack200CompressorInputStream stream = new Pack200CompressorInputStream(tempFile, Pack200Strategy.TEMP_FILE, new HashMap<String, String>());
    stream.reset();
    assertEquals(0, stream.available());
    tempFile.delete();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_File_ZkUC3_plun0() throws IOException {
    File file = File.createTempFile("test", ".tmp");
    Pack200CompressorInputStream stream = new Pack200CompressorInputStream(file);
    stream.reset();
    assertEquals(0, stream.available());
    file.delete();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_FileAndStrategy_KfSd6_VNpv0() throws IOException {
    File file = File.createTempFile("test", ".tmp");
    Pack200CompressorInputStream stream = new Pack200CompressorInputStream(file, Pack200Strategy.TEMP_FILE);
    stream.reset();
    assertEquals(0, stream.available());
    file.delete();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_FileAndProperties_DbrU7_djEm0() throws IOException {
    File file = File.createTempFile("test", ".tmp");
    Map<String, String> properties = new HashMap<String, String>();
    Pack200CompressorInputStream stream = new Pack200CompressorInputStream(file, properties);
    stream.reset();
    assertEquals(0, stream.available());
    file.delete();
}
}