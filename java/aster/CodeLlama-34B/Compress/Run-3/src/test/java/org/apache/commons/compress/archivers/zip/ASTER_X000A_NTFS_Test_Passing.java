/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipException;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X000A_NTFS_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_dDHo0_1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger modifyTime = x000A_NTFS.getModifyTime();
    assertNotNull(modifyTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_dDHo0_2() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger modifyTime = x000A_NTFS.getModifyTime();
    assertEquals(0, modifyTime.getLongValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_sCJC0_1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] centralDirectoryData = x000A_NTFS.getCentralDirectoryData();
    assertNotNull(centralDirectoryData);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_sCJC0_2() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] centralDirectoryData = x000A_NTFS.getCentralDirectoryData();
    assertEquals(100, centralDirectoryData.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_sStF0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    FileTime fileTime = FileTime.fromMillis(1000);
    x000A_NTFS.setAccessFileTime(fileTime);
    assertEquals(new ZipEightByteInteger(FileTimes.toNtfsTime(fileTime)), x000A_NTFS.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_Null_NvRh1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setAccessFileTime(null);
    assertNull(x000A_NTFS.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_KYSK0_1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort localFileDataLength = x000A_NTFS.getLocalFileDataLength();
    assertEquals(4 + 2 + 2 + 3 * 8, localFileDataLength.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_KYSK0_2() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort localFileDataLength = x000A_NTFS.getLocalFileDataLength();
    assertEquals(4 + 2 + 2 + 3 * 8, localFileDataLength.getBytes().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_KYSK0_3() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort localFileDataLength = x000A_NTFS.getLocalFileDataLength();
    assertEquals(4 + 2 + 2 + 3 * 8, localFileDataLength.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_KYSK0_4() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort localFileDataLength = x000A_NTFS.getLocalFileDataLength();
    assertEquals(4 + 2 + 2 + 3 * 8, ZipShort.getValue(localFileDataLength.getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_KYSK0_5() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort localFileDataLength = x000A_NTFS.getLocalFileDataLength();
    assertEquals(4 + 2 + 2 + 3 * 8, ZipShort.getValue(localFileDataLength.getBytes(), 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_qrOK0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort centralDirectoryLength = x000A_NTFS.getCentralDirectoryLength();
    assertEquals(centralDirectoryLength.getValue(), x000A_NTFS.getLocalFileDataLength().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLengthCoverage_RSOk1_2() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort centralDirectoryLength = x000A_NTFS.getCentralDirectoryLength();
    assertEquals(centralDirectoryLength.getBytes(), x000A_NTFS.getLocalFileDataLength().getBytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLengthCoverage_RSOk1_3() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort centralDirectoryLength = x000A_NTFS.getCentralDirectoryLength();
    assertEquals(centralDirectoryLength.hashCode(), x000A_NTFS.getLocalFileDataLength().hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLengthCoverage_RSOk1_4() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort centralDirectoryLength = x000A_NTFS.getCentralDirectoryLength();
    assertEquals(centralDirectoryLength.getValue(new byte[0]), x000A_NTFS.getLocalFileDataLength().getValue(new byte[0]));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLengthCoverage_RSOk1_5() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort centralDirectoryLength = x000A_NTFS.getCentralDirectoryLength();
    assertEquals(centralDirectoryLength.getBytes(0), x000A_NTFS.getLocalFileDataLength().getBytes(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLengthCoverage_RSOk1_6() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort centralDirectoryLength = x000A_NTFS.getCentralDirectoryLength();
    assertEquals(centralDirectoryLength.getValue(new byte[0], 0), x000A_NTFS.getLocalFileDataLength().getValue(new byte[0], 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_Null_GyNN0() {
    X000A_NTFS ntfs = new X000A_NTFS();
    ntfs.setCreateTime(null);
    assertEquals(ZipEightByteInteger.ZERO, ntfs.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_NonNull_JMiB1() {
    X000A_NTFS ntfs = new X000A_NTFS();
    ZipEightByteInteger t = new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 });
    ntfs.setCreateTime(t);
    assertEquals(t, ntfs.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_UBFK0() {
    X000A_NTFS x = new X000A_NTFS();
    assertTrue(x.equals(x));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_wntZ1() {
    X000A_NTFS x = new X000A_NTFS();
    X000A_NTFS y = new X000A_NTFS();
    assertFalse(x.equals(y));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_knNj2() {
    X000A_NTFS x = new X000A_NTFS();
    assertFalse(x.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_PWfX3() {
    X000A_NTFS x = new X000A_NTFS();
    Object y = new Object();
    assertFalse(x.equals(y));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameValues_reJp4() {
    X000A_NTFS x = new X000A_NTFS();
    X000A_NTFS y = new X000A_NTFS();
    y.setModifyTime(x.getModifyTime());
    y.setAccessTime(x.getAccessTime());
    y.setCreateTime(x.getCreateTime());
    assertTrue(x.equals(y));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ValidData_JDOd0_1() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 };
    int offset = 0;
    int length = data.length;
    x000A_NTFS.parseFromLocalFileData(data, offset, length);
    assertEquals(0x01020304, x000A_NTFS.getModifyTime().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ValidData_JDOd0_2() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 };
    int offset = 0;
    int length = data.length;
    x000A_NTFS.parseFromLocalFileData(data, offset, length);
    assertEquals(0x05060708, x000A_NTFS.getAccessTime().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ValidData_JDOd0_3() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 };
    int offset = 0;
    int length = data.length;
    x000A_NTFS.parseFromLocalFileData(data, offset, length);
    assertEquals(0x090A0B0C, x000A_NTFS.getCreateTime().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_EmptyData_PiYv2_1() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] data = new byte[] {};
    int offset = 0;
    int length = data.length;
    x000A_NTFS.parseFromLocalFileData(data, offset, length);
    assertEquals(0x01020304, x000A_NTFS.getModifyTime().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_EmptyData_PiYv2_2() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] data = new byte[] {};
    int offset = 0;
    int length = data.length;
    x000A_NTFS.parseFromLocalFileData(data, offset, length);
    assertEquals(0x05060708, x000A_NTFS.getAccessTime().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_EmptyData_PiYv2_3() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] data = new byte[] {};
    int offset = 0;
    int length = data.length;
    x000A_NTFS.parseFromLocalFileData(data, offset, length);
    assertEquals(0x090A0B0C, x000A_NTFS.getCreateTime().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTime_gKKO0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date d = new Date();
        x000A_NTFS.setCreateJavaTime(d);
        Assertions.assertEquals(new ZipEightByteInteger(FileTimes.toNtfsTime(d)), x000A_NTFS.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTimeWithNull_xDdT1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        x000A_NTFS.setCreateJavaTime(null);
        Assertions.assertNull(x000A_NTFS.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTimeWithInvalidDate_UvFs2() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date d = new Date(0);
        x000A_NTFS.setCreateJavaTime(d);
        Assertions.assertEquals(new ZipEightByteInteger(FileTimes.toNtfsTime(d)), x000A_NTFS.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTimeWithValidDate_CiAi3() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date d = new Date(1000000000);
        x000A_NTFS.setCreateJavaTime(d);
        Assertions.assertEquals(new ZipEightByteInteger(FileTimes.toNtfsTime(d)), x000A_NTFS.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTimeWithMaxDate_ehjm4() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date d = new Date(Long.MAX_VALUE);
        x000A_NTFS.setCreateJavaTime(d);
        Assertions.assertEquals(new ZipEightByteInteger(FileTimes.toNtfsTime(d)), x000A_NTFS.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTimeWithMinDate_KlnN5() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date d = new Date(Long.MIN_VALUE);
        x000A_NTFS.setCreateJavaTime(d);
        Assertions.assertEquals(new ZipEightByteInteger(FileTimes.toNtfsTime(d)), x000A_NTFS.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTimeWithFutureDate_Qnkf6() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date d = new Date(System.currentTimeMillis() + 1000000000);
        x000A_NTFS.setCreateJavaTime(d);
        Assertions.assertEquals(new ZipEightByteInteger(FileTimes.toNtfsTime(d)), x000A_NTFS.getCreateTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTimeWithNull_NopY1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setModifyJavaTime(null);
    assertNull(x000A_NTFS.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_eoso0_1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort headerId = x000A_NTFS.getHeaderId();
    assertEquals(headerId.getValue(), 0x000A);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_eoso0_2() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort headerId = x000A_NTFS.getHeaderId();
    assertEquals(headerId.getBytes(), new byte[] { 0x00, 0x0A });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_tAmy0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    String expected = "0x000A Zip Extra Field: Modify:[null] Access:[null] Create:[null] ";
    String actual = x000A_NTFS.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessJavaTime_ovgu0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date expected = new Date(1000000000000L);
        Date actual = x000A_NTFS.getAccessJavaTime();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessJavaTimeWithNull_xlLj1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date expected = null;
        Date actual = x000A_NTFS.getAccessJavaTime();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessJavaTimeWithZero_PKiL2() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date expected = new Date(0L);
        Date actual = x000A_NTFS.getAccessJavaTime();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_Null_zzOX0() {
    X000A_NTFS ntfs = new X000A_NTFS();
    ntfs.setAccessTime(null);
    assertEquals(ZipEightByteInteger.ZERO, ntfs.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_NonNull_KUYH1() {
    X000A_NTFS ntfs = new X000A_NTFS();
    ZipEightByteInteger t = new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 });
    ntfs.setAccessTime(t);
    assertEquals(t, ntfs.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateJavaTime_ZHkE0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date expected = new Date(1980, 1, 1);
    Date actual = x000A_NTFS.getCreateJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateJavaTimeCoverage_GvIm1_2() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date expected = new Date(1980, 1, 1);
    Date actual = x000A_NTFS.getCreateJavaTime();
    assertEquals(expected, x000A_NTFS.getCreateJavaTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_Null_LaTd0() {
    X000A_NTFS ntfs = new X000A_NTFS();
    ntfs.setModifyTime(null);
    assertEquals(ZipEightByteInteger.ZERO, ntfs.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_NonNull_fixh1() {
    X000A_NTFS ntfs = new X000A_NTFS();
    ZipEightByteInteger t = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    ntfs.setModifyTime(t);
    assertEquals(t, ntfs.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_Zero_ihyU2() {
    X000A_NTFS ntfs = new X000A_NTFS();
    ZipEightByteInteger t = new ZipEightByteInteger(0);
    ntfs.setModifyTime(t);
    assertEquals(t, ntfs.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_Negative_ZlqF3() {
    X000A_NTFS ntfs = new X000A_NTFS();
    ZipEightByteInteger t = new ZipEightByteInteger(-1);
    ntfs.setModifyTime(t);
    assertEquals(t, ntfs.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_MaxValue_ouDZ4() {
    X000A_NTFS ntfs = new X000A_NTFS();
    ZipEightByteInteger t = new ZipEightByteInteger(Long.MAX_VALUE);
    ntfs.setModifyTime(t);
    assertEquals(t, ntfs.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_MinValue_JUNZ5() {
    X000A_NTFS ntfs = new X000A_NTFS();
    ZipEightByteInteger t = new ZipEightByteInteger(Long.MIN_VALUE);
    ntfs.setModifyTime(t);
    assertEquals(t, ntfs.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModifyJavaTime_dLDq0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date expected = new Date(1234567890);
        Date actual = x000A_NTFS.getModifyJavaTime();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModifyJavaTimeWithNullModifyTime_FxXf1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date expected = null;
        Date actual = x000A_NTFS.getModifyJavaTime();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModifyJavaTimeWithInvalidModifyTime_gwxm2() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date expected = new Date(1234567890);
        Date actual = x000A_NTFS.getModifyJavaTime();
        assertNotEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithNull_louz1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setModifyFileTime(null);
    assertNull(x000A_NTFS.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_accessTimeNotNull_lpnb1_dJFV0() {
    X000A_NTFS x = new X000A_NTFS();
    x.setAccessJavaTime(new Date());
    int expected = -123 ^ Integer.rotateLeft(x.getAccessTime().hashCode(), 11);
    assertEquals(expected, x.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateFileTime_zAqb0_lUHA0_1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    FileTime fileTime = x000A_NTFS.getCreateFileTime();
    assertNotNull(fileTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateFileTime_zAqb0_lUHA0_2() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    FileTime fileTime = x000A_NTFS.getCreateFileTime();
    assertEquals(fileTime.toMillis(), 1000000000000L);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyFileTimeWithNullModifyTime_EOJU1_IKDh0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setModifyTime(null);
    FileTime fileTime = x000A_NTFS.getModifyFileTime();
    assertNull(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithModifyFileTime_GjLH1_oqeP0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setModifyFileTime(FileTime.fromMillis(System.currentTimeMillis()));
    String expected = "0x000A Zip Extra Field: Modify:[non-null] Access:[null] Create:[null] ";
    String actual = x000A_NTFS.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithAccessFileTime_ekwj2_yRhA0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setAccessFileTime(FileTime.fromMillis(System.currentTimeMillis()));
    String expected = "0x000A Zip Extra Field: Modify:[null] Access:[non-null] Create:[null] ";
    String actual = x000A_NTFS.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithCreateFileTime_QByg3_awwJ0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setCreateFileTime(FileTime.fromMillis(System.currentTimeMillis()));
    String expected = "0x000A Zip Extra Field: Modify:[null] Access:[null] Create:[non-null] ";
    String actual = x000A_NTFS.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithAllFileTimes_isCG4_tYoh0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setModifyFileTime(FileTime.fromMillis(System.currentTimeMillis()));
    x000A_NTFS.setAccessFileTime(FileTime.fromMillis(System.currentTimeMillis()));
    x000A_NTFS.setCreateFileTime(FileTime.fromMillis(System.currentTimeMillis()));
    String expected = "0x000A Zip Extra Field: Modify:[non-null] Access:[non-null] Create:[non-null] ";
    String actual = x000A_NTFS.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTime_VNMc0_KiaQ0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    FileTime fileTime = FileTime.fromMillis(1000);
    x000A_NTFS.setModifyFileTime(fileTime);
    assertEquals(fileTime, x000A_NTFS.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_dDHo0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger modifyTime = x000A_NTFS.getModifyTime();
    assertNotNull(modifyTime);
    assertEquals(0, modifyTime.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_sCJC0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] centralDirectoryData = x000A_NTFS.getCentralDirectoryData();
    assertNotNull(centralDirectoryData);
    assertEquals(100, centralDirectoryData.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_KYSK0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort localFileDataLength = x000A_NTFS.getLocalFileDataLength();
    assertEquals(4 + 2 + 2 + 3 * 8, localFileDataLength.getValue());
    assertEquals(4 + 2 + 2 + 3 * 8, localFileDataLength.getBytes().length);
    assertEquals(4 + 2 + 2 + 3 * 8, localFileDataLength.hashCode());
    assertEquals(4 + 2 + 2 + 3 * 8, ZipShort.getValue(localFileDataLength.getBytes()));
    assertEquals(4 + 2 + 2 + 3 * 8, ZipShort.getValue(localFileDataLength.getBytes(), 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLengthCoverage_RSOk1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort centralDirectoryLength = x000A_NTFS.getCentralDirectoryLength();
    assertEquals(centralDirectoryLength.getValue(), x000A_NTFS.getLocalFileDataLength().getValue());
    assertEquals(centralDirectoryLength.getBytes(), x000A_NTFS.getLocalFileDataLength().getBytes());
    assertEquals(centralDirectoryLength.hashCode(), x000A_NTFS.getLocalFileDataLength().hashCode());
    assertEquals(centralDirectoryLength.getValue(new byte[0]), x000A_NTFS.getLocalFileDataLength().getValue(new byte[0]));
    assertEquals(centralDirectoryLength.getBytes(0), x000A_NTFS.getLocalFileDataLength().getBytes(0));
    assertEquals(centralDirectoryLength.getValue(new byte[0], 0), x000A_NTFS.getLocalFileDataLength().getValue(new byte[0], 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ValidData_JDOd0() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 };
    int offset = 0;
    int length = data.length;
    x000A_NTFS.parseFromLocalFileData(data, offset, length);
    assertEquals(0x01020304, x000A_NTFS.getModifyTime().getValue());
    assertEquals(0x05060708, x000A_NTFS.getAccessTime().getValue());
    assertEquals(0x090A0B0C, x000A_NTFS.getCreateTime().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_EmptyData_PiYv2() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] data = new byte[] {};
    int offset = 0;
    int length = data.length;
    x000A_NTFS.parseFromLocalFileData(data, offset, length);
    assertEquals(0x01020304, x000A_NTFS.getModifyTime().getValue());
    assertEquals(0x05060708, x000A_NTFS.getAccessTime().getValue());
    assertEquals(0x090A0B0C, x000A_NTFS.getCreateTime().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_eoso0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort headerId = x000A_NTFS.getHeaderId();
    assertEquals(headerId.getValue(), 0x000A);
    assertEquals(headerId.getBytes(), new byte[] { 0x00, 0x0A });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateJavaTimeCoverage_GvIm1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date expected = new Date(1980, 1, 1);
    Date actual = x000A_NTFS.getCreateJavaTime();
    assertEquals(expected, actual);
    assertEquals(expected, x000A_NTFS.getCreateJavaTime());
}
}