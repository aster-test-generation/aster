/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.io.IOException;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveEntry_Test_Passing {
private String userName;
private File file;
private String groupId;
private static final int LF_GNUTYPE_LONGLINK = 1255;
public void testGetLastModifiedDate_MGgM0() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Date lastModifiedDate = entry.getLastModifiedDate();
assertNotNull(lastModifiedDate);
}
public void testGetLastModifiedDateWithPreserveAbsolutePath_MjZf1() {
}
public void testGetLastModifiedDateWithoutPreserveAbsolutePath_tTSj2() {
}
public void testGetLastModifiedDateWithPath_tpMY3() {
}
public void testGetLastModifiedDateWithPathAndPreserveAbsolutePath_TjCv4() {
}
public void testGetLastModifiedDateWithPathAndoutPreserveAbsolutePath_rRSG5() {
}
public void testGetLastModifiedDateWithName_hthw6() {
TarArchiveEntry entry = new TarArchiveEntry("test.txt");
Date lastModifiedDate = entry.getLastModifiedDate();
assertNotNull(lastModifiedDate);
}
public void testGetLastModifiedDateWithNameAndPreserveAbsolutePath_SzRB7() {
TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
Date lastModifiedDate = entry.getLastModifiedDate();
assertNotNull(lastModifiedDate);
}
public void testGetLastModifiedDateWithNameAndoutPreserveAbsolutePath_eseJ8() {
TarArchiveEntry entry = new TarArchiveEntry("test.txt", false);
Date lastModifiedDate = entry.getLastModifiedDate();
assertNotNull(lastModifiedDate);
}
public void testGetLastModifiedDateWithHeaderBuf_tTEp9() {
TarArchiveEntry entry = new TarArchiveEntry(new byte[0]);
Date lastModifiedDate = entry.getLastModifiedDate();
assertNotNull(lastModifiedDate);
}
public void testSetCreationTime_iDNA0() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time = FileTime.fromMillis(System.currentTimeMillis());
entry.setCreationTime(time);
assertEquals(time, entry.getCreationTime());
}
public void testSetCreationTimeWithNull_LenV1() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
entry.setCreationTime(null);
assertNull(entry.getCreationTime());
}
public void testSetCreationTimeWithInvalidTime_PaHn2() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time = FileTime.fromMillis(System.currentTimeMillis() - 10000000000L);
entry.setCreationTime(time);
assertEquals(time, entry.getCreationTime());
}
public void testSetCreationTimeWithFutureTime_fEnK3() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time = FileTime.fromMillis(System.currentTimeMillis() + 10000000000L);
entry.setCreationTime(time);
assertEquals(time, entry.getCreationTime());
}
public void testSetCreationTimeWithPastTime_QqUF4() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time = FileTime.fromMillis(System.currentTimeMillis() - 10000000000L);
entry.setCreationTime(time);
assertEquals(time, entry.getCreationTime());
}
public void testSetCreationTimeWithCurrentTime_XURF5() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time = FileTime.fromMillis(System.currentTimeMillis());
entry.setCreationTime(time);
assertEquals(time, entry.getCreationTime());
}
public void testSetCreationTimeWithNegativeTime_pVvk6() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time = FileTime.fromMillis(-10000000000L);
entry.setCreationTime(time);
assertEquals(time, entry.getCreationTime());
}
public void testSetCreationTimeWithZeroTime_WVPQ7() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time = FileTime.fromMillis(0);
entry.setCreationTime(time);
assertEquals(time, entry.getCreationTime());
}
public void testSetCreationTimeWithMaxTime_YXee8() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time = FileTime.fromMillis(Long.MAX_VALUE);
entry.setCreationTime(time);
assertEquals(time, entry.getCreationTime());
}
public void testSetCreationTimeWithMinTime_PwDA9() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time = FileTime.fromMillis(Long.MIN_VALUE);
entry.setCreationTime(time);
assertEquals(time, entry.getCreationTime());
}
public void testSetIds_efFk0() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setIds(1000, 1000);
assertEquals(1000, entry.getUserId());
assertEquals(1000, entry.getGroupId());
}
public void testSetIdsWithInvalidUserId_OVHJ1() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
try {
entry.setIds(-1, 1000);
fail("Expected IllegalArgumentException");
} catch (IllegalArgumentException e) {
assertEquals("Invalid user ID: -1", e.getMessage());
}
}
public void testSetIdsWithInvalidGroupId_jqaB2() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
try {
entry.setIds(1000, -1);
fail("Expected IllegalArgumentException");
} catch (IllegalArgumentException e) {
assertEquals("Invalid group ID: -1", e.getMessage());
}
}
public void testSetIdsWithZeroUserId_FUgu3() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setIds(0, 1000);
assertEquals(0, entry.getUserId());
assertEquals(1000, entry.getGroupId());
}
public void testSetIdsWithZeroGroupId_eyFT4() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setIds(1000, 0);
assertEquals(1000, entry.getUserId());
assertEquals(0, entry.getGroupId());
}
public void testSetIdsWithMaxUserId_SyVK5() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setIds(Integer.MAX_VALUE, 1000);
assertEquals(Integer.MAX_VALUE, entry.getUserId());
assertEquals(1000, entry.getGroupId());
}
public void testSetIdsWithMaxGroupId_ytjt6() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setIds(1000, Integer.MAX_VALUE);
assertEquals(1000, entry.getUserId());
assertEquals(Integer.MAX_VALUE, entry.getGroupId());
}
public void testSetIdsWithMinUserId_WKav7() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setIds(Integer.MIN_VALUE, 1000);
assertEquals(Integer.MIN_VALUE, entry.getUserId());
assertEquals(1000, entry.getGroupId());
}
public void testSetIdsWithMinGroupId_Sida8() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setIds(1000, Integer.MIN_VALUE);
assertEquals(1000, entry.getUserId());
assertEquals(Integer.MIN_VALUE, entry.getGroupId());
}
public void testSetIdsWithNullUserId_aGfv9() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
try {
fail("Expected NullPointerException");
} catch (NullPointerException e) {
assertEquals("User ID cannot be null", e.getMessage());
}
}
public void testSetIdsWithNullGroupId_RgYd10() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
try {
fail("Expected NullPointerException");
} catch (NullPointerException e) {
assertEquals("Group ID cannot be null", e.getMessage());
}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_ickE0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setMode(0755);
    assertEquals(0755, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTime_KOtL0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Date time = new Date();
    entry.setModTime(time);
    assertEquals(FileTimes.toFileTime(time), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithName_GMhG8() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    Date time = new Date();
    entry.setModTime(time);
    assertEquals(FileTimes.toFileTime(time), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithNameAndPreserveAbsolutePath_GbRv9() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    Date time = new Date();
    entry.setModTime(time);
    assertEquals(FileTimes.toFileTime(time), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTime_kgNm0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Date modTime = entry.getModTime();
    assertNotNull(modTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTimeWithName_Skjb6() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    Date modTime = entry.getModTime();
    assertNotNull(modTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTimeWithNameAndPreserveAbsolutePath_IwlZ7() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    Date modTime = entry.getModTime();
    assertNotNull(modTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTimeWithFile_MRYw8() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    Date modTime = entry.getModTime();
    assertNotNull(modTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMajor_1_ZkJl0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals(0, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMajor_2_oLCd1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals(0, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMajor_6_ceRY5() {
    String name = "test.txt";
    byte linkFlag = 0;
    TarArchiveEntry entry = new TarArchiveEntry(name, linkFlag);
    assertEquals(0, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMajor_7_mOvw6() {
    String name = "test.txt";
    byte linkFlag = 0;
    TarArchiveEntry entry = new TarArchiveEntry(name, linkFlag, false);
    assertEquals(0, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMajor_9_PNNi8() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name);
    assertEquals(0, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMajor_10_BNIu9() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name, false);
    assertEquals(0, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader1_Yfgs0() throws IOException {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.parseTarHeader(new byte[1024]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader2_vbgV1() throws IOException {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"), "test.txt");
    tarArchiveEntry.parseTarHeader(new byte[1024]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader6_iONF5() throws IOException {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt", (byte) 0);
    tarArchiveEntry.parseTarHeader(new byte[1024]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader7_yjWK6() throws IOException {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt", (byte) 0, true);
    tarArchiveEntry.parseTarHeader(new byte[1024]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader9_hDBH8() throws IOException {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt");
    tarArchiveEntry.parseTarHeader(new byte[1024]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader10_pxZi9() throws IOException {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt", true);
    tarArchiveEntry.parseTarHeader(new byte[1024]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderWithNameAndLinkFlag_tMKX5() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0);
    tarArchiveEntry.parseTarHeader(new byte[0]);
    assertEquals("name", tarArchiveEntry.getName());
    assertEquals((byte) 0, tarArchiveEntry.getLinkFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderWithName_mwYW7() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name");
    tarArchiveEntry.parseTarHeader(new byte[0]);
    assertEquals("name", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderWithHeaderBuf_joMY6() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[10]);
    tarArchiveEntry.parseTarHeader(new byte[10]);
    assertEquals(tarArchiveEntry.getName(), "fileName");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderWithNameAndLinkFlag_HpfQ7() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0);
    tarArchiveEntry.parseTarHeader(new byte[10]);
    assertEquals(tarArchiveEntry.getName(), "fileName");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderWithNameAndLinkFlagAndPreserveAbsolutePath_zJjR8() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0, false);
    tarArchiveEntry.parseTarHeader(new byte[10]);
    assertEquals(tarArchiveEntry.getName(), "fileName");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_jkmf0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    byte[] header = new byte[512];
    tarArchiveEntry.parseTarHeader(header);
    assertEquals("test.txt", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderWithEncoding_EZRF1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    byte[] header = new byte[1024];
    try {
        tarArchiveEntry.parseTarHeader(header, TarUtils.DEFAULT_ENCODING);
    } catch (IOException e) {
        e.printStackTrace();
    }
    assertEquals("test.tar", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xData_KToj0() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "1024");
    headers.put(TarGnuSparseKeys.NAME, "test.txt");
    entry.fillGNUSparse0xData(headers);
    assertEquals(1024, entry.getRealSize());
    assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithoutName_hPBu1() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "1024");
    entry.fillGNUSparse0xData(headers);
    assertEquals(1024, entry.getRealSize());
    assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLinkFlag1_FSzD0() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"), "test.txt");
byte linkFlag = tarArchiveEntry.getLinkFlag();
assertEquals(linkFlag, (byte) 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_yetl0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_wSnd1() {
    TarArchiveEntry entry1 = new TarArchiveEntry(new File("test1.txt"));
    TarArchiveEntry entry2 = new TarArchiveEntry(new File("test2.txt"));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_TKxm3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertFalse(entry.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongGroupIdWithName_zvFa5() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt");
        long groupId = entry.getLongGroupId();
        assertEquals(0, groupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongGroupIdWithNameAndPreserveAbsolutePath_AHyB6() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
        long groupId = entry.getLongGroupId();
        assertEquals(0, groupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongGroupIdWithFile_hbrO7() throws IOException {
        File file = new File("test.txt");
        TarArchiveEntry entry = new TarArchiveEntry(file);
        long groupId = entry.getLongGroupId();
        assertEquals(0, groupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevMajor_valid_bPMH0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDevMajor(10);
    assertEquals(10, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevMajor_tooLarge_sjfY3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.setDevMajor(Integer.MAX_VALUE + 1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDataOffset_ValidOffset_VBJl0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    entry.setDataOffset(100);
    assertEquals(100, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_ysRK0() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
        tarArchiveEntry.setName("test.txt");
        assertEquals("test.txt", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithAbsolutePath_GViP1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
        tarArchiveEntry.setName("/absolute/path/test.txt");
        assertEquals("absolute/path/test.txt", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithWindowsDriveLetter_QkYd2() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
        tarArchiveEntry.setName("C:/windows/path/test.txt");
        assertEquals("windows/path/test.txt", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithNetwarePath_ypyL3() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
        tarArchiveEntry.setName("\\\\netware\\path\\test.txt");
        assertEquals("netware/path/test.txt", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithMultipleSlashes_ganD4() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
        tarArchiveEntry.setName("////test.txt");
        assertEquals("test.txt", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithNull_YqAx5() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
        tarArchiveEntry.setName(null);
        assertNull(tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithEmptyString_AnnN6() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
        tarArchiveEntry.setName("");
        assertEquals("", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithNonAsciiCharacters_jixx8() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
        tarArchiveEntry.setName(".txt");
        assertEquals(".txt", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithNonAsciiCharactersAndAbsolutePath_jvwE9() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
        tarArchiveEntry.setName("/absolute/path/.txt");
        assertEquals("absolute/path/.txt", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithNonAsciiCharactersAndWindowsDriveLetter_TLcC10() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
        tarArchiveEntry.setName("C:/windows/path/.txt");
        assertEquals("windows/path/.txt", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithNonAsciiCharactersAndNetwarePath_oVsB11() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
        tarArchiveEntry.setName("\\\\netware\\path\\.txt");
        assertEquals("netware/path/.txt", tarArchiveEntry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_ValidSize_PBNh0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setSize(100);
    assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_ZeroSize_yfvB2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setSize(0);
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_MaxSize_iQom3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setSize(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_MinSize_rDIr4() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setSize(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_NonMultipleOf512_IrVp5() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setSize(513);
    assertEquals(513, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDescendent_1_RJCz0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    TarArchiveEntry desc = new TarArchiveEntry(new File("test.txt"));
    assertTrue(entry.isDescendent(desc));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDescendent_2_xbeU1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    TarArchiveEntry desc = new TarArchiveEntry(new File("test/test.txt"));
    assertTrue(entry.isDescendent(desc));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDescendent_3_Rnha2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    TarArchiveEntry desc = new TarArchiveEntry(new File("test/test.txt"));
    assertFalse(entry.isDescendent(desc));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatusChangeTime1_NGvG0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    FileTime statusChangeTime = entry.getStatusChangeTime();
    assertNotNull(statusChangeTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatusChangeTime2_iStk1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    FileTime statusChangeTime = entry.getStatusChangeTime();
    assertNotNull(statusChangeTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatusChangeTime6_zVLW5() {
    String name = "test.txt";
    byte linkFlag = 0;
    TarArchiveEntry entry = new TarArchiveEntry(name, linkFlag);
    FileTime statusChangeTime = entry.getStatusChangeTime();
    assertNotNull(statusChangeTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatusChangeTime7_dSBk6() {
    String name = "test.txt";
    byte linkFlag = 0;
    boolean preserveAbsolutePath = true;
    TarArchiveEntry entry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
    FileTime statusChangeTime = entry.getStatusChangeTime();
    assertNotNull(statusChangeTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatusChangeTime9_CfOW8() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name);
    FileTime statusChangeTime = entry.getStatusChangeTime();
    assertNotNull(statusChangeTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatusChangeTime10_SpdV9() {
    String name = "test.txt";
    boolean preserveAbsolutePath = true;
    TarArchiveEntry entry = new TarArchiveEntry(name, preserveAbsolutePath);
    FileTime statusChangeTime = entry.getStatusChangeTime();
    assertNotNull(statusChangeTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_fgGB0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithName_aVxY4() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNameAndPreserveAbsolutePath_iCeI5() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNameAndLinkFlag_EfDA6() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0);
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNameAndLinkFlagAndPreserveAbsolutePath_VvpE7() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0, true);
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithHeaderBuf_hlfk8() {
    byte[] headerBuf = new byte[10];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeaders1_bOOD0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> extraPaxHeaders = tarArchiveEntry.getExtraPaxHeaders();
    assertEquals(0, extraPaxHeaders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeaders2_jEeo1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    Map<String, String> extraPaxHeaders = tarArchiveEntry.getExtraPaxHeaders();
    assertEquals(0, extraPaxHeaders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserName_glCT0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setUserName("test");
    assertEquals("test", entry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserNameNull_xbUg1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setUserName(null);
    assertNull(entry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserNameEmpty_vpAo2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setUserName("");
    assertEquals("", entry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserNameTooLong_qpCv3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setUserName("this_is_a_very_long_user_name_that_is_longer_than_the_maximum_allowed_length");
    assertEquals("this_is_a_very_long_user_name_that_is_longer_than_the_maximum_allowed_length", entry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserNameInvalidChars_WTyT4() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setUserName("test\u0000");
    assertEquals("test\u0000", entry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserNameReservedWordDifferentCase_hUCA6() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setUserName("Test");
    assertEquals("Test", entry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastAccessTime1_NytB0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    FileTime lastAccessTime = entry.getLastAccessTime();
    assertNotNull(lastAccessTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastAccessTime2_ODcA1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    FileTime lastAccessTime = entry.getLastAccessTime();
    assertNotNull(lastAccessTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastAccessTime6_Lrux5() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name);
    FileTime lastAccessTime = entry.getLastAccessTime();
    assertNotNull(lastAccessTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastAccessTime7_kkto6() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name, true);
    FileTime lastAccessTime = entry.getLastAccessTime();
    assertNotNull(lastAccessTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastAccessTime9_rruS8() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    FileTime lastAccessTime = entry.getLastAccessTime();
    assertNotNull(lastAccessTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupName_zfhz0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("group");
    assertEquals("group", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithEmptyString_zNLc1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("");
    assertEquals("", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithNull_NdbO2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName(null);
    assertNull(entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithLongString_QPIf3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("this is a very long group name");
    assertEquals("this is a very long group name", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithInvalidCharacters_FsRo4() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("group\u0000");
    assertEquals("group\u0000", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithValidCharacters_Cmcc5() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("group123");
    assertEquals("group123", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithDifferentCasing_smmK6() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("Group");
    assertEquals("Group", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithDifferentCasingAndInvalidCharacters_SavT7() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("Group\u0000");
    assertEquals("Group\u0000", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithDifferentCasingAndValidCharacters_PZpX8() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("Group123");
    assertEquals("Group123", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithDifferentCasingAndLongString_DFkb9() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("This is a very long group name");
    assertEquals("This is a very long group name", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_groupName_htBI0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames("user", "group");
    assertEquals("user", tarArchiveEntry.getUserName());
    assertEquals("group", tarArchiveEntry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_null_efbO1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames("user", null);
    assertEquals("user", tarArchiveEntry.getUserName());
    assertNull(tarArchiveEntry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_null_groupName_dPTO2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames(null, "group");
    assertNull(tarArchiveEntry.getUserName());
    assertEquals("group", tarArchiveEntry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_null_null_kjEQ3() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames(null, null);
    assertNull(tarArchiveEntry.getUserName());
    assertNull(tarArchiveEntry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_emptyString_groupName_emZV4() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames("", "group");
    assertEquals("", tarArchiveEntry.getUserName());
    assertEquals("group", tarArchiveEntry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_emptyString_SHhZ5() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames("user", "");
    assertEquals("user", tarArchiveEntry.getUserName());
    assertEquals("", tarArchiveEntry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_emptyString_emptyString_fukQ6() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames("", "");
    assertEquals("", tarArchiveEntry.getUserName());
    assertEquals("", tarArchiveEntry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupName1_exUK0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals("test", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsExtendedWithName_WTLM5() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt");
        assertFalse(entry.isExtended());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsExtendedWithNameAndPreserveAbsolutePath_jvvW6() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt", false);
        assertFalse(entry.isExtended());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsExtendedWithFile_TAzO7() throws IOException {
        File file = new File("test.txt");
        TarArchiveEntry entry = new TarArchiveEntry(file);
        assertFalse(entry.isExtended());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsExtendedWithLinkFlag_nJPn11() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0);
        assertFalse(entry.isExtended());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsExtendedWithLinkFlagAndPreserveAbsolutePath_tOgI12() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0, false);
        assertFalse(entry.isExtended());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_QRvK0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertTrue(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse1xData_NullHeaderData_AMoU2() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.fillGNUSparse1xData(null);
    assertFalse(entry.isPaxGNUSparse());
    assertFalse(entry.isPaxGNU1XSparse());
    assertEquals("test.txt", entry.getName());
    assertEquals(0, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEntryHeader1_AAHQ0() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    byte[] outbuf = new byte[1024];
    entry.writeEntryHeader(outbuf);
    assertArrayEquals(new byte[1024], outbuf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEntryHeader2_hYJZ1() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    byte[] outbuf = new byte[1024];
    entry.writeEntryHeader(outbuf, TarUtils.DEFAULT_ENCODING, false);
    assertArrayEquals(new byte[1024], outbuf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEntryHeader3_evUM2() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    byte[] outbuf = new byte[1024];
    entry.writeEntryHeader(outbuf, TarUtils.FALLBACK_ENCODING, false);
    assertArrayEquals(new byte[1024], outbuf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEntryHeader4_nokF3() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    byte[] outbuf = new byte[1024];
    entry.writeEntryHeader(outbuf, TarUtils.DEFAULT_ENCODING, true);
    assertArrayEquals(new byte[1024], outbuf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEntryHeader5_PxXv4() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    byte[] outbuf = new byte[1024];
    entry.writeEntryHeader(outbuf, TarUtils.FALLBACK_ENCODING, true);
    assertArrayEquals(new byte[1024], outbuf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEntryHeader11_WFqj10() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    byte[] outbuf = new byte[1024];
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName1_QfCC0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeader_XQZv0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    String extraPaxHeader = tarArchiveEntry.getExtraPaxHeader("test");
    assertEquals("test", extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeaderWithNullName_dIrb1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    String extraPaxHeader = tarArchiveEntry.getExtraPaxHeader(null);
    assertNull(extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeaderWithEmptyName_vJPs2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    String extraPaxHeader = tarArchiveEntry.getExtraPaxHeader("");
    assertNull(extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeaderWithNonExistentName_HcOn3() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    String extraPaxHeader = tarArchiveEntry.getExtraPaxHeader("nonExistent");
    assertNull(extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeaderWithDifferentName_gBBi4() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    String extraPaxHeader = tarArchiveEntry.getExtraPaxHeader("different");
    assertNull(extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeaderWithDifferentCase_ClZT6() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    String extraPaxHeader = tarArchiveEntry.getExtraPaxHeader("TEST");
    assertNull(extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_nameEndsWithSlash_ucSF2() {
    TarArchiveEntry entry = new TarArchiveEntry("test/directory/");
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_notDirectory_lCcr5() {
    TarArchiveEntry entry = new TarArchiveEntry("test/file");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStatusChangeTime_PMHH0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setStatusChangeTime(FileTime.fromMillis(1000));
    assertEquals(FileTime.fromMillis(1000), entry.getStatusChangeTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStatusChangeTimeWithNull_qBcr1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setStatusChangeTime(null);
    assertNull(entry.getStatusChangeTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStatusChangeTimeWithInvalidTime_jRdr2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.setStatusChangeTime(FileTime.fromMillis(-1));
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid status change time", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStatusChangeTimeWithInvalidTime2_XHjp3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.setStatusChangeTime(FileTime.fromMillis(Long.MAX_VALUE));
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid status change time", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStatusChangeTimeWithInvalidTime3_pifx4() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.setStatusChangeTime(FileTime.fromMillis(Long.MIN_VALUE));
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid status change time", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStatusChangeTimeWithInvalidTime4_RiJX5() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.setStatusChangeTime(FileTime.fromMillis(Long.MAX_VALUE - 1));
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid status change time", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStatusChangeTimeWithInvalidTime5_UXWk6() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.setStatusChangeTime(FileTime.fromMillis(Long.MIN_VALUE + 1));
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid status change time", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStatusChangeTimeWithInvalidTime6_yuoB7() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.setStatusChangeTime(FileTime.fromMillis(Long.MAX_VALUE - 2));
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid status change time", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStatusChangeTimeWithInvalidTime7_nouO8() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.setStatusChangeTime(FileTime.fromMillis(Long.MIN_VALUE + 2));
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid status change time", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLinkName1_HtOn0() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file.txt"));
tarArchiveEntry.setLinkName("link");
assertEquals("link", tarArchiveEntry.getLinkName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLinkName2_HdGs1() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file.txt"), "file.txt");
tarArchiveEntry.setLinkName("link");
assertEquals("link", tarArchiveEntry.getLinkName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLinkName1_MSZd0() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
assertEquals("test.txt", entry.getLinkName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLinkName2_gkka1() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
assertEquals("test.txt", entry.getLinkName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedTime_1_VjHI0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    FileTime lastModifiedTime = entry.getLastModifiedTime();
    assertNotNull(lastModifiedTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedTime_2_tmts1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    FileTime lastModifiedTime = entry.getLastModifiedTime();
    assertNotNull(lastModifiedTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_StringConstructor_drwN5() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_StringConstructor_PreserveAbsolutePath_zyON6() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name, true);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_FileConstructor_rdeD7() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSparseHeaders1_QMdx0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    List<TarArchiveStructSparse> sparseHeaders = entry.getSparseHeaders();
    assertEquals(0, sparseHeaders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSparseHeaders2_neSl1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"), "test.txt");
    List<TarArchiveStructSparse> sparseHeaders = entry.getSparseHeaders();
    assertEquals(0, sparseHeaders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_1_PJPW0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId_joRS0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"), "test.txt");
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithName_tzHZ5() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithNameAndPreserveAbsolutePath_XqVR6() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithFile_prFY7() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithFileAndFileName_ysrA8() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithLinkFlag_mNeZ11() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0);
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithLinkFlagAndPreserveAbsolutePath_vkyy12() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0, true);
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithHeaderBufAndEncodingAndDataOffset_yYPM15() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTime_SpyT0() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setModTime(time);
    assertEquals(time, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithPreserveAbsolutePath_TfBo1() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setModTime(time);
    assertEquals(time, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithFile_uoWa6() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setModTime(time);
    assertEquals(time, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithFileAndFileName_kbAL7() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file, "test.txt");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setModTime(time);
    assertEquals(time, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserId_cTaa0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"), "test.txt");
    assertEquals(0, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserIdWithName_iHUo7() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    assertEquals(0, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserIdWithNameAndPreserveAbsolutePath_QAEJ8() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    assertEquals(0, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserIdWithFile_iist9() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    assertEquals(0, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPaxGNU1XSparse_1_Qfkf0() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"), "test.txt");
    assertFalse(entry.isPaxGNU1XSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupId_lxAG0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(1000);
    assertEquals(1000, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithNegativeValue_kMFx1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(-1000);
    assertEquals(-1000, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithZeroValue_iEeK2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(0);
    assertEquals(0, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithMaxValue_ufXO3() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithMinValue_GxvC4() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTime_oYUh0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setModTime(1000000000);
    assertEquals(1000000000, entry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithName_ukFx8() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    entry.setModTime(1000000000);
    assertEquals(1000000000, entry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTime_gNar0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    FileTime creationTime = entry.getCreationTime();
    assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithName_czGB6() {
    TarArchiveEntry entry = new TarArchiveEntry("test.tar");
    FileTime creationTime = entry.getCreationTime();
    assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithNameAndPreserveAbsolutePath_UALx7() {
    TarArchiveEntry entry = new TarArchiveEntry("test.tar", true);
    FileTime creationTime = entry.getCreationTime();
    assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithFile_cItu8() {
    File file = new File("test.tar");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    FileTime creationTime = entry.getCreationTime();
    assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_dfRE0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithNonZeroSize_VyGo1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    entry.setSize(10);
    assertEquals(10, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithNegativeSize_FYzj2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    entry.setSize(-10);
    assertEquals(-10, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithMaxValue_OelV3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    entry.setSize(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithMinValue_Btxx4() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    entry.setSize(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevMinor_Valid_yCTB0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDevMinor(10);
    assertEquals(10, entry.getDevMinor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_Yegz2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentSize_BWXU4() {
    TarArchiveEntry entry1 = new TarArchiveEntry(new File("test1.txt"));
    TarArchiveEntry entry2 = new TarArchiveEntry(new File("test2.txt"));
    entry1.setSize(100);
    entry2.setSize(200);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentModTime_hQtS5() {
    TarArchiveEntry entry1 = new TarArchiveEntry(new File("test1.txt"));
    TarArchiveEntry entry2 = new TarArchiveEntry(new File("test2.txt"));
    entry1.setModTime(new Date(1000));
    entry2.setModTime(new Date(2000));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLinkName_lKwd7() {
    TarArchiveEntry entry1 = new TarArchiveEntry(new File("test1.txt"));
    TarArchiveEntry entry2 = new TarArchiveEntry(new File("test2.txt"));
    entry1.setLinkName("link1");
    entry2.setLinkName("link2");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentUserId_rufD8() {
    TarArchiveEntry entry1 = new TarArchiveEntry(new File("test1.txt"));
    TarArchiveEntry entry2 = new TarArchiveEntry(new File("test2.txt"));
    entry1.setUserId(1);
    entry2.setUserId(2);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentGroupId_WaOs9() {
    TarArchiveEntry entry1 = new TarArchiveEntry(new File("test1.txt"));
    TarArchiveEntry entry2 = new TarArchiveEntry(new File("test2.txt"));
    entry1.setGroupId(1);
    entry2.setGroupId(2);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentDevMajor_cgFQ10() {
    TarArchiveEntry entry1 = new TarArchiveEntry(new File("test1.txt"));
    TarArchiveEntry entry2 = new TarArchiveEntry(new File("test2.txt"));
    entry1.setDevMajor(1);
    entry2.setDevMajor(2);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRealSize_NotSparse_GIIz0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    entry.setSize(100);
    assertEquals(100, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRealSize_NegativeSize_bmjI3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    entry.setSize(-100);
    assertEquals(0, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRealSize_ZeroSize_WaDD4() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    entry.setSize(0);
    assertEquals(0, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRealSize_LargeSize_CIih5() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    entry.setSize(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMinor_FileConstructor_zfoQ1() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    assertEquals(0, entry.getDevMinor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMinor_HeaderBufConstructor_Dqrx3() {
    byte[] headerBuf = new byte[1024];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    assertEquals(0, entry.getDevMinor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMinor_NameConstructor_inYy7() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name);
    assertEquals(0, entry.getDevMinor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMinor_NameConstructorWithPreserveAbsolutePath_zCkB8() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name, true);
    assertEquals(0, entry.getDevMinor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserName1_LIJJ0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals("test", entry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserName2_WglQ1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test");
    assertEquals("test", entry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderWithNameAndLinkFlag_tMKX5_1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0);
    tarArchiveEntry.parseTarHeader(new byte[0]);
    assertEquals("name", tarArchiveEntry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderWithNameAndLinkFlag_tMKX5_2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0);
    tarArchiveEntry.parseTarHeader(new byte[0]);
    assertEquals((byte) 0, tarArchiveEntry.getLinkFlag());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xData_KToj0_1() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "1024");
    headers.put(TarGnuSparseKeys.NAME, "test.txt");
    entry.fillGNUSparse0xData(headers);
    assertEquals(1024, entry.getRealSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xData_KToj0_2() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "1024");
    headers.put(TarGnuSparseKeys.NAME, "test.txt");
    entry.fillGNUSparse0xData(headers);
    assertEquals("test.txt", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithoutName_hPBu1_1() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "1024");
    entry.fillGNUSparse0xData(headers);
    assertEquals(1024, entry.getRealSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithoutName_hPBu1_2() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "1024");
    entry.fillGNUSparse0xData(headers);
    assertEquals("test.txt", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_groupName_htBI0_1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames("user", "group");
    assertEquals("user", tarArchiveEntry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_groupName_htBI0_2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames("user", "group");
    assertEquals("group", tarArchiveEntry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_null_efbO1_1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames("user", null);
    assertEquals("user", tarArchiveEntry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_null_efbO1_2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames("user", null);
    assertNull(tarArchiveEntry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_null_groupName_dPTO2_1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames(null, "group");
    assertNull(tarArchiveEntry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_null_groupName_dPTO2_2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames(null, "group");
    assertEquals("group", tarArchiveEntry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_null_null_kjEQ3_1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames(null, null);
    assertNull(tarArchiveEntry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_null_null_kjEQ3_2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames(null, null);
    assertNull(tarArchiveEntry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_emptyString_groupName_emZV4_1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames("", "group");
    assertEquals("", tarArchiveEntry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_emptyString_groupName_emZV4_2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames("", "group");
    assertEquals("group", tarArchiveEntry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_emptyString_SHhZ5_1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames("user", "");
    assertEquals("user", tarArchiveEntry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_emptyString_SHhZ5_2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames("user", "");
    assertEquals("", tarArchiveEntry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_emptyString_emptyString_fukQ6_1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames("", "");
    assertEquals("", tarArchiveEntry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_emptyString_emptyString_fukQ6_2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setNames("", "");
    assertEquals("", tarArchiveEntry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse1xData_NullHeaderData_AMoU2_1() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.fillGNUSparse1xData(null);
    assertFalse(entry.isPaxGNUSparse());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse1xData_NullHeaderData_AMoU2_2() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.fillGNUSparse1xData(null);
    assertFalse(entry.isPaxGNU1XSparse());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse1xData_NullHeaderData_AMoU2_3() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.fillGNUSparse1xData(null);
    assertEquals("test.txt", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse1xData_NullHeaderData_AMoU2_4() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.fillGNUSparse1xData(null);
    assertEquals(0, entry.getRealSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithHeaderBuf_aYZB4_QybW0() {
    byte[] headerBuf = new byte[0];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    Date time = new Date();
    entry.setModTime(time);
    assertEquals(FileTimes.toFileTime(time), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFIFO_LinkFlag_Other_Invalid_siIp10_ixOM0() {
    byte LF_OTHER_INVALID = 0x00;
    TarArchiveEntry entry = new TarArchiveEntry(new byte[] { LF_OTHER_INVALID });
    assertFalse(entry.isFIFO());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsGlobalPaxHeader_False_roqR1_BLaH0() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 });
    assertFalse(entry.isGlobalPaxHeader());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLinkFlag2_JtMr1_Jsbt0() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
byte linkFlag = tarArchiveEntry.getLinkFlag();
assertEquals(linkFlag, (byte) 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastAccessTime8_BMgp7_zJJm0() {
    byte[] headerBuf = new byte[1024];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    FileTime lastAccessTime = entry.getLastAccessTime();
    assertNotNull(lastAccessTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFile_nonNullFile_wgxu1_REss0() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    assertEquals(file, entry.getFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFile_withHeaderBuf_KclU3_fIVr0() {
    byte[] headerBuf = new byte[10];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    assertNull(entry.getFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFile_withName_MLWN7_myby0() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name);
    assertNull(entry.getFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupName2_oYqS1_ZMfX0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals("test", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName2_eAIZ1_ivEm0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeaderWithDifferentLinkOption_mSaV8_XPuO0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    String extraPaxHeader = tarArchiveEntry.getExtraPaxHeader("test");
    assertNull(extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_2_aNzA1_FERb0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_3_KpGM2_GaSm0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertTrue(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_7_QzwP6_DgbK0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertTrue(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillStarSparseData_tykb0_RPgH0_1() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> headers = new HashMap<>();
    headers.put("SCHILY.realsize", "100");
    entry.fillStarSparseData(headers);
    assertTrue(entry.isStarSparse());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillStarSparseData_tykb0_RPgH0_2() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> headers = new HashMap<>();
    headers.put("SCHILY.realsize", "100");
    entry.fillStarSparseData(headers);
    assertEquals(100, entry.getRealSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillStarSparseDataWithoutRealSize_hZTf1_Yedj0_1() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> headers = new HashMap<>();
    entry.fillStarSparseData(headers);
    assertFalse(entry.isStarSparse());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillStarSparseDataWithoutRealSize_hZTf1_Yedj0_2() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> headers = new HashMap<>();
    entry.fillStarSparseData(headers);
    assertEquals(0, entry.getRealSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPaxGNU1XSparse_3_wFTW2_gASX0() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"), "test.txt");
    assertTrue(entry.isPaxGNU1XSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPaxGNU1XSparse_6_aMZZ5_dxWr0() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    assertFalse(entry.isPaxGNU1XSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPaxGNU1XSparse_9_QhBQ8_dBhI0() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    assertTrue(entry.isPaxGNU1XSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setGroupId(String groupId) {
        this.groupId = groupId;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithNull_dXPo5_Ngxy0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    entry.setSize(0L);
    assertNull(entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithEmptyString_SROg6_FSaV0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    entry.setSize(0);
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRealSize_NullSize_oFnn2_Fysh0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    entry.setSize(0L);
    assertEquals(0, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMinor_DefaultConstructor_uOLB0_BhWB0() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
    assertEquals(0, entry.getDevMinor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderWithEncoding_xEod1_CNuH0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    byte[] header = new byte[512];
    try {
        tarArchiveEntry.parseTarHeader(header, TarUtils.DEFAULT_ENCODING);
    } catch (IOException e) {
        e.printStackTrace();
    }
    assertEquals("test.txt", tarArchiveEntry.getName());
}
}