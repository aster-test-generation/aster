/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveStructSparse_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOffset_wJZW0() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(100, 200);
    long offset = tarArchiveStructSparse.getOffset();
    assertEquals(100, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_htqA0() {
    TarArchiveStructSparse obj = new TarArchiveStructSparse(10, 20);
    assertTrue(obj.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectSameValues_LOPC1() {
    TarArchiveStructSparse obj1 = new TarArchiveStructSparse(10, 20);
    TarArchiveStructSparse obj2 = new TarArchiveStructSparse(10, 20);
    assertTrue(obj1.equals(obj2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectDifferentValues_iZzE2() {
    TarArchiveStructSparse obj1 = new TarArchiveStructSparse(10, 20);
    TarArchiveStructSparse obj2 = new TarArchiveStructSparse(20, 30);
    assertFalse(obj1.equals(obj2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_kEDK3() {
    TarArchiveStructSparse obj = new TarArchiveStructSparse(10, 20);
    assertFalse(obj.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_KoSl4() {
    TarArchiveStructSparse obj = new TarArchiveStructSparse(10, 20);
    String str = "test";
    assertFalse(obj.equals(str));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_ZeroOffsetAndNumbytes_UzpD6() {
    TarArchiveStructSparse obj1 = new TarArchiveStructSparse(0, 0);
    TarArchiveStructSparse obj2 = new TarArchiveStructSparse(0, 0);
    assertTrue(obj1.equals(obj2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_Mppg0() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(100, 1000);
    String expected = "TarArchiveStructSparse{offset=100, numbytes=1000}";
    String actual = tarArchiveStructSparse.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytes_MjTI0() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, 100);
    assertEquals(100, tarArchiveStructSparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytesWithZeroOffset_mJVD1() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0, 100);
    assertEquals(100, tarArchiveStructSparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytesWithNegativeOffset_jNBB2() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(-10, 100);
    assertEquals(100, tarArchiveStructSparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytesWithZeroNumbytes_TFaB3() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, 0);
    assertEquals(0, tarArchiveStructSparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytesWithNegativeNumbytes_kmFi4() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, -100);
    assertEquals(-100, tarArchiveStructSparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_Hujv0() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(100, 200);
    int actual = tarArchiveStructSparse.hashCode();
    int expected = Objects.hash(100, 200);
    assertEquals(expected, actual);
}
}