/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.xz;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XZUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_emptyString_rAAN0() {
    assertFalse(XZUtils.isCompressedFileName(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_null_Lmhi1() {
    assertFalse(XZUtils.isCompressedFileName(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_validFileName_oNWe2() {
    assertTrue(XZUtils.isCompressedFileName("file.xz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_invalidFileName_bILs3() {
    assertFalse(XZUtils.isCompressedFileName("file.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_uppercaseFileName_Pneu4() {
    assertTrue(XZUtils.isCompressedFileName("FILE.XZ"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_mixedcaseFileName_CUXQ6() {
    assertTrue(XZUtils.isCompressedFileName("FiLe.Xz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_fileNameWithPath_AqVu7() {
    assertTrue(XZUtils.isCompressedFileName("/path/to/file.xz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_fileNameWithoutExtension_llMm8() {
    assertFalse(XZUtils.isCompressedFileName("file"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_fileNameWithMultipleExtensions_SvCm9() {
    assertFalse(XZUtils.isCompressedFileName("file.txt.xz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_fileNameWithValidExtensionButNotCompressed_qBAl11() {
    assertFalse(XZUtils.isCompressedFileName("file.txt.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_fileNameWithValidExtensionButNotCompressed_uppercase_ETGb12() {
    assertFalse(XZUtils.isCompressedFileName("FILE.TXT.GZ"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_fileNameWithValidExtensionButNotCompressed_mixedcase_zgFc14() {
    assertFalse(XZUtils.isCompressedFileName("FiLe.TxT.Gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_fileNameWithValidExtensionButNotCompressed_path_pZHv15() {
    assertFalse(XZUtils.isCompressedFileName("/path/to/file.txt.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_fileNameWithValidExtensionButNotCompressed_multipleExtensions_nbwF17() {
    assertFalse(XZUtils.isCompressedFileName("file.txt.gz.xz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_emptySignature_eAqw0() {
    byte[] signature = new byte[0];
    int length = 0;
    assertFalse(XZUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nullSignature_tncN3() {
    byte[] signature = null;
    int length = 0;
    assertFalse(XZUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilename_cJwW0() {
    String fileName = "file.txt.xz";
    String expected = "file.txt";
    String actual = XZUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithoutExtension_lKXg1() {
    String fileName = "file";
    String expected = "file";
    String actual = XZUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithMultipleExtensions_ZVTm2() {
    String fileName = "file.txt.xz.gz";
    String expected = "file.txt";
    String actual = XZUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithInvalidExtension_kBaH3() {
    String fileName = "file.txt.xz.invalid";
    String expected = "file.txt";
    String actual = XZUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithEmptyString_DDlT4() {
    String fileName = "";
    String expected = "";
    String actual = XZUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_emptyString_XFoj0() {
    assertFalse(XZUtils.isCompressedFilename(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_nullString_IkjE1() {
    assertFalse(XZUtils.isCompressedFilename(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_nonCompressedFile_oIVK2() {
    assertFalse(XZUtils.isCompressedFilename("file.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_compressedFile_dBJn3() {
    assertTrue(XZUtils.isCompressedFilename("file.txt.xz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_compressedFileWithPath_aTcq4() {
    assertTrue(XZUtils.isCompressedFilename("/path/to/file.txt.xz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_compressedFileWithMultipleExtensions_aOWU5() {
    assertTrue(XZUtils.isCompressedFilename("file.txt.xz.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_compressedFileWithDifferentExtension_nbZL6() {
    assertFalse(XZUtils.isCompressedFilename("file.txt.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_compressedFileWithInvalidExtension_JjEV7() {
    assertFalse(XZUtils.isCompressedFilename("file.txt.xz.invalid"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_compressedFileWithInvalidPath_Vjec8() {
    assertFalse(XZUtils.isCompressedFilename("invalid/path/file.txt.xz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilename_emptyFileName_MhII0() {
    String fileName = "";
    String expected = "";
    String actual = XZUtils.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilename_nullFileName_VZsH1() {
    String fileName = null;
    String expected = null;
    String actual = XZUtils.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilename_validFileName_GUSy2() {
    String fileName = "test.txt";
    String expected = "test.txt.xz";
    String actual = XZUtils.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilename_invalidFileName_MCMY3() {
    String fileName = "test.txt.xz";
    String expected = "test.txt.xz";
    String actual = XZUtils.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_PDkF0() {
    String fileName = "test.xz";
    String expected = "test";
    String actual = XZUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileNameWithoutExtension_lcoD1() {
    String fileName = "test";
    String expected = "test";
    String actual = XZUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileNameWithMultipleExtensions_BlzX2() {
    String fileName = "test.xz.gz";
    String expected = "test.xz";
    String actual = XZUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileNameWithInvalidExtension_bPGm3() {
    String fileName = "test.txt";
    String expected = "test";
    String actual = XZUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileNameWithEmptyString_UnnG4() {
    String fileName = "";
    String expected = "";
    String actual = XZUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileNameWithNull_uiAV5() {
    String fileName = null;
    String expected = null;
    String actual = XZUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_emptyFileName_KXtd0() {
    String fileName = "";
    String expected = "";
    String actual = XZUtils.getCompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_nullFileName_kgSU1() {
    String fileName = null;
    String expected = null;
    String actual = XZUtils.getCompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_validFileName_hEAf2() {
    String fileName = "test.txt";
    String expected = "test.txt.xz";
    String actual = XZUtils.getCompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_validFileNameWithPath_IFHP3() {
    String fileName = "path/to/test.txt";
    String expected = "path/to/test.txt.xz";
    String actual = XZUtils.getCompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_validFileNameWithExtension_hACm4() {
    String fileName = "test.txt.xz";
    String expected = "test.txt.xz.xz";
    String actual = XZUtils.getCompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_validFileNameWithPathAndExtension_iMbR5() {
    String fileName = "path/to/test.txt.xz";
    String expected = "path/to/test.txt.xz.xz";
    String actual = XZUtils.getCompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_invalidFileName_qYaH6() {
    String fileName = "test.txt.xz.xz";
    String expected = "test.txt.xz.xz";
    String actual = XZUtils.getCompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_invalidFileNameWithPath_mvQB7() {
    String fileName = "path/to/test.txt.xz.xz";
    String expected = "path/to/test.txt.xz.xz";
    String actual = XZUtils.getCompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_invalidFileNameWithExtension_ekFt8() {
    String fileName = "test.txt.xz.xz.xz";
    String expected = "test.txt.xz.xz.xz";
    String actual = XZUtils.getCompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_invalidFileNameWithPathAndExtension_bmpE9() {
    String fileName = "path/to/test.txt.xz.xz.xz";
    String expected = "path/to/test.txt.xz.xz.xz";
    String actual = XZUtils.getCompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_validSignature_MQxC1_Svzt0() {
    byte[] signature = new byte[] { (byte) 0x1F, (byte) 0x9D };
    int length = signature.length;
    assertTrue(XZUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_CHzW2_WrYL0() {
    byte[] signature = new byte[] { (byte) 0x1F, (byte) 0x9D, (byte) 0x00 };
    int length = signature.length;
    assertFalse(XZUtils.matches(signature, length));
}
}