/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipMethod_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_STORED_sbIC0() {
    int code = 0;
    ZipMethod method = ZipMethod.getMethodByCode(code);
    assertEquals(ZipMethod.STORED, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_UNSHRINKING_fsic1() {
    int code = 1;
    ZipMethod method = ZipMethod.getMethodByCode(code);
    assertEquals(ZipMethod.UNSHRINKING, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_EXPANDING_LEVEL_1_uxFz2() {
    int code = 2;
    ZipMethod method = ZipMethod.getMethodByCode(code);
    assertEquals(ZipMethod.EXPANDING_LEVEL_1, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_EXPANDING_LEVEL_2_kDqk3() {
    int code = 3;
    ZipMethod method = ZipMethod.getMethodByCode(code);
    assertEquals(ZipMethod.EXPANDING_LEVEL_2, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_EXPANDING_LEVEL_3_ZDMb4() {
    int code = 4;
    ZipMethod method = ZipMethod.getMethodByCode(code);
    assertEquals(ZipMethod.EXPANDING_LEVEL_3, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_EXPANDING_LEVEL_4_dKgh5() {
    int code = 5;
    ZipMethod method = ZipMethod.getMethodByCode(code);
    assertEquals(ZipMethod.EXPANDING_LEVEL_4, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_IMPLODING_lXsm6() {
    int code = 6;
    ZipMethod method = ZipMethod.getMethodByCode(code);
    assertEquals(ZipMethod.IMPLODING, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_TOKENIZATION_zomy7() {
    int code = 7;
    ZipMethod method = ZipMethod.getMethodByCode(code);
    assertEquals(ZipMethod.TOKENIZATION, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_DEFLATED_aJtW8() {
    int code = 8;
    ZipMethod method = ZipMethod.getMethodByCode(code);
    assertEquals(ZipMethod.DEFLATED, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_ENHANCED_DEFLATED_AuLS9() {
    int code = 9;
    ZipMethod method = ZipMethod.getMethodByCode(code);
    assertEquals(ZipMethod.ENHANCED_DEFLATED, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_PKWARE_IMPLODING_exRS10() {
    int code = 10;
    ZipMethod method = ZipMethod.getMethodByCode(code);
    assertEquals(ZipMethod.PKWARE_IMPLODING, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_BZIP2_VCDo11() {
    int code = 11;
    ZipMethod method = ZipMethod.getMethodByCode(code);
    assertEquals(ZipMethod.BZIP2, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_LZMA_GGUn12() {
    int code = 12;
    ZipMethod method = ZipMethod.getMethodByCode(code);
    assertEquals(ZipMethod.LZMA, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByCode_XZ_aycK13() {
    int code = 13;
    ZipMethod method = ZipMethod.getMethodByCode(code);
    assertEquals(ZipMethod.XZ, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCode_XZ_LwGq13_MsWK1() {
    ZipMethod zipMethod = ZipMethod.valueOf("XZ");
    assertEquals(13, zipMethod.getCode());
}
}