/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentHeader_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileSizeHi_wgjM0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_file_size_hi();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileOptions_CkQq0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    assertTrue(segmentHeader.have_file_options());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultMajorVersion_RlmR0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int defaultMajorVersion = segmentHeader.getDefaultMajorVersion();
    assertEquals(1, defaultMajorVersion);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchive_modtime_DXfj0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int archive_modtime = segmentHeader.getArchive_modtime();
    assertEquals(0, archive_modtime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFieldFlagsHi_iiOI0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_field_flags_hi();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileModtime_TvTc0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_file_modtime();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveCodeFlagsHi_wWrB0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_code_flags_hi();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveAllCodeFlags_jjcV0_AFDi0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_all_code_flags();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileSizeHiWithNullFileSizeHi_Nowu1_LcCk0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_field_flags_hi(true);
    boolean result = segmentHeader.have_file_size_hi();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileModtimeWithNullFile_mIhl1_jBCB0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_file_modtime();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveMethodFlagsHi_False_tuTy1_IutT0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_field_flags_hi(false);
    assertFalse(segmentHeader.have_field_flags_hi());
}
}