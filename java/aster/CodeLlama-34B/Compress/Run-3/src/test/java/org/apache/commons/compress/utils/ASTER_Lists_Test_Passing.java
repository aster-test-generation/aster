/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.ArrayList;
import java.util.Iterator;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Lists_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_empty_YAkn0() {
    Iterator<Object> iterator = Collections.emptyIterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertTrue(list.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_multipleElements_mqut2() {
    Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();
    ArrayList<Integer> list = Lists.newArrayList(iterator);
    assertEquals(3, list.size());
    assertEquals(1, list.get(0).intValue());
    assertEquals(2, list.get(1).intValue());
    assertEquals(3, list.get(2).intValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_nullIterator_nLrZ3() {
    Iterator<Object> iterator = null;
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertTrue(list.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_nullElement_KUkP4() {
    Iterator<String> iterator = Arrays.asList("hello", null, "world").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertEquals(3, list.size());
    assertEquals("hello", list.get(0));
    assertNull(list.get(1));
    assertEquals("world", list.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithMultipleNulls_dLcU8() {
    Iterator<String> iterator = Arrays.asList("hello", null, null, "world").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertEquals(4, list.size());
    assertEquals("hello", list.get(0));
    assertNull(list.get(1));
    assertNull(list.get(2));
    assertEquals("world", list.get(3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithMultipleNullsAndElements_Vdav9() {
    Iterator<String> iterator = Arrays.asList("hello", null, "world", null, "!").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertEquals(5, list.size());
    assertEquals("hello", list.get(0));
    assertNull(list.get(1));
    assertEquals("world", list.get(2));
    assertNull(list.get(3));
    assertEquals("!", list.get(4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_multipleElements_mqut2_1() {
    Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();
    ArrayList<Integer> list = Lists.newArrayList(iterator);
    assertEquals(3, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_multipleElements_mqut2_2() {
    Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();
    ArrayList<Integer> list = Lists.newArrayList(iterator);
    assertEquals(1, list.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_multipleElements_mqut2_3() {
    Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();
    ArrayList<Integer> list = Lists.newArrayList(iterator);
    assertEquals(2, list.get(1).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_multipleElements_mqut2_4() {
    Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();
    ArrayList<Integer> list = Lists.newArrayList(iterator);
    assertEquals(3, list.get(2).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_nullElement_KUkP4_1() {
    Iterator<String> iterator = Arrays.asList("hello", null, "world").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertEquals(3, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_nullElement_KUkP4_2() {
    Iterator<String> iterator = Arrays.asList("hello", null, "world").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertEquals("hello", list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_nullElement_KUkP4_3() {
    Iterator<String> iterator = Arrays.asList("hello", null, "world").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertNull(list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_nullElement_KUkP4_4() {
    Iterator<String> iterator = Arrays.asList("hello", null, "world").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertEquals("world", list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithMultipleNulls_dLcU8_1() {
    Iterator<String> iterator = Arrays.asList("hello", null, null, "world").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertEquals(4, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithMultipleNulls_dLcU8_2() {
    Iterator<String> iterator = Arrays.asList("hello", null, null, "world").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertEquals("hello", list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithMultipleNulls_dLcU8_3() {
    Iterator<String> iterator = Arrays.asList("hello", null, null, "world").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertNull(list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithMultipleNulls_dLcU8_4() {
    Iterator<String> iterator = Arrays.asList("hello", null, null, "world").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertNull(list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithMultipleNulls_dLcU8_5() {
    Iterator<String> iterator = Arrays.asList("hello", null, null, "world").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertEquals("world", list.get(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithMultipleNullsAndElements_Vdav9_1() {
    Iterator<String> iterator = Arrays.asList("hello", null, "world", null, "!").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertEquals(5, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithMultipleNullsAndElements_Vdav9_2() {
    Iterator<String> iterator = Arrays.asList("hello", null, "world", null, "!").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertEquals("hello", list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithMultipleNullsAndElements_Vdav9_3() {
    Iterator<String> iterator = Arrays.asList("hello", null, "world", null, "!").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertNull(list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithMultipleNullsAndElements_Vdav9_4() {
    Iterator<String> iterator = Arrays.asList("hello", null, "world", null, "!").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertEquals("world", list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithMultipleNullsAndElements_Vdav9_5() {
    Iterator<String> iterator = Arrays.asList("hello", null, "world", null, "!").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertNull(list.get(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithMultipleNullsAndElements_Vdav9_6() {
    Iterator<String> iterator = Arrays.asList("hello", null, "world", null, "!").iterator();
    ArrayList<String> list = Lists.newArrayList(iterator);
    assertEquals("!", list.get(4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayListWithInvalidInitialElements_bEeZ5_KgYV1() {
    try {
        Lists.newArrayList(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
}