/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPString_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesWithNullUtf8AndGlobalIndex_GwaF8() {
    CPString string = new CPString(null, 0);
    ClassFileEntry[] entries = string.getNestedClassFileEntries();
    assertEquals(0, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesWithEmptyUtf8AndGlobalIndex_mUKv9() {
    CPUTF8 utf8 = new CPUTF8("");
    CPString string = new CPString(utf8, 0);
    ClassFileEntry[] entries = string.getNestedClassFileEntries();
    assertEquals(0, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesWithInvalidUtf8AndGlobalIndex_YRDb10() {
    CPUTF8 utf8 = new CPUTF8("test", -1);
    CPString string = new CPString(utf8, 0);
    ClassFileEntry[] entries = string.getNestedClassFileEntries();
    assertEquals(0, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_defaultConstructor_FqHz0() {
    CPString string = new CPString(new CPUTF8("test"), 0);
    assertEquals(0, string.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_utf8Constructor_rXQK1() {
    CPString string = new CPString(new CPUTF8("test", 1), 0);
    assertEquals(1, string.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_XujY0_lQFU0() {
    CPUTF8 utf8 = new CPUTF8("test", 0);
    CPString string = new CPString(utf8, 0);
    String expected = "String: test";
    String actual = string.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_NpuX0_ikvc0_1() {
    CPUTF8 utf8 = new CPUTF8("test", 0);
    CPString string = new CPString(utf8, 0);
    ClassFileEntry[] entries = string.getNestedClassFileEntries();
    assertEquals(1, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_NpuX0_ikvc0_2() {
    CPUTF8 utf8 = new CPUTF8("test", 0);
    CPString string = new CPString(utf8, 0);
    ClassFileEntry[] entries = string.getNestedClassFileEntries();
    assertEquals(utf8, entries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesWithGlobalIndex_Gofb1_hjTy0_1() {
    CPUTF8 utf8 = new CPUTF8("test", 1);
    CPString string = new CPString(utf8, 1);
    ClassFileEntry[] entries = string.getNestedClassFileEntries();
    assertEquals(1, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesWithGlobalIndex_Gofb1_hjTy0_2() {
    CPUTF8 utf8 = new CPUTF8("test", 1);
    CPString string = new CPString(utf8, 1);
    ClassFileEntry[] entries = string.getNestedClassFileEntries();
    assertEquals(utf8, entries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesWithNullName_IBNF2_cClC0() {
    CPUTF8 utf8 = new CPUTF8("", 0);
    CPString string = new CPString(utf8, 0);
    ClassFileEntry[] entries = string.getNestedClassFileEntries();
    assertEquals(0, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesWithInvalidUtf8_jDRF7_uCKB1() {
    CPUTF8 utf8 = new CPUTF8("test", 0);
    CPString string = new CPString(utf8, 0);
    ClassFileEntry[] entries = string.getNestedClassFileEntries();
    assertEquals(0, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteBodyWithNullDataOutputStream_dxfP9_MfwC0() throws IOException {
    CPUTF8 utf8 = new CPUTF8("test");
    CPString string = new CPString(utf8, 0);
    string.writeBody(null);
    assertEquals(0, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_alreadyComputed_Iuvx2_tSZY0() {
    CPString string = new CPString(new CPUTF8("test"), 0);
    string.hashCode();
    assertEquals(0, string.hashCode());
}
}