/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPInt_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_Equal_BXke0() {
    CPInt cpInt1 = new CPInt(10);
    CPInt cpInt2 = new CPInt(10);
    int result = cpInt1.compareTo(cpInt2);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_NotEqual_VjRW1() {
    CPInt cpInt1 = new CPInt(10);
    CPInt cpInt2 = new CPInt(20);
    int result = cpInt1.compareTo(cpInt2);
    assertNotEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_1_cWrV0() {
    CPInt cpInt = new CPInt(1);
    assertEquals(1, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_2_jkXc1() {
    CPInt cpInt = new CPInt(2);
    assertEquals(2, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_3_Gmhi2() {
    CPInt cpInt = new CPInt(3);
    assertEquals(3, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_4_yhrx3() {
    CPInt cpInt = new CPInt(4);
    assertEquals(4, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_5_WCrP4() {
    CPInt cpInt = new CPInt(5);
    assertEquals(5, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_6_BJWr5() {
    CPInt cpInt = new CPInt(6);
    assertEquals(6, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_7_OqKM6() {
    CPInt cpInt = new CPInt(7);
    assertEquals(7, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_8_eqNC7() {
    CPInt cpInt = new CPInt(8);
    assertEquals(8, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_9_XInq8() {
    CPInt cpInt = new CPInt(9);
    assertEquals(9, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_10_AclX9() {
    CPInt cpInt = new CPInt(10);
    assertEquals(10, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_11_lWjN10() {
    CPInt cpInt = new CPInt(11);
    assertEquals(11, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_12_StSl11() {
    CPInt cpInt = new CPInt(12);
    assertEquals(12, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_13_Xznp12() {
    CPInt cpInt = new CPInt(13);
    assertEquals(13, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_14_LzFQ13() {
    CPInt cpInt = new CPInt(14);
    assertEquals(14, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_15_hdXz14() {
    CPInt cpInt = new CPInt(15);
    assertEquals(15, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_16_WKqu15() {
    CPInt cpInt = new CPInt(16);
    assertEquals(16, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_17_KUiM16() {
    CPInt cpInt = new CPInt(17);
    assertEquals(17, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_18_rptl17() {
    CPInt cpInt = new CPInt(18);
    assertEquals(18, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_19_FpCP18() {
    CPInt cpInt = new CPInt(19);
    assertEquals(19, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_20_dNOR19() {
    CPInt cpInt = new CPInt(20);
    assertEquals(20, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_21_sEsr20() {
    CPInt cpInt = new CPInt(21);
    assertEquals(21, cpInt.getInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInt_22_bnqQ21() {
    CPInt cpInt = new CPInt(22);
}
}