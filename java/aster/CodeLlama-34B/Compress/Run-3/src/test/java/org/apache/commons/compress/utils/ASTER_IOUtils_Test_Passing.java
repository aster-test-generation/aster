/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.channels.ReadableByteChannel;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IOUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopy_invalidFile_throwsIOException_KDbT1() throws IOException {
    File sourceFile = new File("src/test/resources/test.txt");
    OutputStream outputStream = new ByteArrayOutputStream();
    IOUtils.copy(sourceFile, outputStream);
    assertThrows(IOException.class, () -> IOUtils.copy(sourceFile, outputStream));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopy_nullFile_throwsNullPointerException_syvD2() throws IOException {
    File sourceFile = null;
    OutputStream outputStream = new ByteArrayOutputStream();
    assertThrows(NullPointerException.class, () -> IOUtils.copy(sourceFile, outputStream));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_validFile_success_CjjF0() throws IOException {
    File file = new File("test.txt");
    byte[] array = new byte[10];
    int expected = 10;
    int actual = IOUtils.read(file, array);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_invalidFile_throwsIOException_WGBj1() throws IOException {
    File file = new File("invalid.txt");
    byte[] array = new byte[10];
    try {
        IOUtils.read(file, array);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_nullFile_throwsNullPointerException_beAP2() throws IOException {
    File file = null;
    byte[] array = new byte[10];
    try {
        IOUtils.read(file, array);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCopyWithNullInput_SlUx4_1() throws IOException {
        InputStream input = null;
        OutputStream output = new ByteArrayOutputStream();
        int bufferSize = 1024;
        long result = IOUtils.copy(input, output, bufferSize);
        assertEquals(0, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCopyWithNullInput_SlUx4_2() throws IOException {
        InputStream input = null;
        OutputStream output = new ByteArrayOutputStream();
        int bufferSize = 1024;
        long result = IOUtils.copy(input, output, bufferSize);
        assertEquals("", output.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyRange_NullInputs_ZnCg2() throws IOException {
    InputStream input = null;
    OutputStream output = null;
    long length = 5;
    int bufferSize = 10;
    try {
        IOUtils.copyRange(input, length, output, bufferSize);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("input or output is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseQuietlyWithNull_zJBJ4() {
        Closeable c = null;
        IOUtils.closeQuietly(c);
        Assertions.assertNull(c);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadFully_Success_XcbZ0_1() throws IOException {
    ReadableByteChannel channel = mock(ReadableByteChannel.class);
    ByteBuffer byteBuffer = ByteBuffer.allocate(10);
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    when(channel.read(byteBuffer)).thenReturn(10);
    IOUtils.readFully(channel, byteBuffer);
    assertEquals(10, byteBuffer.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadFully_Success_XcbZ0_2() throws IOException {
    ReadableByteChannel channel = mock(ReadableByteChannel.class);
    ByteBuffer byteBuffer = ByteBuffer.allocate(10);
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    when(channel.read(byteBuffer)).thenReturn(10);
    IOUtils.readFully(channel, byteBuffer);
    assertEquals(0, byteBuffer.remaining());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadFully_Success_XcbZ0_3() throws IOException {
    ReadableByteChannel channel = mock(ReadableByteChannel.class);
    ByteBuffer byteBuffer = ByteBuffer.allocate(10);
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    when(channel.read(byteBuffer)).thenReturn(10);
    IOUtils.readFully(channel, byteBuffer);
    assertArrayEquals(data, byteBuffer.array());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadFully_EOF_FbFb1() throws IOException {
    ReadableByteChannel channel = mock(ReadableByteChannel.class);
    ByteBuffer byteBuffer = ByteBuffer.allocate(10);
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    when(channel.read(byteBuffer)).thenReturn(5);
    try {
        IOUtils.readFully(channel, byteBuffer);
        fail("Expected EOFException");
    } catch (EOFException e) {
    }
    assertEquals(5, byteBuffer.position());
    assertEquals(5, byteBuffer.remaining());
    assertArrayEquals(data, byteBuffer.array());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopy_validFile_success_qFmn0_oxcV0() throws IOException {
    File sourceFile = new File("src/test/resources/test.txt");
    OutputStream outputStream = new ByteArrayOutputStream();
    IOUtils.copy(sourceFile, outputStream);
    assertEquals(sourceFile.length(), ((ByteArrayOutputStream) outputStream).toByteArray().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkip_InputStream_long_byteArray_emptyInputStream_ZBHs1_cswE0_1() throws IOException {
    InputStream input = new java.io.ByteArrayInputStream(new byte[0]);
    long toSkip = 3;
    long skipped = IOUtils.skip(input, toSkip);
    assertEquals(0, skipped);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkip_InputStream_long_byteArray_emptyInputStream_ZBHs1_cswE0_2() throws IOException {
    InputStream input = new java.io.ByteArrayInputStream(new byte[0]);
    long toSkip = 3;
    long skipped = IOUtils.skip(input, toSkip);
    assertEquals(0, input.available());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCopyWithNullInput_SlUx4() throws IOException {
        InputStream input = null;
        OutputStream output = new ByteArrayOutputStream();
        int bufferSize = 1024;
        long result = IOUtils.copy(input, output, bufferSize);
        assertEquals(0, result);
        assertEquals("", output.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
            public void close_rNWJ1() throws IOException {
            }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
            public void close_coiK3() throws IOException {
                throw new IOException("Test exception");
            }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadFully_Success_XcbZ0() throws IOException {
    ReadableByteChannel channel = mock(ReadableByteChannel.class);
    ByteBuffer byteBuffer = ByteBuffer.allocate(10);
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    when(channel.read(byteBuffer)).thenReturn(10);
    IOUtils.readFully(channel, byteBuffer);
    assertEquals(10, byteBuffer.position());
    assertEquals(0, byteBuffer.remaining());
    assertArrayEquals(data, byteBuffer.array());
}
}