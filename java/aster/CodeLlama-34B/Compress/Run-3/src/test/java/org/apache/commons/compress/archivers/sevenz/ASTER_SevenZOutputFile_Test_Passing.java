/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.File;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.util.Date;
import java.util.zip.CRC32;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZOutputFile_Test_Passing {
private SeekableByteChannel channel;
private boolean finished;
private CRC32 crc32 = new CRC32();
SevenZOutputFile sevenzoutputfile;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithInvalidArguments_SlWH1() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
    byte[] b = new byte[10];
    int off = 0;
    int len = -1;
    try {
        sevenZOutputFile.write(b, off, len);
        fail("Expected an IllegalArgumentException to be thrown");
    } catch (IllegalArgumentException e) {
        assertEquals("len must be greater than or equal to 0", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithClosedChannel_lVNa6() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    sevenZOutputFile.close();
    try {
        sevenZOutputFile.finish();
        fail("Expected IOException");
    } catch (IOException e) {
        assertTrue(e.getMessage().contains("This archive has already been finished"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithEmptyLastModifiedTime_nXDB6_QFlT0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), new char[]{'t', 'e', 's', 't'});
    sevenZOutputFile.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithEmptyLastModifiedTime_nXDB6_rGhQ1() throws IOException {
    try {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), new char[]{'t', 'e', 's', 't'});
        sevenZOutputFile.closeArchiveEntry();
    } catch (IOException e) {
        System.err.println("Error: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_EaIe0_VrCe0() {
    try {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(new File("test.txt"), "test.txt");
        assertEquals("test.txt", entry.getName());
        assertTrue(entry.isDirectory());
        assertEquals(new Date(new File("test.txt").lastModified()), entry.getLastModifiedDate());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntryWithNonExistentFile_Jial1_OcQr0() {
    try {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(new File("non_existent_file.txt"), "non_existent_file.txt");
        assertEquals("non_existent_file.txt", entry.getName());
        assertFalse(entry.isDirectory());
        assertNull(entry.getLastModifiedDate());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntryWithDirectory_tewb2_SLNr0_1() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
    SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(new File("test_directory"), "test_directory");
    assertEquals("test_directory", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntryWithDirectory_tewb2_SLNr0_2() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
    SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(new File("test_directory"), "test_directory");
    assertTrue(entry.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntryWithDirectory_tewb2_SLNr0_3() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
    SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(new File("test_directory"), "test_directory");
    assertEquals(new Date(new File("test_directory").lastModified()), entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntryWithNonExistentDirectory_JyKH3_TKlW0_1() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
    SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(new File("non_existent_directory"), "non_existent_directory");
    assertEquals("non_existent_directory", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntryWithNonExistentDirectory_JyKH3_TKlW0_2() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
    SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(new File("non_existent_directory"), "non_existent_directory");
    assertFalse(entry.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntryWithNonExistentDirectory_JyKH3_TKlW0_3() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
    SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(new File("non_existent_directory"), "non_existent_directory");
    assertNull(entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntryWithNullFile_rmbO4_OYIa0_1() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
    SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(null, "null_file");
    assertEquals("null_file", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntryWithNullFile_rmbO4_OYIa0_2() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
    SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(null, "null_file");
    assertFalse(entry.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntryWithNullFile_rmbO4_OYIa0_3() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
    SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(null, "null_file");
    assertNull(entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntryWithNullName_BChV5_RpSY0() {
    SevenZOutputFile sevenZOutputFile = null;
    try {
        sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
    } catch (IOException e) {
        e.printStackTrace();
    }
    SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(new File("test.txt"), null);
    assertNull(entry.getName());
    assertFalse(entry.isDirectory());
    assertNull(entry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntryWithEmptyName_jVWr6_mrpJ0() {
    SevenZOutputFile sevenZOutputFile = null;
    try {
        sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
    } catch (IOException e) {
        e.printStackTrace();
    }
    SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(new File("test.txt"), "");
    assertEquals("", entry.getName());
    assertFalse(entry.isDirectory());
    assertNull(entry.getLastModifiedDate());
}
}