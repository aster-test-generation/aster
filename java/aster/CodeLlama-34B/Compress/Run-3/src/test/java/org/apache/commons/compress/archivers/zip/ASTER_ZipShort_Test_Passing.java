/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipShort_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_GStF0() {
    ZipShort zipShort = new ZipShort(new byte[] { 0x01, 0x02 }, 0);
    assertTrue(zipShort.equals(zipShort));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectSameValue_TOjL1() {
    ZipShort zipShort1 = new ZipShort(new byte[] { 0x01, 0x02 }, 0);
    ZipShort zipShort2 = new ZipShort(new byte[] { 0x01, 0x02 }, 0);
    assertTrue(zipShort1.equals(zipShort2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectDifferentValue_XtOd2() {
    ZipShort zipShort1 = new ZipShort(new byte[] { 0x01, 0x02 }, 0);
    ZipShort zipShort2 = new ZipShort(new byte[] { 0x03, 0x04 }, 0);
    assertFalse(zipShort1.equals(zipShort2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutShort_LittleEndian_gDSW0_1() {
    byte[] buf = new byte[2];
    int value = 0x1234;
    int offset = 0;
    ZipShort.putShort(value, buf, offset);
    assertEquals(0x34, buf[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutShort_LittleEndian_gDSW0_2() {
    byte[] buf = new byte[2];
    int value = 0x1234;
    int offset = 0;
    ZipShort.putShort(value, buf, offset);
    assertEquals(0x12, buf[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutShort_BigEndian_lSJO1_1() {
    byte[] buf = new byte[2];
    int value = 0x1234;
    int offset = 0;
    ZipShort.putShort(value, buf, offset);
    assertEquals(0x12, buf[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutShort_BigEndian_lSJO1_2() {
    byte[] buf = new byte[2];
    int value = 0x1234;
    int offset = 0;
    ZipShort.putShort(value, buf, offset);
    assertEquals(0x34, buf[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutShort_InvalidOffset_XNbb2() {
    byte[] buf = new byte[2];
    int value = 0x1234;
    int offset = 1;
    try {
        ZipShort.putShort(value, buf, offset);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithByteArrayAndOffset_hZSh0() {
    byte[] bytes = new byte[] { 1, 2, 3, 4 };
    int offset = 1;
    ZipShort zipShort = new ZipShort(bytes, offset);
    String expected = "ZipShort value: 2";
    String actual = zipShort.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithIntValue_UWdD1() {
    int value = 1234;
    ZipShort zipShort = new ZipShort(value);
    String expected = "ZipShort value: 1234";
    String actual = zipShort.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithByteArray_Ltpn2() {
    byte[] bytes = new byte[] { 1, 2, 3, 4 };
    ZipShort zipShort = new ZipShort(bytes);
    String expected = "ZipShort value: 1";
    String actual = zipShort.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue1_HaQg0() {
    byte[] bytes = new byte[] {0x01, 0x02};
    int offset = 0;
    ZipShort zipShort = new ZipShort(bytes, offset);
    assertEquals(0x0102, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue2_fiBs1() {
    int value = 0x0102;
    ZipShort zipShort = new ZipShort(value);
    assertEquals(0x0102, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue3_WQcE2() {
    byte[] bytes = new byte[] {0x01, 0x02};
    ZipShort zipShort = new ZipShort(bytes);
    assertEquals(0x0102, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes1_ziai0() {
    ZipShort zipShort = new ZipShort(new byte[] { 0x01, 0x02 }, 0);
    byte[] result = zipShort.getBytes();
    assertArrayEquals(new byte[] { 0x01, 0x02 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes2_VmIU1() {
    ZipShort zipShort = new ZipShort(0x0102);
    byte[] result = zipShort.getBytes();
    assertArrayEquals(new byte[] { 0x01, 0x02 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes3_Rmll2() {
    ZipShort zipShort = new ZipShort(new byte[] { 0x01, 0x02 });
    byte[] result = zipShort.getBytes();
    assertArrayEquals(new byte[] { 0x01, 0x02 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_1_AYvU0() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int offset = 0;
    int expected = 0x0102;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_2_cmfu1() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int offset = 1;
    int expected = 0x0203;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_3_CGSh2() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int offset = 2;
    int expected = 0x0304;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_4_RFjC3() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int offset = 3;
    int expected = 0x0405;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_5_VFUd4() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int offset = 4;
    int expected = 0x0506;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_6_vLWU5() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int offset = 5;
    int expected = 0x0607;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_7_VSwc6() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int offset = 6;
    int expected = 0x0708;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_8_UdcI7() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int offset = 7;
    int expected = 0x0809;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_9_jpVp8() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int offset = 8;
    int expected = 0x090A;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_10_tdTW9() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int offset = 9;
    int expected = 0x0A0B;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_intValue_kDbK0() {
    int value = 12345;
    ZipShort zipShort = new ZipShort(value);
    assertEquals(value, zipShort.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_byteArray_CyrX1() {
    byte[] bytes = new byte[] { 0x12, 0x34, 0x56, 0x78 };
    ZipShort zipShort = new ZipShort(bytes);
    assertEquals(0x12345678, zipShort.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_byteArrayOffset_hYlA2() {
    byte[] bytes = new byte[] { 0x12, 0x34, 0x56, 0x78 };
    ZipShort zipShort = new ZipShort(bytes, 1);
    assertEquals(0x345678, zipShort.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_int_GkPG0() {
    int value = 1234;
    byte[] expected = {0x30, 0x39};
    byte[] actual = ZipShort.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_1_SpJg0() {
    ZipShort zipShort = new ZipShort(new byte[] { 1, 2, 3, 4 }, 0);
    ZipShort clone = (ZipShort) zipShort.clone();
    assertEquals(zipShort.getValue(), clone.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_2_Zkui1() {
    ZipShort zipShort = new ZipShort(100);
    ZipShort clone = (ZipShort) zipShort.clone();
    assertEquals(zipShort.getValue(), clone.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_3_NRvo2() {
    ZipShort zipShort = new ZipShort(new byte[] { 1, 2, 3, 4 });
    ZipShort clone = (ZipShort) zipShort.clone();
    assertEquals(zipShort.getValue(), clone.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutShort_LittleEndian_gDSW0() {
    byte[] buf = new byte[2];
    int value = 0x1234;
    int offset = 0;
    ZipShort.putShort(value, buf, offset);
    assertEquals(0x34, buf[0]);
    assertEquals(0x12, buf[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutShort_BigEndian_lSJO1() {
    byte[] buf = new byte[2];
    int value = 0x1234;
    int offset = 0;
    ZipShort.putShort(value, buf, offset);
    assertEquals(0x12, buf[0]);
    assertEquals(0x34, buf[1]);
}
}