/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPFloat_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_Greater_arDV2_Iuqw0() {
    CPFloat float1 = new CPFloat(2.0f);
    CPFloat float2 = new CPFloat(1.0f);
    int result = float1.compareTo(float2);
    assertTrue(result > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_Less_NCCE3_ElXG0() {
    CPFloat float1 = new CPFloat(1.0f);
    CPFloat float2 = new CPFloat(2.0f);
    int result = float1.compareTo(float2);
    assertTrue(result < 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloat_Wcwm0_LYlO0() {
    CPFloat floatObj = new CPFloat(1.0f);
    float result = floatObj.getFloat();
    assertEquals(1.0f, result, 0.0001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloatWithDifferentConstructorParameters_TgHJ1_AYbZ0_1() {
    CPFloat floatObj = new CPFloat(1.0f);
    float result = floatObj.getFloat();
    floatObj = new CPFloat(2.0f);
    result = floatObj.getFloat();
    assertEquals(1.0f, result, 0.0001);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloatWithDifferentConstructorParameters_TgHJ1_AYbZ0_2() {
    CPFloat floatObj = new CPFloat(1.0f);
    float result = floatObj.getFloat();
    floatObj = new CPFloat(2.0f);
    result = floatObj.getFloat();
    assertEquals(2.0f, result, 0.0001);}
}