/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.bzip2;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Rand_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_1_qSvM0() {
    int result = Rand.rNums(0);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_2_IxTU1() {
    int result = Rand.rNums(1);
    assertEquals(2, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_3_EniL2() {
    int result = Rand.rNums(2);
    assertEquals(3, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_4_ZfSm3() {
    int result = Rand.rNums(3);
    assertEquals(4, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_5_KqEN4() {
    int result = Rand.rNums(4);
    assertEquals(5, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_6_yaQB5() {
    int result = Rand.rNums(5);
    assertEquals(6, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_7_gHLm6() {
    int result = Rand.rNums(6);
    assertEquals(7, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_8_dTFF7() {
    int result = Rand.rNums(7);
    assertEquals(8, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_9_qxGc8() {
    int result = Rand.rNums(8);
    assertEquals(9, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_10_YOoU9() {
    int result = Rand.rNums(9);
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_11_PFLI10() {
    int result = Rand.rNums(10);
    assertEquals(11, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_12_otdT11() {
    int result = Rand.rNums(11);
    assertEquals(12, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_13_OKZZ12() {
    int result = Rand.rNums(12);
    assertEquals(13, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_14_OCKD13() {
    int result = Rand.rNums(13);
    assertEquals(14, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_15_CVjb14() {
    int result = Rand.rNums(14);
    assertEquals(15, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_16_qdEC15() {
    int result = Rand.rNums(15);
    assertEquals(16, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_17_otmy16() {
    int result = Rand.rNums(16);
    assertEquals(17, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_18_SMBG17() {
    int result = Rand.rNums(17);
    assertEquals(18, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_19_Jrqf18() {
    int result = Rand.rNums(18);
    assertEquals(19, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_20_lrdO19() {
    int result = Rand.rNums(19);
    assertEquals(20, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_21_HfIO20() {
    int result = Rand.rNums(20);
    assertEquals(21, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_22_jkzV21() {
    int result = Rand.rNums(21);
    assertEquals(22, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_23_KDsF22() {
    int result = Rand.rNums(22);
    assertEquals(23, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_24_IcdQ23() {
    int result = Rand.rNums(23);
    assertEquals(24, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRNums_25_DMcf24() {
}
}