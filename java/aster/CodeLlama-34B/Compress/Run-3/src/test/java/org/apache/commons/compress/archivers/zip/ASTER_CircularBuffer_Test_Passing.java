/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CircularBuffer_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailable_ZeroCapacity_fkdF5() {
    CircularBuffer buffer = new CircularBuffer(0);
    assertFalse(buffer.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailable_EmptyBuffer_kzEG0_Szqk0() {
    CircularBuffer buffer = new CircularBuffer(10);
    assertFalse(buffer.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_PZAx0_EBgN0_1() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(1);
    buffer.put(2);
    buffer.put(3);
    buffer.put(4);
    buffer.put(5);
    buffer.put(6);
    buffer.put(7);
    buffer.put(8);
    buffer.put(9);
    buffer.put(10);
    assertEquals(1, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_PZAx0_EBgN0_2() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(1);
    buffer.put(2);
    buffer.put(3);
    buffer.put(4);
    buffer.put(5);
    buffer.put(6);
    buffer.put(7);
    buffer.put(8);
    buffer.put(9);
    buffer.put(10);
    assertEquals(2, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_PZAx0_EBgN0_3() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(1);
    buffer.put(2);
    buffer.put(3);
    buffer.put(4);
    buffer.put(5);
    buffer.put(6);
    buffer.put(7);
    buffer.put(8);
    buffer.put(9);
    buffer.put(10);
    assertEquals(3, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_PZAx0_EBgN0_4() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(1);
    buffer.put(2);
    buffer.put(3);
    buffer.put(4);
    buffer.put(5);
    buffer.put(6);
    buffer.put(7);
    buffer.put(8);
    buffer.put(9);
    buffer.put(10);
    assertEquals(4, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_PZAx0_EBgN0_5() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(1);
    buffer.put(2);
    buffer.put(3);
    buffer.put(4);
    buffer.put(5);
    buffer.put(6);
    buffer.put(7);
    buffer.put(8);
    buffer.put(9);
    buffer.put(10);
    assertEquals(5, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_PZAx0_EBgN0_6() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(1);
    buffer.put(2);
    buffer.put(3);
    buffer.put(4);
    buffer.put(5);
    buffer.put(6);
    buffer.put(7);
    buffer.put(8);
    buffer.put(9);
    buffer.put(10);
    assertEquals(6, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_PZAx0_EBgN0_7() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(1);
    buffer.put(2);
    buffer.put(3);
    buffer.put(4);
    buffer.put(5);
    buffer.put(6);
    buffer.put(7);
    buffer.put(8);
    buffer.put(9);
    buffer.put(10);
    assertEquals(7, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_PZAx0_EBgN0_8() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(1);
    buffer.put(2);
    buffer.put(3);
    buffer.put(4);
    buffer.put(5);
    buffer.put(6);
    buffer.put(7);
    buffer.put(8);
    buffer.put(9);
    buffer.put(10);
    assertEquals(8, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_PZAx0_EBgN0_9() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(1);
    buffer.put(2);
    buffer.put(3);
    buffer.put(4);
    buffer.put(5);
    buffer.put(6);
    buffer.put(7);
    buffer.put(8);
    buffer.put(9);
    buffer.put(10);
    assertEquals(9, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_PZAx0_EBgN0_10() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(1);
    buffer.put(2);
    buffer.put(3);
    buffer.put(4);
    buffer.put(5);
    buffer.put(6);
    buffer.put(7);
    buffer.put(8);
    buffer.put(9);
    buffer.put(10);
    assertEquals(10, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_BufferFull_ValueAlreadyInBuffer_HXKH1_EEto0_1() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(1);
    buffer.put(2);
    buffer.put(3);
    buffer.put(4);
    buffer.put(5);
    buffer.put(6);
    buffer.put(7);
    buffer.put(8);
    buffer.put(9);
    buffer.put(10);
    buffer.put(10);
    assertEquals(10, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_BufferFull_ValueNotInBuffer_sovy2_HtKx0_1() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(1);
    buffer.put(2);
    buffer.put(3);
    buffer.put(4);
    buffer.put(5);
    buffer.put(6);
    buffer.put(7);
    buffer.put(8);
    buffer.put(9);
    buffer.put(10);
    buffer.put(11);
    assertEquals(10, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_BufferFull_ValueNotInBuffer_sovy2_HtKx0_2() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(1);
    buffer.put(2);
    buffer.put(3);
    buffer.put(4);
    buffer.put(5);
    buffer.put(6);
    buffer.put(7);
    buffer.put(8);
    buffer.put(9);
    buffer.put(10);
    buffer.put(11);
    assertEquals(11, buffer.get());}
}