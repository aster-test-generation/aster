/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.FileInputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveInputStream_Test_Passing {
    private TarArchiveEntry currEntry;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_posix_oWNJ0() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_POSIX, 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy(TarConstants.VERSION_POSIX, 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    assertTrue(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_gnu_chRZ1() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_GNU, 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy(TarConstants.VERSION_GNU_SPACE, 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    assertTrue(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ant_wvLy2() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_ANT, 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy(TarConstants.VERSION_ANT, 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    assertTrue(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_posix_invalidLength_ffTr3() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_POSIX, 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy(TarConstants.VERSION_POSIX, 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    assertFalse(TarArchiveInputStream.matches(signature, signature.length - 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_gnu_invalidLength_NmEl4() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_GNU, 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy(TarConstants.VERSION_GNU_SPACE, 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    assertFalse(TarArchiveInputStream.matches(signature, signature.length - 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ant_invalidLength_kDjK5() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_ANT, 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy(TarConstants.VERSION_ANT, 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    assertFalse(TarArchiveInputStream.matches(signature, signature.length - 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMarkWithNullInputStream_UeYT11() {
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(null);
    try {
        tarInputStream.mark(10);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("inputStream must not be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithNullInputStream_VRBc0() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null);
    TarArchiveEntry tarArchiveEntry = tarArchiveInputStream.getNextTarEntry();
    assertNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_notNull_YUlG1() throws IOException {
    byte[] headerBuf = new byte[512];
    headerBuf[0] = 1;
    headerBuf[1] = 2;
    headerBuf[2] = 3;
    headerBuf[3] = 4;
    headerBuf[4] = 5;
    headerBuf[5] = 6;
    headerBuf[6] = 7;
    headerBuf[7] = 8;
    headerBuf[8] = 9;
    headerBuf[9] = 10;
    headerBuf[10] = 11;
    headerBuf[11] = 12;
    headerBuf[12] = 13;
    headerBuf[13] = 14;
    headerBuf[14] = 15;
    headerBuf[15] = 16;
    headerBuf[16] = 17;
    headerBuf[17] = 18;
    headerBuf[18] = 19;
    headerBuf[19] = 20;
    headerBuf[20] = 21;
    headerBuf[21] = 22;
    headerBuf[22] = 23;
    headerBuf[23] = 24;
    headerBuf[24] = 25;
    headerBuf[25] = 26;
    headerBuf[26] = 27;
    headerBuf[27] = 28;
    headerBuf[28] = 29;
    headerBuf[29] = 30;
    headerBuf[30] = 31;
    headerBuf[31] = 32;
    headerBuf[32] = 33;
    headerBuf[33] = 34;
    headerBuf[34] = 35;
    headerBuf[35] = 36;
    headerBuf[36] = 37;
    headerBuf[37] = 38;
    headerBuf[38] = 39;
    headerBuf[39] = 40;
    headerBuf[40] = 41;
    headerBuf[41] = 42;
    headerBuf[42] = 43;
    headerBuf[43] = 44;
    headerBuf[44] = 45;
    headerBuf[45] = 46;
    headerBuf[46] = 47;
    headerBuf[47] = 48;
    headerBuf[48] = 49;
    headerBuf[49] = 50;
    headerBuf[50] = 51;
    headerBuf[51] = 52;
    headerBuf[52] = 53;
    headerBuf[53] = 54;
    headerBuf[54] = 55;
    headerBuf[55] = 56;
    headerBuf[56] = 57;
    headerBuf[57] = 58;
    headerBuf[58] = 59;
    headerBuf[59] = 60;
    headerBuf[60] = 61;
    headerBuf[61] = 62;
    headerBuf[62] = 63;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntry_NotNull_VVjC1() throws IOException {
        byte[] headerBuf = new byte[512];
        headerBuf[0] = 1;
        headerBuf[1] = 2;
        headerBuf[2] = 3;
        headerBuf[3] = 4;
        headerBuf[4] = 5;
        headerBuf[5] = 6;
        headerBuf[6] = 7;
        headerBuf[7] = 8;
        headerBuf[8] = 9;
        headerBuf[9] = 10;
        headerBuf[10] = 11;
        headerBuf[11] = 12;
        headerBuf[12] = 13;
        headerBuf[13] = 14;
        headerBuf[14] = 15;
        headerBuf[15] = 16;
        headerBuf[16] = 17;
        headerBuf[17] = 18;
        headerBuf[18] = 19;
        headerBuf[19] = 20;
        headerBuf[20] = 21;
        headerBuf[21] = 22;
        headerBuf[22] = 23;
        headerBuf[23] = 24;
        headerBuf[24] = 25;
        headerBuf[25] = 26;
        headerBuf[26] = 27;
        headerBuf[27] = 28;
        headerBuf[28] = 29;
        headerBuf[29] = 30;
        headerBuf[30] = 31;
        headerBuf[31] = 32;
        headerBuf[32] = 33;
        headerBuf[33] = 34;
        headerBuf[34] = 35;
        headerBuf[35] = 36;
        headerBuf[36] = 37;
        headerBuf[37] = 38;
        headerBuf[38] = 39;
        headerBuf[39] = 40;
        headerBuf[40] = 41;
        headerBuf[41] = 42;
        headerBuf[42] = 43;
        headerBuf[43] = 44;
        headerBuf[44] = 45;
        headerBuf[45] = 46;
        headerBuf[46] = 47;
        headerBuf[47] = 48;
        headerBuf[48] = 49;
        headerBuf[49] = 50;
        headerBuf[50] = 51;
        headerBuf[51] = 52;
        headerBuf[52] = 53;
        headerBuf[53] = 54;
        headerBuf[54] = 55;
        headerBuf[55] = 56;
        headerBuf[56] = 57;
        headerBuf[57] = 58;
        headerBuf[58] = 59;
        headerBuf[59] = 60;
        headerBuf[60] = 61;
        headerBuf[61] = 62;
        headerBuf[62] = 63;
        headerBuf[63] = 64;
        headerBuf[64] = 65;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_NullInputStream_qtOl0() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 1024, "UTF-8");
    assertNull(tarArchiveInputStream.getNextTarEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_NullInput_UbeZ0() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 1024, "UTF-8");
    TarArchiveEntry tarArchiveEntry = tarArchiveInputStream.getNextTarEntry();
    assertNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_ValidInput_Lenient_QmXq9() throws IOException {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_NfjG0() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"));
    TarArchiveEntry tarArchiveEntry = tarArchiveInputStream.getNextTarEntry();
    assertNotNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithEmptyFile_LsRW1() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("empty.tar"));
    TarArchiveEntry tarArchiveEntry = tarArchiveInputStream.getNextTarEntry();
    assertNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithInvalidFile_GpcR2() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("invalid.tar"));
    TarArchiveEntry tarArchiveEntry = tarArchiveInputStream.getNextTarEntry();
    assertNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithEmptyBlockSize_fOOd4() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 0);
    TarArchiveEntry tarArchiveEntry = tarArchiveInputStream.getNextTarEntry();
    assertNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithInvalidBlockSize_bGVM5() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), -1);
    TarArchiveEntry tarArchiveEntry = tarArchiveInputStream.getNextTarEntry();
    assertNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithNullBlockSize_UCSO6() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), null);
    TarArchiveEntry tarArchiveEntry = tarArchiveInputStream.getNextTarEntry();
    assertNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithEmptyRecordSize_yMGR7() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 0, 0);
    TarArchiveEntry tarArchiveEntry = tarArchiveInputStream.getNextTarEntry();
    assertNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithInvalidRecordSize_TGgo8() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 0, -1);
    TarArchiveEntry tarArchiveEntry = tarArchiveInputStream.getNextTarEntry();
    assertNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithNullRecordSize_iurz9() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 0, null);
    TarArchiveEntry tarArchiveEntry = tarArchiveInputStream.getNextTarEntry();
    assertNull(tarArchiveEntry);
}
}