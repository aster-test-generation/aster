/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPUTF8_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_5_XJmF4() {
    String utf8 = "utf-8";
    int globalIndex = 4;
    CPUTF8 cputf8 = new CPUTF8(utf8, globalIndex);
    String expected = "UTF-8:" + utf8;
    String actual = cputf8.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_6_SfsS5() {
    String utf8 = "utf-8";
    int globalIndex = 5;
    CPUTF8 cputf8 = new CPUTF8(utf8, globalIndex);
    String expected = "UTF-8:" + utf8;
    String actual = cputf8.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_7_FfRf6() {
    String utf8 = "utf-8";
    int globalIndex = 6;
    CPUTF8 cputf8 = new CPUTF8(utf8, globalIndex);
    String expected = "UTF-8:" + utf8;
    String actual = cputf8.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_8_FJcx7() {
    String utf8 = "utf-8";
    int globalIndex = 7;
    CPUTF8 cputf8 = new CPUTF8(utf8, globalIndex);
    String expected = "UTF-8:" + utf8;
    String actual = cputf8.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_9_wlfB8() {
    String utf8 = "utf-8";
    int globalIndex = 8;
    CPUTF8 cputf8 = new CPUTF8(utf8, globalIndex);
    String expected = "UTF-8:" + utf8;
    String actual = cputf8.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_10_CXpy9() {
    String utf8 = "utf-8";
    int globalIndex = 9;
    CPUTF8 cputf8 = new CPUTF8(utf8, globalIndex);
    String expected = "UTF-8:" + utf8;
    String actual = cputf8.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGlobalIndex_CFHG0() {
    CPUTF8 cputf8 = new CPUTF8("utf8", 0);
    cputf8.setGlobalIndex(1);
    assertEquals(1, cputf8.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGlobalIndexWithNegativeIndex_hweY1() {
    CPUTF8 cputf8 = new CPUTF8("utf8", 0);
    cputf8.setGlobalIndex(-1);
    assertEquals(0, cputf8.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGlobalIndexWithLargeIndex_VWeT2() {
    CPUTF8 cputf8 = new CPUTF8("utf8", 0);
    cputf8.setGlobalIndex(1000);
    assertEquals(1000, cputf8.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnderlyingString_EmptyString_oszN0() {
    CPUTF8 cputf8 = new CPUTF8("");
    assertEquals("", cputf8.underlyingString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnderlyingString_NonEmptyString_sYjn1() {
    CPUTF8 cputf8 = new CPUTF8("hello");
    assertEquals("hello", cputf8.underlyingString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnderlyingString_NonEmptyStringWithGlobalIndex_cdCv2() {
    CPUTF8 cputf8 = new CPUTF8("hello", 1);
    assertEquals("hello", cputf8.underlyingString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnderlyingString_NullString_Ngtn3() {
    CPUTF8 cputf8 = new CPUTF8(null);
    assertEquals(null, cputf8.underlyingString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnderlyingString_EmptyStringWithGlobalIndex_kXio4() {
    CPUTF8 cputf8 = new CPUTF8("", 1);
    assertEquals("", cputf8.underlyingString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnderlyingString_NonEmptyStringWithInvalidGlobalIndex_tpxC5() {
    CPUTF8 cputf8 = new CPUTF8("hello", -1);
    assertEquals("hello", cputf8.underlyingString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnderlyingString_NullStringWithGlobalIndex_DlVU6() {
    CPUTF8 cputf8 = new CPUTF8(null, 1);
    assertEquals(null, cputf8.underlyingString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnderlyingString_EmptyStringWithInvalidGlobalIndex_SRRx7() {
    CPUTF8 cputf8 = new CPUTF8("", -1);
    assertEquals("", cputf8.underlyingString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnderlyingString_NullStringWithInvalidGlobalIndex_bWFQ8() {
    CPUTF8 cputf8 = new CPUTF8(null, -1);
    assertEquals(null, cputf8.underlyingString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteBody_NullDataOutputStream_fiZH7() throws IOException {
    String utf8 = "Hello, world!";
    int globalIndex = 0;
    CPUTF8 cputf8 = new CPUTF8(utf8, globalIndex);
    DataOutputStream dos = null;
    cputf8.writeBody(dos);
    assertNull(dos);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_OruP0_tVXU0() {
    CPUTF8 obj = new CPUTF8("test", 0);
    assertTrue(obj.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_iMUD1_OIhl0() {
    CPUTF8 obj1 = new CPUTF8("test", 0);
    CPUTF8 obj2 = new CPUTF8("test", 0);
    assertFalse(obj1.equals(obj2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_ovlc3_oRJU0() {
    CPUTF8 obj = new CPUTF8("test", 0);
    String str = "test";
    assertFalse(obj.equals(str));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_DifferentGlobalIndex_CWUT4_Pbhj0() {
    CPUTF8 obj1 = new CPUTF8("test", 1);
    CPUTF8 obj2 = new CPUTF8("test", 2);
    assertFalse(obj1.equals(obj2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_SameGlobalIndex_ADYR5_hdSm0() {
    CPUTF8 obj1 = new CPUTF8("test", 1);
    CPUTF8 obj2 = new CPUTF8("test", 1);
    assertTrue(obj1.equals(obj2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_2_QUFa1_NGou0() {
    String utf8 = "utf-8";
    int globalIndex = 1;
    CPUTF8 cputf8 = new CPUTF8(utf8);
    String expected = "UTF-8:" + utf8;
    String actual = cputf8.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_3_eJmK2_xIWz0() {
    String utf8 = "utf-8";
    int globalIndex = 2;
    CPUTF8 cputf8 = new CPUTF8(utf8, globalIndex);
    String expected = "UTF-8:" + utf8;
    String actual = cputf8.toString();
    assertEquals(expected, actual);
}
}