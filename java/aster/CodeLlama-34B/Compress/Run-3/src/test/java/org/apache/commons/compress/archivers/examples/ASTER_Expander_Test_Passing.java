/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.examples;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Path;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipFile;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Expander_Test_Passing {
@Mock
    private Expander expander;
@Mock
    SeekableByteChannel archive;
@Mock
    File targetDirectory;
@Mock
    CloseableConsumer consumer;
    private ZipFile mockZipFile;
    @Mock
    private Path mockPath;
    @Mock
    private ZipArchiveEntry mockZipArchiveEntry;
    @Mock
    private InputStream mockInputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithTarFileAndFile_MEnt0() throws IOException {
    Expander expander = new Expander();
    TarFile tarFile = new TarFile(new File("test.tar"), false);
    File targetDirectory = new File("target");
    expander.expand(tarFile, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_nullArchive_validTargetDirectory_jybe5_1() throws IOException, ArchiveException {
    InputStream archive = null;
    File targetDirectory = new File("target");
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_nullArchive_validTargetDirectory_jybe5_2() throws IOException, ArchiveException {
    InputStream archive = null;
    File targetDirectory = new File("target");
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_nullArchive_validTargetDirectory_jybe5_3() throws IOException, ArchiveException {
    InputStream archive = null;
    File targetDirectory = new File("target");
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertEquals(1, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_nullArchive_validTargetDirectory_jybe5_4() throws IOException, ArchiveException {
    InputStream archive = null;
    File targetDirectory = new File("target");
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertEquals("test.txt", targetDirectory.listFiles()[0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_nullArchive_nullTargetDirectory_ocxL6_1() throws IOException, ArchiveException {
    InputStream archive = null;
    File targetDirectory = null;
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_nullArchive_nullTargetDirectory_ocxL6_2() throws IOException, ArchiveException {
    InputStream archive = null;
    File targetDirectory = null;
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_nullArchive_nullTargetDirectory_ocxL6_3() throws IOException, ArchiveException {
    InputStream archive = null;
    File targetDirectory = null;
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertEquals(1, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_nullArchive_nullTargetDirectory_ocxL6_4() throws IOException, ArchiveException {
    InputStream archive = null;
    File targetDirectory = null;
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertEquals("test.txt", targetDirectory.listFiles()[0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithNullArchive_TNvX3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    InputStream archive = null;
    File targetDirectory = new File("target");
    try {
        expander.expand(format, archive, targetDirectory);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Archive cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_seYf0() throws IOException {
    Expander expander = new Expander();
    ZipFile archive = new ZipFile(new File("test.zip"));
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithNonExistentTargetDirectory_tzou1() throws IOException {
    Expander expander = new Expander();
    ZipFile archive = new ZipFile(new File("test.zip"));
    File targetDirectory = new File("target");
    targetDirectory.delete();
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_bICc0() {
        expander = new Expander();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandWithValidFormatAndArchiveAndTargetDirectory_botT1_1() throws IOException, ArchiveException {
        String format = "zip";
        File archive = new File("archive.zip");
        File targetDirectory = new File("target");
        expander.expand(format, archive, targetDirectory);
        assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandWithValidFormatAndArchiveAndTargetDirectory_botT1_2() throws IOException, ArchiveException {
        String format = "zip";
        File archive = new File("archive.zip");
        File targetDirectory = new File("target");
        expander.expand(format, archive, targetDirectory);
        assertTrue(targetDirectory.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandWithValidFormatAndArchiveAndTargetDirectory_botT1_3() throws IOException, ArchiveException {
        String format = "zip";
        File archive = new File("archive.zip");
        File targetDirectory = new File("target");
        expander.expand(format, archive, targetDirectory);
        assertEquals(1, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandWithInvalidFormat_ElbC2() throws IOException, ArchiveException {
        String format = "invalid";
        File archive = new File("archive.zip");
        File targetDirectory = new File("target");
        try {
            expander.expand(format, archive, targetDirectory);
            fail("Expected ArchiveException");
        } catch (ArchiveException e) {
            assertEquals("Invalid format: invalid", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandWithNonDirectoryTargetDirectory_UVqC4() throws IOException, ArchiveException {
        String format = "zip";
        File archive = new File("archive.zip");
        File targetDirectory = new File("target.txt");
        try {
            expander.expand(format, archive, targetDirectory);
            fail("Expected IOException");
        } catch (IOException e) {
            assertEquals("Target directory is not a directory: target.txt", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandWithNullFormat_gGdL5() throws IOException, ArchiveException {
        String format = null;
        File archive = new File("archive.zip");
        File targetDirectory = new File("target");
        try {
            expander.expand(format, archive, targetDirectory);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Format cannot be null", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandWithNullArchive_AibC6() throws IOException, ArchiveException {
        String format = "zip";
        File archive = null;
        File targetDirectory = new File("target");
        try {
            expander.expand(format, archive, targetDirectory);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Archive cannot be null", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandWithNullTargetDirectory_ZSvl7() throws IOException, ArchiveException {
        String format = "zip";
        File archive = new File("archive.zip");
        File targetDirectory = null;
        try {
            expander.expand(format, archive, targetDirectory);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Target directory cannot be null", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandWithEmptyFormat_EYHD8() throws IOException, ArchiveException {
        String format = "";
        File archive = new File("archive.zip");
        File targetDirectory = new File("target");
        try {
            expander.expand(format, archive, targetDirectory);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Format cannot be empty", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithNullArchive_ZmqB4() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    SeekableByteChannel archive = null;
    File targetDirectory = new File("target/directory");
    try {
        expander.expand(format, archive, targetDirectory);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("archive must not be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
        public void close_iLAC5() throws IOException {
        }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_QOgh0_1() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_QOgh0_2() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_QOgh0_3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertEquals(1, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_QOgh0_4() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertEquals("expanded_file.txt", targetDirectory.listFiles()[0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithNonExistentArchive_KLwD1() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("non_existent_archive.zip");
    File targetDirectory = new File("target");
    try {
        expander.expand(archive, targetDirectory);
        fail("Expected ArchiveException");
    } catch (ArchiveException e) {
        assertEquals("Archive file does not exist", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithNonExistentTargetDirectory_enWS2() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("archive.zip");
    File targetDirectory = new File("non_existent_target");
    try {
        expander.expand(archive, targetDirectory);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Target directory does not exist", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithInvalidArchive_DbxY3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("invalid_archive.zip");
    File targetDirectory = new File("target");
    try {
        expander.expand(archive, targetDirectory);
        fail("Expected ArchiveException");
    } catch (ArchiveException e) {
        assertEquals("Invalid archive file", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithInvalidTargetDirectory_HLkw4() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("archive.zip");
    File targetDirectory = new File("invalid_target");
    try {
        expander.expand(archive, targetDirectory);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Invalid target directory", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithEmptyArchive_escr5_1() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("empty_archive.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithEmptyArchive_escr5_2() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("empty_archive.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithEmptyArchive_escr5_3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("empty_archive.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertEquals(0, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithMultipleFilesInArchive_Ktwc6_1() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("multiple_files_archive.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithMultipleFilesInArchive_Ktwc6_2() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("multiple_files_archive.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithMultipleFilesInArchive_Ktwc6_3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("multiple_files_archive.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertEquals(2, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithMultipleFilesInArchive_Ktwc6_4() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("multiple_files_archive.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertEquals("file1.txt", targetDirectory.listFiles()[0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithMultipleFilesInArchive_Ktwc6_5() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("multiple_files_archive.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertEquals("file2.txt", targetDirectory.listFiles()[1].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testexpand_Z_SYlm0() throws Exception{
    expander = new Expander();
    expander.expand("format", archive, targetDirectory, consumer);
    verify(archive, times(1)).close();
    verify(targetDirectory, times(1)).mkdirs();
    verify(consumer, times(1)).accept(any());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_nullArchive_validTargetDirectory_jybe5() throws IOException, ArchiveException {
    InputStream archive = null;
    File targetDirectory = new File("target");
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
    assertTrue(targetDirectory.isDirectory());
    assertEquals(1, targetDirectory.listFiles().length);
    assertEquals("test.txt", targetDirectory.listFiles()[0].getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_nullArchive_nullTargetDirectory_ocxL6() throws IOException, ArchiveException {
    InputStream archive = null;
    File targetDirectory = null;
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
    assertTrue(targetDirectory.isDirectory());
    assertEquals(1, targetDirectory.listFiles().length);
    assertEquals("test.txt", targetDirectory.listFiles()[0].getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandWithValidFormatAndArchiveAndTargetDirectory_botT1() throws IOException, ArchiveException {
        String format = "zip";
        File archive = new File("archive.zip");
        File targetDirectory = new File("target");
        expander.expand(format, archive, targetDirectory);
        assertTrue(targetDirectory.exists());
        assertTrue(targetDirectory.isDirectory());
        assertEquals(1, targetDirectory.listFiles().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_QOgh0() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
    assertTrue(targetDirectory.isDirectory());
    assertEquals(1, targetDirectory.listFiles().length);
    assertEquals("expanded_file.txt", targetDirectory.listFiles()[0].getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithEmptyArchive_escr5() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("empty_archive.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
    assertTrue(targetDirectory.isDirectory());
    assertEquals(0, targetDirectory.listFiles().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithMultipleFilesInArchive_Ktwc6() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("multiple_files_archive.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
    assertTrue(targetDirectory.isDirectory());
    assertEquals(2, targetDirectory.listFiles().length);
    assertEquals("file1.txt", targetDirectory.listFiles()[0].getName());
    assertEquals("file2.txt", targetDirectory.listFiles()[1].getName());
}
}