/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.nio.file.attribute.FileTime;
import java.time.Instant;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TimeUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToUnixTime_nullFileTime_xkrT0() {
    long result = TimeUtils.toUnixTime(null);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToUnixTime_nonNullFileTime_oghz1() {
    FileTime fileTime = FileTime.from(1000000000, TimeUnit.SECONDS);
    long result = TimeUtils.toUnixTime(fileTime);
    assertEquals(1000000000, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_kiYT0_1() {
    FileTime unixTime = FileTime.fromMillis(1000000000000L);
    FileTime nonUnixTime = FileTime.fromMillis(1000000000001L);
    assertTrue(TimeUtils.isUnixTime(unixTime));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_kiYT0_2() {
    FileTime unixTime = FileTime.fromMillis(1000000000000L);
    FileTime nonUnixTime = FileTime.fromMillis(1000000000001L);
    assertFalse(TimeUtils.isUnixTime(nonUnixTime));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_kiYT0_3() {
    FileTime unixTime = FileTime.fromMillis(1000000000000L);
    FileTime nonUnixTime = FileTime.fromMillis(1000000000001L);
    assertFalse(TimeUtils.isUnixTime(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_ValidUnixTime_UOBM0() {
    long seconds = 1643744000; // 2022-01-28T12:00:00Z
    assertTrue(TimeUtils.isUnixTime(seconds));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_InvalidUnixTime_vwNw1() {
    long seconds = 1643744001; // 2022-01-28T12:00:01Z
    assertFalse(TimeUtils.isUnixTime(seconds));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_MinValue_HuTV2() {
    long seconds = Integer.MIN_VALUE;
    assertTrue(TimeUtils.isUnixTime(seconds));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_MaxValue_mscK3() {
    long seconds = Integer.MAX_VALUE;
    assertTrue(TimeUtils.isUnixTime(seconds));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_NegativeValue_qvYt4() {
    long seconds = -1;
    assertFalse(TimeUtils.isUnixTime(seconds));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_ZeroValue_YxCd5() {
    long seconds = 0;
    assertTrue(TimeUtils.isUnixTime(seconds));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_LargePositiveValue_lISy6() {
    long seconds = 10000000000L;
    assertTrue(TimeUtils.isUnixTime(seconds));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_LargeNegativeValue_xJjn7() {
    long seconds = -10000000000L;
    assertFalse(TimeUtils.isUnixTime(seconds));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_jqmX0() {
    Date date = new Date();
    long expected = FileTimes.toNtfsTime(date);
    long actual = TimeUtils.toNtfsTime(date);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTimeBeforeNtfsEpoch_fUJq1() {
    Date date = new Date(0);
    long expected = FileTimes.toNtfsTime(date);
    long actual = TimeUtils.toNtfsTime(date);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToFileTimeWithInvalidValue_Nsem5() {
    long ntfsTime = -1;
    try {
        TimeUtils.ntfsTimeToFileTime(ntfsTime);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid NTFS time value: -1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateToHundredNanos_1_oThg0() {
    FileTime fileTime = FileTime.from(Instant.ofEpochSecond(1000000000, 123456789));
    FileTime result = TimeUtils.truncateToHundredNanos(fileTime);
    assertEquals(FileTime.from(Instant.ofEpochSecond(1000000000, 123456789)), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateToHundredNanos_8_XTJP7() {
    FileTime fileTime = FileTime.from(Instant.ofEpochSecond(1000000000, 123456789));
    FileTime result = TimeUtils.truncateToHundredNanos(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTime_wCZG0() {
    long time = 1000000000;
    FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
    assertEquals(time, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTimeWithNegativeTime_XFYb1() {
    long time = -1000000000;
    FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
    assertEquals(time, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTimeWithZeroTime_Iuwa2() {
    long time = 0;
    FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
    assertEquals(time, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTimeWithMaxTime_ZPRp3() {
    long time = Long.MAX_VALUE;
    FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
    assertEquals(time, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTimeWithMinTime_Abif4() {
    long time = Long.MIN_VALUE;
    FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
    assertEquals(time, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTimeWithInvalidTime_yFpx5() {
    long time = -1;
    try {
        TimeUtils.unixTimeToFileTime(time);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid time: " + time, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDate_fileTimeNull_kyrD0() {
    FileTime fileTime = null;
    Date expected = null;
    Date actual = TimeUtils.toDate(fileTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDate_fileTimeNotNull_iAZK1() {
    FileTime fileTime = FileTime.fromMillis(1000);
    Date expected = new Date(1000);
    Date actual = TimeUtils.toDate(fileTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDate_fileTimeInvalid_dkTO2() {
    FileTime fileTime = FileTime.fromMillis(-1);
    Date expected = null;
    Date actual = TimeUtils.toDate(fileTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDate_fileTimeMaxValue_tJSn4() {
    FileTime fileTime = FileTime.fromMillis(Long.MAX_VALUE);
    Date expected = new Date(Long.MAX_VALUE);
    Date actual = TimeUtils.toDate(fileTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDate_fileTimeMinValue_wUds5() {
    FileTime fileTime = FileTime.fromMillis(Long.MIN_VALUE);
    Date expected = new Date(Long.MIN_VALUE);
    Date actual = TimeUtils.toDate(fileTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDate_fileTimeZero_edhH6() {
    FileTime fileTime = FileTime.fromMillis(0);
    Date expected = new Date(0);
    Date actual = TimeUtils.toDate(fileTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDate_fileTimeNegative_riWB7() {
    FileTime fileTime = FileTime.fromMillis(-1000);
    Date expected = new Date(-1000);
    Date actual = TimeUtils.toDate(fileTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDate_fileTimeInvalid_positive_KkwX10() {
    FileTime fileTime = FileTime.fromMillis(1);
    Date expected = null;
    Date actual = TimeUtils.toDate(fileTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDate_fileTimeInvalid_zero_pwRv11() {
    FileTime fileTime = FileTime.fromMillis(0);
    Date expected = null;
    Date actual = TimeUtils.toDate(fileTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDate_fileTimeInvalid_maxValue_FWRF12() {
    FileTime fileTime = FileTime.fromMillis(Long.MAX_VALUE);
    Date expected = null;
    Date actual = TimeUtils.toDate(fileTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDate_fileTimeInvalid_minValue_eWBW13() {
    FileTime fileTime = FileTime.fromMillis(Long.MIN_VALUE);
    Date expected = null;
    Date actual = TimeUtils.toDate(fileTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_ValidInput_KZOW0() {
    long javaTime = 1643744000000L; // 2022-02-01 00:00:00 UTC
    long expectedNtfsTime = 132534720000000000L; // 2022-02-01 00:00:00 UTC in NTFS format
    long actualNtfsTime = TimeUtils.toNtfsTime(javaTime);
    assertEquals(expectedNtfsTime, actualNtfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_InvalidInput_grCJ1() {
    long javaTime = -1L;
    long expectedNtfsTime = -1L;
    long actualNtfsTime = TimeUtils.toNtfsTime(javaTime);
    assertEquals(expectedNtfsTime, actualNtfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_MaxValue_FZJU2() {
    long javaTime = Long.MAX_VALUE;
    long expectedNtfsTime = Long.MAX_VALUE;
    long actualNtfsTime = TimeUtils.toNtfsTime(javaTime);
    assertEquals(expectedNtfsTime, actualNtfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDate_OxlZ0() {
    long ntfsTime = 1234567890;
    Date expected = new Date(ntfsTime);
    Date actual = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDateWithNegativeValue_tbnK1() {
    long ntfsTime = -1234567890;
    Date expected = new Date(ntfsTime);
    Date actual = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDateWithZeroValue_qqEK2() {
    long ntfsTime = 0;
    Date expected = new Date(ntfsTime);
    Date actual = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDateWithMaxValue_zZcI3() {
    long ntfsTime = Long.MAX_VALUE;
    Date expected = new Date(ntfsTime);
    Date actual = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDateWithMinValue_rVyV4() {
    long ntfsTime = Long.MIN_VALUE;
    Date expected = new Date(ntfsTime);
    Date actual = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_InvalidType_tjLk8_apkk0() {
    long seconds = 1643744000L;
    assertFalse(TimeUtils.isUnixTime(seconds));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToFileTime_gmYr0_pDiY0() {
    long ntfsTime = 1234567890;
    FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
    assertEquals(1234567890, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToFileTimeWithNegativeValue_jHMk1_rEdY0() {
    long ntfsTime = -1234567890;
    FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
    assertEquals(ntfsTime, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToFileTimeWithZeroValue_nCey2_BrMP0() {
    long ntfsTime = 0;
    FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
    assertEquals(0, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToFileTimeWithMaxValue_ffae3_uPiv0() {
    long ntfsTime = Long.MAX_VALUE;
    FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
    assertEquals(Long.MAX_VALUE, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToFileTimeWithMinValue_eVkh4_Byyb0() {
    long ntfsTime = Long.MIN_VALUE;
    FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
    assertEquals(Long.MIN_VALUE, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_kiYT0() {
    FileTime unixTime = FileTime.fromMillis(1000000000000L);
    assertTrue(TimeUtils.isUnixTime(unixTime));
    FileTime nonUnixTime = FileTime.fromMillis(1000000000001L);
    assertFalse(TimeUtils.isUnixTime(nonUnixTime));
    assertFalse(TimeUtils.isUnixTime(null));
}
}