/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_emptySignature_byyU0() {
    byte[] signature = new byte[0];
    int length = 0;
    assertFalse(CpioArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nullSignature_nbCE1() {
    byte[] signature = null;
    int length = 0;
    assertFalse(CpioArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_LWoj2() {
    byte[] signature = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    int length = 6;
    assertFalse(CpioArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextCPIOEntryWithNullInputStream_cPhb6() throws IOException {
CpioArchiveInputStream cpioInputStream = new CpioArchiveInputStream(null);
CpioArchiveEntry entry = cpioInputStream.getNextCPIOEntry();
assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_validSignature_differentOrder_lLyn4_UYpS0() {
    byte[] signature = new byte[] { (byte) 0xc7, (byte) 0x71, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x30 };
    int length = 6;
    assertTrue(CpioArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_validSignature_differentLength_differentOrder_nIbR6_zVft0() {
    byte[] signature = new byte[] { (byte) 0xc7, (byte) 0x71, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x30, (byte) 0x31 };
    int length = 7;
    assertTrue(CpioArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_differentLength_differentOrder_Iutj8_TJRP0() {
    byte[] signature = new byte[] { (byte) 0xc7, (byte) 0x71, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x30, (byte) 0x31, (byte) 0x32 };
    int length = 8;
    assertFalse(CpioArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_differentLength_differentOrder_differentValue_gTRN9_meVw0() {
    byte[] signature = new byte[] { (byte) 0xc7, (byte) 0x71, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x30, (byte) 0x31, (byte) 0x33 };
    int length = 8;
    assertFalse(CpioArchiveInputStream.matches(signature, length));
}
}