/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.deflate;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DeflateParameters_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressionLevel_default_Gocz0() {
    DeflateParameters deflateParameters = new DeflateParameters();
    int compressionLevel = deflateParameters.getCompressionLevel();
    assertEquals(compressionLevel, 6);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWithZlibHeader_Default_SnXm2() {
    DeflateParameters deflateParameters = new DeflateParameters();
    assertFalse(deflateParameters.withZlibHeader());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressionLevel_ValidLevel_Tqbe0() {
    DeflateParameters deflateParameters = new DeflateParameters();
    deflateParameters.setCompressionLevel(5);
    assertEquals(5, deflateParameters.getCompressionLevel());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressionLevel_InvalidLevel_uVMp1() {
    DeflateParameters deflateParameters = new DeflateParameters();
    try {
        deflateParameters.setCompressionLevel(11);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid Deflate compression level: 11", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressionLevel_custom_XVFj1_ncbN0() {
    DeflateParameters deflateParameters = new DeflateParameters();
    deflateParameters.setCompressionLevel(10);
    int compressionLevel = deflateParameters.getCompressionLevel();
    assertEquals(compressionLevel, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressionLevel_invalid_xVbX2_axfd0() {
    DeflateParameters deflateParameters = new DeflateParameters();
    int compressionLevel = deflateParameters.getCompressionLevel();
    assertEquals(compressionLevel, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressionLevel_negative_jDDT6_OvYm0() {
    DeflateParameters deflateParameters = new DeflateParameters();
    deflateParameters.setCompressionLevel(-1);
    int compressionLevel = deflateParameters.getCompressionLevel();
    assertEquals(compressionLevel, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressionLevel_tooLarge_Yeav7_gxka0() {
    DeflateParameters deflateParameters = new DeflateParameters();
    deflateParameters.setCompressionLevel(11);
    int compressionLevel = deflateParameters.getCompressionLevel();
    assertEquals(compressionLevel, 10);
}
}