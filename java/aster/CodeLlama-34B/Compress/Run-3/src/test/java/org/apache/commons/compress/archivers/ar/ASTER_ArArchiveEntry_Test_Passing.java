/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import java.io.File;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_vbWK0() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectSameName_fCwu1() {
    ArArchiveEntry entry1 = new ArArchiveEntry("test", 10);
    ArArchiveEntry entry2 = new ArArchiveEntry("test", 10);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectDifferentName_obdW2() {
    ArArchiveEntry entry1 = new ArArchiveEntry("test1", 10);
    ArArchiveEntry entry2 = new ArArchiveEntry("test2", 10);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullName_ZeBQ3() {
    ArArchiveEntry entry = new ArArchiveEntry(null, 10);
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLength_zjPO5() {
    ArArchiveEntry entry1 = new ArArchiveEntry("test", 10);
    ArArchiveEntry entry2 = new ArArchiveEntry("test", 20);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentUserId_myZE6() {
    ArArchiveEntry entry1 = new ArArchiveEntry("test", 10, 1, 1, 1, 1);
    ArArchiveEntry entry2 = new ArArchiveEntry("test", 10, 2, 1, 1, 1);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentGroupId_mIjO7() {
    ArArchiveEntry entry1 = new ArArchiveEntry("test", 10, 1, 1, 1, 1);
    ArArchiveEntry entry2 = new ArArchiveEntry("test", 10, 1, 2, 1, 1);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentMode_sYeT8() {
    ArArchiveEntry entry1 = new ArArchiveEntry("test", 10, 1, 1, 1, 1);
    ArArchiveEntry entry2 = new ArArchiveEntry("test", 10, 1, 1, 2, 1);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLastModified_axhY9() {
    ArArchiveEntry entry1 = new ArArchiveEntry("test", 10, 1, 1, 1, 1);
    ArArchiveEntry entry2 = new ArArchiveEntry("test", 10, 1, 1, 1, 2);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryWithNameAndLength_MkAQ0() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryWithNameLengthUserIdGroupIdModeAndLastModified_qJIY2() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10, 1, 1, 1, 1);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryWithInputFileAndEntryName_ThdW3() {
    File inputFile = new File("test");
    String entryName = "test";
    ArArchiveEntry entry = new ArArchiveEntry(inputFile, entryName);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate1_qiTP0() {
ArArchiveEntry entry = new ArArchiveEntry("test.txt", 1000);
Date expected = new Date(1000 * 1000);
Date actual = entry.getLastModifiedDate();
assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate2_kWJa1() {
ArArchiveEntry entry = new ArArchiveEntry("test.txt", -1000);
Date expected = new Date(1000 * -1000);
Date actual = entry.getLastModifiedDate();
assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate3_kldh2() {
ArArchiveEntry entry = new ArArchiveEntry(null, 1000);
Date expected = new Date(1000 * 1000);
Date actual = entry.getLastModifiedDate();
assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate4_OtAx3() {
ArArchiveEntry entry = new ArArchiveEntry("", 1000);
Date expected = new Date(1000 * 1000);
Date actual = entry.getLastModifiedDate();
assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId_ValidInput_ReturnsExpectedValue_ynFR0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 10, 10, 10, 10);
    int expectedGroupId = 10;
    int actualGroupId = entry.getGroupId();
    assertEquals(expectedGroupId, actualGroupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId_InvalidInput_ReturnsDefaultValue_ODUp1() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 10, 10, 10, 10);
    int expectedGroupId = 0;
    int actualGroupId = entry.getGroupId();
    assertEquals(expectedGroupId, actualGroupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize1_eVDG0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100L);
    assertEquals(100L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize3_sSZF2() {
    File inputFile = new File("test.txt");
    ArArchiveEntry entry = new ArArchiveEntry(inputFile, "test.txt");
    assertEquals(inputFile.length(), entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize4_KQee3() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100L, 100, 100, 100, 100L);
    assertEquals(100L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserId_Imdl0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
    assertEquals(0, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserIdWithNonZeroUserId_ekVJ1() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 1, 0, 0, 0);
    assertEquals(1, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserIdWithNegativeUserId_DfZJ2() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, -1, 0, 0, 0);
    assertEquals(-1, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserIdWithMaxIntUserId_AhSL3() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, Integer.MAX_VALUE, 0, 0, 0);
    assertEquals(Integer.MAX_VALUE, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameIsNull_woYO0() {
    ArArchiveEntry entry = new ArArchiveEntry(null, 0);
    assertEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameIsEmpty_kgFT1() {
    ArArchiveEntry entry = new ArArchiveEntry("", 0);
    assertEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameIsNotEmpty_jvBE2() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 0);
    assertNotEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameIsNullAndLengthIsNotZero_MANp3() {
    ArArchiveEntry entry = new ArArchiveEntry(null, 10);
    assertNotEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithValidName_DTBo0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
    assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithInvalidName_ffxD1() {
    ArArchiveEntry entry = new ArArchiveEntry("", 100);
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithNullName_OLqZ2() {
    ArArchiveEntry entry = new ArArchiveEntry(null, 100);
    assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithLongName_amuY3() {
    ArArchiveEntry entry = new ArArchiveEntry("test_long_name.txt", 100);
    assertEquals("test_long_name.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_DwwU0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
    assertEquals(100, entry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithLongName_LZdP1() {
    ArArchiveEntry entry = new ArArchiveEntry("test_with_long_name.txt", 100);
    assertEquals(100, entry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithUserId_NChC2() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 1000, 1000, 0644, 1000000000);
    assertEquals(100, entry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithFile_vsGc3() {
    File file = new File("test.txt");
    ArArchiveEntry entry = new ArArchiveEntry(file, "test.txt");
    assertEquals(file.length(), entry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode1_fefR0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
    assertEquals(100, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode3_TGTv2() {
    File inputFile = new File("test.txt");
    ArArchiveEntry entry = new ArArchiveEntry(inputFile, "test.txt");
    assertEquals(100, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode4_ZroE3() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 1000, 1000, 100, 1000);
    assertEquals(100, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModified_WithNameAndLength_sFTs0() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    assertEquals(10, entry.getLastModified());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModified_WithNameLengthUserIdGroupIdModeAndLastModified_XUdF2() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10, 1, 1, 0, 1000);
    assertEquals(1000, entry.getLastModified());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModified_WithInputFileAndEntryName_tSZd3() {
    File inputFile = new File("test.txt");
    String entryName = "test";
    ArArchiveEntry entry = new ArArchiveEntry(inputFile, entryName);
    assertEquals(inputFile.lastModified(), entry.getLastModified());
}
}