/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentConstantPoolArrayCache_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArrayIsCached_emptyArray_xMDb0() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[0];
    assertFalse(cache.arrayIsCached(array));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArrayIsCached_nonEmptyArray_yihB1() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[]{"a", "b", "c"};
    assertTrue(cache.arrayIsCached(array));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArrayIsCached_nullArray_nYNH2() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = null;
    assertFalse(cache.arrayIsCached(array));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIndexesForArrayKey_emptyArray_nNJf0() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[0];
    String key = "key";
    List<Integer> indexes = cache.indexesForArrayKey(array, key);
    assertEquals(0, indexes.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIndexesForArrayKey_nonEmptyArray_hGSo1_1() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[]{"key1", "key2", "key3"};
    String key = "key2";
    List<Integer> indexes = cache.indexesForArrayKey(array, key);
    assertEquals(1, indexes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIndexesForArrayKey_nonEmptyArray_hGSo1_2() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[]{"key1", "key2", "key3"};
    String key = "key2";
    List<Integer> indexes = cache.indexesForArrayKey(array, key);
    assertEquals(1, indexes.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIndexesForArrayKey_nullArray_OPip2() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = null;
    String key = "key";
    List<Integer> indexes = cache.indexesForArrayKey(array, key);
    assertEquals(0, indexes.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIndexesForArrayKey_nullKey_Linm3() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[]{"key1", "key2", "key3"};
    String key = null;
    List<Integer> indexes = cache.indexesForArrayKey(array, key);
    assertEquals(0, indexes.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIndexesForArrayKey_nonEmptyArray_hGSo1() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[]{"key1", "key2", "key3"};
    String key = "key2";
    List<Integer> indexes = cache.indexesForArrayKey(array, key);
    assertEquals(1, indexes.size());
    assertEquals(1, indexes.get(0).intValue());
}
}