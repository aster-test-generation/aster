/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BHSDCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_XMZf0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertTrue(codec.equals(codec));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_rzNf1() {
    BHSDCodec codec1 = new BHSDCodec(1, 2, 3, 4);
    BHSDCodec codec2 = new BHSDCodec(1, 2, 3, 4);
    assertFalse(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentB_MXHC2() {
    BHSDCodec codec1 = new BHSDCodec(1, 2, 3, 4);
    BHSDCodec codec2 = new BHSDCodec(2, 2, 3, 4);
    assertFalse(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentH_VfIB3() {
    BHSDCodec codec1 = new BHSDCodec(1, 2, 3, 4);
    BHSDCodec codec2 = new BHSDCodec(1, 3, 3, 4);
    assertFalse(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentS_ilUd4() {
    BHSDCodec codec1 = new BHSDCodec(1, 2, 3, 4);
    BHSDCodec codec2 = new BHSDCodec(1, 2, 4, 4);
    assertFalse(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargest1_FgsR0() {
    BHSDCodec codec = new BHSDCodec(8, 4);
    assertEquals(15, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargest2_coQf1() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2);
    assertEquals(15, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargest3_qKIO2() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2, 1);
    assertEquals(15, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSmallest_Uxfx0() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2, 1);
    assertEquals(1, codec.smallest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSmallestWithDifferentValues_nHkK1() {
    BHSDCodec codec = new BHSDCodec(16, 8, 4, 2);
    assertEquals(1, codec.smallest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetB_1_tNRV0() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    assertEquals(1, codec.getB());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetB_2_yIpM1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertEquals(1, codec.getB());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetB_3_fJXi2() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    assertEquals(1, codec.getB());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bhsdCodec_dmvA0() {
    BHSDCodec bhsdCodec = new BHSDCodec(8, 16);
    String expected = "(8,16)";
    String actual = bhsdCodec.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bhsdCodec_s_MNxT1() {
    BHSDCodec bhsdCodec = new BHSDCodec(8, 16, 32);
    String expected = "(8,16,32)";
    String actual = bhsdCodec.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bhsdCodec_d_jwUV2() {
    BHSDCodec bhsdCodec = new BHSDCodec(8, 16, 0, 32);
    String expected = "(8,16,0,32)";
    String actual = bhsdCodec.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bhsdCodec_allZero_UcLm4() {
    BHSDCodec bhsdCodec = new BHSDCodec(0, 0, 0, 0);
    String expected = "(0,0,0,0)";
    String actual = bhsdCodec.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bhsdCodec_bAndHNonZero_qBZX5() {
    BHSDCodec bhsdCodec = new BHSDCodec(8, 16, 0, 0);
    String expected = "(8,16,0,0)";
    String actual = bhsdCodec.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bhsdCodec_bHsNonZero_mcvh6() {
    BHSDCodec bhsdCodec = new BHSDCodec(8, 16, 32, 0);
    String expected = "(8,16,32,0)";
    String actual = bhsdCodec.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bhsdCodec_bHsDNonZero_qzwW7() {
    BHSDCodec bhsdCodec = new BHSDCodec(8, 16, 32, 64);
    String expected = "(8,16,32,64)";
    String actual = bhsdCodec.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bhsdCodec_bAndHNonZero_sAndDZero_tcnV8() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_True_ztMi0() {
    BHSDCodec codec = new BHSDCodec(8, 16, 1, 1);
    assertTrue(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_True_DifferentB_DZXu2() {
    BHSDCodec codec = new BHSDCodec(16, 16, 1, 1);
    assertTrue(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_True_DifferentH_ixhy3() {
    BHSDCodec codec = new BHSDCodec(8, 32, 1, 1);
    assertTrue(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_True_DifferentS_FeSH4() {
    BHSDCodec codec = new BHSDCodec(8, 16, 2, 1);
    assertTrue(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_True_DifferentD_wagO5() {
    BHSDCodec codec = new BHSDCodec(8, 16, 1, 2);
    assertTrue(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_False_DifferentB_OKJm6() {
    BHSDCodec codec = new BHSDCodec(16, 16, 0, 1);
    assertFalse(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_False_DifferentH_RZqH7() {
    BHSDCodec codec = new BHSDCodec(8, 32, 0, 1);
    assertFalse(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_False_DifferentS_Yxmi8() {
    BHSDCodec codec = new BHSDCodec(8, 16, 0, 2);
    assertFalse(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDelta_True_DgaE0() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2, 1);
    assertTrue(codec.isDelta());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDelta_Negative_zakf2() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2, -1);
    assertFalse(codec.isDelta());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode1_DSXi0() {
    BHSDCodec bhsdCodec = new BHSDCodec(1, 2, 3, 4);
    int expected = ((1 * 37 + 2) * 37 + 3) * 37 + 4;
    int actual = bhsdCodec.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode2_YCkF1() {
    BHSDCodec bhsdCodec = new BHSDCodec(5, 6, 7);
    int expected = ((5 * 37 + 6) * 37 + 7) * 37 + 0;
    int actual = bhsdCodec.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode3_MnJw2() {
    BHSDCodec bhsdCodec = new BHSDCodec(8, 9, 10, 11);
    int expected = ((8 * 37 + 9) * 37 + 10) * 37 + 11;
    int actual = bhsdCodec.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_1_AHQa0() {
    BHSDCodec codec = new BHSDCodec(8, 4);
    assertEquals(16, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_2_ErPK1() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2, 1);
    assertEquals(8, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_3_gOVr2() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2);
    assertEquals(4, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS_1_Pshh0() {
    BHSDCodec codec = new BHSDCodec(8, 4);
    assertEquals(4, codec.getS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS_2_Laub1() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2);
    assertEquals(2, codec.getS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS_3_TiNP2() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2, 1);
    assertEquals(1, codec.getS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH_1_AQof0() {
    BHSDCodec bhsdCodec = new BHSDCodec(8, 4);
    int h = bhsdCodec.getH();
    assertEquals(4, h);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH_2_hUwq1() {
    BHSDCodec bhsdCodec = new BHSDCodec(8, 4, 2);
    int h = bhsdCodec.getH();
    assertEquals(4, h);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH_3_FEUL2() {
    BHSDCodec bhsdCodec = new BHSDCodec(8, 4, 2, 1);
    int h = bhsdCodec.getH();
    assertEquals(4, h);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode1_xjYb0() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16);
    byte[] expected = new byte[] {0x01, 0x02};
    byte[] actual = codec.encode(1);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode2_YzsQ1() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16, 32);
    byte[] expected = new byte[] {0x01, 0x02, 0x03};
    byte[] actual = codec.encode(1);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode3_tubJ2() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16, 32, 64);
    byte[] expected = new byte[] {0x01, 0x02, 0x03, 0x04};
    byte[] actual = codec.encode(1);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetL_BHSDCodec_ISAE0() {
BHSDCodec bhsdCodec = new BHSDCodec(1, 2);
int l = bhsdCodec.getL();
assertEquals(1, l);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetL_BHSDCodec_s_UBlP1() {
BHSDCodec bhsdCodec = new BHSDCodec(1, 2, 3);
int l = bhsdCodec.getL();
assertEquals(1, l);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetL_BHSDCodec_s_d_heig2() {
BHSDCodec bhsdCodec = new BHSDCodec(1, 2, 3, 4);
int l = bhsdCodec.getL();
assertEquals(1, l);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeSmallestValueMinusOne_hkVe3_QqwL0() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2, 1);
    assertFalse(codec.encodes(codec.getL() - 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_1_HPcE0_hjcT0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    try {
        byte[] result = codec.encode(1, 1);
        assertArrayEquals(new byte[] { 1 }, result);
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_2_WEmr1_KQzW0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    try {
        byte[] result = codec.encode(2, 1);
        assertArrayEquals(new byte[] { 2 }, result);
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_3_ztqh2_cXlA0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    try {
        byte[] result = codec.encode(3, 1);
        assertArrayEquals(new byte[] { 3 }, result);
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_4_scdh3_CWrw0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    try {
        byte[] result = codec.encode(4, 1);
        assertArrayEquals(new byte[] { 4 }, result);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_6_ZNUw5_drau0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    try {
        byte[] result = codec.encode(6, 1);
        assertArrayEquals(new byte[] { 6 }, result);
    } catch (Pack200Exception e) {
        fail("Exception thrown: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_7_btVb6_FMRz0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    try {
        byte[] result = codec.encode(7, 1);
        assertArrayEquals(new byte[] { 7 }, result);
    } catch (Pack200Exception e) {
        fail("Exception thrown: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_8_mfNi7_PYrf1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    try {
        byte[] result = codec.encode(8, 1);
        assertArrayEquals(new byte[] { 8 }, result);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_10_SgUK9_adim0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    try {
        byte[] result = codec.encode(10, 1);
        assertArrayEquals(new byte[] { 10 }, result);
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_11_kFsX10_tLXv0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    try {
        byte[] result = codec.encode(11, 1);
        assertArrayEquals(new byte[] { 11 }, result);
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_12_AdgX11_mQHp0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    try {
        byte[] result = codec.encode(12, 1);
        assertArrayEquals(new byte[] { 12 }, result);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_13_jkfV12_qsbl0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    try {
        byte[] result = codec.encode(13, 1);
        assertArrayEquals(new byte[] { 13 }, result);
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
}