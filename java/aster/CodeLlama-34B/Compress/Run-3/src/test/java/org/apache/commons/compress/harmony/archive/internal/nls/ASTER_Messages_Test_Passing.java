/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.archive.internal.nls;
import java.util.Locale;
import java.util.ResourceBundle;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Messages_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_nullBundle_HtCH0() {
        String msg = "Hello, World!";
        String result = Messages.getString(msg);
        assertEquals(msg, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_validBundle_LKWd1() {
        String msg = "Hello, World!";
        String result = Messages.getString(msg);
        assertNotNull(result);
        assertEquals("Missing message: " + msg, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_nullMessage_OXsZ3() {
        String result = Messages.getString(null);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_emptyMessage_vBbJ4() {
        String result = Messages.getString("");
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_invalidMessage_pKPA5() {
        String result = Messages.getString("Invalid message");
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_validMessage_OWpY6() {
        String msg = "Hello, World!";
        String result = Messages.getString(msg);
        assertNotNull(result);
        assertEquals(msg, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_nullBundleAndMessage_iRIF7() {
        String result = Messages.getString(null, null);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_nullBundleAndEmptyMessage_abef8() {
        String result = Messages.getString(null, "");
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_nullBundleAndInvalidMessage_SLQU9() {
        String result = Messages.getString(null, "Invalid message");
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_emptyBundleAndMessage_PdQT10() {
        String result = Messages.getString("", "Hello, World!");
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_emptyBundleAndEmptyMessage_awqF11() {
        String result = Messages.getString("", "");
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_emptyBundleAndInvalidMessage_arnF12() {
        String result = Messages.getString("", "Invalid message");
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_invalidBundleAndMessage_LwhH13() {
        String result = Messages.getString("Invalid bundle", "Hello, World!");
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_invalidBundleAndEmptyMessage_Wzma14() {
        String result = Messages.getString("Invalid bundle", "");
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_invalidBundleAndInvalidMessage_wEzp15() {
        String result = Messages.getString("Invalid bundle", "Invalid message");
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_validBundleAndMessage_cldn16() {
        String msg = "Hello, World!";
        String result = Messages.getString("Valid bundle", msg);
        assertNotNull(result);
        assertEquals(msg, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_validBundleAndEmptyMessage_Wlpc17() {
        String result = Messages.getString("Valid bundle", "");
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_validBundleAndInvalidMessage_NXsP18() {
        String result = Messages.getString("Valid bundle", "Invalid message");
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObject_HxFb0() {
        String msg = "Hello, {0}!";
        Object arg = "world";
        String expected = "Hello, world!";
        String actual = Messages.getString(msg, arg);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArray_SqpH1() {
        String msg = "Hello, {0} and {1}!";
        Object[] args = new Object[] { "world", "universe" };
        String expected = "Hello, world and universe!";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithNull_TNZV2() {
        String msg = "Hello, {0} and {1}!";
        Object[] args = new Object[] { "world", null };
        String expected = "Hello, world and null!";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithEmptyString_Xhgj3() {
        String msg = "Hello, {0} and {1}!";
        Object[] args = new Object[] { "world", "" };
        String expected = "Hello, world and !";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithMultipleNulls_KEem4() {
        String msg = "Hello, {0} and {1}!";
        Object[] args = new Object[] { null, null };
        String expected = "Hello, null and null!";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithMultipleEmptyStrings_YRJt5() {
        String msg = "Hello, {0} and {1}!";
        Object[] args = new Object[] { "", "" };
        String expected = "Hello,  and !";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithMixedNullsAndEmptyStrings_gYum6() {
        String msg = "Hello, {0} and {1}!";
        Object[] args = new Object[] { null, "" };
        String expected = "Hello, null and !";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithMixedEmptyStringsAndNulls_jYyx7() {
        String msg = "Hello, {0} and {1}!";
        Object[] args = new Object[] { "", null };
        String expected = "Hello,  and null!";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithMultipleMixedNullsAndEmptyStrings_vUTG8() {
        String msg = "Hello, {0} and {1}!";
        Object[] args = new Object[] { null, "", null, "" };
        String expected = "Hello, null and null and null and !";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithMultipleMixedEmptyStringsAndNulls_Wvxx9() {
        String msg = "Hello, {0} and {1}!";
        Object[] args = new Object[] { "", null, "", null };
        String expected = "Hello,  and null and  and null!";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormat_EmptyString_IamR0() {
        String result = Messages.format("", new Object[0]);
        assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormat_NoArguments_cUVc1() {
        String result = Messages.format("Hello, World!", new Object[0]);
        assertEquals("Hello, World!", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormat_OneArgument_WtAg2() {
        String result = Messages.format("Hello, {0}!", new Object[]{"John"});
        assertEquals("Hello, John!", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormat_TwoArguments_FqSR3() {
        String result = Messages.format("Hello, {0} {1}!", new Object[]{"John", "Doe"});
        assertEquals("Hello, John Doe!", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormat_ThreeArguments_GQBa4() {
        String result = Messages.format("Hello, {0} {1} {2}!", new Object[]{"John", "Doe", "Jr."});
        assertEquals("Hello, John Doe Jr.!", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormat_EscapedBraces_SwOv5() {
        String result = Messages.format("Hello, \\{0\\}!", new Object[]{"John"});
        assertEquals("Hello, {0}!", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormat_MissingArgument_DTDu6() {
        String result = Messages.format("Hello, {0}!", new Object[0]);
        assertEquals("Hello, <missing argument>!", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormat_InvalidArgument_AcDI7() {
        String result = Messages.format("Hello, {0}!", new Object[]{"John", "Doe"});
        assertEquals("Hello, John!", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormat_NullArgument_ENoE8() {
        String result = Messages.format("Hello, {0}!", new Object[]{null});
        assertEquals("Hello, <null>!", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormat_EmptyArgument_gfeZ9() {
        String result = Messages.format("Hello, {0}!", new Object[]{""});
        assertEquals("Hello, !", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormat_NullFormat_iFxX11() {
        String result = Messages.format(null, new Object[]{"John"});
        assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormat_EmptyFormat_gTjN12() {
        String result = Messages.format("", new Object[]{"John"});
        assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormat_NullArguments_WBQS13() {
        String result = Messages.format("Hello, {0}!", null);
        assertEquals("Hello, <null>!", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormat_NullAndEmptyArguments_KiKI16() {
        String result = Messages.format("Hello, {0}!", new Object[]{null, ""});
        assertEquals("Hello, <null>!", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_withIntArg_kzwe0() {
    String msg = "Hello, {0}!";
    int arg = 10;
    String expected = "Hello, 10!";
    String actual = Messages.getString(msg, arg);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_withStringArg_Anal1() {
    String msg = "Hello, {0}!";
    String arg = "world";
    String expected = "Hello, world!";
    String actual = Messages.getString(msg, arg);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_withNullArg_oEEB2() {
    String msg = "Hello, {0}!";
    String arg = null;
    String expected = "Hello, null!";
    String actual = Messages.getString(msg, arg);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_withEmptyArg_sMbJ3() {
    String msg = "Hello, {0}!";
    String arg = "";
    String expected = "Hello, !";
    String actual = Messages.getString(msg, arg);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_withMultipleArgs_EHSg4() {
    String msg = "Hello, {0} and {1}!";
    String arg1 = "John";
    String arg2 = "Doe";
    String expected = "Hello, John and Doe!";
    String actual = Messages.getString(msg, arg1, arg2);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_withInvalidFormat_NzmQ5() {
    String msg = "Hello, {0}!";
    String arg = "John";
    String expected = "Hello, John!";
    String actual = Messages.getString(msg, arg);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_withNullMsg_agDj7() {
    String msg = null;
    String arg = "John";
    String expected = null;
    String actual = Messages.getString(msg, arg);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_withEmptyMsg_Lkck8() {
    String msg = "";
    String arg = "John";
    String expected = "";
    String actual = Messages.getString(msg, arg);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_withNullArgs_wXkU10() {
    String msg = "Hello, {0}!";
    String arg1 = null;
    String arg2 = null;
    String expected = "Hello, null!";
    String actual = Messages.getString(msg, arg1, arg2);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_withEmptyArgs_yYpe11() {
    String msg = "Hello, {0}!";
    String arg1 = "";
    String arg2 = "";
    String expected = "Hello, !";
    String actual = Messages.getString(msg, arg1, arg2);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_withInvalidArgs_eODi12() {
    String msg = "Hello, {0}!";
    String arg1 = "John";
    String arg2 = "Doe";
    String expected = "Hello, John and Doe!";
    String actual = Messages.getString(msg, arg1, arg2);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_withTwoArguments_dRwK0() {
        String msg = "Hello, {0} and {1}!";
        Object arg1 = "John";
        Object arg2 = "Jane";
        String expected = "Hello, John and Jane!";
        String actual = Messages.getString(msg, arg1, arg2);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndChar_FYKy0() {
        String expected = "Hello, World!";
        String actual = Messages.getString("Hello, %s!", 'W');
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArray_KpFn1() {
        String expected = "Hello, World!";
        String actual = Messages.getString("Hello, %s!", new Object[] { "World" });
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithMultipleArguments_TuBo2() {
        String expected = "Hello, World!";
        String actual = Messages.getString("Hello, %s!", new Object[] { "World", "!" });
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithNullArguments_xpGi3() {
        String expected = "Hello, null!";
        String actual = Messages.getString("Hello, %s!", new Object[] { null });
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithEmptyArguments_kSst4() {
        String expected = "Hello, !";
        String actual = Messages.getString("Hello, %s!", new Object[] {});
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithInvalidArguments_XKdd5() {
        String expected = "Hello, !";
        String actual = Messages.getString("Hello, %s!", new Object[] { "World", "!" });
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithNullString_Poid6() {
        String expected = "null";
        String actual = Messages.getString(null, new Object[] { "World" });
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithEmptyString_Kqrk7() {
        String expected = "";
        String actual = Messages.getString("", new Object[] { "World" });
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithNullObjectArray_BNwe9() {
        String expected = "Hello, null!";
        String actual = Messages.getString("Hello, %s!", null);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithNullStringAndNullObjectArray_lAlx12() {
        String expected = "null";
        String actual = Messages.getString(null, null);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithEmptyStringAndEmptyObjectArray_DsGN13() {
        String expected = "";
        String actual = Messages.getString("", new Object[] {});
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNullBundle_zohw0() {
        String msg = "Hello, World!";
        Object[] args = new Object[] { "John", "Doe" };
        String expected = "Hello, John Doe!";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNullMessage_bIyS3() {
        String msg = null;
        Object[] args = new Object[] { "John", "Doe" };
        String expected = null;
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNullArgs_RZPs4() {
        String msg = "Hello, World!";
        Object[] args = null;
        String expected = "Hello, World!";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithEmptyArgs_PKbq5() {
        String msg = "Hello, World!";
        Object[] args = new Object[] {};
        String expected = "Hello, World!";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_validLocaleAndResource_wndv0() {
    Locale locale = new Locale("en", "US");
    String resource = "messages";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNotNull(bundle);
    assertEquals(locale, bundle.getLocale());
    assertEquals(resource, bundle.getBaseBundleName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_invalidLocale_cleu1() {
    Locale locale = new Locale("invalid", "US");
    String resource = "messages";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNull(bundle);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_invalidResource_pRCC2() {
    Locale locale = new Locale("en", "US");
    String resource = "invalid";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNull(bundle);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_nullLocale_jNrM3() {
    String resource = "messages";
    ResourceBundle bundle = Messages.setLocale(null, resource);
    assertNull(bundle);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_nullResource_olEk4() {
    Locale locale = new Locale("en", "US");
    ResourceBundle bundle = Messages.setLocale(locale, null);
    assertNull(bundle);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_nullLocaleAndResource_eJCR5() {
    ResourceBundle bundle = Messages.setLocale(null, null);
    assertNull(bundle);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_differentLocale_rAKk6() {
    Locale locale = new Locale("fr", "FR");
    String resource = "messages";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNotNull(bundle);
    assertEquals(locale, bundle.getLocale());
    assertEquals(resource, bundle.getBaseBundleName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_differentResource_VGZi7() {
    Locale locale = new Locale("en", "US");
    String resource = "different";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNotNull(bundle);
    assertEquals(locale, bundle.getLocale());
    assertEquals(resource, bundle.getBaseBundleName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_differentLocaleAndResource_behN8() {
    Locale locale = new Locale("fr", "FR");
    String resource = "different";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNotNull(bundle);
    assertEquals(locale, bundle.getLocale());
    assertEquals(resource, bundle.getBaseBundleName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_validBundle_LKWd1_1() {
        String msg = "Hello, World!";
        String result = Messages.getString(msg);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_validBundle_LKWd1_2() {
        String msg = "Hello, World!";
        String result = Messages.getString(msg);
        assertEquals("Missing message: " + msg, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_validBundleAndMessage_cldn16_1() {
        String msg = "Hello, World!";
        String result = Messages.getString("Valid bundle", msg);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_validBundleAndMessage_cldn16_2() {
        String msg = "Hello, World!";
        String result = Messages.getString("Valid bundle", msg);
        assertEquals(msg, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_validLocaleAndResource_wndv0_1() {
    Locale locale = new Locale("en", "US");
    String resource = "messages";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNotNull(bundle);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_validLocaleAndResource_wndv0_2() {
    Locale locale = new Locale("en", "US");
    String resource = "messages";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertEquals(locale, bundle.getLocale());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_validLocaleAndResource_wndv0_3() {
    Locale locale = new Locale("en", "US");
    String resource = "messages";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertEquals(resource, bundle.getBaseBundleName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_differentLocale_rAKk6_1() {
    Locale locale = new Locale("fr", "FR");
    String resource = "messages";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNotNull(bundle);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_differentLocale_rAKk6_2() {
    Locale locale = new Locale("fr", "FR");
    String resource = "messages";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertEquals(locale, bundle.getLocale());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_differentLocale_rAKk6_3() {
    Locale locale = new Locale("fr", "FR");
    String resource = "messages";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertEquals(resource, bundle.getBaseBundleName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_differentResource_VGZi7_1() {
    Locale locale = new Locale("en", "US");
    String resource = "different";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNotNull(bundle);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_differentResource_VGZi7_2() {
    Locale locale = new Locale("en", "US");
    String resource = "different";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertEquals(locale, bundle.getLocale());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_differentResource_VGZi7_3() {
    Locale locale = new Locale("en", "US");
    String resource = "different";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertEquals(resource, bundle.getBaseBundleName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_differentLocaleAndResource_behN8_1() {
    Locale locale = new Locale("fr", "FR");
    String resource = "different";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNotNull(bundle);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_differentLocaleAndResource_behN8_2() {
    Locale locale = new Locale("fr", "FR");
    String resource = "different";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertEquals(locale, bundle.getLocale());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_differentLocaleAndResource_behN8_3() {
    Locale locale = new Locale("fr", "FR");
    String resource = "different";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertEquals(resource, bundle.getBaseBundleName());}
}