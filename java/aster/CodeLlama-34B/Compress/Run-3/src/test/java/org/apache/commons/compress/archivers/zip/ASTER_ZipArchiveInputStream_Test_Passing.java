/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.ZipEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveInputStream_Test_Passing {
private byte[] skipBuf = new byte[1024];
private long uncompressedCount;
private boolean hitCentralDirectory;
private boolean useUnicodeExtraFields;
private boolean closed;
private boolean hasDataDescriptor;
private int entriesRead;
private InputStream inputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_LFH_SIG_FzvR0() {
    byte[] signature = new byte[4];
    signature[0] = (byte) 0x50;
    signature[1] = (byte) 0x4b;
    signature[2] = (byte) 0x03;
    signature[3] = (byte) 0x04;
    assertTrue(ZipArchiveInputStream.matches(signature, 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_EOCD_SIG_KdtC1() {
    byte[] signature = new byte[4];
    signature[0] = (byte) 0x50;
    signature[1] = (byte) 0x4b;
    signature[2] = (byte) 0x05;
    signature[3] = (byte) 0x06;
    assertTrue(ZipArchiveInputStream.matches(signature, 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_DD_SIG_Ssro2() {
    byte[] signature = new byte[4];
    signature[0] = (byte) 0x50;
    signature[1] = (byte) 0x4b;
    signature[2] = (byte) 0x07;
    signature[3] = (byte) 0x08;
    assertTrue(ZipArchiveInputStream.matches(signature, 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_SINGLE_SEGMENT_SPLIT_MARKER_Khbe3() {
    byte[] signature = new byte[4];
    signature[0] = (byte) 0x50;
    signature[1] = (byte) 0x4b;
    signature[2] = (byte) 0x09;
    signature[3] = (byte) 0x0a;
    assertTrue(ZipArchiveInputStream.matches(signature, 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_sTrW4() {
    byte[] signature = new byte[4];
    signature[0] = (byte) 0x01;
    signature[1] = (byte) 0x02;
    signature[2] = (byte) 0x03;
    signature[3] = (byte) 0x04;
    assertFalse(ZipArchiveInputStream.matches(signature, 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidLength_goQx5() {
    byte[] signature = new byte[4];
    signature[0] = (byte) 0x50;
    signature[1] = (byte) 0x4b;
    signature[2] = (byte) 0x03;
    signature[3] = (byte) 0x04;
    assertFalse(ZipArchiveInputStream.matches(signature, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipPositiveValue_Imlb0() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, true);
    long skipped = zipInputStream.skip(5);
    assertEquals(5, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipNegativeValue_AKjZ1() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, true);
    try {
        zipInputStream.skip(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipZeroValue_XZLb2() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, true);
    long skipped = zipInputStream.skip(0);
    assertEquals(0, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipLargeValue_fRUi3() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, true);
    long skipped = zipInputStream.skip(10);
    assertEquals(10, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithoutEncoding_avZm5() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), null, true, true, true);
    long skipped = zipInputStream.skip(5);
    assertEquals(5, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithoutUseUnicodeExtraFields_iQAX7() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", false, true, true);
    long skipped = zipInputStream.skip(5);
    assertEquals(5, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithoutAllowStoredEntriesWithDataDescriptor_rZOE9() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, false, true);
    long skipped = zipInputStream.skip(5);
    assertEquals(5, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextZipEntry_evuz0() throws IOException {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextZipEntryWithClosedStream_NOtm2() throws IOException {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        zipArchiveInputStream.close();
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry4_WSBt3() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zipArchiveInputStream.getNextZipEntry();
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry5_SkHI4() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zipArchiveInputStream.getNextZipEntry();
    zipArchiveInputStream.getNextZipEntry();
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry6_ndan5() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zipArchiveInputStream.getNextZipEntry();
    zipArchiveInputStream.getNextZipEntry();
    zipArchiveInputStream.getNextZipEntry();
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry7_hvxM6() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zipArchiveInputStream.getNextZipEntry();
    zipArchiveInputStream.getNextZipEntry();
    zipArchiveInputStream.getNextZipEntry();
    zipArchiveInputStream.getNextZipEntry();
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry8_jSLQ7() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zipArchiveInputStream.getNextZipEntry();
    zipArchiveInputStream.getNextZipEntry();
    zipArchiveInputStream.getNextZipEntry();
    zipArchiveInputStream.getNextZipEntry();
    zipArchiveInputStream.getNextZipEntry();
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry9_QHfc8() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zipArchiveInputStream.getNextZipEntry();
    zipArchiveInputStream.getNextZipEntry();
    zipArchiveInputStream.getNextZipEntry();
    zipArchiveInputStream.getNextZipEntry();
    zipArchiveInputStream.getNextZipEntry();
    zipArchiveInputStream.getNextZipEntry();
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_yJNy0() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry entry = zipInputStream.getNextZipEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_firstEntry_gBVD0() throws IOException {
    ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry entry = zis.getNextZipEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_notFirstEntry_fkEh1() throws IOException {
    ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zis.getNextZipEntry();
    ZipArchiveEntry entry = zis.getNextZipEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_centralDirectory_YJHp2() throws IOException {
    ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zis.getNextZipEntry();
    zis.getNextZipEntry();
    ZipArchiveEntry entry = zis.getNextZipEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_validSignature_ZnzR4() throws IOException {
    ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zis.getNextZipEntry();
    zis.getNextZipEntry();
    ZipArchiveEntry entry = zis.getNextZipEntry();
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_utf8Flag_voyk7() throws IOException {
    ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zis.getNextZipEntry();
    zis.getNextZipEntry();
    ZipArchiveEntry entry = zis.getNextZipEntry();
    assertTrue(entry.getNameSource() == ZipArchiveEntry.NameSource.NAME_WITH_EFS_FLAG);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_extraData_apCD9() throws IOException {
    ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zis.getNextZipEntry();
    zis.getNextZipEntry();
    ZipArchiveEntry entry = zis.getNextZipEntry();
    assertNotNull(entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry2_pqMl1() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry3_QUxU2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true);
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry4_jxYt3() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true);
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry5_rcZK4() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCount_Shck0() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    assertEquals(0, zip.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCountWithEncoding_NwGw1() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    assertEquals(0, zip.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCountWithUseUnicodeExtraFields_HbnW2() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true);
    assertEquals(0, zip.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCountWithAllowStoredEntriesWithDataDescriptor_zzDr3() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true);
    assertEquals(0, zip.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData_ValidZipArchiveEntry_CompressedSize_STORED_allowStoredEntriesWithDataDescriptor_false_HyaY4() {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, true);
    ZipArchiveEntry zipEntry = new ZipArchiveEntry("test.txt");
    zipEntry.setCompressedSize(100);
    zipEntry.setMethod(ZipEntry.STORED);
    assertFalse(zipInputStream.canReadEntryData(zipEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInput_wcLj0() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    int read = zipInputStream.read(buffer, offset, length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInputAndOffset_PRdw1() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 5;
    int length = 10;
    int read = zipInputStream.read(buffer, offset, length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInputAndLength_qnvQ2() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 5;
    int read = zipInputStream.read(buffer, offset, length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInputAndOffsetAndLength_XyaR3() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 5;
    int length = 5;
    int read = zipInputStream.read(buffer, offset, length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidBufferOffsetAndLength3_mRzp2() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 10;
    int length = 0;
    int read = zipInputStream.read(buffer, offset, length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInput_dtpS0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInputAndOffset_awQz1() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 5;
    int length = 10;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInputAndLength_JtXN2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 5;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInputAndOffsetAndLength_JyHa3() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 5;
    int length = 5;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInputAndOffsetAndLengthAndEncoding_HkWi4() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 5;
    int length = 5;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadStored_tyPy0() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(10, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadStoredWithEncoding_gMik1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    String encoding = "UTF-8";
    boolean useUnicodeExtraFields = true;
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream, encoding, useUnicodeExtraFields);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(10, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadStoredWithEncodingAndAllowStoredEntriesWithDataDescriptor_TzSd2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    String encoding = "UTF-8";
    boolean useUnicodeExtraFields = true;
    boolean allowStoredEntriesWithDataDescriptor = true;
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream, encoding, useUnicodeExtraFields, allowStoredEntriesWithDataDescriptor);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(10, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadStoredWithEncodingAndAllowStoredEntriesWithDataDescriptorAndSkipSplitSig_FagA3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    String encoding = "UTF-8";
    boolean useUnicodeExtraFields = true;
    boolean allowStoredEntriesWithDataDescriptor = true;
    boolean skipSplitSig = true;
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream, encoding, useUnicodeExtraFields, allowStoredEntriesWithDataDescriptor, skipSplitSig);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(10, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadStoredWithEncodingAndSkipSplitSig_cmmc4() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    String encoding = "UTF-8";
    boolean useUnicodeExtraFields = true;
    boolean skipSplitSig = true;
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream, encoding, useUnicodeExtraFields, skipSplitSig);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(10, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInputAndOffset_qVay1() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    byte[] buffer = new byte[10];
    int offset = 5;
    int length = 5;
    int read = zipInputStream.read(buffer, offset, length);
    assertEquals(5, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInputAndLength_DsZv2() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 5;
    int read = zipInputStream.read(buffer, offset, length);
    assertEquals(5, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidInput_qRnK4() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    int read = zipInputStream.read(buffer, offset, length);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidInputAndOffset_lEmA5() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 5;
    int length = 5;
    int read = zipInputStream.read(buffer, offset, length);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidInputAndLength_vWBw6() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 5;
    int read = zipInputStream.read(buffer, offset, length);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInputAndStoredEntry_uncc8() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    int read = zipInputStream.read(buffer, offset, length);
    assertEquals(10, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidInput_ZUqO4() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = null;
    int offset = 0;
    int length = 10;
    try {
        zipInputStream.read(buffer, offset, length);
        fail("Should throw NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("buffer is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidInputAndOffset_USqr5() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = null;
    int offset = 5;
    int length = 10;
    try {
        zipInputStream.read(buffer, offset, length);
        fail("Should throw NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("buffer is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidInputAndLength_mzXE6() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = null;
    int offset = 0;
    int length = 5;
    try {
        zipInputStream.read(buffer, offset, length);
        fail("Should throw NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("buffer is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidInputAndOffsetAndLength_ZfaX7() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = null;
    int offset = 5;
    int length = 5;
    try {
        zipInputStream.read(buffer, offset, length);
        fail("Should throw NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("buffer is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidInputAndOffset_mpWF3() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 5;
    int length = 10;
    int read = zipInputStream.read(buffer, offset, length);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInputAndOffsetAndLengthAndEncoding_HpLu8() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 5;
    int length = 5;
    int read = zipInputStream.read(buffer, offset, length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry3_pQVb2_gwjj0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
    zipArchiveInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry7_BavI6_vbMQ0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zipArchiveInputStream.read(new byte[0]);
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryWithEmptyArchiveAndSkipSplitSig_pvSa2_Shia0() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    ZipArchiveEntry entry = zipInputStream.getNextZipEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryWithEmptyArchiveAndNoSkipSplitSig_ShAV3_xLbB0() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, false);
    ZipArchiveEntry entry = zipInputStream.getNextZipEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryWithEmptyArchiveAndNoSkipSplitSigAndNoUseUnicodeExtraFields_WvSq4_klxs0() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", false, true, false);
    ZipArchiveEntry entry = zipInputStream.getNextZipEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryWithEmptyArchiveAndNoSkipSplitSigAndNoUseUnicodeExtraFieldsAndNoAllowStoredEntriesWithDataDescriptor_uJqG5_HKOs0() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", false, false, false);
    ZipArchiveEntry entry = zipInputStream.getNextZipEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryWithEmptyArchiveAndNoSkipSplitSigAndNoUseUnicodeExtraFieldsAndNoAllowStoredEntriesWithDataDescriptorAndNoEncoding_mwTT6_oUid0() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), null, false, false, false);
    ZipArchiveEntry entry = zipInputStream.getNextZipEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryWithEmptyArchiveAndNoSkipSplitSigAndNoUseUnicodeExtraFieldsAndNoAllowStoredEntriesWithDataDescriptorAndNoEncodingAndNoInput_vTlD7_BWUd0() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(null, null, false, false, false);
    ZipArchiveEntry entry = zipInputStream.getNextZipEntry();
    assertNull(entry);
}
}