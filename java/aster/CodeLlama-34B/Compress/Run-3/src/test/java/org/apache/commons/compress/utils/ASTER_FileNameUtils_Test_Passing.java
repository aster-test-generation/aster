/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.nio.file.Path;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileNameUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_null_XZnW0() {
    String fileName = null;
    String extension = FileNameUtils.getExtension(fileName);
    assertNull(extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_empty_PpZZ1() {
    String fileName = "";
    String extension = FileNameUtils.getExtension(fileName);
    assertNull(extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_noExtension_mmgU2() {
    String fileName = "file";
    String extension = FileNameUtils.getExtension(fileName);
    assertNull(extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_withExtension_jXAM3() {
    String fileName = "file.txt";
    String extension = FileNameUtils.getExtension(fileName);
    assertEquals("txt", extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_withMultipleExtensions_iTft4() {
    String fileName = "file.txt.gz";
    String extension = FileNameUtils.getExtension(fileName);
    assertEquals("gz", extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_withDotInMiddle_zcbJ5() {
    String fileName = "file.name.with.dot.txt";
    String extension = FileNameUtils.getExtension(fileName);
    assertEquals("txt", extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_withDotAtEnd_yvIT6() {
    String fileName = "file.name.with.dot.";
    String extension = FileNameUtils.getExtension(fileName);
    assertNull(extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_withInvalidCharacters_hffR7() {
    String fileName = "file.name.with.invalid.characters";
    String extension = FileNameUtils.getExtension(fileName);
    assertNull(extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_withValidCharacters_Vqrx8() {
    String fileName = "file.name.with.valid.characters";
    String extension = FileNameUtils.getExtension(fileName);
    assertEquals("characters", extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_withMixedCase_idSM9() {
    String fileName = "file.Name.with.Mixed.CASE";
    String extension = FileNameUtils.getExtension(fileName);
    assertEquals("CASE", extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_withSpecialCharacters_ijKE10() {
    String fileName = "file.name.with.special.characters";
    String extension = FileNameUtils.getExtension(fileName);
    assertEquals("characters", extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_withMultipleDots_Syyc11() {
    String fileName = "file.name.with.multiple.dots";
    String extension = FileNameUtils.getExtension(fileName);
    assertEquals("dots", extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_withDotAtBeginning_jtdW12() {
    String fileName = ".file.name.with.dot.at.beginning";
    String extension = FileNameUtils.getExtension(fileName);
    assertEquals("dot.at.beginning", extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_withDotAtEndAndBeginning_lmhk13() {
    String fileName = ".file.name.with.dot.at.end.and.beginning";
    String extension = FileNameUtils.getExtension(fileName);
    assertEquals("dot.at.end.and.beginning", extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_withDotAtEndAndBeginningAndMultipleDots_CVah14() {
    String fileName = ".file.name.with.dot.at.end.and.beginning.and.multiple.dots";
    String extension = FileNameUtils.getExtension(fileName);
    assertEquals("dot.at.end.and.beginning.and.multiple.dots", extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_withDotAtEndAndBeginningAndMultipleDotsAndInvalidCharacters_obNY15() {
    String fileName = ".file.name.with.dot.at.end.and.beginning.and.multiple.dots.and.invalid.characters";
    String extension = FileNameUtils.getExtension(fileName);
    assertEquals("dot.at.end.and.beginning.and.multiple.dots.and.invalid.characters", extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_NullFileName_cIEf0() {
    String fileName = null;
    String baseName = FileNameUtils.getBaseName(fileName);
    assertNull(baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_ValidFileName_wLSF1() {
    String fileName = "file.txt";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("file", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_EmptyFileName_umpS2() {
    String fileName = "";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_InvalidFileName_Yayh3() {
    String fileName = "file.txt.pdf";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("file.txt", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_FileNameWithoutExtension_vRCr4() {
    String fileName = "file";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("file", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_FileNameWithMultipleDots_nEdu5() {
    String fileName = "file.txt.pdf.doc";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("file.txt.pdf", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_FileNameWithSpaces_BJAc6() {
    String fileName = "file name.txt";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("file name", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_FileNameWithSpecialCharacters_vKcp7() {
    String fileName = "file$name.txt";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("file$name", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_FileNameWithMultipleExtensions_IZiN8() {
    String fileName = "file.txt.pdf.docx";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("file.txt.pdf", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_FileNameWithoutExtensionAndMultipleDots_xLQg9() {
    String fileName = "file...txt";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("file", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_FileNameWithMultipleExtensionsAndMultipleDots_hbxq10() {
    String fileName = "file.txt.pdf.docx...";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("file.txt.pdf", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_FileNameWithSpecialCharactersAndMultipleDots_kGxx11() {
    String fileName = "file$name.txt...";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("file$name", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_FileNameWithMultipleExtensionsAndSpecialCharacters_teTM12() {
    String fileName = "file.txt.pdf.docx$";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("file.txt.pdf", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_FileNameWithMultipleExtensionsAndSpecialCharactersAndMultipleDots_FnDl13() {
    String fileName = "file.txt.pdf.docx$...";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("file.txt.pdf", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_FileNameWithMultipleExtensionsAndSpecialCharactersAndMultipleDotsAndSpaces_EUpX14() {
    String fileName = "file.txt.pdf.docx$... file";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("file.txt.pdf", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_nullPath_enyu0() {
    Path path = null;
    String baseName = FileNameUtils.getBaseName(path);
    assertNull(baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtensionWithNullPath_wVAV0() {
    Path path = null;
    String extension = FileNameUtils.getExtension(path);
    assertNull(extension);
}
}