/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.deflate;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DeflateCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithNullInputStream_qFrc5() throws IOException {
    DeflateParameters parameters = new DeflateParameters();
    DeflateCompressorInputStream inputStream = new DeflateCompressorInputStream(null, parameters);
    long n = 10;
    try {
        inputStream.skip(n);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("inputStream must not be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_notMagic1_notMagic2_afIw6() {
    byte[] signature = new byte[] { (byte) 0x00, (byte) 0x00 };
    int length = signature.length;
    assertFalse(DeflateCompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCountWithNullStream_hBUZ3() {
    DeflateParameters parameters = new DeflateParameters();
    DeflateCompressorInputStream compressor = new DeflateCompressorInputStream(null, parameters);
    long compressedCount = compressor.getCompressedCount();
    assertEquals(0, compressedCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_magic1_magic2b_xAqR1_DSyI0() {
    byte[] signature = new byte[] { (byte)0x78, (byte)0x9C };
    int length = signature.length;
    assertTrue(DeflateCompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_magic1_magic2c_ZXqJ2_UhGU0() {
    byte[] signature = new byte[] { (byte)0x78, (byte)0x9c };
    int length = signature.length;
    assertTrue(DeflateCompressorInputStream.matches(signature, length));
}
}