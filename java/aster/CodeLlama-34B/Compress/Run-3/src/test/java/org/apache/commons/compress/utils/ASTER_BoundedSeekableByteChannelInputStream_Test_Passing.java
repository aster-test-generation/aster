/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BoundedSeekableByteChannelInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_yYaN0_1() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    BoundedSeekableByteChannelInputStream inputStream = new BoundedSeekableByteChannelInputStream(0, 10, channel);
    ByteBuffer buf = ByteBuffer.allocate(10);
    int read = inputStream.read(0, buf);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(11, buf);
    assertEquals(10, read);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_yYaN0_2() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    BoundedSeekableByteChannelInputStream inputStream = new BoundedSeekableByteChannelInputStream(0, 10, channel);
    ByteBuffer buf = ByteBuffer.allocate(10);
    int read = inputStream.read(0, buf);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(11, buf);
    assertEquals(0, buf.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_yYaN0_3() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    BoundedSeekableByteChannelInputStream inputStream = new BoundedSeekableByteChannelInputStream(0, 10, channel);
    ByteBuffer buf = ByteBuffer.allocate(10);
    int read = inputStream.read(0, buf);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(11, buf);
    assertEquals(10, buf.limit());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_yYaN0_4() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    BoundedSeekableByteChannelInputStream inputStream = new BoundedSeekableByteChannelInputStream(0, 10, channel);
    ByteBuffer buf = ByteBuffer.allocate(10);
    int read = inputStream.read(0, buf);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(11, buf);
    assertEquals(-1, read);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_yYaN0_7() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    BoundedSeekableByteChannelInputStream inputStream = new BoundedSeekableByteChannelInputStream(0, 10, channel);
    ByteBuffer buf = ByteBuffer.allocate(10);
    int read = inputStream.read(0, buf);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(11, buf);
    assertEquals(5, read);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_yYaN0_9() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    BoundedSeekableByteChannelInputStream inputStream = new BoundedSeekableByteChannelInputStream(0, 10, channel);
    ByteBuffer buf = ByteBuffer.allocate(10);
    int read = inputStream.read(0, buf);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(11, buf);
    assertEquals(5, buf.limit());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_yYaN0_14() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    BoundedSeekableByteChannelInputStream inputStream = new BoundedSeekableByteChannelInputStream(0, 10, channel);
    ByteBuffer buf = ByteBuffer.allocate(10);
    int read = inputStream.read(0, buf);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(11, buf);
    assertEquals(10, buf.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_yYaN0_19() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    BoundedSeekableByteChannelInputStream inputStream = new BoundedSeekableByteChannelInputStream(0, 10, channel);
    ByteBuffer buf = ByteBuffer.allocate(10);
    int read = inputStream.read(0, buf);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(11, buf);
    assertEquals(0, read);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_yYaN0_26() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    BoundedSeekableByteChannelInputStream inputStream = new BoundedSeekableByteChannelInputStream(0, 10, channel);
    ByteBuffer buf = ByteBuffer.allocate(10);
    int read = inputStream.read(0, buf);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(5);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[10]);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    read = inputStream.read(11, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(0, buf);
    buf = ByteBuffer.allocate(10);
    buf.put(new byte[5]);
    read = inputStream.read(11, buf);
    assertEquals(5, buf.position());}
}