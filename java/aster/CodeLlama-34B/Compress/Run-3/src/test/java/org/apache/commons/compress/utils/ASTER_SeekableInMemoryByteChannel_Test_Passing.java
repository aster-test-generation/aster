/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.nio.ByteBuffer;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SeekableInMemoryByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArray_Empty_UXaO0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    byte[] result = channel.array();
    assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArray_NonEmpty_zhXd1() {
    byte[] data = new byte[] { 1, 2, 3, 4, 5 };
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    byte[] result = channel.array();
    assertEquals(data.length, result.length);
    for (int i = 0; i < data.length; i++) {
        assertEquals(data[i], result[i]);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate_ValidSize_gHEL0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.truncate(5);
    assertEquals(5, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate_NegativeSize_FzVQ1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    try {
        channel.truncate(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Size has to be in range 0.. " + Integer.MAX_VALUE, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate_SizeGreaterThanMaxValue_ocHO2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    try {
        channel.truncate(Integer.MAX_VALUE + 1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Size has to be in range 0.. " + Integer.MAX_VALUE, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_DefaultConstructor_aFex0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    assertTrue(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_SizeConstructor_Qolf1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertTrue(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_DataConstructor_YhuE2() {
    byte[] data = new byte[10];
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    assertTrue(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_DefaultConstructor_LineCoverage_lhfh4() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    assertTrue(channel.isOpen());
    assertFalse(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_SizeConstructor_LineCoverage_cjJc5() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertTrue(channel.isOpen());
    assertFalse(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_DataConstructor_LineCoverage_YgwD6() {
    byte[] data = new byte[10];
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    assertTrue(channel.isOpen());
    assertFalse(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_ClosedChannel_LineCoverage_oNxh7() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    channel.close();
    assertFalse(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_DefaultConstructor_BranchCoverage_HUJO8() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    assertTrue(channel.isOpen());
    assertFalse(channel.isOpen());
    channel.close();
    assertFalse(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_SizeConstructor_BranchCoverage_AkNo9() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertTrue(channel.isOpen());
    assertFalse(channel.isOpen());
    channel.close();
    assertFalse(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_DataConstructor_BranchCoverage_WTLG10() {
    byte[] data = new byte[10];
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    assertTrue(channel.isOpen());
    assertFalse(channel.isOpen());
    channel.close();
    assertFalse(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteToEnd_GCaO0() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer b = ByteBuffer.allocate(5);
    b.put((byte) 1);
    b.put((byte) 2);
    b.put((byte) 3);
    b.put((byte) 4);
    b.put((byte) 5);
    b.flip();
    int written = channel.write(b);
    assertEquals(5, written);
    assertEquals(5, channel.size());
    assertEquals(5, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteToMiddle_dPqh1() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer b = ByteBuffer.allocate(5);
    b.put((byte) 1);
    b.put((byte) 2);
    b.put((byte) 3);
    b.put((byte) 4);
    b.put((byte) 5);
    b.flip();
    channel.position(3);
    int written = channel.write(b);
    assertEquals(5, written);
    assertEquals(8, channel.size());
    assertEquals(8, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteToBeginning_DphP2() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer b = ByteBuffer.allocate(5);
    b.put((byte) 1);
    b.put((byte) 2);
    b.put((byte) 3);
    b.put((byte) 4);
    b.put((byte) 5);
    b.flip();
    channel.position(0);
    int written = channel.write(b);
    assertEquals(5, written);
    assertEquals(5, channel.size());
    assertEquals(5, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteToNewChannel_tGFC3() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    ByteBuffer b = ByteBuffer.allocate(5);
    b.put((byte) 1);
    b.put((byte) 2);
    b.put((byte) 3);
    b.put((byte) 4);
    b.put((byte) 5);
    b.flip();
    int written = channel.write(b);
    assertEquals(5, written);
    assertEquals(5, channel.size());
    assertEquals(5, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_ValidPosition_ntQC0() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.position(5);
    assertEquals(5, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_InvalidPosition_AWBD1() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    try {
        channel.position(-1);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Position has to be in range 0.. " + Integer.MAX_VALUE, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_MaxPosition_dzaZ2() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.position(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_defaultConstructor_Ywlp0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    long position = channel.position();
    assertEquals(0, position);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_sizeConstructor_LCGk1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    long position = channel.position();
    assertEquals(0, position);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_dataConstructor_tosa2() {
    byte[] data = new byte[10];
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    long position = channel.position();
    assertEquals(0, position);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_Empty_VDQP0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    assertEquals(0, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_NonEmpty_vjWz1() {
    byte[] data = new byte[10];
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    assertEquals(10, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArray_NonEmpty_zhXd1_1() {
    byte[] data = new byte[] { 1, 2, 3, 4, 5 };
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    byte[] result = channel.array();
    for (int i = 0; i < data.length; i++) {
    }
    assertEquals(data.length, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_DefaultConstructor_LineCoverage_lhfh4_2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    assertFalse(channel.isOpen());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_SizeConstructor_LineCoverage_cjJc5_2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertFalse(channel.isOpen());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_DataConstructor_LineCoverage_YgwD6_2() {
    byte[] data = new byte[10];
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    assertFalse(channel.isOpen());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_DefaultConstructor_BranchCoverage_HUJO8_1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    channel.close();
    assertTrue(channel.isOpen());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_SizeConstructor_BranchCoverage_AkNo9_1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.close();
    assertTrue(channel.isOpen());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_SizeConstructor_BranchCoverage_AkNo9_2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.close();
    assertFalse(channel.isOpen());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_DataConstructor_BranchCoverage_WTLG10_1() {
    byte[] data = new byte[10];
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    channel.close();
    assertTrue(channel.isOpen());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_DataConstructor_BranchCoverage_WTLG10_2() {
    byte[] data = new byte[10];
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    channel.close();
    assertFalse(channel.isOpen());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteToEnd_GCaO0_1() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer b = ByteBuffer.allocate(5);
    b.put((byte) 1);
    b.put((byte) 2);
    b.put((byte) 3);
    b.put((byte) 4);
    b.put((byte) 5);
    b.flip();
    int written = channel.write(b);
    assertEquals(5, written);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteToEnd_GCaO0_2() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer b = ByteBuffer.allocate(5);
    b.put((byte) 1);
    b.put((byte) 2);
    b.put((byte) 3);
    b.put((byte) 4);
    b.put((byte) 5);
    b.flip();
    int written = channel.write(b);
    assertEquals(5, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteToEnd_GCaO0_3() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer b = ByteBuffer.allocate(5);
    b.put((byte) 1);
    b.put((byte) 2);
    b.put((byte) 3);
    b.put((byte) 4);
    b.put((byte) 5);
    b.flip();
    int written = channel.write(b);
    assertEquals(5, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteToMiddle_dPqh1_1() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer b = ByteBuffer.allocate(5);
    b.put((byte) 1);
    b.put((byte) 2);
    b.put((byte) 3);
    b.put((byte) 4);
    b.put((byte) 5);
    b.flip();
    channel.position(3);
    int written = channel.write(b);
    assertEquals(5, written);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteToMiddle_dPqh1_2() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer b = ByteBuffer.allocate(5);
    b.put((byte) 1);
    b.put((byte) 2);
    b.put((byte) 3);
    b.put((byte) 4);
    b.put((byte) 5);
    b.flip();
    channel.position(3);
    int written = channel.write(b);
    assertEquals(8, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteToMiddle_dPqh1_3() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer b = ByteBuffer.allocate(5);
    b.put((byte) 1);
    b.put((byte) 2);
    b.put((byte) 3);
    b.put((byte) 4);
    b.put((byte) 5);
    b.flip();
    channel.position(3);
    int written = channel.write(b);
    assertEquals(8, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteToBeginning_DphP2_1() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer b = ByteBuffer.allocate(5);
    b.put((byte) 1);
    b.put((byte) 2);
    b.put((byte) 3);
    b.put((byte) 4);
    b.put((byte) 5);
    b.flip();
    channel.position(0);
    int written = channel.write(b);
    assertEquals(5, written);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteToBeginning_DphP2_2() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer b = ByteBuffer.allocate(5);
    b.put((byte) 1);
    b.put((byte) 2);
    b.put((byte) 3);
    b.put((byte) 4);
    b.put((byte) 5);
    b.flip();
    channel.position(0);
    int written = channel.write(b);
    assertEquals(5, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteToBeginning_DphP2_3() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer b = ByteBuffer.allocate(5);
    b.put((byte) 1);
    b.put((byte) 2);
    b.put((byte) 3);
    b.put((byte) 4);
    b.put((byte) 5);
    b.flip();
    channel.position(0);
    int written = channel.write(b);
    assertEquals(5, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteToNewChannel_tGFC3_1() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    ByteBuffer b = ByteBuffer.allocate(5);
    b.put((byte) 1);
    b.put((byte) 2);
    b.put((byte) 3);
    b.put((byte) 4);
    b.put((byte) 5);
    b.flip();
    int written = channel.write(b);
    assertEquals(5, written);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteToNewChannel_tGFC3_2() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    ByteBuffer b = ByteBuffer.allocate(5);
    b.put((byte) 1);
    b.put((byte) 2);
    b.put((byte) 3);
    b.put((byte) 4);
    b.put((byte) 5);
    b.flip();
    int written = channel.write(b);
    assertEquals(5, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteToNewChannel_tGFC3_3() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    ByteBuffer b = ByteBuffer.allocate(5);
    b.put((byte) 1);
    b.put((byte) 2);
    b.put((byte) 3);
    b.put((byte) 4);
    b.put((byte) 5);
    b.flip();
    int written = channel.write(b);
    assertEquals(5, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate_PositionGreaterThanNewSize_vjjy3_ASDH1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    try {
        channel.position(5);
        channel.truncate(3);
        assertEquals(3, channel.size());
        assertEquals(3, channel.position());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_setPosition_negative_jbPL4_ixna1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    try {
        channel.position(-10);
    } catch (IOException e) {
        e.printStackTrace();
    }
    long position = channel.position();
    assertEquals(-10, position);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_setPosition_overflow_woze5_IQLc0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    try {
        channel.position(Integer.MAX_VALUE);
    } catch (IOException e) {
        e.printStackTrace();
    }
    long position = channel.position();
    assertEquals(Integer.MAX_VALUE, position);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_setPosition_underflow_hoYU6_SRUx1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    try {
        channel.position(Integer.MIN_VALUE);
    } catch (IOException e) {
        e.printStackTrace();
    }
    long position = channel.position();
    assertEquals(Integer.MIN_VALUE, position);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_setPosition_invalid_WyuI7_wnqy1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    try {
        channel.position(Integer.MAX_VALUE + 1);
    } catch (IOException e) {
    }
    long position = channel.position();
    assertEquals(Integer.MAX_VALUE + 1, position);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_setPosition_invalid_negative_sDOo8_dHIT0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    try {
        channel.position(Integer.MIN_VALUE - 1);
        long position = channel.position();
        assertEquals(Integer.MIN_VALUE - 1, position);
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_EmptyBuffer_xMhG0_ewXW0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buf = ByteBuffer.allocate(10);
    int read = 0;
    try {
        read = channel.read(buf);
    } catch (IOException e) {
        e.printStackTrace();
    }
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_NonEmptyBuffer_cfqf1_gIaG0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buf = ByteBuffer.allocate(10);
    buf.put((byte) 1);
    int read = 0;
    try {
        read = channel.read(buf);
    } catch (IOException e) {
        e.printStackTrace();
    }
    assertEquals(1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_SmallerBuffer_BolZ3_daVN0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buf = ByteBuffer.allocate(5);
    int read = 0;
    try {
        read = channel.read(buf);
    } catch (IOException e) {
        e.printStackTrace();
    }
    assertEquals(5, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_EqualBuffer_rTDw4_ZIWg0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buf = ByteBuffer.allocate(10);
    int read = 0;
    try {
        read = channel.read(buf);
    } catch (IOException e) {
        e.printStackTrace();
    }
    assertEquals(10, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_LargerBuffer_NotMultiple_nJMx5_GouG1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buf = ByteBuffer.allocate(15);
    int read = 0;
    try {
        read = channel.read(buf);
    } catch (IOException e) {
        e.printStackTrace();
    }
    assertEquals(10, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_LargerBuffer_Multiple_SZRl6_ZuVF0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buf = ByteBuffer.allocate(20);
    int read = 0;
    try {
        read = channel.read(buf);
    } catch (IOException e) {
        e.printStackTrace();
    }
    assertEquals(10, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_LargerBuffer_Multiple_NotEqual_gDrr7_usiq0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buf = ByteBuffer.allocate(25);
    int read = 0;
    try {
        read = channel.read(buf);
    } catch (IOException e) {
        e.printStackTrace();
    }
    assertEquals(10, read);
}
}