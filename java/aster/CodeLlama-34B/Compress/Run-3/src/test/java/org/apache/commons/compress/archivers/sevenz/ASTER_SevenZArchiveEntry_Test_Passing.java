/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.LinkedList;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.LinkedList;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZArchiveEntry_Test_Passing {
private boolean hasCrc;
private Iterable<? extends SevenZMethodConfiguration> contentMethods;
public void testSetLastModifiedDate_NullDate_nvDv0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedDate(null);
    assertNull(entry.getLastModifiedTime());
}
public void testSetLastModifiedDate_ValidDate_YIWF1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date();
    entry.setLastModifiedDate(lastModifiedDate);
    assertEquals(FileTimes.toFileTime(lastModifiedDate), entry.getLastModifiedTime());
}
public void testSetLastModifiedDate_InvalidDate_fDjW2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date(0);
    entry.setLastModifiedDate(lastModifiedDate);
    assertNotEquals(FileTimes.toFileTime(lastModifiedDate), entry.getLastModifiedTime());
}
public void testSetLastModifiedDate_FutureDate_XEgO3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date(System.currentTimeMillis() + 10000);
    entry.setLastModifiedDate(lastModifiedDate);
    assertEquals(FileTimes.toFileTime(lastModifiedDate), entry.getLastModifiedTime());
}
public void testSetLastModifiedDate_PastDate_GwWP4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date(System.currentTimeMillis() - 10000);
    entry.setLastModifiedDate(lastModifiedDate);
    assertNotEquals(FileTimes.toFileTime(lastModifiedDate), entry.getLastModifiedTime());
}
public void testSetLastModifiedDate_MaxDate_zzCu5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date(Long.MAX_VALUE);
    entry.setLastModifiedDate(lastModifiedDate);
    assertEquals(FileTimes.toFileTime(lastModifiedDate), entry.getLastModifiedTime());
}
public void testSetLastModifiedDate_MinDate_MkhI6() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date(Long.MIN_VALUE);
    entry.setLastModifiedDate(lastModifiedDate);
    assertNotEquals(FileTimes.toFileTime(lastModifiedDate), entry.getLastModifiedTime());
}
public void testSetLastModifiedDate_InvalidDate_Negative_neHi7() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date(-1);
    entry.setLastModifiedDate(lastModifiedDate);
    assertNotEquals(FileTimes.toFileTime(lastModifiedDate), entry.getLastModifiedTime());
}
public void testSetLastModifiedDate_InvalidDate_Positive_NKCu8() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date(1);
    entry.setLastModifiedDate(lastModifiedDate);
    assertNotEquals(FileTimes.toFileTime(lastModifiedDate), entry.getLastModifiedTime());
}
public void testSetLastModifiedDate_InvalidDate_Zero_clkw9() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date(0);
    entry.setLastModifiedDate(lastModifiedDate);
    assertNotEquals(FileTimes.toFileTime(lastModifiedDate), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetContentMethods_emptyList_sYUb2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    LinkedList<SevenZMethodConfiguration> methods = new LinkedList<>();
    entry.setContentMethods(methods);
    assertEquals(methods, entry.getContentMethods());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetContentMethods_nullElement_tQZl4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    LinkedList<SevenZMethodConfiguration> methods = new LinkedList<>();
    methods.add(null);
    entry.setContentMethods(methods);
    assertEquals(methods, entry.getContentMethods());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_KFCP0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = 1234567890;
    entry.setLastModifiedDate(ntfsLastModifiedDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsLastModifiedDate), entry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDateWithNegativeValue_NuHT1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = -1234567890;
    entry.setLastModifiedDate(ntfsLastModifiedDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsLastModifiedDate), entry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDateWithZeroValue_ncyw2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = 0;
    entry.setLastModifiedDate(ntfsLastModifiedDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsLastModifiedDate), entry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDateWithMaxValue_JMVq3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = Long.MAX_VALUE;
    entry.setLastModifiedDate(ntfsLastModifiedDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsLastModifiedDate), entry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDateWithMinValue_oHiV4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = Long.MIN_VALUE;
    entry.setLastModifiedDate(ntfsLastModifiedDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsLastModifiedDate), entry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDateWithInvalidValue_wUkx5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = -1;
    try {
        entry.setLastModifiedDate(ntfsLastModifiedDate);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid NTFS last modified date: " + ntfsLastModifiedDate, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDateWithNullValue_uJoX6() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    try {
        entry.setLastModifiedDate(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("NTFS last modified date cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasCreationDate_validDate_BTXl16() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcValue_iyYx0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = entry.getCrcValue();
    assertEquals(0, crc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcValueWithNonZeroCrc_zjXz1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(123456789);
    long crc = entry.getCrcValue();
    assertEquals(123456789, crc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcValueWithNegativeCrc_QcFk2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(-123456789);
    long crc = entry.getCrcValue();
    assertEquals(-123456789, crc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_XSKD0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsAccessDate = 1234567890;
    entry.setAccessDate(ntfsAccessDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsAccessDate), entry.getAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDateWithInvalidNtfsTime_ffSl1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsAccessDate = -1;
    try {
        entry.setAccessDate(ntfsAccessDate);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid NTFS time", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_Muza0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    String name = entry.getName();
    assertEquals("", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDate_wOWM0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date creationDate = entry.getCreationDate();
    assertNotNull(creationDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDate_wOWM0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date creationDate = entry.getCreationDate();
    assertEquals(creationDate, entry.getCreationTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDateWithNullCreationTime_vDIf1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationTime(null);
    Date creationDate = entry.getCreationDate();
    assertNull(creationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDateWithNullEntry_ZYzv5() {
    SevenZArchiveEntry entry = null;
    Date creationDate = entry.getCreationDate();
    assertNull(creationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_zrku0() {
    long ntfsTime = 1234567890;
    Date expected = new Date(ntfsTime);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_zero_CeOt1() {
    long ntfsTime = 0;
    Date expected = new Date(ntfsTime);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_negative_WGtE2() {
    long ntfsTime = -1;
    Date expected = new Date(ntfsTime);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasLastModifiedDate_mloo0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasLastModifiedDate(true);
    assertTrue(entry.getHasLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasLastModifiedDateWithFalse_TACS1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasLastModifiedDate(false);
    assertFalse(entry.getHasLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_ValidCrc_BeZR0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    int crc = 123456789;
    entry.setCompressedCrc(crc);
    assertEquals(crc, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_InvalidCrc_tFsL1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    int crc = -1;
    entry.setCompressedCrc(crc);
    assertEquals(0, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_NegativeCrc_uahA6() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(-123456789);
    assertEquals(-123456789, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_ZeroCrc_Ajgv7() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(0);
    assertEquals(0, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_MaxValueCrc_baOe8() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_MinValueCrc_LuEy9() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_oYPz0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_lQVl1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_ESVx2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.equals(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_True_SBfS0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setDirectory(true);
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_False_OIJO1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setDirectory(false);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_NeAT0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertNotNull(lastModifiedDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_NeAT0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertEquals(lastModifiedDate, entry.getLastModifiedTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDateWithNullLastModifiedTime_eLak1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedTime(null);
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertNull(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAntiItemTrue_Cnje0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAntiItem(true);
    assertTrue(entry.isAntiItem());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAntiItemFalse_XfsJ1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAntiItem(false);
    assertFalse(entry.isAntiItem());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasStream_True_CXqb0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasStream(true);
    assertTrue(entry.hasStream());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasStream_False_eWXH1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasStream(false);
    assertFalse(entry.hasStream());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDate_True_BDwB0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasAccessDate(true);
    assertTrue(entry.getHasAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDate_False_Wepd1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasAccessDate(false);
    assertFalse(entry.getHasAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_BdZv0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long compressedSize = entry.getCompressedSize();
    assertEquals(0, compressedSize);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSizeWithPositiveValue_NuHJ1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long compressedSize = entry.getCompressedSize();
    assertEquals(10, compressedSize);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSizeWithNegativeValue_ZSnB2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long compressedSize = entry.getCompressedSize();
    assertEquals(-10, compressedSize);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NqYo0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithNull_SxKp1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName(null);
    assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithEmptyString_yfBI2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("");
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithInvalidName_XtTk4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("invalid_name");
    assertEquals("invalid_name", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithValidName_lYCu5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("valid_name");
    assertEquals("valid_name", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValue_ZNqe0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = 1234567890L;
    entry.setCrcValue(crc);
    assertEquals(crc, entry.getCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValue_negative_UFsW1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = -1234567890L;
    entry.setCrcValue(crc);
    assertEquals(crc, entry.getCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValue_zero_tVKm2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = 0L;
    entry.setCrcValue(crc);
    assertEquals(crc, entry.getCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValue_max_darh3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = Long.MAX_VALUE;
    entry.setCrcValue(crc);
    assertEquals(crc, entry.getCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValue_min_qKlA4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = Long.MIN_VALUE;
    entry.setCrcValue(crc);
    assertEquals(crc, entry.getCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValue_invalid_NeGM6() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = -1L;
    entry.setCrcValue(crc);
    assertEquals(crc, entry.getCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValue_invalid2_jBYm7() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = Long.MAX_VALUE + 1;
    entry.setCrcValue(crc);
    assertEquals(crc, entry.getCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_validSize_rOpV0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = 100;
    entry.setCompressedSize(size);
    assertEquals(size, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_invalidSize_FAeW1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = -1;
    try {
        entry.setCompressedSize(size);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid compressed size: " + size, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_nsbv0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(100);
    assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeNegative_FBTD1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(-100);
    assertEquals(-100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeZero_ASwi2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(0);
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeMaxValue_RPbt3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeMinValue_GOjd4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeInvalidValue_lLGU5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    try {
        entry.setSize(Long.MAX_VALUE + 1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid size: " + (Long.MAX_VALUE + 1), e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeInvalidValueNegative_XaMn6() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    try {
        entry.setSize(Long.MIN_VALUE - 1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid size: " + (Long.MIN_VALUE - 1), e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeInvalidValueZero_zEvJ7() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    try {
        entry.setSize(0);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid size: 0", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeInvalidValueMaxValue_dSpC8() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    try {
        entry.setSize(Long.MAX_VALUE);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid size: " + Long.MAX_VALUE, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeInvalidValueMinValue_fhyo9() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    try {
        entry.setSize(Long.MIN_VALUE);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid size: " + Long.MIN_VALUE, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nullName_CryH0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nonNullName_GixP1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("test");
    assertEquals("test".hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTime_TvFb0() {
    Date date = new Date();
    long ntfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    assertEquals(ntfsTime, FileTimes.toNtfsTime(date));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTimeWithNullDate_TzGB1() {
    Date date = null;
    long ntfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    assertEquals(ntfsTime, FileTimes.toNtfsTime(date));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTimeWithInvalidDate_KFZP2() {
    Date date = new Date(Long.MAX_VALUE);
    long ntfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    assertEquals(ntfsTime, FileTimes.toNtfsTime(date));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTimeWithValidDate_PSNQ3() {
    Date date = new Date(1577836800000L); // 2020-01-01T00:00:00.000Z
    long ntfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    assertEquals(ntfsTime, FileTimes.toNtfsTime(date));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTimeWithNegativeDate_Uguj4() {
    Date date = new Date(-1577836800000L); // 1969-12-31T23:59:59.999Z
    long ntfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    assertEquals(ntfsTime, FileTimes.toNtfsTime(date));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTimeWithZeroDate_CVfH5() {
    Date date = new Date(0); // 1970-01-01T00:00:00.000Z
    long ntfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    assertEquals(ntfsTime, FileTimes.toNtfsTime(date));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTimeWithMaxDate_LQqr6() {
    Date date = new Date(Long.MAX_VALUE); // 2038-01-19T03:14:07.999Z
    long ntfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    assertEquals(ntfsTime, FileTimes.toNtfsTime(date));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTimeWithMinDate_sbVa7() {
    Date date = new Date(Long.MIN_VALUE); // 1901-12-13T20:45:52.000Z
    long ntfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    assertEquals(ntfsTime, FileTimes.toNtfsTime(date));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTimeWithInvalidNtfsTime_rnkO8() {
    Date date = new Date(1577836800000L); // 2020-01-01T00:00:00.000Z
    long ntfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    assertNotEquals(ntfsTime, FileTimes.toNtfsTime(date));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_TBVn0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date accessDate = new Date();
    entry.setAccessDate(accessDate);
    assertEquals(FileTimes.toFileTime(accessDate), entry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDateWithNull_TENd1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessDate(null);
    assertEquals(0, entry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrc_ValidCrc_VMdz0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(123456789);
    assertEquals(123456789, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrc_InvalidCrc_TPjm1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(0);
    assertEquals(0, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrc_NegativeCrc_xRtr2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(-123456789);
    assertEquals(-123456789, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrc_MaxValue_uOki3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrc_MinValue_GcEJ4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCreationDate_gcDZ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    boolean hasCreationDate = entry.getHasCreationDate();
    assertTrue(hasCreationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCreationDateWithNullEntry_PTZI1() {
    SevenZArchiveEntry entry = null;
    boolean hasCreationDate = entry.getHasCreationDate();
    assertFalse(hasCreationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCreationDateWithEmptyEntry_olSS2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCreationDate(false);
    boolean hasCreationDate = entry.getHasCreationDate();
    assertFalse(hasCreationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_COcO0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = 1234567890L;
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_zero_VzLA1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = 0L;
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_negative_GCgT2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = -1234567890L;
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_max_ntDM3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = Long.MAX_VALUE;
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_1_agWg0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(123456789);
    assertEquals(123456789, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_2_UMvB1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(987654321);
    assertEquals(987654321, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_3_KdWG2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(1234567890);
    assertEquals(1234567890, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAntiItem_tbVV0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.isAntiItem());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCrc_cRuS0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertTrue(entry.getHasCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCrcWithNullEntry_balB1() {
    SevenZArchiveEntry entry = null;
    assertFalse(entry.getHasCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDate_cPUo0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date accessDate = entry.getAccessDate();
    assertNotNull(accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDate_cPUo0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date accessDate = entry.getAccessDate();
    assertEquals(new Date(0), accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithNullAccessTime_jWvj6() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(null);
    Date accessDate = entry.getAccessDate();
    assertNull(accessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithoutCreationDate_mMKx1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertThrows(UnsupportedOperationException.class, () -> entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_vTIg0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = entry.getSize();
    assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithNonZeroSize_hBSD1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(10);
    long size = entry.getSize();
    assertEquals(10, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithNegativeSize_stwW2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(-10);
    long size = entry.getSize();
    assertEquals(-10, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithMaxValue_JEXP3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(Long.MAX_VALUE);
    long size = entry.getSize();
    assertEquals(Long.MAX_VALUE, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithMinValue_hape4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(Long.MIN_VALUE);
    long size = entry.getSize();
    assertEquals(Long.MIN_VALUE, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_Kykg0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsCreationDate = 1234567890;
    entry.setCreationDate(ntfsCreationDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsCreationDate), entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithNegativeValue_DToW1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsCreationDate = -1234567890;
    entry.setCreationDate(ntfsCreationDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsCreationDate), entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithZeroValue_BzxM2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsCreationDate = 0;
    entry.setCreationDate(ntfsCreationDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsCreationDate), entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithMaxValue_cPKR3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsCreationDate = Long.MAX_VALUE;
    entry.setCreationDate(ntfsCreationDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsCreationDate), entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithMinValue_lwMk4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsCreationDate = Long.MIN_VALUE;
    entry.setCreationDate(ntfsCreationDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsCreationDate), entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithInvalidValue_PhYQ5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsCreationDate = -1;
    try {
        entry.setCreationDate(ntfsCreationDate);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid NTFS creation date", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithNullValue_tTPH6() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    try {
        entry.setCreationDate(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("NTFS creation date cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcWithDifferentValues_OPBl1_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(0);
    entry.setCrc(1);
    entry.setCrc(-1);
    entry.setCrc(Integer.MAX_VALUE);
    entry.setCrc(Integer.MIN_VALUE);
    assertEquals(0, entry.getCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcWithDifferentValues_OPBl1_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(0);
    entry.setCrc(1);
    entry.setCrc(-1);
    entry.setCrc(Integer.MAX_VALUE);
    entry.setCrc(Integer.MIN_VALUE);
    assertEquals(1, entry.getCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcWithDifferentValues_OPBl1_3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(0);
    entry.setCrc(1);
    entry.setCrc(-1);
    entry.setCrc(Integer.MAX_VALUE);
    entry.setCrc(Integer.MIN_VALUE);
    assertEquals(-1, entry.getCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcWithDifferentValues_OPBl1_4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(0);
    entry.setCrc(1);
    entry.setCrc(-1);
    entry.setCrc(Integer.MAX_VALUE);
    entry.setCrc(Integer.MIN_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcWithDifferentValues_OPBl1_5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(0);
    entry.setCrc(1);
    entry.setCrc(-1);
    entry.setCrc(Integer.MAX_VALUE);
    entry.setCrc(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrcValue_RgBU0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long compressedCrc = entry.getCompressedCrcValue();
    assertEquals(0, compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrcValueWithNonZeroValue_FLCB1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(123456789);
    long compressedCrc = entry.getCompressedCrcValue();
    assertEquals(123456789, compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrcValueWithNegativeValue_kSRN2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(-123456789);
    long compressedCrc = entry.getCompressedCrcValue();
    assertEquals(-123456789, compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributes_NyYs0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    int attributes = entry.getWindowsAttributes();
    assertEquals(0, attributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributesWithNonZeroAttributes_TcBK1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(1);
    int attributes = entry.getWindowsAttributes();
    assertEquals(1, attributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributesWithNegativeAttributes_JOvD2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(-1);
    int attributes = entry.getWindowsAttributes();
    assertEquals(-1, attributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributesWithMaxValueAttributes_DWiT3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(Integer.MAX_VALUE);
    int attributes = entry.getWindowsAttributes();
    assertEquals(Integer.MAX_VALUE, attributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributesWithMinValueAttributes_WzOE4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(Integer.MIN_VALUE);
    int attributes = entry.getWindowsAttributes();
    assertEquals(Integer.MIN_VALUE, attributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributesWithNullEntry_cfnc5() {
    SevenZArchiveEntry entry = null;
    try {
        entry.getWindowsAttributes();
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributes_HIOj0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(1);
    assertEquals(1, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributesWithNegativeValue_etsE1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(-1);
    assertEquals(-1, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributesWithZero_TXqh2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(0);
    assertEquals(0, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributesWithLargeValue_Syfa3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributesWithInvalidValue_xcoq4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_True_RvHh0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(true);
    assertTrue(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_False_rhAX1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(false);
    assertFalse(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_NullEntry_GAQN7() {
    SevenZArchiveEntry entry = null;
    assertFalse(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetContentMethods_nonNullElement_GKHM5_gBYH0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    LinkedList<SevenZMethodConfiguration> methods = new LinkedList<>();
    methods.add(new SevenZMethodConfiguration(null));
    entry.setContentMethods(methods);
    assertEquals(methods, entry.getContentMethods());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetContentMethods_mixedElements_QswX6_iWhf0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    LinkedList<SevenZMethodConfiguration> methods = new LinkedList<>();
    methods.add(new SevenZMethodConfiguration(null));
    methods.add(null);
    entry.setContentMethods(methods);
    assertEquals(methods, entry.getContentMethods());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_null_TigU0_Lghi0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedTime(null);
    assertFalse(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_nonNull_xbMM1_wXyx0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(time);
    assertTrue(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_nonNull_xbMM1_wXyx0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(time);
    assertEquals(time, entry.getLastModifiedTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_invalid_pGVP2_NigL0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(time);
    entry.setLastModifiedTime(null);
    assertTrue(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_invalid_pGVP2_NigL0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(time);
    entry.setLastModifiedTime(null);
    assertEquals(time, entry.getLastModifiedTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_invalid_pGVP2_NigL0_3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(time);
    entry.setLastModifiedTime(null);
    assertFalse(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasCrc_True_fHhC0_brBU0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCrc(true);
    assertTrue(entry.getHasCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasCrc_False_Ibpi1_OpEJ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCrc(false);
    assertFalse(entry.getHasCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasCreationDate_true_XkMq0_Kmpr0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCreationDate(true);
    assertTrue(entry.getHasCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasCreationDate_false_qCDy1_PIaM0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCreationDate(false);
    assertFalse(entry.getHasCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcValueWithNullCrc_npIz6_JZJD0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(0);
    long crc = entry.getCrcValue();
    assertEquals(0, crc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDateWithNullNtfsTime_fyWy2_CmRP0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsAccessDate = 0L;
    try {
        entry.setAccessDate(ntfsAccessDate);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("NTFS time cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithName_zxQl1_KrLM0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("test");
    String name = entry.getName();
    assertEquals("test", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDateWithInvalidCreationTime_wial2_dKNf0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationTime(FileTime.fromMillis(0));
    Date creationDate = entry.getCreationDate();
    assertNull(creationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDateWithValidCreationTime_kUcM3_zAbg0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationTime(FileTime.fromMillis(1000));
    Date creationDate = entry.getCreationDate();
    assertNotNull(creationDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDateWithValidCreationTime_kUcM3_zAbg0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationTime(FileTime.fromMillis(1000));
    Date creationDate = entry.getCreationDate();
    assertEquals(creationDate, entry.getCreationTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDateWithDifferentCreationTime_qTZc4_HAdf0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationTime(FileTime.fromMillis(1000));
    Date creationDate = entry.getCreationDate();
    assertNotEquals(creationDate, entry.getCreationTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasLastModifiedDateWithNull_YCoR2_JqyM0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasLastModifiedDate(false);
    assertNull(entry.getHasLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_NullCrc_xwEy2_NiTY0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(0);
    assertNull(entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameHasCreationDate_FBhY11_ixtq0() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_Null_pPtL2_oyeo0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setDirectory(false);
    assertNull(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_Multiple_roqm7_VGVC0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setDirectory(true);
    entry.setDirectory(false);
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_MultipleInvalid_tdEs8_uErE0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setDirectory(false);
    entry.setDirectory(false);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_MultipleValid_vRfs9_YKJa0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setDirectory(true);
    entry.setDirectory(true);
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDateWithInvalidLastModifiedTime_HWYR2_rQzP0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedTime(FileTime.fromMillis(0));
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertNotNull(lastModifiedDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDateWithInvalidLastModifiedTime_HWYR2_rQzP0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedTime(FileTime.fromMillis(0));
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertEquals(lastModifiedDate, entry.getLastModifiedTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDateWithValidLastModifiedTime_zXXz3_jYPx0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedTime(FileTime.fromMillis(1000));
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertNotNull(lastModifiedDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDateWithValidLastModifiedTime_zXXz3_jYPx0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedTime(FileTime.fromMillis(1000));
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertEquals(lastModifiedDate, entry.getLastModifiedTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDate_Null_nEEy2_YYGB0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasAccessDate(false);
    assertNull(entry.getHasAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_null_hXZU0_DADI0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationTime(null);
    assertFalse(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_nonNull_fSRa1_kHWE0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertTrue(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_nonNull_fSRa1_kHWE0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_null_Uunh0_RcWw0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(null);
    assertFalse(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_nonNull_pPBR1_RCsW0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setAccessTime(time);
    assertTrue(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_nonNull_pPBR1_RCsW0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setAccessTime(time);
    assertEquals(time, entry.getAccessDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasWindowsAttributes_CAhy0_kXOP0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(true);
    entry.setHasWindowsAttributes(false);
    assertTrue(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasWindowsAttributes_CAhy0_kXOP0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(true);
    entry.setHasWindowsAttributes(false);
    assertFalse(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValue_null_EvZh5_goWU0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = 0;
    entry.setCrcValue(crc);
    assertEquals(crc, entry.getCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithNonZeroAccessTime_PwJa1_tklq0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(1000));
    Date accessDate = entry.getAccessDate();
    assertNotNull(accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithNonZeroAccessTime_PwJa1_tklq0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(1000));
    Date accessDate = entry.getAccessDate();
    assertEquals(new Date(1000), accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithNegativeAccessTime_SlEY2_YhNs0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(-1000));
    Date accessDate = entry.getAccessDate();
    assertNotNull(accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithNegativeAccessTime_SlEY2_YhNs0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(-1000));
    Date accessDate = entry.getAccessDate();
    assertEquals(new Date(-1000), accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithMaxAccessTime_nCvT3_akUm0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(Long.MAX_VALUE));
    Date accessDate = entry.getAccessDate();
    assertNotNull(accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithMaxAccessTime_nCvT3_akUm0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(Long.MAX_VALUE));
    Date accessDate = entry.getAccessDate();
    assertEquals(new Date(Long.MAX_VALUE), accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithMinAccessTime_aGZz4_quFn0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(Long.MIN_VALUE));
    Date accessDate = entry.getAccessDate();
    assertNotNull(accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithMinAccessTime_aGZz4_quFn0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(Long.MIN_VALUE));
    Date accessDate = entry.getAccessDate();
    assertEquals(new Date(Long.MIN_VALUE), accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithInvalidAccessTime_qjJO5_WDIX0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(Long.MAX_VALUE + 1));
    Date accessDate = entry.getAccessDate();
    assertNull(accessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcWithInvalidValues_AYyt3_CqZj0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(0);
    entry.setCrc(123);
    assertEquals(0, entry.getCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcWithInvalidValues_AYyt3_CqZj0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(0);
    entry.setCrc(123);
    assertEquals(123, entry.getCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcWithDifferentDataTypes_pqwK4_Vkue0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(123456789);
    entry.setCrc((int) 123456789.0f);
    assertEquals(123456789, entry.getCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcWithDifferentDataTypes_pqwK4_Vkue0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(123456789);
    entry.setCrc((int) 123456789.0f);
    assertEquals(123456789.0f, entry.getCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrcValueWithMaxValue_WaRQ3_npeC0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc((int) Long.MAX_VALUE);
    long compressedCrc = entry.getCompressedCrcValue();
    assertEquals(Long.MAX_VALUE, compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributesWithMultipleValues_ntvV9_QRel0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(1);
    entry.setWindowsAttributes(2);
    entry.setWindowsAttributes(3);
    assertEquals(1, entry.getWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributesWithMultipleValues_ntvV9_QRel0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(1);
    entry.setWindowsAttributes(2);
    entry.setWindowsAttributes(3);
    assertEquals(2, entry.getWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributesWithMultipleValues_ntvV9_QRel0_3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(1);
    entry.setWindowsAttributes(2);
    entry.setWindowsAttributes(3);
    assertEquals(3, entry.getWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_Null_GQLz2_Uulw0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(false);
    assertNull(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDate_wOWM0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date creationDate = entry.getCreationDate();
    assertNotNull(creationDate);
    assertEquals(creationDate, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_NeAT0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertNotNull(lastModifiedDate);
    assertEquals(lastModifiedDate, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCrcWithEmptyEntry_mtoE2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.getHasCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDate_cPUo0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date accessDate = entry.getAccessDate();
    assertNotNull(accessDate);
    assertEquals(new Date(0), accessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcWithDifferentValues_OPBl1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(0);
    assertEquals(0, entry.getCrc());
    entry.setCrc(1);
    assertEquals(1, entry.getCrc());
    entry.setCrc(-1);
    assertEquals(-1, entry.getCrc());
    entry.setCrc(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getCrc());
    entry.setCrc(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getCrc());
}
}