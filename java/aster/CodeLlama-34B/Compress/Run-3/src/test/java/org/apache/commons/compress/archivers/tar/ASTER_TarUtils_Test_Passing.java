/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarUtils_Test_Passing {
private long formatUnsignedOctalString(long value, byte[] buf, int offset, int length) {
    return value;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePaxHeadersWithNullInputStream_rRyQ5() throws IOException {
        InputStream inputStream = null;
        List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructsValidData_GPnK0_1() throws IOException {
    byte[] buffer = new byte[1024];
    int offset = 0;
    int entries = 2;
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(2, sparseHeaders.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructsValidData_GPnK0_2() throws IOException {
    byte[] buffer = new byte[1024];
    int offset = 0;
    int entries = 2;
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(0, sparseHeaders.get(0).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructsValidData_GPnK0_3() throws IOException {
    byte[] buffer = new byte[1024];
    int offset = 0;
    int entries = 2;
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(10, sparseHeaders.get(0).getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructsValidData_GPnK0_4() throws IOException {
    byte[] buffer = new byte[1024];
    int offset = 0;
    int entries = 2;
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(10, sparseHeaders.get(1).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructsValidData_GPnK0_5() throws IOException {
    byte[] buffer = new byte[1024];
    int offset = 0;
    int entries = 2;
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(20, sparseHeaders.get(1).getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructsInvalidData_uQJK1() throws IOException {
    byte[] buffer = new byte[1024];
    int offset = 0;
    int entries = 2;
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(0, sparseHeaders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructsEmptyData_vOwT2() throws IOException {
    byte[] buffer = new byte[1024];
    int offset = 0;
    int entries = 0;
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(0, sparseHeaders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructsNullData_EBIy3() throws IOException {
    byte[] buffer = null;
    int offset = 0;
    int entries = 0;
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(0, sparseHeaders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseBoolean_true_fHpA0() {
    byte[] buffer = new byte[1];
    buffer[0] = 1;
    int offset = 0;
    assertTrue(TarUtils.parseBoolean(buffer, offset));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseBoolean_false_pQtl1() {
    byte[] buffer = new byte[1];
    buffer[0] = 0;
    int offset = 0;
    assertFalse(TarUtils.parseBoolean(buffer, offset));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseBoolean_other_DKJo4() {
        byte[] buffer = new byte[1];
        buffer[0] = 2;
        int offset = 0;
        assertFalse(TarUtils.parseBoolean(buffer, offset));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseBoolean_other2_zhUW5() {
        byte[] buffer = new byte[1];
        buffer[0] = 3;
        int offset = 0;
        assertTrue(TarUtils.parseBoolean(buffer, offset));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePAX01SparseHeaders_emptyString_esaJ0() throws IOException {
        List<TarArchiveStructSparse> sparseHeaders = TarUtils.parsePAX01SparseHeaders("");
        assertEquals(0, sparseHeaders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePAX01SparseHeaders_invalidFormat_pjHL3() throws IOException {
        List<TarArchiveStructSparse> sparseHeaders = TarUtils.parsePAX01SparseHeaders("0 1000000000 1000000000 1000000000\n1000000000 2000000000 2000000000");
        assertEquals(0, sparseHeaders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePAX01SparseHeaders_invalidOffset_ffiF4() throws IOException {
        List<TarArchiveStructSparse> sparseHeaders = TarUtils.parsePAX01SparseHeaders("0 1000000000 1000000000 1000000000\n-1000000000 2000000000 2000000000 2000000000");
        assertEquals(0, sparseHeaders.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_ValidInput_ClyV0() {
    byte[] buffer = new byte[] { '1', '2', '3', '4', '5', '6', '7', '8', '9', '0' };
    int offset = 0;
    int length = buffer.length;
    long result = TarUtils.parseOctal(buffer, offset, length);
    assertEquals(1234567890L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_ValidInputWithLeadingSpaces_IrAD1() {
    byte[] buffer = new byte[] { ' ', ' ', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0' };
    int offset = 2;
    int length = buffer.length - 2;
    long result = TarUtils.parseOctal(buffer, offset, length);
    assertEquals(1234567890L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_ValidInputWithTrailingSpaces_mRSx2() {
    byte[] buffer = new byte[] { '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', ' ', ' ' };
    int offset = 0;
    int length = buffer.length - 2;
    long result = TarUtils.parseOctal(buffer, offset, length);
    assertEquals(1234567890L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_ValidInputWithLeadingAndTrailingSpaces_WFUh3() {
    byte[] buffer = new byte[] { ' ', ' ', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', ' ', ' ' };
    int offset = 2;
    int length = buffer.length - 4;
    long result = TarUtils.parseOctal(buffer, offset, length);
    assertEquals(1234567890L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_InvalidInput_evqK4() {
    byte[] buffer = new byte[] { '1', '2', '3', '4', '5', '6', '7', '8', '9', '0' };
    int offset = 0;
    int length = buffer.length;
    try {
        TarUtils.parseOctal(buffer, offset, length);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid byte 1 at offset 0 in '1234567890' len=10", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_InvalidInputWithLeadingSpaces_lkQP5() {
    byte[] buffer = new byte[] { ' ', ' ', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0' };
    int offset = 2;
    int length = buffer.length - 2;
    try {
        TarUtils.parseOctal(buffer, offset, length);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid byte 1 at offset 2 in '1234567890' len=8", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_InvalidInputWithTrailingSpaces_CfNc6() {
    byte[] buffer = new byte[] { '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', ' ', ' ' };
    int offset = 0;
    int length = buffer.length - 2;
    try {
        TarUtils.parseOctal(buffer, offset, length);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid byte 1 at offset 0 in '1234567890' len=8", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparse_TRvN0_1() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparse_TRvN0_2() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNonZeroOffset_JiYj1_1() {
    byte[] buffer = new byte[100];
    int offset = 10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(10, sparse.getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNonZeroOffset_JiYj1_2() {
    byte[] buffer = new byte[100];
    int offset = 10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNonZeroNumbytes_cjLW2_2() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(100, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNonZeroOffsetAndNumbytes_lwFs3_2() {
    byte[] buffer = new byte[100];
    int offset = 10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(90, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeOffset_LJjP4_1() {
    byte[] buffer = new byte[100];
    int offset = -10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(-10, sparse.getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeOffset_LJjP4_2() {
    byte[] buffer = new byte[100];
    int offset = -10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeNumbytes_Wkgq5_2() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(-100, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeOffsetAndNumbytes_wjzx6_2() {
    byte[] buffer = new byte[100];
    int offset = -10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(-90, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithInvalidBuffer_RRyf7() {
    byte[] buffer = null;
    int offset = 0;
    try {
        TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("buffer cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithInvalidOffset_SKoW8() {
    byte[] buffer = new byte[100];
    int offset = -1;
    try {
        TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("offset must be non-negative", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithInvalidNumbytes_AmoZ9() {
    byte[] buffer = new byte[100];
    int offset = 0;
    try {
        TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("numbytes must be non-negative", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary1_jTFm0() {
    byte[] buffer = new byte[] { (byte) 0x80, (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08 };
    int offset = 0;
    int length = 9;
    long expected = 123456789;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary2_pRdH1() {
    byte[] buffer = new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff };
    int offset = 0;
    int length = 9;
    long expected = -1;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary3_KwxJ2() {
    byte[] buffer = new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
    int offset = 0;
    int length = 9;
    long expected = 0;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary1_uLbS0() {
    byte[] buffer = new byte[] { (byte) 0x80, (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08 };
    int offset = 0;
    int length = 8;
    long expected = 12345678;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary2_RggO1() {
    byte[] buffer = new byte[] { (byte) 0xff, (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08 };
    int offset = 0;
    int length = 8;
    long expected = -12345678;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary3_VzHi2() {
    byte[] buffer = new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08 };
    int offset = 0;
    int length = 7;
    long expected = 1234567;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatOctalBytes_gAHt0_1() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    int result = TarUtils.formatOctalBytes(value, buf, offset, length);
    assertEquals(offset + length, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatOctalBytes_gAHt0_2() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    int result = TarUtils.formatOctalBytes(value, buf, offset, length);
    assertEquals(0, buf[offset + length - 1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatOctalBytes_gAHt0_3() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    int result = TarUtils.formatOctalBytes(value, buf, offset, length);
    assertEquals(' ', buf[offset + length - 2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatOctalBytes_gAHt0_4() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    int result = TarUtils.formatOctalBytes(value, buf, offset, length);
    assertEquals(0, buf[offset + length - 3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatOctalBytes_gAHt0_5() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    int result = TarUtils.formatOctalBytes(value, buf, offset, length);
    assertEquals(0, buf[offset + length - 4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatOctalBytes_gAHt0_6() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    int result = TarUtils.formatOctalBytes(value, buf, offset, length);
    assertEquals(0, buf[offset + length - 5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatOctalBytes_gAHt0_7() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    int result = TarUtils.formatOctalBytes(value, buf, offset, length);
    assertEquals(0, buf[offset + length - 6]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatOctalBytes_gAHt0_8() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    int result = TarUtils.formatOctalBytes(value, buf, offset, length);
    assertEquals(0, buf[offset + length - 7]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatOctalBytes_gAHt0_9() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    int result = TarUtils.formatOctalBytes(value, buf, offset, length);
    assertEquals(0, buf[offset + length - 8]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_emOQ1_1() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    TarUtils.formatUnsignedOctalString(value, buf, offset, length);
    assertEquals(0, buf[offset + length - 1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_emOQ1_2() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    TarUtils.formatUnsignedOctalString(value, buf, offset, length);
    assertEquals(' ', buf[offset + length - 2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_emOQ1_3() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    TarUtils.formatUnsignedOctalString(value, buf, offset, length);
    assertEquals(0, buf[offset + length - 3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_emOQ1_4() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    TarUtils.formatUnsignedOctalString(value, buf, offset, length);
    assertEquals(0, buf[offset + length - 4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_emOQ1_5() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    TarUtils.formatUnsignedOctalString(value, buf, offset, length);
    assertEquals(0, buf[offset + length - 5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_emOQ1_6() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    TarUtils.formatUnsignedOctalString(value, buf, offset, length);
    assertEquals(0, buf[offset + length - 6]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_emOQ1_7() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    TarUtils.formatUnsignedOctalString(value, buf, offset, length);
    assertEquals(0, buf[offset + length - 7]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_emOQ1_8() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    TarUtils.formatUnsignedOctalString(value, buf, offset, length);
    assertEquals(0, buf[offset + length - 8]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeCheckSum_emptyArray_GwAR0() {
    long checkSum = TarUtils.computeCheckSum(new byte[0]);
    assertEquals(0, checkSum);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeCheckSum_nonEmptyArray_dqkY1() {
    byte[] buf = new byte[] { 1, 2, 3, 4, 5 };
    long checkSum = TarUtils.computeCheckSum(buf);
    assertEquals(15, checkSum);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeCheckSum_nullArray_HNox2() {
    long checkSum = TarUtils.computeCheckSum(null);
    assertEquals(0, checkSum);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeCheckSum_singleElementArray_APLn3() {
    byte[] buf = new byte[] { 1 };
    long checkSum = TarUtils.computeCheckSum(buf);
    assertEquals(1, checkSum);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeCheckSum_allZeroElements_GkZA4() {
    byte[] buf = new byte[] { 0, 0, 0, 0, 0 };
    long checkSum = TarUtils.computeCheckSum(buf);
    assertEquals(0, checkSum);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeCheckSum_allSameElements_fryD5() {
    byte[] buf = new byte[] { 1, 1, 1, 1, 1 };
    long checkSum = TarUtils.computeCheckSum(buf);
    assertEquals(5, checkSum);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytes_CkEK0() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    int expected = 123456789;
    int actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytesWithNegativeValue_zTEP1() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = -123456789;
    int expected = -123456789;
    int actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytesWithZeroValue_vnxG2() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 0;
    int expected = 0;
    int actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytesWithInvalidLength_BQmj5() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 9;
    long value = 123456789;
    int expected = 123456789;
    int actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytesWithInvalidOffset_qFYN6() {
    byte[] buf = new byte[10];
    int offset = 1;
    int length = 8;
    long value = 123456789;
    int expected = 123456789;
    int actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytesWithNullBuffer_kUSg8() {
    byte[] buf = null;
    int offset = 0;
    int length = 8;
    long value = 123456789;
    int expected = 123456789;
    int actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytesWithEmptyBuffer_fNOf9() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytesPositiveValueLengthLessThan9_wFIg0() {
long value = 123456789;
byte[] buf = new byte[10];
int offset = 0;
int length = 8;
int expected = 8;
int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytesNegativeValueLengthLessThan9_WNxT1() {
long value = -123456789;
byte[] buf = new byte[10];
int offset = 0;
int length = 8;
int expected = 8;
int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytesPositiveValueLengthGreaterThan9_rDrj2() {
long value = 123456789;
byte[] buf = new byte[10];
int offset = 0;
int length = 10;
int expected = 10;
int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytesNegativeValueLengthGreaterThan9_EbXy3() {
long value = -123456789;
byte[] buf = new byte[10];
int offset = 0;
int length = 10;
int expected = 10;
int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytesValueLessThanMaxAsOctalChar_nZnv5() {
long value = 12345678;
byte[] buf = new byte[10];
int offset = 0;
int length = 8;
int expected = 8;
int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytesValueEqualToMaxAsOctalChar_uSNM6() {
long value = 123456789;
byte[] buf = new byte[10];
int offset = 0;
int length = 9;
int expected = 9;
int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes_valueIsZero_OGjN0() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    long value = 0;
    int expected = 0;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes_valueIsPositiveAndLessThanMaxAsOctalChar_NLSM1() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    long value = 123456789;
    int expected = 10;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes_valueIsNegativeAndLessThanMaxAsOctalChar_ZNlq2() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    long value = -123456789;
    int expected = 10;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes_valueIsPositiveAndGreaterThanMaxAsOctalChar_bUCR3() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    long value = 1234567890123456789L;
    int expected = 10;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes_valueIsNegativeAndGreaterThanMaxAsOctalChar_HHbV4() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    long value = -1234567890123456789L;
    int expected = 10;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes_valueIsPositiveAndLessThanMaxAsOctalChar_lengthIs1_VTvd5() {
    byte[] buf = new byte[1];
    int offset = 0;
    int length = 1;
    long value = 123456789;
    int expected = 1;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes_valueIsNegativeAndLessThanMaxAsOctalChar_lengthIs1_sFGW6() {
    byte[] buf = new byte[1];
    int offset = 0;
    int length = 1;
    long value = -123456789;
    int expected = 1;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value0_Cndh0() {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    TarUtils.formatUnsignedOctalString(0, buffer, offset, length);
    assertEquals("0000000000", new String(buffer, offset, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value1_rAIe1() {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    TarUtils.formatUnsignedOctalString(1, buffer, offset, length);
    assertEquals("0000000001", new String(buffer, offset, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value10_iCvP2() {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    TarUtils.formatUnsignedOctalString(10, buffer, offset, length);
    assertEquals("0000000010", new String(buffer, offset, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value100_RPut3() {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    TarUtils.formatUnsignedOctalString(100, buffer, offset, length);
    assertEquals("0000000100", new String(buffer, offset, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value1000_keEZ4() {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    TarUtils.formatUnsignedOctalString(1000, buffer, offset, length);
    assertEquals("0000001000", new String(buffer, offset, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value10000_azak5() {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    TarUtils.formatUnsignedOctalString(10000, buffer, offset, length);
    assertEquals("0000010000", new String(buffer, offset, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value100000_mVHg6() {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    TarUtils.formatUnsignedOctalString(100000, buffer, offset, length);
    assertEquals("0000100000", new String(buffer, offset, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value1000000_soeO7() {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    TarUtils.formatUnsignedOctalString(1000000, buffer, offset, length);
    assertEquals("0001000000", new String(buffer, offset, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value10000000_ffoU8() {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    TarUtils.formatUnsignedOctalString(10000000, buffer, offset, length);
    assertEquals("0010000000", new String(buffer, offset, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseName_ValidInput_gEdT0() {
    byte[] buffer = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    int offset = 0;
    int length = 10;
    String expected = "0102030405060708090A";
    String actual = TarUtils.parseName(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseName_InvalidInput_NullBuffer_VRuy2() {
    byte[] buffer = null;
    int offset = 0;
    int length = 10;
    String expected = null;
    String actual = TarUtils.parseName(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseName_InvalidInput_NegativeOffset_JYYW3() {
    byte[] buffer = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    int offset = -1;
    int length = 10;
    String expected = null;
    String actual = TarUtils.parseName(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseName_InvalidInput_NegativeLength_hMaw4() {
    byte[] buffer = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    int offset = 0;
    int length = -1;
    String expected = null;
    String actual = TarUtils.parseName(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseName_InvalidInput_OffsetGreaterThanLength_xeDe5() {
    byte[] buffer = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    int offset = 11;
    int length = 10;
    String expected = null;
    String actual = TarUtils.parseName(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseName_InvalidInput_LengthGreaterThanBufferLength_QXAH6() {
    byte[] buffer = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    int offset = 0;
    int length = 11;
    String expected = null;
    String actual = TarUtils.parseName(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_ValidInput_Wvbb0_1() throws IOException {
    String sparseMap = "0,10,100,200";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(2, sparseHeaders.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_ValidInput_Wvbb0_2() throws IOException {
    String sparseMap = "0,10,100,200";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(0, sparseHeaders.get(0).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_ValidInput_Wvbb0_3() throws IOException {
    String sparseMap = "0,10,100,200";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(10, sparseHeaders.get(0).getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_ValidInput_Wvbb0_4() throws IOException {
    String sparseMap = "0,10,100,200";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(100, sparseHeaders.get(1).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_ValidInput_Wvbb0_5() throws IOException {
    String sparseMap = "0,10,100,200";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(200, sparseHeaders.get(1).getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_InvalidInput_quUK1() throws IOException {
    String sparseMap = "0,10,100";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_NegativeOffset_dDBw2() throws IOException {
    String sparseMap = "-1,10,100,200";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Corrupted TAR archive. Sparse struct offset contains negative value", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_NegativeNumbytes_edbs3() throws IOException {
    String sparseMap = "0,-10,100,200";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Corrupted TAR archive. Sparse struct numbytes contains negative value", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_EmptyInput_EETx4() throws IOException {
    String sparseMap = "";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(0, sparseHeaders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX01SparseHeaders_singleSparseHeader_qMIL1_iLvE0_1() throws IOException {
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parsePAX01SparseHeaders("0 1000000000 1000000000 1000000000");
    TarArchiveStructSparse sparseHeader = sparseHeaders.get(0);
    assertEquals(1, sparseHeaders.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX01SparseHeaders_singleSparseHeader_qMIL1_iLvE0_2() throws IOException {
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parsePAX01SparseHeaders("0 1000000000 1000000000 1000000000");
    TarArchiveStructSparse sparseHeader = sparseHeaders.get(0);
    assertEquals(0, sparseHeader.getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX01SparseHeaders_singleSparseHeader_qMIL1_iLvE0_3() throws IOException {
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parsePAX01SparseHeaders("0 1000000000 1000000000 1000000000");
    TarArchiveStructSparse sparseHeader = sparseHeaders.get(0);
    assertEquals(1000000000, sparseHeader.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytesWithMaxValue_fXvx3_hmmA0() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = Long.MAX_VALUE;
    long expected = Long.MAX_VALUE;
    long actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytesWithMinValue_wCSq4_qqJi0() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = Long.MIN_VALUE;
    long expected = Long.MIN_VALUE;
    int actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNameBytes_InvalidEncoding_AQEq3_dvJB0() {
    String name = "test";
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 4;
    ZipEncoding encoding = null;
    try {
        int actual = TarUtils.formatNameBytes(name, buf, offset, length, encoding);
        assertEquals(offset, actual);
        assertArrayEquals(new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, buf);
    } catch (IOException e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructsValidData_GPnK0() throws IOException {
    byte[] buffer = new byte[1024];
    int offset = 0;
    int entries = 2;
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(2, sparseHeaders.size());
    assertEquals(0, sparseHeaders.get(0).getOffset());
    assertEquals(10, sparseHeaders.get(0).getNumbytes());
    assertEquals(10, sparseHeaders.get(1).getOffset());
    assertEquals(20, sparseHeaders.get(1).getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparse_TRvN0() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getOffset());
    assertEquals(0, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNonZeroOffset_JiYj1() {
    byte[] buffer = new byte[100];
    int offset = 10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(10, sparse.getOffset());
    assertEquals(0, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNonZeroNumbytes_cjLW2() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getOffset());
    assertEquals(100, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNonZeroOffsetAndNumbytes_lwFs3() {
    byte[] buffer = new byte[100];
    int offset = 10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(10, sparse.getOffset());
    assertEquals(90, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeOffset_LJjP4() {
    byte[] buffer = new byte[100];
    int offset = -10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(-10, sparse.getOffset());
    assertEquals(0, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeNumbytes_Wkgq5() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getOffset());
    assertEquals(-100, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeOffsetAndNumbytes_wjzx6() {
    byte[] buffer = new byte[100];
    int offset = -10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(-10, sparse.getOffset());
    assertEquals(-90, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatOctalBytes_gAHt0() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    int result = TarUtils.formatOctalBytes(value, buf, offset, length);
    assertEquals(offset + length, result);
    assertEquals(0, buf[offset + length - 1]);
    assertEquals(' ', buf[offset + length - 2]);
    assertEquals(0, buf[offset + length - 3]);
    assertEquals(0, buf[offset + length - 4]);
    assertEquals(0, buf[offset + length - 5]);
    assertEquals(0, buf[offset + length - 6]);
    assertEquals(0, buf[offset + length - 7]);
    assertEquals(0, buf[offset + length - 8]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_emOQ1() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long value = 123456789;
    TarUtils.formatUnsignedOctalString(value, buf, offset, length);
    assertEquals(0, buf[offset + length - 1]);
    assertEquals(' ', buf[offset + length - 2]);
    assertEquals(0, buf[offset + length - 3]);
    assertEquals(0, buf[offset + length - 4]);
    assertEquals(0, buf[offset + length - 5]);
    assertEquals(0, buf[offset + length - 6]);
    assertEquals(0, buf[offset + length - 7]);
    assertEquals(0, buf[offset + length - 8]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_ValidInput_Wvbb0() throws IOException {
    String sparseMap = "0,10,100,200";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(2, sparseHeaders.size());
    assertEquals(0, sparseHeaders.get(0).getOffset());
    assertEquals(10, sparseHeaders.get(0).getNumbytes());
    assertEquals(100, sparseHeaders.get(1).getOffset());
    assertEquals(200, sparseHeaders.get(1).getNumbytes());
}
}