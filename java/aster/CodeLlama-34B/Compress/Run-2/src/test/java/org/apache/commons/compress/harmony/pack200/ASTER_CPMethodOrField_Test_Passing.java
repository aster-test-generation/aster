/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.ArrayList;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CPMethodOrField_Test_Passing {
private int indexInClassForConstructor = -1;
CPMethodOrField cpmethodorfield;
    private int indexInClass = -1;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassNameWithNullClassNameAndNameAndType_GfvZ3() {
CPMethodOrField methodOrField = new CPMethodOrField(null, null);
assertNull(methodOrField.getClassName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetIndexInClassForConstructor() throws Exception{
        cpmethodorfield = new CPMethodOrField(Mockito.mock(CPClass.class), Mockito.mock(CPNameAndType.class));
        assertEquals(indexInClassForConstructor, cpmethodorfield.getIndexInClassForConstructor());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullClassNameAndNameAndType_oOqc3() {
        CPUTF8 utf8 = new CPUTF8("test");
        CPClass className = null;
        CPNameAndType nameAndType = null;
        CPMethodOrField methodOrField = new CPMethodOrField(className, nameAndType);
        assertEquals("null: null", methodOrField.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassIndexWithNullClassNameAndNameAndType_jtEH3() {
        CPUTF8 utf8 = new CPUTF8("TestClass");
        CPClass className = null;
        CPNameAndType nameAndType = null;
        CPMethodOrField methodOrField = new CPMethodOrField(className, nameAndType);
        assertEquals(0, methodOrField.getClassIndex());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDescWithNullClassAndNameAndType_avaN3() {
    CPMethodOrField methodOrField = new CPMethodOrField(null, null);
    assertNull(methodOrField.getDesc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDescIndexWithNullClassNameAndNameAndType_epiK3() {
    CPMethodOrField methodOrField = new CPMethodOrField(null, null);
    int actual = methodOrField.getDescIndex();
    int expected = -1;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIndexInClass_eBqS0_ylHx0() {
    org.apache.commons.compress.harmony.pack200.CPUTF8 utf8 = new org.apache.commons.compress.harmony.pack200.CPUTF8("test");
    CPSignature signature = new CPSignature("test", utf8, new ArrayList<CPClass>());
    CPNameAndType nameAndType = new CPNameAndType(utf8, signature);
    CPClass className = new CPClass(utf8);
    CPMethodOrField methodOrField = new CPMethodOrField(className, nameAndType);
    methodOrField.setIndexInClass(1);
    assertEquals(1, methodOrField.getIndexInClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIndexInClassWithNegativeValue_bqIq1_kkNg0() {
    org.apache.commons.compress.harmony.pack200.CPUTF8 utf8 = new org.apache.commons.compress.harmony.pack200.CPUTF8("test");
    CPSignature signature = new CPSignature("test", utf8, new ArrayList<CPClass>());
    CPNameAndType nameAndType = new CPNameAndType(utf8, signature);
    CPClass className = new CPClass(utf8);
    CPMethodOrField methodOrField = new CPMethodOrField(className, nameAndType);
    methodOrField.setIndexInClass(-1);
    assertEquals(-1, methodOrField.getIndexInClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassIndex_nDAz0_RCcp1() {
    org.apache.commons.compress.harmony.pack200.CPUTF8 utf8 = new org.apache.commons.compress.harmony.pack200.CPUTF8("TestClass");
    CPClass className = new CPClass(utf8);
    CPNameAndType nameAndType = new CPNameAndType(utf8, new CPSignature("()V", utf8, new ArrayList<CPClass>()));
    CPMethodOrField methodOrField = new CPMethodOrField(className, nameAndType);
    assertEquals(1, methodOrField.getClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIndexInClassForConstructorWithNullClassName_PiWz5_lZcD0() {
    CPMethodOrField methodOrField = new CPMethodOrField(null, new CPNameAndType(new org.apache.commons.compress.harmony.pack200.CPUTF8("testMethod"), new CPSignature("(Ljava/lang/String;)V", new org.apache.commons.compress.harmony.pack200.CPUTF8("testMethod"), Arrays.asList(new CPClass(new org.apache.commons.compress.harmony.pack200.CPUTF8("java.lang.String"))))));
    methodOrField.setIndexInClassForConstructor(1);
    assertEquals(1, methodOrField.getIndexInClassForConstructor());
}
}