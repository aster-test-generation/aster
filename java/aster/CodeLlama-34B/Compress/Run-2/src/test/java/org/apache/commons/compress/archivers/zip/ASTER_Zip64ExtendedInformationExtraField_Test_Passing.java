/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Zip64ExtendedInformationExtraField_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_EmptyBuffer_HQWn0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[0], 0), new ZipEightByteInteger(new byte[0], 0));
    byte[] buffer = new byte[0];
    int offset = 0;
    int length = 0;
    try {
        zip64ExtendedInformationExtraField.parseFromLocalFileData(buffer, offset, length);
        fail("Expected ZipException");
    } catch (ZipException e) {
        assertEquals("LFH must have both sizes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_wjse0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10 }));
    byte[] expected = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10 };
    byte[] actual = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_xmzZ0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0), new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0));
    ZipShort headerId = zip64ExtendedInformationExtraField.getHeaderId();
    assertEquals(new ZipShort(new byte[] { 1, 2, 3, 4 }, 0), headerId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdWithNullValues_sXUD2() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(null, null);
    ZipShort headerId = zip64ExtendedInformationExtraField.getHeaderId();
    assertEquals(new ZipShort(new byte[] { 0, 0, 0, 0 }, 0), headerId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdWithInvalidValues_sRgI3() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0), new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0));
    ZipShort headerId = zip64ExtendedInformationExtraField.getHeaderId();
    assertNotEquals(new ZipShort(new byte[] { 1, 2, 3, 4 }, 0), headerId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_sizeNull_CrVE1() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(null, null);
    ZipShort actual = zip64ExtendedInformationExtraField.getLocalFileDataLength();
    assertEquals(0, actual.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_axUN0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0));
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
    zip64ExtendedInformationExtraField.setSize(size);
    assertEquals(size, zip64ExtendedInformationExtraField.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeWithDifferentValues_tNZD1() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0));
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
    zip64ExtendedInformationExtraField.setSize(size);
    assertNotEquals(size, zip64ExtendedInformationExtraField.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeWithNull_HAsN2() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0));
    zip64ExtendedInformationExtraField.setSize(null);
    assertNull(zip64ExtendedInformationExtraField.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength1_bftj0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }, 0), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }, 0));
    ZipShort centralDirectoryLength = zip64ExtendedInformationExtraField.getCentralDirectoryLength();
    assertEquals(4, centralDirectoryLength.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength2_HqPB1() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }, 0), null);
    ZipShort centralDirectoryLength = zip64ExtendedInformationExtraField.getCentralDirectoryLength();
    assertEquals(2, centralDirectoryLength.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength3_iHMw2() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(null, new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }, 0));
    ZipShort centralDirectoryLength = zip64ExtendedInformationExtraField.getCentralDirectoryLength();
    assertEquals(2, centralDirectoryLength.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength4_PpyM3() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(null, null);
    ZipShort centralDirectoryLength = zip64ExtendedInformationExtraField.getCentralDirectoryLength();
    assertEquals(0, centralDirectoryLength.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength5_ItuU4() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }, 0), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }, 0), new ZipEightByteInteger(new byte[] { 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18 }, 0), new ZipLong(new byte[] { 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20 }, 0));
    ZipShort centralDirectoryLength = zip64ExtendedInformationExtraField.getCentralDirectoryLength();
    assertEquals(6, centralDirectoryLength.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_HoKX0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0));
    ZipEightByteInteger size = zip64ExtendedInformationExtraField.getSize();
    assertEquals(new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0), size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDiskStartNumber_TbnV0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipLong(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0));
    ZipLong diskStart = zip64ExtendedInformationExtraField.getDiskStartNumber();
    assertEquals(new ZipLong(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0), diskStart);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRelativeHeaderOffset_NLrh0() {
    ZipEightByteInteger expected = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0), expected, new ZipLong(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0));
    ZipEightByteInteger actual = zip64.getRelativeHeaderOffset();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_SrHt0() {
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0);
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0);
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0);
    ZipLong diskStart = new ZipLong(new byte[] { 1, 2, 3, 4 }, 0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    zip64ExtendedInformationExtraField.setCompressedSize(compressedSize);
    assertEquals(compressedSize, zip64ExtendedInformationExtraField.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSizeWithNull_iHMT1() {
    ZipEightByteInteger compressedSize = null;
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0);
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0);
    ZipLong diskStart = new ZipLong(new byte[] { 1, 2, 3, 4 }, 0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    zip64ExtendedInformationExtraField.setCompressedSize(compressedSize);
    assertNull(zip64ExtendedInformationExtraField.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSizeWithDifferentValue_UClh2() {
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0);
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0);
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0);
    ZipLong diskStart = new ZipLong(new byte[] { 1, 2, 3, 4 }, 0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    ZipEightByteInteger differentCompressedSize = new ZipEightByteInteger(new byte[] { 8, 7, 6, 5, 4, 3, 2, 1 }, 0);
    zip64ExtendedInformationExtraField.setCompressedSize(differentCompressedSize);
    assertNotEquals(compressedSize, zip64ExtendedInformationExtraField.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskStartNumber_xeVj0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0), new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0));
    ZipLong ds = new ZipLong(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0);
    zip64ExtendedInformationExtraField.setDiskStartNumber(ds);
    assertEquals(ds, zip64ExtendedInformationExtraField.getDiskStartNumber());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskStartNumberWithNull_NSZL1() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0), new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0));
    ZipLong ds = null;
    zip64ExtendedInformationExtraField.setDiskStartNumber(ds);
    assertNull(zip64ExtendedInformationExtraField.getDiskStartNumber());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskStartNumberWithDifferentValue_Pkbx2() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0), new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0));
    ZipLong ds = new ZipLong(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0);
    zip64ExtendedInformationExtraField.setDiskStartNumber(ds);
    assertNotEquals(ds, zip64ExtendedInformationExtraField.getDiskStartNumber());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NullSizes_VuRd0() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(null, null);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(ByteUtils.EMPTY_BYTE_ARRAY, data);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NullSize_edrm2() {
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(null, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(ByteUtils.EMPTY_BYTE_ARRAY, data);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NullCompressedSize_OGzU3() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, null);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(ByteUtils.EMPTY_BYTE_ARRAY, data);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRelativeHeaderOffset_uLUF0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0));
    ZipEightByteInteger rho = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
    zip64ExtendedInformationExtraField.setRelativeHeaderOffset(rho);
    assertEquals(rho, zip64ExtendedInformationExtraField.getRelativeHeaderOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_rKiR0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0));
    ZipEightByteInteger compressedSize = zip64ExtendedInformationExtraField.getCompressedSize();
    assertEquals(new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0), compressedSize);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSizeWithDifferentValues_wuxL1() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[] {8, 7, 6, 5, 4, 3, 2, 1}, 0));
    ZipEightByteInteger compressedSize = zip64ExtendedInformationExtraField.getCompressedSize();
    assertEquals(new ZipEightByteInteger(new byte[] {8, 7, 6, 5, 4, 3, 2, 1}, 0), compressedSize);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSizeWithNullValue_hInC2() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(null, null);
    ZipEightByteInteger compressedSize = zip64ExtendedInformationExtraField.getCompressedSize();
    assertNull(compressedSize);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_sizeNotNull_UKpu0_VBjJ1() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}, 0), new ZipEightByteInteger(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}, 0));
    ZipShort actual = zip64ExtendedInformationExtraField.getLocalFileDataLength();
    assertEquals(2 * 4, actual.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonNullSizes_yICC1_WQXc0_1() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(2 * 8, data.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonNullSizes_yICC1_WQXc0_2() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x01, data[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonNullSizes_yICC1_WQXc0_3() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x02, data[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonNullSizes_yICC1_WQXc0_4() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x03, data[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonNullSizes_yICC1_WQXc0_5() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x04, data[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonNullSizes_yICC1_WQXc0_6() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x05, data[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonNullSizes_yICC1_WQXc0_7() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x06, data[5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonNullSizes_yICC1_WQXc0_8() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x07, data[6]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonNullSizes_yICC1_WQXc0_9() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x08, data[7]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonNullSizes_yICC1_WQXc0_10() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x09, data[8]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonNullSizes_yICC1_WQXc0_11() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x0A, data[9]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonNullSizes_yICC1_WQXc0_12() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x0B, data[10]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonNullSizes_yICC1_WQXc0_13() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x0C, data[11]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonNullSizes_yICC1_WQXc0_14() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x0D, data[12]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonNullSizes_yICC1_WQXc0_15() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x0E, data[13]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonNullSizes_yICC1_WQXc0_16() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x0F, data[14]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NonNullSizes_yICC1_WQXc0_17() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x10, data[15]);}
}