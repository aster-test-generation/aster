/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.bzip2;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BZip2CompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_validSignature_cNvB0() {
    byte[] signature = new byte[] {'B', 'Z', 'h'};
    int length = 3;
    assertTrue(BZip2CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_XCdU1() {
    byte[] signature = new byte[] {'B', 'Z', 'x'};
    int length = 3;
    assertFalse(BZip2CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_emptySignature_MaFU2() {
    byte[] signature = new byte[] {};
    int length = 0;
    assertFalse(BZip2CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nullSignature_nuex3() {
    byte[] signature = null;
    int length = 0;
    assertFalse(BZip2CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_lengthLessThan3_eYOA4() {
    byte[] signature = new byte[] {'B', 'Z'};
    int length = 2;
    assertFalse(BZip2CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nullSignature_lengthGreaterThan3_xcJP5() {
    byte[] signature = null;
    int length = 4;
    assertFalse(BZip2CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_emptySignature_lengthGreaterThan3_ViQU6() {
    byte[] signature = new byte[] {};
    int length = 4;
    assertFalse(BZip2CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_signatureNotMatching_lengthGreaterThan3_uGEd7() {
    byte[] signature = new byte[] {'B', 'Z', 'x'};
    int length = 4;
    assertFalse(BZip2CompressorInputStream.matches(signature, length));
}
}