/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SourceFileAttribute_Test_Passing {
SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(new CPUTF8("source_file"));
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_mSNK0() {
    SourceFileAttribute attribute = new SourceFileAttribute(new CPUTF8("Test"));
    assertTrue(attribute.equals(attribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectSameValues_QIGa1() {
    SourceFileAttribute attribute1 = new SourceFileAttribute(new CPUTF8("Test"));
    SourceFileAttribute attribute2 = new SourceFileAttribute(new CPUTF8("Test"));
    assertTrue(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectDifferentValues_EDDf2() {
    SourceFileAttribute attribute1 = new SourceFileAttribute(new CPUTF8("Test1"));
    SourceFileAttribute attribute2 = new SourceFileAttribute(new CPUTF8("Test2"));
    assertFalse(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_Pypx3() {
    SourceFileAttribute attribute = new SourceFileAttribute(new CPUTF8("Test"));
    assertFalse(attribute.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullName_KyJp5() {
    SourceFileAttribute attribute = new SourceFileAttribute(null);
    assertFalse(attribute.equals(new SourceFileAttribute(new CPUTF8("Test"))));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentGlobalIndex_NNRz7() {
    SourceFileAttribute attribute1 = new SourceFileAttribute(new CPUTF8("Test", 1));
    SourceFileAttribute attribute2 = new SourceFileAttribute(new CPUTF8("Test", 2));
    assertFalse(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_fvOq0() {
    CPUTF8 name = new CPUTF8("SourceFile");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    String expected = "SourceFile: " + name;
    String actual = sourceFileAttribute.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithGlobalIndex_DoDp1() {
    CPUTF8 name = new CPUTF8("SourceFile", 1);
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    String expected = "SourceFile: " + name + " (1)";
    String actual = sourceFileAttribute.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_FaBq0() {
    CPUTF8 name = new CPUTF8("TestName");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    ClassFileEntry[] nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    assertEquals(2, nestedClassFileEntries.length);
    assertEquals(name, nestedClassFileEntries[0]);
    assertEquals(name, nestedClassFileEntries[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesWithNullName_hoxX1() {
    CPUTF8 name = null;
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    ClassFileEntry[] nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    assertEquals(0, nestedClassFileEntries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesWithEmptyName_ppmp2() {
    CPUTF8 name = new CPUTF8("");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    ClassFileEntry[] nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    assertEquals(0, nestedClassFileEntries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesWithGlobalIndex_PDuJ3() {
    CPUTF8 name = new CPUTF8("TestName", 1);
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    ClassFileEntry[] nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    assertEquals(2, nestedClassFileEntries.length);
    assertEquals(name, nestedClassFileEntries[0]);
    assertEquals(name, nestedClassFileEntries[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_doym0() {
    CPUTF8 name = new CPUTF8("SourceFileAttribute");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    assertEquals(2, sourceFileAttribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSourceFileAttribute_rCGY0() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(new CPUTF8("source_file"));
    assertTrue(sourceFileAttribute.isSourceFileAttribute());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSourceFileAttributeWithNullName_IWtX2() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(null);
    assertFalse(sourceFileAttribute.isSourceFileAttribute());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSourceFileAttributeWithEmptyName_SJAv3() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(new CPUTF8(""));
    assertFalse(sourceFileAttribute.isSourceFileAttribute());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSourceFileAttributeWithInvalidName_vnPv4() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(new CPUTF8("invalid_name"));
    assertFalse(sourceFileAttribute.isSourceFileAttribute());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameIsNull_Xkhe0() {
    SourceFileAttribute attribute = new SourceFileAttribute(null);
    int expected = 1;
    int actual = attribute.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesWithGlobalIndex_PDuJ3_1() {
    CPUTF8 name = new CPUTF8("TestName", 1);
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    ClassFileEntry[] nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    assertEquals(2, nestedClassFileEntries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesWithGlobalIndex_PDuJ3_2() {
    CPUTF8 name = new CPUTF8("TestName", 1);
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    ClassFileEntry[] nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    assertEquals(name, nestedClassFileEntries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesWithGlobalIndex_PDuJ3_3() {
    CPUTF8 name = new CPUTF8("TestName", 1);
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    ClassFileEntry[] nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    assertEquals(name, nestedClassFileEntries[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NonCPUTF8Name_xFMK6_jbqh0() {
    SourceFileAttribute attribute = new SourceFileAttribute(new CPUTF8("Test"));
    assertFalse(attribute.equals(new SourceFileAttribute(new CPUTF8("Test"))));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSourceFileAttributeWithGlobalIndex_pZUW1_Jazx0() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(new CPUTF8("source_file", 1));
    assertTrue(sourceFileAttribute.isSourceFileAttribute());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSourceFileAttributeWithNullGlobalIndex_lcPB5_cJgc0() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(new CPUTF8("source_file"));
    assertFalse(sourceFileAttribute.isSourceFileAttribute());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameIsEmptyString_AXGR2_braa0() {
    CPUTF8 name = new CPUTF8("");
    SourceFileAttribute attribute = new SourceFileAttribute(name);
    int expected = 1;
    int actual = attribute.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameIsMixedCaseString_fHum4_XboA0() {
    CPUTF8 name = new CPUTF8("TeSt");
    SourceFileAttribute attribute = new SourceFileAttribute(name);
    int expected = 31 * 1 + "TeSt".hashCode();
    int actual = attribute.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameIsMixedCaseStringWithDigits_nULL5_xfvD0() {
    CPUTF8 name = new CPUTF8("TeSt123");
    SourceFileAttribute attribute = new SourceFileAttribute(name);
    int expected = 31 * 1 + "TeSt123".hashCode();
    int actual = attribute.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameIsMixedCaseStringWithSpecialCharacters_XJLb6_CKct0() {
    CPUTF8 name = new CPUTF8("TeSt!@#$%^&*()_+");
    SourceFileAttribute attribute = new SourceFileAttribute(name);
    int expected = 31 * 1 + "TeSt!@#$%^&*()_+".hashCode();
    int actual = attribute.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameIsMixedCaseStringWithWhitespace_hrbZ7_pdeX0() {
    CPUTF8 name = new CPUTF8("TeSt 123 !@#$%^&*()_+");
    SourceFileAttribute attribute = new SourceFileAttribute(name);
    int expected = 31 * 1 + "TeSt 123 !@#$%^&*()_+".hashCode();
    int actual = attribute.hashCode();
    assertEquals(expected, actual);
}
}