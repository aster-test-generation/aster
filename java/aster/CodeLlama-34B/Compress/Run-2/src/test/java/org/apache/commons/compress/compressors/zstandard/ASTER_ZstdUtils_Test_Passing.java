/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.zstandard;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZstdUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidFrame_iQtR2() {
    byte[] signature = new byte[] { 0x00, 0x00, 0x00, 0x00 };
    int length = signature.length;
    assertFalse(ZstdUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_EmptyFrame_WdQR3() {
    byte[] signature = new byte[] {};
    int length = signature.length;
    assertFalse(ZstdUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_NullFrame_qpti4() {
    byte[] signature = null;
    int length = 0;
    assertFalse(ZstdUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ZstandardFrame_QwXX0_LlVs0() {
    byte[] signature = new byte[] { (byte) 0x28, (byte) 0xB5, (byte) 0x2F, (byte) 0xFD };
    int length = signature.length;
    assertTrue(ZstdUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidLength_xiQS5_ifFB0() {
    byte[] signature = new byte[] { (byte) 0x28, (byte) 0xB5, (byte) 0x2F, (byte) 0xFD };
    int length = -1;
    assertFalse(ZstdUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ZeroLength_lvuP6_nXxM0() {
    byte[] signature = new byte[] { (byte) 0x28, (byte) 0xB5, (byte) 0x2F, (byte) 0xFD };
    int length = 0;
    assertFalse(ZstdUtils.matches(signature, length));
}
}