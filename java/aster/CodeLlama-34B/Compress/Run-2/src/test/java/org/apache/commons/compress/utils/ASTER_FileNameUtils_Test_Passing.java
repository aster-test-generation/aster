/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.nio.file.Path;
import org.apache.commons.io.FilenameUtils;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileNameUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_NullFileName_AkNj0() {
    String fileName = null;
    String extension = FilenameUtils.getExtension(fileName);
    assertNull(extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_EmptyFileName_bMEv1() {
    String fileName = "";
    String extension = FilenameUtils.getExtension(fileName);
    assertNull(extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_NoExtension_TXgL2() {
    String fileName = "file";
    String extension = FilenameUtils.getExtension(fileName);
    assertNull(extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_SingleExtension_GJiP3() {
    String fileName = "file.txt";
    String extension = FilenameUtils.getExtension(fileName);
    assertEquals("txt", extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_MultipleExtensions_LfYN4() {
    String fileName = "file.txt.gz";
    String extension = FilenameUtils.getExtension(fileName);
    assertEquals("gz", extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_DotInFileName_xmrg5() {
    String fileName = "file.with.dots.txt";
    String extension = FilenameUtils.getExtension(fileName);
    assertEquals("txt", extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_DotAtEndOfFileName_boPQ6() {
    String fileName = "file.";
    String extension = FilenameUtils.getExtension(fileName);
    assertNull(extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_DotAtStartOfFileName_qCeh7() {
    String fileName = ".file";
    String extension = FilenameUtils.getExtension(fileName);
    assertNull(extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_DotInFileNameWithMultipleExtensions_LeGc9() {
    String fileName = "file.with.dots.txt.gz";
    String extension = FilenameUtils.getExtension(fileName);
    assertEquals("gz", extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_null_cOJV0() {
    String fileName = null;
    String baseName = FileNameUtils.getBaseName(fileName);
    assertNull(baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_empty_ZhvM1() {
    String fileName = "";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_valid_mefn2() {
    String fileName = "file.txt";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("file", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_withMultipleExtensions_iqxu4() {
    String fileName = "file.txt.gz";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("file.txt", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_withPath_kEkC5() {
    String fileName = "/path/to/file.txt";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("file", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_withPathAndMultipleExtensions_HNiI6() {
    String fileName = "/path/to/file.txt.gz";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertEquals("file.txt", baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_withInvalidFileName_FypQ7() {
    String fileName = "file.txt.gz";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertNull(baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseName_withInvalidFileNameAndPath_OEyE8() {
    String fileName = "/path/to/file.txt.gz";
    String baseName = FileNameUtils.getBaseName(fileName);
    assertNull(baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseNameWithNullPath_yUun0() {
    Path path = null;
    String baseName = FileNameUtils.getBaseName(path);
    assertNull(baseName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtensionWithNullPath_DAES0() {
    Path path = null;
    String extension = FileNameUtils.getExtension(path);
    assertNull(extension);
}
}