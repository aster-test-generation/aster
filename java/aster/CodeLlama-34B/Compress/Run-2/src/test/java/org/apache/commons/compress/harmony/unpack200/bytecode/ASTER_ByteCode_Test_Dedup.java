/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ByteCode_Test_Dedup {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperand2BytesWithInvalidPosition_FSCS2() {
    ByteCode byteCode = new ByteCode(1);
    try {
        byteCode.setOperand2Bytes(10, 2);
        fail("Expected an error to be thrown");
    } catch (Error e) {
        assertEquals("Trying to rewrite ByteCode with an int at position 2 but this won't fit in the rewrite array", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes_InvalidOperands_VbTv1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] operands = new int[] {1, 2, 3, 4};
    try {
        byteCode.setOperandBytes(operands);
        fail("Expected Error to be thrown");
    } catch (Error e) {
        assertEquals("Trying to rewrite ByteCode that has no rewrite", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes_InvalidByteCodeFormLength_aehz2() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] operands = new int[] {1, 2, 3};
    try {
        byteCode.setOperandBytes(operands);
        fail("Expected Error to be thrown");
    } catch (Error e) {
        assertEquals("Trying to rewrite ByteCode with 3 but bytecode has length 0", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedMustStartClassPool_YLwc0() {
    ByteCode byteCode = new ByteCode(1);
    assertTrue(byteCode.nestedMustStartClassPool());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedMustStartClassPoolWithNested_ppid1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    assertFalse(byteCode.nestedMustStartClassPool());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedMustStartClassPoolWithoutNested_INGE2() {
    ByteCode byteCode = new ByteCode(1);
    assertFalse(byteCode.nestedMustStartClassPool());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargets_Hunp0() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] byteCodeTargets = new int[1];
    byteCode.setByteCodeTargets(byteCodeTargets);
    assertEquals(byteCodeTargets, byteCode.getByteCodeTargets());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargetsWithNested_anwH1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[1]);
    int[] byteCodeTargets = new int[1];
    byteCode.setByteCodeTargets(byteCodeTargets);
    assertEquals(byteCodeTargets, byteCode.getByteCodeTargets());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargetsWithInvalidOpcode_zYBQ2() {
    ByteCode byteCode = new ByteCode(0, new ClassFileEntry[0]);
    int[] byteCodeTargets = new int[1];
    try {
        byteCode.setByteCodeTargets(byteCodeTargets);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid opcode: 0", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargetsWithNullByteCodeTargets_zETG3() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    try {
        byteCode.setByteCodeTargets(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("byteCodeTargets cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargetsWithEmptyByteCodeTargets_fIxY4() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] byteCodeTargets = new int[0];
    try {
        byteCode.setByteCodeTargets(byteCodeTargets);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("byteCodeTargets cannot be empty", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargetsWithInvalidByteCodeTargets_NNfW5() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] byteCodeTargets = new int[1];
    byteCodeTargets[0] = -1;
    try {
        byteCode.setByteCodeTargets(byteCodeTargets);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid byte code target: -1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRewrite_qigZ0() {
    ByteCode byteCode = new ByteCode(1);
    int[] rewrite = {1, 2, 3};
    byteCode.setRewrite(rewrite);
    assertArrayEquals(rewrite, byteCode.getRewrite());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRewriteWithNested_oTSn1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] rewrite = {1, 2, 3};
    byteCode.setRewrite(rewrite);
    assertArrayEquals(rewrite, byteCode.getRewrite());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRewriteWithNull_vaCA2() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setRewrite(null);
    assertNull(byteCode.getRewrite());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRewriteWithEmptyArray_Howa3() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setRewrite(new int[0]);
    assertEquals(0, byteCode.getRewrite().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRewriteWithInvalidOpcode_Sert4() {
    ByteCode byteCode = new ByteCode(0);
    int[] rewrite = {1, 2, 3};
    try {
        byteCode.setRewrite(rewrite);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid opcode", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRewriteWithInvalidNested_jJHU5() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[1]);
    int[] rewrite = {1, 2, 3};
    try {
        byteCode.setRewrite(rewrite);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid nested", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandByteWithInvalidPosition_WnfX2() {
    ByteCode byteCode = new ByteCode(1);
    try {
        byteCode.setOperandByte(1, 10);
        fail("Expected Error");
    } catch (Error e) {
        assertEquals("Trying to rewrite ByteCode with an byte at position 10 but this won't fit in the rewrite array", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_ocWf0() {
    ByteCode byteCode = new ByteCode(1);
    assertEquals(1, byteCode.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNullNested_hfAj3() {
    ByteCode byteCode = new ByteCode(1, null);
    assertEquals(1, byteCode.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithEmptyNested_FDTX4() {
    ClassFileEntry[] nested = new ClassFileEntry[0];
    ByteCode byteCode = new ByteCode(1, nested);
    assertEquals(1, byteCode.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_RuSM0() {
    ByteCode byteCode = new ByteCode(1);
    assertEquals("ByteCode", byteCode.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithNested_wEPi1() {
    ClassFileEntry[] nested = new ClassFileEntry[0];
    ByteCode byteCode = new ByteCode(1, nested);
    assertEquals("ByteCode", byteCode.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_ToWx0() {
    ByteCode byteCode = new ByteCode(1);
    assertEquals(1, byteCode.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRewrite_mRfa0() {
    ByteCode byteCode = new ByteCode(1);
    int[] expected = {1, 2, 3};
    int[] actual = byteCode.getRewrite();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRewriteWithNested_GjLP1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] expected = {1, 2, 3};
    int[] actual = byteCode.getRewrite();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRewriteWithInvalidOpcode_BaZC2() {
    ByteCode byteCode = new ByteCode(0);
    int[] expected = {0};
    int[] actual = byteCode.getRewrite();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRewriteWithNullNested_qNkr4() {
    ByteCode byteCode = new ByteCode(1, null);
    int[] expected = {1};
    int[] actual = byteCode.getRewrite();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRewriteWithEmptyNested_ONRG5() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] expected = {1};
    int[] actual = byteCode.getRewrite();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_Heyf0() {
    ByteCode byteCode = new ByteCode(1);
    assertTrue(byteCode.equals(byteCode));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_WxXN2() {
    ByteCode byteCode = new ByteCode(1);
    assertFalse(byteCode.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_ICHB3() {
    ByteCode byteCode = new ByteCode(1);
    assertFalse(byteCode.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPositions1_XQJm0() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(1, nestedPositions.length);
    assertEquals(0, nestedPositions[0].length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPositions2_BFZP1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(1, nestedPositions.length);
    assertEquals(0, nestedPositions[0].length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString1_RYcM0() {
    ByteCode byteCode = new ByteCode(1);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString2_ZwaX1() {
    ByteCode byteCode = new ByteCode(2);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString3_uhbh2() {
    ByteCode byteCode = new ByteCode(3);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString4_DkrU3() {
    ByteCode byteCode = new ByteCode(4);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString5_aGBn4() {
    ByteCode byteCode = new ByteCode(5);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString6_DWcW5() {
    ByteCode byteCode = new ByteCode(6);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString7_OYTW6() {
    ByteCode byteCode = new ByteCode(7);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString8_lUQm7() {
    ByteCode byteCode = new ByteCode(8);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString9_AZMw8() {
    ByteCode byteCode = new ByteCode(9);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString10_MycR9() {
    ByteCode byteCode = new ByteCode(10);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString11_bJCc10() {
    ByteCode byteCode = new ByteCode(11);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString12_zmdd11() {
    ByteCode byteCode = new ByteCode(12);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString13_torA12() {
    ByteCode byteCode = new ByteCode(13);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString14_rYOZ13() {
    ByteCode byteCode = new ByteCode(14);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString15_vAoK14() {
    ByteCode byteCode = new ByteCode(15);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString16_voGy15() {
    ByteCode byteCode = new ByteCode(16);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString17_DQtW16() {
    ByteCode byteCode = new ByteCode(17);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_opcode_HuGz0() {
    ByteCode byteCode = new ByteCode(1);
    ClassFileEntry[] nested = byteCode.getNestedClassFileEntries();
    assertEquals(1, nested.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_nested_dtmr1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    ClassFileEntry[] nested = byteCode.getNestedClassFileEntries();
    assertEquals(0, nested.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_nested_null_avxm3() {
    ByteCode byteCode = new ByteCode(1, null);
    ClassFileEntry[] nested = byteCode.getNestedClassFileEntries();
    assertNull(nested);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets1_IBVL0() {
    ByteCode byteCode = new ByteCode(1);
    int[] expected = {1};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets2_GJeo1() {
    ByteCode byteCode = new ByteCode(2);
    int[] expected = {2};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets3_zqoB2() {
    ByteCode byteCode = new ByteCode(3);
    int[] expected = {3};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets4_omks3() {
    ByteCode byteCode = new ByteCode(4);
    int[] expected = {4};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets5_hJsk4() {
    ByteCode byteCode = new ByteCode(5);
    int[] expected = {5};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets6_qsUj5() {
    ByteCode byteCode = new ByteCode(6);
    int[] expected = {6};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets7_LUNl6() {
    ByteCode byteCode = new ByteCode(7);
    int[] expected = {7};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets8_uuQO7() {
    ByteCode byteCode = new ByteCode(8);
    int[] expected = {8};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets9_FxVO8() {
    ByteCode byteCode = new ByteCode(9);
    int[] expected = {9};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets10_rjbj9() {
    ByteCode byteCode = new ByteCode(10);
    int[] expected = {10};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets11_LisB10() {
    ByteCode byteCode = new ByteCode(11);
    int[] expected = {11};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets12_NHgW11() {
    ByteCode byteCode = new ByteCode(12);
    int[] expected = {12};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets13_DUER12() {
    ByteCode byteCode = new ByteCode(13);
    int[] expected = {13};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets14_bcFg13() {
    ByteCode byteCode = new ByteCode(14);
    int[] expected = {14};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets15_Sdji14() {
    ByteCode byteCode = new ByteCode(15);
    int[] expected = {15};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeForm_kGsH0() {
    ByteCode byteCode = new ByteCode(1);
    ByteCodeForm byteCodeForm = byteCode.getByteCodeForm();
    assertEquals(byteCodeForm.getOpcode(), 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeFormWithMultipleByteCodes_qoaA2() {
    ByteCode byteCode = new ByteCode(1);
    ByteCodeForm byteCodeForm = byteCode.getByteCodeForm();
    assertEquals(byteCodeForm.getOpcode(), 1);
    assertTrue(byteCodeForm.hasMultipleByteCodes());
    assertEquals(byteCodeForm.getRewrite()[0], 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNestedPositions_uJYh0() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = new int[][] {{1, 2}, {3, 4}};
    byteCode.setNestedPositions(nestedPositions);
    assertArrayEquals(nestedPositions, byteCode.getNestedPositions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNestedPositionsWithNull_QjEZ1() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = null;
    byteCode.setNestedPositions(nestedPositions);
    assertNull(byteCode.getNestedPositions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNestedPositionsWithEmptyArray_BYfZ2() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = new int[][] {};
    byteCode.setNestedPositions(nestedPositions);
    assertEquals(0, byteCode.getNestedPositions().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeIndex_cQaX0() {
    ByteCode byteCode = new ByteCode(1);
    assertEquals(1, byteCode.getByteCodeIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeIndexWithInvalidOpcode_APVI2() {
    ByteCode byteCode = new ByteCode(-1);
    assertEquals(-1, byteCode.getByteCodeIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpcode1_RoUv0() {
    ByteCode byteCode = new ByteCode(1);
    assertEquals(1, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpcode2_tQNo1() {
    ByteCode byteCode = new ByteCode(2);
    assertEquals(2, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpcode3_EyYX2() {
    ByteCode byteCode = new ByteCode(3);
    assertEquals(3, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpcode4_JMqN3() {
    ByteCode byteCode = new ByteCode(4);
    assertEquals(4, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpcode5_uthF4() {
    ByteCode byteCode = new ByteCode(5);
    assertEquals(5, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpcode6_arJH5() {
    ByteCode byteCode = new ByteCode(6);
    assertEquals(6, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpcode7_aLkX6() {
    ByteCode byteCode = new ByteCode(7);
    assertEquals(7, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpcode8_XDXN7() {
    ByteCode byteCode = new ByteCode(8);
    assertEquals(8, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpcode9_MXDr8() {
    ByteCode byteCode = new ByteCode(9);
    assertEquals(9, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpcode10_qfWV9() {
    ByteCode byteCode = new ByteCode(10);
    assertEquals(10, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasMultipleByteCodes_SingleByteCode_EIzm0() {
    ByteCode byteCode = new ByteCode(1);
    assertFalse(byteCode.hasMultipleByteCodes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasMultipleByteCodes_NoByteCodes_CMnR2() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[] { });
    assertFalse(byteCode.hasMultipleByteCodes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeIndex_CIHI0() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setByteCodeIndex(10);
    assertEquals(10, byteCode.getByteCodeIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeIndexWithInvalidValue_yaBQ2() {
    ByteCode byteCode = new ByteCode(1);
    try {
        byteCode.setByteCodeIndex(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid byte code offset: -1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperand2BytesWithInvalidPosition_FSCS2_fid1() {
    ByteCode byteCode = new ByteCode(1);
    try {
        byteCode.setOperand2Bytes(10, 2);
        fail("Expected an error to be thrown");
    } catch (Error e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes_InvalidOperands_VbTv1_fid1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] operands = new int[] {1, 2, 3, 4};
    try {
        byteCode.setOperandBytes(operands);
        fail("Expected Error to be thrown");
    } catch (Error e) {
        assertEquals("Trying to rewrite aconst_null that has no rewrite", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes_InvalidByteCodeFormLength_aehz2_fid1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] operands = new int[] {1, 2, 3};
    try {
        byteCode.setOperandBytes(operands);
        fail("Expected Error to be thrown");
    } catch (Error e) {
        assertEquals("Trying to rewrite aconst_null that has no rewrite", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargetsWithNullByteCodeTargets_zETG3_fid1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    try {
        byteCode.setByteCodeTargets(null);
        assertNull(byteCode.getByteCodeTargets());
    } catch (NullPointerException e) {
        assertEquals("byteCodeTargets cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargetsWithEmptyByteCodeTargets_fIxY4_fid1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] byteCodeTargets = new int[0];
    try {
        byteCode.setByteCodeTargets(byteCodeTargets);
        assertEquals(0, byteCode.getByteCodeTargets().length);
    } catch (IllegalArgumentException e) {
        fail("Unexpected IllegalArgumentException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargetsWithInvalidByteCodeTargets_NNfW5_fid1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] byteCodeTargets = new int[1];
    byteCodeTargets[0] = -1;
    try {
        byteCode.setByteCodeTargets(byteCodeTargets);
        assertEquals("Invalid byte code target: -1", byteCode.getByteCodeTargets()[0]);
    } catch (IllegalArgumentException e) {
        fail("Expected IllegalArgumentException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRewriteWithInvalidOpcode_Sert4_fid1() {
    ByteCode byteCode = new ByteCode(0);
    int[] rewrite = {1, 2, 3};
    try {
        byteCode.setRewrite(rewrite);
        assertEquals(rewrite, byteCode.getRewrite());
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid opcode", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRewriteWithInvalidNested_jJHU5_fid1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[1]);
    int[] rewrite = {1, 2, 3};
    try {
        byteCode.setRewrite(rewrite);
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid nested", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandByteWithInvalidPosition_WnfX2_fid1() {
    ByteCode byteCode = new ByteCode(1);
    try {
        byteCode.setOperandByte(1, 10);
        fail("Expected Error");
    } catch (Error e) {
        assertEquals("Trying to rewrite aconst_null that has no rewrite", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_ocWf0_fid1() {
    ByteCode byteCode = new ByteCode(1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithEmptyNested_FDTX4_fid1() {
    ClassFileEntry[] nested = new ClassFileEntry[0];
    ByteCode byteCode = new ByteCode(1, nested);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRewrite_mRfa0_fid1() {
    ByteCode byteCode = new ByteCode(1);
    int[] expected = {1, 2, 3};
    int[] actual = byteCode.getRewrite();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPositions1_XQJm0_1() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(1, nestedPositions.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPositions1_XQJm0_2() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = byteCode.getNestedPositions();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPositions1_XQJm0_2_fid2() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(0, nestedPositions[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPositions2_BFZP1_1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(1, nestedPositions.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPositions2_BFZP1_2() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(0, nestedPositions[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeFormWithMultipleByteCodes_qoaA2_2() {
    ByteCode byteCode = new ByteCode(1);
    ByteCodeForm byteCodeForm = byteCode.getByteCodeForm();
    assertTrue(byteCodeForm.hasMultipleByteCodes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeFormWithMultipleByteCodes_qoaA2_3() {
    ByteCode byteCode = new ByteCode(1);
    ByteCodeForm byteCodeForm = byteCode.getByteCodeForm();
    assertEquals(byteCodeForm.getRewrite()[0], 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_1_hXRP0_dMwc0_2() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(1, nestedPositions[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_2_PenV1_lzXw0() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(0, nestedPositions.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_3_zaJs2_yFfr0_1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[1]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(1, nestedPositions.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_3_zaJs2_yFfr0_2() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[1]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(1, nestedPositions[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_4_yafI3_FzXQ0_1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[2]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(2, nestedPositions.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_4_yafI3_FzXQ0_2() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[2]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(1, nestedPositions[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_4_yafI3_FzXQ0_3() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[2]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(2, nestedPositions[1][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_5_pvcJ4_xOHx0_1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[3]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(3, nestedPositions.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_5_pvcJ4_xOHx0_2() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[3]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(1, nestedPositions[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_5_pvcJ4_xOHx0_3() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[3]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(2, nestedPositions[1][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_5_pvcJ4_xOHx0_4() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[3]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(3, nestedPositions[2][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_6_cRhR5_QsIo0_1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[4]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(4, nestedPositions.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_6_cRhR5_QsIo0_2() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[4]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(1, nestedPositions[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_6_cRhR5_QsIo0_3() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[4]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(2, nestedPositions[1][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_6_cRhR5_QsIo0_4() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[4]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(3, nestedPositions[2][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_6_cRhR5_QsIo0_5() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[4]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(4, nestedPositions[3][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_7_JIzZ6_WzsB0_1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[5]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(5, nestedPositions.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_7_JIzZ6_WzsB0_2() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[5]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(1, nestedPositions[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_7_JIzZ6_WzsB0_3() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[5]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(2, nestedPositions[1][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_7_JIzZ6_WzsB0_4() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[5]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(3, nestedPositions[2][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_7_JIzZ6_WzsB0_5() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[5]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(4, nestedPositions[3][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_7_JIzZ6_WzsB0_6() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[5]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(5, nestedPositions[4][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_8_ixdo7_RzBS0_1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[6]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(6, nestedPositions.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_8_ixdo7_RzBS0_2() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[6]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(1, nestedPositions[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_8_ixdo7_RzBS0_3() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[6]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(2, nestedPositions[1][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_8_ixdo7_RzBS0_4() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[6]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(3, nestedPositions[2][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_8_ixdo7_RzBS0_5() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[6]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(4, nestedPositions[3][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_8_ixdo7_RzBS0_6() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[6]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(5, nestedPositions[4][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_8_ixdo7_RzBS0_7() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[6]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(6, nestedPositions[5][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_9_wZNw8_YWQM0_1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[7]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(7, nestedPositions.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_9_wZNw8_YWQM0_2() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[7]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(1, nestedPositions[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_9_wZNw8_YWQM0_3() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[7]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(2, nestedPositions[1][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_9_wZNw8_YWQM0_4() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[7]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(3, nestedPositions[2][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_9_wZNw8_YWQM0_5() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[7]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(4, nestedPositions[3][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_9_wZNw8_YWQM0_6() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[7]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(5, nestedPositions[4][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_9_wZNw8_YWQM0_7() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[7]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(6, nestedPositions[5][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_9_wZNw8_YWQM0_8() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[7]);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(7, nestedPositions[6][0]);}
}