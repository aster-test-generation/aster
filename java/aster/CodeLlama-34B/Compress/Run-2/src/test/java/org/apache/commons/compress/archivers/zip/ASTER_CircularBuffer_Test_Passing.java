/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CircularBuffer_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGet_empty_qLmx2() {
    CircularBuffer buffer = new CircularBuffer(10);
    assertEquals(-1, buffer.get());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailable_EmptyBuffer_PXTS0_lEAu0() {
    CircularBuffer buffer = new CircularBuffer(10);
    assertFalse(buffer.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_ValidValue_qPFc0_Rdrk0() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(1);
    assertEquals(1, buffer.get());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_InvalidValue_vnvJ1_ViDL0() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(-1);
    assertEquals(0, buffer.get());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_FullBuffer_GLal2_jsIB0_1() {
    CircularBuffer buffer = new CircularBuffer(10);
    for (int i = 0; i < 10; i++) {
        buffer.put(i);
    }
    assertEquals(0, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_FullBuffer_GLal2_jsIB0_2() {
    CircularBuffer buffer = new CircularBuffer(10);
    for (int i = 0; i < 10; i++) {
        buffer.put(i);
    }
    assertEquals(1, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_FullBuffer_GLal2_jsIB0_3() {
    CircularBuffer buffer = new CircularBuffer(10);
    for (int i = 0; i < 10; i++) {
        buffer.put(i);
    }
    assertEquals(2, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_FullBuffer_GLal2_jsIB0_4() {
    CircularBuffer buffer = new CircularBuffer(10);
    for (int i = 0; i < 10; i++) {
        buffer.put(i);
    }
    assertEquals(3, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_FullBuffer_GLal2_jsIB0_5() {
    CircularBuffer buffer = new CircularBuffer(10);
    for (int i = 0; i < 10; i++) {
        buffer.put(i);
    }
    assertEquals(4, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_FullBuffer_GLal2_jsIB0_6() {
    CircularBuffer buffer = new CircularBuffer(10);
    for (int i = 0; i < 10; i++) {
        buffer.put(i);
    }
    assertEquals(5, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_FullBuffer_GLal2_jsIB0_7() {
    CircularBuffer buffer = new CircularBuffer(10);
    for (int i = 0; i < 10; i++) {
        buffer.put(i);
    }
    assertEquals(6, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_FullBuffer_GLal2_jsIB0_8() {
    CircularBuffer buffer = new CircularBuffer(10);
    for (int i = 0; i < 10; i++) {
        buffer.put(i);
    }
    assertEquals(7, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_FullBuffer_GLal2_jsIB0_9() {
    CircularBuffer buffer = new CircularBuffer(10);
    for (int i = 0; i < 10; i++) {
        buffer.put(i);
    }
    assertEquals(8, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_FullBuffer_GLal2_jsIB0_10() {
    CircularBuffer buffer = new CircularBuffer(10);
    for (int i = 0; i < 10; i++) {
        buffer.put(i);
    }
    assertEquals(9, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_Overflow_QkOz3_nvQD0_1() {
    CircularBuffer buffer = new CircularBuffer(10);
    for (int i = 0; i < 10; i++) {
        buffer.put(i);
    }
    buffer.put(10);
    assertEquals(10, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_Underflow_qTQU4_WuZY0_1() {
    CircularBuffer buffer = new CircularBuffer(10);
    for (int i = 0; i < 10; i++) {
        buffer.put(i);
    }
    buffer.put(-1);
    assertEquals(0, buffer.get());}
}