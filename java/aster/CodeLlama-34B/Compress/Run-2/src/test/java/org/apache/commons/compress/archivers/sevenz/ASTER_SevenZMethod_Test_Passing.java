/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZMethod_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testById_COPY_XpKJ0() {
    byte[] id = new byte[] { 0x37, 0x7A, 0x58, 0x5A };
    SevenZMethod method = SevenZMethod.byId(id);
    assertEquals(SevenZMethod.COPY, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testById_LZMA_mGsm1() {
    byte[] id = new byte[] { 0x37, 0x7A, 0x58, 0x5A };
    SevenZMethod method = SevenZMethod.byId(id);
    assertEquals(SevenZMethod.LZMA, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testById_invalidValue_KrkE5() {
    byte[] id = new byte[] { 0x37, 0x7A, 0x58, 0x5A };
    SevenZMethod method = SevenZMethod.byId(id);
    assertNull(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_COPY_ZcKp0_tSZO0() {
    SevenZMethod method = SevenZMethod.COPY;
    byte[] id = method.getId();
    assertEquals(SevenZMethod.COPY.getId(), id);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_LZMA_lKCN1_GQya0() {
    SevenZMethod method = SevenZMethod.LZMA;
    byte[] id = method.getId();
    assertEquals(SevenZMethod.LZMA.getId(), id);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_LZMA2_XVbG2_TBXy0() {
    SevenZMethod method = SevenZMethod.LZMA2;
    byte[] id = method.getId();
    assertEquals(SevenZMethod.LZMA2.getId(), id);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_DEFLATE_SEnD3_Fyzx1() {
    SevenZMethod method = SevenZMethod.DEFLATE;
    byte[] id = method.getId();
    assertEquals(SevenZMethod.DEFLATE.getId(), id);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_DEFLATE64_RKwc4_DJgD0() {
    SevenZMethod method = SevenZMethod.DEFLATE64;
    byte[] id = method.getId();
    assertEquals(SevenZMethod.DEFLATE64.getId(), id);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BZIP2_GgBp5_cahF0() {
    SevenZMethod method = SevenZMethod.BZIP2;
    byte[] id = method.getId();
    assertEquals(SevenZMethod.BZIP2.getId(), id);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_AES256SHA256_aaeU6_FKkx0() {
    SevenZMethod method = SevenZMethod.AES256SHA256;
    byte[] id = method.getId();
    assertEquals(SevenZMethod.AES256SHA256.getId(), id);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_X86_FILTER_ZtWV7_VOhc0() {
    SevenZMethod method = SevenZMethod.BCJ_X86_FILTER;
    byte[] id = method.getId();
    assertEquals(SevenZMethod.BCJ_X86_FILTER.getId(), id);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_PPC_FILTER_VSqN8_jypR0() {
    SevenZMethod method = SevenZMethod.BCJ_PPC_FILTER;
    byte[] id = method.getId();
    assertEquals(SevenZMethod.BCJ_PPC_FILTER.getId(), id);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_IA64_FILTER_Obrt9_ghjq0() {
    SevenZMethod method = SevenZMethod.BCJ_IA64_FILTER;
    byte[] id = method.getId();
    assertEquals(SevenZMethod.BCJ_IA64_FILTER.getId(), id);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_ARM_FILTER_gvNT10_RXLn0() {
    SevenZMethod method = SevenZMethod.BCJ_ARM_FILTER;
    byte[] id = method.getId();
    assertEquals(SevenZMethod.BCJ_ARM_FILTER.getId(), id);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetId_BCJ_ARM_THUMB_FILTER_HjxM11_JZTZ0() {
    SevenZMethod method = SevenZMethod.BCJ_ARM_THUMB_FILTER;
    byte[] id = method.getId();
    assertEquals(SevenZMethod.BCJ_ARM_THUMB_FILTER.getId(), id);
}
}