/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassBands_Test_Failing {




@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_AsVf0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classThisInts = classBands.getClassThisInts();
    assertEquals(classThisInts.length, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisIntsWithNonEmptyArray_NEfl1_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classThisInts = classBands.getClassThisInts();
    assertEquals(classThisInts.length, 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisIntsWithNonEmptyArray_NEfl1_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classThisInts = classBands.getClassThisInts();
    assertEquals(classThisInts[0], 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisIntsWithMultipleElements_PiUR2_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classThisInts = classBands.getClassThisInts();
    assertEquals(classThisInts.length, 2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisIntsWithMultipleElements_PiUR2_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classThisInts = classBands.getClassThisInts();
    assertEquals(classThisInts[0], 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisIntsWithMultipleElements_PiUR2_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classThisInts = classBands.getClassThisInts();
    assertEquals(classThisInts[1], 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisIntsWithNegativeElements_kpaa3_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classThisInts = classBands.getClassThisInts();
    assertEquals(classThisInts.length, 2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisIntsWithNegativeElements_kpaa3_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classThisInts = classBands.getClassThisInts();
    assertEquals(classThisInts[0], -1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisIntsWithNegativeElements_kpaa3_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classThisInts = classBands.getClassThisInts();
    assertEquals(classThisInts[1], -2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisIntsWithNullSegment_hNQE4() {
    Segment segment = null;
    ClassBands classBands = new ClassBands(segment);
    int[] classThisInts = classBands.getClassThisInts();
    assertNull(classThisInts);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisIntsWithNullClassBands_iLda5() {
    ClassBands classBands = null;
    int[] classThisInts = classBands.getClassThisInts();
    assertNull(classThisInts);
}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlags_DefaultLayout_bWjs0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] classFlags = classBands.getClassFlags();
    for (int i = 0; i < 16; i++) {
    }
    assertEquals(16, classFlags.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlags_NonDefaultLayout_VyXC1_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] classFlags = classBands.getClassFlags();
    for (int i = 0; i < 16; i++) {
    }
    assertEquals(16, classFlags.length);}

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerStartP_RAHs0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerStartP = classBands.getCodeHandlerStartP();
        for (int i = 0; i < codeHandlerStartP.length; i++) {
            for (int j = 0; j < codeHandlerStartP[i].length; j++) {
            }
        }
        assertNotNull(codeHandlerStartP);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerStartP_RAHs0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerStartP = classBands.getCodeHandlerStartP();
        for (int i = 0; i < codeHandlerStartP.length; i++) {
            for (int j = 0; j < codeHandlerStartP[i].length; j++) {
            }
        }
        assertEquals(codeHandlerStartP.length, 10);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerStartP_RAHs0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerStartP = classBands.getCodeHandlerStartP();
        for (int i = 0; i < codeHandlerStartP.length; i++) {
            for (int j = 0; j < codeHandlerStartP[i].length; j++) {
            }
        }
        assertEquals(codeHandlerStartP[0].length, 10);}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributesWithNullSegment_YHBy1() {
    ClassBands classBands = new ClassBands(null);
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertNull(fieldAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributesWithInvalidSegment_PUDe2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertNull(fieldAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributesWithInvalidAttribute_WvDH3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertNull(fieldAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributesWithNullAttribute_ufrP4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertNull(fieldAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributesWithInvalidSegmentAndAttribute_flde5() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertNull(fieldAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributesWithNullSegmentAndAttribute_gles6() {
    ClassBands classBands = new ClassBands(null);
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertNull(fieldAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributesWithInvalidSegmentAndInvalidAttribute_XeMM7() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertNull(fieldAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributesWithNullSegmentAndInvalidAttribute_lavL8() {
    ClassBands classBands = new ClassBands(null);
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertNull(fieldAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributesWithInvalidSegmentAndNullAttribute_ARtq9() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertNull(fieldAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributesWithNullSegmentAndNullAttribute_TGkB10() {
    ClassBands classBands = new ClassBands(null);
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertNull(fieldAttributes);
}

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpack_ZunN0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        classBands.unpack();
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithNullSegment_fXgU1() {
        ClassBands classBands = new ClassBands(null);
        classBands.unpack();
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithEmptySegment_QrLr2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        classBands.unpack();
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithNonEmptySegment_jCST3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        classBands.unpack();
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithInvalidSegment_HnEJ4() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        classBands.unpack();
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithValidSegment_xXbC5() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        classBands.unpack();
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithNullClassBands_FLjS6() {
        ClassBands classBands = null;
        classBands.unpack();
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithEmptyClassBands_wiZm7() {
        ClassBands classBands = new ClassBands(null);
        classBands.unpack();
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithNonEmptyClassBands_pgVG8() {
        ClassBands classBands = new ClassBands(null);
        classBands.unpack();
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithInvalidClassBands_mEzR9() {
        ClassBands classBands = new ClassBands(null);
        classBands.unpack();
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithValidClassBands_HYFo10() {
        ClassBands classBands = new ClassBands(null);
        classBands.unpack();
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithNullSegmentAndClassBands_EVKD11() {
        Segment segment = null;
        ClassBands classBands = new ClassBands(segment);
        classBands.unpack();
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithEmptySegmentAndClassBands_owNJ12() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        classBands.unpack();
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithNonEmptySegmentAndClassBands_TtCK13() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        classBands.unpack();
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithInvalidSegmentAndClassBands_ejCW14() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        classBands.unpack();
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithValidSegmentAndClassBands_mCWW15() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        classBands.unpack();
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithNullSegmentAndNullClassBands_VmoI16() {
        Segment segment = null;
        ClassBands classBands = null;
        classBands.unpack();
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithEmptySegmentAndNullClassBands_drjj17() {
        Segment segment = new Segment();
        ClassBands classBands = null;
        classBands.unpack();
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocal_GaTQ0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertNotNull(icLocal);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocal_GaTQ0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertEquals(10, icLocal.length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocal_GaTQ0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertEquals(10, icLocal[0].length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNullSegment_FZuK1() {
        ClassBands classBands = new ClassBands(null);
        IcTuple[][] icLocal = classBands.getIcLocal();
        assertNull(icLocal);
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithEmptySegment_ZCnz2_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertNotNull(icLocal);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithEmptySegment_ZCnz2_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertEquals(0, icLocal.length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegment_BCYZ3_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertNotNull(icLocal);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegment_BCYZ3_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertEquals(10, icLocal.length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegment_BCYZ3_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertEquals(10, icLocal[0].length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegmentAndNonZeroStartIndex_PqnA4_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertNotNull(icLocal);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegmentAndNonZeroStartIndex_PqnA4_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertEquals(10, icLocal.length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegmentAndNonZeroStartIndex_PqnA4_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertEquals(10, icLocal[0].length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegmentAndNonZeroEndIndex_UxHZ5_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertNotNull(icLocal);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegmentAndNonZeroEndIndex_UxHZ5_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertEquals(10, icLocal.length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegmentAndNonZeroEndIndex_UxHZ5_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertEquals(10, icLocal[0].length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegmentAndNonZeroStartAndEndIndex_oWjV6_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertNotNull(icLocal);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegmentAndNonZeroStartAndEndIndex_oWjV6_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertEquals(10, icLocal.length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegmentAndNonZeroStartAndEndIndex_oWjV6_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertEquals(10, icLocal[0].length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegmentAndZeroStartAndEndIndex_ZOpt7_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertNotNull(icLocal);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegmentAndZeroStartAndEndIndex_ZOpt7_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertEquals(10, icLocal.length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegmentAndZeroStartAndEndIndex_ZOpt7_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
    
        assertEquals(10, icLocal[0].length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegmentAndNegativeStartAndEndIndex_ivBp8_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
        assertNotNull(icLocal);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegmentAndNegativeStartAndEndIndex_ivBp8_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
        assertEquals(10, icLocal.length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocalWithNonEmptySegmentAndNegativeStartAndEndIndex_ivBp8_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
        assertEquals(10, icLocal[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeMaxNALocals_Ttwp0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
    assertNotNull(codeMaxNALocals);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeMaxNALocals_Ttwp0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
    assertEquals(0, codeMaxNALocals.length);}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_1_cAFE0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertEquals(0, codeHandlerCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_2_yiZI1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertEquals(1, codeHandlerCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_3_FlUj2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertEquals(2, codeHandlerCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_4_TRaF3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertEquals(3, codeHandlerCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_5_Hvzs4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertEquals(4, codeHandlerCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_6_grBM5() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertEquals(5, codeHandlerCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_7_iafQ6() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertEquals(6, codeHandlerCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_8_uvPZ7() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertEquals(7, codeHandlerCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_9_OlkB8() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertEquals(8, codeHandlerCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_10_bMia9() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertEquals(9, codeHandlerCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_11_KzsF10() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertEquals(10, codeHandlerCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_12_IxLP11() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertEquals(11, codeHandlerCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_13_XNAa12() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertEquals(12, codeHandlerCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_14_Zaqx13() {
    Segment segment = new Segment();
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFieldCount_iKDa0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classFieldCount = classBands.getClassFieldCount();
    assertEquals(0, classFieldCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFieldCountWithNullSegment_XpNO4() {
    ClassBands classBands = new ClassBands(null);
    int[] classFieldCount = classBands.getClassFieldCount();
    assertEquals(0, classFieldCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFieldCountWithEmptySegment_FBnn5() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classFieldCount = classBands.getClassFieldCount();
    assertEquals(0, classFieldCount.length);
}

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrInts_GRSN0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
    
        assertNotNull(methodDescrInts);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrInts_GRSN0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
    
        assertEquals(1, methodDescrInts.length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrInts_GRSN0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
    
        assertEquals(1, methodDescrInts[0].length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrInts_GRSN0_4() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
    
        assertEquals(1, methodDescrInts[0][0]);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrIntsWithNullSegment_mAGP1() {
        ClassBands classBands = new ClassBands(null);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
        assertNull(methodDescrInts);
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrIntsWithEmptySegment_eYQo2_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
    
        assertNotNull(methodDescrInts);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrIntsWithEmptySegment_eYQo2_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
    
        assertEquals(0, methodDescrInts.length);}

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassVersionMajor_mEmR0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] classVersionMajor = classBands.getClassVersionMajor();
        assertEquals(classVersionMajor.length, 1);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassVersionMajor_mEmR0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] classVersionMajor = classBands.getClassVersionMajor();
        assertEquals(classVersionMajor[0], 1);}


    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerEndPO_aIjs0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerEndPO = classBands.getCodeHandlerEndPO();
        assertNotNull(codeHandlerEndPO);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerEndPO_aIjs0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerEndPO = classBands.getCodeHandlerEndPO();
        assertEquals(1, codeHandlerEndPO.length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerEndPO_aIjs0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerEndPO = classBands.getCodeHandlerEndPO();
        assertEquals(1, codeHandlerEndPO[0].length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerEndPO_aIjs0_4() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerEndPO = classBands.getCodeHandlerEndPO();
        assertEquals(0, codeHandlerEndPO[0][0]);}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_1_DDKh0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertEquals(codeHasAttributes.length, 0);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_2_Hofg1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertEquals(codeHasAttributes.length, 1);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_3_lloe2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertEquals(codeHasAttributes.length, 2);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_4_FEHQ3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertEquals(codeHasAttributes.length, 3);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_5_IKyg4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertEquals(codeHasAttributes.length, 4);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_6_MnNH5() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertEquals(codeHasAttributes.length, 5);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_7_dZkp6() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertEquals(codeHasAttributes.length, 6);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_8_AaPc7() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertEquals(codeHasAttributes.length, 7);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_9_hxlY8() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertEquals(codeHasAttributes.length, 8);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_10_YhcK9() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertEquals(codeHasAttributes.length, 9);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_11_HbFL10() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertEquals(codeHasAttributes.length, 10);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_12_ckxJ11() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertEquals(codeHasAttributes.length, 11);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_13_xZAw12() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertEquals(codeHasAttributes.length, 12);
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_YvkH0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] expected = {{1, 2}, {3, 4}, {5, 6}};
        int[][] actual = classBands.getFieldDescrInts();
        assertArrayEquals(expected, actual);
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrIntsWithNull_SaZE1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] expected = null;
        int[][] actual = classBands.getFieldDescrInts();
        assertEquals(expected, actual);
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrIntsWithEmpty_NTOf2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] expected = {};
        int[][] actual = classBands.getFieldDescrInts();
        assertEquals(expected, actual);
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrIntsWithSingleElement_evlW3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] expected = {{1}};
        int[][] actual = classBands.getFieldDescrInts();
        assertEquals(expected, actual);
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrIntsWithMultipleElements_Cyiv4() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] expected = {{1, 2}, {3, 4}, {5, 6}, {7, 8}};
        int[][] actual = classBands.getFieldDescrInts();
        assertEquals(expected, actual);
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrIntsWithNegativeValues_KpPf5() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] expected = {{-1, -2}, {-3, -4}, {-5, -6}};
        int[][] actual = classBands.getFieldDescrInts();
        assertEquals(expected, actual);
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrIntsWithZeroValues_rKDR6() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] expected = {{0, 0}, {0, 0}, {0, 0}};
        int[][] actual = classBands.getFieldDescrInts();
        assertEquals(expected, actual);
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrIntsWithMaxValues_exRz7() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] expected = {{Integer.MAX_VALUE, Integer.MAX_VALUE}, {Integer.MAX_VALUE, Integer.MAX_VALUE}, {Integer.MAX_VALUE, Integer.MAX_VALUE}};
        int[][] actual = classBands.getFieldDescrInts();
        assertEquals(expected, actual);
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrIntsWithMinValues_JsTk8() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] expected = {{Integer.MIN_VALUE, Integer.MIN_VALUE}, {Integer.MIN_VALUE, Integer.MIN_VALUE}, {Integer.MIN_VALUE, Integer.MIN_VALUE}};
        int[][] actual = classBands.getFieldDescrInts();
        assertEquals(expected, actual);
    }

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassInterfacesInts_SIHw0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] classInterfacesInts = classBands.getClassInterfacesInts();
        assertNotNull(classInterfacesInts);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassInterfacesInts_SIHw0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] classInterfacesInts = classBands.getClassInterfacesInts();
        assertEquals(1, classInterfacesInts.length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassInterfacesInts_SIHw0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] classInterfacesInts = classBands.getClassInterfacesInts();
        assertEquals(1, classInterfacesInts[0].length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassInterfacesInts_SIHw0_4() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] classInterfacesInts = classBands.getClassInterfacesInts();
        assertEquals(1, classInterfacesInts[0][0]);}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags_default_JrSK0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertEquals(0, methodFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags_nonDefault_kqas1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertNotEquals(0, methodFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags_null_Kiwu2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertNull(methodFlags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags_empty_AGkR3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertEquals(0, methodFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags_nonEmpty_aFJk4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertNotEquals(0, methodFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags_invalid_ZUcS5() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertNull(methodFlags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags_valid_hZJX6() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertNotNull(methodFlags);
}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCatchPO_ZEOb0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerCatchPO = classBands.getCodeHandlerCatchPO();
    assertNotNull(codeHandlerCatchPO);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCatchPO_ZEOb0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerCatchPO = classBands.getCodeHandlerCatchPO();
    assertEquals(1, codeHandlerCatchPO.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCatchPO_ZEOb0_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerCatchPO = classBands.getCodeHandlerCatchPO();
    assertEquals(1, codeHandlerCatchPO[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCatchPO_ZEOb0_4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerCatchPO = classBands.getCodeHandlerCatchPO();
    assertEquals(0, codeHandlerCatchPO[0][0]);}

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerClassRCN_hJwg0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerClassRCN = classBands.getCodeHandlerClassRCN();
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
            }
        }
        assertNotNull(codeHandlerClassRCN);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerClassRCN_hJwg0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerClassRCN = classBands.getCodeHandlerClassRCN();
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
            }
        }
        assertEquals(10, codeHandlerClassRCN.length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerClassRCN_hJwg0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerClassRCN = classBands.getCodeHandlerClassRCN();
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
            }
        }
        assertEquals(10, codeHandlerClassRCN[0].length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerClassRCN_wfNQ1_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerClassRCN = classBands.getCodeHandlerClassRCN();
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
            }
        }
    
        assertNotNull(codeHandlerClassRCN);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerClassRCN_wfNQ1_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerClassRCN = classBands.getCodeHandlerClassRCN();
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
            }
        }
    
        assertEquals(10, codeHandlerClassRCN.length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerClassRCN_wfNQ1_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerClassRCN = classBands.getCodeHandlerClassRCN();
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
            }
        }
    
        assertEquals(10, codeHandlerClassRCN[0].length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerClassRCN_Length_DjgD2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerClassRCN = classBands.getCodeHandlerClassRCN();
        assertEquals(10, codeHandlerClassRCN.length);
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerClassRCN_Values_zNte3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerClassRCN = classBands.getCodeHandlerClassRCN();
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                assertEquals(i * j, codeHandlerClassRCN[i][j]);
            }
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeMaxStack_DgsS0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeMaxStack = classBands.getCodeMaxStack();
    for (int i = 0; i < codeMaxStack.length; i++) {
    }

    assertNotNull(codeMaxStack);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeMaxStack_DgsS0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeMaxStack = classBands.getCodeMaxStack();
    for (int i = 0; i < codeMaxStack.length; i++) {
    }

    assertEquals(10, codeMaxStack.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeMaxStackWithNullSegment_SKRG1() {
    ClassBands classBands = new ClassBands(null);
    int[] codeMaxStack = classBands.getCodeMaxStack();
    assertNull(codeMaxStack);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeMaxStackWithEmptySegment_IdvJ2_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeMaxStack = classBands.getCodeMaxStack();

    assertNotNull(codeMaxStack);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeMaxStackWithEmptySegment_IdvJ2_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeMaxStack = classBands.getCodeMaxStack();

    assertEquals(0, codeMaxStack.length);}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderedCodeAttributes_jEWd0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    List<List<Attribute>> orderedCodeAttributes = classBands.getOrderedCodeAttributes();
    assertEquals(orderedCodeAttributes.size(), 0);
}

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescr_ATtW0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        String[][] methodDescr = classBands.getMethodDescr();
        assertNotNull(methodDescr);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescr_ATtW0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        String[][] methodDescr = classBands.getMethodDescr();
        assertEquals(1, methodDescr.length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescr_ATtW0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        String[][] methodDescr = classBands.getMethodDescr();
        assertEquals("methodDescr", methodDescr[0][0]);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescr_ATtW0_4() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        String[][] methodDescr = classBands.getMethodDescr();
        assertEquals("methodDescr", methodDescr[0][1]);}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags1_Alrv0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertEquals(0, fieldFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags2_WSNC1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertEquals(1, fieldFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags3_kiLn2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertEquals(16, fieldFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags4_imSM3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertEquals(0, fieldFlags[0].length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags5_zGcc4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertEquals(1, fieldFlags[0].length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags6_TdZm5() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertEquals(16, fieldFlags[0].length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags7_ZGKN6() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertEquals(0, fieldFlags[1].length);
}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinor_JpOZ0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNotNull(classVersionMinor);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinor_JpOZ0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(1, classVersionMinor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinor_JpOZ0_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(0, classVersionMinor[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNonZeroValue_fmqz1_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNotNull(classVersionMinor);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNonZeroValue_fmqz1_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(1, classVersionMinor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNonZeroValue_fmqz1_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(1, classVersionMinor[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithMultipleValues_JeMA2_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNotNull(classVersionMinor);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithMultipleValues_JeMA2_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(2, classVersionMinor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithMultipleValues_JeMA2_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(0, classVersionMinor[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithMultipleValues_JeMA2_4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(1, classVersionMinor[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNegativeValue_rWmp3_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNotNull(classVersionMinor);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNegativeValue_rWmp3_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(1, classVersionMinor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNegativeValue_rWmp3_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(-1, classVersionMinor[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithInvalidValue_SalG4_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNotNull(classVersionMinor);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithInvalidValue_SalG4_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(1, classVersionMinor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithInvalidValue_SalG4_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(Integer.MAX_VALUE, classVersionMinor[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNullValue_cBGM5() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNull(classVersionMinor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithEmptyArray_lXTb6_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNotNull(classVersionMinor);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithEmptyArray_lXTb6_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(0, classVersionMinor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithInvalidSegment_IKdn7_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNotNull(classVersionMinor);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithInvalidSegment_IKdn7_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(1, classVersionMinor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithInvalidSegment_IKdn7_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(0, classVersionMinor[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNullSegment_auwx8() {
    Segment segment = null;
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNull(classVersionMinor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithInvalidClassBands_BgRP9() {
    Segment segment = new Segment();
    ClassBands classBands = null;
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNull(classVersionMinor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNullClassBands_iHMT10() {
    Segment segment = new Segment();
    ClassBands classBands = null;
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawClassFlags_lineCoverage_nQdn0_ngWC0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] rawClassFlags = classBands.getRawClassFlags();
    assertNotNull(rawClassFlags);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawClassFlags_lineCoverage_nQdn0_ngWC0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] rawClassFlags = classBands.getRawClassFlags();
    assertEquals(10, rawClassFlags.length);}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperIntsWithNullSegment_mvlx1_IFNT0() {
    ClassBands classBands = new ClassBands(new Segment());
    int[] classSuperInts = classBands.getClassSuperInts();
    assertNull(classSuperInts);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassMethodCount_CBeZ0_AYyT0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classMethodCount = classBands.getClassMethodCount();
    assertEquals(0, classMethodCount.length);
}


















@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescrIntsWithMultipleSegments_SFWW3_eLbq0_1() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    ClassBands classBands = new ClassBands(segment1);
    int[][] methodDescrInts = classBands.getMethodDescrInts();
    assertNotNull(methodDescrInts);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescrIntsWithMultipleSegments_SFWW3_eLbq0_2() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    ClassBands classBands = new ClassBands(segment1);
    int[][] methodDescrInts = classBands.getMethodDescrInts();
    assertEquals(2, methodDescrInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescrIntsWithMultipleSegments_SFWW3_eLbq0_3() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    ClassBands classBands = new ClassBands(segment1);
    int[][] methodDescrInts = classBands.getMethodDescrInts();
    assertEquals(1, methodDescrInts[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescrIntsWithMultipleSegments_SFWW3_eLbq0_4() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    ClassBands classBands = new ClassBands(segment1);
    int[][] methodDescrInts = classBands.getMethodDescrInts();
    assertEquals(1, methodDescrInts[1].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescrIntsWithMultipleSegments_SFWW3_eLbq0_5() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    ClassBands classBands = new ClassBands(segment1);
    int[][] methodDescrInts = classBands.getMethodDescrInts();
    assertEquals(1, methodDescrInts[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescrIntsWithMultipleSegments_SFWW3_eLbq0_6() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    ClassBands classBands = new ClassBands(segment1);
    int[][] methodDescrInts = classBands.getMethodDescrInts();
    assertEquals(1, methodDescrInts[1][0]);}

















}