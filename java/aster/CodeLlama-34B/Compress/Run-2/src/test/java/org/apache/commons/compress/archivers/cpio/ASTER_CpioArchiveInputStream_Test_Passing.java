/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkip_InvalidInputStreamAndBlockSize_hBUn10() throws IOException {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ValidSignatureWithDifferentOrder_oJaf2_XLwD0() {
    byte[] signature = new byte[] { (byte) 0xc7, (byte) 0x71, (byte) 0x30, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x31 };
    int length = signature.length;
    assertTrue(CpioArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidSignatureWithDifferentOrder_gcmS3_uKRo0() {
    byte[] signature = new byte[] { (byte) 0xc7, (byte) 0x71, (byte) 0x30, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x32 };
    int length = signature.length;
    assertTrue(CpioArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ValidSignatureWithDifferentOrderAndLength_BbVa6_mNti0() {
    byte[] signature = new byte[] { (byte) 0xc7, (byte) 0x71, (byte) 0x30, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x31, (byte) 0x32 };
    int length = signature.length;
    assertTrue(CpioArchiveInputStream.matches(signature, length));
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip_NullStream_qhwE2_molg5() throws IOException {
        CpioArchiveInputStream input = new CpioArchiveInputStream(null, "UTF-8");
        assertEquals(0, input.skip(10));
    }
}