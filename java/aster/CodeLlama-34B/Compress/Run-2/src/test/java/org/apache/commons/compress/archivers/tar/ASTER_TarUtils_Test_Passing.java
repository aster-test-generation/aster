/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.IOException;
import java.util.List;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNameBytes_Ecok0() {
    String name = "test";
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 4;
    int expected = 4;
    int actual = TarUtils.formatNameBytes(name, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseBoolean_true_szwq0() {
    byte[] buffer = new byte[] { 1 };
    int offset = 0;
    assertTrue(TarUtils.parseBoolean(buffer, offset));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX01SparseHeaders_wXtI0_1() {
    String sparseMap = "100,200,300";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parsePAX01SparseHeaders(sparseMap);
    assertEquals(3, sparseHeaders.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX01SparseHeaders_wXtI0_2() {
    String sparseMap = "100,200,300";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parsePAX01SparseHeaders(sparseMap);
    assertEquals(100, sparseHeaders.get(0).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX01SparseHeaders_wXtI0_3() {
    String sparseMap = "100,200,300";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parsePAX01SparseHeaders(sparseMap);
    assertEquals(200, sparseHeaders.get(1).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX01SparseHeaders_wXtI0_4() {
    String sparseMap = "100,200,300";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parsePAX01SparseHeaders(sparseMap);
    assertEquals(300, sparseHeaders.get(2).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX01SparseHeadersWithEmptyString_aEyN1() {
    String sparseMap = "";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parsePAX01SparseHeaders(sparseMap);
    assertEquals(0, sparseHeaders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX01SparseHeadersWithNullString_OXhc3() {
    String sparseMap = null;
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parsePAX01SparseHeaders(sparseMap);
    assertEquals(0, sparseHeaders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_ValidInput_HBKF0() {
    byte[] buffer = new byte[] { '1', '2', '3', '4', '5', '6', '7', '8', '9' };
    int offset = 0;
    int length = 9;
    long expected = 123456789;
    long actual = TarUtils.parseOctal(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_ValidInput_LeadingSpaces_XgUC1() {
    byte[] buffer = new byte[] { ' ', ' ', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
    int offset = 0;
    int length = 10;
    long expected = 123456789;
    long actual = TarUtils.parseOctal(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_ValidInput_TrailingSpaces_tEnF2() {
    byte[] buffer = new byte[] { '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ' };
    int offset = 0;
    int length = 10;
    long expected = 123456789;
    long actual = TarUtils.parseOctal(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_ValidInput_LeadingAndTrailingSpaces_NUcC3() {
    byte[] buffer = new byte[] { ' ', ' ', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ' };
    int offset = 0;
    int length = 11;
    long expected = 123456789;
    long actual = TarUtils.parseOctal(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_InvalidInput_LengthLessThan2_enKc4() {
    byte[] buffer = new byte[] { '1', '2', '3', '4', '5', '6', '7', '8', '9' };
    int offset = 0;
    int length = 1;
    try {
        TarUtils.parseOctal(buffer, offset, length);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Length 1 must be at least 2", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_InvalidInput_NonOctalCharacter_YWwO5() {
    byte[] buffer = new byte[] { '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a' };
    int offset = 0;
    int length = 10;
    try {
        TarUtils.parseOctal(buffer, offset, length);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid octal character 'a'", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_InvalidInput_NegativeNumber_ERrY6() {
    byte[] buffer = new byte[] { '-', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
    int offset = 0;
    int length = 10;
    try {
        TarUtils.parseOctal(buffer, offset, length);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid octal character '-'", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparse_zZsE0_1() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparse_zZsE0_2() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNonZeroOffset_hneo1_1() {
    byte[] buffer = new byte[100];
    int offset = 10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(10, sparse.getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNonZeroOffset_hneo1_2() {
    byte[] buffer = new byte[100];
    int offset = 10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNonZeroNumbytes_STMO2_2() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(10, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNonZeroOffsetAndNumbytes_UUpZ3_2() {
    byte[] buffer = new byte[100];
    int offset = 10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(10, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeOffset_Rmvp4_1() {
    byte[] buffer = new byte[100];
    int offset = -10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(-10, sparse.getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeOffset_Rmvp4_2() {
    byte[] buffer = new byte[100];
    int offset = -10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeNumbytes_wYzL5_2() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(-10, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeOffsetAndNumbytes_QOGb6_2() {
    byte[] buffer = new byte[100];
    int offset = -10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(-10, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithMaxOffset_eBsz7_1() {
    byte[] buffer = new byte[100];
    int offset = Integer.MAX_VALUE;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(Integer.MAX_VALUE, sparse.getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithMaxOffset_eBsz7_2() {
    byte[] buffer = new byte[100];
    int offset = Integer.MAX_VALUE;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithMaxNumbytes_nDoE8_2() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(Integer.MAX_VALUE, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithMaxOffsetAndNumbytes_LPON9_2() {
    byte[] buffer = new byte[100];
    int offset = Integer.MAX_VALUE;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(Integer.MAX_VALUE, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithMinOffset_XYUW10_1() {
    byte[] buffer = new byte[100];
    int offset = Integer.MIN_VALUE;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(Integer.MIN_VALUE, sparse.getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithMinOffset_XYUW10_2() {
    byte[] buffer = new byte[100];
    int offset = Integer.MIN_VALUE;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseName_NullEncoding_NWlc7() throws IOException {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    ZipEncoding encoding = null;
    String result = TarUtils.parseName(buffer, offset, length, encoding);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary1_ORyI0() {
    byte[] buffer = new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff };
    int offset = 0;
    int length = 8;
    long expected = -1;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary2_gaMS1() {
    byte[] buffer = new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff };
    int offset = 0;
    int length = 9;
    long expected = -1;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary3_DSsx2() {
    byte[] buffer = new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff };
    int offset = 0;
    int length = 10;
    long expected = -1;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary4_JCEz3() {
    byte[] buffer = new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff };
    int offset = 0;
    int length = 11;
    long expected = -1;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary1_JUBR0() {
    byte[] buffer = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a };
    int offset = 0;
    int length = 10;
    long result = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(1234567890L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary2_dtYI1() {
    byte[] buffer = new byte[] { (byte) 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09 };
    int offset = 0;
    int length = 10;
    long result = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(-1234567890L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary3_Mqrn2() {
    byte[] buffer = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a };
    int offset = 1;
    int length = 9;
    long result = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(234567890L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary4_ejtj3() {
    byte[] buffer = new byte[] { (byte) 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09 };
    int offset = 1;
    int length = 9;
    long result = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(-234567890L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatOctalBytes_hAeJ0() {
        byte[] buf = new byte[10];
        int offset = 0;
        int length = 10;
        long value = 1234567890L;
        int expected = 10;
        int actual = TarUtils.formatOctalBytes(value, buf, offset, length);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatOctalBytesWithNegativeValue_cUmA1() {
        byte[] buf = new byte[10];
        int offset = 0;
        int length = 10;
        long value = -1234567890L;
        int expected = 10;
        int actual = TarUtils.formatOctalBytes(value, buf, offset, length);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatOctalBytesWithZeroValue_QHoh2() {
        byte[] buf = new byte[10];
        int offset = 0;
        int length = 10;
        long value = 0L;
        int expected = 10;
        int actual = TarUtils.formatOctalBytes(value, buf, offset, length);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatOctalBytesWithMaxValue_FtdH3() {
        byte[] buf = new byte[10];
        int offset = 0;
        int length = 10;
        long value = Long.MAX_VALUE;
        int expected = 10;
        int actual = TarUtils.formatOctalBytes(value, buf, offset, length);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatOctalBytesWithMinValue_wSNU4() {
        byte[] buf = new byte[10];
        int offset = 0;
        int length = 10;
        long value = Long.MIN_VALUE;
        int expected = 10;
        int actual = TarUtils.formatOctalBytes(value, buf, offset, length);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatOctalBytesWithNullBuffer_SLcr5() {
        byte[] buf = null;
        int offset = 0;
        int length = 10;
        long value = 1234567890L;
        int expected = 10;
        int actual = TarUtils.formatOctalBytes(value, buf, offset, length);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatOctalBytesWithNegativeOffset_qUuG6() {
        byte[] buf = new byte[10];
        int offset = -1;
        int length = 10;
        long value = 1234567890L;
        int expected = 10;
        int actual = TarUtils.formatOctalBytes(value, buf, offset, length);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatOctalBytesWithNegativeLength_taJU7() {
        byte[] buf = new byte[10];
        int offset = 0;
        int length = -1;
        long value = 1234567890L;
        int expected = 10;
        int actual = TarUtils.formatOctalBytes(value, buf, offset, length);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatOctalBytesWithZeroLength_wQrh8() {
        byte[] buf = new byte[10];
        int offset = 0;
        int length = 0;
        long value = 1234567890L;
        int expected = 10;
        int actual = TarUtils.formatOctalBytes(value, buf, offset, length);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeCheckSum_EmptyArray_wDxA0() {
    long sum = TarUtils.computeCheckSum(new byte[0]);
    assertEquals(0, sum);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeCheckSum_NonEmptyArray_Edam1() {
    byte[] buf = new byte[] { 1, 2, 3, 4, 5 };
    long sum = TarUtils.computeCheckSum(buf);
    assertEquals(15, sum);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytes_lGLO0() {
    long value = 1234567890L;
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    int expected = 1234567890;
    int actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytesWithNegativeValue_mdVr1() {
    long value = -1234567890L;
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    int expected = -1234567890;
    int actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytesWithZeroValue_bvCa4() {
    long value = 0L;
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    int expected = 0;
    int actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytesWithNullBuffer_MqFX5() {
    long value = 1234567890L;
    byte[] buf = null;
    int offset = 0;
    int length = 8;
    int expected = 1234567890;
    int actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytesWithNegativeOffset_AsuX6() {
    long value = 1234567890L;
    byte[] buf = new byte[10];
    int offset = -1;
    int length = 8;
    int expected = 1234567890;
    int actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytesWithNegativeLength_chcU7() {
    long value = 1234567890L;
    byte[] buf = new byte[10];
    int offset = 0;
    int length = -1;
    int expected = 1234567890;
    int actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytesWithLengthGreaterThanBufferSize_WYRO8() {
    long value = 1234567890L;
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 11;
    int expected = 1234567890;
    int actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes_ValidInput_gCdz0() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 5;
    long value = 123456789;
    int expected = 5;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes_InvalidInput_ISup1() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 5;
    long value = -123456789;
    int expected = 5;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes_NullInput_mCIX2() {
    byte[] buf = null;
    int offset = 0;
    int length = 5;
    long value = 123456789;
    int expected = 5;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes_ZeroInput_xHTk3() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 5;
    long value = 0;
    int expected = 5;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes_LargeInput_TUQO5() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 5;
    long value = 1234567890123456789L;
    int expected = 5;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytes_CJcF0() {
    long value = 1234567890L;
    byte[] buf = new byte[12];
    int offset = 0;
    int length = 11;
    int expected = 11;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongBinary_ehGq1() {
    long value = -1234567890L;
    byte[] buf = new byte[12];
    int offset = 0;
    int length = 11;
    int expected = 11;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatBigIntegerBinary_bLmT2() {
    long value = 1234567890123456789L;
    byte[] buf = new byte[12];
    int offset = 0;
    int length = 11;
    int expected = 11;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytesLengthLessThan9_SaiH4() {
    long value = 1234567890L;
    byte[] buf = new byte[12];
    int offset = 0;
    int length = 8;
    int expected = 8;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytesLengthGreaterThan9_NDch5() {
    long value = 1234567890123456789L;
    byte[] buf = new byte[12];
    int offset = 0;
    int length = 12;
    int expected = 12;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytesOffsetGreaterThan0_WuMq6() {
    long value = 1234567890L;
    byte[] buf = new byte[12];
    int offset = 2;
    int length = 11;
    int expected = 11;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_valueIsZero_JpYk0() {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    TarUtils.formatUnsignedOctalString(0, buffer, offset, length);
    assertEquals("0000000000", new String(buffer, offset, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_valueIsOne_vpOV1() {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    TarUtils.formatUnsignedOctalString(1, buffer, offset, length);
    assertEquals("0000000001", new String(buffer, offset, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_valueIsTen_tcin2() {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    TarUtils.formatUnsignedOctalString(10, buffer, offset, length);
    assertEquals("0000000012", new String(buffer, offset, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_valueIsOneHundred_SKXo3() {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    TarUtils.formatUnsignedOctalString(100, buffer, offset, length);
    assertEquals("0000000144", new String(buffer, offset, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_valueIsOneThousand_Btaj4() {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    TarUtils.formatUnsignedOctalString(1000, buffer, offset, length);
    assertEquals("0000001757", new String(buffer, offset, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseName_uKLS0() {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    String expected = "test";
    String actual = TarUtils.parseName(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseNameWithInvalidBuffer_XTUH4() {
    byte[] buffer = null;
    int offset = 0;
    int length = 10;
    String expected = null;
    String actual = TarUtils.parseName(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseNameWithInvalidOffset_UIAU5() {
    byte[] buffer = new byte[10];
    int offset = -1;
    int length = 10;
    String expected = null;
    String actual = TarUtils.parseName(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseNameWithInvalidLength_ZVDl6() {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = -1;
    String expected = null;
    String actual = TarUtils.parseName(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseNameWithEmptyBuffer_QmjK7() {
    byte[] buffer = new byte[0];
    int offset = 0;
    int length = 0;
    String expected = "";
    String actual = TarUtils.parseName(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseNameWithEmptyString_Uukx8() {
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 0;
    String expected = "";
    String actual = TarUtils.parseName(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseNameWithNullBuffer_Hgoa9() {
    byte[] buffer = null;
    int offset = 0;
    int length = 0;
    String expected = null;
    String actual = TarUtils.parseName(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytes1_PrnV0() {
    long value = 1234567890L;
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    int expected = 10;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytes2_EFqR1() {
    long value = -1234567890L;
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    int expected = 10;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytes3_eQuB2() {
    long value = 0L;
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    int expected = 10;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_ValidInput_hgds0_1() throws IOException {
    String sparseMap = "0,100,200,300";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(2, sparseHeaders.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_ValidInput_hgds0_2() throws IOException {
    String sparseMap = "0,100,200,300";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(100, sparseHeaders.get(0).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_ValidInput_hgds0_3() throws IOException {
    String sparseMap = "0,100,200,300";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(300, sparseHeaders.get(1).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_ValidInput_hgds0_4() throws IOException {
    String sparseMap = "0,100,200,300";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(200, sparseHeaders.get(0).getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_ValidInput_hgds0_5() throws IOException {
    String sparseMap = "0,100,200,300";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(300, sparseHeaders.get(1).getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_InvalidInput_LDko1() throws IOException {
    String sparseMap = "0,100,200,300";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_NegativeOffset_wjcO2() throws IOException {
    String sparseMap = "-1,100,200,300";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Corrupted TAR archive. Sparse struct offset contains negative value", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_NegativeNumbytes_xhYH3() throws IOException {
    String sparseMap = "0,-100,200,300";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Corrupted TAR archive. Sparse struct numbytes contains negative value", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_EmptyInput_mjGU4() throws IOException {
    String sparseMap = "";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(0, sparseHeaders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseName_NullBuffer_jCZy4_SAym0() throws IOException {
    byte[] buffer = null;
    int offset = 0;
    int length = 0;
    ZipEncoding encoding = null;
    String result = TarUtils.parseName(buffer, offset, length, encoding);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytesWithMaxValue_Llab2_WBnV0() {
    long value = Long.MAX_VALUE;
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long expected = Long.MAX_VALUE;
    long actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytesWithMinValue_HLuI3_DdDH0() {
    long value = Long.MIN_VALUE;
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    long expected = Long.MIN_VALUE;
    long actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX01SparseHeaders_wXtI0() {
    String sparseMap = "100,200,300";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parsePAX01SparseHeaders(sparseMap);
    assertEquals(3, sparseHeaders.size());
    assertEquals(100, sparseHeaders.get(0).getOffset());
    assertEquals(200, sparseHeaders.get(1).getOffset());
    assertEquals(300, sparseHeaders.get(2).getOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparse_zZsE0() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getOffset());
    assertEquals(0, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNonZeroOffset_hneo1() {
    byte[] buffer = new byte[100];
    int offset = 10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(10, sparse.getOffset());
    assertEquals(0, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNonZeroNumbytes_STMO2() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getOffset());
    assertEquals(10, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNonZeroOffsetAndNumbytes_UUpZ3() {
    byte[] buffer = new byte[100];
    int offset = 10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(10, sparse.getOffset());
    assertEquals(10, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeOffset_Rmvp4() {
    byte[] buffer = new byte[100];
    int offset = -10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(-10, sparse.getOffset());
    assertEquals(0, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeNumbytes_wYzL5() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getOffset());
    assertEquals(-10, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeOffsetAndNumbytes_QOGb6() {
    byte[] buffer = new byte[100];
    int offset = -10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(-10, sparse.getOffset());
    assertEquals(-10, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithMaxOffset_eBsz7() {
    byte[] buffer = new byte[100];
    int offset = Integer.MAX_VALUE;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(Integer.MAX_VALUE, sparse.getOffset());
    assertEquals(0, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithMaxNumbytes_nDoE8() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getOffset());
    assertEquals(Integer.MAX_VALUE, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithMaxOffsetAndNumbytes_LPON9() {
    byte[] buffer = new byte[100];
    int offset = Integer.MAX_VALUE;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(Integer.MAX_VALUE, sparse.getOffset());
    assertEquals(Integer.MAX_VALUE, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithMinOffset_XYUW10() {
    byte[] buffer = new byte[100];
    int offset = Integer.MIN_VALUE;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(Integer.MIN_VALUE, sparse.getOffset());
    assertEquals(0, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_ValidInput_hgds0() throws IOException {
    String sparseMap = "0,100,200,300";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(2, sparseHeaders.size());
    assertEquals(100, sparseHeaders.get(0).getOffset());
    assertEquals(300, sparseHeaders.get(1).getOffset());
    assertEquals(200, sparseHeaders.get(0).getNumbytes());
    assertEquals(300, sparseHeaders.get(1).getNumbytes());
}
}