/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.ArrayList;
import org.apache.commons.compress.harmony.unpack200.Segment;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CodeAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_aLDE0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    Segment segment = new Segment();
    CodeAttribute codeAttribute = new CodeAttribute(10, 10, new byte[10], segment, operandManager, new ArrayList<ExceptionTableEntry>());
    String actual = codeAttribute.toString();
    String expected = "Code: 10 bytes";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries1_CznI0() {
    int[] bcCaseCount = {1, 2, 3};
    int[] bcCaseValue = {1, 2, 3};
    int[] bcByte = {1, 2, 3};
    int[] bcShort = {1, 2, 3};
    int[] bcLocal = {1, 2, 3};
    int[] bcLabel = {1, 2, 3};
    int[] bcIntRef = {1, 2, 3};
    int[] bcFloatRef = {1, 2, 3};
    int[] bcLongRef = {1, 2, 3};
    int[] bcDoubleRef = {1, 2, 3};
    int[] bcStringRef = {1, 2, 3};
    int[] bcClassRef = {1, 2, 3};
    int[] bcFieldRef = {1, 2, 3};
    int[] bcMethodRef = {1, 2, 3};
    int[] bcIMethodRef = {1, 2, 3};
    int[] bcThisField = {1, 2, 3};
    int[] bcSuperField = {1, 2, 3};
    int[] bcThisMethod = {1, 2, 3};
    int[] bcSuperMethod = {1, 2, 3};
    int[] bcInitRef = {1, 2, 3};
    int[] wideByteCodes = {1, 2, 3};
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    Segment segment = new Segment();
    CodeAttribute codeAttribute = new CodeAttribute(1, 1, new byte[1], segment, operandManager, new ArrayList<ExceptionTableEntry>());
    ClassFileEntry[] nestedEntries = codeAttribute.getNestedClassFileEntries();
    assertEquals(1, nestedEntries.length);
}
}