/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.examples;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.SeekableByteChannel;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.ZipFile;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Expander_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithNullArchive_DpXv9() throws IOException, ArchiveException {
    Expander expander = new Expander();
    InputStream archive = null;
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithNullArchiveAndNullTargetDirectory_BctA10() throws IOException, ArchiveException {
    Expander expander = new Expander();
    InputStream archive = null;
    File targetDirectory = null;
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithNullArchive_xpvq3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    InputStream archive = null;
    File targetDirectory = new File("target");
    try {
        expander.expand(format, archive, targetDirectory);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Archive cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_invalidFormat_invalidArchive_invalidTargetDirectory_IEap6() throws IOException, ArchiveException {
    String format = "invalid";
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_rLxW0() throws IOException {
    Expander expander = new Expander();
    ZipFile archive = new ZipFile("test.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithNonExistentTargetDirectory_jkmf1() throws IOException {
    Expander expander = new Expander();
    ZipFile archive = new ZipFile("test.zip");
    File targetDirectory = new File("non-existent");
    expander.expand(archive, targetDirectory);
    assertFalse(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithInvalidZipFile_ThhQ2() throws IOException {
    Expander expander = new Expander();
    ZipFile archive = new ZipFile("invalid.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertFalse(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithEmptyZipFile_iGmm3() throws IOException {
    Expander expander = new Expander();
    ZipFile archive = new ZipFile("empty.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithZipFileWithNoEntries_vCBp4() throws IOException {
    Expander expander = new Expander();
    ZipFile archive = new ZipFile("no-entries.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithZipFileWithOneEntry_pZFC5() throws IOException {
    Expander expander = new Expander();
    ZipFile archive = new ZipFile("one-entry.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithZipFileWithMultipleEntries_dvCV6() throws IOException {
    Expander expander = new Expander();
    ZipFile archive = new ZipFile("multiple-entries.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithZipFileWithNestedDirectories_oJqi7() throws IOException {
    Expander expander = new Expander();
    ZipFile archive = new ZipFile("nested-directories.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithZipFileWithSymlinks_ziVa8() throws IOException {
    Expander expander = new Expander();
    ZipFile archive = new ZipFile("symlinks.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithZipFileWithHardlinks_eSGJ9() throws IOException {
    Expander expander = new Expander();
    ZipFile archive = new ZipFile("hardlinks.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithZipFileWithSpecialCharacters_EKfp10() throws IOException {
    Expander expander = new Expander();
    ZipFile archive = new ZipFile("special-characters.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithZipFileWithLongFileNames_xCAK11() throws IOException {
    Expander expander = new Expander();
    ZipFile archive = new ZipFile("long-file-names.zip");
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_validArchive_validTargetDirectory_qUGy0_1() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_validArchive_validTargetDirectory_qUGy0_2() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_validArchive_validTargetDirectory_qUGy0_3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    expander.expand(format, archive, targetDirectory);
    assertEquals(1, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_invalidFormat_validArchive_validTargetDirectory_CQXx1() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "invalid";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    try {
        expander.expand(format, archive, targetDirectory);
        fail("Expected ArchiveException");
    } catch (ArchiveException e) {
        assertEquals("Invalid format", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_invalidArchive_validTargetDirectory_qMNC2() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("invalid.zip");
    File targetDirectory = new File("target");
    try {
        expander.expand(format, archive, targetDirectory);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Invalid archive", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_validArchive_invalidTargetDirectory_uoPO3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    File targetDirectory = new File("invalid");
    try {
        expander.expand(format, archive, targetDirectory);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Invalid target directory", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_validArchive_nullTargetDirectory_dZLi4() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    File targetDirectory = null;
    try {
        expander.expand(format, archive, targetDirectory);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Target directory is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_nullFormat_validArchive_validTargetDirectory_qNTf5() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = null;
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    try {
        expander.expand(format, archive, targetDirectory);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Format is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_emptyFormat_validArchive_validTargetDirectory_WNlt6() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    try {
        expander.expand(format, archive, targetDirectory);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Format is empty", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_nullArchive_validTargetDirectory_eNSV7() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = null;
    File targetDirectory = new File("target");
    try {
        expander.expand(format, archive, targetDirectory);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Archive is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithNullArchive_qFjy3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    SeekableByteChannel archive = null;
    File targetDirectory = new File("target/");
    try {
        expander.expand(format, archive, targetDirectory);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Archive cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
        public void close_qaUR7() throws IOException {
        }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validArchive_validTargetDirectory_FEdt0_1() throws IOException, ArchiveException {
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validArchive_validTargetDirectory_FEdt0_2() throws IOException, ArchiveException {
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validArchive_validTargetDirectory_FEdt0_3() throws IOException, ArchiveException {
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertEquals(1, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validArchive_validTargetDirectory_FEdt0_4() throws IOException, ArchiveException {
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertEquals("archive.zip", targetDirectory.listFiles()[0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validArchive_invalidTargetDirectory_OTvy1_1() throws IOException, ArchiveException {
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    targetDirectory.delete();
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validArchive_invalidTargetDirectory_OTvy1_2() throws IOException, ArchiveException {
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    targetDirectory.delete();
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validArchive_invalidTargetDirectory_OTvy1_3() throws IOException, ArchiveException {
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    targetDirectory.delete();
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertEquals(1, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validArchive_invalidTargetDirectory_OTvy1_4() throws IOException, ArchiveException {
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    targetDirectory.delete();
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertEquals("archive.zip", targetDirectory.listFiles()[0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_invalidArchive_validTargetDirectory_mXRS2() throws IOException, ArchiveException {
    File archive = new File("invalid_archive.zip");
    File targetDirectory = new File("target");
    Expander expander = new Expander();
    try {
        expander.expand(archive, targetDirectory);
        fail("Expected ArchiveException");
    } catch (ArchiveException e) {
        assertTrue(e.getMessage().contains("Invalid archive"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_invalidArchive_invalidTargetDirectory_QXbL3() throws IOException, ArchiveException {
    File archive = new File("invalid_archive.zip");
    File targetDirectory = new File("target");
    targetDirectory.delete();
    Expander expander = new Expander();
    try {
        expander.expand(archive, targetDirectory);
        fail("Expected ArchiveException");
    } catch (ArchiveException e) {
        assertTrue(e.getMessage().contains("Invalid archive"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validArchive_nullTargetDirectory_LOaP4() throws IOException, ArchiveException {
    File archive = new File("archive.zip");
    Expander expander = new Expander();
    try {
        expander.expand(archive, null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertTrue(e.getMessage().contains("Target directory cannot be null"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validArchive_invalidTargetDirectoryPath_GKod7() throws IOException, ArchiveException {
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    targetDirectory.delete();
    Expander expander = new Expander();
    try {
        expander.expand(archive, targetDirectory);
        fail("Expected IOException");
    } catch (IOException e) {
        assertTrue(e.getMessage().contains("Target directory does not exist"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_invalidArchive_invalidTargetDirectoryPath_jFaB8() throws IOException, ArchiveException {
    File archive = new File("invalid_archive.zip");
    File targetDirectory = new File("target");
    targetDirectory.delete();
    Expander expander = new Expander();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_lZvh0_hbGP0() throws IOException {
    SevenZFile archive = new SevenZFile(new File("test.7z"));
    File targetDirectory = new File("target");
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_validArchive_validTargetDirectory_qUGy0() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.exists());
    assertTrue(targetDirectory.isDirectory());
    assertEquals(1, targetDirectory.listFiles().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validArchive_validTargetDirectory_FEdt0() throws IOException, ArchiveException {
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
    assertTrue(targetDirectory.isDirectory());
    assertEquals(1, targetDirectory.listFiles().length);
    assertEquals("archive.zip", targetDirectory.listFiles()[0].getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validArchive_invalidTargetDirectory_OTvy1() throws IOException, ArchiveException {
    File archive = new File("archive.zip");
    File targetDirectory = new File("target");
    targetDirectory.delete();
    Expander expander = new Expander();
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
    assertTrue(targetDirectory.isDirectory());
    assertEquals(1, targetDirectory.listFiles().length);
    assertEquals("archive.zip", targetDirectory.listFiles()[0].getName());
}
}