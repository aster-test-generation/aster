/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileNameUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_EmptyFileName_qbgM0() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFileName(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_ValidCompressedFileName_faCE1() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "zip");
    assertTrue(fileNameUtil.isCompressedFileName("file.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_InvalidCompressedFileName_eGQl2() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "zip");
    assertFalse(fileNameUtil.isCompressedFileName("file.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_ValidUncompressedFileName_pEUc3() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("txt", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "txt");
    assertFalse(fileNameUtil.isCompressedFileName("file.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_InvalidUncompressedFileName_lqdy4() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("txt", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "txt");
    assertFalse(fileNameUtil.isCompressedFileName("file.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_NullFileName_xAFX5() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFileName(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_EmptySuffix_xRKt6() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFileName("file"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_NullSuffix_slrX7() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), null);
    assertFalse(fileNameUtil.isCompressedFileName("file"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_ValidCompressedFileNameWithoutDefaultExtension_VBCR12() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "");
    assertTrue(fileNameUtil.isCompressedFileName("file.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilename_AJXx0() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "");
    String fileName = "file.txt";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithSuffix_jFUF1() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "");
    String fileName = "file.txt.gz";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithDefaultExtension_PaAR2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "txt");
    String fileName = "file.txt";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithDefaultExtensionAndSuffix_EdCK3() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "txt");
    String fileName = "file.txt.gz";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithMultipleSuffixes_vsCB4() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "txt");
    String fileName = "file.txt.gz.bz2";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithNoSuffix_EjLd6() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "txt");
    String fileName = "file";
    String expected = "file";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithNoSuffixAndNoDefaultExtension_vDpw8() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "");
    String fileName = "file";
    String expected = "file";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_emptyFileName_lkbv0() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFilename(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_nullFileName_rKmW1() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFilename(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_invalidFileName_lKQN2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFilename("invalid_file_name"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_validFileName_iGwU3() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertTrue(fileNameUtil.isCompressedFilename("valid_file_name.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_validFileNameWithExtension_Ygyg4() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertTrue(fileNameUtil.isCompressedFilename("valid_file_name.zip.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_validFileNameWithoutExtension_mjGN5() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertTrue(fileNameUtil.isCompressedFilename("valid_file_name"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_validFileNameWithMultipleExtensions_WVJV6() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertTrue(fileNameUtil.isCompressedFilename("valid_file_name.zip.txt.rar"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_validFileNameWithInvalidExtension_Ouza7() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFilename("valid_file_name.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_validFileNameWithInvalidExtensionAndValidExtension_HaYj8() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertTrue(fileNameUtil.isCompressedFilename("valid_file_name.txt.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_validFileNameWithInvalidExtensionAndInvalidExtension_xNiE9() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFilename("valid_file_name.txt.rar"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilename_VeVE0() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "");
    String fileName = "file.txt";
    String compressedFileName = fileNameUtil.getCompressedFilename(fileName);
    assertEquals("file.txt.gz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithDefaultExtension_IqYw2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "gz");
    String fileName = "file.txt";
    String compressedFileName = fileNameUtil.getCompressedFilename(fileName);
    assertEquals("file.txt.gz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_1_JIBx0() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    uncompressSuffix.put("rar", "");
    String defaultExtension = "txt";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    String fileName = "file.zip";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_2_KWje1() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    uncompressSuffix.put("rar", "");
    String defaultExtension = "txt";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    String fileName = "file.rar";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_3_zgcT2() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    uncompressSuffix.put("rar", "");
    String defaultExtension = "txt";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    String fileName = "file.txt";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_4_sbwr3() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    uncompressSuffix.put("rar", "");
    String defaultExtension = "txt";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    String fileName = "file.txt.zip";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_shortestUncompressedSuffix_IptS0() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "");
    String fileName = "file.txt";
    String expected = "file.txt.gz";
    String actual = fileNameUtil.getCompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_longestUncompressedSuffix_xwzP1() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "");
    String fileName = "file.txt.tar.gz";
    String expected = "file.txt.gz";
    String actual = fileNameUtil.getCompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_defaultExtension_altt2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), ".zip");
    String fileName = "file.txt";
    String expected = "file.txt.zip";
    String actual = fileNameUtil.getCompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_noSuffix_LKNb3() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "");
    String fileName = "file";
    String expected = "file";
    String actual = fileNameUtil.getCompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithSuffix_XQhW1_omsh0() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "");
    String fileName = "file.txt";
    String compressedFileName = fileNameUtil.getCompressedFileName(fileName);
    assertEquals("file.txt.gz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithSuffixAndDefaultExtension_qSIT3_mOkR0() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "gz");
    String fileName = "file.txt";
    String compressedFileName = fileNameUtil.getCompressedFileName(fileName);
    assertEquals("file.txt.gz", compressedFileName);
}
}