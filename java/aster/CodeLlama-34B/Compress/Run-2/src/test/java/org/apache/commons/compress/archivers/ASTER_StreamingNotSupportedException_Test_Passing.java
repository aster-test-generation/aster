/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_StreamingNotSupportedException_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_vUHi0() {
    StreamingNotSupportedException exception = new StreamingNotSupportedException("format");
    assertEquals("format", exception.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormatWithNullFormat_HnaN1() {
    StreamingNotSupportedException exception = new StreamingNotSupportedException(null);
    assertNull(exception.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormatWithEmptyFormat_qpMV2() {
    StreamingNotSupportedException exception = new StreamingNotSupportedException("");
    assertEquals("", exception.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormatWithInvalidFormat_JDhp4() {
    StreamingNotSupportedException exception = new StreamingNotSupportedException("invalid_format");
    assertEquals("invalid_format", exception.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormatWithValidFormat_bORt5() {
    StreamingNotSupportedException exception = new StreamingNotSupportedException("valid_format");
    assertEquals("valid_format", exception.getFormat());
}
}