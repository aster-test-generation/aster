/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExactMath_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_PositiveNumbers_kdmC0() {
    int result = ExactMath.add(1, 2);
    assertEquals(3, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_NegativeNumbers_JQSV1() {
    int result = ExactMath.add(-1, -2);
    assertEquals(-3, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_Zero_pjGz2() {
    int result = ExactMath.add(0, 0);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_MaxInt_kBAU3() {
    int result = ExactMath.add(Integer.MAX_VALUE, 1);
    assertEquals(Integer.MAX_VALUE, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_MinInt_oSlF4() {
    int result = ExactMath.add(Integer.MIN_VALUE, -1);
    assertEquals(Integer.MIN_VALUE, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_Overflow_CtwL5() {
    try {
        ExactMath.add(Integer.MAX_VALUE, 1);
        fail("Expected ArithmeticException");
    } catch (ArithmeticException e) {
        assertEquals("Argument too large or result overflows", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_Underflow_gYxZ6() {
    try {
        ExactMath.add(Integer.MIN_VALUE, -1);
        fail("Expected ArithmeticException");
    } catch (ArithmeticException e) {
        assertEquals("Argument too large or result overflows", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_InvalidArgument_KQvG7() {
    try {
        ExactMath.add(1, 2);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Argument too large or result overflows", e.getMessage());
    }
}
}