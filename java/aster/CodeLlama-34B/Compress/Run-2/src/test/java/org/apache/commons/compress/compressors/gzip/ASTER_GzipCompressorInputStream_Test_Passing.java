/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_validSignature_PiqQ0() {
    byte[] signature = new byte[] { 31, -117 };
    int length = 2;
    assertTrue(GzipCompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_ChPh1() {
    byte[] signature = new byte[] { 31, 117 };
    int length = 2;
    assertFalse(GzipCompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_emptySignature_niBY2() {
    byte[] signature = new byte[] {};
    int length = 0;
    assertFalse(GzipCompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nullSignature_Xtnq3() {
    byte[] signature = null;
    int length = 0;
    assertFalse(GzipCompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_validSignature_length1_ftVz4() {
    byte[] signature = new byte[] { 31 };
    int length = 1;
    assertFalse(GzipCompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_validSignature_length3_FOnN5() {
    byte[] signature = new byte[] { 31, -117, 120 };
    int length = 3;
    assertTrue(GzipCompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_length3_Whdw7() {
    byte[] signature = new byte[] { 31, 117, 120 };
    int length = 3;
    assertFalse(GzipCompressorInputStream.matches(signature, length));
}
}