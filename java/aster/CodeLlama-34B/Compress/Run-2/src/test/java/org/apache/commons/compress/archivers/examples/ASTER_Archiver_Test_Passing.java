/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.examples;

import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.channels.FileChannel;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
public class Aster_Archiver_Test_Passing {

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithSeekableByteChannel_CUaB0() throws IOException, ArchiveException {
    String format = "zip";
    SeekableByteChannel target = mock(SeekableByteChannel.class);
    File directory = mock(File.class);
    CloseableConsumer closeableConsumer = mock(CloseableConsumer.class);
    Archiver archiver = new Archiver();
    archiver.create(format, target, directory, closeableConsumer);
    verify(closeableConsumer).accept(any(SeekableByteChannel.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithOutputStream_EvbT1() throws IOException, ArchiveException {
    String format = "zip";
    OutputStream target = mock(OutputStream.class);
    File directory = mock(File.class);
    CloseableConsumer closeableConsumer = mock(CloseableConsumer.class);
    Archiver archiver = new Archiver();
    archiver.create(format, target, directory, closeableConsumer);
    verify(closeableConsumer).accept(any(OutputStream.class));
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithUnknownFormat_NiLP3() throws IOException, ArchiveException {
    String format = "unknown";
    SeekableByteChannel target = mock(SeekableByteChannel.class);
    File directory = mock(File.class);
    CloseableConsumer closeableConsumer = mock(CloseableConsumer.class);
    Archiver archiver = new Archiver();
    archiver.create(format, target, directory, closeableConsumer);
    verify(closeableConsumer, never()).accept(any(SeekableByteChannel.class));
    verify(closeableConsumer, never()).accept(any(OutputStream.class));
    verify(closeableConsumer, never()).accept(any(SevenZOutputFile.class));
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithSeekableByteChannel_AFVG0() throws IOException, ArchiveException {
    Archiver archiver = new Archiver();
    String format = "zip";
    Path target = Paths.get("target.zip");
    Path directory = Paths.get("directory");
    try (SeekableByteChannel channel = FileChannel.open(target, StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)) {
        archiver.create(format, channel, directory);
    }
    assertTrue(Files.exists(target));
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithInvalidFormat_NegY2() throws IOException, ArchiveException {
    Archiver archiver = new Archiver();
    String format = "invalid";
    Path target = Paths.get("target.zip");
    Path directory = Paths.get("directory");
    try {
        archiver.create(format, target, directory);
        fail("Expected ArchiveException");
    } catch (ArchiveException e) {
        assertEquals("Invalid format", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithInvalidTarget_JCwj3() throws IOException, ArchiveException {
    Archiver archiver = new Archiver();
    String format = "zip";
    Path target = Paths.get("target.zip");
    Path directory = Paths.get("directory");
    try {
        archiver.create(format, target, directory);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Invalid target", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithInvalidDirectory_sjpc4() throws IOException, ArchiveException {
    Archiver archiver = new Archiver();
    String format = "zip";
    Path target = Paths.get("target.zip");
    Path directory = Paths.get("invalid");
    try {
        archiver.create(format, target, directory);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Invalid directory", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithNullFormat_JvfO5() throws IOException, ArchiveException {
    Archiver archiver = new Archiver();
    String format = null;
    Path target = Paths.get("target.zip");
    Path directory = Paths.get("directory");
    try {
        archiver.create(format, target, directory);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Format cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithNullTarget_ITes6() throws IOException, ArchiveException {
    Archiver archiver = new Archiver();
    String format = "zip";
    Path target = null;
    Path directory = Paths.get("directory");
    try {
        archiver.create(format, target, directory);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Target cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithNullDirectory_nTcZ7() throws IOException, ArchiveException {
    Archiver archiver = new Archiver();
    String format = "zip";
    Path target = Paths.get("target.zip");
    Path directory = null;
    try {
        archiver.create(format, target, directory);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Directory cannot be null", e.getMessage());
    }
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithNullTarget_vxsz2() throws IOException, ArchiveException {
    Archiver archiver = new Archiver();
    OutputStream target = null;
    File directory = new File(".");
    try {
        archiver.create("zip", target, directory);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Target cannot be null", e.getMessage());
    }
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreate_gPaV0() throws IOException {
    Archiver archiver = new Archiver();
    SevenZOutputFile target = new SevenZOutputFile(new File("test.7z"));
    Path directory = Paths.get("test");
    archiver.create(target, directory);
    assertTrue(Files.exists(Paths.get("test.7z")));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithPassword_BxWF1() throws IOException {
    Archiver archiver = new Archiver();
    SevenZOutputFile target = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
    Path directory = Paths.get("test");
    archiver.create(target, directory);
    assertTrue(Files.exists(Paths.get("test.7z")));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithValidFormatAndTargetAndDirectory_EpdS0_1() throws IOException, ArchiveException {
    Archiver archiver = new Archiver();
    File target = new File("target.zip");
    File directory = new File("directory");
    archiver.create("zip", target, directory);
    assertTrue(target.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithValidFormatAndTargetAndDirectory_EpdS0_2() throws IOException, ArchiveException {
    Archiver archiver = new Archiver();
    File target = new File("target.zip");
    File directory = new File("directory");
    archiver.create("zip", target, directory);
    assertTrue(target.isFile());}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithInvalidFormat_bqOZ1() throws IOException, ArchiveException {
    Archiver archiver = new Archiver();
    File target = new File("target.zip");
    File directory = new File("directory");
    try {
        archiver.create("invalid", target, directory);
        fail("Expected ArchiveException");
    } catch (ArchiveException e) {
        assertEquals("Invalid format: invalid", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithNullDirectory_oQNj3() throws IOException, ArchiveException {
    Archiver archiver = new Archiver();
    File target = new File("target.zip");
    try {
        archiver.create("zip", target, null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Directory cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithNonExistentTarget_zEKt4() throws IOException, ArchiveException {
    Archiver archiver = new Archiver();
    File target = new File("target.zip");
    File directory = new File("directory");
    try {
        archiver.create("zip", target, directory);
        fail("Expected FileNotFoundException");
    } catch (FileNotFoundException e) {
        assertEquals("Target file not found: target.zip", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithNonExistentDirectory_dIhZ5() throws IOException, ArchiveException {
    Archiver archiver = new Archiver();
    File target = new File("target.zip");
    File directory = new File("directory");
    try {
        archiver.create("zip", target, directory);
        fail("Expected FileNotFoundException");
    } catch (FileNotFoundException e) {
        assertEquals("Directory not found: directory", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithInvalidTarget_mngq6() throws IOException, ArchiveException {
    Archiver archiver = new Archiver();
    File target = new File("target.txt");
    File directory = new File("directory");
    try {
        archiver.create("zip", target, directory);
        fail("Expected ArchiveException");
    } catch (ArchiveException e) {
        assertEquals("Invalid target file: target.txt", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithInvalidDirectory_YvIs7() throws IOException, ArchiveException {
    Archiver archiver = new Archiver();
    File target = new File("target.zip");
    File directory = new File("directory.txt");
    try {
        archiver.create("zip", target, directory);
        fail("Expected ArchiveException");
    } catch (ArchiveException e) {
        assertEquals("Invalid directory: directory.txt", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateWithEmptyTarget_rRvA8() throws IOException, ArchiveException {
    Archiver archiver = new Archiver();
    File target = new File("");
    File directory = new File("directory");
    try {
        archiver.create("zip", target, directory);
        fail("Expected ArchiveException");
    } catch (ArchiveException e) {
        assertEquals("Target file cannot be empty", e.getMessage());
    }
}


}