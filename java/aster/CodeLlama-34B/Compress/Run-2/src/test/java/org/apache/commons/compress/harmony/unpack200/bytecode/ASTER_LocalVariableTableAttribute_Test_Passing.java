/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_xsdG0() {
    LocalVariableTableAttribute lvta = new LocalVariableTableAttribute(10, new int[] { 0, 1, 2 }, new int[] { 3, 4, 5 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3") }, new CPUTF8[] { new CPUTF8("descriptor1"), new CPUTF8("descriptor2"), new CPUTF8("descriptor3") }, new int[] { 6, 7, 8 });
    String result = lvta.toString();
    assertEquals("LocalVariableTable: 10 variables", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_REdl0() {
    int localVariableTableLength = 10;
    int[] startPcs = new int[localVariableTableLength];
    int[] lengths = new int[localVariableTableLength];
    CPUTF8[] names = new CPUTF8[localVariableTableLength];
    CPUTF8[] descriptors = new CPUTF8[localVariableTableLength];
    int[] indexes = new int[localVariableTableLength];
    LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(localVariableTableLength, startPcs, lengths, names, descriptors, indexes);
    int[] actualStartPCs = attribute.getStartPCs();
    assertArrayEquals(startPcs, actualStartPCs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_cIYh0() {
    int localVariableTableLength = 5;
    int[] startPcs = new int[] { 0, 10, 20, 30, 40 };
    int[] lengths = new int[] { 10, 10, 10, 10, 10 };
    CPUTF8[] names = new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3"), new CPUTF8("name4"), new CPUTF8("name5") };
    CPUTF8[] descriptors = new CPUTF8[] { new CPUTF8("descriptor1"), new CPUTF8("descriptor2"), new CPUTF8("descriptor3"), new CPUTF8("descriptor4"), new CPUTF8("descriptor5") };
    int[] indexes = new int[] { 0, 1, 2, 3, 4 };
    LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(localVariableTableLength, startPcs, lengths, names, descriptors, indexes);
    int expectedLength = 2 + 10 * localVariableTableLength;
    int actualLength = attribute.getLength();
    assertEquals(expectedLength, actualLength);
}
}