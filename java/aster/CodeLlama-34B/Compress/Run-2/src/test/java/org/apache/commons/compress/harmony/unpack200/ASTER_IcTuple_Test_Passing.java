/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IcTuple_Test_Passing {
private boolean predictSimple;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_1_ihvt0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals(1, tuple.outerClassIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymous_True_FLOQ0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertTrue(tuple.outerIsAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedExplicitFlagSet_True_anWV0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
    assertTrue(tuple.nestedExplicitFlagSet());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSimpleClassNameIndex_CachedValue_GfAN0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    int expected = 1;
    int actual = tuple.simpleClassNameIndex();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSimpleClassNameIndex_NonCachedValue_iKyI1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    int expected = 2;
    int actual = tuple.simpleClassNameIndex();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSimpleClassNameIndex_NullCachedValue_RJRL2() {
    IcTuple tuple = new IcTuple(null, 1, "C2", "N", 1, 2, 3, 4);
    int expected = 1;
    int actual = tuple.simpleClassNameIndex();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSimpleClassNameIndex_EmptyCachedValue_RGBv3() {
    IcTuple tuple = new IcTuple("", 1, "C2", "N", 1, 2, 3, 4);
    int expected = 1;
    int actual = tuple.simpleClassNameIndex();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSimpleClassNameIndex_NullNonCachedValue_ocAZ4() {
    IcTuple tuple = new IcTuple(null, 1, "C2", "N", 1, 2, 3, 4);
    int expected = 2;
    int actual = tuple.simpleClassNameIndex();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSimpleClassNameIndex_EmptyNonCachedValue_HUdw5() {
    IcTuple tuple = new IcTuple("", 1, "C2", "N", 1, 2, 3, 4);
    int expected = 2;
    int actual = tuple.simpleClassNameIndex();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnonymous_True_XBpo0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
    assertTrue(tuple.isAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnonymous_False_BImZ1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    assertFalse(tuple.isAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnonymous_Null_JUeH2() {
    IcTuple tuple = new IcTuple(null, 1, "C2", "N", 0, 0, 0, 0);
    assertFalse(tuple.isAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnonymous_Empty_GChD3() {
    IcTuple tuple = new IcTuple("", 1, "C2", "N", 0, 0, 0, 0);
    assertFalse(tuple.isAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnonymous_Invalid_BBno5() {
    IcTuple tuple = new IcTuple("Invalid", 1, "C2", "N", 0, 0, 0, 0);
    assertFalse(tuple.isAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnonymous_Valid_LTcV6() {
    IcTuple tuple = new IcTuple("Valid", 1, "C2", "N", 0, 0, 0, 0);
    assertTrue(tuple.isAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnonymous_MixedCase_XMwA7() {
    IcTuple tuple = new IcTuple("VaLid", 1, "C2", "N", 0, 0, 0, 0);
    assertTrue(tuple.isAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnonymous_UpperCase_oZdP8() {
    IcTuple tuple = new IcTuple("VALID", 1, "C2", "N", 0, 0, 0, 0);
    assertTrue(tuple.isAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnonymous_LowerCase_bkBS9() {
    IcTuple tuple = new IcTuple("valid", 1, "C2", "N", 0, 0, 0, 0);
    assertTrue(tuple.isAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetC2_bDxF0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("C2", tuple.getC2());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSimpleClassName1_GTYD0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String expected = "C";
    String actual = tuple.simpleClassName();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_True_SHEx0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
    assertTrue(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_False_CNgy1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 0);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_Null_fOQI2() {
    IcTuple tuple = new IcTuple(null, 1, "C2", "N", 1, 1, 1, 1);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_Empty_rYHs3() {
    IcTuple tuple = new IcTuple("", 1, "C2", "N", 1, 1, 1, 1);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_InvalidC_YSri4() {
    IcTuple tuple = new IcTuple("InvalidC", 1, "C2", "N", 1, 1, 1, 1);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_InvalidC2_tyRN5() {
    IcTuple tuple = new IcTuple("C", 1, "InvalidC2", "N", 1, 1, 1, 1);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_InvalidN_oMcW6() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "InvalidN", 1, 1, 1, 1);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_InvalidcIndex_Weyg7() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 1, 1, 1);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_Invalidc2Index_zqDA8() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 0, 1, 1);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_InvalidnIndex_eZeH9() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 1, 0, 1);
    assertFalse(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetC_PmUO0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("C", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithNull_JvlO1() {
    IcTuple tuple = new IcTuple(null, 1, "C2", "N", 1, 2, 3, 4);
    assertNull(tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithEmptyString_XGIt2() {
    IcTuple tuple = new IcTuple("", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithInvalidString_CGWG3() {
    IcTuple tuple = new IcTuple("Invalid", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("Invalid", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithValidString_XGmw4() {
    IcTuple tuple = new IcTuple("Valid", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("Valid", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithDifferentCase_MIZN5() {
    IcTuple tuple = new IcTuple("c", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("c", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithSpecialCharacters_WsvK7() {
    IcTuple tuple = new IcTuple("!@#$%^&*()_+", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("!@#$%^&*()_+", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithMultipleCharacters_kwss8() {
    IcTuple tuple = new IcTuple("abc", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("abc", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithMultipleWords_wDqZ9() {
    IcTuple tuple = new IcTuple("hello world", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("hello world", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithMultipleLines_QKtI10() {
    IcTuple tuple = new IcTuple("hello\nworld", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("hello\nworld", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithMultipleLinesAndSpecialCharacters_gSpx12() {
    IcTuple tuple = new IcTuple("hello\n!@#$%^&*()_+", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("hello\n!@#$%^&*()_+", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString1_Zylx0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result = tuple.outerClassString();
    assertEquals("C1C2N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetN_1_OHDD0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("N", tuple.getN());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassIndex_predictedTrue_CtSB0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    int expected = 1;
    int actual = tuple.thisClassIndex();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassIndex_predictedFalse_ZfIo1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    int expected = -1;
    int actual = tuple.thisClassIndex();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetF_Qcus0() {
        IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
        assertEquals(1, tuple.getF());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFWithDifferentValues_sESU1() {
        IcTuple tuple = new IcTuple("C", 2, "C2", "N", 0, 0, 0, 0);
        assertEquals(2, tuple.getF());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFWithInvalidValues_VHZn3() {
        IcTuple tuple = new IcTuple("C", -1, "C2", "N", 0, 0, 0, 0);
        assertEquals(0, tuple.getF());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_1_eQeG0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals(4, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_2_YsKm1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 5);
    assertEquals(5, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_3_akvG2() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 6);
    assertEquals(6, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_4_nwnS3() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 7);
    assertEquals(7, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_5_eBpK4() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 8);
    assertEquals(8, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_6_noPJ5() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 9);
    assertEquals(9, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_7_PJTL6() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 10);
    assertEquals(10, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_8_klIq7() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 11);
    assertEquals(11, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_9_wITU8() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 12);
    assertEquals(12, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_10_hZet9() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 13);
    assertEquals(13, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_11_UPxB10() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 14);
    assertEquals(14, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_12_KIYh11() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 15);
    assertEquals(15, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_13_cEWQ12() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 16);
    assertEquals(16, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_EmptyString_CRkA0() {
    IcTuple tuple = new IcTuple("", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("");
    assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_SingleChar_qgno1() {
    IcTuple tuple = new IcTuple("a", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("a");
    assertEquals(1, result.length);
    assertEquals("a", result[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_MultipleChars_QmXJ2() {
    IcTuple tuple = new IcTuple("abc", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("abc");
    assertEquals(3, result.length);
    assertEquals("a", result[0]);
    assertEquals("b", result[1]);
    assertEquals("c", result[2]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSign_RdBM3() {
    IcTuple tuple = new IcTuple("a$b", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("a$b");
    assertEquals(2, result.length);
    assertEquals("a", result[0]);
    assertEquals("b", result[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassString_predicted_zjke0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String actual = tuple.thisClassString();
    assertEquals("C", actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_SingleChar_qgno1_1() {
    IcTuple tuple = new IcTuple("a", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("a");
    assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_SingleChar_qgno1_2() {
    IcTuple tuple = new IcTuple("a", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("a");
    assertEquals("a", result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_MultipleChars_QmXJ2_1() {
    IcTuple tuple = new IcTuple("abc", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("abc");
    assertEquals(3, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_MultipleChars_QmXJ2_2() {
    IcTuple tuple = new IcTuple("abc", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("abc");
    assertEquals("a", result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_MultipleChars_QmXJ2_3() {
    IcTuple tuple = new IcTuple("abc", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("abc");
    assertEquals("b", result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_MultipleChars_QmXJ2_4() {
    IcTuple tuple = new IcTuple("abc", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("abc");
    assertEquals("c", result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSign_RdBM3_1() {
    IcTuple tuple = new IcTuple("a$b", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("a$b");
    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSign_RdBM3_2() {
    IcTuple tuple = new IcTuple("a$b", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("a$b");
    assertEquals("a", result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarSign_RdBM3_3() {
    IcTuple tuple = new IcTuple("a$b", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("a$b");
    assertEquals("b", result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymous_False_AFhO1_bdxO0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertFalse(tuple.outerIsAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPredictSimple(boolean predictSimple) {
        this.predictSimple = predictSimple;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullSafeEquals_NullStringTwo_AJjm1_IfeE0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertFalse(tuple.nullSafeEquals("stringOne", null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectSameValues_eqGK1_nVns0() {
    IcTuple tuple1 = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 0);
    IcTuple tuple2 = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 0);
    assertTrue(tuple1.equals(tuple2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_mjzi0_QKZB0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String expected = "IcTuple (C in C2)";
    assertEquals(expected, tuple.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithInvalidValues_WWin3_zCqa0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 0);
    String expected = "IcTuple (C in C2)";
    assertNotEquals(expected, tuple.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFWithNullValues_MZxb2_vbTd0() {
    IcTuple tuple = new IcTuple("", 0, "", "", 0, 0, 0, 0);
    assertEquals(0, tuple.getF());
}
}