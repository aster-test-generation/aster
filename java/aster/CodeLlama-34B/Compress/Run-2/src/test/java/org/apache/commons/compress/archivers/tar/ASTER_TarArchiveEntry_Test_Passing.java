/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveEntry_Test_Passing {
public void testGetPathWithFile_xsJF0() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
Path path = entry.getPath();
}
public void testGetPathWithPath_vYHO1() {
}
public void testGetPathWithByteArray_UyHm2() {
TarArchiveEntry entry = new TarArchiveEntry(new byte[] { 1, 2, 3, 4, 5 });
Path path = entry.getPath();
assertEquals(null, path);
}
public void testGetPathWithByteArrayAndEncoding_GJvx3() {
}
public void testGetPathWithByteArrayAndEncodingAndLenient_DhoO4() {
}
public void testGetPathWithByteArrayAndEncodingAndLenientAndDataOffset_ksWQ5() {
}
public void testGetPathWithString_smuh6() {
TarArchiveEntry entry = new TarArchiveEntry("file.txt");
Path path = entry.getPath();
}
public void testGetPathWithStringAndPreserveAbsolutePath_CmqJ7() {
TarArchiveEntry entry = new TarArchiveEntry("file.txt", true);
Path path = entry.getPath();
}
public void testGetPathWithByteArrayAndEncodingAndLenientAndDataOffsetAndGlobalPaxHeaders_DYEk8() {
}
public void testGetPathWithByteArrayAndEncodingAndLenientAndDataOffsetAndGlobalPaxHeadersAndLinkOptions_zmzb9() {
}
public void testSetCreationTime_RKQG0() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time = FileTime.fromMillis(System.currentTimeMillis());
entry.setCreationTime(time);
assertEquals(time, entry.getCreationTime());
}
public void testSetCreationTimeWithNull_YgML1() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
entry.setCreationTime(null);
assertNull(entry.getCreationTime());
}
public void testSetCreationTimeWithInvalidTime_jPSM2() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time = FileTime.fromMillis(System.currentTimeMillis() - 10000000000L);
entry.setCreationTime(time);
assertEquals(time, entry.getCreationTime());
}
public void testSetCreationTimeWithFutureTime_lmqQ3() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time = FileTime.fromMillis(System.currentTimeMillis() + 10000000000L);
entry.setCreationTime(time);
assertEquals(time, entry.getCreationTime());
}
public void testSetCreationTimeWithSameTime_WbaH4() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time = FileTime.fromMillis(System.currentTimeMillis());
entry.setCreationTime(time);
assertEquals(time, entry.getCreationTime());
}
public void testSetCreationTimeWithDifferentTime_TcfA5() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time1 = FileTime.fromMillis(System.currentTimeMillis());
FileTime time2 = FileTime.fromMillis(System.currentTimeMillis() + 10000000000L);
entry.setCreationTime(time1);
assertEquals(time1, entry.getCreationTime());
entry.setCreationTime(time2);
assertEquals(time2, entry.getCreationTime());
}
public void testSetCreationTimeWithInvalidFileName_LvFm6() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time = FileTime.fromMillis(System.currentTimeMillis());
entry.setCreationTime(time);
assertEquals(time, entry.getCreationTime());
}
public void testSetCreationTimeWithNullFileName_Vvaa7() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time = FileTime.fromMillis(System.currentTimeMillis());
entry.setCreationTime(time);
assertEquals(time, entry.getCreationTime());
}
public void testSetCreationTimeWithEmptyFileName_fLtD8() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time = FileTime.fromMillis(System.currentTimeMillis());
entry.setCreationTime(time);
assertEquals(time, entry.getCreationTime());
}
public void testSetCreationTimeWithInvalidFile_wSKf9() {
TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
FileTime time = FileTime.fromMillis(System.currentTimeMillis());
entry.setCreationTime(time);
assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_kdOV0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setMode(0755);
    assertEquals(0755, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModeWithName_GBRC6() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    entry.setMode(0755);
    assertEquals(0755, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModeWithNameAndPreserveAbsolutePath_BDNP7() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    entry.setMode(0755);
    assertEquals(0755, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTime_YRfh0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Date time = new Date();
    entry.setModTime(time);
    assertEquals(FileTimes.toFileTime(time), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithName_UVum6() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    Date time = new Date();
    entry.setModTime(time);
    assertEquals(FileTimes.toFileTime(time), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithNameAndPreserveAbsolutePath_DIog7() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    Date time = new Date();
    entry.setModTime(time);
    assertEquals(FileTimes.toFileTime(time), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithFile_PJrn8() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    Date time = new Date();
    entry.setModTime(time);
    assertEquals(FileTimes.toFileTime(time), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTime1_fUzP0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Date modTime = entry.getModTime();
    assertNotNull(modTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTime2_kLVN1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    Date modTime = entry.getModTime();
    assertNotNull(modTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTime7_Odrj6() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name);
    Date modTime = entry.getModTime();
    assertNotNull(modTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTime8_TbhG7() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name, true);
    Date modTime = entry.getModTime();
    assertNotNull(modTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTime10_WmrU9() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    Date modTime = entry.getModTime();
    assertNotNull(modTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMajor_default_JWVv0() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    assertEquals(0, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMajor_nonDefault_OCnQ1() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 1);
    assertEquals(1, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMajor_preserveAbsolutePath_qNSf2() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    assertEquals(0, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMajor_nonPreserveAbsolutePath_rAPV3() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", false);
    assertEquals(0, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMajor_file_Ooit4() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    assertEquals(0, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMajor_headerBuf_YWDz6() {
    byte[] headerBuf = new byte[10];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    assertEquals(0, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderWithEncoding_NhGb5() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    byte[] header = new byte[1024];
    try {
        tarArchiveEntry.parseTarHeader(header, TarUtils.DEFAULT_ENCODING);
    } catch (IOException e) {
        e.printStackTrace();
    }
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderWithEncodingAndOldStyleAndLenient_xJQE8() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_rSrM0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.parseTarHeader(new byte[1024]);
    assertEquals(1024, tarArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_Kfwi0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.parseTarHeader(new byte[1024]);
    assertEquals("test.tar", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderWithEncoding_gVBd1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"), "test");
    byte[] header = new byte[1024];
    try {
        tarArchiveEntry.parseTarHeader(header, TarUtils.DEFAULT_ENCODING);
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderWithHeaderBufAndEncodingAndDataOffset_YLTZ9() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"), "test");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithValidHeaders_Aizl0() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = new HashMap<>();
headers.put(TarGnuSparseKeys.SIZE, "1024");
headers.put(TarGnuSparseKeys.NAME, "test.txt");
entry.fillGNUSparse0xData(headers);
assertEquals(1024, entry.getRealSize());
assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithInvalidHeaders_bijR1() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = new HashMap<>();
headers.put(TarGnuSparseKeys.SIZE, "1024");
headers.put(TarGnuSparseKeys.NAME, "test.txt");
entry.fillGNUSparse0xData(headers);
assertEquals(0, entry.getRealSize());
assertEquals(null, entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithNullHeaders_nAVh2() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = null;
entry.fillGNUSparse0xData(headers);
assertEquals(0, entry.getRealSize());
assertEquals(null, entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithEmptyHeaders_JJro3() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = new HashMap<>();
entry.fillGNUSparse0xData(headers);
assertEquals(0, entry.getRealSize());
assertEquals(null, entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithInvalidSize_rFEj4() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = new HashMap<>();
headers.put(TarGnuSparseKeys.SIZE, "invalid");
headers.put(TarGnuSparseKeys.NAME, "test.txt");
entry.fillGNUSparse0xData(headers);
assertEquals(0, entry.getRealSize());
assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithNegativeSize_SfDP5() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = new HashMap<>();
headers.put(TarGnuSparseKeys.SIZE, "-1024");
headers.put(TarGnuSparseKeys.NAME, "test.txt");
entry.fillGNUSparse0xData(headers);
assertEquals(0, entry.getRealSize());
assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithZeroSize_jTUl6() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = new HashMap<>();
headers.put(TarGnuSparseKeys.SIZE, "0");
headers.put(TarGnuSparseKeys.NAME, "test.txt");
entry.fillGNUSparse0xData(headers);
assertEquals(0, entry.getRealSize());
assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLinkFlag1_jOOK0() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"), "test.txt");
byte linkFlag = tarArchiveEntry.getLinkFlag();
assertEquals(linkFlag, (byte) 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_FxSW0() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[0]);
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_odJB1() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[0]);
    assertFalse(entry.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentHeaderBytes_wAAF3() {
    TarArchiveEntry entry1 = new TarArchiveEntry(new byte[0]);
    TarArchiveEntry entry2 = new TarArchiveEntry(new byte[1]);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentNames_sDVL5() {
    TarArchiveEntry entry1 = new TarArchiveEntry("name1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("name2", (byte) 0);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentPreserveAbsolutePathFlags_GfXg6() {
    TarArchiveEntry entry1 = new TarArchiveEntry("name", (byte) 0, true);
    TarArchiveEntry entry2 = new TarArchiveEntry("name", (byte) 0, false);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate1_GGYp0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Date expected = new Date(1234567890);
    entry.setModTime(expected);
    Date actual = entry.getLastModifiedDate();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate2_wauM1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    Date expected = new Date(1234567890);
    entry.setModTime(expected);
    Date actual = entry.getLastModifiedDate();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevMajor_validInput_rIlO0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDevMajor(10);
    assertEquals(10, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIdsWithName_gFFB6() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt");
        entry.setIds(1000, 1000);
        assertEquals(1000, entry.getUserId());
        assertEquals(1000, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIdsWithNameAndPreserveAbsolutePath_yEce7() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
        entry.setIds(1000, 1000);
        assertEquals(1000, entry.getUserId());
        assertEquals(1000, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderedSparseHeaders_EmptySparseHeaders_Kpeg0() throws IOException {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0]);
    List<TarArchiveStructSparse> orderedAndFiltered = tarArchiveEntry.getOrderedSparseHeaders();
    assertEquals(0, orderedAndFiltered.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDataOffset_ValidOffset_Qgyq0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDataOffset(100);
    assertEquals(100, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDataOffset_ZeroOffset_Vthh2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDataOffset(0);
    assertEquals(0, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_ValidSize_KlmY0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setSize(100);
    assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDescendent_ZYwU0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    TarArchiveEntry desc = new TarArchiveEntry(new File("test/test.txt"));
    assertTrue(entry.isDescendent(desc));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDescendentWithDifferentNames_JSoT1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    TarArchiveEntry desc = new TarArchiveEntry(new File("test2.txt"));
    assertFalse(entry.isDescendent(desc));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDescendentWithEmptyName_oLsv3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    TarArchiveEntry desc = new TarArchiveEntry("");
    assertFalse(entry.isDescendent(desc));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDescendentWithSameName_OdDQ4() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    TarArchiveEntry desc = new TarArchiveEntry(new File("test.txt"));
    assertTrue(entry.isDescendent(desc));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDescendentWithDifferentPaths_unzP5() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test/test.txt"));
    TarArchiveEntry desc = new TarArchiveEntry(new File("test2/test.txt"));
    assertFalse(entry.isDescendent(desc));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDescendentWithEmptyPath_nBOF7() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test/test.txt"));
    TarArchiveEntry desc = new TarArchiveEntry("");
    assertFalse(entry.isDescendent(desc));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDescendentWithSamePath_leZw8() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test/test.txt"));
    TarArchiveEntry desc = new TarArchiveEntry(new File("test/test.txt"));
    assertTrue(entry.isDescendent(desc));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDescendentWithDifferentNamesAndPaths_HVMR9() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test/test.txt"));
    TarArchiveEntry desc = new TarArchiveEntry(new File("test2/test2.txt"));
    assertFalse(entry.isDescendent(desc));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous_1_CZlq0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertTrue(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNullName_XChT0() {
TarArchiveEntry entry = new TarArchiveEntry(null, (byte) 0);
assertEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithEmptyName_txpE1() {
TarArchiveEntry entry = new TarArchiveEntry("", (byte) 0);
assertEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNonEmptyName_lzgy2() {
TarArchiveEntry entry = new TarArchiveEntry("test", (byte) 0);
assertEquals("test".hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNullNameAndNonZeroLinkFlag_uEDG3() {
TarArchiveEntry entry = new TarArchiveEntry(null, (byte) 1);
assertEquals(1, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithEmptyNameAndNonZeroLinkFlag_ygZX4() {
TarArchiveEntry entry = new TarArchiveEntry("", (byte) 1);
assertEquals(1, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNonEmptyNameAndNonZeroLinkFlag_wovY5() {
TarArchiveEntry entry = new TarArchiveEntry("test", (byte) 1);
assertEquals("test".hashCode() + 1, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeaders1_WeQY0() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> extraPaxHeaders = tarArchiveEntry.getExtraPaxHeaders();
assertEquals(0, extraPaxHeaders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeaders2_yLam1() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"), "test.txt");
Map<String, String> extraPaxHeaders = tarArchiveEntry.getExtraPaxHeaders();
assertEquals(0, extraPaxHeaders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFile_nonNull_sgnq1() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file, "test.txt");
    assertEquals(file, entry.getFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFile_directory_HHHb2() {
    File directory = new File("test_directory");
    directory.mkdir();
    TarArchiveEntry entry = new TarArchiveEntry(directory, "test_directory");
    assertNull(entry.getFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupName_YJKH0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    entry.setGroupName("group");
    assertEquals("group", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithNull_JnMV1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    entry.setGroupName(null);
    assertNull(entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithEmptyString_ioUv2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    entry.setGroupName("");
    assertEquals("", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithSpecialCharacters_yZQE4() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    entry.setGroupName("!@#$%^&*()_+");
    assertEquals("!@#$%^&*()_+", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithLongString_jMoH5() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    entry.setGroupName("This is a very long group name that exceeds the maximum length of 32 characters");
    assertEquals("This is a very long group name that exceeds the maximum length of 32 characters", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithInvalidCharacters_UZEd6() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    entry.setGroupName("This group name contains invalid characters like \u0000");
    assertEquals("This group name contains invalid characters like \u0000", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithInvalidLength_MKJW7() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    entry.setGroupName("This group name is too long and exceeds the maximum length of 32 characters");
    assertEquals("This group name is too long and exceeds the maximum length of 32 characters", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithInvalidFormat_LQLA8() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    entry.setGroupName("This group name is in an invalid format");
    assertEquals("This group name is in an invalid format", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithNullFile_GaxT9() {
    TarArchiveEntry entry = new TarArchiveEntry(null, "test.txt");
    entry.setGroupName("group");
    assertEquals("group", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithNullFileName_Gool10() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), null);
    entry.setGroupName("group");
    assertEquals("group", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_groupName_qyBS0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames("user", "group");
    assertEquals("user", entry.getUserName());
    assertEquals("group", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_nullUser_groupName_ppmH1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames(null, "group");
    assertNull(entry.getUserName());
    assertEquals("group", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_nullGroup_xxUj2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames("user", null);
    assertEquals("user", entry.getUserName());
    assertNull(entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_nullUser_nullGroup_iRJm3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames(null, null);
    assertNull(entry.getUserName());
    assertNull(entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_emptyUser_groupName_cwZi4() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames("", "group");
    assertEquals("", entry.getUserName());
    assertEquals("group", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_emptyGroup_MKpd5() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames("user", "");
    assertEquals("user", entry.getUserName());
    assertEquals("", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_emptyUser_emptyGroup_VgFl6() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames("", "");
    assertEquals("", entry.getUserName());
    assertEquals("", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClearExtraPaxHeaders_yeDS0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.clearExtraPaxHeaders();
    assertTrue(tarArchiveEntry.getExtraPaxHeaders().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClearExtraPaxHeadersWithName_AZNJ5() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.tar");
    tarArchiveEntry.clearExtraPaxHeaders();
    assertTrue(tarArchiveEntry.getExtraPaxHeaders().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClearExtraPaxHeadersWithPreserveAbsolutePath_rEWC6() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.tar", true);
    tarArchiveEntry.clearExtraPaxHeaders();
    assertTrue(tarArchiveEntry.getExtraPaxHeaders().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupNameWithNameAndLinkFlag_OuPF6() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test", (byte) 0);
        assertNotNull(entry.getGroupName());
        assertEquals("test", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupNameWithNameAndLinkFlagAndPreserveAbsolutePath_HdRj7() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test", (byte) 0, true);
        assertNotNull(entry.getGroupName());
        assertEquals("test", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_True_SMaJ0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"), "file.txt");
    assertTrue(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_iulm0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setLastAccessTime(FileTime.fromMillis(System.currentTimeMillis()));
    assertEquals(FileTime.fromMillis(System.currentTimeMillis()), entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithNull_ihtv1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setLastAccessTime(null);
    assertNull(entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithInvalidTime_rtkY2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.setLastAccessTime(FileTime.fromMillis(System.currentTimeMillis() + 10000000000L));
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithNegativeTime_bivs3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.setLastAccessTime(FileTime.fromMillis(-10000000000L));
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithZeroTime_Ikma4() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setLastAccessTime(FileTime.fromMillis(0));
    assertEquals(FileTime.fromMillis(0), entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithMaxTime_dTtE5() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setLastAccessTime(FileTime.fromMillis(Long.MAX_VALUE));
    assertEquals(FileTime.fromMillis(Long.MAX_VALUE), entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithMinTime_zAEV6() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setLastAccessTime(FileTime.fromMillis(Long.MIN_VALUE));
    assertEquals(FileTime.fromMillis(Long.MIN_VALUE), entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithFutureTime_wQxz8() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setLastAccessTime(FileTime.fromMillis(System.currentTimeMillis() + 10000000000L));
    assertEquals(FileTime.fromMillis(System.currentTimeMillis() + 10000000000L), entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithPastTime_hDQD9() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setLastAccessTime(FileTime.fromMillis(System.currentTimeMillis() - 10000000000L));
    assertEquals(FileTime.fromMillis(System.currentTimeMillis() - 10000000000L), entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEntryHeader1_tgqu0() throws IOException {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"), "test.txt");
byte[] outbuf = new byte[1024];
tarArchiveEntry.writeEntryHeader(outbuf);
assertArrayEquals(new byte[1024], outbuf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEntryHeader2_wPmn1() throws IOException {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"), "test.txt");
byte[] outbuf = new byte[1024];
tarArchiveEntry.writeEntryHeader(outbuf, TarUtils.DEFAULT_ENCODING, false);
assertArrayEquals(new byte[1024], outbuf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEntryHeader3_aaeJ2() throws IOException {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"), "test.txt");
byte[] outbuf = new byte[1024];
tarArchiveEntry.writeEntryHeader(outbuf, TarUtils.FALLBACK_ENCODING, false);
assertArrayEquals(new byte[1024], outbuf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEntryHeader4_zIgu3() throws IOException {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"), "test.txt");
byte[] outbuf = new byte[1024];
tarArchiveEntry.writeEntryHeader(outbuf, TarUtils.DEFAULT_ENCODING, true);
assertArrayEquals(new byte[1024], outbuf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEntryHeader5_lxbk4() throws IOException {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"), "test.txt");
byte[] outbuf = new byte[1024];
tarArchiveEntry.writeEntryHeader(outbuf, TarUtils.FALLBACK_ENCODING, true);
assertArrayEquals(new byte[1024], outbuf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName1_mlda0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName2_NcIv1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeader_BPrj0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    String extraPaxHeader = entry.getExtraPaxHeader("test");
    assertEquals("test", extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeaderWithName_kLVC4() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
    String extraPaxHeader = entry.getExtraPaxHeader("test");
    assertEquals("test", extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeaderWithNameAndPreserveAbsolutePath_cCGw5() {
    TarArchiveEntry entry = new TarArchiveEntry("test", true);
    String extraPaxHeader = entry.getExtraPaxHeader("test");
    assertEquals("test", extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeaderWithFile_jEwI6() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    String extraPaxHeader = entry.getExtraPaxHeader("test");
    assertEquals("test", extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeaderWithFileAndFileName_LZYj7() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file, "test.txt");
    String extraPaxHeader = entry.getExtraPaxHeader("test");
    assertEquals("test", extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEntryFromPaxHeaders_InvalidHeaders_Qvqa2() throws IOException {
    Map<String, String> headers = new HashMap<>();
    headers.put("name", "test.txt");
    headers.put("size", "abc");
    headers.put("dataOffset", "def");
    headers.put("linkFlag", "ghi");
    headers.put("mode", "jkl");
    headers.put("uid", "mno");
    headers.put("gid", "pqr");
    headers.put("mtime", "stu");
    headers.put("atime", "vwx");
    headers.put("ctime", "yz");
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.updateEntryFromPaxHeaders(headers);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid header value for 'size': 'abc'", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEntryFromPaxHeaders_NullHeaders_OrlY3() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.updateEntryFromPaxHeaders(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("headers", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_WithPreserveAbsolutePath_iziy4() {
    TarArchiveEntry entry = new TarArchiveEntry("absolute/path", true);
    assertTrue(entry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_WithoutPreserveAbsolutePath_wUrW5() {
    TarArchiveEntry entry = new TarArchiveEntry("relative/path", false);
    assertFalse(entry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_WithFile_mJjN6() {
    File file = new File("file.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    assertFalse(entry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLinkName_Rsrk0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    tarArchiveEntry.setLinkName("link");
    assertEquals("link", tarArchiveEntry.getLinkName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLinkNameWithEmptyString_foBk1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    tarArchiveEntry.setLinkName("");
    assertEquals("", tarArchiveEntry.getLinkName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLinkNameWithNull_MGbs2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    tarArchiveEntry.setLinkName(null);
    assertNull(tarArchiveEntry.getLinkName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLinkNameWithInvalidLinkName_evYw3() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    try {
        tarArchiveEntry.setLinkName("invalid_link");
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid link name: invalid_link", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLinkNameWithValidLinkName_DFHy4() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    tarArchiveEntry.setLinkName("valid_link");
    assertEquals("valid_link", tarArchiveEntry.getLinkName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLinkName1_NNfH0() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"), "test.txt");
assertEquals("test.txt", tarArchiveEntry.getLinkName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPaxGNUSparse_default_CZfc0() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[0]);
    assertFalse(entry.isPaxGNUSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_StringConstructor_XnvN1() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_StringConstructor_PreserveAbsolutePath_WgeK2() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_ByteArrayConstructor_DkFf3() {
    byte[] headerBuf = new byte[100];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_FileConstructor_JyUY7() throws IOException {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSparseHeaders1_dDoJ0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    List<TarArchiveStructSparse> sparseHeaders = entry.getSparseHeaders();
    assertEquals(0, sparseHeaders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSparseHeaders2_avYl1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    List<TarArchiveStructSparse> sparseHeaders = entry.getSparseHeaders();
    assertEquals(0, sparseHeaders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongUserId1_EfBG0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    long userId = tarArchiveEntry.getLongUserId();
    assertEquals(0, userId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongUserId2_RGXA1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"), "test.txt");
    long userId = tarArchiveEntry.getLongUserId();
    assertEquals(0, userId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_default_wRPK0() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_starSparse_otsW1() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0x20);
    assertTrue(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_nonStarSparse_aELJ2() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0x00);
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_null_zydZ3() {
    TarArchiveEntry entry = new TarArchiveEntry(null, (byte) 0x00);
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_empty_drkp4() {
    TarArchiveEntry entry = new TarArchiveEntry("", (byte) 0x00);
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_invalidLinkFlag_gsYl5() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0xFF);
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_invalidLinkFlag2_KHIA6() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0x01);
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_invalidLinkFlag3_xYJz7() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0x02);
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_invalidLinkFlag4_WZQe8() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0x03);
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_invalidLinkFlag5_lUvZ9() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0x04);
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_invalidLinkFlag6_OjoR10() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0x05);
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_invalidLinkFlag7_zjPt11() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0x06);
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_invalidLinkFlag8_QBna12() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0x07);
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_invalidLinkFlag9_btft13() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0x08);
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_invalidLinkFlag10_fCbz14() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0x09);
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_invalidLinkFlag11_neji15() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0x0A);
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId_FzPC0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithName_eGeQ6() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithNameAndPreserveAbsolutePath_TZuQ7() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTime_jpbc0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setModTime(time);
    assertEquals(time, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithName_vqHT7() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setModTime(time);
    assertEquals(time, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithPreserveAbsolutePathAndName_UYmt8() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setModTime(time);
    assertEquals(time, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPaxGNU1XSparse_default_XYOS0() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    assertFalse(entry.isPaxGNU1XSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffset1_HvWJ0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals(0, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithValidFile_XXVB0() throws IOException {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
FileTime creationTime = tarArchiveEntry.getCreationTime();
assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithInvalidFile_SGYV1() throws IOException {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
FileTime creationTime = tarArchiveEntry.getCreationTime();
assertNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithValidName_aTTL6() throws IOException {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt");
FileTime creationTime = tarArchiveEntry.getCreationTime();
assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithInvalidName_drZN7() throws IOException {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt");
FileTime creationTime = tarArchiveEntry.getCreationTime();
assertNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithValidLinkFlag_jQBa8() throws IOException {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt", (byte) 0);
FileTime creationTime = tarArchiveEntry.getCreationTime();
assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithInvalidLinkFlag_pWqj9() throws IOException {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt", (byte) 0);
FileTime creationTime = tarArchiveEntry.getCreationTime();
assertNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize1_dBLO0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize2_LRpz1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevMinor_ehGV0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setDevMinor(10);
    assertEquals(10, tarArchiveEntry.getDevMinor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevMinorWithNegativeValue_enkf1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    try {
        tarArchiveEntry.setDevMinor(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Minor device number is out of range: -1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevMinorWithOutOfRangeValue_gqhk5() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    try {
        tarArchiveEntry.setDevMinor(1000000000);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Minor device number is out of range: 1000000000", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_FjpK0() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1.txt");
    TarArchiveEntry entry2 = entry1;
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_Rput1() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1.txt");
    TarArchiveEntry entry2 = new TarArchiveEntry("file2.txt");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_BlEU2() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1.txt");
    assertFalse(entry1.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLinkFlag_hyuf4() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1.txt", (byte) 1);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1.txt", (byte) 2);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentModTime_Gjvi5() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1.txt");
    entry1.setModTime(new Date(1000));
    TarArchiveEntry entry2 = new TarArchiveEntry("file1.txt");
    entry2.setModTime(new Date(2000));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentSize_FDnE6() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1.txt");
    entry1.setSize(100);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1.txt");
    entry2.setSize(200);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentDataOffset_cmxs7() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1.txt");
    entry1.setDataOffset(100);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1.txt");
    entry2.setDataOffset(200);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentSparseHeaders_icHM8() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1.txt");
    entry1.setSparseHeaders(Arrays.asList(new TarArchiveStructSparse(100, 100)));
    TarArchiveEntry entry2 = new TarArchiveEntry("file1.txt");
    entry2.setSparseHeaders(Arrays.asList(new TarArchiveStructSparse(200, 200)));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentExtraPaxHeaders_EMkc9() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1.txt");
    entry1.addPaxHeader("key1", "value1");
    TarArchiveEntry entry2 = new TarArchiveEntry("file1.txt");
    entry2.addPaxHeader("key2", "value2");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRealSize_NotSparse_NYVP0() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
    assertEquals(0, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRealSize_NotSparse_NonZeroSize_Myae2() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
    entry.setSize(100);
    assertEquals(100, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserName1_fGsA0() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
String userName = tarArchiveEntry.getUserName();
assertEquals("root", userName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserName2_opBZ1() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"), "test.txt");
String userName = tarArchiveEntry.getUserName();
assertEquals("root", userName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithValidHeaders_Aizl0_1() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = new HashMap<>();
headers.put(TarGnuSparseKeys.SIZE, "1024");
headers.put(TarGnuSparseKeys.NAME, "test.txt");
entry.fillGNUSparse0xData(headers);
assertEquals(1024, entry.getRealSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithValidHeaders_Aizl0_2() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = new HashMap<>();
headers.put(TarGnuSparseKeys.SIZE, "1024");
headers.put(TarGnuSparseKeys.NAME, "test.txt");
entry.fillGNUSparse0xData(headers);
assertEquals("test.txt", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithInvalidHeaders_bijR1_1() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = new HashMap<>();
headers.put(TarGnuSparseKeys.SIZE, "1024");
headers.put(TarGnuSparseKeys.NAME, "test.txt");
entry.fillGNUSparse0xData(headers);
assertEquals(0, entry.getRealSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithInvalidHeaders_bijR1_2() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = new HashMap<>();
headers.put(TarGnuSparseKeys.SIZE, "1024");
headers.put(TarGnuSparseKeys.NAME, "test.txt");
entry.fillGNUSparse0xData(headers);
assertEquals(null, entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithNullHeaders_nAVh2_1() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = null;
entry.fillGNUSparse0xData(headers);
assertEquals(0, entry.getRealSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithNullHeaders_nAVh2_2() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = null;
entry.fillGNUSparse0xData(headers);
assertEquals(null, entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithEmptyHeaders_JJro3_1() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = new HashMap<>();
entry.fillGNUSparse0xData(headers);
assertEquals(0, entry.getRealSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithEmptyHeaders_JJro3_2() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = new HashMap<>();
entry.fillGNUSparse0xData(headers);
assertEquals(null, entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithInvalidSize_rFEj4_1() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = new HashMap<>();
headers.put(TarGnuSparseKeys.SIZE, "invalid");
headers.put(TarGnuSparseKeys.NAME, "test.txt");
entry.fillGNUSparse0xData(headers);
assertEquals(0, entry.getRealSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithInvalidSize_rFEj4_2() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = new HashMap<>();
headers.put(TarGnuSparseKeys.SIZE, "invalid");
headers.put(TarGnuSparseKeys.NAME, "test.txt");
entry.fillGNUSparse0xData(headers);
assertEquals("test.txt", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithNegativeSize_SfDP5_1() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = new HashMap<>();
headers.put(TarGnuSparseKeys.SIZE, "-1024");
headers.put(TarGnuSparseKeys.NAME, "test.txt");
entry.fillGNUSparse0xData(headers);
assertEquals(0, entry.getRealSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithNegativeSize_SfDP5_2() throws IOException {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
Map<String, String> headers = new HashMap<>();
headers.put(TarGnuSparseKeys.SIZE, "-1024");
headers.put(TarGnuSparseKeys.NAME, "test.txt");
entry.fillGNUSparse0xData(headers);
assertEquals("test.txt", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIdsWithName_gFFB6_1() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt");
        entry.setIds(1000, 1000);
        assertEquals(1000, entry.getUserId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIdsWithName_gFFB6_2() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt");
        entry.setIds(1000, 1000);
        assertEquals(1000, entry.getGroupId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIdsWithNameAndPreserveAbsolutePath_yEce7_1() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
        entry.setIds(1000, 1000);
        assertEquals(1000, entry.getUserId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIdsWithNameAndPreserveAbsolutePath_yEce7_2() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
        entry.setIds(1000, 1000);
        assertEquals(1000, entry.getGroupId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_groupName_qyBS0_1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames("user", "group");
    assertEquals("user", entry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_groupName_qyBS0_2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames("user", "group");
    assertEquals("group", entry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_nullUser_groupName_ppmH1_1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames(null, "group");
    assertNull(entry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_nullUser_groupName_ppmH1_2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames(null, "group");
    assertEquals("group", entry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_nullGroup_xxUj2_1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames("user", null);
    assertEquals("user", entry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_nullGroup_xxUj2_2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames("user", null);
    assertNull(entry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_nullUser_nullGroup_iRJm3_1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames(null, null);
    assertNull(entry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_nullUser_nullGroup_iRJm3_2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames(null, null);
    assertNull(entry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_emptyUser_groupName_cwZi4_1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames("", "group");
    assertEquals("", entry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_emptyUser_groupName_cwZi4_2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames("", "group");
    assertEquals("group", entry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_emptyGroup_MKpd5_1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames("user", "");
    assertEquals("user", entry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_userName_emptyGroup_MKpd5_2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames("user", "");
    assertEquals("", entry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_emptyUser_emptyGroup_VgFl6_1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames("", "");
    assertEquals("", entry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_emptyUser_emptyGroup_VgFl6_2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setNames("", "");
    assertEquals("", entry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupNameWithNameAndLinkFlag_OuPF6_1() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test", (byte) 0);
        assertNotNull(entry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupNameWithNameAndLinkFlag_OuPF6_2() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test", (byte) 0);
        assertEquals("test", entry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupNameWithNameAndLinkFlagAndPreserveAbsolutePath_HdRj7_1() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test", (byte) 0, true);
        assertNotNull(entry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupNameWithNameAndLinkFlagAndPreserveAbsolutePath_HdRj7_2() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test", (byte) 0, true);
        assertEquals("test", entry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMajor_dataOffset_kVWY9_QoLh0() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[10]);
    assertEquals(0, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOldGNUSparse_Empty_lrmn3_DZmq0() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[0]);
    assertFalse(entry.isOldGNUSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLinkFlag2_fPUq1_EUWg0() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
byte linkFlag = tarArchiveEntry.getLinkFlag();
assertEquals(linkFlag, (byte) 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLinkFlag5_dmpF4_kpxU0() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
byte linkFlag = tarArchiveEntry.getLinkFlag();
assertEquals(linkFlag, (byte) 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous_3_coVY2_WeZI0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertTrue(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserIdWithNullPath_zHcP5_Syyq0() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[0]);
    entry.setUserId(1000);
    assertEquals(1000, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserIdWithEmptyEncoding_pfmC9_ayDT1() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "");
    entry.setUserId(1000);
    assertEquals(1000, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_Empty_UunB3_ezXG0() {
    TarArchiveEntry entry = new TarArchiveEntry("", (byte) 0);
    assertFalse(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLinkNameWithLinkFlag_OpDD5_XAqO0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt", (byte) 0);
    tarArchiveEntry.setLinkName("link");
    assertEquals("link", tarArchiveEntry.getLinkName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLinkName2_Rcag1_XXTY0() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
assertEquals("test.txt", tarArchiveEntry.getLinkName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedTime1_QZZh0_cwJF0() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
FileTime fileTime = tarArchiveEntry.getLastModifiedTime();
assertEquals(fileTime, FileTime.fromMillis(1000000000000L));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedTime2_ueJX1_wBTV0() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"), "test.txt");
FileTime fileTime = tarArchiveEntry.getLastModifiedTime();
assertEquals(fileTime, FileTime.fromMillis(1000000000000L));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongUserId7_GDeb6_UrIJ0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"), "test.txt");
    long userId = tarArchiveEntry.getLongUserId();
    assertEquals(10, userId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongUserId9_bnxF8_Uufd0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"), "test.txt");
    long userId = tarArchiveEntry.getLongUserId();
    assertEquals(100, userId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithHeaderBuf_WKuH3_QPxZ0() {
    byte[] headerBuf = new byte[0];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithHeaderBuf_YJNO4_LHwx0() {
    byte[] headerBuf = new byte[0];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setModTime(time);
    assertEquals(time, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffset2_ALXU1_OTHI0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals(0, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize7_aQSx6_tODE0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals(10, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize10_UpaH9_Zrjm0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals(100, entry.getSize());
}
}