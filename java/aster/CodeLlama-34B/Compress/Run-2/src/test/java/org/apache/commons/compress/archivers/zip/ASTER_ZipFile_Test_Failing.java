/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import java.util.Enumeration;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipFile_Test_Failing {
private static final byte[] ONE_ZERO_BYTE = new byte[1];
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnixSymlink_entryIsFile_eqJr4() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"));
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    String symlink = zipFile.getUnixSymlink(entry);
    assertNull(symlink);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentBeforeFirstLocalFileHeader_withValidOffset_TYUO0() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true);
    InputStream inputStream = zipFile.getContentBeforeFirstLocalFileHeader();
    assertNotNull(inputStream);
    assertEquals(0, inputStream.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentBeforeFirstLocalFileHeader_withInvalidOffset_GJAr1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true);
    InputStream inputStream = zipFile.getContentBeforeFirstLocalFileHeader();
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentBeforeFirstLocalFileHeader_withEmptyFile_ntkc2() throws IOException {
    ZipFile zipFile = new ZipFile(new File("empty.zip"), "UTF-8", true);
    InputStream inputStream = zipFile.getContentBeforeFirstLocalFileHeader();
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentBeforeFirstLocalFileHeader_withNonExistentFile_XWeG3() throws IOException {
    ZipFile zipFile = new ZipFile(new File("non_existent.zip"), "UTF-8", true);
    InputStream inputStream = zipFile.getContentBeforeFirstLocalFileHeader();
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentBeforeFirstLocalFileHeader_withInvalidEncoding_dhgQ4() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"), "INVALID_ENCODING", true);
    InputStream inputStream = zipFile.getContentBeforeFirstLocalFileHeader();
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentBeforeFirstLocalFileHeader_withInvalidUseUnicodeExtraFields_dzuM5() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", false);
    InputStream inputStream = zipFile.getContentBeforeFirstLocalFileHeader();
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentBeforeFirstLocalFileHeader_withInvalidIgnoreLocalFileHeader_bRbY6() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true, true);
    InputStream inputStream = zipFile.getContentBeforeFirstLocalFileHeader();
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawInputStream_LSgq0() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"));
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    InputStream inputStream = zipFile.getRawInputStream(entry);
    assertNotNull(inputStream);
    assertEquals(entry.getCompressedSize(), inputStream.available());
    inputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawInputStreamWithUnknownStart_pLNA1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"));
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setDataOffset(EntryStreamOffsets.OFFSET_UNKNOWN);
    InputStream inputStream = zipFile.getRawInputStream(entry);
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntriesInPhysicalOrder1_zgtz0() throws IOException {
ZipFile zipFile = new ZipFile(new File("test.zip"));
Enumeration<ZipArchiveEntry> entries = zipFile.getEntriesInPhysicalOrder();
assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntriesInPhysicalOrder2_kIVM1() throws IOException {
ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8");
Enumeration<ZipArchiveEntry> entries = zipFile.getEntriesInPhysicalOrder();
assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntriesInPhysicalOrder3_KWol2() throws IOException {
ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true);
Enumeration<ZipArchiveEntry> entries = zipFile.getEntriesInPhysicalOrder();
assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntriesInPhysicalOrder4_mzFQ3() throws IOException {
ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true, true);
Enumeration<ZipArchiveEntry> entries = zipFile.getEntriesInPhysicalOrder();
assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentBeforeFirstLocalFileHeader_withValidOffset_TYUO0_1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true);
    InputStream inputStream = zipFile.getContentBeforeFirstLocalFileHeader();
    assertNotNull(inputStream);
    assertEquals(0, inputStream.available());
    inputStream.close();
    zipFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentBeforeFirstLocalFileHeader_withInvalidOffset_GJAr1_fid1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true);
    InputStream inputStream = zipFile.getContentBeforeFirstLocalFileHeader();
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentBeforeFirstLocalFileHeader_withInvalidEncoding_dhgQ4_fid1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"), "INVALID_ENCODING", true);
    InputStream inputStream = zipFile.getContentBeforeFirstLocalFileHeader();
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentBeforeFirstLocalFileHeader_withInvalidIgnoreLocalFileHeader_bRbY6_fid1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true, false);
    InputStream inputStream = zipFile.getContentBeforeFirstLocalFileHeader();
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawInputStream_LSgq0_1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"));
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    InputStream inputStream = zipFile.getRawInputStream(entry);
    inputStream.close();
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawInputStream_LSgq0_2() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"));
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    InputStream inputStream = zipFile.getRawInputStream(entry);
    inputStream.close();
    assertEquals(entry.getCompressedSize(), inputStream.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawInputStreamWithUnknownStart_pLNA1_fid1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"));
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setDataOffset(EntryStreamOffsets.OFFSET_UNKNOWN);
    InputStream inputStream = zipFile.getRawInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntriesWithEmptyName_NEeM2_IfQF0_1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"));
    Iterable<ZipArchiveEntry> entries = zipFile.getEntries("");
    int count = 0;
    for (ZipArchiveEntry entry : entries) {
        count++;
    }
    assertEquals(0, count);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntriesWithNullName_UVXE3_BeDy0_1() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"));
    Iterable<ZipArchiveEntry> entries = zipFile.getEntries(null);
    assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntriesWithNullName_UVXE3_BeDy0_2() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"));
    Iterable<ZipArchiveEntry> entries = zipFile.getEntries(null);
    assertEquals(0, ((Collection<?>) entries).size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentBeforeFirstLocalFileHeader_withValidOffset_TYUO0_2_fid3() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true);
    InputStream inputStream = zipFile.getContentBeforeFirstLocalFileHeader();
    assertEquals(0, inputStream.available());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntriesWithEmptyName_NEeM2_IfQF0_1_fid3() throws IOException {
    ZipFile zipFile = new ZipFile(new File("test.zip"));
    Iterable<ZipArchiveEntry> entries = zipFile.getEntries("");
    int count = 0;
    for (ZipArchiveEntry entry : entries) {
        count++;
    }
    assertNotNull(entries);}
}