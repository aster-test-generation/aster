/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X5455_ExtendedTimestamp_Test_Passing {
    private X5455_ExtendedTimestamp extendedTimestamp;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HToD0() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertNotNull(modifyTime);
    assertEquals(0, modifyTime.getValue());
    assertEquals(0, modifyTime.getIntValue());
    assertEquals(0, modifyTime.hashCode());
    assertEquals(0, modifyTime.getBytes().length);
    assertEquals(0, modifyTime.getBytes(0).length);
    assertEquals(0, modifyTime.getValue(new byte[0]));
    assertEquals(0, modifyTime.getValue(new byte[0], 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTimeWithDifferentValues_eyQt1() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertNotNull(modifyTime);
    assertEquals(1, modifyTime.getValue());
    assertEquals(1, modifyTime.getIntValue());
    assertEquals(1, modifyTime.hashCode());
    assertEquals(1, modifyTime.getBytes().length);
    assertEquals(1, modifyTime.getBytes(0).length);
    assertEquals(1, modifyTime.getValue(new byte[0]));
    assertEquals(1, modifyTime.getValue(new byte[0], 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_jSCO0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertEquals(centralDirectoryData.length, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_2_NkGP1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertEquals(centralDirectoryData.length, 20);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_3_yuOD2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertEquals(centralDirectoryData.length, 30);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_4_EPTt3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertEquals(centralDirectoryData.length, 40);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_5_zjIo4() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertEquals(centralDirectoryData.length, 50);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_6_fmco5() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertEquals(centralDirectoryData.length, 60);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_7_OtiS6() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertEquals(centralDirectoryData.length, 70);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_8_vaDe7() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertEquals(centralDirectoryData.length, 80);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_9_ZmAB8() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertEquals(centralDirectoryData.length, 90);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_10_JYje9() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertEquals(centralDirectoryData.length, 100);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_11_UuGt10() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertEquals(centralDirectoryData.length, 110);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_12_TMAP11() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertEquals(centralDirectoryData.length, 120);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_13_wKdP12() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertEquals(centralDirectoryData.length, 130);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_BWgd0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(1000);
    timestamp.setAccessFileTime(time);
    assertEquals(1000, timestamp.getAccessTime().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTimeNull_tYAY1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = null;
    timestamp.setAccessFileTime(time);
    assertNull(timestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTimeInvalid_Rnji2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(-1);
    timestamp.setAccessFileTime(time);
    assertNull(timestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateFileTimeWithNullCreateTime_iSFA3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setCreateTime(null);
    FileTime fileTime = timestamp.getCreateFileTime();
    assertNull(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_CVoz0() {
        extendedTimestamp = new X5455_ExtendedTimestamp();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessFileTimeWithNullAccessTime_VphR2() {
        extendedTimestamp.setAccessTime(null);
        FileTime fileTime = extendedTimestamp.getAccessFileTime();
        assertNull(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_pyag0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    assertTrue(timestamp.equals(timestamp));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjects_DRUj1() {
    X5455_ExtendedTimestamp timestamp1 = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp timestamp2 = new X5455_ExtendedTimestamp();
    assertFalse(timestamp1.equals(timestamp2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_emptyData_PrkJ0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[0];
    int offset = 0;
    int length = 0;
    try {
        timestamp.parseFromLocalFileData(data, offset, length);
        fail("Expected ZipException");
    } catch (ZipException e) {
        assertEquals("X5455_ExtendedTimestamp too short, only 0 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_nullData_PRLt1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = null;
    int offset = 0;
    int length = 0;
    try {
        timestamp.parseFromLocalFileData(data, offset, length);
        fail("Expected ZipException");
    } catch (ZipException e) {
        assertEquals("X5455_ExtendedTimestamp too short, only 0 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_invalidLength_XnDn2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[1];
    int offset = 0;
    int length = -1;
    try {
        timestamp.parseFromLocalFileData(data, offset, length);
        fail("Expected ZipException");
    } catch (ZipException e) {
        assertEquals("X5455_ExtendedTimestamp too short, only -1 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_invalidOffset_JwvX3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[1];
    int offset = -1;
    int length = 1;
    try {
        timestamp.parseFromLocalFileData(data, offset, length);
        fail("Expected ZipException");
    } catch (ZipException e) {
        assertEquals("X5455_ExtendedTimestamp too short, only 0 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTimeWithNull_Ktzr1() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        timestamp.setModifyJavaTime(null);
        assertEquals(0, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTimeWithInvalidDate_nXFF2() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        Date date = new Date(0);
        timestamp.setModifyJavaTime(date);
        assertEquals(0, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTimeWithValidDate_EWwz3() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        Date date = new Date(1000000000000L);
        timestamp.setModifyJavaTime(date);
        assertEquals(1000000000000L, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTimeWithMaxDate_VvhI4() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        Date date = new Date(Long.MAX_VALUE);
        timestamp.setModifyJavaTime(date);
        assertEquals(Long.MAX_VALUE, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTimeWithMinDate_HdvT5() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        Date date = new Date(Long.MIN_VALUE);
        timestamp.setModifyJavaTime(date);
        assertEquals(Long.MIN_VALUE, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTimeWithNegativeDate_hiSh6() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        Date date = new Date(-1000000000000L);
        timestamp.setModifyJavaTime(date);
        assertEquals(-1000000000000L, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_Default_wgmZ0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    String expected = "0x5455 Zip Extra Field: Flags=0 ";
    assertEquals(expected, timestamp.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_UWUy0() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(1000000000000L);
    extendedTimestamp.setCreateFileTime(fileTime);
    assertEquals(1000000000000L, extendedTimestamp.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessJavaTime_wLAP0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date expected = new Date(1234567890);
    Date actual = timestamp.getAccessJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_EOVi0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = timestamp.getCreateTime();
    assertNotNull(createTime);
    assertEquals(0, createTime.getValue());
    assertEquals(0, createTime.getIntValue());
    assertEquals(0, createTime.hashCode());
    assertArrayEquals(new byte[0], createTime.getBytes());
    assertEquals(0, createTime.getValue(new byte[0]));
    assertEquals(0, createTime.getValue(new byte[0], 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateJavaTime_pZgo0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date expected = new Date(1234567890);
    Date actual = timestamp.getCreateJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateJavaTimeWithNull_Iwpk1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date expected = null;
    Date actual = timestamp.getCreateJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateJavaTimeWithInvalidValue_Ditr2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date expected = new Date(0);
    Date actual = timestamp.getCreateJavaTime();
    assertNotEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateJavaTimeWithNegativeValue_xuAJ4() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date expected = new Date(-1234567890);
    Date actual = timestamp.getCreateJavaTime();
    assertNotEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateJavaTimeWithZeroValue_xgSL5() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date expected = new Date(0);
    Date actual = timestamp.getCreateJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateJavaTimeWithMaxValue_LgzC6() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date expected = new Date(Long.MAX_VALUE);
    Date actual = timestamp.getCreateJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateJavaTimeWithMinValue_VTlu7() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date expected = new Date(Long.MIN_VALUE);
    Date actual = timestamp.getCreateJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_qTZz0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong accessTime = timestamp.getAccessTime();
    assertNotNull(accessTime);
    assertEquals(0, accessTime.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyJavaTime_yDIG0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date expected = new Date(1234567890);
    Date actual = timestamp.getModifyJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTime_oQMh0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(1000);
    timestamp.setModifyFileTime(time);
    assertEquals(1000, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithNull_SsuX1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyFileTime(null);
    assertEquals(0, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithInvalidTime_oQYg2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(0);
    timestamp.setModifyFileTime(time);
    assertEquals(0, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithFutureTime_FokA4() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis() + 1000);
    timestamp.setModifyFileTime(time);
    assertEquals(1000, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithPastTime_nJEw5() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis() - 1000);
    timestamp.setModifyFileTime(time);
    assertEquals(0, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithMaxTime_DXPV6() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(Long.MAX_VALUE);
    timestamp.setModifyFileTime(time);
    assertEquals(Long.MAX_VALUE, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithMinTime_KiCr7() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(Long.MIN_VALUE);
    timestamp.setModifyFileTime(time);
    assertEquals(Long.MIN_VALUE, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit0_modifyTimePresent_sKOY0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    assertTrue(timestamp.isBit0_modifyTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit2_createTimePresent_nKbF0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    boolean result = timestamp.isBit2_createTimePresent();
    assertEquals(false, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTime_nullDate_KDUj1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(null);
    assertEquals(0, timestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTime_beforeEpoch_FpeL3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date date = new Date(0);
    timestamp.setAccessJavaTime(date);
    assertEquals(0, timestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTime_afterEpoch_EeId4() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date date = new Date(1000000000);
    timestamp.setAccessJavaTime(date);
    assertEquals(1000000000, timestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HToD0_1() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertNotNull(modifyTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HToD0_2() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(0, modifyTime.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HToD0_3() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(0, modifyTime.getIntValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HToD0_4() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(0, modifyTime.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HToD0_5() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(0, modifyTime.getBytes().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HToD0_6() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(0, modifyTime.getBytes(0).length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HToD0_7() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(0, modifyTime.getValue(new byte[0]));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HToD0_8() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(0, modifyTime.getValue(new byte[0], 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTimeWithDifferentValues_eyQt1_2() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(1, modifyTime.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTimeWithDifferentValues_eyQt1_3() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(1, modifyTime.getIntValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTimeWithDifferentValues_eyQt1_4() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(1, modifyTime.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTimeWithDifferentValues_eyQt1_5() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(1, modifyTime.getBytes().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTimeWithDifferentValues_eyQt1_6() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(1, modifyTime.getBytes(0).length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTimeWithDifferentValues_eyQt1_7() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(1, modifyTime.getValue(new byte[0]));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTimeWithDifferentValues_eyQt1_8() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(1, modifyTime.getValue(new byte[0], 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_EOVi0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = timestamp.getCreateTime();
    assertNotNull(createTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_EOVi0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = timestamp.getCreateTime();
    assertEquals(0, createTime.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_EOVi0_3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = timestamp.getCreateTime();
    assertEquals(0, createTime.getIntValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_EOVi0_4() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = timestamp.getCreateTime();
    assertEquals(0, createTime.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_EOVi0_5() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = timestamp.getCreateTime();
    assertArrayEquals(new byte[0], createTime.getBytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_EOVi0_6() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = timestamp.getCreateTime();
    assertEquals(0, createTime.getValue(new byte[0]));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_EOVi0_7() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = timestamp.getCreateTime();
    assertEquals(0, createTime.getValue(new byte[0], 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_qTZz0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong accessTime = timestamp.getAccessTime();
    assertNotNull(accessTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_qTZz0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong accessTime = timestamp.getAccessTime();
    assertEquals(0, accessTime.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setUp_fUjT0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_flags_tVuG0_FsgZ0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setFlags((byte) 0x07);
    int expected = -123 * (0x07 & 0x07);
    int actual = timestamp.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_modifyTime_HHhA1_MbxK0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(new ZipLong(new Date().getTime()));
    int expected = -123 * (0x07 & 0x07);
    int actual = timestamp.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_accessTime_sVRZ2_pTHe0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date());
    int expected = -123 * (0x07 & 0x07);
    int actual = timestamp.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_createTime_OLqH3_LFnn0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setCreateTime(new ZipLong(new Date().getTime()));
    int expected = -123 * (0x07 & 0x07);
    int actual = timestamp.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlags_createTimePresent_TCxr2_lbwu0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte flags = 0b0000_0100; // CREATE_TIME_BIT
    timestamp.setFlags(flags);
    assertFalse(timestamp.isBit0_modifyTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlags_createTimePresent_TCxr2_lbwu0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte flags = 0b0000_0100; // CREATE_TIME_BIT
    timestamp.setFlags(flags);
    assertFalse(timestamp.isBit1_accessTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlags_createTimePresent_TCxr2_lbwu0_3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte flags = 0b0000_0100; // CREATE_TIME_BIT
    timestamp.setFlags(flags);
    assertTrue(timestamp.isBit2_createTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateFileTime_ZAoT0_XVLj0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = timestamp.getCreateFileTime();
    assertNotNull(fileTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateFileTime_ZAoT0_XVLj0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = timestamp.getCreateFileTime();
    assertEquals(fileTime.toMillis(), timestamp.getCreateTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateFileTimeWithInvalidCreateTime_eYND1_oJIE0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setCreateTime(new ZipLong(-1));
    FileTime fileTime = timestamp.getCreateFileTime();
    assertNull(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateFileTimeWithValidCreateTime_koCX2_RNGO0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setCreateTime(new ZipLong(1000));
    FileTime fileTime = timestamp.getCreateFileTime();
    assertNotNull(fileTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateFileTimeWithValidCreateTime_koCX2_RNGO0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setCreateTime(new ZipLong(1000));
    FileTime fileTime = timestamp.getCreateFileTime();
    assertEquals(fileTime.toMillis(), timestamp.getCreateTime().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateFileTimeWithZeroCreateTime_RWHx4_GzRC0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setCreateTime(new ZipLong(0));
    FileTime fileTime = timestamp.getCreateFileTime();
    assertNotNull(fileTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateFileTimeWithZeroCreateTime_RWHx4_GzRC0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setCreateTime(new ZipLong(0));
    FileTime fileTime = timestamp.getCreateFileTime();
    assertEquals(fileTime.toMillis(), timestamp.getCreateTime().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateFileTimeWithNegativeCreateTime_fyUU5_LALS0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setCreateTime(new ZipLong(-1000));
    FileTime fileTime = timestamp.getCreateFileTime();
    assertNull(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentFlags_xaIL2_THxu0() {
    X5455_ExtendedTimestamp timestamp1 = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp timestamp2 = new X5455_ExtendedTimestamp();
    timestamp1.setFlags((byte) 0x01);
    timestamp2.setFlags((byte) 0x02);
    assertFalse(timestamp1.equals(timestamp2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentModifyTime_dYhw3_VmHi0() {
    X5455_ExtendedTimestamp timestamp1 = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp timestamp2 = new X5455_ExtendedTimestamp();
    timestamp1.setModifyTime(new ZipLong(1000));
    timestamp2.setModifyTime(new ZipLong(2000));
    assertFalse(timestamp1.equals(timestamp2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdCoverage_KBGa1_mzHu0_1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipShort headerId = x5455_ExtendedTimestamp.getHeaderId();
    assertEquals(0, headerId.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdCoverage_KBGa1_mzHu0_2() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipShort headerId = x5455_ExtendedTimestamp.getHeaderId();
    assertEquals(0, headerId.getBytes().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdCoverage_KBGa1_mzHu0_3() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipShort headerId = x5455_ExtendedTimestamp.getHeaderId();
    assertEquals(0, headerId.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdCoverage_KBGa1_mzHu0_4() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipShort headerId = x5455_ExtendedTimestamp.getHeaderId();
    assertEquals(0, headerId.getBytes(0).length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdCoverage_KBGa1_mzHu0_5() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipShort headerId = x5455_ExtendedTimestamp.getHeaderId();
    assertEquals(0, headerId.getValue(new byte[0]));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdCoverage_KBGa1_mzHu0_6() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipShort headerId = x5455_ExtendedTimestamp.getHeaderId();
    assertEquals(0, headerId.getValue(new byte[0], 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_ModifyTimePresent_LVUI1_XTzd0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(new ZipLong(1234567890));
    String expected = "0x5455 Zip Extra Field: Flags=0 Modify:[Fri Feb 13 23:31:30 UTC 2009] ";
    assertEquals(expected, timestamp.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessJavaTimeWithDifferentValues_unvd1_Ymdx0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date expected = new Date(1234567890);
    Date actual = timestamp.getAccessJavaTime();
    timestamp.setAccessJavaTime(new Date(1234567891));
    expected = new Date(1234567891);
    actual = timestamp.getAccessJavaTime();
    timestamp.setAccessJavaTime(new Date(1234567892));
    expected = new Date(1234567892);
    actual = timestamp.getAccessJavaTime();
    assertEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit0_modifyTimePresent_False_cdzX1_tKdt0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date());
    assertFalse(timestamp.isBit0_modifyTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit0_modifyTimePresent_Null_lESc2_fOZX0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(null);
    assertNull(timestamp.isBit0_modifyTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_VZmc0_mePK0_1() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp clone = (X5455_ExtendedTimestamp) original.clone();
    assertNotNull(clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_VZmc0_mePK0_2() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp clone = (X5455_ExtendedTimestamp) original.clone();
    assertNotSame(original, clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_VZmc0_mePK0_3() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp clone = (X5455_ExtendedTimestamp) original.clone();
    assertEquals(original.getClass(), clone.getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_VZmc0_mePK0_4() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp clone = (X5455_ExtendedTimestamp) original.clone();
    assertEquals(original.getAccessJavaTime(), clone.getAccessJavaTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_VZmc0_mePK0_5() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp clone = (X5455_ExtendedTimestamp) original.clone();
    assertEquals(original.getAccessTime(), clone.getAccessTime());}
}