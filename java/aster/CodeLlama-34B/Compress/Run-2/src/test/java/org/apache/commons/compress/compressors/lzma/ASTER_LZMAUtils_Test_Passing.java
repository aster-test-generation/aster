/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMAUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_emptyString_fjSa0() {
    String fileName = "";
    assertFalse(LZMAUtils.isCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_nullString_VUhV1() {
    String fileName = null;
    assertFalse(LZMAUtils.isCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_invalidFileName_tKgY2() {
    String fileName = "file.txt";
    assertFalse(LZMAUtils.isCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_validFileName_oTER3() {
    String fileName = "file.txt.lzma";
    assertTrue(LZMAUtils.isCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_validFileNameWithPath_tKJw4() {
    String fileName = "path/to/file.txt.lzma";
    assertTrue(LZMAUtils.isCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_validFileNameWithExtension_PTua5() {
    String fileName = "file.txt.lzma.txt";
    assertTrue(LZMAUtils.isCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_validFileNameWithMultipleExtensions_rDjA6() {
    String fileName = "file.txt.lzma.txt.lzma";
    assertTrue(LZMAUtils.isCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_invalidFileNameWithMultipleExtensions_BcFD7() {
    String fileName = "file.txt.lzma.txt.gz";
    assertFalse(LZMAUtils.isCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_invalidFileNameWithInvalidExtension_mMKq8() {
    String fileName = "file.txt.lzma.txt.invalid";
    assertFalse(LZMAUtils.isCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_invalidFileNameWithEmptyExtension_zNIx9() {
    String fileName = "file.txt.lzma.txt.";
    assertFalse(LZMAUtils.isCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_emptySignature_qfFd0() {
    byte[] signature = new byte[0];
    int length = 0;
    assertFalse(LZMAUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_Tqiw1() {
    byte[] signature = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09 };
    int length = 10;
    assertFalse(LZMAUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_validSignature_bkiY2() {
    byte[] signature = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09 };
    int length = 10;
    assertTrue(LZMAUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidLength_mQUp3() {
    byte[] signature = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09 };
    int length = 9;
    assertFalse(LZMAUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilename_qYwA0() {
        String fileName = "file.txt.lzma";
        String expected = "file.txt";
        String actual = LZMAUtils.getUncompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilenameWithoutExtension_CsPF1() {
        String fileName = "file";
        String expected = "file";
        String actual = LZMAUtils.getUncompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilenameWithMultipleExtensions_VAZb2() {
        String fileName = "file.txt.lzma.gz";
        String expected = "file.txt.lzma";
        String actual = LZMAUtils.getUncompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilenameWithInvalidExtension_aLJC3() {
        String fileName = "file.txt.lzma.invalid";
        String expected = "file.txt.lzma";
        String actual = LZMAUtils.getUncompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilenameWithNull_BzOe4() {
        String fileName = null;
        String expected = null;
        String actual = LZMAUtils.getUncompressedFilename(fileName);
        assertNull(actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_null_VRqR0() {
    assertFalse(LZMAUtils.isCompressedFilename(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_empty_Igeb1() {
    assertFalse(LZMAUtils.isCompressedFilename(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_invalid_OtHl2() {
    assertFalse(LZMAUtils.isCompressedFilename("file.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_valid_hmiS3() {
    assertTrue(LZMAUtils.isCompressedFilename("file.txt.lzma"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_valid_uppercase_VHgM4() {
    assertTrue(LZMAUtils.isCompressedFilename("FILE.TXT.LZMA"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_valid_mixedcase_Ryqo6() {
    assertTrue(LZMAUtils.isCompressedFilename("FiLe.TxT.LzMa"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_valid_with_path_lhGE7() {
    assertTrue(LZMAUtils.isCompressedFilename("path/to/file.txt.lzma"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_valid_with_extension_FZqY8() {
    assertTrue(LZMAUtils.isCompressedFilename("file.txt.lzma.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_valid_with_multiple_extensions_GfyQ9() {
    assertTrue(LZMAUtils.isCompressedFilename("file.txt.lzma.txt.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_invalid_with_multiple_extensions_TZSp10() {
    assertFalse(LZMAUtils.isCompressedFilename("file.txt.gz.lzma"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_invalid_with_invalid_extension_PTLd11() {
    assertFalse(LZMAUtils.isCompressedFilename("file.txt.lzma.txt.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_invalid_with_invalid_extension_and_path_sMDF12() {
    assertFalse(LZMAUtils.isCompressedFilename("path/to/file.txt.lzma.txt.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_invalid_with_invalid_extension_and_multiple_paths_AJNj13() {
    assertFalse(LZMAUtils.isCompressedFilename("path/to/file.txt.lzma.txt.zip/path/to/file.txt.lzma.txt.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilename_Ujbb0() {
    String fileName = "file.txt";
    String compressedFileName = LZMAUtils.getCompressedFilename(fileName);
    assertEquals("file.txt.lzma", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithExtension_JlKx1() {
    String fileName = "file.txt.gz";
    String compressedFileName = LZMAUtils.getCompressedFilename(fileName);
    assertEquals("file.txt.gz.lzma", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithMultipleExtensions_IHRS2() {
    String fileName = "file.txt.gz.bz2";
    String compressedFileName = LZMAUtils.getCompressedFilename(fileName);
    assertEquals("file.txt.gz.bz2.lzma", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithInvalidFileName_ITPJ3() {
    String fileName = "file.txt.invalid";
    String compressedFileName = LZMAUtils.getCompressedFilename(fileName);
    assertEquals("file.txt.invalid.lzma", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithEmptyFileName_vYol4() {
    String fileName = "";
    String compressedFileName = LZMAUtils.getCompressedFilename(fileName);
    assertEquals("", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithNullFileName_SUlb5() {
    String fileName = null;
    String compressedFileName = LZMAUtils.getCompressedFilename(fileName);
    assertEquals(null, compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_null_nKCy0() {
    String fileName = null;
    String expected = null;
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_empty_dNMT1() {
    String fileName = "";
    String expected = "";
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_valid_XCAR2() {
    String fileName = "file.txt.lzma";
    String expected = "file.txt";
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_invalid_LzUl3() {
    String fileName = "file.txt";
    String expected = null;
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_nullExtension_Ezgn4() {
    String fileName = "file.txt.";
    String expected = "file.txt";
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_emptyExtension_xasm5() {
    String fileName = "file.txt..";
    String expected = "file.txt";
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_invalidExtension_oIpD6() {
    String fileName = "file.txt.invalid";
    String expected = null;
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_multipleExtensions_bwZN7() {
    String fileName = "file.txt.lzma.gz";
    String expected = "file.txt";
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_multipleDots_HOMQ8() {
    String fileName = "file..txt.lzma";
    String expected = "file.txt";
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_leadingDot_NNNZ9() {
    String fileName = ".file.txt.lzma";
    String expected = "file.txt";
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_trailingDot_WUNT10() {
    String fileName = "file.txt.lzma.";
    String expected = "file.txt";
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_leadingAndTrailingDot_mYUL11() {
    String fileName = ".file.txt.lzma.";
    String expected = "file.txt";
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_leadingAndTrailingDots_fBwu12() {
    String fileName = "..file.txt.lzma..";
    String expected = "file.txt";
    String actual = LZMAUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_eeAN0() {
    String fileName = "file.txt";
    String compressedFileName = LZMAUtils.getCompressedFileName(fileName);
    assertEquals("file.txt.lzma", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileNameWithPath_HinZ1() {
    String fileName = "path/to/file.txt";
    String compressedFileName = LZMAUtils.getCompressedFileName(fileName);
    assertEquals("path/to/file.txt.lzma", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileNameWithoutExtension_GJqb2() {
    String fileName = "file";
    String compressedFileName = LZMAUtils.getCompressedFileName(fileName);
    assertEquals("file.lzma", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileNameWithMultipleExtensions_xcct3() {
    String fileName = "file.txt.gz";
    String compressedFileName = LZMAUtils.getCompressedFileName(fileName);
    assertEquals("file.txt.gz.lzma", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileNameWithInvalidFileName_dnKb4() {
    String fileName = "";
    String compressedFileName = LZMAUtils.getCompressedFileName(fileName);
    assertEquals("", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileNameWithNullFileName_vLjV5() {
    String fileName = null;
    String compressedFileName = LZMAUtils.getCompressedFileName(fileName);
    assertEquals(null, compressedFileName);
}
}