/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.Collections;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPMember_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_aQix0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    assertTrue(member.equals(member));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_ZIXB1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    assertFalse(member.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_VOzl2() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    assertFalse(member.equals("string"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_yvqF3() {
    CPUTF8 name1 = new CPUTF8("name1");
    CPUTF8 name2 = new CPUTF8("name2");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member1 = new CPMember(name1, descriptor, flags, attributes);
    CPMember member2 = new CPMember(name2, descriptor, flags, attributes);
    assertFalse(member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentDescriptor_XyUd4() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor1 = new CPUTF8("descriptor1");
    CPUTF8 descriptor2 = new CPUTF8("descriptor2");
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member1 = new CPMember(name, descriptor1, flags, attributes);
    CPMember member2 = new CPMember(name, descriptor2, flags, attributes);
    assertFalse(member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentFlags_alkr5() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags1 = 0;
    long flags2 = 1;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member1 = new CPMember(name, descriptor, flags1, attributes);
    CPMember member2 = new CPMember(name, descriptor, flags2, attributes);
    assertFalse(member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString1_rbtL0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    assertEquals(expected, member.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString2_sXnw1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 1;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    assertEquals(expected, member.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString3_kZev2() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 2;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    assertEquals(expected, member.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString4_unXK3() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 3;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    assertEquals(expected, member.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString5_TZqN4() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 4;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    assertEquals(expected, member.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString6_UkDh5() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 5;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    assertEquals(expected, member.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString7_QHIa6() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 6;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    assertEquals(expected, member.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString8_MpfA7() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 7;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    assertEquals(expected, member.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString9_kdjM8() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 8;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    assertEquals(expected, member.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString10_fWln9() {
    CPUTF8 name = new CPUTF8("name");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_emptyAttributes_iQxZ0_1() {
    CPUTF8 name = new CPUTF8("TestClass");
    CPUTF8 descriptor = new CPUTF8("Ljava/lang/Object;");
    CPMember member = new CPMember(name, descriptor, 0, Collections.emptyList());
    ClassFileEntry[] entries = member.getNestedClassFileEntries();
    assertEquals(2, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_emptyAttributes_iQxZ0_2() {
    CPUTF8 name = new CPUTF8("TestClass");
    CPUTF8 descriptor = new CPUTF8("Ljava/lang/Object;");
    CPMember member = new CPMember(name, descriptor, 0, Collections.emptyList());
    ClassFileEntry[] entries = member.getNestedClassFileEntries();
    assertEquals(name, entries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_emptyAttributes_iQxZ0_3() {
    CPUTF8 name = new CPUTF8("TestClass");
    CPUTF8 descriptor = new CPUTF8("Ljava/lang/Object;");
    CPMember member = new CPMember(name, descriptor, 0, Collections.emptyList());
    ClassFileEntry[] entries = member.getNestedClassFileEntries();
    assertEquals(descriptor, entries[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_TtWN0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, 0, attributes);
    int expected = 1;
    expected = expected * 31 + attributes.hashCode();
    expected = expected * 31 + descriptor.hashCode();
    expected = expected * 31 + 0;
    expected = expected * 31 + name.hashCode();
    int actual = member.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithDifferentFlags_aXyR3() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, 1, attributes);
    int expected = 1;
    expected = expected * 31 + attributes.hashCode();
    expected = expected * 31 + descriptor.hashCode();
    expected = expected * 31 + 1;
    expected = expected * 31 + name.hashCode();
    int actual = member.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_ZIXB1_vQIQ0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    assertFalse(member.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_VOzl2_AsjE0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    assertFalse(member.equals("string"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_yvqF3_IXdg0() {
    CPUTF8 name1 = new CPUTF8("name1", 0);
    CPUTF8 name2 = new CPUTF8("name2", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member1 = new CPMember(name1, descriptor, flags, attributes);
    CPMember member2 = new CPMember(name2, descriptor, flags, attributes);
    assertFalse(member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_emptyAttributes_iQxZ0() {
    CPUTF8 name = new CPUTF8("TestClass");
    CPUTF8 descriptor = new CPUTF8("Ljava/lang/Object;");
    CPMember member = new CPMember(name, descriptor, 0, Collections.emptyList());
    ClassFileEntry[] entries = member.getNestedClassFileEntries();
    assertEquals(2, entries.length);
    assertEquals(name, entries[0]);
    assertEquals(descriptor, entries[1]);
}
}