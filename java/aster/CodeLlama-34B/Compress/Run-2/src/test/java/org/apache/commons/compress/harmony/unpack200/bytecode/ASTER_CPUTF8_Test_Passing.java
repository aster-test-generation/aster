/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPUTF8_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGlobalIndexWithNegativeIndex_KnoD1() {
    CPUTF8 cputf8 = new CPUTF8("utf8", 0);
    cputf8.setGlobalIndex(-1);
    assertEquals(-1, cputf8.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGlobalIndexWithMaxValue_WRHA2() {
    CPUTF8 cputf8 = new CPUTF8("utf8", 0);
    cputf8.setGlobalIndex(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, cputf8.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnderlyingString_EmptyString_jkAa0() {
    CPUTF8 cputf8 = new CPUTF8("");
    String actual = cputf8.underlyingString();
    assertEquals("", actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnderlyingString_NonEmptyString_axgW1() {
    CPUTF8 cputf8 = new CPUTF8("hello");
    String actual = cputf8.underlyingString();
    assertEquals("hello", actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnderlyingString_NonEmptyStringWithGlobalIndex_oVOf2() {
    CPUTF8 cputf8 = new CPUTF8("hello", 1);
    String actual = cputf8.underlyingString();
    assertEquals("hello", actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_wvVV0_RJLn0() {
    CPUTF8 obj = new CPUTF8("test", 0);
    assertTrue(obj.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectSameValue_xfEk1_vWKX0() {
    CPUTF8 obj1 = new CPUTF8("test", 0);
    CPUTF8 obj2 = new CPUTF8("test", 0);
    assertTrue(obj1.equals(obj2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectDifferentValue_Jydg2_GrlR0() {
    CPUTF8 obj1 = new CPUTF8("test1", 0);
    CPUTF8 obj2 = new CPUTF8("test2", 0);
    assertFalse(obj1.equals(obj2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_hIys3_aNiP0() {
    CPUTF8 obj = new CPUTF8("test", 0);
    assertFalse(obj.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_jVAl4_GHsu0() {
    CPUTF8 obj = new CPUTF8("test", 0);
    String str = "test";
    assertFalse(obj.equals(str));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString1_Rfqg0_OUWz0() {
    CPUTF8 cputf8 = new CPUTF8("hello", 0);
    String expected = "UTF-8:hello";
    String actual = cputf8.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString2_raBd1_HeiQ0() {
    CPUTF8 cputf8 = new CPUTF8("hello", 1);
    String expected = "UTF-8:hello";
    String actual = cputf8.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGlobalIndex_YEqv0() {
    CPUTF8 cputf8 = new CPUTF8("utf8", 0);
    cputf8.setGlobalIndex(1);
    assertEquals(1, cputf8.getGlobalIndex());
}
}