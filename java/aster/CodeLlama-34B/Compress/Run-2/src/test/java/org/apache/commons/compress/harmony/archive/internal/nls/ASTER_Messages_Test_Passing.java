/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.archive.internal.nls;
import java.util.Locale;
import java.util.ResourceBundle;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Messages_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNullBundle_pjqJ0() {
        String msg = "Hello World!";
        String result = Messages.getString(msg);
        assertEquals(msg, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNullMessage_IkWJ3() {
        String msg = null;
        String result = Messages.getString(msg);
        assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithEmptyMessage_RNpi4() {
        String msg = "";
        String result = Messages.getString(msg);
        assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatWithNoArgs_RZsC0() {
        String format = "Hello, world!";
        String[] args = new String[0];
        String expected = "Hello, world!";
        String actual = Messages.format(format, args);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatWithOneArg_WCDN1() {
        String format = "Hello, {0}!";
        String[] args = new String[] { "John" };
        String expected = "Hello, John!";
        String actual = Messages.format(format, args);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatWithTwoArgs_HaFk2() {
        String format = "Hello, {0} {1}!";
        String[] args = new String[] { "John", "Doe" };
        String expected = "Hello, John Doe!";
        String actual = Messages.format(format, args);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatWithThreeArgs_vHtL3() {
        String format = "Hello, {0} {1} {2}!";
        String[] args = new String[] { "John", "Doe", "Jr." };
        String expected = "Hello, John Doe Jr.!";
        String actual = Messages.format(format, args);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatWithFourArgs_JkyA4() {
        String format = "Hello, {0} {1} {2} {3}!";
        String[] args = new String[] { "John", "Doe", "Jr.", "PhD" };
        String expected = "Hello, John Doe Jr. PhD!";
        String actual = Messages.format(format, args);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatWithFiveArgs_izTa5() {
        String format = "Hello, {0} {1} {2} {3} {4}!";
        String[] args = new String[] { "John", "Doe", "Jr.", "PhD", "MBA" };
        String expected = "Hello, John Doe Jr. PhD MBA!";
        String actual = Messages.format(format, args);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatWithSixArgs_OxHT6() {
        String format = "Hello, {0} {1} {2} {3} {4} {5}!";
        String[] args = new String[] { "John", "Doe", "Jr.", "PhD", "MBA", "CFA" };
        String expected = "Hello, John Doe Jr. PhD MBA CFA!";
        String actual = Messages.format(format, args);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatWithSevenArgs_tXel7() {
        String format = "Hello, {0} {1} {2} {3} {4} {5} {6}!";
        String[] args = new String[] { "John", "Doe", "Jr.", "PhD", "MBA", "CFA", "CPA" };
        String expected = "Hello, John Doe Jr. PhD MBA CFA CPA!";
        String actual = Messages.format(format, args);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatWithEightArgs_OCWh8() {
        String format = "Hello, {0} {1} {2} {3} {4} {5} {6} {7}!";
        String[] args = new String[] { "John", "Doe", "Jr.", "PhD", "MBA", "CFA", "CPA", "CISA" };
        String expected = "Hello, John Doe Jr. PhD MBA CFA CPA CISA!";
        String actual = Messages.format(format, args);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithIntArg_ulBp0() {
        String msg = "Hello, {0}!";
        int arg = 10;
        String expected = "Hello, 10!";
        String actual = Messages.getString(msg, arg);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringArg_Osus1() {
        String msg = "Hello, {0}!";
        String arg = "world";
        String expected = "Hello, world!";
        String actual = Messages.getString(msg, arg);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithMultipleArgs_xEtw2() {
        String msg = "Hello, {0} and {1}!";
        String arg1 = "John";
        String arg2 = "Jane";
        String expected = "Hello, John and Jane!";
        String actual = Messages.getString(msg, arg1, arg2);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNoArgs_aPti3() {
        String msg = "Hello, world!";
        String expected = "Hello, world!";
        String actual = Messages.getString(msg);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNullArg_uzcB4() {
        String msg = "Hello, {0}!";
        String arg = null;
        String expected = "Hello, null!";
        String actual = Messages.getString(msg, arg);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithEmptyArg_HNcl5() {
        String msg = "Hello, {0}!";
        String arg = "";
        String expected = "Hello, !";
        String actual = Messages.getString(msg, arg);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithInvalidArg_QIUL6() {
        String msg = "Hello, {0}!";
        String arg = "invalid";
        String expected = "Hello, invalid!";
        String actual = Messages.getString(msg, arg);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNullMsg_gqNR7() {
        String msg = null;
        String arg = "world";
        String expected = null;
        String actual = Messages.getString(msg, arg);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithEmptyMsg_nqvm8() {
        String msg = "";
        String arg = "world";
        String expected = "";
        String actual = Messages.getString(msg, arg);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_String_Char_cSJQ0() {
    String msg = "Hello, {0}!";
    char arg = 'A';
    String expected = "Hello, A!";
    String actual = Messages.getString(msg, arg);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_String_Char_Null_IruD1() {
    String msg = "Hello, {0}!";
    char arg = '\0';
    String expected = "Hello, !";
    String actual = Messages.getString(msg, arg);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_String_Char_Empty_NDUQ2() {
    String msg = "Hello, {0}!";
    char arg = ' ';
    String expected = "Hello, !";
    String actual = Messages.getString(msg, arg);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_String_Char_NonAscii_NonPrintable_XFER6() {
    String msg = "Hello, {0}!";
    char arg = '\u0000';
    String expected = "Hello, !";
    String actual = Messages.getString(msg, arg);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_String_Char_NonAscii_NonPrintable_NonAscii_ttau9() {
    String msg = "Hello, {0}!";
    char arg = '\u0001';
    String expected = "Hello, !";
    String actual = Messages.getString(msg, arg);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNullBundle_TQua0() {
        String msg = "Hello, World!";
        Object[] args = new Object[] { "John", "Doe" };
        String expected = "Hello, John Doe!";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNullArgs_Plil3() {
        String msg = "Hello, World!";
        String expected = "Hello, World!";
        String actual = Messages.getString(msg, null);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithEmptyArgs_wWAv4() {
        String msg = "Hello, World!";
        String expected = "Hello, World!";
        String actual = Messages.getString(msg, new Object[0]);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNullMsg_UHJa5() {
        String expected = null;
        String actual = Messages.getString(null, null);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithEmptyMsg_zCgB6() {
        String expected = "";
        String actual = Messages.getString("", null);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNullBundleAndNullArgs_GyPc7() {
        String msg = "Hello, World!";
        String expected = "Hello, World!";
        String actual = Messages.getString(msg, null, null);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNullBundleAndEmptyArgs_QCHq8() {
        String msg = "Hello, World!";
        String expected = "Hello, World!";
        String actual = Messages.getString(msg, new Object[0], null);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNullBundleAndNullMsg_wKZv9() {
        String expected = null;
        String actual = Messages.getString(null, null, null);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNullBundleAndEmptyMsg_wXEY10() {
        String expected = "";
        String actual = Messages.getString("", null, null);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_ValidLocaleAndResource_fiLt0() {
    Locale locale = new Locale("en", "US");
    String resource = "messages";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNotNull(bundle);
    assertEquals(locale, bundle.getLocale());
    assertEquals(resource, bundle.getBaseBundleName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_NullLocale_HAvA1() {
    Locale locale = null;
    String resource = "messages";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNull(bundle);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_NullResource_ItLV2() {
    Locale locale = new Locale("en", "US");
    String resource = null;
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNull(bundle);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_InvalidLocale_fEYB3() {
    Locale locale = new Locale("invalid", "US");
    String resource = "messages";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNull(bundle);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_InvalidResource_excb4() {
    Locale locale = new Locale("en", "US");
    String resource = "invalid";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNull(bundle);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_ValidLocaleAndResource_fiLt0_1() {
    Locale locale = new Locale("en", "US");
    String resource = "messages";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNotNull(bundle);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_ValidLocaleAndResource_fiLt0_2() {
    Locale locale = new Locale("en", "US");
    String resource = "messages";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertEquals(locale, bundle.getLocale());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_ValidLocaleAndResource_fiLt0_3() {
    Locale locale = new Locale("en", "US");
    String resource = "messages";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertEquals(resource, bundle.getBaseBundleName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setUp_ciln0_Gpee0() {
    Messages messages = new Messages();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_ValidLocaleAndResourceWithClassLoader_cnSI5_adgR0_1() {
    Locale locale = new Locale("en", "US");
    String resource = "messages";
    ClassLoader loader = getClass().getClassLoader();
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNotNull(bundle);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_ValidLocaleAndResourceWithClassLoader_cnSI5_adgR0_2() {
    Locale locale = new Locale("en", "US");
    String resource = "messages";
    ClassLoader loader = getClass().getClassLoader();
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertEquals(locale, bundle.getLocale());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_ValidLocaleAndResourceWithClassLoader_cnSI5_adgR0_3() {
    Locale locale = new Locale("en", "US");
    String resource = "messages";
    ClassLoader loader = getClass().getClassLoader();
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertEquals(resource, bundle.getBaseBundleName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_NullLocaleWithClassLoader_ykOe6_MYVH0() {
    Locale locale = null;
    String resource = "messages";
    ClassLoader loader = getClass().getClassLoader();
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNull(bundle);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_NullResourceWithClassLoader_edvJ7_tOfe0() {
    Locale locale = new Locale("en", "US");
    String resource = null;
    ClassLoader loader = getClass().getClassLoader();
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNull(bundle);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocale_InvalidLocaleWithClassLoader_WMed8_gdje0() {
    Locale locale = new Locale("invalid", "US");
    String resource = "messages";
    ClassLoader loader = getClass().getClassLoader();
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNull(bundle);
}
}