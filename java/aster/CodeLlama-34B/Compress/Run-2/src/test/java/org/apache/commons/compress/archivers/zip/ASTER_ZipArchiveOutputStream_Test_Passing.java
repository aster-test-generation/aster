/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Path;
import java.util.LinkedList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveOutputStream_Test_Passing {
    private long cdLength;
    private final List<ZipArchiveEntry> entries = new LinkedList<>();
    private long cdDiskNumberStart;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_EMVg0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.finish();
    assertTrue(zipArchiveOutputStream.finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithEntry_XzYX1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    zipArchiveOutputStream.finish();
    assertTrue(zipArchiveOutputStream.finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithSplitZip_xVfv2() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024 * 1024);
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    zipArchiveOutputStream.finish();
    assertTrue(zipArchiveOutputStream.finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithZip64Mode_BwXJ3() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.setUseZip64(Zip64Mode.Always);
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    zipArchiveOutputStream.finish();
    assertTrue(zipArchiveOutputStream.finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithComment_XkEy4() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.setComment("This is a test comment");
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    zipArchiveOutputStream.finish();
    assertTrue(zipArchiveOutputStream.finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithZip64_pufF4() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipOutputStream.setUseZip64(Zip64Mode.Always);
    zipOutputStream.finish();
    assertTrue(zipOutputStream.finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_nullData_qfJW3() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    try {
        zos.writeOut(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_invalidOffset_qvLh4() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[10];
    try {
        zos.writeOut(data, -1, 10);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_invalidLength_GPmc5() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[10];
    try {
        zos.writeOut(data, 0, -1);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_invalidOffsetAndLength_DBMx6() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[10];
    try {
        zos.writeOut(data, -1, -1);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_invalidData_itfb7() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[10];
    try {
        zos.writeOut(data, 0, 11);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_invalidDataAndOffset_YGmY8() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[10];
    try {
        zos.writeOut(data, -1, 11);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWritten_SeekableByteChannel_SpmW0() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    ZipArchiveOutputStream outputStream = new ZipArchiveOutputStream(channel);
    long bytesWritten = outputStream.getBytesWritten();
    assertEquals(0, bytesWritten);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWritten_File_oIWq1() throws IOException {
    File file = mock(File.class);
    ZipArchiveOutputStream outputStream = new ZipArchiveOutputStream(file);
    long bytesWritten = outputStream.getBytesWritten();
    assertEquals(0, bytesWritten);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWritten_Path_ACeV2() throws IOException {
    Path path = mock(Path.class);
    ZipArchiveOutputStream outputStream = new ZipArchiveOutputStream(path);
    long bytesWritten = outputStream.getBytesWritten();
    assertEquals(0, bytesWritten);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWritten_OutputStream_ULun3() throws IOException {
    OutputStream out = mock(OutputStream.class);
    ZipArchiveOutputStream outputStream = new ZipArchiveOutputStream(out);
    long bytesWritten = outputStream.getBytesWritten();
    assertEquals(0, bytesWritten);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWritten_SeekableByteChannel_WithData_MeBF4() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    when(channel.write(any(ByteBuffer.class))).thenReturn(10);
    ZipArchiveOutputStream outputStream = new ZipArchiveOutputStream(channel);
    outputStream.write(new byte[10]);
    long bytesWritten = outputStream.getBytesWritten();
    assertEquals(10, bytesWritten);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteAfterClose_OQNK4() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.close();
    byte[] data = new byte[1024];
    zos.write(data, 0, data.length);
    assertThrows(IOException.class, () -> zos.write(data, 0, data.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithError_MStZ5() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[1024];
    zos.write(data, 0, data.length);
    assertThrows(IOException.class, () -> zos.write(data, 0, data.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntryWithInvalidInputFileAndNullEntryName_brCM5() throws IOException {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreambleWithInvalidOffset_LiPC2() throws IOException {
    byte[] preamble = new byte[] { 0x50, 0x4B, 0x03, 0x04 };
    ZipArchiveOutputStream out = new ZipArchiveOutputStream(new File("test.zip"));
    try {
        out.writePreamble(preamble, -1, 2);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreambleWithInvalidLength_CSPh3() throws IOException {
    byte[] preamble = new byte[] { 0x50, 0x4B, 0x03, 0x04 };
    ZipArchiveOutputStream out = new ZipArchiveOutputStream(new File("test.zip"));
    try {
        out.writePreamble(preamble, 1, -1);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreambleWithNullPreamble_GVBE4() throws IOException {
    ZipArchiveOutputStream out = new ZipArchiveOutputStream(new File("test.zip"));
    try {
        out.writePreamble(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralDirectoryEnd_1_dhiq0() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipOutputStream.writeCentralDirectoryEnd();
    assertEquals(0, zipOutputStream.getCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralDirectoryEnd_2_gyrM1() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipOutputStream.writeCentralDirectoryEnd();
    assertEquals(0, zipOutputStream.getCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreamble_mLnX0() throws IOException {
    ZipArchiveOutputStream out = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] preamble = new byte[10];
    out.writePreamble(preamble, 0, 10);
    assertEquals(10, out.getCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreambleWithNegativeOffset_gaNE2() throws IOException {
    ZipArchiveOutputStream out = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] preamble = new byte[10];
    out.writePreamble(preamble, -5, 10);
    assertEquals(10, out.getCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreambleWithLengthGreaterThanPreambleLength_ZDWX3() throws IOException {
    ZipArchiveOutputStream out = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] preamble = new byte[10];
    out.writePreamble(preamble, 0, 15);
    assertEquals(10, out.getCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreambleWithLengthLessThanPreambleLength_kYKx4() throws IOException {
    ZipArchiveOutputStream out = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] preamble = new byte[10];
    out.writePreamble(preamble, 0, 5);
    assertEquals(5, out.getCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreambleWithNullPreamble_AcHw6() throws IOException {
    ZipArchiveOutputStream out = new ZipArchiveOutputStream(new File("test.zip"));
    out.writePreamble(null, 0, 10);
    assertEquals(0, out.getCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreambleWithNonMultipleOfTenPreamble_FgVS7() throws IOException {
    ZipArchiveOutputStream out = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] preamble = new byte[11];
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSeekable_RandomAccessOutputStream_pFSj0_eFHY0() {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    assertTrue(zos.isSeekable());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithComment_tgqp3_JwYR1() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipOutputStream.setComment("This is a comment");
    zipOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_BaFY0_Knaj1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_smallData_Wsyt1_bGpF0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[10];
    zos.writeOut(data);
    assertEquals(10, zos.getBytesWritten());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithOffset_PSAF1_cnhT0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[1024];
    zos.write(data, 100, 100);
    zos.close();
    assertEquals(100, zos.getCount());
}
}