/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CompressorStreamFactory_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZstandard_AILU0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    String zstandard = factory.getZstandard();
    assertEquals("zstandard", zstandard);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZstandardWithDecompressUntilEOF_FBUo1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String zstandard = factory.getZstandard();
    assertEquals("zstandard", zstandard);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZstandardWithMemoryLimit_iobo2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    String zstandard = factory.getZstandard();
    assertEquals("zstandard", zstandard);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZstandardWithDecompressUntilEOFAndMemoryLimit_rPXw3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String zstandard = factory.getZstandard();
    assertEquals("zstandard", zstandard);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZstandardWithInvalidMemoryLimit_deta4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, -1);
    String zstandard = factory.getZstandard();
    assertEquals("zstandard", zstandard);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZstandardWithInvalidDecompressUntilEOFAndMemoryLimit_edeB5() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, -1);
    String zstandard = factory.getZstandard();
    assertEquals("zstandard", zstandard);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBzip2_Ruxl0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String bzip2 = factory.getBzip2();
    assertEquals("bzip2", bzip2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBzip2WithMemoryLimit_ezCN1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String bzip2 = factory.getBzip2();
    assertEquals("bzip2", bzip2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBzip2WithoutDecompressUntilEOF_wCJl2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    String bzip2 = factory.getBzip2();
    assertEquals("bzip2", bzip2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_decompressUntilEOF_ndrs0_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertEquals(12, compressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_decompressUntilEOF_ndrs0_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("GZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_decompressUntilEOF_ndrs0_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("BROTLI"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_decompressUntilEOF_ndrs0_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("BZIP2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_decompressUntilEOF_ndrs0_5() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("XZ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_decompressUntilEOF_ndrs0_6() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZMA"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_decompressUntilEOF_ndrs0_7() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("PACK200"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_decompressUntilEOF_ndrs0_8() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_decompressUntilEOF_ndrs0_9() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_RAW"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_decompressUntilEOF_ndrs0_10() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_decompressUntilEOF_ndrs0_11() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_decompressUntilEOF_ndrs0_12() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_BLOCK"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_decompressUntilEOF_ndrs0_13() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_decompressUntilEOF_ndrs0_14() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("ZSTANDARD"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_decompressUntilEOF_ndrs0_15() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE64"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_memoryLimitInKb_zvqX1_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertEquals(12, compressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_memoryLimitInKb_zvqX1_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("GZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_memoryLimitInKb_zvqX1_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("BROTLI"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_memoryLimitInKb_zvqX1_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("BZIP2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_memoryLimitInKb_zvqX1_5() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("XZ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_memoryLimitInKb_zvqX1_6() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZMA"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_memoryLimitInKb_zvqX1_7() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("PACK200"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_memoryLimitInKb_zvqX1_8() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_memoryLimitInKb_zvqX1_9() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_RAW"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_memoryLimitInKb_zvqX1_10() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_memoryLimitInKb_zvqX1_11() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_memoryLimitInKb_zvqX1_12() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_BLOCK"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_memoryLimitInKb_zvqX1_13() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_memoryLimitInKb_zvqX1_14() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("ZSTANDARD"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_memoryLimitInKb_zvqX1_15() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE64"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_noParameters_lFyG2_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertEquals(12, compressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_noParameters_lFyG2_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("GZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_noParameters_lFyG2_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("BROTLI"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_noParameters_lFyG2_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("BZIP2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_noParameters_lFyG2_5() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("XZ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_noParameters_lFyG2_6() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZMA"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_noParameters_lFyG2_7() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("PACK200"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_noParameters_lFyG2_8() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_noParameters_lFyG2_9() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_RAW"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_noParameters_lFyG2_10() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_noParameters_lFyG2_11() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_noParameters_lFyG2_12() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_BLOCK"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_noParameters_lFyG2_13() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_noParameters_lFyG2_14() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("ZSTANDARD"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_noParameters_lFyG2_15() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE64"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_IIfw0_1() {
CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
SortedMap<String, CompressorStreamProvider> actual = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
assertNotNull(actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_IIfw0_2() {
CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
SortedMap<String, CompressorStreamProvider> actual = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
assertEquals(1, actual.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOFAndMemoryLimit_AuQw1_1() {
CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
SortedMap<String, CompressorStreamProvider> actual = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
assertNotNull(actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOFAndMemoryLimit_AuQw1_2() {
CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
SortedMap<String, CompressorStreamProvider> actual = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
assertEquals(1, actual.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOFAndMemoryLimitAndArchiveStreamProvider_gYhP2_2() {
CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
SortedMap<String, CompressorStreamProvider> actual = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
assertEquals(2, actual.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4Framed_EIkY0() {
    String expected = "LZ4_FRAMED";
    String actual = CompressorStreamFactory.getLZ4Framed();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzipWithDefaultConstructor_NIVb0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    String gzip = factory.getGzip();
    assertEquals("gzip", gzip);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzipWithDecompressUntilEOFConstructor_XNee1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String gzip = factory.getGzip();
    assertEquals("gzip", gzip);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzipWithDecompressUntilEOFAndMemoryLimitInKbConstructor_vcpv2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String gzip = factory.getGzip();
    assertEquals("gzip", gzip);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_DefaultConstructor_GEcF0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    assertFalse(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_DecompressUntilEOFConstructor_Osbh1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    assertTrue(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_DecompressUntilEOFAndMemoryLimitConstructor_SozV2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    assertTrue(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_DecompressUntilEOFAndNegativeMemoryLimitConstructor_EEJs4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, -1);
    assertTrue(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_InvalidConstructor_ejIC7() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, -1024);
    assertFalse(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzma_muXY0() {
    String lzma = CompressorStreamFactory.getLzma();
    assertEquals("LZMA", lzma);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzmaWithDecompressUntilEOF_nRci1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String lzma = factory.getLzma();
    assertEquals("LZMA", lzma);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzmaWithDecompressUntilEOFAndMemoryLimit_YVxB2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String lzma = factory.getLzma();
    assertEquals("LZMA", lzma);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzmaWithMemoryLimit_vlof3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    String lzma = factory.getLzma();
    assertEquals("LZMA", lzma);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingleton_Clmr0() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    assertNotNull(factory);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders_FQQq1_1() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders_FQQq1_2() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
    assertFalse(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_bZhE2_1() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_bZhE2_2() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertFalse(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_BshT3_1() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    Set<String> names = factory.getInputStreamCompressorNames();
    assertNotNull(names);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_BshT3_2() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    Set<String> names = factory.getInputStreamCompressorNames();
    assertFalse(names.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_SnxX4_1() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    Set<String> names = factory.getOutputStreamCompressorNames();
    assertNotNull(names);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_SnxX4_2() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    Set<String> names = factory.getOutputStreamCompressorNames();
    assertFalse(names.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF_aLoo5() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    Boolean decompressUntilEOF = factory.getDecompressUntilEOF();
    assertNotNull(decompressUntilEOF);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyRaw_wyQj0() {
    String expected = "snappy";
    String actual = CompressorStreamFactory.getSnappyRaw();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_RikP0_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertEquals(9, compressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_RikP0_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("GZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_RikP0_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("BZIP2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_RikP0_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("XZ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_RikP0_5() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZMA"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_RikP0_6() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("PACK200"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_RikP0_7() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_RikP0_8() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_RikP0_9() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_BLOCK"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_RikP0_10() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_RikP0_11() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("ZSTANDARD"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOF_Rsku1_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertEquals(9, compressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOF_Rsku1_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("GZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOF_Rsku1_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("BZIP2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOF_Rsku1_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("XZ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOF_Rsku1_5() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZMA"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOF_Rsku1_6() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("PACK200"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOF_Rsku1_7() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOF_Rsku1_8() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOF_Rsku1_9() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_BLOCK"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOF_Rsku1_10() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOF_Rsku1_11() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("ZSTANDARD"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimit_nkfh2_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertEquals(9, compressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimit_nkfh2_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("GZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimit_nkfh2_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("BZIP2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimit_nkfh2_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("XZ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimit_nkfh2_5() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZMA"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimit_nkfh2_6() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("PACK200"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimit_nkfh2_7() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimit_nkfh2_8() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimit_nkfh2_9() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_BLOCK"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimit_nkfh2_10() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimit_nkfh2_11() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertTrue(compressorNames.contains("ZSTANDARD"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF_True_ryef0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    assertTrue(factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF_False_bmvA1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    assertFalse(factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF_MemoryLimit_JAoQ5() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    assertTrue(factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPack200_decompressUntilEOF_zqsm0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String pack200 = factory.getPack200();
    assertEquals("pack200", pack200);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPack200_noDecompressUntilEOF_bSxF1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    String pack200 = factory.getPack200();
    assertEquals("pack200", pack200);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPack200_withMemoryLimit_YKlK2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String pack200 = factory.getPack200();
    assertEquals("pack200", pack200);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4Block_BbBX0() {
    String expected = "LZ4_BLOCK";
    String actual = CompressorStreamFactory.getLZ4Block();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflate_nVvK0() {
    String expected = "deflate";
    String actual = CompressorStreamFactory.getDeflate();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSnappyFramed_icCs0() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
        String snappyFramed = compressorStreamFactory.getSnappyFramed();
        assertEquals("snappy_framed", snappyFramed);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyFramedWithDecompressUntilEOF_LULO1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    String snappyFramed = compressorStreamFactory.getSnappyFramed();
    assertEquals("snappy_framed", snappyFramed);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyFramedWithMemoryLimit_fUji2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(false, 1024);
    String snappyFramed = compressorStreamFactory.getSnappyFramed();
    assertEquals("snappy_framed", snappyFramed);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflate64_aAHj0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String result = factory.getDeflate64();
    assertEquals("deflate64", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflate64WithDecompressUntilEOF_Yipj1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String result = factory.getDeflate64();
    assertEquals("deflate64", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflate64WithMemoryLimitInKb_AOnU2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    String result = factory.getDeflate64();
    assertEquals("deflate64", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBrotliWithDefaultConstructor_LGwp0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    String brotli = compressorStreamFactory.getBrotli();
    assertEquals("BROTLI", brotli);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBrotliWithDecompressUntilEOFConstructor_Pmnd1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    String brotli = compressorStreamFactory.getBrotli();
    assertEquals("BROTLI", brotli);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBrotliWithDecompressUntilEOFAndMemoryLimitInKbConstructor_CnJW2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    String brotli = compressorStreamFactory.getBrotli();
    assertEquals("BROTLI", brotli);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullProvider_iPDd4() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    CompressorStreamProvider provider = null;
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, provider, map);
    assertEquals(0, map.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXzWithDefaultConstructor_AvSA0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    String xz = factory.getXz();
    assertEquals("xz", xz);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXzWithDecompressUntilEOFConstructor_LZct1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String xz = factory.getXz();
    assertEquals("xz", xz);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXzWithDecompressUntilEOFAndMemoryLimitInKbConstructor_Isvb2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String xz = factory.getXz();
    assertEquals("xz", xz);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZ_wiZy0_MbvL0_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    String z = factory.getZ();
    factory = new CompressorStreamFactory(true);
    z = factory.getZ();
    factory = new CompressorStreamFactory(false);
    z = factory.getZ();
    factory = new CompressorStreamFactory(false, 1024);
    z = factory.getZ();
    factory = new CompressorStreamFactory(false, 0);
    z = factory.getZ();
    factory = new CompressorStreamFactory(false, -1);
    z = factory.getZ();
    factory = new CompressorStreamFactory(false, 0);
    z = factory.getZ();
    factory = new CompressorStreamFactory(false, 1024 * 1024 * 1024);
    z = factory.getZ();
    factory = new CompressorStreamFactory(false, 0);
    z = factory.getZ();
    factory = new CompressorStreamFactory(false, 1024 * 1024 * 1024 + 1);
    z = factory.getZ();
    factory = new CompressorStreamFactory(false, 1024 * 1024 * 1024 + 512);
    z = factory.getZ();
    factory = new CompressorStreamFactory(false, -1024 * 1024 * 1024);
    z = factory.getZ();
    assertEquals("Z", z);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_MemoryLimitConstructor_sJXr3_ekdS0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    assertFalse(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_NegativeMemoryLimitConstructor_PSCF5_QRgm0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, -1);
    assertFalse(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_NullConstructor_YShp6_ojnY0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    assertFalse(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF_NullArgument_bjsb6_eqlZ0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    assertNull(factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_decompressUntilEOF_ndrs0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertEquals(12, compressorNames.size());
    assertTrue(compressorNames.contains("GZIP"));
    assertTrue(compressorNames.contains("BROTLI"));
    assertTrue(compressorNames.contains("BZIP2"));
    assertTrue(compressorNames.contains("XZ"));
    assertTrue(compressorNames.contains("LZMA"));
    assertTrue(compressorNames.contains("PACK200"));
    assertTrue(compressorNames.contains("DEFLATE"));
    assertTrue(compressorNames.contains("SNAPPY_RAW"));
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));
    assertTrue(compressorNames.contains("Z"));
    assertTrue(compressorNames.contains("LZ4_BLOCK"));
    assertTrue(compressorNames.contains("LZ4_FRAMED"));
    assertTrue(compressorNames.contains("ZSTANDARD"));
    assertTrue(compressorNames.contains("DEFLATE64"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_memoryLimitInKb_zvqX1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertEquals(12, compressorNames.size());
    assertTrue(compressorNames.contains("GZIP"));
    assertTrue(compressorNames.contains("BROTLI"));
    assertTrue(compressorNames.contains("BZIP2"));
    assertTrue(compressorNames.contains("XZ"));
    assertTrue(compressorNames.contains("LZMA"));
    assertTrue(compressorNames.contains("PACK200"));
    assertTrue(compressorNames.contains("DEFLATE"));
    assertTrue(compressorNames.contains("SNAPPY_RAW"));
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));
    assertTrue(compressorNames.contains("Z"));
    assertTrue(compressorNames.contains("LZ4_BLOCK"));
    assertTrue(compressorNames.contains("LZ4_FRAMED"));
    assertTrue(compressorNames.contains("ZSTANDARD"));
    assertTrue(compressorNames.contains("DEFLATE64"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_noParameters_lFyG2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertEquals(12, compressorNames.size());
    assertTrue(compressorNames.contains("GZIP"));
    assertTrue(compressorNames.contains("BROTLI"));
    assertTrue(compressorNames.contains("BZIP2"));
    assertTrue(compressorNames.contains("XZ"));
    assertTrue(compressorNames.contains("LZMA"));
    assertTrue(compressorNames.contains("PACK200"));
    assertTrue(compressorNames.contains("DEFLATE"));
    assertTrue(compressorNames.contains("SNAPPY_RAW"));
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));
    assertTrue(compressorNames.contains("Z"));
    assertTrue(compressorNames.contains("LZ4_BLOCK"));
    assertTrue(compressorNames.contains("LZ4_FRAMED"));
    assertTrue(compressorNames.contains("ZSTANDARD"));
    assertTrue(compressorNames.contains("DEFLATE64"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_IIfw0() {
CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
SortedMap<String, CompressorStreamProvider> actual = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
assertNotNull(actual);
assertEquals(1, actual.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOFAndMemoryLimit_AuQw1() {
CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
SortedMap<String, CompressorStreamProvider> actual = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
assertNotNull(actual);
assertEquals(1, actual.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOFAndMemoryLimitAndArchiveStreamProvider_gYhP2() {
CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
SortedMap<String, CompressorStreamProvider> actual = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
assertNotNull(actual);
assertEquals(2, actual.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders_FQQq1() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
    assertNotNull(providers);
    assertFalse(providers.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_bZhE2() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertNotNull(providers);
    assertFalse(providers.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_BshT3() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    Set<String> names = factory.getInputStreamCompressorNames();
    assertNotNull(names);
    assertFalse(names.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_SnxX4() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    Set<String> names = factory.getOutputStreamCompressorNames();
    assertNotNull(names);
    assertFalse(names.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_RikP0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertEquals(9, compressorNames.size());
    assertTrue(compressorNames.contains("GZIP"));
    assertTrue(compressorNames.contains("BZIP2"));
    assertTrue(compressorNames.contains("XZ"));
    assertTrue(compressorNames.contains("LZMA"));
    assertTrue(compressorNames.contains("PACK200"));
    assertTrue(compressorNames.contains("DEFLATE"));
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));
    assertTrue(compressorNames.contains("LZ4_BLOCK"));
    assertTrue(compressorNames.contains("LZ4_FRAMED"));
    assertTrue(compressorNames.contains("ZSTANDARD"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithDecompressUntilEOF_Rsku1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertEquals(9, compressorNames.size());
    assertTrue(compressorNames.contains("GZIP"));
    assertTrue(compressorNames.contains("BZIP2"));
    assertTrue(compressorNames.contains("XZ"));
    assertTrue(compressorNames.contains("LZMA"));
    assertTrue(compressorNames.contains("PACK200"));
    assertTrue(compressorNames.contains("DEFLATE"));
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));
    assertTrue(compressorNames.contains("LZ4_BLOCK"));
    assertTrue(compressorNames.contains("LZ4_FRAMED"));
    assertTrue(compressorNames.contains("ZSTANDARD"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWithMemoryLimit_nkfh2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    Set<String> compressorNames = factory.getOutputStreamCompressorNames();
    assertEquals(9, compressorNames.size());
    assertTrue(compressorNames.contains("GZIP"));
    assertTrue(compressorNames.contains("BZIP2"));
    assertTrue(compressorNames.contains("XZ"));
    assertTrue(compressorNames.contains("LZMA"));
    assertTrue(compressorNames.contains("PACK200"));
    assertTrue(compressorNames.contains("DEFLATE"));
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));
    assertTrue(compressorNames.contains("LZ4_BLOCK"));
    assertTrue(compressorNames.contains("LZ4_FRAMED"));
    assertTrue(compressorNames.contains("ZSTANDARD"));
}
}