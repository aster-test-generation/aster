/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_XGpa0() {
    ZipEightByteInteger obj = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    assertTrue(obj.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameValueDifferentReference_NtVt2() {
    ZipEightByteInteger obj1 = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger obj2 = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    assertTrue(obj1.equals(obj2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithBigInteger_qHFH1() {
    BigInteger value = new BigInteger("1234567890");
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
    String expected = "ZipEightByteInteger value: 1234567890";
    String actual = zipEightByteInteger.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithLong_KWcp2() {
    long value = 1234567890L;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
    String expected = "ZipEightByteInteger value: 1234567890";
    String actual = zipEightByteInteger.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithByteArray_qdhe3() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
    String expected = "ZipEightByteInteger value: 12345678";
    String actual = zipEightByteInteger.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_BigInteger_HEWg0() {
    BigInteger value = new BigInteger("1234567890");
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
    assertEquals(value, zipEightByteInteger.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_Long_ucAu1() {
    long value = 1234567890L;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
    assertEquals(BigInteger.valueOf(value), zipEightByteInteger.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_ValidBytes_eOBg0() {
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };
    long expected = 578437695752307201L;
    long actual = ZipEightByteInteger.getLongValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_ValidBytesOffset_RDLB3() {
    byte[] bytes = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8 };
    int offset = 8;
    long expected = 578437695752307201L;
    long actual = ZipEightByteInteger.getLongValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_1_zflG0() {
    byte[] bytes = new byte[8];
    BigInteger expected = new BigInteger("0");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_2_spzy1() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    BigInteger expected = new BigInteger("1");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_3_WKlj2() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    BigInteger expected = new BigInteger("513");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_4_iXVN3() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    BigInteger expected = new BigInteger("1234567890");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_5_UCcT4() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    BigInteger expected = new BigInteger("67305985");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_6_tHJl5() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    BigInteger expected = new BigInteger("1234567890");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_7_Sknz6() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    bytes[5] = 6;
    BigInteger expected = new BigInteger("6618611909121");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_8_KYBC7() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    bytes[5] = 6;
    bytes[6] = 7;
    BigInteger expected = new BigInteger("1234567890");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_BigInteger_uzia0() {
    BigInteger bigInteger = new BigInteger("1234567890");
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bigInteger);
    assertEquals(1234567890L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_Long_qSSh1() {
    long value = 1234567890L;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
    assertEquals(1234567890L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_ByteArray_GkOj2() {
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
    assertEquals(578437695752307201L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_ByteArrayAndOffset_cVlw3() {
    byte[] bytes = new byte[] { 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
    int offset = 4;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, offset);
    assertEquals(578437695752307201L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithBigInteger_nqGG0() {
    BigInteger value = new BigInteger("1234567890");
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithZeroValue_lZyw4() {
    BigInteger value = new BigInteger("0");
    byte[] expected = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithMaxValue_YMYO5() {
    BigInteger value = new BigInteger("9223372036854775807");
    byte[] expected = new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithMinValue_gxrE6() {
    BigInteger value = new BigInteger("-9223372036854775808");
    byte[] expected = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithLeftmostBitSet_Tfun7() {
    BigInteger value = new BigInteger("1234567890");
    value = value.setBit(63);
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithLeftmostBitUnset_ebGK8() {
    BigInteger value = new BigInteger("1234567890");
    value = value.clearBit(63);
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_BigInteger_jRAo0() {
    BigInteger value = BigInteger.valueOf(10);
    byte[] expected = new byte[] { 10, 0, 0, 0, 0, 0, 0, 0 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_Long_JBdU1() {
    long value = 10;
    byte[] expected = new byte[] { 10, 0, 0, 0, 0, 0, 0, 0 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_BigInteger_Negative_gsqw4() {
    BigInteger value = BigInteger.valueOf(-10);
    byte[] expected = new byte[] { -10,-1,-1,-1,-1,-1,-1,-1 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_Long_Negative_sEeb5() {
    long value = -10;
    byte[] expected = new byte[] { -10,-1,-1,-1,-1,-1,-1,-1 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue1_LQRJ0() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int offset = 0;
    BigInteger expected = BigInteger.valueOf(0x0102030405060708L);
    BigInteger actual = ZipEightByteInteger.getValue(bytes, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_ValidLong_DVOO2_EZZy0() {
    long value = 0x1234567890123456L;
    long expected = 0x1234567890123456L;
    byte[] bytes = new byte[8];
    bytes[0] = (byte) (value & 0xFF);
    bytes[1] = (byte) ((value >> 8) & 0xFF);
    bytes[2] = (byte) ((value >> 16) & 0xFF);
    bytes[3] = (byte) ((value >> 24) & 0xFF);
    bytes[4] = (byte) ((value >> 32) & 0xFF);
    bytes[5] = (byte) ((value >> 40) & 0xFF);
    bytes[6] = (byte) ((value >> 48) & 0xFF);
    bytes[7] = (byte) ((value >> 56) & 0xFF);
    long actual = ZipEightByteInteger.getLongValue(bytes, 0);
    assertEquals(expected, actual);
}
}