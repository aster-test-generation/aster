/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassConstantPool_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIndexOf_entryNull_wjqb0() {
    ClassConstantPool constantPool = new ClassConstantPool();
    ClassFileEntry entry = null;
    int index = constantPool.indexOf(entry);
    assertEquals(-1, index);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEntries_rPUb0() {
    ClassConstantPool pool = new ClassConstantPool();
    List<ClassFileEntry> entries = pool.entries();
    assertNotNull(entries);
    assertEquals(0, entries.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWithUnresolvedConstantPool_cTSb1() {
    ClassConstantPool constantPool = new ClassConstantPool();
    try {
        constantPool.get(0);
        fail("Expected IllegalStateException");
    } catch (IllegalStateException e) {
        assertEquals("Constant pool is not yet resolved; this does not make any sense", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddNullEntry_JDfq4() {
    ClassConstantPool pool = new ClassConstantPool();
    ClassFileEntry entry = null;
    ClassFileEntry result = pool.add(entry);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_EhWW0() {
    ClassConstantPool pool = new ClassConstantPool();
    int size = pool.size();
    assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEntries_rPUb0_1() {
    ClassConstantPool pool = new ClassConstantPool();
    List<ClassFileEntry> entries = pool.entries();
    assertNotNull(entries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEntries_rPUb0_2() {
    ClassConstantPool pool = new ClassConstantPool();
    List<ClassFileEntry> entries = pool.entries();
    assertEquals(0, entries.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWithResolvedConstantPoolAndOutOfBoundsIndex_hypx2_aIgR0() {
    ClassConstantPool constantPool = new ClassConstantPool();
    try {
        constantPool.get(-1);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
        assertEquals("Index -1 out of bounds for length 0", e.getMessage());
    }
}
}