/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IntList_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmpty_EmptyList_YpPa0() {
    IntList list = new IntList();
    assertTrue(list.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmpty_Capacity0_ERWb2() {
    IntList list = new IntList(0);
    assertTrue(list.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmpty_Capacity1_ekph3() {
    IntList list = new IntList(1);
    assertFalse(list.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmpty_Capacity2OrMore_QhXI4() {
    IntList list = new IntList(2);
    assertFalse(list.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmpty_NegativeCapacity_sRWf5() {
    IntList list = new IntList(-1);
    assertTrue(list.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_EmptyList_Zrku0() {
    IntList list = new IntList();
    list.addAll(new IntList());
    assertEquals(0, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_SingleElementList_OOyf2_1() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list.addAll(list2);
    assertEquals(1, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_SingleElementList_OOyf2_2() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list.addAll(list2);
    assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_MultipleElementList_edho3_1() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list2.add(3);
    list.addAll(list2);
    assertEquals(3, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_MultipleElementList_edho3_2() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list2.add(3);
    list.addAll(list2);
    assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_MultipleElementList_edho3_3() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list2.add(3);
    list.addAll(list2);
    assertEquals(2, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_MultipleElementList_edho3_4() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list2.add(3);
    list.addAll(list2);
    assertEquals(3, list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_SingleElementListToNonEmptyList_RESv4_1() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list.add(1);
    list.addAll(list2);
    assertEquals(2, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_SingleElementListToNonEmptyList_RESv4_2() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list.add(1);
    list.addAll(list2);
    assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_SingleElementListToNonEmptyList_RESv4_3() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list.add(1);
    list.addAll(list2);
    assertEquals(1, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_MultipleElementListToNonEmptyList_kWwG5_1() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list2.add(3);
    list.add(1);
    list.addAll(list2);
    assertEquals(4, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_MultipleElementListToNonEmptyList_kWwG5_2() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list2.add(3);
    list.add(1);
    list.addAll(list2);
    assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_MultipleElementListToNonEmptyList_kWwG5_3() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list2.add(3);
    list.add(1);
    list.addAll(list2);
    assertEquals(1, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_MultipleElementListToNonEmptyList_kWwG5_4() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list2.add(3);
    list.add(1);
    list.addAll(list2);
    assertEquals(2, list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_MultipleElementListToNonEmptyList_kWwG5_5() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list2.add(3);
    list.add(1);
    list.addAll(list2);
    assertEquals(3, list.get(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGet_ValidLocation_lrMr0() {
    IntList list = new IntList(10);
    int value = list.get(5);
    assertEquals(5, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGet_InvalidLocation_qRDx1() {
    IntList list = new IntList(10);
    try {
        list.get(-1);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
        assertEquals("-1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArray_emptyList_UuRU0() {
    IntList list = new IntList();
    int[] result = list.toArray();
    assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArray_singleElement_glTO1_1() {
    IntList list = new IntList(10);
    list.add(1);
    int[] result = list.toArray();
    assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArray_singleElement_glTO1_2() {
    IntList list = new IntList(10);
    list.add(1);
    int[] result = list.toArray();
    assertEquals(1, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArray_multipleElements_iATZ2_1() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int[] result = list.toArray();
    assertEquals(3, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArray_multipleElements_iATZ2_2() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int[] result = list.toArray();
    assertEquals(1, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArray_multipleElements_iATZ2_3() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int[] result = list.toArray();
    assertEquals(2, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArray_multipleElements_iATZ2_4() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int[] result = list.toArray();
    assertEquals(3, result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_ValidLocation_lnxa0_1() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(1);
    assertEquals(2, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_ValidLocation_lnxa0_2() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(1);
    assertEquals(2, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_ValidLocation_lnxa0_3() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(1);
    assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_ValidLocation_lnxa0_4() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(1);
    assertEquals(3, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_InvalidLocation_BeNs1() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    try {
        list.remove(4);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationEqualsSizeMinusOne_GihJ2_1() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(2);
    assertEquals(3, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationEqualsSizeMinusOne_GihJ2_2() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(2);
    assertEquals(2, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationEqualsSizeMinusOne_GihJ2_3() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(2);
    assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationEqualsSizeMinusOne_GihJ2_4() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(2);
    assertEquals(2, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationEqualsZero_wWQa3_1() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(0);
    assertEquals(1, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationEqualsZero_wWQa3_2() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(0);
    assertEquals(2, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationEqualsZero_wWQa3_3() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(0);
    assertEquals(2, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationEqualsZero_wWQa3_4() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(0);
    assertEquals(3, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_EmptyList_WNMb6() {
    IntList list = new IntList(10);
    try {
        list.remove(0);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_ValidInput_ridJ0_1() {
    IntList list = new IntList(10);
    assertTrue(list.add(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_ValidInput_ridJ0_2() {
    IntList list = new IntList(10);
    assertEquals(1, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_ValidInput_ridJ0_3() {
    IntList list = new IntList(10);
    assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_EmptyList_RQGs3_1() {
    IntList list = new IntList(0);
    assertTrue(list.add(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_EmptyList_RQGs3_2() {
    IntList list = new IntList(0);
    assertEquals(1, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_EmptyList_RQGs3_3() {
    IntList list = new IntList(0);
    assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_FullList_wljE4_1() {
    IntList list = new IntList(10);
    for (int i = 0; i < 10; i++) {
        list.add(i);
    }
    assertFalse(list.add(10));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_FullList_wljE4_2() {
    IntList list = new IntList(10);
    for (int i = 0; i < 10; i++) {
        list.add(i);
    }
    assertEquals(10, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIncrement_ValidLocation_FKxi0() {
    IntList list = new IntList(10);
    list.increment(5);
    assertEquals(6, list.get(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIncrement_InvalidLocation_jYLr1() {
    IntList list = new IntList(10);
    try {
        list.increment(15);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
        assertEquals("15", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIncrement_FirstElement_LcUM3() {
    IntList list = new IntList(10);
    list.increment(0);
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIncrement_LastElement_UOyV4() {
    IntList list = new IntList(10);
    list.increment(9);
    assertEquals(10, list.get(9));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIncrement_SingleElement_RuiR6() {
    IntList list = new IntList(1);
    list.increment(0);
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location0_object1_PaXt0_1() {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    assertEquals(1, intList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location0_object1_PaXt0_2() {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    assertEquals(1, intList.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location1_object2_HHcr1_1() {
    IntList intList = new IntList(10);
    intList.add(1, 2);
    assertEquals(2, intList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location1_object2_HHcr1_2() {
    IntList intList = new IntList(10);
    intList.add(1, 2);
    assertEquals(2, intList.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location2_object3_ssnz2_1() {
    IntList intList = new IntList(10);
    intList.add(2, 3);
    assertEquals(3, intList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location2_object3_ssnz2_2() {
    IntList intList = new IntList(10);
    intList.add(2, 3);
    assertEquals(3, intList.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location3_object4_fthp3_1() {
    IntList intList = new IntList(10);
    intList.add(3, 4);
    assertEquals(4, intList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location3_object4_fthp3_2() {
    IntList intList = new IntList(10);
    intList.add(3, 4);
    assertEquals(4, intList.get(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location4_object5_SdVk4_1() {
    IntList intList = new IntList(10);
    intList.add(4, 5);
    assertEquals(5, intList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location4_object5_SdVk4_2() {
    IntList intList = new IntList(10);
    intList.add(4, 5);
    assertEquals(5, intList.get(4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location5_object6_oSCf5_1() {
    IntList intList = new IntList(10);
    intList.add(5, 6);
    assertEquals(6, intList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location5_object6_oSCf5_2() {
    IntList intList = new IntList(10);
    intList.add(5, 6);
    assertEquals(6, intList.get(5));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location6_object7_WVDC6_1() {
    IntList intList = new IntList(10);
    intList.add(6, 7);
    assertEquals(7, intList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location6_object7_WVDC6_2() {
    IntList intList = new IntList(10);
    intList.add(6, 7);
    assertEquals(7, intList.get(6));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location7_object8_KsxE7_1() {
    IntList intList = new IntList(10);
    intList.add(7, 8);
    assertEquals(8, intList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location7_object8_KsxE7_2() {
    IntList intList = new IntList(10);
    intList.add(7, 8);
    assertEquals(8, intList.get(7));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location8_object9_xySo8_1() {
    IntList intList = new IntList(10);
    intList.add(8, 9);
    assertEquals(9, intList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location8_object9_xySo8_2() {
    IntList intList = new IntList(10);
    intList.add(8, 9);
    assertEquals(9, intList.get(8));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location9_object10_GUyV9_1() {
    IntList intList = new IntList(10);
    intList.add(9, 10);
    assertEquals(10, intList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location9_object10_GUyV9_2() {
    IntList intList = new IntList(10);
    intList.add(9, 10);
    assertEquals(10, intList.get(9));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location10_object11_QvLj10_1() {
    IntList intList = new IntList(10);
    intList.add(10, 11);
    assertEquals(11, intList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location10_object11_QvLj10_2() {
    IntList intList = new IntList(10);
    intList.add(10, 11);
    assertEquals(11, intList.get(10));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location11_object12_Cxnh11_1() {
    IntList intList = new IntList(10);
    intList.add(11, 12);
    assertEquals(12, intList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location11_object12_Cxnh11_2() {
    IntList intList = new IntList(10);
    intList.add(11, 12);
    assertEquals(12, intList.get(11));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location12_object13_Awow12_1() {
    IntList intList = new IntList(10);
    intList.add(12, 13);
    assertEquals(13, intList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location12_object13_Awow12_2() {
    IntList intList = new IntList(10);
    intList.add(12, 13);
    assertEquals(13, intList.get(12));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClear_emptyList_BGYY0() {
    IntList list = new IntList();
    list.clear();
    assertEquals(0, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_uAlT0() {
    IntList list = new IntList(10);
    assertEquals(10, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSizeAfterModification_IYnL1() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    assertEquals(3, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_SingleElementList_OOyf2() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list.addAll(list2);
    assertEquals(1, list.size());
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_MultipleElementList_edho3() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list2.add(3);
    list.addAll(list2);
    assertEquals(3, list.size());
    assertEquals(1, list.get(0));
    assertEquals(2, list.get(1));
    assertEquals(3, list.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_SingleElementListToNonEmptyList_RESv4() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list.add(1);
    list.addAll(list2);
    assertEquals(2, list.size());
    assertEquals(1, list.get(0));
    assertEquals(1, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_MultipleElementListToNonEmptyList_kWwG5() {
    IntList list = new IntList();
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list2.add(3);
    list.add(1);
    list.addAll(list2);
    assertEquals(4, list.size());
    assertEquals(1, list.get(0));
    assertEquals(1, list.get(1));
    assertEquals(2, list.get(2));
    assertEquals(3, list.get(3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArray_singleElement_glTO1() {
    IntList list = new IntList(10);
    list.add(1);
    int[] result = list.toArray();
    assertEquals(1, result.length);
    assertEquals(1, result[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArray_multipleElements_iATZ2() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int[] result = list.toArray();
    assertEquals(3, result.length);
    assertEquals(1, result[0]);
    assertEquals(2, result[1]);
    assertEquals(3, result[2]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_ValidLocation_lnxa0() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(1);
    assertEquals(2, result);
    assertEquals(2, list.size());
    assertEquals(1, list.get(0));
    assertEquals(3, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationEqualsSizeMinusOne_GihJ2() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(2);
    assertEquals(3, result);
    assertEquals(2, list.size());
    assertEquals(1, list.get(0));
    assertEquals(2, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationEqualsZero_wWQa3() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(0);
    assertEquals(1, result);
    assertEquals(2, list.size());
    assertEquals(2, list.get(0));
    assertEquals(3, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_ValidInput_ridJ0() {
    IntList list = new IntList(10);
    assertTrue(list.add(1));
    assertEquals(1, list.size());
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_EmptyList_RQGs3() {
    IntList list = new IntList(0);
    assertTrue(list.add(1));
    assertEquals(1, list.size());
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_FullList_wljE4() {
    IntList list = new IntList(10);
    for (int i = 0; i < 10; i++) {
        list.add(i);
    }
    assertFalse(list.add(10));
    assertEquals(10, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location0_object1_PaXt0() {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    assertEquals(1, intList.size());
    assertEquals(1, intList.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location1_object2_HHcr1() {
    IntList intList = new IntList(10);
    intList.add(1, 2);
    assertEquals(2, intList.size());
    assertEquals(2, intList.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location2_object3_ssnz2() {
    IntList intList = new IntList(10);
    intList.add(2, 3);
    assertEquals(3, intList.size());
    assertEquals(3, intList.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location3_object4_fthp3() {
    IntList intList = new IntList(10);
    intList.add(3, 4);
    assertEquals(4, intList.size());
    assertEquals(4, intList.get(3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location4_object5_SdVk4() {
    IntList intList = new IntList(10);
    intList.add(4, 5);
    assertEquals(5, intList.size());
    assertEquals(5, intList.get(4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location5_object6_oSCf5() {
    IntList intList = new IntList(10);
    intList.add(5, 6);
    assertEquals(6, intList.size());
    assertEquals(6, intList.get(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location6_object7_WVDC6() {
    IntList intList = new IntList(10);
    intList.add(6, 7);
    assertEquals(7, intList.size());
    assertEquals(7, intList.get(6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location7_object8_KsxE7() {
    IntList intList = new IntList(10);
    intList.add(7, 8);
    assertEquals(8, intList.size());
    assertEquals(8, intList.get(7));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location8_object9_xySo8() {
    IntList intList = new IntList(10);
    intList.add(8, 9);
    assertEquals(9, intList.size());
    assertEquals(9, intList.get(8));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location9_object10_GUyV9() {
    IntList intList = new IntList(10);
    intList.add(9, 10);
    assertEquals(10, intList.size());
    assertEquals(10, intList.get(9));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location10_object11_QvLj10() {
    IntList intList = new IntList(10);
    intList.add(10, 11);
    assertEquals(11, intList.size());
    assertEquals(11, intList.get(10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location11_object12_Cxnh11() {
    IntList intList = new IntList(10);
    intList.add(11, 12);
    assertEquals(12, intList.size());
    assertEquals(12, intList.get(11));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location12_object13_Awow12() {
    IntList intList = new IntList(10);
    intList.add(12, 13);
    assertEquals(13, intList.size());
    assertEquals(13, intList.get(12));
}
}