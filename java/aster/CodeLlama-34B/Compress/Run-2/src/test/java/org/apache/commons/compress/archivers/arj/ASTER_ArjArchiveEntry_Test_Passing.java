/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArjArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_eiFa0() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjects_Rdvw1() {
    ArjArchiveEntry entry1 = new ArjArchiveEntry();
    ArjArchiveEntry entry2 = new ArjArchiveEntry();
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_vbge2() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_AMlC3() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    Object obj = new Object();
    assertFalse(entry.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_vVyF0() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    long size = entry.getSize();
    assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nullName_HEae0() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    assertEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_01_qrKw0() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    int method = entry.getMethod();
    assertEquals(0, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_02_wSoc1() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    int method = entry.getMethod();
    assertEquals(1, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_03_uMIr2() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    int method = entry.getMethod();
    assertEquals(2, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_04_HmYG3() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    int method = entry.getMethod();
    assertEquals(3, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_05_tigR4() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    int method = entry.getMethod();
    assertEquals(4, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_06_mlWM5() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    int method = entry.getMethod();
    assertEquals(5, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_07_HrGO6() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    int method = entry.getMethod();
    assertEquals(6, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_08_CHka7() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    int method = entry.getMethod();
    assertEquals(7, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_09_TJye8() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    int method = entry.getMethod();
    assertEquals(8, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_10_SeiK9() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    int method = entry.getMethod();
    assertEquals(9, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_KZod0() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    assertEquals(0, entry.getMode());
}
}