/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextCPIOEntryWithNullInputStream_rbBv6() throws IOException {
    CpioArchiveInputStream cpioInputStream = new CpioArchiveInputStream(null);
    CpioArchiveEntry entry = cpioInputStream.getNextCPIOEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextCPIOEntryWithNullInputStream_gshn5() throws IOException {
    CpioArchiveInputStream cpioArchiveInputStream = new CpioArchiveInputStream(null);
    CpioArchiveEntry cpioArchiveEntry = cpioArchiveInputStream.getNextCPIOEntry();
    assertNull(cpioArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkip_InvalidInputStream_nmIj8() throws IOException {
    CpioArchiveInputStream input = new CpioArchiveInputStream(null, 1024, "UTF-8");
    try {
        input.skip(1024);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Invalid input stream", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkip_InvalidInputStream_nmIj8_fid1() throws IOException {
    CpioArchiveInputStream input = new CpioArchiveInputStream(null, 1024, "UTF-8");
    try {
        input.skip(1024);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Invalid input stream", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidSignatureWithDifferentOrder_gcmS3_uKRo0_fid3() {
    byte[] signature = new byte[] { (byte) 0xc7, (byte) 0x71, (byte) 0x30, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x30, (byte) 0x37, (byte) 0x32 };
    int length = signature.length;
    assertFalse(CpioArchiveInputStream.matches(signature, length));
}
}