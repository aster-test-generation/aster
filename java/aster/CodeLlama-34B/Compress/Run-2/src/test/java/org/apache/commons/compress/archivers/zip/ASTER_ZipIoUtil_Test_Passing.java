/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipIoUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteFully_EmptyBuffer_CSyg0() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    ByteBuffer buf = ByteBuffer.allocate(0);
    ZipIoUtil.writeFully(channel, buf);
    verify(channel, never()).write(any(ByteBuffer.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteFully_NonEmptyBuffer_hNEO1() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    ByteBuffer buf = ByteBuffer.allocate(10);
    buf.put((byte) 1);
    buf.put((byte) 2);
    buf.put((byte) 3);
    buf.flip();
    ZipIoUtil.writeFully(channel, buf);
    verify(channel, times(1)).write(any(ByteBuffer.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteFully_IOException_WGgW2() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    ByteBuffer buf = ByteBuffer.allocate(10);
    buf.put((byte) 1);
    buf.put((byte) 2);
    buf.put((byte) 3);
    buf.flip();
    doThrow(new IOException()).when(channel).write(any(ByteBuffer.class));
    try {
        ZipIoUtil.writeFully(channel, buf);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Failed to fully write: channel=" + channel + " length=" + buf.remaining() + " written=" + 0, e.getMessage());
    }
}
}