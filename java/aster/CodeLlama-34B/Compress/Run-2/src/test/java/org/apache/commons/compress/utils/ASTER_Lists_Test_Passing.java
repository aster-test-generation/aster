/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.ArrayList;
import java.util.Iterator;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Lists_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_zQYw0() {
    ArrayList<Object> list = Lists.newArrayList();
    assertTrue(list.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_emptyIterator_ytcy0() {
    Iterator<Object> iterator = Collections.emptyIterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertEquals(0, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_nonEmptyIterator_IJle1() {
    Iterator<Object> iterator = Arrays.asList(new Object()).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertEquals(1, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_nullIterator_LDbD2() {
    Iterator<Object> iterator = null;
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertEquals(0, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithNullElement_ykvN3() {
    Iterator<Object> iterator = Arrays.asList(null).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertEquals(1, list.size());
    assertNull(list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithMultipleElements_GuHI4() {
    Iterator<Object> iterator = Arrays.asList(new Object(), new Object(), new Object()).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertEquals(3, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithDuplicateElements_CppL5() {
    Iterator<Object> iterator = Arrays.asList(new Object(), new Object(), new Object()).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertEquals(3, list.size());
    assertEquals(list.get(0), list.get(1));
    assertEquals(list.get(1), list.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithNullAndNonNullElements_jwxZ6() {
    Iterator<Object> iterator = Arrays.asList(null, new Object(), null).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertEquals(3, list.size());
    assertNull(list.get(0));
    assertNotNull(list.get(1));
    assertNull(list.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithNonNullAndNullElements_qMAX7() {
    Iterator<Object> iterator = Arrays.asList(new Object(), null, new Object()).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertEquals(3, list.size());
    assertNotNull(list.get(0));
    assertNull(list.get(1));
    assertNotNull(list.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithNonNullAndNonNullElements_jJUb8() {
    Iterator<Object> iterator = Arrays.asList(new Object(), new Object(), new Object()).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertEquals(3, list.size());
    assertNotNull(list.get(0));
    assertNotNull(list.get(1));
    assertNotNull(list.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithNullElement_ykvN3_1() {
    Iterator<Object> iterator = Arrays.asList(null).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertEquals(1, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithNullElement_ykvN3_2() {
    Iterator<Object> iterator = Arrays.asList(null).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertNull(list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithDuplicateElements_CppL5_2() {
    Iterator<Object> iterator = Arrays.asList(new Object(), new Object(), new Object()).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertEquals(list.get(0), list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithDuplicateElements_CppL5_3() {
    Iterator<Object> iterator = Arrays.asList(new Object(), new Object(), new Object()).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertEquals(list.get(1), list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithNullAndNonNullElements_jwxZ6_1() {
    Iterator<Object> iterator = Arrays.asList(null, new Object(), null).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertEquals(3, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithNullAndNonNullElements_jwxZ6_2() {
    Iterator<Object> iterator = Arrays.asList(null, new Object(), null).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertNull(list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithNullAndNonNullElements_jwxZ6_3() {
    Iterator<Object> iterator = Arrays.asList(null, new Object(), null).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertNotNull(list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithNullAndNonNullElements_jwxZ6_4() {
    Iterator<Object> iterator = Arrays.asList(null, new Object(), null).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertNull(list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithNonNullAndNullElements_qMAX7_1() {
    Iterator<Object> iterator = Arrays.asList(new Object(), null, new Object()).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertEquals(3, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithNonNullAndNullElements_qMAX7_2() {
    Iterator<Object> iterator = Arrays.asList(new Object(), null, new Object()).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertNotNull(list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithNonNullAndNullElements_qMAX7_3() {
    Iterator<Object> iterator = Arrays.asList(new Object(), null, new Object()).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertNull(list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithNonNullAndNullElements_qMAX7_4() {
    Iterator<Object> iterator = Arrays.asList(new Object(), null, new Object()).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertNotNull(list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithNonNullAndNonNullElements_jJUb8_2() {
    Iterator<Object> iterator = Arrays.asList(new Object(), new Object(), new Object()).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertNotNull(list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithNonNullAndNonNullElements_jJUb8_3() {
    Iterator<Object> iterator = Arrays.asList(new Object(), new Object(), new Object()).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertNotNull(list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayList_iteratorWithNonNullAndNonNullElements_jJUb8_4() {
    Iterator<Object> iterator = Arrays.asList(new Object(), new Object(), new Object()).iterator();
    ArrayList<Object> list = Lists.newArrayList(iterator);
    assertNotNull(list.get(2));}
}