/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.File;
import java.io.IOException;
import java.nio.file.LinkOption;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_true_JDic0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    assertTrue(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_false_QZKm1() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    entry.setMode(CpioConstants.C_ISREG);
    assertFalse(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_C_ISBLK_lntb2() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    entry.setMode(CpioConstants.C_ISBLK);
    assertTrue(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_C_ISCHR_qNHI3() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    entry.setMode(CpioConstants.C_ISCHR);
    assertFalse(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_C_ISDIR_orQO4() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    entry.setMode(CpioConstants.C_ISDIR);
    assertFalse(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_C_ISFIFO_lpXx5() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    entry.setMode(CpioConstants.C_ISFIFO);
    assertFalse(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_C_ISLNK_cSPn6() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    entry.setMode(CpioConstants.C_ISLNK);
    assertFalse(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_C_ISSOCK_iNiH8() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    entry.setMode(CpioConstants.C_ISSOCK);
    assertFalse(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChksum_zQWL0() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry(CpioArchiveEntry.FORMAT_NEW, "test.txt", 100);
        entry.setChksum(0x12345678);
        assertEquals(0x12345678, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_oSPQ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
    assertEquals(100L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTimeWithName_FwAW2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    assertEquals(0L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTimeWithFormatAndName_tNFd5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
    assertEquals(0L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTimeWithInputFile_aNxF6() {
    File inputFile = new File("input.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "entryName");
    assertEquals(0L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTimeWithNameAndSize_gjuN7() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
    assertEquals(100L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary_default_aQua0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
    assertEquals(0, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary_nonDefault_tQOI1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(1, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary_withName_wqRH2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(0, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary_withNameAndSize_vBUm3() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 10);
    assertEquals(10, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary_withFile_ZIaQ6() {
    File inputFile = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals(0, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary_withFormatAndName_PNeR8() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(1, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary_withFormatAndNameAndSize_vcDu9() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    assertEquals(10, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithShortFormat_rstm0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals("CpioArchiveEntry", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithShortFormatAndName_pUlG1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithShortFormatAndSize_UfeS2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithStringName_uPOB3() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithFileInputFileAndEntryName_EgFG7() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithStringNameAndSize_RTmQ8() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100L);
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork_shortFormat_Ittd0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertFalse(entry.isNetwork());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork_longFormat_pNYX1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2);
    assertFalse(entry.isNetwork());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork_stringFormat_ljJl2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertFalse(entry.isNetwork());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork_fileFormat_movP4() {
    CpioArchiveEntry entry = new CpioArchiveEntry(new File("test.txt"), "test");
    assertFalse(entry.isNetwork());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork_longFormatWithName_jLWl5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test");
    assertFalse(entry.isNetwork());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork_longFormatWithSize_UrFF6() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test", 100L);
    assertFalse(entry.isNetwork());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInode_vIFl0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setInode(10);
    assertEquals(10, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInodeWithFormat_EtPt1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test", 100);
    entry.setInode(20);
    assertEquals(20, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInodeWithName_zfeS2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    entry.setInode(30);
    assertEquals(30, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInodeWithFormatAndName_BIjz5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 4, "test");
    entry.setInode(60);
    assertEquals(60, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInodeWithFile_Gurw6() {
    File inputFile = new File("test.cpio");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    entry.setInode(70);
    assertEquals(70, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInodeWithFormatAndFile_ETHt7() {
    File inputFile = new File("test.cpio");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 5, inputFile, "test");
    entry.setInode(80);
    assertEquals(80, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInodeWithNameAndSize_zsBn8() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
    entry.setInode(90);
    assertEquals(90, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_CpioArchiveEntry_RgqD0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_CpioArchiveEntry_File_YTew1() {
    CpioArchiveEntry entry = new CpioArchiveEntry(new File("test.txt"), "test");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_uTdt4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_KXTI5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_Ifkv6() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setName("newName");
    assertEquals("newName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_zMrC8() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertEquals(1, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_shortFormat_Zfff0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    Date expected = new Date(1000 * entry.getTime());
    Date actual = entry.getLastModifiedDate();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_shortFormatAndName_ywKQ1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    Date expected = new Date(1000 * entry.getTime());
    Date actual = entry.getLastModifiedDate();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_shortFormatAndNameAndSize_SjOB2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    Date expected = new Date(1000 * entry.getTime());
    Date actual = entry.getLastModifiedDate();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_name_QIbm3() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    Date expected = new Date(1000 * entry.getTime());
    Date actual = entry.getLastModifiedDate();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_formatFileAndEntryName_Gifo7() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
    Date expected = new Date(1000 * entry.getTime());
    Date actual = entry.getLastModifiedDate();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_nameAndSize_Slla8() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
    Date expected = new Date(1000 * entry.getTime());
    Date actual = entry.getLastModifiedDate();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_fileAndEntryName_lHna9() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    Date expected = new Date(1000 * entry.getTime());
    Date actual = entry.getLastModifiedDate();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_True_bWeJ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "symbolic_link", 0);
    assertTrue(entry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_False_zTDN1() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "regular_file", 0);
    assertFalse(entry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_C_ISLNK_Set_lOXF2() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "regular_file", 0);
    entry.setMode(CpioConstants.C_ISLNK);
    assertTrue(entry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_vNcx0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setTime(FileTime.fromMillis(1000));
    assertEquals(1000, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithName_sxbf2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    entry.setTime(FileTime.fromMillis(1000));
    assertEquals(1000, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithFormatAndName_XTwL5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    entry.setTime(FileTime.fromMillis(1000));
    assertEquals(1000, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithFile_QpzR6() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    entry.setTime(FileTime.fromMillis(1000));
    assertEquals(1000, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithFormatAndFile_vLJu7() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
    entry.setTime(FileTime.fromMillis(1000));
    assertEquals(1000, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithSize_ACHy8() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
    entry.setTime(FileTime.fromMillis(1000));
    assertEquals(1000, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_shortFormat_Lwwq0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(1, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_shortFormat_name_pPEm1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(1, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_shortFormat_name_size_gjlw2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    assertEquals(1, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_name_BxxD3() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(0, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_name_size_vWwj4() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 10);
    assertEquals(0, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_file_kufU5() {
    File file = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry(file, "test");
    assertEquals(0, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_null_VfbS9() {
    CpioArchiveEntry entry = new CpioArchiveEntry(null, "test");
    assertEquals(0, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_newFormat_xAAh0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    assertEquals(100, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_nullName_jIqz5() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, null, 100);
    assertEquals(100, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_emptyName_btLh6() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "", 100);
    assertEquals(100, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_invalidName_NYeK7() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "invalid", 100);
    assertEquals(100, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_invalidSize_iYsy9() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", -1);
    assertEquals(0, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_shortFormat_EoMz0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_shortFormatAndName_MLgQ1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_shortFormatAndInputFile_JxHs4() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
    assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_stringName_TqMj5() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals((short) 0, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_stringNameAndSize_yWcL6() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100L);
    assertEquals((short) 0, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_null_LgLV9() {
    CpioArchiveEntry entry = new CpioArchiveEntry(null);
    assertEquals((short) 0, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_shortFormat_NjAG0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setChksum(1234567890L);
    assertEquals(1234567890L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_stringName_yJiZ1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    entry.setChksum(1234567890L);
    assertEquals(1234567890L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_shortFormatStringName_dIHf5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    entry.setChksum(1234567890L);
    assertEquals(1234567890L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_shortFormatFileInputFile_GCSN6() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
    entry.setChksum(1234567890L);
    assertEquals(1234567890L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_stringNameLongSize_HfQu7() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 1234567890L);
    entry.setChksum(1234567890L);
    assertEquals(1234567890L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_null_AbQu9() {
    CpioArchiveEntry entry = new CpioArchiveEntry(null);
    entry.setChksum(1234567890L);
    assertEquals(1234567890L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_nonDefault_xszk1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100L);
    assertEquals(1, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_nullName_qyLH3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, null, 100L);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_invalidName_PbBG4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "invalid_name", 100L);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_nonExistentEntry_JtgC5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "non_existent_entry", 100L);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_symbolicLink_VCjH6() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "symbolic_link", 100L);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_directory_zZjP7() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "directory", 100L);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_oldFormat_RXDL0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(1, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_newFormat_POTF1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2);
    assertEquals(2, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_newFormat_withName_TSrX2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test");
    assertEquals(2, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_newFormat_withSize_vToM3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test", 100);
    assertEquals(2, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_newFormat_withFile_sALB5() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, inputFile, "test");
    assertEquals(2, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMin_KvKi0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    assertEquals(1, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMinWithFormat_flGO1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test", 10);
    assertEquals(2, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMinWithName_aabi2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(0, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMinWithFormatAndName_AFph5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(1, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMinWithFormatAndFile_Biqr6() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
    assertEquals(1, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMinWithNameAndSize_rxsY7() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 10);
    assertEquals(0, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMinWithFileAndName_hczf8() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals(0, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMinWithNullFormat_QFCC9() {
    CpioArchiveEntry entry = new CpioArchiveEntry(null, "test");
    assertEquals(0, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMinWithNullName_tyiO10() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, null);
    assertEquals(1, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMinWithNullInputPath_PBxd11() throws IOException {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, null, "test", LinkOption.NOFOLLOW_LINKS);
    assertEquals(1, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_nullName_pNhk0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(0, entry.getHeaderPadCount(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe_CpioArchiveEntry_LvxT0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100L);
    assertTrue(entry.isPipe());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe_CpioArchiveEntry_File_UcNU1() {
    File file = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, file, "test.txt");
    assertTrue(entry.isPipe());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe_CpioArchiveEntry_Invalid_EDix3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test.txt", 100L);
    assertFalse(entry.isPipe());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe_CpioArchiveEntry_File_Invalid_emlR5() {
    File file = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, file, "test.txt");
    assertFalse(entry.isPipe());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe_CpioArchiveEntry_File_DifferentFileType_tyZb6() {
    File file = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, file, "test.txt");
    assertFalse(entry.isPipe());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize_shortFormat_bthT0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(110, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize_shortFormatAndName_Vlti1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(110, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize_shortFormatAndNameAndSize_FHWt2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
    assertEquals(110, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize_name_Wyxq3() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(110, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize_shortFormatAndNameAndInputFileAndEntryName_PqQs6() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
    assertEquals(110, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize_nameAndSize_etZD7() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100L);
    assertEquals(110, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize_inputFileAndEntryName_GqeS8() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals(110, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithNull_nvAm1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setName(null);
    assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithEmptyString_VJaz2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setName("");
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithSameName_yTuZ3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setName("test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_CpioArchiveEntry_ljVx0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100L);
    assertTrue(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_ValidSize_XaEZ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test.txt", 100L);
    entry.setSize(100L);
    assertEquals(100L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocket_shortFormat_RhaM0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertTrue(entry.isSocket());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocket_stringFormat_cYeW1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertFalse(entry.isSocket());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInode_rJwy0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100L);
    assertEquals(100L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithName_gLEs1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test.txt");
    assertEquals(0L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithFile_dSQY3() {
    File inputFile = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test.txt");
    assertEquals(0L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithFormat_qmEJ4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt");
    assertEquals(0L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithSize_iTjc5() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test.txt", 100L);
    assertEquals(100L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithFormatAndFile_RSTN8() {
    File inputFile = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test.txt");
    assertEquals(0L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_JWkE0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
    entry.setTime(100L);
    assertEquals(100L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithName_BGJA2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    entry.setTime(100L);
    assertEquals(100L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithFormatAndName_ASZy5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
    entry.setTime(100L);
    assertEquals(100L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithFile_OHWJ6() {
    File inputFile = new File("input.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "name");
    entry.setTime(100L);
    assertEquals(100L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithFormatAndFile_dCEV7() {
    File inputFile = new File("input.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "name");
    entry.setTime(100L);
    assertEquals(100L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNameAndSize_TDtr8() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
    entry.setTime(100L);
    assertEquals(100L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount_alignmentBoundaryIsZero_tJKo0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 10);
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount_sizeIsMultipleOfAlignmentBoundary_dDGB1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 4, "test", 16);
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount_alignmentBoundaryIsGreaterThanSize_GbiO5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 4, "test", 10);
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_alignmentBoundaryIsZero_Pokz0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
    int result = entry.getHeaderPadCount(0);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_nameIsNull_eSIR1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, null, 0);
    int result = entry.getHeaderPadCount(0);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_nameIsNotNull_KMXu2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0);
    int result = entry.getHeaderPadCount(0);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountWithNullFormat_qBqc0() {
	CpioArchiveEntry entry = new CpioArchiveEntry(null);
	int expected = 0;
	int actual = entry.getHeaderPadCount();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountWithNonNullFormat_QRNw1() {
	CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
	int expected = 0;
	int actual = entry.getHeaderPadCount();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountWithNameAndSize_uboU2() {
	CpioArchiveEntry entry = new CpioArchiveEntry("name", 10);
	int expected = 0;
	int actual = entry.getHeaderPadCount();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountWithFormatName_tdyZ5() {
	CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
	int expected = 0;
	int actual = entry.getHeaderPadCount();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountWithInputFileAndEntryName_hjeZ6() {
	CpioArchiveEntry entry = new CpioArchiveEntry(new File("file"), "entryName");
	int expected = 0;
	int actual = entry.getHeaderPadCount();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceWithOldFormat_phnN0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setRemoteDevice(100L);
    assertEquals(100L, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceWithNewFormat_hIXT1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2);
    entry.setRemoteDevice(200L);
    assertEquals(200L, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceWithName_rMmD2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    entry.setRemoteDevice(300L);
    assertEquals(300L, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceWithFile_HIXu4() {
    CpioArchiveEntry entry = new CpioArchiveEntry(new File("test"), "test");
    entry.setRemoteDevice(500L);
    assertEquals(500L, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceWithSize_yLIi5() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 600L);
    entry.setRemoteDevice(600L);
    assertEquals(600L, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceWithInvalidDevice_xlaw6() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    try {
        entry.setRemoteDevice(-1L);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid device number: -1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceWithInvalidFormat_pxSD7() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 3);
    try {
        entry.setRemoteDevice(100L);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid format: 3", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUID_FmjO0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
    entry.setUID(100L);
    assertEquals(100L, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUIDWithName_kvTy2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    entry.setUID(100L);
    assertEquals(100L, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUIDWithFormatAndName_BTkI5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
    entry.setUID(100L);
    assertEquals(100L, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUIDWithFile_RVTw6() {
    File inputFile = new File("path/to/file");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "entryName");
    entry.setUID(100L);
    assertEquals(100L, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUIDWithNameAndSize_YvJN7() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
    entry.setUID(100L);
    assertEquals(100L, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUIDWithInvalidUID_clBQ9() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
    try {
        entry.setUID(-1L);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("UID must be non-negative", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_C_ISDIR_JKlD0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 0);
    entry.setMode(CpioConstants.C_ISDIR);
    assertEquals(CpioConstants.C_ISDIR, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_C_ISLNK_yYwZ1() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 0);
    entry.setMode(CpioConstants.C_ISLNK);
    assertEquals(CpioConstants.C_ISLNK, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_C_ISREG_rWhw2() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 0);
    entry.setMode(CpioConstants.C_ISREG);
    assertEquals(CpioConstants.C_ISREG, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_C_ISFIFO_HUBw3() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 0);
    entry.setMode(CpioConstants.C_ISFIFO);
    assertEquals(CpioConstants.C_ISFIFO, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_C_ISCHR_Upuu4() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 0);
    entry.setMode(CpioConstants.C_ISCHR);
    assertEquals(CpioConstants.C_ISCHR, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_C_ISBLK_mJGH5() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 0);
    entry.setMode(CpioConstants.C_ISBLK);
    assertEquals(CpioConstants.C_ISBLK, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_C_ISSOCK_niDZ6() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 0);
    entry.setMode(CpioConstants.C_ISSOCK);
    assertEquals(CpioConstants.C_ISSOCK, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_C_ISNWK_PGsA7() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 0);
    entry.setMode(CpioConstants.C_ISNWK);
    assertEquals(CpioConstants.C_ISNWK, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_Unknown_CczK8() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 0);
    try {
        entry.setMode(0x12345678);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Unknown mode. Full: 12345678 Masked: 12345678", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_shortFormat_Byao0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(1, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_shortFormat_name_gXxc1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(1, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_shortFormat_size_fBZp2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
    assertEquals(1, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_file_Cwtm5() {
    File inputFile = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals(1, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_file_name_LRCh6() {
    File inputFile = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
    assertEquals(1, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_name_size_blvL7() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100L);
    assertEquals(1, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_shortFormat_Hlkl0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_shortFormatAndName_Xfcz1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_shortFormatAndNameAndSize_cSnZ2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    assertEquals(10, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_name_WSDg3() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_nameAndSize_sVQb4() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name", 10);
    assertEquals(10, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_inputFileAndEntryName_TqpD7() {
    File inputFile = new File("path/to/file");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "entryName");
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_shortFormatAndInputFileAndEntryName_eCSw9() {
    File inputFile = new File("path/to/file");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "entryName");
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfLinks_Becm0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setNumberOfLinks(5);
    assertEquals(5, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfLinksWithNegativeValue_aiXY1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setNumberOfLinks(-5);
    assertEquals(-5, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfLinksWithZeroValue_BjMs2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setNumberOfLinks(0);
    assertEquals(0, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfLinksWithLargeValue_lDHf3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setNumberOfLinks(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfLinksWithInvalidValue_VFGe4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    try {
        entry.setNumberOfLinks(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid number of links: -1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks_directory_gghy0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 0);
    assertEquals(2, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks_file_TPlu1() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_shortFormat_AjFQ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertTrue(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_longFormat_FJoL1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2);
    assertFalse(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_stringConstructor_VogS2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertFalse(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_fileConstructor_pEtS4() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertFalse(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_longFormat_stringConstructor_vhMa5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test");
    assertFalse(entry.isCharacterDevice());
}
@Test
public void testSetRemoteDeviceMinWithNegativeValue_qlxM1_etoU0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
    entry.setRemoteDeviceMin(-10L);
    assertEquals(-10L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary_withFileAndName_aJmr7_mWLV0() {
    File inputFile = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals(10, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInodeWithFileAndSize_QuPt9_WRlN0() {
    File inputFile = new File("test.cpio");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    entry.setInode(100);
    assertEquals(100, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_null_size_psnt10_YajW0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 10);
    assertEquals(0, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_nullFormat_jcyq2_VUuk0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100);
    assertEquals(100, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_nullSize_YZzS8_bZJf0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 0L);
    assertEquals(0, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_shortFormatAndSize_RQSz2_fHIK0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
    assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_stringNameAndInputFile_BbDH8_tlYo0() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals((short) 0, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_stringNameFileInputFile_sAUo4_RlIK0() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    entry.setChksum(1234567890L);
    assertEquals(1234567890L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_emptyName_iJzY1_OszF0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "", 0);
    assertEquals(0, entry.getHeaderPadCount(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithDifferentNameAndFormat_labY5_wVys0_2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setName("newName");
    assertEquals((short) 1, entry.getFormat());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithDifferentNameAndFormatAndSize_fuat6_ZBij0_3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setName("newName");
    assertEquals(100, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_shortFormat_PLqR0_bVNs0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(Objects.hash(entry.getName()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_shortFormatNameSize_YxKq1_LTte0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
    assertEquals(Objects.hash(entry.getName()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_name_jujO2_ZHPs0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    assertEquals(Objects.hash("name"), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_shortFormatName_AMFi5_pmko0() {
    short format = (short) 1;
    String name = "name";
    CpioArchiveEntry entry = new CpioArchiveEntry(format, name);
    assertEquals(Objects.hash(entry.getName()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_shortFormatInputFileEntryName_ngPG6_hKjU0() {
    short format = (short) 1;
    File inputFile = new File("path/to/file");
    String entryName = "entryName";
    CpioArchiveEntry entry = new CpioArchiveEntry(format, inputFile, entryName);
    assertEquals(Objects.hash(entry.getName()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameSize_BSCk7_ZkgU0() {
    String name = "name";
    long size = 100L;
    CpioArchiveEntry entry = new CpioArchiveEntry(name, size);
    assertEquals(Objects.hash(entry.getName()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_inputFileEntryName_IOoR8_VPEo0() {
    File inputFile = new File("path/to/file");
    String entryName = "entryName";
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, entryName);
    assertEquals(Objects.hash(entry.getName()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nullName_AHoI9_RpZU0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(null);
    assertEquals(Objects.hash(entry.getName()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceWithNullName_Kxsh8_lwKO0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    try {
        entry.setRemoteDevice(0);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Name cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_shortFormatAndInputFileAndEntryNameAndSize_sDBD10_cKbg0() {
    File inputFile = new File("path/to/file");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "entryName");
    entry.setRemoteDeviceMin(10);
    assertEquals(10, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfLinksWithNullValue_FsDo5_IeoI0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    try {
        entry.setNumberOfLinks(0L);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Number of links cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfLinksWithEmptyString_SUUs6_eygh0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    try {
        entry.setNumberOfLinks(0);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid number of links: 0", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfLinksWithInvalidString_IFyr7_okcz0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    try {
        entry.setNumberOfLinks(Long.parseLong("abc"));
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid number of links: abc", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_pbbA9() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setMode(2);
    assertEquals(2, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_InvalidSize_imuy1() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test.txt", 100L);
    try {
        entry.setSize(-1L);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid entry size <-1>", e.getMessage());
    }
}
}