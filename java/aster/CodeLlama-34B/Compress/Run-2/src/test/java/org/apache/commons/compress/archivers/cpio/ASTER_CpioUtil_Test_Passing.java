/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioUtil_Test_Passing {

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFileType_S_IFMT_lsTl7() {
    long mode = CpioConstants.S_IFMT;
    long expected = CpioConstants.S_IFMT;
    long actual = CpioUtil.fileType(mode);
    assertEquals(expected, actual);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long_evenLength_bRaI0() {
    byte[] number = {1, 2, 3, 4, 5, 6, 7, 8};
    long expected = 0x0102030405060708L;
    long actual = CpioUtil.byteArray2long(number, false);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long_oddLength_tMtX1() {
    byte[] number = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    long expected = 0x0102030405060708L;
    long actual = CpioUtil.byteArray2long(number, false);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long_swapHalfWord_wECz2() {
    byte[] number = {1, 2, 3, 4, 5, 6, 7, 8};
    long expected = 0x0201040306050807L;
    long actual = CpioUtil.byteArray2long(number, true);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long_null_VqDW3() {
    byte[] number = null;
    long expected = 0;
    long actual = CpioUtil.byteArray2long(number, false);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long_empty_bxIm4() {
    byte[] number = {};
    long expected = 0;
    long actual = CpioUtil.byteArray2long(number, false);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLong2ByteArray_1_Qiwl0() {
    long number = 1234567890L;
    int length = 4;
    boolean swapHalfWord = false;
    byte[] expected = new byte[] { 0x78, 0x56, 0x34, 0x12 };
    byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLong2ByteArray_2_dSui1() {
    long number = 1234567890L;
    int length = 4;
    boolean swapHalfWord = true;
    byte[] expected = new byte[] { 0x12, 0x34, 0x56, 0x78 };
    byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLong2ByteArray_3_ERMm2() {
    long number = 1234567890L;
    int length = 8;
    boolean swapHalfWord = false;
    byte[] expected = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x78, 0x56, 0x34, 0x12 };
    byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLong2ByteArray_4_eqNB3() {
    long number = 1234567890L;
    int length = 8;
    boolean swapHalfWord = true;
    byte[] expected = new byte[] { 0x12, 0x34, 0x56, 0x78, 0x00, 0x00, 0x00, 0x00 };
    byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLong2ByteArray_5_aONG4() {
    long number = 1234567890L;
    int length = 16;
    boolean swapHalfWord = false;
    byte[] expected = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x56, 0x34, 0x12 };
    byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLong2ByteArray_6_BbnC5() {
    long number = 1234567890L;
    int length = 16;
    boolean swapHalfWord = true;
    byte[] expected = new byte[] { 0x12, 0x34, 0x56, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
    assertArrayEquals(expected, actual);
}
}