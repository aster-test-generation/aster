/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPString_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithGlobalIndex_OZpr1_1() {
        CPUTF8 utf8 = new CPUTF8("test", 1);
        CPString string = new CPString(utf8, 1);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertNotNull(entries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithGlobalIndex_OZpr1_2() {
        CPUTF8 utf8 = new CPUTF8("test", 1);
        CPString string = new CPString(utf8, 1);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertEquals(1, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithGlobalIndex_OZpr1_3() {
        CPUTF8 utf8 = new CPUTF8("test", 1);
        CPString string = new CPString(utf8, 1);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertEquals(utf8, entries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithNullUTF8_LKTH2_1() {
        CPString string = new CPString(null, 0);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertNotNull(entries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithNullUTF8_LKTH2_2() {
        CPString string = new CPString(null, 0);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertEquals(0, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithNullUTF8AndGlobalIndex_KBvR3_1() {
        CPString string = new CPString(null, 1);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertNotNull(entries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithNullUTF8AndGlobalIndex_KBvR3_2() {
        CPString string = new CPString(null, 1);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertEquals(0, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithEmptyUTF8_tZIz4_1() {
        CPUTF8 utf8 = new CPUTF8("");
        CPString string = new CPString(utf8, 0);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertNotNull(entries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithEmptyUTF8_tZIz4_2() {
        CPUTF8 utf8 = new CPUTF8("");
        CPString string = new CPString(utf8, 0);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertEquals(0, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithEmptyUTF8AndGlobalIndex_XqOr5_1() {
        CPUTF8 utf8 = new CPUTF8("", 1);
        CPString string = new CPString(utf8, 1);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertNotNull(entries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithEmptyUTF8AndGlobalIndex_XqOr5_2() {
        CPUTF8 utf8 = new CPUTF8("", 1);
        CPString string = new CPString(utf8, 1);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertEquals(0, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithInvalidUTF8_IAEQ6_1() {
        CPUTF8 utf8 = new CPUTF8("test", -1);
        CPString string = new CPString(utf8, 0);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertNotNull(entries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithInvalidUTF8_IAEQ6_2() {
        CPUTF8 utf8 = new CPUTF8("test", -1);
        CPString string = new CPString(utf8, 0);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertEquals(0, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithInvalidUTF8AndGlobalIndex_hACK7_1() {
        CPUTF8 utf8 = new CPUTF8("test", -1);
        CPString string = new CPString(utf8, 1);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertNotNull(entries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithInvalidUTF8AndGlobalIndex_hACK7_2() {
        CPUTF8 utf8 = new CPUTF8("test", -1);
        CPString string = new CPString(utf8, 1);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertEquals(0, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithInvalidGlobalIndex_kCLC8_1() {
        CPUTF8 utf8 = new CPUTF8("test");
        CPString string = new CPString(utf8, -1);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertNotNull(entries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithInvalidGlobalIndex_kCLC8_2() {
        CPUTF8 utf8 = new CPUTF8("test");
        CPString string = new CPString(utf8, -1);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertEquals(0, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_emptyString_SleR0() {
    CPUTF8 utf8 = new CPUTF8("");
    CPString string = new CPString(utf8, 0);
    assertEquals(0, string.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nonEmptyString_bFzM1() {
    CPUTF8 utf8 = new CPUTF8("hello");
    CPString string = new CPString(utf8, 0);
    assertEquals(utf8.hashCode(), string.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_singleCharacter_SZMW2() {
    CPUTF8 utf8 = new CPUTF8("a");
    CPString string = new CPString(utf8, 0);
    assertEquals(utf8.hashCode(), string.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_multipleCharacters_BIUz3() {
    CPUTF8 utf8 = new CPUTF8("hello world");
    CPString string = new CPString(utf8, 0);
    assertEquals(utf8.hashCode(), string.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_uppercaseAndLowercaseLetters_aWWb4() {
    CPUTF8 utf8 = new CPUTF8("Hello World");
    CPString string = new CPString(utf8, 0);
    assertEquals(utf8.hashCode(), string.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_lettersAndNumbers_DDep5() {
    CPUTF8 utf8 = new CPUTF8("hello123");
    CPString string = new CPString(utf8, 0);
    assertEquals(utf8.hashCode(), string.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_lettersNumbersAndSpecialCharacters_rHNt6() {
    CPUTF8 utf8 = new CPUTF8("hello!@#$%^&*()_+");
    CPString string = new CPString(utf8, 0);
    assertEquals(utf8.hashCode(), string.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithGlobalIndex_KMlI1_Jfql0() {
    CPUTF8 utf8 = new CPUTF8("test");
    CPString string = new CPString(utf8, 1);
    assertEquals("String: test", string.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullUTF8_OAeL2_jOeo0() {
    CPUTF8 utf8 = new CPUTF8("");
    CPString string = new CPString(utf8, 0);
    assertEquals("String: null", string.toString());
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyUTF8_nMkT3_dvrs0() {
        CPUTF8 utf8 = new CPUTF8("");
        CPString string = new CPString(utf8, 0);
        assertEquals("String: ", string.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullUTF8AndGlobalIndex_dxoZ4_zzVb1() {
    CPString string = new CPString(new CPUTF8(null), 1);
    assertEquals("String: null", string.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithEmptyUTF8AndGlobalIndex_GRgy5_hxrv0() {
    CPUTF8 utf8 = new CPUTF8("", 1);
    CPString string = new CPString(utf8, 1);
    assertEquals("String: ", string.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_DTeN0_EgUL0_1() {
    CPUTF8 utf8 = new CPUTF8("test", 0);
    CPString string = new CPString(utf8, 0);
    ClassFileEntry[] entries = string.getNestedClassFileEntries();
    assertNotNull(entries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_DTeN0_EgUL0_2() {
    CPUTF8 utf8 = new CPUTF8("test", 0);
    CPString string = new CPString(utf8, 0);
    ClassFileEntry[] entries = string.getNestedClassFileEntries();
    assertEquals(1, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_DTeN0_EgUL0_3() {
    CPUTF8 utf8 = new CPUTF8("test", 0);
    CPString string = new CPString(utf8, 0);
    ClassFileEntry[] entries = string.getNestedClassFileEntries();
    assertEquals(utf8, entries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithGlobalIndex_OZpr1() {
        CPUTF8 utf8 = new CPUTF8("test", 1);
        CPString string = new CPString(utf8, 1);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertNotNull(entries);
        assertEquals(1, entries.length);
        assertEquals(utf8, entries[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithNullUTF8_LKTH2() {
        CPString string = new CPString(null, 0);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertNotNull(entries);
        assertEquals(0, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithNullUTF8AndGlobalIndex_KBvR3() {
        CPString string = new CPString(null, 1);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertNotNull(entries);
        assertEquals(0, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithEmptyUTF8_tZIz4() {
        CPUTF8 utf8 = new CPUTF8("");
        CPString string = new CPString(utf8, 0);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertNotNull(entries);
        assertEquals(0, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithEmptyUTF8AndGlobalIndex_XqOr5() {
        CPUTF8 utf8 = new CPUTF8("", 1);
        CPString string = new CPString(utf8, 1);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertNotNull(entries);
        assertEquals(0, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithInvalidUTF8_IAEQ6() {
        CPUTF8 utf8 = new CPUTF8("test", -1);
        CPString string = new CPString(utf8, 0);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertNotNull(entries);
        assertEquals(0, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithInvalidUTF8AndGlobalIndex_hACK7() {
        CPUTF8 utf8 = new CPUTF8("test", -1);
        CPString string = new CPString(utf8, 1);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertNotNull(entries);
        assertEquals(0, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithInvalidGlobalIndex_kCLC8() {
        CPUTF8 utf8 = new CPUTF8("test");
        CPString string = new CPString(utf8, -1);
        ClassFileEntry[] entries = string.getNestedClassFileEntries();
        assertNotNull(entries);
        assertEquals(0, entries.length);
    }
}