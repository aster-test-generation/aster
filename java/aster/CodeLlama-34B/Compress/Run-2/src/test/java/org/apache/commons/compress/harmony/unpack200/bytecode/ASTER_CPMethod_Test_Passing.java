/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPMethod_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_OOCy0() {
    CPUTF8 name = new CPUTF8("myMethod");
    CPUTF8 descriptor = new CPUTF8("(I)V");
    CPMethod method = new CPMethod(name, descriptor, 0, new ArrayList<Attribute>());
    String result = method.toString();
    assertEquals("Method: myMethod(I)V", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_NoAttributes_GBGL0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMethod method = new CPMethod(name, descriptor, flags, attributes);
    int expectedHashCode = Objects.hash(name, descriptor, flags, attributes);
    assertEquals(expectedHashCode, method.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_NullName_zmmH2() {
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMethod method = new CPMethod(null, descriptor, flags, attributes);
    int expectedHashCode = Objects.hash(null, descriptor, flags, attributes);
    assertEquals(expectedHashCode, method.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_NullDescriptor_pYkJ3() {
    CPUTF8 name = new CPUTF8("name");
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMethod method = new CPMethod(name, null, flags, attributes);
    int expectedHashCode = Objects.hash(name, null, flags, attributes);
    assertEquals(expectedHashCode, method.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_NullAttributes_Nakm5() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 0;
    CPMethod method = new CPMethod(name, descriptor, flags, null);
    int expectedHashCode = Objects.hash(name, descriptor, flags, null);
    assertEquals(expectedHashCode, method.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_NullFlags_jjIA4_cmdn0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMethod method = new CPMethod(name, descriptor, 0L, attributes);
    int expectedHashCode = Objects.hash(name, descriptor, 0L, attributes);
    assertEquals(expectedHashCode, method.hashCode());
}
}