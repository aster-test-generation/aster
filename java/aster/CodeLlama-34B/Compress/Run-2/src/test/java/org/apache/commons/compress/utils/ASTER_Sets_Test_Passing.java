/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.HashSet;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sets_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_empty_OZtI0() {
    HashSet<Object> set = Sets.newHashSet();
    assertTrue(set.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_singleElement_UNNV1_1() {
    HashSet<String> set = Sets.newHashSet("a");
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_singleElement_UNNV1_2() {
    HashSet<String> set = Sets.newHashSet("a");
    assertTrue(set.contains("a"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_multipleElements_KZKh2_1() {
    HashSet<Integer> set = Sets.newHashSet(1, 2, 3);
    assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_multipleElements_KZKh2_2() {
    HashSet<Integer> set = Sets.newHashSet(1, 2, 3);
    assertTrue(set.contains(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_multipleElements_KZKh2_3() {
    HashSet<Integer> set = Sets.newHashSet(1, 2, 3);
    assertTrue(set.contains(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_multipleElements_KZKh2_4() {
    HashSet<Integer> set = Sets.newHashSet(1, 2, 3);
    assertTrue(set.contains(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullElement_cpIs3_1() {
    HashSet<String> set = Sets.newHashSet((String) null);
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullElement_cpIs3_2() {
    HashSet<String> set = Sets.newHashSet((String) null);
    assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_duplicateElements_nCsg4_1() {
    HashSet<Integer> set = Sets.newHashSet(1, 1, 2, 2, 3, 3);
    assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_duplicateElements_nCsg4_2() {
    HashSet<Integer> set = Sets.newHashSet(1, 1, 2, 2, 3, 3);
    assertTrue(set.contains(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_duplicateElements_nCsg4_3() {
    HashSet<Integer> set = Sets.newHashSet(1, 1, 2, 2, 3, 3);
    assertTrue(set.contains(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_duplicateElements_nCsg4_4() {
    HashSet<Integer> set = Sets.newHashSet(1, 1, 2, 2, 3, 3);
    assertTrue(set.contains(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullElements_MRHd5() {
    HashSet<String> set = Sets.newHashSet((String[]) null);
    assertEquals(0, set.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_emptyElements_wwAy6() {
    HashSet<String> set = Sets.newHashSet(new String[0]);
    assertEquals(0, set.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullAndNonNullElements_YiSg7_1() {
    HashSet<String> set = Sets.newHashSet("a", null, "b", null, "c");
    assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullAndNonNullElements_YiSg7_2() {
    HashSet<String> set = Sets.newHashSet("a", null, "b", null, "c");
    assertTrue(set.contains("a"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullAndNonNullElements_YiSg7_3() {
    HashSet<String> set = Sets.newHashSet("a", null, "b", null, "c");
    assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullAndNonNullElements_YiSg7_4() {
    HashSet<String> set = Sets.newHashSet("a", null, "b", null, "c");
    assertTrue(set.contains("b"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullAndNonNullElements_YiSg7_5() {
    HashSet<String> set = Sets.newHashSet("a", null, "b", null, "c");
    assertTrue(set.contains("c"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nonNullElements_SOZM8_1() {
    HashSet<String> set = Sets.newHashSet("a", "b", "c");
    assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nonNullElements_SOZM8_2() {
    HashSet<String> set = Sets.newHashSet("a", "b", "c");
    assertTrue(set.contains("a"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nonNullElements_SOZM8_3() {
    HashSet<String> set = Sets.newHashSet("a", "b", "c");
    assertTrue(set.contains("b"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nonNullElements_SOZM8_4() {
    HashSet<String> set = Sets.newHashSet("a", "b", "c");
    assertTrue(set.contains("c"));}
}