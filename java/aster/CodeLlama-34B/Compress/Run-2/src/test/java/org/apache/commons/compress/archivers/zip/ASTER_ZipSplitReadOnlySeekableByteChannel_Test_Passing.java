/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipSplitReadOnlySeekableByteChannel_Test_Passing {
    private static final String TEST_FILE_NAME = "test.zip";
    private static final String TEST_FILE_PATH = "src/test/resources/test.zip";    
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_emptyFiles_lKKp0() throws IOException {
    List<File> files = new ArrayList<>();
    File lastSegmentFile = new File("last_segment.zip");
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
    assertNull(channel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_nullFiles_MYpK1() throws IOException {
    File lastSegmentFile = new File("last_segment.zip");
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, null);
    assertNull(channel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_nullLastSegmentFile_PtlR2() throws IOException {
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    files.add(new File("file2.txt"));
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(null, files);
    assertNull(channel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_singleFile_qgNm3_1() throws IOException {
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    File lastSegmentFile = new File("last_segment.zip");
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
    assertNotNull(channel);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_singleFile_qgNm3_2() throws IOException {
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    File lastSegmentFile = new File("last_segment.zip");
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
    assertEquals(1, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_multipleFiles_ZnBY4_1() throws IOException {
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    files.add(new File("file2.txt"));
    File lastSegmentFile = new File("last_segment.zip");
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
    assertNotNull(channel);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_multipleFiles_ZnBY4_2() throws IOException {
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    files.add(new File("file2.txt"));
    File lastSegmentFile = new File("last_segment.zip");
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
    assertEquals(2, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_lastSegmentFileInFiles_ISgq6_1() throws IOException {
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    files.add(new File("file2.txt"));
    File lastSegmentFile = new File("last_segment.zip");
    files.add(lastSegmentFile);
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
    assertNotNull(channel);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_lastSegmentFileInFiles_ISgq6_2() throws IOException {
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    files.add(new File("file2.txt"));
    File lastSegmentFile = new File("last_segment.zip");
    files.add(lastSegmentFile);
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
    assertEquals(3, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_lastSegmentFileNotInFiles_differentName_AFJY7_1() throws IOException {
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    files.add(new File("file2.txt"));
    File lastSegmentFile = new File("last_segment.zip");
    files.add(new File("last_segment_different_name.zip"));
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
    assertNotNull(channel);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_lastSegmentFileNotInFiles_differentName_AFJY7_2() throws IOException {
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    files.add(new File("file2.txt"));
    File lastSegmentFile = new File("last_segment.zip");
    files.add(new File("last_segment_different_name.zip"));
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
    assertEquals(3, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForPathsWithNullLastSegmentPath_NNAM1() throws IOException {
    Path lastSegmentPath = null;
    Iterable<Path> paths = new ArrayList<>();
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forPaths(lastSegmentPath, paths);
    assertNull(channel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForPaths_nullPaths_PHcf2() throws IOException {
    OpenOption[] openOptions = new OpenOption[] { StandardOpenOption.READ };
    List<Path> paths = null;
    try {
        ZipSplitReadOnlySeekableByteChannel.forPaths(paths, openOptions);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("paths must not be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForOrderedSeekableByteChannels_singleChannel_naBm0() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel);
    assertSame(channel, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildFromLastSplitSegment_nullLastSegmentPath_qvgt2() throws IOException {
    Path lastSegmentPath = null;
    try {
        ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentPath);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("lastSegmentPath", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForPathsWithEmptyPaths_ChVv0() throws IOException {
    Path[] paths = new Path[0];
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forPaths(paths);
    assertNull(channel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForPathsWithNullPaths_MiEv1() throws IOException {
    Path[] paths = null;
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forPaths(paths);
    assertNull(channel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_empty_Nepp0() throws IOException {
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles();
    assertNull(channel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildFromLastSplitSegment_vawS0() throws IOException {
        File lastSegmentFile = new File(TEST_FILE_PATH);
        SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentFile);
        assertNotNull(channel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildFromLastSplitSegmentWithNonExistentFile_FvbD1() throws IOException {
        File lastSegmentFile = new File(TEST_FILE_PATH + ".nonexistent");
        try {
            ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentFile);
            fail("Expected IOException");
        } catch (IOException e) {
            assertTrue(e.getMessage().contains("File not found"));
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildFromLastSplitSegmentWithInvalidFile_QEOk2() throws IOException {
        File lastSegmentFile = new File(TEST_FILE_PATH + ".invalid");
        try {
            ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentFile);
            fail("Expected IOException");
        } catch (IOException e) {
            assertTrue(e.getMessage().contains("Invalid file format"));
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildFromLastSplitSegmentWithEmptyFile_YtnM3() throws IOException {
        File lastSegmentFile = new File(TEST_FILE_PATH + ".empty");
        try {
            ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentFile);
            fail("Expected IOException");
        } catch (IOException e) {
            assertTrue(e.getMessage().contains("File is empty"));
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildFromLastSplitSegmentWithInvalidZipFile_mVBK4() throws IOException {
        File lastSegmentFile = new File(TEST_FILE_PATH + ".invalidzip");
        try {
            ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentFile);
            fail("Expected IOException");
        } catch (IOException e) {
            assertTrue(e.getMessage().contains("Invalid ZIP file"));
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildFromLastSplitSegmentWithInvalidSplitFile_Sulb5() throws IOException {
        File lastSegmentFile = new File(TEST_FILE_PATH + ".invalidsplit");
        try {
            ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentFile);
            fail("Expected IOException");
        } catch (IOException e) {
            assertTrue(e.getMessage().contains("Invalid split file"));
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildFromLastSplitSegmentWithInvalidSplitFile2_LCQa6() throws IOException {
        File lastSegmentFile = new File(TEST_FILE_PATH + ".invalidsplit2");
        try {
            ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentFile);
            fail("Expected IOException");
        } catch (IOException e) {
            assertTrue(e.getMessage().contains("Invalid split file"));
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_singleFile_qgNm3() throws IOException {
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    File lastSegmentFile = new File("last_segment.zip");
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
    assertNotNull(channel);
    assertEquals(1, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_multipleFiles_ZnBY4() throws IOException {
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    files.add(new File("file2.txt"));
    File lastSegmentFile = new File("last_segment.zip");
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
    assertNotNull(channel);
    assertEquals(2, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_lastSegmentFileInFiles_ISgq6() throws IOException {
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    files.add(new File("file2.txt"));
    File lastSegmentFile = new File("last_segment.zip");
    files.add(lastSegmentFile);
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
    assertNotNull(channel);
    assertEquals(3, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFiles_lastSegmentFileNotInFiles_differentName_AFJY7() throws IOException {
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    files.add(new File("file2.txt"));
    File lastSegmentFile = new File("last_segment.zip");
    files.add(new File("last_segment_different_name.zip"));
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
    assertNotNull(channel);
    assertEquals(3, channel.size());
}
}