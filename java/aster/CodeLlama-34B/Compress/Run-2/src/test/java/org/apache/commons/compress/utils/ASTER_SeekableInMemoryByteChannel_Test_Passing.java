/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SeekableInMemoryByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArray_Empty_UsFc0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    byte[] actual = channel.array();
    assertEquals(0, actual.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArray_NonEmpty_KDim1() {
    byte[] data = new byte[] { 1, 2, 3, 4, 5 };
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    byte[] actual = channel.array();
    assertEquals(data.length, actual.length);
    for (int i = 0; i < data.length; i++) {
        assertEquals(data[i], actual[i]);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate_ValidSize_cVQw0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.truncate(5);
    assertEquals(5, channel.size());
    assertEquals(5, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate_InvalidSize_jHfB1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    try {
        channel.truncate(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Size has to be in range 0.. " + Integer.MAX_VALUE, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate_SizeGreaterThanCurrentSize_FzxA2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.truncate(20);
    assertEquals(20, channel.size());
    assertEquals(20, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_DefaultConstructor_kunP0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    assertTrue(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_SizeConstructor_ejth1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertTrue(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpen_DataConstructor_zHCn2() {
    byte[] data = new byte[10];
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    assertTrue(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_ValidPosition_NQAw0() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.position(5);
    assertEquals(5, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_InvalidPosition_JqpU1() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    try {
        channel.position(-1);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Position has to be in range 0.. " + Integer.MAX_VALUE, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_MaxPosition_qvgE2() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.position(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_ZeroPosition_dXlf3() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.position(0);
    assertEquals(0, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_GreaterThanSize_gQbe4() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    try {
        channel.position(11);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Position has to be in range 0.. " + Integer.MAX_VALUE, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_DefaultConstructor_SqpI0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    assertEquals(0, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_SizeConstructor_GcFJ1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertEquals(0, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_DataConstructor_yboH2() {
    byte[] data = new byte[10];
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    assertEquals(0, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_DefaultConstructor_JOlf0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    assertEquals(0, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_SizeConstructor_dEax1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertEquals(10, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_DataConstructor_HHyY2() {
    byte[] data = new byte[10];
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    assertEquals(10, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_ZeroSize_LhBg3() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(0);
    assertEquals(0, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_NegativeSize_bgWp9() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(-1);
        assertEquals(0, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArray_NonEmpty_KDim1_1() {
    byte[] data = new byte[] { 1, 2, 3, 4, 5 };
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    byte[] actual = channel.array();
    for (int i = 0; i < data.length; i++) {
    }
    assertEquals(data.length, actual.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate_ValidSize_cVQw0_1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.truncate(5);
    assertEquals(5, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate_ValidSize_cVQw0_2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.truncate(5);
    assertEquals(5, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate_SizeGreaterThanCurrentSize_FzxA2_1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.truncate(20);
    assertEquals(20, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncate_SizeGreaterThanCurrentSize_FzxA2_2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.truncate(20);
    assertEquals(20, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_BAkF0_potl0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.close();
    assertTrue(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithData_yxoJ1_EgRO0() {
    byte[] data = new byte[10];
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    channel.close();
    assertTrue(channel.isOpen());
}
}