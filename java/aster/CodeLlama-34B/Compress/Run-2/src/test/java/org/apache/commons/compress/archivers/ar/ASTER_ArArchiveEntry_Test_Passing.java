/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import java.io.File;
import java.util.Date;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_LOCB0() {
    ArArchiveEntry entry = new ArArchiveEntry("file.txt", 100);
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_rQMR2() {
    ArArchiveEntry entry = new ArArchiveEntry("file.txt", 100);
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_ArDu3() {
    ArArchiveEntry entry1 = new ArArchiveEntry("file.txt", 100);
    ArArchiveEntry entry2 = new ArArchiveEntry("file2.txt", 100);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_DefaultConstructor_odRg0() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_NameLengthConstructor_JlVK2() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10, 1, 1, 1, 1);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_FileConstructor_bGew3() {
    File inputFile = new File("test.txt");
    ArArchiveEntry entry = new ArArchiveEntry(inputFile, "test");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_NullName_OkNX4() {
    ArArchiveEntry entry = new ArArchiveEntry(null, 10);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_EmptyName_cbGp5() {
    ArArchiveEntry entry = new ArArchiveEntry("", 10);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_ZeroLength_iMTq6() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 0);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId_UkUd0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithUserId_bCvf1() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 10, 20, 0755, 1000);
    assertEquals(20, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithFile_DNgC3() {
    File inputFile = new File("test.txt");
    ArArchiveEntry entry = new ArArchiveEntry(inputFile, "test.txt");
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_Constructor1_IlNz0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100L);
    assertEquals(100L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_Constructor3_yXtJ2() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100L, 100, 100, 100, 100L);
    assertEquals(100L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_Constructor4_ewsq3() {
    File inputFile = new File("test.txt");
    ArArchiveEntry entry = new ArArchiveEntry(inputFile, "test.txt");
    assertEquals(inputFile.length(), entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserId_mAlH0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
    assertEquals(0, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserIdWithNonZeroUserId_XAsl1() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 1, 0, 0, 0);
    assertEquals(1, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserIdWithNegativeUserId_zvQX2() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, -1, 0, 0, 0);
    assertEquals(-1, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserIdWithNullEntryName_eESI3() {
    ArArchiveEntry entry = new ArArchiveEntry(null, 100);
    assertEquals(0, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_dANF0() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    assertEquals(Objects.hash("test"), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_3_YjBE2() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10, 1, 2, 3, 4);
    assertEquals(Objects.hash("test"), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_4_Tkar3() {
    File inputFile = new File("test.txt");
    ArArchiveEntry entry = new ArArchiveEntry(inputFile, "test");
    assertEquals(Objects.hash("test"), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithValidName_IwvS0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100L);
    assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithNullName_aCKH2() {
    ArArchiveEntry entry = new ArArchiveEntry(null, 100L);
    assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithEmptyName_ucIw3() {
    ArArchiveEntry entry = new ArArchiveEntry("", 100L);
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_uLJL0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
    assertEquals(100, entry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithFile_KHtV2() {
    File inputFile = new File("test.txt");
    ArArchiveEntry entry = new ArArchiveEntry(inputFile, "test.txt");
    assertEquals(inputFile.length(), entry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithAllParameters_cGMc3() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 1000, 1000, 1000, 1000);
    assertEquals(100, entry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModeWithValidMode_iMFW0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 1000, 1000, 0755, 10000);
    assertEquals(0755, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModeWithInvalidMode_ndnM1() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 1000, 1000, -1, 10000);
    assertEquals(-1, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModeWithZeroMode_eFdW3() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 1000, 1000, 0, 10000);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedWithDifferentLength_vMki1() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
    assertNotEquals(50, entry.getLastModified());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedWithDifferentName_WXGA2() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
    assertNotEquals("test2.txt", entry.getLastModified());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedWithDifferentUserId_YAgv3() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 1, 1, 1, 1);
    assertNotEquals(2, entry.getLastModified());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_Rizz1_fid1() {
    ArArchiveEntry entry1 = new ArArchiveEntry("file.txt", 100);
    ArArchiveEntry entry2 = new ArArchiveEntry("file.txt", 100);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLength_fzUz4_fid1() {
    ArArchiveEntry entry1 = new ArArchiveEntry("file.txt", 100);
    ArArchiveEntry entry2 = new ArArchiveEntry("file.txt", 200);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentUserId_yJaz5_fid1() {
    ArArchiveEntry entry1 = new ArArchiveEntry("file.txt", 100, 1, 1, 1, 1);
    ArArchiveEntry entry2 = new ArArchiveEntry("file.txt", 100, 2, 1, 1, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentGroupId_ppdx6_fid1() {
    ArArchiveEntry entry1 = new ArArchiveEntry("file.txt", 100, 1, 1, 1, 1);
    ArArchiveEntry entry2 = new ArArchiveEntry("file.txt", 100, 1, 2, 1, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentMode_Uybp7_fid1() {
    ArArchiveEntry entry1 = new ArArchiveEntry("file.txt", 100, 1, 1, 1, 1);
    ArArchiveEntry entry2 = new ArArchiveEntry("file.txt", 100, 1, 1, 2, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLastModified_yZhS8_fid1() {
    ArArchiveEntry entry1 = new ArArchiveEntry("file.txt", 100, 1, 1, 1, 1);
    ArArchiveEntry entry2 = new ArArchiveEntry("file.txt", 100, 1, 1, 1, 2);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_NullFile_Eolt9_fid1() {
    File inputFile = null;
    ArArchiveEntry entry = new ArArchiveEntry("test", 0L);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetLastModifiedDate_QHYs0_fid1() {
		ArArchiveEntry entry = new ArArchiveEntry("test.txt", 1000);
		Date expected = new Date(1000 * 1000);
		Date actual = entry.getLastModifiedDate();
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetLastModifiedDateWithNullInput_HPxT2_fid1() {
		ArArchiveEntry entry = new ArArchiveEntry(null, 1000);
		Date expected = new Date(0);
		Date actual = entry.getLastModifiedDate();
	}
}