/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_null_NjkR0() {
    assertFalse(GzipUtils.isCompressedFileName(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_empty_pNMI1() {
    assertFalse(GzipUtils.isCompressedFileName(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_notCompressed_UMhi2() {
    assertFalse(GzipUtils.isCompressedFileName("file.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_compressed_TtSh3() {
    assertTrue(GzipUtils.isCompressedFileName("file.txt.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_compressedUpperCase_Ndvz4() {
    assertTrue(GzipUtils.isCompressedFileName("FILE.TXT.GZ"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_compressedWithPath_jGld6() {
    assertTrue(GzipUtils.isCompressedFileName("/path/to/file.txt.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_compressedWithPathAndUpperCase_IIIG7() {
    assertTrue(GzipUtils.isCompressedFileName("/PATH/TO/FILE.TXT.GZ"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_compressedWithMultipleExtensions_vpkF15() {
    assertTrue(GzipUtils.isCompressedFileName("file.txt.gz.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_compressedWithMultipleExtensionsAndUpperCase_KaqH16() {
    assertTrue(GzipUtils.isCompressedFileName("FILE.TXT.GZ.GZ"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_compressedWithMultipleExtensionsAndPath_stMb18() {
    assertTrue(GzipUtils.isCompressedFileName("/path/to/file.txt.gz.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_compressedWithMultipleExtensionsAndPathAndUpperCase_IMYg19() {
    assertTrue(GzipUtils.isCompressedFileName("/PATH/TO/FILE.TXT.GZ.GZ"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilename_QTIy0() {
    String fileName = "test.txt.gz";
    String expected = "test.txt";
    String actual = GzipUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithoutExtension_xccD1() {
    String fileName = "test";
    String expected = "test";
    String actual = GzipUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithMultipleExtensions_pddA2() {
    String fileName = "test.txt.gz.bz2";
    String expected = "test.txt.gz";
    String actual = GzipUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithInvalidExtension_vENE3() {
    String fileName = "test.txt.invalid";
    String expected = "test.txt";
    String actual = GzipUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithEmptyString_nBXu4() {
    String fileName = "";
    String expected = "";
    String actual = GzipUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithNull_lVrb5() {
    String fileName = null;
    String expected = null;
    String actual = GzipUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_null_ZIYu0() {
    assertFalse(GzipUtils.isCompressedFilename(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_empty_BiGD1() {
    assertFalse(GzipUtils.isCompressedFilename(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_nonCompressed_GvwT2() {
    assertFalse(GzipUtils.isCompressedFilename("file.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_compressed_yHWS3() {
    assertTrue(GzipUtils.isCompressedFilename("file.txt.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_compressedWithDotAndExtension_dATt5() {
    assertTrue(GzipUtils.isCompressedFilename("file.txt.gz.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_compressedWithDotAndMultipleExtensions_htON6() {
    assertTrue(GzipUtils.isCompressedFilename("file.txt.gz.txt.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_compressedWithDotAndMultipleExtensionsAndSpacesAndSpecialCharsAndUppercase_NtAM9() {
    assertTrue(GzipUtils.isCompressedFilename("file.txt.GZ.txt.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilename_pTdg0() {
    String fileName = "test.txt";
    String compressedFileName = GzipUtils.getCompressedFilename(fileName);
    assertEquals("test.txt.gz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithPath_yJuc1() {
    String fileName = "path/to/test.txt";
    String compressedFileName = GzipUtils.getCompressedFilename(fileName);
    assertEquals("path/to/test.txt.gz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithoutExtension_NYAz2() {
    String fileName = "test";
    String compressedFileName = GzipUtils.getCompressedFilename(fileName);
    assertEquals("test.gz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithMultipleExtensions_VKDN3() {
    String fileName = "test.txt.gz";
    String compressedFileName = GzipUtils.getCompressedFilename(fileName);
    assertEquals("test.txt.gz.gz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithInvalidExtension_dfkS4() {
    String fileName = "test.txt.invalid";
    String compressedFileName = GzipUtils.getCompressedFilename(fileName);
    assertEquals("test.txt.invalid.gz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithEmptyString_Lkbr5() {
    String fileName = "";
    String compressedFileName = GzipUtils.getCompressedFilename(fileName);
    assertEquals("", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithNull_foue6() {
    String fileName = null;
    String compressedFileName = GzipUtils.getCompressedFilename(fileName);
    assertNull(compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_null_lHtN0() {
    String fileName = null;
    String expected = null;
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_empty_qvzE1() {
    String fileName = "";
    String expected = "";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_valid_hkTa2() {
    String fileName = "file.txt.gz";
    String expected = "file.txt";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_invalid_cxKG3() {
    String fileName = "file.txt";
    String expected = "file.txt";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_nullExtension_mrfW4() {
    String fileName = "file.txt.";
    String expected = "file.txt";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_emptyExtension_lNhs5() {
    String fileName = "file.txt..";
    String expected = "file.txt";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_invalidExtension_Xwiq6() {
    String fileName = "file.txt.invalid";
    String expected = "file.txt";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_multipleDots_sWhV7() {
    String fileName = "file.txt.gz.gz";
    String expected = "file.txt";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_leadingDot_FJtC8() {
    String fileName = ".file.txt.gz";
    String expected = "file.txt";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_trailingDot_GOWb9() {
    String fileName = "file.txt.gz.";
    String expected = "file.txt";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_leadingAndTrailingDot_fLPH10() {
    String fileName = ".file.txt.gz.";
    String expected = "file.txt";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_multipleLeadingDots_uGKw11() {
    String fileName = "...file.txt.gz";
    String expected = "file.txt";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_multipleTrailingDots_vWLk12() {
    String fileName = "file.txt.gz...";
    String expected = "file.txt";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_leadingAndTrailingDots_hJzY13() {
    String fileName = "...file.txt.gz...";
    String expected = "file.txt";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_invalidCharacters_OGwP14() {
    String fileName = "file.txt.gz\0";
    String expected = "file.txt";
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_nEhB0_1() {
    assertNull(GzipUtils.getCompressedFileName(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_nEhB0_2() {
    assertEquals("", GzipUtils.getCompressedFileName(""));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_nEhB0_3() {
    assertEquals("test.txt.gz", GzipUtils.getCompressedFileName("test.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_nEhB0_4() {
    assertEquals("test.txt", GzipUtils.getCompressedFileName("test.txt.gz"));}
}