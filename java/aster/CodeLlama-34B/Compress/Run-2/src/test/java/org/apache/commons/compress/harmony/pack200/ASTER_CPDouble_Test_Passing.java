/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPDouble_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_NegativeInfinity_UQTb8() {
    CPDouble obj1 = new CPDouble(Double.NEGATIVE_INFINITY);
    CPDouble obj2 = new CPDouble(Double.NEGATIVE_INFINITY);
    int result = obj1.compareTo(obj2);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_Zero_NXHI9() {
    CPDouble obj1 = new CPDouble(0.0);
    CPDouble obj2 = new CPDouble(0.0);
    int result = obj1.compareTo(obj2);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_PositiveValue_hWoR0() {
    CPDouble doubleObj = new CPDouble(10.0);
    double result = doubleObj.getDouble();
    assertEquals(10.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_NegativeValue_megl1() {
    CPDouble doubleObj = new CPDouble(-10.0);
    double result = doubleObj.getDouble();
    assertEquals(-10.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_ZeroValue_lNsu2() {
    CPDouble doubleObj = new CPDouble(0.0);
    double result = doubleObj.getDouble();
    assertEquals(0.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_MaxValue_HNyA3() {
    CPDouble doubleObj = new CPDouble(Double.MAX_VALUE);
    double result = doubleObj.getDouble();
    assertEquals(Double.MAX_VALUE, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_MinValue_dlsb4() {
    CPDouble doubleObj = new CPDouble(Double.MIN_VALUE);
    double result = doubleObj.getDouble();
    assertEquals(Double.MIN_VALUE, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_NaN_ATIe5() {
    CPDouble doubleObj = new CPDouble(Double.NaN);
    double result = doubleObj.getDouble();
    assertTrue(Double.isNaN(result));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_Infinity_riaZ6() {
    CPDouble doubleObj = new CPDouble(Double.POSITIVE_INFINITY);
    double result = doubleObj.getDouble();
    assertTrue(Double.isInfinite(result));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_NegativeInfinity_bktS7() {
    CPDouble doubleObj = new CPDouble(Double.NEGATIVE_INFINITY);
    double result = doubleObj.getDouble();
    assertTrue(Double.isInfinite(result));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_Equal_rclE0() {
    CPDouble obj1 = new CPDouble(1.0);
    CPDouble obj2 = new CPDouble(1.0);
    int result = obj1.compareTo(obj2);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_Greater_ijhy1() {
    CPDouble obj1 = new CPDouble(2.0);
    CPDouble obj2 = new CPDouble(1.0);
    int result = obj1.compareTo(obj2);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_Less_TVAe2() {
    CPDouble obj1 = new CPDouble(1.0);
    CPDouble obj2 = new CPDouble(2.0);
    int result = obj1.compareTo(obj2);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_Null_LQtl3() {
    CPDouble obj1 = new CPDouble(1.0);
    CPDouble obj2 = null;
    int result = obj1.compareTo(obj2);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_SameObject_SPJh5() {
    CPDouble obj1 = new CPDouble(1.0);
    int result = obj1.compareTo(obj1);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_NaN_ZHgq6() {
    CPDouble obj1 = new CPDouble(Double.NaN);
    CPDouble obj2 = new CPDouble(Double.NaN);
    int result = obj1.compareTo(obj2);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_Infinity_gFoU7() {
    CPDouble obj1 = new CPDouble(Double.POSITIVE_INFINITY);
    CPDouble obj2 = new CPDouble(Double.POSITIVE_INFINITY);
    int result = obj1.compareTo(obj2);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_Null_bvnH8_zHGS0() {
    CPDouble doubleObj = new CPDouble(0.0);
    double result = doubleObj.getDouble();
    assertEquals(0.0, result);
}
}