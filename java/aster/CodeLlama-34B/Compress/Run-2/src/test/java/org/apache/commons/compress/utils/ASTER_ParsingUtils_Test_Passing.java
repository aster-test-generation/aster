/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ParsingUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_ValidInput_bpNF0() throws IOException {
    String value = "123";
    int expected = 123;
    int actual = ParsingUtils.parseIntValue(value);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_InvalidInput_OsjR1() throws IOException {
    String value = "abc";
    try {
        ParsingUtils.parseIntValue(value);
        fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
        assertTrue(e.getMessage().contains("For input string: \"abc\""));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_NullInput_OOcH2() throws IOException {
    String value = null;
    try {
        ParsingUtils.parseIntValue(value);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertTrue(e.getMessage().contains("Input string is null"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_EmptyInput_sphV3() throws IOException {
    String value = "";
    try {
        ParsingUtils.parseIntValue(value);
        fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
        assertTrue(e.getMessage().contains("Input string is empty"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_LeadingZero_ddVg4() throws IOException {
    String value = "0123";
    int expected = 123;
    int actual = ParsingUtils.parseIntValue(value);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_NegativeInput_DMUq5() throws IOException {
    String value = "-123";
    int expected = -123;
    int actual = ParsingUtils.parseIntValue(value);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_Base16_OPmF6() throws IOException {
    String value = "0x123";
    int expected = 291;
    int actual = ParsingUtils.parseIntValue(value, 16);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_Base8_usxR7() throws IOException {
    String value = "0123";
    int expected = 83;
    int actual = ParsingUtils.parseIntValue(value, 8);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_Base2_mPai8() throws IOException {
    String value = "0b1010";
    int expected = 10;
    int actual = ParsingUtils.parseIntValue(value, 2);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_InvalidBase_kuOZ9() throws IOException {
    String value = "0x123";
    try {
        ParsingUtils.parseIntValue(value, 3);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertTrue(e.getMessage().contains("Invalid base: 3"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_InvalidRadix_FUos10() throws IOException {
    String value = "0x123";
    try {
        ParsingUtils.parseIntValue(value, 10);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertTrue(e.getMessage().contains("Invalid radix: 10"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_ValidInput_Kzrz0() throws IOException {
    int result = ParsingUtils.parseIntValue("10", 10);
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_InvalidInput_VoZv1() throws IOException {
    try {
        ParsingUtils.parseIntValue("abc", 10);
        fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
        assertEquals("Unable to parse int from string value: abc", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_NullInput_OgSL2() throws IOException {
    try {
        ParsingUtils.parseIntValue(null, 10);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Value cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_EmptyInput_vFmP3() throws IOException {
    try {
        ParsingUtils.parseIntValue("", 10);
        fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
        assertEquals("Unable to parse int from string value: ", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_ValidInput_cmzd0() throws IOException {
    long expected = 1234567890;
    String value = "1234567890";
    long actual = ParsingUtils.parseLongValue(value);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_InvalidInput_oLGE1() throws IOException {
    String value = "abcdefghij";
    try {
        ParsingUtils.parseLongValue(value);
        fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_NullInput_PmEn2() throws IOException {
    String value = null;
    try {
        ParsingUtils.parseLongValue(value);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_EmptyInput_MCxx3() throws IOException {
    String value = "";
    try {
        ParsingUtils.parseLongValue(value);
        fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_InvalidRadix_onnj7() throws IOException {
    String value = "1234567890";
    try {
        ParsingUtils.parseLongValue(value, 2);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_ValidRadix_RLzJ8() throws IOException {
    long expected = 1234567890;
    String value = "1234567890";
    long actual = ParsingUtils.parseLongValue(value, 10);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_InvalidRadixAndInvalidInput_Deni9() throws IOException {
    String value = "abcdefghij";
    try {
        ParsingUtils.parseLongValue(value, 2);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_ValidRadixAndInvalidInput_uMQi10() throws IOException {
    String value = "abcdefghij";
    try {
        ParsingUtils.parseLongValue(value, 10);
        fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_ValidInput_sQbX0() throws IOException {
    long expected = 1234567890L;
    String value = "1234567890";
    int radix = 10;
    long actual = ParsingUtils.parseLongValue(value, radix);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_InvalidInput_RYcS1() throws IOException {
    String value = "abcdefghij";
    int radix = 10;
    try {
        ParsingUtils.parseLongValue(value, radix);
        fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
        assertEquals("Unable to parse long from string value: " + value, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_NullInput_GrtG2() throws IOException {
    String value = null;
    int radix = 10;
    try {
        ParsingUtils.parseLongValue(value, radix);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("value is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_EmptyInput_vvpU3() throws IOException {
    String value = "";
    int radix = 10;
    try {
        ParsingUtils.parseLongValue(value, radix);
        fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
        assertEquals("Unable to parse long from string value: " + value, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_InvalidRadix_fCOy4() throws IOException {
    String value = "1234567890";
    int radix = 37;
    try {
        ParsingUtils.parseLongValue(value, radix);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Radix must be between 2 and 36", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_NegativeRadix_tkrZ5() throws IOException {
    String value = "1234567890";
    int radix = -10;
    try {
        ParsingUtils.parseLongValue(value, radix);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Radix must be between 2 and 36", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_ZeroRadix_qHeB6() throws IOException {
    String value = "1234567890";
    int radix = 0;
    try {
        ParsingUtils.parseLongValue(value, radix);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Radix must be between 2 and 36", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_MaxValue_Oaoi7() throws IOException {
    String value = "9223372036854775807";
    int radix = 10;
    long expected = 9223372036854775807L;
    long actual = ParsingUtils.parseLongValue(value, radix);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_MinValue_gpXL8() throws IOException {
    String value = "-9223372036854775808";
    int radix = 10;
    long expected = -9223372036854775808L;
    long actual = ParsingUtils.parseLongValue(value, radix);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_NullRadix_NZfi11_bhIG0() throws IOException {
    String value = "1234567890";
    try {
        ParsingUtils.parseLongValue(value, 10);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
}