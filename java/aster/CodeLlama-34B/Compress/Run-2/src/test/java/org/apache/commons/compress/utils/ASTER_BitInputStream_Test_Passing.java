/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteOrder;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BitInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_cOGO0() throws IOException {
    InputStream in = mock(InputStream.class);
    ByteOrder byteOrder = mock(ByteOrder.class);
    BitInputStream bitInputStream = new BitInputStream(in, byteOrder);
    bitInputStream.close();
    verify(in).close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithIOException_aTUq1() throws IOException {
    InputStream in = mock(InputStream.class);
    ByteOrder byteOrder = mock(ByteOrder.class);
    BitInputStream bitInputStream = new BitInputStream(in, byteOrder);
    doThrow(new IOException()).when(in).close();
    try {
        bitInputStream.close();
        fail("Expected IOException to be thrown");
    } catch (IOException e) {
        assertTrue(e instanceof IOException);
    }
}
}