/**
 * Generated by Aster
 */
package org.apache.commons.compress.changes;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ChangeSetResults_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_EmptyFileName_iKxY0() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("");
    assertEquals(0, changeSetResults.getAddedFromChangeSet().size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_NullFileName_OwGS1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet(null);
    assertEquals(0, changeSetResults.getAddedFromChangeSet().size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_ValidFileName_zCti2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("file1.txt");
    assertEquals(1, changeSetResults.getAddedFromChangeSet().size());
    assertTrue(changeSetResults.getAddedFromChangeSet().contains("file1.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_MultipleFiles_CAjI3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("file1.txt");
    changeSetResults.addedFromChangeSet("file2.txt");
    assertEquals(2, changeSetResults.getAddedFromChangeSet().size());
    assertTrue(changeSetResults.getAddedFromChangeSet().contains("file1.txt"));
    assertTrue(changeSetResults.getAddedFromChangeSet().contains("file2.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_DuplicateFiles_WYDe4() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("file1.txt");
    changeSetResults.addedFromChangeSet("file1.txt");
    assertEquals(1, changeSetResults.getAddedFromChangeSet().size());
    assertTrue(changeSetResults.getAddedFromChangeSet().contains("file1.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasBeenAdded_notAdded_mIER2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    assertFalse(changeSetResults.hasBeenAdded("file3.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSet_EmptyList_bNpn0() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    assertTrue(addedFromChangeSet.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSet_NonEmptyList_cdjQ1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    assertFalse(addedFromChangeSet.isEmpty());
    assertEquals(1, addedFromChangeSet.size());
    assertEquals("added", addedFromChangeSet.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSet_Null_uJtp2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    assertNull(addedFromChangeSet);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStream_LMKQ0() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    assertEquals(0, addedFromStream.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithOneElement_KplR1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    assertEquals(1, addedFromStream.size());
    assertEquals("element1", addedFromStream.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithMultipleElements_Skuc2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    addedFromStream.add("element2");
    addedFromStream.add("element3");
    assertEquals(3, addedFromStream.size());
    assertEquals("element1", addedFromStream.get(0));
    assertEquals("element2", addedFromStream.get(1));
    assertEquals("element3", addedFromStream.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithNullElement_xoNM3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add(null);
    assertEquals(1, addedFromStream.size());
    assertNull(addedFromStream.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithEmptyString_aEAh4() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("");
    assertEquals(1, addedFromStream.size());
    assertEquals("", addedFromStream.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithDuplicateElements_ClGv5() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    addedFromStream.add("element1");
    assertEquals(2, addedFromStream.size());
    assertEquals("element1", addedFromStream.get(0));
    assertEquals("element1", addedFromStream.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithNegativeIndex_EyyC7() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    assertEquals(1, addedFromStream.size());
    assertEquals("element1", addedFromStream.get(-1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithOutOfBoundsIndex_wDDu8() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    assertEquals(1, addedFromStream.size());
    assertEquals("element1", addedFromStream.get(10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeleted_emptyList_XfrL0() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> deleted = changeSetResults.getDeleted();
    assertEquals(0, deleted.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeleted_nonEmptyList_tYHF1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> deleted = changeSetResults.getDeleted();
    assertEquals(1, deleted.size());
    assertEquals("deleted_item", deleted.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeleted_nullList_Xlsi2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> deleted = changeSetResults.getDeleted();
    assertNull(deleted);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_emptyString_SAGU0() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("");
    assertEquals(0, changeSetResults.getAddedFromStream().size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_nullString_aTXv1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream(null);
    assertEquals(0, changeSetResults.getAddedFromStream().size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_validString_sqXR2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    assertEquals(1, changeSetResults.getAddedFromStream().size());
    assertEquals("file1.txt", changeSetResults.getAddedFromStream().get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_duplicateString_qPOO3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file1.txt");
    assertEquals(1, changeSetResults.getAddedFromStream().size());
    assertEquals("file1.txt", changeSetResults.getAddedFromStream().get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStrings_UFfJ4() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    assertEquals(2, changeSetResults.getAddedFromStream().size());
    assertEquals("file1.txt", changeSetResults.getAddedFromStream().get(0));
    assertEquals("file2.txt", changeSetResults.getAddedFromStream().get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_emptyString_YoXh0() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted("");
    assertTrue(changeSetResults.getDeleted().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_null_PSlk1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted(null);
    assertTrue(changeSetResults.getDeleted().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_validFileName_QwDT2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted("file1.txt");
    assertEquals(1, changeSetResults.getDeleted().size());
    assertTrue(changeSetResults.getDeleted().contains("file1.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_duplicateFileName_Piqj3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted("file1.txt");
    changeSetResults.deleted("file1.txt");
    assertEquals(1, changeSetResults.getDeleted().size());
    assertTrue(changeSetResults.getDeleted().contains("file1.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_differentFileNames_tyBf4() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted("file1.txt");
    changeSetResults.deleted("file2.txt");
    assertEquals(2, changeSetResults.getDeleted().size());
    assertTrue(changeSetResults.getDeleted().contains("file1.txt"));
    assertTrue(changeSetResults.getDeleted().contains("file2.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_nullAndEmptyString_jirq5() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted(null);
    changeSetResults.deleted("");
    assertEquals(0, changeSetResults.getDeleted().size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_nullAndValidFileName_kLBj6() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted(null);
    changeSetResults.deleted("file1.txt");
    assertEquals(1, changeSetResults.getDeleted().size());
    assertTrue(changeSetResults.getDeleted().contains("file1.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_emptyStringAndValidFileName_qfQt7() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted("");
    changeSetResults.deleted("file1.txt");
    assertEquals(1, changeSetResults.getDeleted().size());
    assertTrue(changeSetResults.getDeleted().contains("file1.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_nullAndEmptyStringAndValidFileName_DGoL8() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted(null);
    changeSetResults.deleted("");
    changeSetResults.deleted("file1.txt");
    assertEquals(1, changeSetResults.getDeleted().size());
    assertTrue(changeSetResults.getDeleted().contains("file1.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_ValidFileName_zCti2_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("file1.txt");
    assertEquals(1, changeSetResults.getAddedFromChangeSet().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_ValidFileName_zCti2_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("file1.txt");
    assertTrue(changeSetResults.getAddedFromChangeSet().contains("file1.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_MultipleFiles_CAjI3_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("file1.txt");
    changeSetResults.addedFromChangeSet("file2.txt");
    assertEquals(2, changeSetResults.getAddedFromChangeSet().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_MultipleFiles_CAjI3_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("file1.txt");
    changeSetResults.addedFromChangeSet("file2.txt");
    assertTrue(changeSetResults.getAddedFromChangeSet().contains("file1.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_MultipleFiles_CAjI3_3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("file1.txt");
    changeSetResults.addedFromChangeSet("file2.txt");
    assertTrue(changeSetResults.getAddedFromChangeSet().contains("file2.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_DuplicateFiles_WYDe4_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("file1.txt");
    changeSetResults.addedFromChangeSet("file1.txt");
    assertEquals(1, changeSetResults.getAddedFromChangeSet().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromChangeSet_DuplicateFiles_WYDe4_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromChangeSet("file1.txt");
    changeSetResults.addedFromChangeSet("file1.txt");
    assertTrue(changeSetResults.getAddedFromChangeSet().contains("file1.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSet_NonEmptyList_cdjQ1_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    assertFalse(addedFromChangeSet.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSet_NonEmptyList_cdjQ1_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    assertEquals(1, addedFromChangeSet.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromChangeSet_NonEmptyList_cdjQ1_3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromChangeSet = changeSetResults.getAddedFromChangeSet();
    assertEquals("added", addedFromChangeSet.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithOneElement_KplR1_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    assertEquals(1, addedFromStream.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithOneElement_KplR1_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    assertEquals("element1", addedFromStream.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithMultipleElements_Skuc2_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    addedFromStream.add("element2");
    addedFromStream.add("element3");
    assertEquals(3, addedFromStream.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithMultipleElements_Skuc2_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    addedFromStream.add("element2");
    addedFromStream.add("element3");
    assertEquals("element1", addedFromStream.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithMultipleElements_Skuc2_3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    addedFromStream.add("element2");
    addedFromStream.add("element3");
    assertEquals("element2", addedFromStream.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithMultipleElements_Skuc2_4() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    addedFromStream.add("element2");
    addedFromStream.add("element3");
    assertEquals("element3", addedFromStream.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithNullElement_xoNM3_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add(null);
    assertEquals(1, addedFromStream.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithNullElement_xoNM3_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add(null);
    assertNull(addedFromStream.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithEmptyString_aEAh4_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("");
    assertEquals(1, addedFromStream.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithEmptyString_aEAh4_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("");
    assertEquals("", addedFromStream.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithDuplicateElements_ClGv5_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    addedFromStream.add("element1");
    assertEquals(2, addedFromStream.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithDuplicateElements_ClGv5_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    addedFromStream.add("element1");
    assertEquals("element1", addedFromStream.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithDuplicateElements_ClGv5_3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    addedFromStream.add("element1");
    assertEquals("element1", addedFromStream.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithNegativeIndex_EyyC7_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    assertEquals("element1", addedFromStream.get(-1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithOutOfBoundsIndex_wDDu8_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    assertEquals("element1", addedFromStream.get(10));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeleted_nonEmptyList_tYHF1_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> deleted = changeSetResults.getDeleted();
    assertEquals(1, deleted.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeleted_nonEmptyList_tYHF1_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> deleted = changeSetResults.getDeleted();
    assertEquals("deleted_item", deleted.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_validString_sqXR2_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    assertEquals(1, changeSetResults.getAddedFromStream().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_validString_sqXR2_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    assertEquals("file1.txt", changeSetResults.getAddedFromStream().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_duplicateString_qPOO3_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file1.txt");
    assertEquals(1, changeSetResults.getAddedFromStream().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_duplicateString_qPOO3_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file1.txt");
    assertEquals("file1.txt", changeSetResults.getAddedFromStream().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStrings_UFfJ4_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    assertEquals(2, changeSetResults.getAddedFromStream().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStrings_UFfJ4_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    assertEquals("file1.txt", changeSetResults.getAddedFromStream().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_multipleStrings_UFfJ4_3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.addedFromStream("file1.txt");
    changeSetResults.addedFromStream("file2.txt");
    assertEquals("file2.txt", changeSetResults.getAddedFromStream().get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_validFileName_QwDT2_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted("file1.txt");
    assertEquals(1, changeSetResults.getDeleted().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_validFileName_QwDT2_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted("file1.txt");
    assertTrue(changeSetResults.getDeleted().contains("file1.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_duplicateFileName_Piqj3_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted("file1.txt");
    changeSetResults.deleted("file1.txt");
    assertEquals(1, changeSetResults.getDeleted().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_duplicateFileName_Piqj3_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted("file1.txt");
    changeSetResults.deleted("file1.txt");
    assertTrue(changeSetResults.getDeleted().contains("file1.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_differentFileNames_tyBf4_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted("file1.txt");
    changeSetResults.deleted("file2.txt");
    assertEquals(2, changeSetResults.getDeleted().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_differentFileNames_tyBf4_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted("file1.txt");
    changeSetResults.deleted("file2.txt");
    assertTrue(changeSetResults.getDeleted().contains("file1.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_differentFileNames_tyBf4_3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted("file1.txt");
    changeSetResults.deleted("file2.txt");
    assertTrue(changeSetResults.getDeleted().contains("file2.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_nullAndValidFileName_kLBj6_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted(null);
    changeSetResults.deleted("file1.txt");
    assertEquals(1, changeSetResults.getDeleted().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_nullAndValidFileName_kLBj6_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted(null);
    changeSetResults.deleted("file1.txt");
    assertTrue(changeSetResults.getDeleted().contains("file1.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_emptyStringAndValidFileName_qfQt7_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted("");
    changeSetResults.deleted("file1.txt");
    assertEquals(1, changeSetResults.getDeleted().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_emptyStringAndValidFileName_qfQt7_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted("");
    changeSetResults.deleted("file1.txt");
    assertTrue(changeSetResults.getDeleted().contains("file1.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_nullAndEmptyStringAndValidFileName_DGoL8_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted(null);
    changeSetResults.deleted("");
    changeSetResults.deleted("file1.txt");
    assertEquals(1, changeSetResults.getDeleted().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeleted_nullAndEmptyStringAndValidFileName_DGoL8_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    changeSetResults.deleted(null);
    changeSetResults.deleted("");
    changeSetResults.deleted("file1.txt");
    assertTrue(changeSetResults.getDeleted().contains("file1.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithDifferentTypes_eEIG6_XtDk0_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    addedFromStream.add("1");
    assertEquals(2, addedFromStream.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithDifferentTypes_eEIG6_XtDk0_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    addedFromStream.add("1");
    assertEquals("element1", addedFromStream.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAddedFromStreamWithDifferentTypes_eEIG6_XtDk0_3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> addedFromStream = changeSetResults.getAddedFromStream();
    addedFromStream.add("element1");
    addedFromStream.add("1");
    assertEquals("1", addedFromStream.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_validList_WPdC8_Lbsm0_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> files = Arrays.asList("file1.txt", "file2.txt");
    changeSetResults.addedFromStream(files.get(0));
    assertEquals(2, changeSetResults.getAddedFromStream().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_validList_WPdC8_Lbsm0_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> files = Arrays.asList("file1.txt", "file2.txt");
    changeSetResults.addedFromStream(files.get(0));
    assertEquals("file1.txt", changeSetResults.getAddedFromStream().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_validList_WPdC8_Lbsm0_3() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> files = Arrays.asList("file1.txt", "file2.txt");
    changeSetResults.addedFromStream(files.get(0));
    assertEquals("file2.txt", changeSetResults.getAddedFromStream().get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_duplicateList_ared9_rVpx0_1() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> files = Arrays.asList("file1.txt", "file1.txt");
    changeSetResults.addedFromStream(files.get(0));
    assertEquals(1, changeSetResults.getAddedFromStream().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddedFromStream_duplicateList_ared9_rVpx0_2() {
    ChangeSetResults changeSetResults = new ChangeSetResults();
    List<String> files = Arrays.asList("file1.txt", "file1.txt");
    changeSetResults.addedFromStream(files.get(0));
    assertEquals("file1.txt", changeSetResults.getAddedFromStream().get(0));}
}