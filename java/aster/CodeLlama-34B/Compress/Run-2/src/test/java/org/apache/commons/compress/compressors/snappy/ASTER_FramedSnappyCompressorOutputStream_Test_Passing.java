/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.snappy;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FramedSnappyCompressorOutputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMask_1_xxfD0() {
    long x = 0x1234567890ABCDEFL;
    long expected = 0x1234567890ABCDEFL;
    long actual = FramedSnappyCompressorOutputStream.mask(x);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithException_mwku2() throws IOException {
    FramedSnappyCompressorOutputStream compressor = new FramedSnappyCompressorOutputStream(new ByteArrayOutputStream());
    try {
        compressor.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithException_Ches2() throws IOException {
    FramedSnappyCompressorOutputStream compressor = new FramedSnappyCompressorOutputStream(new ByteArrayOutputStream());
    try {
        compressor.close();
        fail("Expected IOException");
    } catch (IOException e) {
        assertTrue(e instanceof IOException);
    }
}
}