/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpBands_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpUTF8_IUTW0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpUTF8 = cpBands.getCpUTF8();
        assertNotNull(cpUTF8);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpUTF8_IUTW0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpUTF8 = cpBands.getCpUTF8();
        assertEquals(1, cpUTF8.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpUTF8_IUTW0_3() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpUTF8 = cpBands.getCpUTF8();
        assertEquals("UTF-8", cpUTF8[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptor_VZXX0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpDescriptor = cpBands.getCpDescriptor();
        assertNotNull(cpDescriptor);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptor_VZXX0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpDescriptor = cpBands.getCpDescriptor();
        assertEquals(1, cpDescriptor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptor_VZXX0_3() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpDescriptor = cpBands.getCpDescriptor();
        assertEquals("CP", cpDescriptor[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptorWithNullSegment_WvnK1() {
        CpBands cpBands = new CpBands(null);
        String[] cpDescriptor = cpBands.getCpDescriptor();
        assertNull(cpDescriptor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptorWithEmptySegment_EhIf2_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpDescriptor = cpBands.getCpDescriptor();
        assertEquals(0, cpDescriptor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantPoolWithCpAndValue_jRbS1() throws Pack200Exception {
    CpBands cpBands = new CpBands(new Segment());
    SegmentConstantPool pool = cpBands.getConstantPool();
    ConstantPoolEntry entry = pool.getConstantPoolEntry(1, 100L);
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntry_pYKW2() throws Pack200Exception {
    CpBands cpBands = new CpBands(new Segment());
    SegmentConstantPool pool = cpBands.getConstantPool();
    ConstantPoolEntry entry = pool.getClassPoolEntry("java.lang.String");
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_nPJy3() throws Pack200Exception {
    CpBands cpBands = new CpBands(new Segment());
    SegmentConstantPool pool = cpBands.getConstantPool();
    ClassFileEntry entry = pool.getValue(1, 100L);
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitMethodPoolEntry_EyPa4() throws Pack200Exception {
    CpBands cpBands = new CpBands(new Segment());
    SegmentConstantPool pool = cpBands.getConstantPool();
    ConstantPoolEntry entry = pool.getInitMethodPoolEntry(1, 100L, "java.lang.String");
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSpecificPoolEntry_gNSX5() throws Pack200Exception {
    CpBands cpBands = new CpBands(new Segment());
    SegmentConstantPool pool = cpBands.getConstantPool();
    ConstantPoolEntry entry = pool.getClassSpecificPoolEntry(1, 100L, "java.lang.String");
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameInts_IqfF0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpDescriptorNameInts = cpBands.getCpDescriptorNameInts();
    for (int i = 0; i < 10; i++) {
    }
    assertNotNull(cpDescriptorNameInts);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameInts_IqfF0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpDescriptorNameInts = cpBands.getCpDescriptorNameInts();
    for (int i = 0; i < 10; i++) {
    }
    assertEquals(10, cpDescriptorNameInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameIntsWithNullSegment_zKeT1() {
    CpBands cpBands = new CpBands(null);
    int[] cpDescriptorNameInts = cpBands.getCpDescriptorNameInts();
    assertNull(cpDescriptorNameInts);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpFieldClass_xKJG0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpFieldClass = cpBands.getCpFieldClass();
        assertNotNull(cpFieldClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpFieldClass_xKJG0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpFieldClass = cpBands.getCpFieldClass();
        assertEquals(1, cpFieldClass.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpFieldClass_xKJG0_3() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpFieldClass = cpBands.getCpFieldClass();
        assertEquals("cpFieldClass", cpFieldClass[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_hxja0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String string = "test";
        CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string);
        assertEquals(string, cpUTF8.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8ValueWithEmptyString_Oezs1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String string = "";
        CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string);
        assertEquals(0, cpUTF8.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8ValueWithNullString_MzZk2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String string = null;
        CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string);
        assertNull(cpUTF8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8ValueWithInvalidString_BJwd3() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String string = "invalid";
        CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string);
        assertNull(cpUTF8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8ValueWithValidString_DAGX4_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String string = "valid";
        CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string);
        assertNotNull(cpUTF8);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8ValueWithValidString_DAGX4_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String string = "valid";
        CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string);
        assertEquals(string, cpUTF8.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8ValueWithValidStringAndFalseParameter_wuWU5_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String string = "valid";
        CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string, false);
        assertEquals(string, cpUTF8.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8ValueWithValidStringAndTrueParameter_eMOW6_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String string = "valid";
        CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string, true);
        assertNotNull(cpUTF8);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8ValueWithValidStringAndTrueParameter_eMOW6_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String string = "valid";
        CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string, true);
        assertEquals(string, cpUTF8.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8ValueWithInvalidStringAndFalseParameter_etJF7() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String string = "invalid";
        CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string, false);
        assertNull(cpUTF8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8ValueWithInvalidStringAndTrueParameter_thMI8() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String string = "invalid";
        CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string, true);
        assertNull(cpUTF8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8ValueWithNullStringAndFalseParameter_eHYK9() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String string = null;
        CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string, false);
        assertNull(cpUTF8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_string_xSNd0_1() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "TestString";
    CPClass cpString = cpBands.cpClassValue(string);
    assertEquals(string, cpString.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_string_xSNd0_2() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "TestString";
    CPClass cpString = cpBands.cpClassValue(string);
    assertEquals(-1, cpString.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_index_UTGL1_1() {
    CpBands cpBands = new CpBands(new Segment());
    int index = 10;
    CPClass cpClass = cpBands.cpClassValue(index);
    assertEquals(index, cpClass.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_index_UTGL1_2() {
    CpBands cpBands = new CpBands(new Segment());
    int index = 10;
    CPClass cpClass = cpBands.cpClassValue(index);
    assertEquals("TestClass", cpClass.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_null_yPwj2() {
    CpBands cpBands = new CpBands(new Segment());
    String string = null;
    CPClass cpString = cpBands.cpClassValue(string);
    assertNull(cpString);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptor_bMxC0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpMethodDescriptor = cpBands.getCpMethodDescriptor();
    assertNotNull(cpMethodDescriptor);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptor_bMxC0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpMethodDescriptor = cpBands.getCpMethodDescriptor();
    assertEquals(1, cpMethodDescriptor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptor_bMxC0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpMethodDescriptor = cpBands.getCpMethodDescriptor();
    assertEquals("cpMethodDescriptor", cpMethodDescriptor[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptorWithNullSegment_rPfS1() {
    CpBands cpBands = new CpBands(null);
    String[] cpMethodDescriptor = cpBands.getCpMethodDescriptor();
    assertNull(cpMethodDescriptor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptorWithEmptySegment_TuDW2_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpMethodDescriptor = cpBands.getCpMethodDescriptor();
    assertEquals(0, cpMethodDescriptor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFieldValueWithInvalidIndex_DdIG2() {
    CpBands cpBands = new CpBands(new Segment());
    CPFieldRef cpFieldRef = cpBands.cpFieldValue(-1);
    assertNull(cpFieldRef);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_string_searchForIndex_true_mBMZ0() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "test";
    boolean searchForIndex = true;
    CPUTF8 cputf8 = cpBands.cpUTF8Value(string, searchForIndex);
    assertEquals(cputf8.hashCode(), 123456);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_string_searchForIndex_false_gtsg1() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "test";
    boolean searchForIndex = false;
    CPUTF8 cputf8 = cpBands.cpUTF8Value(string, searchForIndex);
    assertEquals(cputf8.hashCode(), 123456);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_string_null_searchForIndex_true_xlhl2() {
    CpBands cpBands = new CpBands(new Segment());
    String string = null;
    boolean searchForIndex = true;
    CPUTF8 cputf8 = cpBands.cpUTF8Value(string, searchForIndex);
    assertNull(cputf8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_string_null_searchForIndex_false_Cbhp3() {
    CpBands cpBands = new CpBands(new Segment());
    String string = null;
    boolean searchForIndex = false;
    CPUTF8 cputf8 = cpBands.cpUTF8Value(string, searchForIndex);
    assertNull(cputf8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_string_empty_searchForIndex_true_ZHah4() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "";
    boolean searchForIndex = true;
    CPUTF8 cputf8 = cpBands.cpUTF8Value(string, searchForIndex);
    assertNull(cputf8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpIMethodClass_drjL0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpIMethodClass = cpBands.getCpIMethodClass();
        assertNotNull(cpIMethodClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpIMethodClass_drjL0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpIMethodClass = cpBands.getCpIMethodClass();
        assertEquals(1, cpIMethodClass.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpIMethodClass_drjL0_3() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpIMethodClass = cpBands.getCpIMethodClass();
        assertEquals("CP_I_METHOD_CLASS", cpIMethodClass[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpInt_PYyD0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpInt = cpBands.getCpInt();
    for (int i = 0; i < cpInt.length; i++) {
    }
    assertNotNull(cpInt);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpInt_PYyD0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpInt = cpBands.getCpInt();
    for (int i = 0; i < cpInt.length; i++) {
    }
    assertEquals(10, cpInt.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValueWithInvalidIndex_uwpx1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = -1;
    CPClass cpClass = cpBands.cpClassValue(index);
    assertNull(cpClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValueWithDifferentIndex_bjjL3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index1 = 0;
    int index2 = 1;
    CPClass cpClass1 = cpBands.cpClassValue(index1);
    CPClass cpClass2 = cpBands.cpClassValue(index2);
    assertNotEquals(cpClass1, cpClass2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValueWithSameIndex_QprD4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 0;
    CPClass cpClass1 = cpBands.cpClassValue(index);
    CPClass cpClass2 = cpBands.cpClassValue(index);
    assertEquals(cpClass1, cpClass2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValueWithNullCpClass_QYGv5() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 0;
    CPClass cpClass = cpBands.cpClassValue(index);
    assertNotNull(cpClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValueWithNullCpUTF8Value_OnBl6() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 0;
    CPClass cpClass = cpBands.cpClassValue(index);
    assertNotNull(cpClass.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValueWithNullGlobalIndex_PZia8() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 0;
    CPClass cpClass = cpBands.cpClassValue(index);
    assertNotNull(cpClass.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorTypeInts_XhtE0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] expected = new int[] {1, 2, 3};
    int[] actual = cpBands.getCpDescriptorTypeInts();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_AhKg0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        assertNotNull(cpLong);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_AhKg0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        assertEquals(10, cpLong.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_AhKg0_3() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        assertEquals(1, cpLong[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_AhKg0_4() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        assertEquals(2, cpLong[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_AhKg0_5() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        assertEquals(3, cpLong[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_AhKg0_6() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        assertEquals(4, cpLong[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_AhKg0_7() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        assertEquals(5, cpLong[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_AhKg0_8() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        assertEquals(6, cpLong[5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_AhKg0_9() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        assertEquals(7, cpLong[6]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_AhKg0_10() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        assertEquals(8, cpLong[7]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_AhKg0_11() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        assertEquals(9, cpLong[8]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_AhKg0_12() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        assertEquals(10, cpLong[9]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpMethodValueWithInvalidIndex_SZuy1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = -1;
    CPMethodRef cpMethodRef = cpBands.cpMethodValue(index);
    assertNull(cpMethodRef);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpMethodValueWithNullSegment_dhHm2() {
    Segment segment = null;
    CpBands cpBands = new CpBands(segment);
    int index = 0;
    CPMethodRef cpMethodRef = cpBands.cpMethodValue(index);
    assertNull(cpMethodRef);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpMethodValueWithNullCpBands_nuMo3() {
    CpBands cpBands = null;
    int index = 0;
    CPMethodRef cpMethodRef = cpBands.cpMethodValue(index);
    assertNull(cpMethodRef);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpSignature_sJcw0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpSignature = cpBands.getCpSignature();
        assertNotNull(cpSignature);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpSignature_sJcw0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpSignature = cpBands.getCpSignature();
        assertEquals(1, cpSignature.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpSignature_sJcw0_3() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpSignature = cpBands.getCpSignature();
        assertEquals("CP", cpSignature[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpStringValue_InvalidIndex_DfxE1() {
    CpBands cpBands = new CpBands(new Segment());
    int index = -1;
    CPString cpString = cpBands.cpStringValue(index);
    assertNull(cpString);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpNameAndTypeValue_null_ObjR2() {
    CpBands cpBands = new CpBands(new Segment());
    String descriptor = null;
    CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(descriptor);
    assertNull(cpNameAndType);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_ValidIndex_nVSf0_1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(0);
    assertNotNull(cputf8);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_ValidIndex_nVSf0_2() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(0);
    assertEquals(0, cputf8.getGlobalIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_InvalidIndex_jIFx1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(-1);
    assertNull(cputf8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_DuplicateString_znDo2_1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(0);
    CPUTF8 cputf8Duplicate = cpBands.cpUTF8Value(0);
    assertNotNull(cputf8);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_DuplicateString_znDo2_2() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(0);
    CPUTF8 cputf8Duplicate = cpBands.cpUTF8Value(0);
    assertEquals(0, cputf8.getGlobalIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_DuplicateString_znDo2_3() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(0);
    CPUTF8 cputf8Duplicate = cpBands.cpUTF8Value(0);
    assertNotNull(cputf8Duplicate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_DuplicateString_znDo2_4() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(0);
    CPUTF8 cputf8Duplicate = cpBands.cpUTF8Value(0);
    assertEquals(0, cputf8Duplicate.getGlobalIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_DuplicateString_znDo2_5() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(0);
    CPUTF8 cputf8Duplicate = cpBands.cpUTF8Value(0);
    assertSame(cputf8, cputf8Duplicate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodClass_dGlQ0_jqsm0_1() {
    CpBands cpBands = new CpBands(new Segment());
    String[] cpMethodClass = cpBands.getCpMethodClass();
    assertNotNull(cpMethodClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodClass_dGlQ0_jqsm0_2() {
    CpBands cpBands = new CpBands(new Segment());
    String[] cpMethodClass = cpBands.getCpMethodClass();
    assertEquals(2, cpMethodClass.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodClass_dGlQ0_jqsm0_3() {
    CpBands cpBands = new CpBands(new Segment());
    String[] cpMethodClass = cpBands.getCpMethodClass();
    assertEquals("CP", cpMethodClass[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodClass_dGlQ0_jqsm0_4() {
    CpBands cpBands = new CpBands(new Segment());
    String[] cpMethodClass = cpBands.getCpMethodClass();
    assertEquals("Bands", cpMethodClass[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodClassWithEmptySegment_WefC2_hdKB0_2() {
    CpBands cpBands = new CpBands(new Segment());
    String[] cpMethodClass = cpBands.getCpMethodClass();
    assertEquals(0, cpMethodClass.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIntegerValue_ValidIndex_drfi0_OYGE0() {
    CpBands cpBands = new CpBands(new Segment());
    CPInteger cpInteger = cpBands.cpIntegerValue(0);
    assertEquals(0, cpInteger.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptorWithMultipleSegments_tKlf3_fikF0_1() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    CpBands cpBands = new CpBands(segment1);
    String[] cpMethodDescriptor = cpBands.getCpMethodDescriptor();
    assertNotNull(cpMethodDescriptor);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptorWithMultipleSegments_tKlf3_fikF0_2() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    CpBands cpBands = new CpBands(segment1);
    String[] cpMethodDescriptor = cpBands.getCpMethodDescriptor();
    assertEquals(2, cpMethodDescriptor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptorWithMultipleSegments_tKlf3_fikF0_3() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    CpBands cpBands = new CpBands(segment1);
    String[] cpMethodDescriptor = cpBands.getCpMethodDescriptor();
    assertEquals("cpMethodDescriptor", cpMethodDescriptor[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptorWithMultipleSegments_tKlf3_fikF0_4() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    CpBands cpBands = new CpBands(segment1);
    String[] cpMethodDescriptor = cpBands.getCpMethodDescriptor();
    assertEquals("cpMethodDescriptor", cpMethodDescriptor[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptorWithEmptySegmentAndNonNullSegment_hYXV8_WLsv0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpMethodDescriptor = cpBands.getCpMethodDescriptor();
    assertEquals(2, cpMethodDescriptor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptorWithEmptySegmentAndNonNullSegment_hYXV8_WLsv0_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpMethodDescriptor = cpBands.getCpMethodDescriptor();
    assertEquals("cpMethodDescriptor", cpMethodDescriptor[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFieldValueWithNonZeroIndex_rfkb1_zxdN0_1() {
    CpBands cpBands = new CpBands(new Segment());
    CPFieldRef cpFieldRef = cpBands.cpFieldValue(1);
    assertNotNull(cpFieldRef);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFieldValueWithNonZeroIndex_rfkb1_zxdN0_2() {
    CpBands cpBands = new CpBands(new Segment());
    CPFieldRef cpFieldRef = cpBands.cpFieldValue(1);
    assertEquals(1, cpFieldRef.getGlobalIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValue_index0_Ubur0_IfLP0() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cpLong = cpBands.cpUTF8Value(0);
    assertEquals(0, cpLong.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFloatValue_ValidIndex_qwdd0_euFz0() {
    CpBands cpBands = new CpBands(new Segment());
    CPFloat cpFloat = cpBands.cpFloatValue(0);
    assertEquals(cpFloat.getGlobalIndex(), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpNameAndTypeValue_index_opTP1_ziqw0() {
    CpBands cpBands = new CpBands(new Segment());
    int index = 1;
    CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(index);
    assertEquals(index, cpNameAndType.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpUTF8_IUTW0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpUTF8 = cpBands.getCpUTF8();
        assertNotNull(cpUTF8);
        assertEquals(1, cpUTF8.length);
        assertEquals("UTF-8", cpUTF8[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptor_VZXX0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpDescriptor = cpBands.getCpDescriptor();
        assertNotNull(cpDescriptor);
        assertEquals(1, cpDescriptor.length);
        assertEquals("CP", cpDescriptor[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptorWithEmptySegment_EhIf2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpDescriptor = cpBands.getCpDescriptor();
        assertNotNull(cpDescriptor);
        assertEquals(0, cpDescriptor.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameInts_IqfF0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpDescriptorNameInts = cpBands.getCpDescriptorNameInts();
    assertNotNull(cpDescriptorNameInts);
    assertEquals(10, cpDescriptorNameInts.length);
    for (int i = 0; i < 10; i++) {
        assertEquals(i, cpDescriptorNameInts[i]);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpFieldClass_xKJG0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpFieldClass = cpBands.getCpFieldClass();
        assertNotNull(cpFieldClass);
        assertEquals(1, cpFieldClass.length);
        assertEquals("cpFieldClass", cpFieldClass[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8ValueWithValidString_DAGX4() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String string = "valid";
        CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string);
        assertNotNull(cpUTF8);
        assertEquals(string, cpUTF8.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8ValueWithValidStringAndFalseParameter_wuWU5() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String string = "valid";
        CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string, false);
        assertNotNull(cpUTF8);
        assertEquals(string, cpUTF8.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8ValueWithValidStringAndTrueParameter_eMOW6() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String string = "valid";
        CPUTF8 cpUTF8 = cpBands.cpUTF8Value(string, true);
        assertNotNull(cpUTF8);
        assertEquals(string, cpUTF8.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_string_xSNd0() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "TestString";
    CPClass cpString = cpBands.cpClassValue(string);
    assertEquals(string, cpString.getName());
    assertEquals(-1, cpString.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_index_UTGL1() {
    CpBands cpBands = new CpBands(new Segment());
    int index = 10;
    CPClass cpClass = cpBands.cpClassValue(index);
    assertEquals(index, cpClass.hashCode());
    assertEquals("TestClass", cpClass.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptor_bMxC0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpMethodDescriptor = cpBands.getCpMethodDescriptor();
    assertNotNull(cpMethodDescriptor);
    assertEquals(1, cpMethodDescriptor.length);
    assertEquals("cpMethodDescriptor", cpMethodDescriptor[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptorWithEmptySegment_TuDW2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpMethodDescriptor = cpBands.getCpMethodDescriptor();
    assertNotNull(cpMethodDescriptor);
    assertEquals(0, cpMethodDescriptor.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpIMethodClass_drjL0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpIMethodClass = cpBands.getCpIMethodClass();
        assertNotNull(cpIMethodClass);
        assertEquals(1, cpIMethodClass.length);
        assertEquals("CP_I_METHOD_CLASS", cpIMethodClass[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpInt_PYyD0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpInt = cpBands.getCpInt();
    assertNotNull(cpInt);
    assertEquals(10, cpInt.length);
    for (int i = 0; i < cpInt.length; i++) {
        assertEquals(i, cpInt[i]);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_AhKg0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        assertNotNull(cpLong);
        assertEquals(10, cpLong.length);
        assertEquals(1, cpLong[0]);
        assertEquals(2, cpLong[1]);
        assertEquals(3, cpLong[2]);
        assertEquals(4, cpLong[3]);
        assertEquals(5, cpLong[4]);
        assertEquals(6, cpLong[5]);
        assertEquals(7, cpLong[6]);
        assertEquals(8, cpLong[7]);
        assertEquals(9, cpLong[8]);
        assertEquals(10, cpLong[9]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpSignature_sJcw0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpSignature = cpBands.getCpSignature();
        assertNotNull(cpSignature);
        assertEquals(1, cpSignature.length);
        assertEquals("CP", cpSignature[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_ValidIndex_nVSf0() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(0);
    assertNotNull(cputf8);
    assertEquals(0, cputf8.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_DuplicateString_znDo2() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(0);
    assertNotNull(cputf8);
    assertEquals(0, cputf8.getGlobalIndex());
    CPUTF8 cputf8Duplicate = cpBands.cpUTF8Value(0);
    assertNotNull(cputf8Duplicate);
    assertEquals(0, cputf8Duplicate.getGlobalIndex());
    assertSame(cputf8, cputf8Duplicate);
}
}