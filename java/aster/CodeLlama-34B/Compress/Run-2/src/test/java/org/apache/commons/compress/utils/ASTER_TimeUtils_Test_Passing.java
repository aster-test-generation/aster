/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.nio.file.attribute.FileTime;
import java.time.Instant;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TimeUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToUnixTime_nullFileTime_naMN0() {
    long result = TimeUtils.toUnixTime(null);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToUnixTime_nonNullFileTime_HAQJ1() {
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    long result = TimeUtils.toUnixTime(fileTime);
    assertTrue(result > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_unixTime_Zqah0() {
    FileTime time = FileTime.fromMillis(1000000000000L);
    assertTrue(TimeUtils.isUnixTime(time));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_nonUnixTime_tpTq1() {
    FileTime time = FileTime.fromMillis(1000000000001L);
    assertFalse(TimeUtils.isUnixTime(time));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_ValidSeconds_eNfc0() {
    long seconds = 1000000000;
    assertTrue(TimeUtils.isUnixTime(seconds));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_InvalidSeconds_GlGy1() {
    long seconds = -1000000000;
    assertFalse(TimeUtils.isUnixTime(seconds));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_MinValue_gDtN2() {
    long seconds = Integer.MIN_VALUE;
    assertTrue(TimeUtils.isUnixTime(seconds));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_MaxValue_KuKA3() {
    long seconds = Integer.MAX_VALUE;
    assertTrue(TimeUtils.isUnixTime(seconds));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_PhYd0() {
    Date date = new Date();
    long expected = FileTimes.toNtfsTime(date);
    long actual = TimeUtils.toNtfsTime(date);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTimeWithNullDate_GFei1() {
    long expected = FileTimes.toNtfsTime((Date) null);
    long actual = TimeUtils.toNtfsTime((Date) null);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTimeWithDateBeforeEpoch_cMSj2() {
    Date date = new Date(0);
    long expected = FileTimes.toNtfsTime(date);
    long actual = TimeUtils.toNtfsTime(date);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToFileTime_NullDate_GgPN0() {
    Date date = null;
    FileTime fileTime = TimeUtils.toFileTime(date);
    assertNull(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToFileTime_ValidDate_zGck1_1() {
    Date date = new Date();
    FileTime fileTime = TimeUtils.toFileTime(date);
    assertNotNull(fileTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToFileTime_ValidDate_zGck1_2() {
    Date date = new Date();
    FileTime fileTime = TimeUtils.toFileTime(date);
    assertEquals(date.getTime(), fileTime.toMillis());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToFileTimeWithInvalidValue_WLjG5() {
    long ntfsTime = -1;
    try {
        TimeUtils.ntfsTimeToFileTime(ntfsTime);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid NTFS time", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateToHundredNanos_PyiR0() {
    FileTime fileTime = FileTime.from(Instant.ofEpochSecond(100, 1000000000));
    FileTime result = TimeUtils.truncateToHundredNanos(fileTime);
    assertEquals(FileTime.from(Instant.ofEpochSecond(100, 1000000000)), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateToHundredNanosWithNegativeNanos_DPQA1() {
    FileTime fileTime = FileTime.from(Instant.ofEpochSecond(100, -1000000000));
    FileTime result = TimeUtils.truncateToHundredNanos(fileTime);
    assertEquals(FileTime.from(Instant.ofEpochSecond(100, -1000000000)), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateToHundredNanosWithZeroNanos_gCpl2() {
    FileTime fileTime = FileTime.from(Instant.ofEpochSecond(100, 0));
    FileTime result = TimeUtils.truncateToHundredNanos(fileTime);
    assertEquals(FileTime.from(Instant.ofEpochSecond(100, 0)), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTime_hRtC0() {
    long time = 1000000000;
    FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
    assertEquals(time, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTimeWithNegativeTime_ByJC1() {
    long time = -1000000000;
    FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
    assertEquals(time, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTimeWithZeroTime_bSyL2() {
    long time = 0;
    FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
    assertEquals(time, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTimeWithMaxTime_Gsve3() {
    long time = Long.MAX_VALUE;
    FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
    assertEquals(time, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTimeWithMinTime_HKlx4() {
    long time = Long.MIN_VALUE;
    FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
    assertEquals(time, fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTimeWithInvalidTime_OsCI5() {
    long time = -1;
    try {
        TimeUtils.unixTimeToFileTime(time);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid time", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDate_null_lWnR6() {
        Date date = TimeUtils.toDate(null);
        assertNull(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_zero_zTYc0() {
    long javaTime = 0;
    long expected = 0;
    long actual = TimeUtils.toNtfsTime(javaTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_positive_Frxg1() {
    long javaTime = 1000;
    long expected = 10000000;
    long actual = TimeUtils.toNtfsTime(javaTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_negative_DVpM2() {
    long javaTime = -1000;
    long expected = -10000000;
    long actual = TimeUtils.toNtfsTime(javaTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_max_eMXx3() {
    long javaTime = Long.MAX_VALUE;
    long expected = Long.MAX_VALUE;
    long actual = TimeUtils.toNtfsTime(javaTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_min_lhLo4() {
    long javaTime = Long.MIN_VALUE;
    long expected = Long.MIN_VALUE;
    long actual = TimeUtils.toNtfsTime(javaTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_invalid_xppJ6() {
    long javaTime = -1;
    long expected = -1;
    long actual = TimeUtils.toNtfsTime(javaTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDate_validInput_xbtj0() {
    long ntfsTime = 1234567890;
    Date expectedDate = new Date(ntfsTime);
    Date actualDate = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDate_invalidInput_hlZg1() {
    long ntfsTime = -1;
    Date expectedDate = null;
    Date actualDate = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDate_zeroInput_yfwa3() {
    long ntfsTime = 0;
    Date expectedDate = new Date(0);
    Date actualDate = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDate_maxInput_nvQX4() {
    long ntfsTime = Long.MAX_VALUE;
    Date expectedDate = new Date(Long.MAX_VALUE);
    Date actualDate = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDate_minInput_Bwdj5() {
    long ntfsTime = Long.MIN_VALUE;
    Date expectedDate = new Date(Long.MIN_VALUE);
    Date actualDate = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDate_randomInput_VMIx6() {
    long ntfsTime = new Random().nextLong();
    Date expectedDate = new Date(ntfsTime);
    Date actualDate = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDate_nullLocale_RbTH12() {
    long ntfsTime = 1234567890;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_random_ZAoA5_zqNG0() {
    long javaTime = 1234567890;
    long expected = 1234567890000L;
    long actual = TimeUtils.toNtfsTime(javaTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToFileTime_ValidDate_zGck1() {
    Date date = new Date();
    FileTime fileTime = TimeUtils.toFileTime(date);
    assertNotNull(fileTime);
    assertEquals(date.getTime(), fileTime.toMillis());
}
}