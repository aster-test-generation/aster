/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ConstantValueAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_iOSB0() {
    ConstantValueAttribute attr = new ConstantValueAttribute(new ByteCode(1));
    assertTrue(attr.equals(attr));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectSameValues_DmiG1() {
    ConstantValueAttribute attr1 = new ConstantValueAttribute(new ByteCode(1));
    ConstantValueAttribute attr2 = new ConstantValueAttribute(new ByteCode(1));
    assertTrue(attr1.equals(attr2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectDifferentValues_wAoZ2() {
    ConstantValueAttribute attr1 = new ConstantValueAttribute(new ByteCode(1));
    ConstantValueAttribute attr2 = new ConstantValueAttribute(new ByteCode(2));
    assertFalse(attr1.equals(attr2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_FulF3() {
    ConstantValueAttribute attr = new ConstantValueAttribute(new ByteCode(1));
    assertFalse(attr.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_nrJk4() {
    ConstantValueAttribute attr = new ConstantValueAttribute(new ByteCode(1));
    assertFalse(attr.equals("not a ConstantValueAttribute"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_EntryIsNull_NfEL5() {
    ConstantValueAttribute attr = new ConstantValueAttribute(null);
    assertFalse(attr.equals(new ConstantValueAttribute(new ByteCode(1))));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_GJEU6() {
    ConstantValueAttribute attr = new ConstantValueAttribute(new ByteCode(1));
    assertFalse(attr.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_EqualsThrowsException_Dcmx8() {
    ConstantValueAttribute attr1 = new ConstantValueAttribute(new ByteCode(1));
    ConstantValueAttribute attr2 = new ConstantValueAttribute(new ByteCode(2));
    assertThrows(IllegalArgumentException.class, () -> attr1.equals(attr2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_HashCodeReturnsDifferentValue_BXbU9() {
    ConstantValueAttribute attr1 = new ConstantValueAttribute(new ByteCode(1));
    ConstantValueAttribute attr2 = new ConstantValueAttribute(new ByteCode(2));
    assertNotEquals(attr1.hashCode(), attr2.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_yQfS0() {
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute attr = new ConstantValueAttribute(entry);
    String expected = "Constant:" + entry;
    String actual = attr.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_opcode_HNFA0_1() {
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    ClassFileEntry[] nested = attribute.getNestedClassFileEntries();
    assertEquals(2, nested.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_opcode_HNFA0_2() {
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    ClassFileEntry[] nested = attribute.getNestedClassFileEntries();
    assertEquals(entry, nested[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_nested_MzjM1_1() {
    ByteCode entry = new ByteCode(1, new ClassFileEntry[] { new ConstantValueAttribute(new ByteCode(2)) });
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    ClassFileEntry[] nested = attribute.getNestedClassFileEntries();
    assertEquals(3, nested.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_nested_MzjM1_2() {
    ByteCode entry = new ByteCode(1, new ClassFileEntry[] { new ConstantValueAttribute(new ByteCode(2)) });
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    ClassFileEntry[] nested = attribute.getNestedClassFileEntries();
    assertEquals(entry, nested[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_nested_MzjM1_3() {
    ByteCode entry = new ByteCode(1, new ClassFileEntry[] { new ConstantValueAttribute(new ByteCode(2)) });
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    ClassFileEntry[] nested = attribute.getNestedClassFileEntries();
    assertEquals(new ConstantValueAttribute(new ByteCode(2)), nested[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_null_VZvb2_3() {
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    ClassFileEntry[] nested = attribute.getNestedClassFileEntries();
    assertNull(nested[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_1_XoRY0() {
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_2_gpaB1() {
    ByteCode entry = new ByteCode(2);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_3_hegS2() {
    ByteCode entry = new ByteCode(3);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_4_bsVj3() {
    ByteCode entry = new ByteCode(4);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_5_wcgH4() {
    ByteCode entry = new ByteCode(5);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_6_eZoZ5() {
    ByteCode entry = new ByteCode(6);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_7_bzOM6() {
    ByteCode entry = new ByteCode(7);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_8_Jaas7() {
    ByteCode entry = new ByteCode(8);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_9_xesK8() {
    ByteCode entry = new ByteCode(9);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_10_HMLW9() {
    ByteCode entry = new ByteCode(10);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_11_Uvzi10() {
    ByteCode entry = new ByteCode(11);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_12_vcwe11() {
    ByteCode entry = new ByteCode(12);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_13_ysAA12() {
    ByteCode entry = new ByteCode(13);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_14_KdHp13() {
    ByteCode entry = new ByteCode(14);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_15_POIc14() {
    ByteCode entry = new ByteCode(15);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_16_bQoH15() {
    ByteCode entry = new ByteCode(16);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_17_lanC16() {
    ByteCode entry = new ByteCode(17);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_18_yiio17() {
    ByteCode entry = new ByteCode(18);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_entryNull_MYwi0() {
    ConstantValueAttribute attribute = new ConstantValueAttribute(null);
    int expected = 1;
    int actual = attribute.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_entryNotNull_gtxr1() {
    ByteCode entry = new ByteCode(1, new ClassFileEntry[0]);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    int expected = 32;
    int actual = attribute.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_opcode_HNFA0() {
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    ClassFileEntry[] nested = attribute.getNestedClassFileEntries();
    assertEquals(2, nested.length);
    assertEquals(entry, nested[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_nested_MzjM1() {
    ByteCode entry = new ByteCode(1, new ClassFileEntry[] { new ConstantValueAttribute(new ByteCode(2)) });
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    ClassFileEntry[] nested = attribute.getNestedClassFileEntries();
    assertEquals(3, nested.length);
    assertEquals(entry, nested[1]);
    assertEquals(new ConstantValueAttribute(new ByteCode(2)), nested[2]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_null_VZvb2() {
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    ClassFileEntry[] nested = attribute.getNestedClassFileEntries();
    assertEquals(2, nested.length);
    assertEquals(entry, nested[1]);
    assertNull(nested[2]);
}
}