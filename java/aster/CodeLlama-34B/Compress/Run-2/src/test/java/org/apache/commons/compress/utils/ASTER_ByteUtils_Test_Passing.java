/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ByteUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_NullInput_CkZd3() throws IOException {
    DataInput in = null;
    int length = 4;
    long result = ByteUtils.fromLittleEndian(in, length);
    assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_ValidInput_aRMF0() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int off = 0;
    int length = 4;
    long expected = 0x04030201L;
    long actual = ByteUtils.fromLittleEndian(bytes, off, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_InvalidInput_FEch1() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int off = 0;
    int length = 3;
    long expected = 0x040302L;
    long actual = ByteUtils.fromLittleEndian(bytes, off, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToLittleEndian_1_ncAX0() {
    byte[] b = new byte[4];
    long value = 0x12345678;
    int off = 0;
    int length = 4;
    ByteUtils.toLittleEndian(b, value, off, length);
    assertArrayEquals(new byte[] {0x78, 0x56, 0x34, 0x12}, b);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_emptyArray_FYcZ0() {
    byte[] bytes = new byte[0];
    long result = ByteUtils.fromLittleEndian(bytes);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_singleByte_XaJI1() {
    byte[] bytes = new byte[] { 0x01 };
    long result = ByteUtils.fromLittleEndian(bytes);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_multipleBytes_CqlZ2() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    long result = ByteUtils.fromLittleEndian(bytes);
    assertEquals(0x01020304, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_nullArray_gndk5() {
    byte[] bytes = null;
    long result = ByteUtils.fromLittleEndian(bytes);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToLittleEndian_1_FCop0_kmqj0() throws IOException {
    DataOutput out = mock(DataOutput.class);
    long value = 0x1234567890ABCDEFL;
    int length = 8;
    ByteUtils.toLittleEndian(out, value, length);
    verify(out, times(1)).write(0x78);
    verify(out, times(1)).write(0x56);
    verify(out, times(1)).write(0x34);
    verify(out, times(1)).write(0x12);
    verify(out, times(1)).write(0xEF);
    verify(out, times(1)).write(0xCD);
    verify(out, times(1)).write(0xAB);
    verify(out, times(1)).write(0x90);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToLittleEndian_2_VhYU1_sILa0() throws IOException {
    DataOutput out = mock(DataOutput.class);
    long value = 0x1234567890ABCDEFL;
    int length = 4;
    ByteUtils.toLittleEndian(out, value, length);
    verify(out, times(1)).write(0x78);
    verify(out, times(1)).write(0x56);
    verify(out, times(1)).write(0x34);
    verify(out, times(1)).write(0x12);
    verify(out, times(0)).write(0xEF);
    verify(out, times(0)).write(0xCD);
    verify(out, times(0)).write(0xAB);
    verify(out, times(0)).write(0x90);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_largeNumber_KLka4_zgpt0() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    long result = ByteUtils.fromLittleEndian(bytes);
    assertEquals(0x0102030405060708L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_invalidArray_tRRS6_XZYo0() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09 };
    long result = ByteUtils.fromLittleEndian(bytes);
    assertEquals(0x0102030405060708L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_invalidArray2_Chni7_yjvU0() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    long result = ByteUtils.fromLittleEndian(bytes);
    assertEquals(0x0102030405060708L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_invalidArray3_lmVU8_rYok0() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B };
    long result = ByteUtils.fromLittleEndian(bytes);
    assertEquals(0x0102030405060708L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_negativeNumber_gobF3_ngBf0() {
    byte[] bytes = new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF };
    long result = ByteUtils.fromLittleEndian(bytes);
    assertEquals(-1, result);
}
}