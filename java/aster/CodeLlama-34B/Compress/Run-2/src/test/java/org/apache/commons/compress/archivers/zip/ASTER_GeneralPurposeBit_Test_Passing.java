/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GeneralPurposeBit_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSlidingDictionarySize_Default_IURC0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 0;
    int actual = gpb.getSlidingDictionarySize();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_aBoN0() {
    GeneralPurposeBit g = new GeneralPurposeBit();
    assertTrue(g.equals(g));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_ggTj1() {
    GeneralPurposeBit g1 = new GeneralPurposeBit();
    GeneralPurposeBit g2 = new GeneralPurposeBit();
    assertFalse(g1.equals(g2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_rHgK2() {
    GeneralPurposeBit g = new GeneralPurposeBit();
    assertFalse(g.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_YKwu3() {
    GeneralPurposeBit g = new GeneralPurposeBit();
    Object o = new Object();
    assertFalse(g.equals(o));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_slidingDictionarySizeFlag_hmZp4() {
    byte[] data = new byte[] { 0x10 };
    int offset = 0;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(8192, b.getSlidingDictionarySize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_numberOfShannonFanoTreesFlag_JRNw5() {
    byte[] data = new byte[] { 0x20 };
    int offset = 0;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(3, b.getNumberOfShannonFanoTrees());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_1_PfhI0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 1;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_2_EkVr1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 2;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_3_ehHB2() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 3;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_4_dMFQ3() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 4;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_5_HXWT4() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 5;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_6_qlfE5() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 6;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_7_ByOK6() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 7;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_8_fmFB7() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 8;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_9_hMNp8() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 9;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_10_DjOd9() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 10;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_11_CaDg10() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 11;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_12_itpX11() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 12;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_13_GCGR12() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 13;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_ClIx0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = gpb.encode();
    assertEquals(2, result.length);
    assertEquals(0, result[0]);
    assertEquals(0, result[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesDataDescriptor_LkfQ0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertTrue(gpb.usesDataDescriptor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_ClIx0_1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = gpb.encode();
    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_ClIx0_2() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = gpb.encode();
    assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_ClIx0_3() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = gpb.encode();
    assertEquals(0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSlidingDictionarySize_InvalidValue_qwie7_XzKF0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = -1;
    int actual = gpb.getSlidingDictionarySize();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameValues_Tgfx4_nPLO0() {
    GeneralPurposeBit g1 = new GeneralPurposeBit();
    GeneralPurposeBit g2 = new GeneralPurposeBit();
    assertTrue(g1.equals(g2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesEncryption_True_WCgd0_nLOT0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertTrue(gpb.usesEncryption());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesEncryption_Null_XMLh2_nzrl0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertNull(gpb.usesEncryption());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesEncryption_Invalid_PXJb3_gcWN0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertFalse(gpb.usesEncryption());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithDifferentValues_NOLQ1_yWVM0_1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = gpb.encode();
    gpb = new GeneralPurposeBit();
    result = gpb.encode();
    gpb = new GeneralPurposeBit();
    result = gpb.encode();
    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithDifferentValues_NOLQ1_yWVM0_2() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = gpb.encode();
    gpb = new GeneralPurposeBit();
    result = gpb.encode();
    gpb = new GeneralPurposeBit();
    result = gpb.encode();
    assertEquals(1, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithDifferentValues_NOLQ1_yWVM0_3() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = gpb.encode();
    gpb = new GeneralPurposeBit();
    result = gpb.encode();
    gpb = new GeneralPurposeBit();
    result = gpb.encode();
    assertEquals(0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithDifferentValues_NOLQ1_yWVM0_5() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = gpb.encode();
    gpb = new GeneralPurposeBit();
    result = gpb.encode();
    gpb = new GeneralPurposeBit();
    result = gpb.encode();
    assertEquals(2, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithDifferentValues_NOLQ1_yWVM0_8() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = gpb.encode();
    gpb = new GeneralPurposeBit();
    result = gpb.encode();
    gpb = new GeneralPurposeBit();
    result = gpb.encode();
    assertEquals(4, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoesNotUseDataDescriptor_wHKZ1_RxTA0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertFalse(gpb.usesDataDescriptor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_encryptionFlag_true_fuRc0_HwYG0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertEquals(3 * (7 * (13 * (17 * 1 + 0) + 0) + 0), gpb.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_strongEncryptionFlag_true_IhBS1_jjEM0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertEquals(3 * (7 * (13 * (17 * 0 + 1) + 0) + 0), gpb.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_languageEncodingFlag_true_ARJF2_galK0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertEquals(3 * (7 * (13 * (17 * 0 + 0) + 1) + 0), gpb.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_dataDescriptorFlag_true_USaO3_KmAI0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertEquals(3 * (7 * (13 * (17 * 0 + 0) + 0) + 1), gpb.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_noFlags_GxaB4_ZkQV0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] buf = new byte[2];
    gpb.encode(buf, 0);
    assertEquals(0, buf[0]);
}
}