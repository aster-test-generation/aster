/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipFile_Test_Passing {
private static final byte[] ONE_ZERO_BYTE = new byte[1];
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseQuietlyWithNullZipFile_Wqha1_Xfcs0() throws IOException {
    ZipFile zipFile = null;
    assertNull(zipFile);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntry_Jfei0_ENhF0() {
    try {
        ZipFile zipFile = new ZipFile("test.zip");
        ZipArchiveEntry entry = zipFile.getEntry("test.txt");
        assertNotNull(entry);
        assertEquals("test.txt", entry.getName());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryWithNonExistentName_JfsW1_XPxH0() {
    try {
        ZipFile zipFile = new ZipFile("test.zip");
        ZipArchiveEntry entry = zipFile.getEntry("non_existent_file.txt");
        assertNull(entry);
    } catch (IOException e) {
        e.printStackTrace();
    }
}
}