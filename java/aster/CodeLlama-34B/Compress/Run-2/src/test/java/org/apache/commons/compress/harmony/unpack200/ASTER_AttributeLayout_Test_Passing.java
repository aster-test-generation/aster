/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeLayout_Test_Passing {
private String layout;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDefaultLayout_default_kGve0() throws Pack200Exception {
    AttributeLayout layout = new AttributeLayout("name", 1, "layout", 1, true);
    assertTrue(layout.isDefaultLayout());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDefaultLayout_nonDefault_jjRW1() throws Pack200Exception {
    AttributeLayout layout = new AttributeLayout("name", 1, "layout", 1, false);
    assertFalse(layout.isDefaultLayout());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDefaultLayout_invalidContext_upcK3() throws Pack200Exception {
    AttributeLayout layout = new AttributeLayout("name", -1, "layout", 1, true);
    assertFalse(layout.isDefaultLayout());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDefaultLayout_invalidLayout_NSYW4() throws Pack200Exception {
    AttributeLayout layout = new AttributeLayout("name", 1, null, 1, true);
    assertFalse(layout.isDefaultLayout());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDefaultLayout_invalidIndex_Nftg5() throws Pack200Exception {
    AttributeLayout layout = new AttributeLayout("name", 1, "layout", -1, true);
    assertFalse(layout.isDefaultLayout());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_1_EweT0() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    int result = attributeLayout.numBackwardsCallables();
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_3_SKzf2() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
    int result = attributeLayout.numBackwardsCallables();
    assertEquals(2, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_4_Kgzf3() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 3);
    int result = attributeLayout.numBackwardsCallables();
    assertEquals(3, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_5_yicX4() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 4);
    int result = attributeLayout.numBackwardsCallables();
    assertEquals(4, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_6_xphL5() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 5);
    int result = attributeLayout.numBackwardsCallables();
    assertEquals(5, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_7_TaMJ6() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 6);
    int result = attributeLayout.numBackwardsCallables();
    assertEquals(6, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_8_TOPd7() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 7);
    int result = attributeLayout.numBackwardsCallables();
    assertEquals(7, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_9_MGgN8() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 8);
    int result = attributeLayout.numBackwardsCallables();
    assertEquals(8, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_10_VJIg9() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 9);
    int result = attributeLayout.numBackwardsCallables();
    assertEquals(9, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_11_UKaa10() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 10);
    int result = attributeLayout.numBackwardsCallables();
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_12_UeIs11() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 11);
    int result = attributeLayout.numBackwardsCallables();
    assertEquals(11, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithInvalidLayout_zMaB2() throws Pack200Exception {
        Segment segment = new Segment();
        CpBands bands = new CpBands(segment);
        SegmentConstantPool pool = new SegmentConstantPool(bands);
        AttributeLayout layout = new AttributeLayout("name", 0, "invalid_layout", 0);
        try {
            layout.getValue(0, pool);
            assertTrue(false);
        } catch (Pack200Exception e) {
            assertEquals("Invalid layout: invalid_layout", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithInvalidIndex_SmVy3() throws Pack200Exception {
        Segment segment = new Segment();
        CpBands bands = new CpBands(segment);
        SegmentConstantPool pool = new SegmentConstantPool(bands);
        AttributeLayout layout = new AttributeLayout("name", 0, "layout", 0);
        try {
            layout.getValue(-1, pool);
            assertTrue(false);
        } catch (Pack200Exception e) {
            assertEquals("Invalid index: -1", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithInvalidPool_bqyc4() throws Pack200Exception {
        Segment segment = new Segment();
        CpBands bands = new CpBands(segment);
        SegmentConstantPool pool = new SegmentConstantPool(bands);
        AttributeLayout layout = new AttributeLayout("name", 0, "layout", 0);
        try {
            layout.getValue(0, null);
            assertTrue(false);
        } catch (Pack200Exception e) {
            assertEquals("Invalid pool: null", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithInvalidContext_FMAk5() throws Pack200Exception {
        Segment segment = new Segment();
        CpBands bands = new CpBands(segment);
        SegmentConstantPool pool = new SegmentConstantPool(bands);
        AttributeLayout layout = new AttributeLayout("name", -1, "layout", 0);
        try {
            layout.getValue(0, pool);
            assertTrue(false);
        } catch (Pack200Exception e) {
            assertEquals("Invalid context: -1", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithInvalidName_tQbf6() throws Pack200Exception {
        Segment segment = new Segment();
        CpBands bands = new CpBands(segment);
        SegmentConstantPool pool = new SegmentConstantPool(bands);
        AttributeLayout layout = new AttributeLayout(null, 0, "layout", 0);
        try {
            layout.getValue(0, pool);
            assertTrue(false);
        } catch (Pack200Exception e) {
            assertEquals("Invalid name: null", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_KQ_IDUA0_Wdjj0() throws Pack200Exception {
    AttributeLayout layout = new AttributeLayout("KQ", 0, "KQ", 0);
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(cpBands);
    ClassFileEntry entry = layout.getValue(0, "Ljava/lang/String;", pool);
    assertEquals(entry.getClass(), ConstantPoolEntry.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_KS_GwYK1_wqHq0() throws Pack200Exception {
    AttributeLayout layout = new AttributeLayout("KS", 0, "KS", 0);
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(cpBands);
    ClassFileEntry entry = layout.getValue(0, "Ljava/lang/String;", pool);
    assertEquals(entry.getClass(), ConstantPoolEntry.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithDefault_agFP1_LAxh0_1() throws Pack200Exception {
    Segment segment = new Segment();
    SegmentConstantPool pool = new SegmentConstantPool(null);
    AttributeLayout layout = new AttributeLayout("name", 0, "layout", 0, true);
    ClassFileEntry entry = layout.getValue(0, pool);
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithDefault_agFP1_LAxh0_2() throws Pack200Exception {
    Segment segment = new Segment();
    SegmentConstantPool pool = new SegmentConstantPool(null);
    AttributeLayout layout = new AttributeLayout("name", 0, "layout", 0, true);
    ClassFileEntry entry = layout.getValue(0, pool);
    assertTrue(entry instanceof ClassFileEntry);}
}