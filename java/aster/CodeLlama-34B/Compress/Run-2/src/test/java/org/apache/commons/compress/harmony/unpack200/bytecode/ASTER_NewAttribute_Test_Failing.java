/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NewAttribute_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_CPUTF8_Null_UGbr2() {
    CPUTF8 attributeName = null;
    NewAttribute newAttribute = new NewAttribute(attributeName, 0);
    assertEquals("NewAttribute[attributeName=null, layoutIndex=0]", newAttribute.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_NullAttributeName_pSIj4() {
    NewAttribute attribute = new NewAttribute(null,1);
    ClassFileEntry[] nested = attribute.getNestedClassFileEntries();
    assertEquals(0, nested.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_HglQ0_1() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 0);
    int[] startPCs = newAttribute.getStartPCs();
    assertNotNull(startPCs);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_HglQ0_2() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 0);
    int[] startPCs = newAttribute.getStartPCs();
    assertEquals(0, startPCs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCsWithNonZeroGlobalIndex_IovX1_1() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 10);
    int[] startPCs = newAttribute.getStartPCs();
    for (int i = 0; i < startPCs.length; i++) {
        assertNotNull(startPCs[i]);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCsWithNegativeGlobalIndex_nQTt2_1() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), -10);
    int[] startPCs = newAttribute.getStartPCs();
    assertNotNull(startPCs);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCsWithNegativeGlobalIndex_nQTt2_2() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), -10);
    int[] startPCs = newAttribute.getStartPCs();
    assertEquals(0, startPCs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCsWithEmptyAttributeName_uxmu4_1() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8(""), 0);
    int[] startPCs = newAttribute.getStartPCs();
    assertNotNull(startPCs);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCsWithEmptyAttributeName_uxmu4_2() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8(""), 0);
    int[] startPCs = newAttribute.getStartPCs();
    assertEquals(0, startPCs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_empty_KEad0() {
    NewAttribute attribute = new NewAttribute(new CPUTF8(""), 0);
    assertEquals(5, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_CPUTF8_Null_UGbr2_fid1() {
    CPUTF8 attributeName = null;
    NewAttribute newAttribute = new NewAttribute(attributeName, 0);
    assertEquals("null", newAttribute.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_NullAttributeName_pSIj4_fid1() {
    NewAttribute attribute = new NewAttribute(null, 0);
    ClassFileEntry[] nested = attribute.getNestedClassFileEntries();
    assertEquals(0, nested.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_HglQ0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 0);
    int[] startPCs = newAttribute.getStartPCs();
    assertNotNull(startPCs);
    assertEquals(0, startPCs.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCsWithNonZeroGlobalIndex_IovX1() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 10);
    int[] startPCs = newAttribute.getStartPCs();
    assertNotNull(startPCs);
    assertEquals(10, startPCs.length);
    for (int i = 0; i < startPCs.length; i++) {
        assertEquals(i, startPCs[i]);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCsWithNegativeGlobalIndex_nQTt2() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), -10);
    int[] startPCs = newAttribute.getStartPCs();
    assertNotNull(startPCs);
    assertEquals(0, startPCs.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCsWithEmptyAttributeName_uxmu4() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8(""), 0);
    int[] startPCs = newAttribute.getStartPCs();
    assertNotNull(startPCs);
    assertEquals(0, startPCs.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_nonEmpty_nonZeroLayoutIndex_Nipk2() {
    NewAttribute attribute = new NewAttribute(new CPUTF8("test"), 1);
    assertEquals(5, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_nonEmpty_zeroLayoutIndex_UMEk3() {
    NewAttribute attribute = new NewAttribute(new CPUTF8("test"), 0);
    assertEquals(4, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_empty_nonZeroLayoutIndex_xURF4() {
    NewAttribute attribute = new NewAttribute(new CPUTF8(""), 1);
    assertEquals(1, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCsWithNonZeroGlobalIndex_IovX1_1_fid2() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 10);
    int[] startPCs = newAttribute.getStartPCs();
    for (int i = 0; i < startPCs.length; i++) {
    }
    assertNotNull(startPCs);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCsWithNonZeroGlobalIndex_IovX1_2() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 10);
    int[] startPCs = newAttribute.getStartPCs();
    for (int i = 0; i < startPCs.length; i++) {
    }
    assertEquals(10, startPCs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddToBody_NegativeLength_ZxNM2_VRGh0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName", 0), 0);
    try {
        newAttribute.addToBody(-1, "value");
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Length must be non-negative", e.getMessage());
    }
}
}