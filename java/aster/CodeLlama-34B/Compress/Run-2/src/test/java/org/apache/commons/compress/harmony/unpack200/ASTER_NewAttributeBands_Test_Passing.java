/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.IOException;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NewAttributeBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNullInputStream_Rdbx4() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    try {
        newAttributeBands.read(null);
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
        assertEquals("Invalid input stream", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCount_ltrw0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    assertEquals(0, backwardsCallCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCountWithDefault_ZHOX1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0, true);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    assertEquals(1, backwardsCallCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCountWithNonDefault_Vbcn2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0, false);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    assertEquals(0, backwardsCallCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCountWithNegativeIndex_LPUD3() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", -1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    assertEquals(0, backwardsCallCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCountWithInvalidIndex_kGKS4() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 100);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    assertEquals(0, backwardsCallCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCountWithNullAttributeLayout_FtNK5() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, null);
    int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    assertEquals(0, backwardsCallCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCountWithNullSegment_cJoU6() throws IOException, Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(null, attributeLayout);
    int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    assertEquals(0, backwardsCallCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCountWithNullSegmentAndNullAttributeLayout_zzaz7() throws IOException, Pack200Exception {
    NewAttributeBands newAttributeBands = new NewAttributeBands(null, null);
    int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    assertEquals(0, backwardsCallCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithEmptyInput_KaBI2_VaQB0() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    assertEquals(0, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpack_QTBl0_Garp0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    newAttributeBands.unpack();
    assertTrue(newAttributeBands.getBackwardsCallCount() == 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackWithDefaultAttributeLayout_RUfd1_iUIz0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, true);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    newAttributeBands.unpack();
    assertTrue(newAttributeBands.getBackwardsCallCount() > 0);
}
}