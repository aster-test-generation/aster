/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_InnerClassesAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_zUUw0() {
    InnerClassesAttribute attr1 = new InnerClassesAttribute("attr1");
    InnerClassesAttribute attr2 = attr1;
    assertTrue(attr1.equals(attr2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObjectSameName_eVpd1() {
    InnerClassesAttribute attr1 = new InnerClassesAttribute("attr1");
    InnerClassesAttribute attr2 = new InnerClassesAttribute("attr1");
    assertTrue(attr1.equals(attr2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObjectDifferentName_drxn2() {
    InnerClassesAttribute attr1 = new InnerClassesAttribute("attr1");
    InnerClassesAttribute attr2 = new InnerClassesAttribute("attr2");
    assertFalse(attr1.equals(attr2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_qssD3() {
    InnerClassesAttribute attr1 = new InnerClassesAttribute("attr1");
    assertFalse(attr1.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_MbOh4() {
    InnerClassesAttribute attr1 = new InnerClassesAttribute("attr1");
    Object obj = new Object();
    assertFalse(attr1.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ZCKS0() {
        InnerClassesAttribute attribute = new InnerClassesAttribute("InnerClasses");
        String expected = "InnerClasses: InnerClasses";
        String actual = attribute.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_AKSV0() {
    InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("name");
    ClassFileEntry[] nestedClassFileEntries = innerClassesAttribute.getNestedClassFileEntries();
    assertEquals(0, nestedClassFileEntries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_empty_XrcA0() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("");
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_nonEmpty_mhuT1() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("InnerClass");
    assertEquals(2 + (2 + 2 + 2 + 2) * 1, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_nullInnerClasses_JIwy3() {
    InnerClassesAttribute attribute = new InnerClassesAttribute(null);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_withNullAttributeName_xuMS0() {
    InnerClassesAttribute attribute = new InnerClassesAttribute(null);
    int result = attribute.hashCode();
    assertEquals(31, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_invalidInnerClasses4_PCfd7_MrfV0() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("InnerClass1");
    assertEquals(2 + (2 + 2 + 2 + 2) * 3, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_invalidInnerClasses5_OQSe8_uvXI0() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("InnerClass1");
    assertEquals(2 + (2 + 2 + 2 + 2) * 4, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_invalidInnerClasses6_udmv9_tKZZ0() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("InnerClass1");
    assertEquals(2 + (2 + 2 + 2 + 2) * 5, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_invalidInnerClasses7_Oizi10_IwLo0() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("InnerClass1");
    assertEquals(2 + (2 + 2 + 2 + 2) * 6, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_invalidInnerClasses8_XlHg11_LggP0() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("InnerClass1");
    assertEquals(2 + (2 + 2 + 2 + 2) * 7, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_invalidInnerClasses9_qePE12_IItC0() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("InnerClass1");
    assertEquals(2 + (2 + 2 + 2 + 2) * 8, attribute.getLength());
}
}