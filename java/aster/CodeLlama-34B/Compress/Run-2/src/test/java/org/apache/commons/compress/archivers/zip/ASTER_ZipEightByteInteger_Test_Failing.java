/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithByteArrayAndOffset_ZyVs0() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    int offset = 2;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, offset);
    String expected = "ZipEightByteInteger value: 3412";
    String actual = zipEightByteInteger.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNegativeValue_SbOF4() {
    byte[] bytes = new byte[] {-1, -2, -3, -4, -5, -6, -7, -8};
    int offset = 2;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, offset);
    String expected = "ZipEightByteInteger value: -3412";
    String actual = zipEightByteInteger.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithZeroValue_dbDW5() {
    byte[] bytes = new byte[] {0, 0, 0, 0, 0, 0, 0, 0};
    int offset = 2;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, offset);
    String expected = "ZipEightByteInteger value: 0";
    String actual = zipEightByteInteger.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithMaxValue_PkbA6() {
    byte[] bytes = new byte[] {-128, -128, -128, -128, -128, -128, -128, -128};
    int offset = 2;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, offset);
    String expected = "ZipEightByteInteger value: 9223372036854775807";
    String actual = zipEightByteInteger.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_ByteArray_eIDZ2() {
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
    assertEquals(new BigInteger("4759477275222530853130"), zipEightByteInteger.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_ByteArrayAndOffset_ofLb3() {
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int offset = 5;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, offset);
    assertEquals(new BigInteger(Arrays.copyOfRange(bytes, offset, offset + 8)), zipEightByteInteger.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithLong_gpWR1() {
    long value = 1234567890L;
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithNegativeValue_tthg3() {
    BigInteger value = new BigInteger("-1234567890");
    byte[] expected = new byte[] { -1, -2, -3, -4, -5, -6, -7, -8 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_ByteArray_RCjb2_GSbi0() {
    byte[] bytes = new byte[] { (byte) 0x01, (byte) 0x23, (byte) 0x45, (byte) 0x67, (byte) 0x89, (byte) 0x0A };
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
    byte[] expected = new byte[] { (byte) 0x01, (byte) 0x23, (byte) 0x45, (byte) 0x67, (byte) 0x89, (byte) 0x0A };
    byte[] actual = zipEightByteInteger.getBytes();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_xUbf0_JjQd0_1() {
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };
    int offset = 2;
    ZipEightByteInteger zip = new ZipEightByteInteger(bytes, offset);
    int expectedHashCode = Arrays.hashCode(bytes);
    BigInteger bigInt = new BigInteger("1234567890");
    zip = new ZipEightByteInteger(bigInt);
    expectedHashCode = bigInt.hashCode();
    long longValue = 1234567890L;
    zip = new ZipEightByteInteger(longValue);
    expectedHashCode = (int) (longValue ^ (longValue >>> 32));
    bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };
    zip = new ZipEightByteInteger(bytes);
    expectedHashCode = Arrays.hashCode(bytes);
    assertEquals(expectedHashCode, zip.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithByteArray_qdhe3_fid1() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
    String expected = "ZipEightByteInteger value: 12345678";
    String actual = zipEightByteInteger.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_Long_ucAu1_fid1() {
    long value = 1234567890L;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
    assertEquals(value, zipEightByteInteger.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_ByteArray_eIDZ2_fid1() {
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
    assertEquals(new BigInteger(bytes), zipEightByteInteger.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_ByteArrayAndOffset_ofLb3_fid1() {
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int offset = 5;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, offset);
    assertEquals(new BigInteger(Arrays.copyOfRange(bytes, offset, bytes.length)), zipEightByteInteger.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_ValidBytes_eOBg0_fid1() {
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };
    long expected = 0x0102030405060708L;
    long actual = ZipEightByteInteger.getLongValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_ValidBytesOffset_RDLB3_fid1() {
    byte[] bytes = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8 };
    int offset = 8;
    long expected = 0x0102030405060708L;
    long actual = ZipEightByteInteger.getLongValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_1_zflG0_fid1() {
    byte[] bytes = new byte[8];
    BigInteger expected = new BigInteger("1234567890");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_2_spzy1_fid1() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    BigInteger expected = new BigInteger("1234567890");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_3_WKlj2_fid1() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    BigInteger expected = new BigInteger("1234567890");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_4_iXVN3_fid1() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    BigInteger expected = new BigInteger("1234567890");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_5_UCcT4_fid1() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    BigInteger expected = new BigInteger("1234567890");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_6_tHJl5_fid1() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    BigInteger expected = new BigInteger("1234567890");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_7_Sknz6_fid1() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    bytes[5] = 6;
    BigInteger expected = new BigInteger("1234567890");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_8_KYBC7_fid1() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    bytes[5] = 6;
    bytes[6] = 7;
    BigInteger expected = new BigInteger("1234567890");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_ByteArray_GkOj2_fid1() {
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
    assertEquals(1234567890L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_ByteArrayAndOffset_cVlw3_fid1() {
    byte[] bytes = new byte[] { 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
    int offset = 4;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, offset);
    assertEquals(1234567890L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithBigInteger_nqGG0_fid1() {
    BigInteger value = new BigInteger("1234567890");
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithLong_gpWR1_fid1() {
    long value = 1234567890L;
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithNegativeValue_tthg3_fid1() {
    BigInteger value = new BigInteger("-1234567890");
    byte[] expected = new byte[] { -1, -2, -3, -4, -5, -6, -7, -8, -9, -10 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithZeroValue_lZyw4_fid1() {
    BigInteger value = new BigInteger("0");
    byte[] expected = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithMaxValue_YMYO5_fid1() {
    BigInteger value = new BigInteger("9223372036854775807");
    byte[] expected = new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithMinValue_gxrE6_fid1() {
    BigInteger value = new BigInteger("-9223372036854775808");
    byte[] expected = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithLeftmostBitSet_Tfun7_fid1() {
    BigInteger value = new BigInteger("1234567890");
    value = value.setBit(63);
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithLeftmostBitUnset_ebGK8_fid1() {
    BigInteger value = new BigInteger("1234567890");
    value = value.clearBit(63);
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_BigInteger_Negative_gsqw4_fid1() {
    BigInteger value = BigInteger.valueOf(-10);
    byte[] expected = new byte[] { -10, 0, 0, 0, 0, 0, 0, 0 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_Long_Negative_sEeb5_fid1() {
    long value = -10;
    byte[] expected = new byte[] { -10, 0, 0, 0, 0, 0, 0, 0 };
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue1_LQRJ0_fid1() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int offset = 0;
    BigInteger expected = BigInteger.valueOf(0x0102030405060708L);
    BigInteger actual = ZipEightByteInteger.getValue(bytes, offset);
    assertEquals(expected, actual);
}
}