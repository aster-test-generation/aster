/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentHeader_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHaveClassFlagsHi_YvDu0() {
        SegmentHeader header = new SegmentHeader();
        assertTrue(header.have_class_flags_hi());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveAllCodeFlags_True_FTnk0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    assertTrue(segmentHeader.have_all_code_flags());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileOptions_SGGm0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    assertTrue(segmentHeader.have_file_options());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultMajorVersion_TCKK0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int defaultMajorVersion = segmentHeader.getDefaultMajorVersion();
    assertEquals(1, defaultMajorVersion);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchive_modtime_rGyN0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int archive_modtime = segmentHeader.getArchive_modtime();
    assertEquals(0, archive_modtime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileModtime_VXRF0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_file_modtime();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileModtime_RmgI1() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_file_modtime();
    assertTrue(result);
    assertFalse(segmentHeader.have_file_modtime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveCodeFlagsHi_UQwI0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_code_flags_hi();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveCodeFlagsHiCoverage_ofjP1() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.have_code_flags_hi();
    assertTrue(segmentHeader.have_code_flags_hi());
    assertFalse(segmentHeader.have_code_flags_hi());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveMethodFlagsHi_XaEO0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_method_flags_hi();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileModtime_RmgI1_2() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_file_modtime();
    assertFalse(segmentHeader.have_file_modtime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveCodeFlagsHiCoverage_ofjP1_1() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.have_code_flags_hi();
    assertTrue(segmentHeader.have_code_flags_hi());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveCodeFlagsHiCoverage_ofjP1_2() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.have_code_flags_hi();
    assertFalse(segmentHeader.have_code_flags_hi());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setUp_ilpm0() {
    SegmentHeader segmentHeader = new SegmentHeader();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveClassFlagsHiWithFlags_ahQu5_sAgX0() {
    SegmentHeader header = new SegmentHeader();
    header.setHave_class_flags_hi(true);
    assertTrue(header.have_class_flags_hi());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveAllCodeFlags_False_fdDB1_rmDd0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_all_code_flags(false);
    assertFalse(segmentHeader.have_all_code_flags());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveAllCodeFlags_NullPointerException_PUrH7_vmyB0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_all_code_flags(false);
    try {
        segmentHeader.have_all_code_flags();
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertTrue(e.getMessage().contains("have_all_code_flags"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveAllCodeFlags_IllegalArgumentException_ruwM8_WQYF0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_all_code_flags(false);
    try {
        segmentHeader.have_all_code_flags();
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertTrue(e.getMessage().contains("have_all_code_flags"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchive_modtimeWithNonZeroValue_jFFp1_QSxg0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_field_flags_hi(true);
    int archive_modtime = segmentHeader.getArchive_modtime();
    assertEquals(123456789, archive_modtime);
}
}