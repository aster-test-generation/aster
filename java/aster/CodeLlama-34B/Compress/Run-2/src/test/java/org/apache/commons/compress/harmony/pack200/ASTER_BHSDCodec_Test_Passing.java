/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BHSDCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_PEYj0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertTrue(codec.equals(codec));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_sDQh1() {
    BHSDCodec codec1 = new BHSDCodec(1, 2, 3, 4);
    BHSDCodec codec2 = new BHSDCodec(1, 2, 3, 4);
    assertTrue(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentB_oCUl2() {
    BHSDCodec codec1 = new BHSDCodec(1, 2, 3, 4);
    BHSDCodec codec2 = new BHSDCodec(2, 2, 3, 4);
    assertFalse(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentH_nhIb3() {
    BHSDCodec codec1 = new BHSDCodec(1, 2, 3, 4);
    BHSDCodec codec2 = new BHSDCodec(1, 3, 3, 4);
    assertFalse(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentS_WVYp4() {
    BHSDCodec codec1 = new BHSDCodec(1, 2, 3, 4);
    BHSDCodec codec2 = new BHSDCodec(1, 2, 4, 4);
    assertFalse(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_SujA6() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    Object obj = new Object();
    assertFalse(codec.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_WpWB7() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertFalse(codec.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargest_1_bwBw0() {
    BHSDCodec codec = new BHSDCodec(8, 16);
    assertEquals(16, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargest_2_aQwD1() {
    BHSDCodec codec = new BHSDCodec(8, 16, 2);
    assertEquals(16, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargest_3_hqhm2() {
    BHSDCodec codec = new BHSDCodec(8, 16, 2, 4);
    assertEquals(16, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargest_4_jhFL3_1() {
    BHSDCodec codec = new BHSDCodec(8, 16);
    codec = new BHSDCodec(8, 16, 2);
    codec = new BHSDCodec(8, 16, 2, 4);
    codec = new BHSDCodec(8, 16, 3);
    codec = new BHSDCodec(8, 16, 3, 4);
    codec = new BHSDCodec(8, 16, 4);
    codec = new BHSDCodec(8, 16, 4, 4);
    codec = new BHSDCodec(8, 16, 5);
    codec = new BHSDCodec(8, 16, 5, 4);
    codec = new BHSDCodec(8, 16, 6);
    codec = new BHSDCodec(8, 16, 6, 4);
    codec = new BHSDCodec(8, 16, 7);
    codec = new BHSDCodec(8, 16, 7, 4);
    codec = new BHSDCodec(8, 16, 8);
    codec = new BHSDCodec(8, 16, 8, 4);
    codec = new BHSDCodec(8, 16, 9);
    codec = new BHSDCodec(8, 16, 9, 4);
    assertEquals(16, codec.largest());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSmallest1_qhrR0() {
    BHSDCodec codec = new BHSDCodec(8, 4);
    assertEquals(0, codec.smallest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSmallest2_gUhO1() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2);
    assertEquals(0, codec.smallest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSmallest3_IcCS2() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2, 1);
    assertEquals(0, codec.smallest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSmallest4_nzmp3() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2, 1);
    assertEquals(1, codec.smallest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetB_1_bxIM0() {
    BHSDCodec bhsdCodec = new BHSDCodec(1, 2);
    assertEquals(1, bhsdCodec.getB());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetB_2_kqOl1() {
    BHSDCodec bhsdCodec = new BHSDCodec(3, 4, 5);
    assertEquals(3, bhsdCodec.getB());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetB_3_bGZd2() {
    BHSDCodec bhsdCodec = new BHSDCodec(6, 7, 8, 9);
    assertEquals(6, bhsdCodec.getB());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bhsdCodec_rCrW0() {
    BHSDCodec bhsdCodec = new BHSDCodec(8, 16);
    String expected = "(8,16)";
    assertEquals(expected, bhsdCodec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bhsdCodec_s_xvLm1() {
    BHSDCodec bhsdCodec = new BHSDCodec(8, 16, 2);
    String expected = "(8,16,2)";
    assertEquals(expected, bhsdCodec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bhsdCodec_d_XhKp2() {
    BHSDCodec bhsdCodec = new BHSDCodec(8, 16, 0, 4);
    String expected = "(8,16,0,4)";
    assertEquals(expected, bhsdCodec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_True_thbN0() {
    BHSDCodec codec = new BHSDCodec(8, 16, 1, 1);
    assertTrue(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_True_AllCombinations_udFl2_1() {
    BHSDCodec codec = new BHSDCodec(8, 16, 1, 1);
    codec = new BHSDCodec(8, 16, 1, 0);
    codec = new BHSDCodec(8, 16, 0, 1);
    codec = new BHSDCodec(8, 16, 0, 0);
    assertTrue(codec.isSigned());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_True_AllCombinations_udFl2_3() {
    BHSDCodec codec = new BHSDCodec(8, 16, 1, 1);
    codec = new BHSDCodec(8, 16, 1, 0);
    codec = new BHSDCodec(8, 16, 0, 1);
    codec = new BHSDCodec(8, 16, 0, 0);
    assertFalse(codec.isSigned());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDelta_True_jEkF0() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2, 1);
    assertTrue(codec.isDelta());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDelta_False_NLWn1() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2, 0);
    assertFalse(codec.isDelta());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDelta_Negative_DFAd2() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2, -1);
    assertFalse(codec.isDelta());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_b1_h1_s1_d1_kbQh0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    int expected = ((1 * 37 + 1) * 37 + 1) * 37 + 1;
    int actual = codec.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_b2_h2_s2_d2_roNi1() {
    BHSDCodec codec = new BHSDCodec(2, 2, 2, 2);
    int expected = ((2 * 37 + 2) * 37 + 2) * 37 + 2;
    int actual = codec.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_b3_h3_s3_d3_ABeO2() {
    BHSDCodec codec = new BHSDCodec(3, 3, 3, 3);
    int expected = ((3 * 37 + 3) * 37 + 3) * 37 + 3;
    int actual = codec.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_1_MDYG0() {
    BHSDCodec codec = new BHSDCodec(1, 1);
    assertEquals(1, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_2_lQpe1() {
    BHSDCodec codec = new BHSDCodec(2, 2);
    assertEquals(4, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_3_sQHE2() {
    BHSDCodec codec = new BHSDCodec(3, 3);
    assertEquals(9, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_4_XHqz3() {
    BHSDCodec codec = new BHSDCodec(4, 4);
    assertEquals(16, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_5_PDip4() {
    BHSDCodec codec = new BHSDCodec(5, 5);
    assertEquals(25, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_6_ASjV5() {
    BHSDCodec codec = new BHSDCodec(6, 6);
    assertEquals(36, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_7_Pkno6() {
    BHSDCodec codec = new BHSDCodec(7, 7);
    assertEquals(49, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_8_kYQy7() {
    BHSDCodec codec = new BHSDCodec(8, 8);
    assertEquals(64, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_9_qgap8() {
    BHSDCodec codec = new BHSDCodec(9, 9);
    assertEquals(81, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_10_bbER9() {
    BHSDCodec codec = new BHSDCodec(10, 10);
    assertEquals(100, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_11_grlI10() {
    BHSDCodec codec = new BHSDCodec(11, 11);
    assertEquals(121, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_12_mwFY11() {
    BHSDCodec codec = new BHSDCodec(12, 12);
    assertEquals(144, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_13_QMBQ12() {
    BHSDCodec codec = new BHSDCodec(13, 13);
    assertEquals(169, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_14_RCWY13() {
    BHSDCodec codec = new BHSDCodec(14, 14);
    assertEquals(196, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_15_rFDo14() {
    BHSDCodec codec = new BHSDCodec(15, 15);
    assertEquals(225, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_16_dRQo15() {
    BHSDCodec codec = new BHSDCodec(16, 16);
    assertEquals(256, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_17_lLlC16() {
    BHSDCodec codec = new BHSDCodec(17, 17);
    assertEquals(289, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeValueNotInRange_vFQY3() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertFalse(codec.encodes(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeValueNotMultipleOfBase_iwAb4() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertFalse(codec.encodes(3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeValueNotPowerOfBase_pGDu5() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertFalse(codec.encodes(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS_1_VGQE0() {
    BHSDCodec codec = new BHSDCodec(8, 4);
    assertEquals(4, codec.getS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS_2_ecag1() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2);
    assertEquals(2, codec.getS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS_3_ObRf2() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2, 1);
    assertEquals(1, codec.getS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH_b1_h1_s1_d1_Xhpp0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    int h = codec.getH();
    assertEquals(1, h);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH_b2_h2_s2_d2_KdES1() {
    BHSDCodec codec = new BHSDCodec(2, 2, 2, 2);
    int h = codec.getH();
    assertEquals(2, h);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH_b3_h3_s3_d3_pECF2() {
    BHSDCodec codec = new BHSDCodec(3, 3, 3, 3);
    int h = codec.getH();
    assertEquals(3, h);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode1_cDik0_1() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16);
    byte[] encoded = codec.encode(100);
    assertEquals(1, encoded.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode1_cDik0_2() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16);
    byte[] encoded = codec.encode(100);
    assertEquals(100, encoded[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode2_DUEm1_1() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16, 32);
    byte[] encoded = codec.encode(100);
    assertEquals(2, encoded.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode2_DUEm1_2() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16, 32);
    byte[] encoded = codec.encode(100);
    assertEquals(100, encoded[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode2_DUEm1_3() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16, 32);
    byte[] encoded = codec.encode(100);
    assertEquals(0, encoded[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode3_aGmi2_1() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16, 32, 64);
    byte[] encoded = codec.encode(100);
    assertEquals(3, encoded.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode3_aGmi2_2() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16, 32, 64);
    byte[] encoded = codec.encode(100);
    assertEquals(100, encoded[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode3_aGmi2_3() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16, 32, 64);
    byte[] encoded = codec.encode(100);
    assertEquals(0, encoded[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode3_aGmi2_4() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16, 32, 64);
    byte[] encoded = codec.encode(100);
    assertEquals(0, encoded[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetL_b1_h1_s1_d1_Ucmm0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    int expected = 1;
    int actual = codec.getL();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetL_b2_h2_s2_d2_Xjmf1() {
    BHSDCodec codec = new BHSDCodec(2, 2, 2, 2);
    int expected = 4;
    int actual = codec.getL();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetL_b3_h3_s3_d3_Trkk2() {
    BHSDCodec codec = new BHSDCodec(3, 3, 3, 3);
    int expected = 9;
    int actual = codec.getL();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargest_4_jhFL3() {
    BHSDCodec codec = new BHSDCodec(8, 16);
    assertEquals(16, codec.largest());
    codec = new BHSDCodec(8, 16, 2);
    assertEquals(16, codec.largest());
    codec = new BHSDCodec(8, 16, 2, 4);
    assertEquals(16, codec.largest());
    codec = new BHSDCodec(8, 16, 3);
    assertEquals(16, codec.largest());
    codec = new BHSDCodec(8, 16, 3, 4);
    assertEquals(16, codec.largest());
    codec = new BHSDCodec(8, 16, 4);
    assertEquals(16, codec.largest());
    codec = new BHSDCodec(8, 16, 4, 4);
    assertEquals(16, codec.largest());
    codec = new BHSDCodec(8, 16, 5);
    assertEquals(16, codec.largest());
    codec = new BHSDCodec(8, 16, 5, 4);
    assertEquals(16, codec.largest());
    codec = new BHSDCodec(8, 16, 6);
    assertEquals(16, codec.largest());
    codec = new BHSDCodec(8, 16, 6, 4);
    assertEquals(16, codec.largest());
    codec = new BHSDCodec(8, 16, 7);
    assertEquals(16, codec.largest());
    codec = new BHSDCodec(8, 16, 7, 4);
    assertEquals(16, codec.largest());
    codec = new BHSDCodec(8, 16, 8);
    assertEquals(16, codec.largest());
    codec = new BHSDCodec(8, 16, 8, 4);
    assertEquals(16, codec.largest());
    codec = new BHSDCodec(8, 16, 9);
    assertEquals(16, codec.largest());
    codec = new BHSDCodec(8, 16, 9, 4);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_True_AllCombinations_udFl2() {
    BHSDCodec codec = new BHSDCodec(8, 16, 1, 1);
    assertTrue(codec.isSigned());
    codec = new BHSDCodec(8, 16, 1, 0);
    assertTrue(codec.isSigned());
    codec = new BHSDCodec(8, 16, 0, 1);
    assertFalse(codec.isSigned());
    codec = new BHSDCodec(8, 16, 0, 0);
    assertFalse(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode1_cDik0() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16);
    byte[] encoded = codec.encode(100);
    assertEquals(1, encoded.length);
    assertEquals(100, encoded[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode2_DUEm1() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16, 32);
    byte[] encoded = codec.encode(100);
    assertEquals(2, encoded.length);
    assertEquals(100, encoded[0]);
    assertEquals(0, encoded[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode3_aGmi2() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16, 32, 64);
    byte[] encoded = codec.encode(100);
    assertEquals(3, encoded.length);
    assertEquals(100, encoded[0]);
    assertEquals(0, encoded[1]);
    assertEquals(0, encoded[2]);
}
}