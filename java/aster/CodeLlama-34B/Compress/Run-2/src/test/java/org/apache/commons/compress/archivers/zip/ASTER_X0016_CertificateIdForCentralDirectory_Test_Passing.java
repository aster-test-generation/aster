/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X0016_CertificateIdForCentralDirectory_Test_Passing {
private X0016_CertificateIdForCentralDirectory certificateIdForCentralDirectory;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_HZnx0() {
        certificateIdForCentralDirectory = new X0016_CertificateIdForCentralDirectory();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordCount_CULd1() {
        int expected = 10;
        int actual = certificateIdForCentralDirectory.getRecordCount();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordCountWithZeroRecords_uefL2() {
        int expected = 0;
        int actual = certificateIdForCentralDirectory.getRecordCount();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordCountWithNegativeRecords_ePjj3() {
        int expected = -1;
        int actual = certificateIdForCentralDirectory.getRecordCount();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordCountWithLargeRecords_NtgH7() {
        int expected = 1000;
        int actual = certificateIdForCentralDirectory.getRecordCount();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordCountWithSmallRecords_GQAd8() {
        int expected = 1;
        int actual = certificateIdForCentralDirectory.getRecordCount();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordCountWithMediumRecords_DJgO9() {
        int expected = 50;
        int actual = certificateIdForCentralDirectory.getRecordCount();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordCountWithLargeNegativeRecords_RbQh10() {
        int expected = -1000;
        int actual = certificateIdForCentralDirectory.getRecordCount();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordCountWithMediumNegativeRecords_yCKc12() {
        int expected = -50;
        int actual = certificateIdForCentralDirectory.getRecordCount();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordCountWithNullRecordsAndSmallNegativeRecords_XNBj16() {
}
}