/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LineNumberTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_KtnS0() {
    LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(10, new int[] {1, 2, 3}, new int[] {10, 20, 30});
    assertTrue(lineNumberTableAttribute.equals(lineNumberTableAttribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_Jpnp1() {
    LineNumberTableAttribute lineNumberTableAttribute1 = new LineNumberTableAttribute(10, new int[] {1, 2, 3}, new int[] {10, 20, 30});
    LineNumberTableAttribute lineNumberTableAttribute2 = new LineNumberTableAttribute(10, new int[] {1, 2, 3}, new int[] {10, 20, 30});
    assertFalse(lineNumberTableAttribute1.equals(lineNumberTableAttribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_XnNc2() {
    LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(10, new int[] {1, 2, 3}, new int[] {10, 20, 30});
    assertFalse(lineNumberTableAttribute.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_HtJj3() {
    LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(10, new int[] {1, 2, 3}, new int[] {10, 20, 30});
    Object object = new Object();
    assertFalse(lineNumberTableAttribute.equals(object));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLineNumberTableLength_VGkd4() {
    LineNumberTableAttribute lineNumberTableAttribute1 = new LineNumberTableAttribute(10, new int[] {1, 2, 3}, new int[] {10, 20, 30});
    LineNumberTableAttribute lineNumberTableAttribute2 = new LineNumberTableAttribute(11, new int[] {1, 2, 3}, new int[] {10, 20, 30});
    assertFalse(lineNumberTableAttribute1.equals(lineNumberTableAttribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentStartPcs_dfsN5() {
    LineNumberTableAttribute lineNumberTableAttribute1 = new LineNumberTableAttribute(10, new int[] {1, 2, 3}, new int[] {10, 20, 30});
    LineNumberTableAttribute lineNumberTableAttribute2 = new LineNumberTableAttribute(10, new int[] {1, 3, 4}, new int[] {10, 20, 30});
    assertFalse(lineNumberTableAttribute1.equals(lineNumberTableAttribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLineNumbers_VVfo6() {
    LineNumberTableAttribute lineNumberTableAttribute1 = new LineNumberTableAttribute(10, new int[] {1, 2, 3}, new int[] {10, 20, 30});
    LineNumberTableAttribute lineNumberTableAttribute2 = new LineNumberTableAttribute(10, new int[] {1, 2, 3}, new int[] {10, 21, 30});
    assertFalse(lineNumberTableAttribute1.equals(lineNumberTableAttribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_OfRW0() {
    LineNumberTableAttribute lineNumberTable = new LineNumberTableAttribute(10, new int[] {1, 2, 3}, new int[] {10, 20, 30});
    String expected = "LineNumberTable: 10 lines";
    String actual = lineNumberTable.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_emptyLineNumberTable_qHtD3() {
    LineNumberTableAttribute attribute = new LineNumberTableAttribute(0, new int[0], new int[0]);
    ClassFileEntry[] entries = attribute.getNestedClassFileEntries();
    assertEquals(0, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_nullLineNumberTable_yHnX4() {
    LineNumberTableAttribute attribute = new LineNumberTableAttribute(0, null, null);
    ClassFileEntry[] entries = attribute.getNestedClassFileEntries();
    assertEquals(0, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength1_OSMV0_1() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(1, new int[] { 0 }, new int[] { 1 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(1, startPCs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength1_OSMV0_2() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(1, new int[] { 0 }, new int[] { 1 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(0, startPCs[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength2_awBI1_1() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(2, new int[] { 0, 1 }, new int[] { 1, 2 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(2, startPCs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength2_awBI1_2() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(2, new int[] { 0, 1 }, new int[] { 1, 2 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(0, startPCs[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength2_awBI1_3() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(2, new int[] { 0, 1 }, new int[] { 1, 2 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(1, startPCs[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength3_bgbK2_1() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(3, new int[] { 0, 1, 2 }, new int[] { 1, 2, 3 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(3, startPCs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength3_bgbK2_2() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(3, new int[] { 0, 1, 2 }, new int[] { 1, 2, 3 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(0, startPCs[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength3_bgbK2_3() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(3, new int[] { 0, 1, 2 }, new int[] { 1, 2, 3 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(1, startPCs[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength3_bgbK2_4() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(3, new int[] { 0, 1, 2 }, new int[] { 1, 2, 3 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(2, startPCs[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength4_BzYj3_1() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(4, new int[] { 0, 1, 2, 3 }, new int[] { 1, 2, 3, 4 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(4, startPCs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength4_BzYj3_2() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(4, new int[] { 0, 1, 2, 3 }, new int[] { 1, 2, 3, 4 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(0, startPCs[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength4_BzYj3_3() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(4, new int[] { 0, 1, 2, 3 }, new int[] { 1, 2, 3, 4 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(1, startPCs[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength4_BzYj3_4() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(4, new int[] { 0, 1, 2, 3 }, new int[] { 1, 2, 3, 4 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(2, startPCs[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength4_BzYj3_5() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(4, new int[] { 0, 1, 2, 3 }, new int[] { 1, 2, 3, 4 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(3, startPCs[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength5_fNkB4_1() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(5, new int[] { 0, 1, 2, 3, 4 }, new int[] { 1, 2, 3, 4, 5 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(5, startPCs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength5_fNkB4_2() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(5, new int[] { 0, 1, 2, 3, 4 }, new int[] { 1, 2, 3, 4, 5 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(0, startPCs[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength5_fNkB4_3() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(5, new int[] { 0, 1, 2, 3, 4 }, new int[] { 1, 2, 3, 4, 5 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(1, startPCs[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength5_fNkB4_4() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(5, new int[] { 0, 1, 2, 3, 4 }, new int[] { 1, 2, 3, 4, 5 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(2, startPCs[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength5_fNkB4_5() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(5, new int[] { 0, 1, 2, 3, 4 }, new int[] { 1, 2, 3, 4, 5 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(3, startPCs[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength5_fNkB4_6() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(5, new int[] { 0, 1, 2, 3, 4 }, new int[] { 1, 2, 3, 4, 5 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(4, startPCs[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength6_DfsT5_1() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(6, new int[] { 0, 1, 2, 3, 4, 5 }, new int[] { 1, 2, 3, 4, 5, 6 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(6, startPCs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength6_DfsT5_2() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(6, new int[] { 0, 1, 2, 3, 4, 5 }, new int[] { 1, 2, 3, 4, 5, 6 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(0, startPCs[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength6_DfsT5_3() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(6, new int[] { 0, 1, 2, 3, 4, 5 }, new int[] { 1, 2, 3, 4, 5, 6 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(1, startPCs[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength6_DfsT5_4() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(6, new int[] { 0, 1, 2, 3, 4, 5 }, new int[] { 1, 2, 3, 4, 5, 6 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(2, startPCs[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength6_DfsT5_5() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(6, new int[] { 0, 1, 2, 3, 4, 5 }, new int[] { 1, 2, 3, 4, 5, 6 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(3, startPCs[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength6_DfsT5_6() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(6, new int[] { 0, 1, 2, 3, 4, 5 }, new int[] { 1, 2, 3, 4, 5, 6 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(4, startPCs[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength6_DfsT5_7() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(6, new int[] { 0, 1, 2, 3, 4, 5 }, new int[] { 1, 2, 3, 4, 5, 6 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(5, startPCs[5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_lineNumberTableLengthIsZero_kaPs0() {
    LineNumberTableAttribute attribute = new LineNumberTableAttribute(0, new int[0], new int[0]);
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_lineNumberTableLengthIsOne_Pfvu1() {
    LineNumberTableAttribute attribute = new LineNumberTableAttribute(1, new int[] { 1 }, new int[] { 1 });
    assertEquals(6, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_lineNumberTableLengthIsTwo_CBTe2() {
    LineNumberTableAttribute attribute = new LineNumberTableAttribute(2, new int[] { 1, 2 }, new int[] { 1, 2 });
    assertEquals(10, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_lineNumberTableLengthIsThree_Hqta3() {
    LineNumberTableAttribute attribute = new LineNumberTableAttribute(3, new int[] { 1, 2, 3 }, new int[] { 1, 2, 3 });
    assertEquals(14, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_lineNumberTableLengthIsFour_NhMP4() {
    LineNumberTableAttribute attribute = new LineNumberTableAttribute(4, new int[] { 1, 2, 3, 4 }, new int[] { 1, 2, 3, 4 });
    assertEquals(18, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_lineNumberTableLengthIsFive_AGdy5() {
    LineNumberTableAttribute attribute = new LineNumberTableAttribute(5, new int[] { 1, 2, 3, 4, 5 }, new int[] { 1, 2, 3, 4, 5 });
    assertEquals(22, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_lineNumberTableLengthIsSix_wqHJ6() {
    LineNumberTableAttribute attribute = new LineNumberTableAttribute(6, new int[] { 1, 2, 3, 4, 5, 6 }, new int[] { 1, 2, 3, 4, 5, 6 });
    assertEquals(26, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_lineNumberTableLengthIsSeven_pAmb7() {
    LineNumberTableAttribute attribute = new LineNumberTableAttribute(7, new int[] { 1, 2, 3, 4, 5, 6, 7 }, new int[] { 1, 2, 3, 4, 5, 6, 7 });
    assertEquals(30, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_lineNumberTableLengthIsEight_zACA8() {
    LineNumberTableAttribute attribute = new LineNumberTableAttribute(8, new int[] { 1, 2, 3, 4, 5, 6, 7, 8 }, new int[] { 1, 2, 3, 4, 5, 6, 7, 8 });
    assertEquals(34, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_lineNumberTableLengthIsNine_hFzd9() {
    LineNumberTableAttribute attribute = new LineNumberTableAttribute(9, new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }, new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
    assertEquals(38, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_lineNumberTableLengthIsTen_niZO10() {
    LineNumberTableAttribute attribute = new LineNumberTableAttribute(10, new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });
    assertEquals(42, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength1_OSMV0() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(1, new int[] { 0 }, new int[] { 1 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(1, startPCs.length);
    assertEquals(0, startPCs[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength2_awBI1() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(2, new int[] { 0, 1 }, new int[] { 1, 2 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(2, startPCs.length);
    assertEquals(0, startPCs[0]);
    assertEquals(1, startPCs[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength3_bgbK2() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(3, new int[] { 0, 1, 2 }, new int[] { 1, 2, 3 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(3, startPCs.length);
    assertEquals(0, startPCs[0]);
    assertEquals(1, startPCs[1]);
    assertEquals(2, startPCs[2]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength4_BzYj3() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(4, new int[] { 0, 1, 2, 3 }, new int[] { 1, 2, 3, 4 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(4, startPCs.length);
    assertEquals(0, startPCs[0]);
    assertEquals(1, startPCs[1]);
    assertEquals(2, startPCs[2]);
    assertEquals(3, startPCs[3]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength5_fNkB4() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(5, new int[] { 0, 1, 2, 3, 4 }, new int[] { 1, 2, 3, 4, 5 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(5, startPCs.length);
    assertEquals(0, startPCs[0]);
    assertEquals(1, startPCs[1]);
    assertEquals(2, startPCs[2]);
    assertEquals(3, startPCs[3]);
    assertEquals(4, startPCs[4]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_lineNumberTableLength6_DfsT5() {
    LineNumberTableAttribute attr = new LineNumberTableAttribute(6, new int[] { 0, 1, 2, 3, 4, 5 }, new int[] { 1, 2, 3, 4, 5, 6 });
    int[] startPCs = attr.getStartPCs();
    assertEquals(6, startPCs.length);
    assertEquals(0, startPCs[0]);
    assertEquals(1, startPCs[1]);
    assertEquals(2, startPCs[2]);
    assertEquals(3, startPCs[3]);
    assertEquals(4, startPCs[4]);
    assertEquals(5, startPCs[5]);
}
}