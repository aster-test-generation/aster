/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_EqualBuffers_eAOL0() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5 };
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentBuffers_dXVM1() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 6 };
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLengths_lpyI2() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4 };
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentOffsets_XEwN3() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5 };
    assertTrue(ArchiveUtils.isEqual(buffer1, 1, buffer1.length, buffer2, 1, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_IgnoreTrailingNulls_WXHl4() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5, 0, 0, 0 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5 };
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentIgnoreTrailingNulls_aHJc5() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5, 0, 0, 0 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5 };
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_NullBuffer1_ZZTJ6() {
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5 };
    assertFalse(ArchiveUtils.isEqual(null, 0, 0, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_NullBuffer2_YUPh7() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, null, 0, 0, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_NullBuffers_wENW8() {
    assertFalse(ArchiveUtils.isEqual(null, 0, 0, null, 0, 0, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_SameArrays_afUa0() {
    byte[] buffer1 = new byte[] { 1, 2, 3 };
    byte[] buffer2 = new byte[] { 1, 2, 3 };
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentArrays_fUaU1() {
    byte[] buffer1 = new byte[] { 1, 2, 3 };
    byte[] buffer2 = new byte[] { 4, 5, 6 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_NullArrays_NNOk2() {
    byte[] buffer1 = null;
    byte[] buffer2 = null;
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_OneNullArray_JnKP3() {
    byte[] buffer1 = new byte[] { 1, 2, 3 };
    byte[] buffer2 = null;
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_EmptyArrays_Suyu4() {
    byte[] buffer1 = new byte[0];
    byte[] buffer2 = new byte[0];
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_OneEmptyArray_XgHz5() {
    byte[] buffer1 = new byte[0];
    byte[] buffer2 = new byte[] { 1, 2, 3 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLengthArrays_JeYZ6() {
    byte[] buffer1 = new byte[] { 1, 2, 3 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_EmptyString_jlaV0() {
    String inputString = "";
    byte[] expected = new byte[0];
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_NullString_pXeg1() {
    String inputString = null;
    byte[] expected = new byte[0];
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_SingleCharacter_BpOs2() {
    String inputString = "a";
    byte[] expected = new byte[] { 97 };
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_MultipleCharacters_lGlA3() {
    String inputString = "abc";
    byte[] expected = new byte[] { 97, 98, 99 };
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_NonAsciiCharacter_fBrz4() {
    String inputString = "";
    byte[] expected = new byte[] { -1 };
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_NonAsciiCharacterInMiddle_wmYT5() {
    String inputString = "ac";
    byte[] expected = new byte[] { 97, -1, 99 };
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_NonAsciiCharacterAtEnd_ULbd6() {
    String inputString = "abc";
    byte[] expected = new byte[] { 97, 98, 99, -1 };
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_NonAsciiCharacterAtBeginning_PbSo7() {
    String inputString = "abc";
    byte[] expected = new byte[] { -1, 97, 98, 99 };
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_NonAsciiCharacterInMiddleAndEnd_bBwO8() {
    String inputString = "ac";
    byte[] expected = new byte[] { 97, -1, 99, -1 };
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_NonAsciiCharacterInMiddleAndBeginning_qIcX9() {
    String inputString = "abc";
    byte[] expected = new byte[] { -1, 97, 98, 99, -1 };
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_EmptyString_UxXI0() {
    String input = "";
    String expected = "";
    String actual = ArchiveUtils.sanitize(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_NullString_xYHq1() {
    String input = null;
    String expected = null;
    String actual = ArchiveUtils.sanitize(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_ShortString_JOId2() {
    String input = "abc";
    String expected = "abc";
    String actual = ArchiveUtils.sanitize(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_LongString_HAIH3() {
    String input = "abcdefghijklmnopqrstuvwxyz";
    String expected = "abcdefghijklmnopqrstuvwxyz";
    String actual = ArchiveUtils.sanitize(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_SpecialCharacters_oVKr4() {
    String input = "!@#$%^&*()_+-=[]{}|;':\"<>,./?";
    String expected = "!@#$%^&*()_+-=[]{}|;':\"<>,./?";
    String actual = ArchiveUtils.sanitize(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_MixedCharacters_RGVL6() {
    String input = "abc123!@#$%^&*()_+-=[]{}|;':\"<>,./?";
    String expected = "abc123!@#$%^&*()_+-=[]{}|;':\"<>,./?";
    String actual = ArchiveUtils.sanitize(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_EqualBuffers_Sznj0() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5 };
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_UnequalBuffers_KaBu1() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 6 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_NullBuffer1_Jutj2() {
    byte[] buffer1 = null;
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_NullBuffer2_TjyI3() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = null;
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_EmptyBuffers_RusH4() {
    byte[] buffer1 = new byte[] {};
    byte[] buffer2 = new byte[] {};
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLengths_huNQ5() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5, 6 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_IgnoreTrailingNulls_aASu6() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5, 0, 0, 0 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5, 0, 0, 0 };
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentTrailingNulls_VGZM7() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5, 0, 0, 0 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5, 0, 0, 1 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLengthsAndTrailingNulls_Sovb8() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5, 0, 0, 0 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5, 0, 0, 1, 2 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLengthsAndTrailingNulls2_wXOW9() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5, 0, 0, 0 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5, 0, 0, 1, 2, 3 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_nullBuffer_wrLe4() {
    String expected = "Hello World";
    byte[] buffer = null;
    int offset = 0;
    int length = 0;
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer, offset, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayZero_EmptyArray_Xzav0() {
    byte[] a = new byte[0];
    assertTrue(ArchiveUtils.isArrayZero(a, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayZero_NonZeroArray_wucE1() {
    byte[] a = new byte[] { 1, 2, 3 };
    assertFalse(ArchiveUtils.isArrayZero(a, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayZero_ZeroArray_CxEI2() {
    byte[] a = new byte[] { 0, 0, 0 };
    assertTrue(ArchiveUtils.isArrayZero(a, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_null_oyxG0() {
    byte[] inputBytes = null;
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_empty_vOoG1() {
    byte[] inputBytes = new byte[0];
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_nonEmpty_TPAK2() {
    byte[] inputBytes = new byte[] { 65, 66, 67 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("ABC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_invalid_PmnF3() {
    byte[] inputBytes = new byte[] { -1, -2, -3 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_invalid2_aava4() {
    byte[] inputBytes = new byte[] { 65, 66, 67, -1, -2, -3 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("ABC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_invalid3_YGTl5() {
    byte[] inputBytes = new byte[] { -1, -2, -3, 65, 66, 67 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_invalid4_CGOn6() {
    byte[] inputBytes = new byte[] { 65, 66, 67, -1, -2, -3, 68, 69, 70 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("ABCDEFG", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_invalid5_fQdC7() {
    byte[] inputBytes = new byte[] { -1, -2, -3, 65, 66, 67, -1, -2, -3, 68, 69, 70 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_invalid6_gFKW8() {
    byte[] inputBytes = new byte[] { 65, 66, 67, -1, -2, -3, 68, 69, 70, -1, -2, -3 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("ABCDEFG", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_invalid7_dEWU9() {
    byte[] inputBytes = new byte[] { -1, -2, -3, 65, 66, 67, -1, -2, -3, 68, 69, 70, -1, -2, -3 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_invalid8_BgyE10() {
    byte[] inputBytes = new byte[] { 65, 66, 67, -1, -2, -3, 68, 69, 70, -1, -2, -3, 71, 72, 73 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("ABCDEFGHIJ", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_invalid9_WSTf11() {
    byte[] inputBytes = new byte[] { -1, -2, -3, 65, 66, 67, -1, -2, -3, 68, 69, 70, -1, -2, -3, 71, 72, 73 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_EqualBuffers_jZZh0() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5 };
    int offset1 = 0;
    int length1 = buffer1.length;
    int offset2 = 0;
    int length2 = buffer2.length;
    boolean result = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentBuffers_Zrzt1() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 6, 7, 8, 9, 10 };
    int offset1 = 0;
    int length1 = buffer1.length;
    int offset2 = 0;
    int length2 = buffer2.length;
    boolean result = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentOffsets_RUgI2() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5 };
    int offset1 = 1;
    int length1 = buffer1.length - 1;
    int offset2 = 2;
    int length2 = buffer2.length - 1;
    boolean result = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLengths_jXAS3() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5 };
    int offset1 = 0;
    int length1 = buffer1.length - 1;
    int offset2 = 0;
    int length2 = buffer2.length - 1;
    boolean result = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_NullBuffer1_jjzh4() {
    byte[] buffer1 = null;
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5 };
    int offset1 = 0;
    int length1 = 0;
    int offset2 = 0;
    int length2 = buffer2.length;
    boolean result = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_NullBuffer2_KBjF5() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = null;
    int offset1 = 0;
    int length1 = buffer1.length;
    int offset2 = 0;
    int length2 = 0;
    boolean result = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_NullBuffers_vlml6() {
    byte[] buffer1 = null;
    byte[] buffer2 = null;
    int offset1 = 0;
    int length1 = 0;
    int offset2 = 0;
    int length2 = 0;
    boolean result = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_EmptyExpected_XRrm0() {
    String expected = "";
    byte[] buffer = new byte[0];
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_EmptyBuffer_WvGP1() {
    String expected = "test";
    byte[] buffer = new byte[0];
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_EqualLengths_FkKS2() {
    String expected = "test";
    byte[] buffer = new byte[4];
    buffer[0] = 't';
    buffer[1] = 'e';
    buffer[2] = 's';
    buffer[3] = 't';
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_DifferentLengths_fnBu3() {
    String expected = "test";
    byte[] buffer = new byte[5];
    buffer[0] = 't';
    buffer[1] = 'e';
    buffer[2] = 's';
    buffer[3] = 't';
    buffer[4] = ' ';
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_DifferentValues_SEvD4() {
    String expected = "test";
    byte[] buffer = new byte[4];
    buffer[0] = 't';
    buffer[1] = 'e';
    buffer[2] = 's';
    buffer[3] = 'f';
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_NullExpected_MCXf5() {
    String expected = null;
    byte[] buffer = new byte[0];
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_NullBuffer_mVvX6() {
    String expected = "test";
    byte[] buffer = null;
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_NegativeOffset_mtqN7() {
    String expected = "test";
    byte[] buffer = new byte[4];
    buffer[0] = 't';
    buffer[1] = 'e';
    buffer[2] = 's';
    buffer[3] = 't';
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer, -1, 4);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_NegativeLength_jzPJ8() {
    String expected = "test";
    byte[] buffer = new byte[4];
    buffer[0] = 't';
    buffer[1] = 'e';
    buffer[2] = 's';
    buffer[3] = 't';
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer, 0, -1);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_ValidInput_rOQG0() {
    byte[] inputBytes = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90 };
    int offset = 0;
    int length = 10;
    String expected = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    String actual = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_InvalidInput_nrcy1() {
    byte[] inputBytes = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90 };
    int offset = 10;
    int length = 10;
    String expected = "KLMNOPQRSTUVWXYZ";
    String actual = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_EmptyInput_zIqw2() {
    byte[] inputBytes = new byte[] {};
    int offset = 0;
    int length = 0;
    String expected = "";
    String actual = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_NullInput_AhXD3() {
    byte[] inputBytes = null;
    int offset = 0;
    int length = 0;
    String expected = null;
    String actual = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_NegativeOffset_rMqA4() {
    byte[] inputBytes = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90 };
    int offset = -1;
    int length = 10;
    String expected = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    String actual = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_NegativeLength_RKaG5() {
    byte[] inputBytes = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90 };
    int offset = 0;
    int length = -1;
    String expected = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    String actual = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_OffsetGreaterThanLength_YaFr6() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_NullBuffer1_RjMG0() {
    byte[] buffer1 = null;
    int offset1 = 0;
    int length1 = 0;
    byte[] buffer2 = new byte[10];
    int offset2 = 0;
    int length2 = 10;
    assertFalse(ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_NullBuffer2_SXob1() {
    byte[] buffer1 = new byte[10];
    int offset1 = 0;
    int length1 = 10;
    byte[] buffer2 = null;
    int offset2 = 0;
    int length2 = 0;
    assertFalse(ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_DifferentLengths_mApu2() {
    byte[] buffer1 = new byte[10];
    int offset1 = 0;
    int length1 = 10;
    byte[] buffer2 = new byte[10];
    int offset2 = 0;
    int length2 = 5;
    assertFalse(ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_SameLengths_PuhQ3() {
    byte[] buffer1 = new byte[10];
    int offset1 = 0;
    int length1 = 10;
    byte[] buffer2 = new byte[10];
    int offset2 = 0;
    int length2 = 10;
    assertTrue(ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_DifferentOffsets_zRMI4() {
    byte[] buffer1 = new byte[10];
    int offset1 = 0;
    int length1 = 10;
    byte[] buffer2 = new byte[10];
    int offset2 = 5;
    int length2 = 10;
    assertFalse(ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_DifferentBuffers_Ctsf6() {
    byte[] buffer1 = new byte[10];
    int offset1 = 0;
    int length1 = 10;
    byte[] buffer2 = new byte[10];
    int offset2 = 0;
    int length2 = 10;
    assertFalse(ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_SameBuffers_EaIm7() {
    byte[] buffer1 = new byte[10];
    int offset1 = 0;
    int length1 = 10;
    byte[] buffer2 = buffer1;
    int offset2 = 0;
    int length2 = 10;
    assertTrue(ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2));
}
}