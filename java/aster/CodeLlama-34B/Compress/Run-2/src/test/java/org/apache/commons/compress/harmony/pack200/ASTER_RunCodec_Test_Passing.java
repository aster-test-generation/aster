/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_RunCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBCodec_lMsh0() throws Pack200Exception {
    int b = 1;
    int h = 2;
    int s = 3;
    int d = 4;
    BHSDCodec aCodec = new BHSDCodec(b, h, s, d);
    BHSDCodec bCodec = new BHSDCodec(b, h, s);
    RunCodec runCodec = new RunCodec(1, aCodec, bCodec);
    Codec codec = runCodec.getBCodec();
    assertEquals(bCodec, codec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bCJU1() {
    BHSDCodec codec1 = new BHSDCodec(1, 2);
    BHSDCodec codec2 = new BHSDCodec(3, 4);
    String result1 = codec1.toString();
    assertNotNull(result1);
    assertTrue(result1.contains("b=1"));
    assertTrue(result1.contains("h=2"));
    String result2 = codec2.toString();
    assertNotNull(result2);
    assertTrue(result2.contains("b=3"));
    assertTrue(result2.contains("h=4"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_XzbD0() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    byte[] result = runCodec.encode(10, 20);
    assertArrayEquals(new byte[] { 1, 2, 3, 4, 5, 10, 20 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_rysd0() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    byte[] result = runCodec.encode(10);
    assertEquals(10, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithBHSDCodec_XVLD1() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2, 3, 4);
    BHSDCodec bCodec = new BHSDCodec(5, 6, 7, 8);
    RunCodec runCodec = new RunCodec(9, aCodec, bCodec);
    byte[] result = runCodec.encode(10);
    assertEquals(10, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithInvalidValue_SngK2() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    try {
        runCodec.encode(0);
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
        assertEquals("Must encode entire band at once with a RunCodec", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bCJU1_1() {
    BHSDCodec codec1 = new BHSDCodec(1, 2);
    BHSDCodec codec2 = new BHSDCodec(3, 4);
    String result1 = codec1.toString();
    String result2 = codec2.toString();
    assertNotNull(result1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bCJU1_2() {
    BHSDCodec codec1 = new BHSDCodec(1, 2);
    BHSDCodec codec2 = new BHSDCodec(3, 4);
    String result1 = codec1.toString();
    String result2 = codec2.toString();
    assertTrue(result1.contains("b=1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bCJU1_3() {
    BHSDCodec codec1 = new BHSDCodec(1, 2);
    BHSDCodec codec2 = new BHSDCodec(3, 4);
    String result1 = codec1.toString();
    String result2 = codec2.toString();
    assertTrue(result1.contains("h=2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bCJU1_4() {
    BHSDCodec codec1 = new BHSDCodec(1, 2);
    BHSDCodec codec2 = new BHSDCodec(3, 4);
    String result1 = codec1.toString();
    String result2 = codec2.toString();
    assertNotNull(result2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bCJU1_5() {
    BHSDCodec codec1 = new BHSDCodec(1, 2);
    BHSDCodec codec2 = new BHSDCodec(3, 4);
    String result1 = codec1.toString();
    String result2 = codec2.toString();
    assertTrue(result2.contains("b=3"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bCJU1_6() {
    BHSDCodec codec1 = new BHSDCodec(1, 2);
    BHSDCodec codec2 = new BHSDCodec(3, 4);
    String result1 = codec1.toString();
    String result2 = codec2.toString();
    assertTrue(result2.contains("h=4"));}
}