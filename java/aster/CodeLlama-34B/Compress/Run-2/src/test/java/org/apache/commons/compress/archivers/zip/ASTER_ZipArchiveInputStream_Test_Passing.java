/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_SINGLE_SEGMENT_SPLIT_MARKER_eqLV3() {
    byte[] signature = ZipLong.SINGLE_SEGMENT_SPLIT_MARKER.getBytes();
    int length = signature.length;
    assertTrue(ZipArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_UbTv4() {
    byte[] signature = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int length = signature.length;
    assertFalse(ZipArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntryWithNullInputStream_cpkZ5() throws IOException {
ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(null);
ZipArchiveEntry entry = zipInputStream.getNextEntry();
assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntryWithEmptyInputStream_KnGb6() throws IOException {
ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
ZipArchiveEntry entry = zipInputStream.getNextEntry();
assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipPositiveValue_WPFA0() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    long skipped = zipInputStream.skip(5);
    assertEquals(5, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipNegativeValue_nOiN1() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    try {
        zipInputStream.skip(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipZeroValue_oKtF2() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    long skipped = zipInputStream.skip(0);
    assertEquals(0, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipLargeValue_MzOP3() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    long skipped = zipInputStream.skip(100);
    assertEquals(10, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCount_STORED_iJrC0() {
    ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    long compressedCount = zis.getCompressedCount();
    assertEquals(0, compressedCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_oUuq0() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry entry = zipInputStream.getNextZipEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_lgPY0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry2_Oqgd1() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zipArchiveInputStream.close();
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCount1_mYnu0() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    assertEquals(0, zip.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCount2_TBqe1() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    assertEquals(10, zip.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCount3_XaMl2() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, true);
    assertEquals(10, zip.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCount4_qXqo3() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true);
    assertEquals(10, zip.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCount5_MZZX4() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true);
    assertEquals(10, zip.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData_ZipArchiveEntry_wDXp0() {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    ZipArchiveEntry zipEntry = new ZipArchiveEntry("test.txt");
    assertTrue(zipInputStream.canReadEntryData(zipEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData_ZipArchiveEntry_UnsupportedCompressedSize_cbQC4() {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    ZipArchiveEntry zipEntry = new ZipArchiveEntry("test.txt");
    zipEntry.setCompressedSize(0);
    assertFalse(zipInputStream.canReadEntryData(zipEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInput_eaXU0() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    int read = zipInputStream.read(buffer, offset, length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInputAndStoredEntry_LpRy1() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    int read = zipInputStream.read(buffer, offset, length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInput_mQLX0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInputAndOffset_EGYt1() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 5;
    int length = 10;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInputAndLength_KXde2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 5;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInputAndOffsetAndLength_dfLT3() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 5;
    int length = 5;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidInput_jrqC4() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = null;
    int offset = 0;
    int length = 10;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidInputAndOffset_GGeg5() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = null;
    int offset = 5;
    int length = 10;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidInputAndLength_Ibtr6() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = null;
    int offset = 0;
    int length = 5;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidInputAndOffsetAndLength_IwzS7() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = null;
    int offset = 5;
    int length = 5;
    int read = zipArchiveInputStream.read(buffer, offset, length);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry4_IgFD3_ihMH0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNotNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData_NonZipArchiveEntry_Rsor1_rrqP0() {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test");
    assertFalse(zipInputStream.canReadEntryData(archiveEntry));
}
}