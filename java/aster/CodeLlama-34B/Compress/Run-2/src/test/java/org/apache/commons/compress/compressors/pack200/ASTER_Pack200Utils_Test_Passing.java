/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200Utils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalize_sTAS0_1() throws IOException {
        File from = new File("from.txt");
        File to = new File("to.txt");
        Pack200Utils.normalize(from, to);
        assertTrue(to.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalize_sTAS0_2() throws IOException {
        File from = new File("from.txt");
        File to = new File("to.txt");
        Pack200Utils.normalize(from, to);
        assertEquals(from.length(), to.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithNullFrom_kqOp1() throws IOException {
        File to = new File("to.txt");
        Pack200Utils.normalize(null, to);
        assertFalse(to.exists());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithNonExistentFrom_fLDA3() throws IOException {
        File from = new File("non_existent.txt");
        File to = new File("to.txt");
        Pack200Utils.normalize(from, to);
        assertFalse(to.exists());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithNonExistentTo_VaYG4() throws IOException {
        File from = new File("from.txt");
        File to = new File("non_existent.txt");
        Pack200Utils.normalize(from, to);
        assertFalse(from.exists());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithEmptyFrom_lBbR5_1() throws IOException {
        File from = new File("empty.txt");
        File to = new File("to.txt");
        Pack200Utils.normalize(from, to);
        assertTrue(to.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithEmptyFrom_lBbR5_2() throws IOException {
        File from = new File("empty.txt");
        File to = new File("to.txt");
        Pack200Utils.normalize(from, to);
        assertEquals(0, to.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithEmptyTo_zQAB6_1() throws IOException {
        File from = new File("from.txt");
        File to = new File("empty.txt");
        Pack200Utils.normalize(from, to);
        assertTrue(from.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithEmptyTo_zQAB6_2() throws IOException {
        File from = new File("from.txt");
        File to = new File("empty.txt");
        Pack200Utils.normalize(from, to);
        assertEquals(0, from.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithSameFromAndTo_oYWE7_1() throws IOException {
        File from = new File("from.txt");
        File to = new File("from.txt");
        Pack200Utils.normalize(from, to);
        assertTrue(from.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithSameFromAndTo_oYWE7_2() throws IOException {
        File from = new File("from.txt");
        File to = new File("from.txt");
        Pack200Utils.normalize(from, to);
        assertEquals(from.length(), to.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithDifferentFromAndTo_LJJR8_1() throws IOException {
        File from = new File("from.txt");
        File to = new File("to.txt");
        Pack200Utils.normalize(from, to);
        assertTrue(from.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_nullFile_VLIT0() throws IOException {
    File from = null;
    File to = new File("test.jar");
    Map<String, String> props = new HashMap<>();
    try {
        Pack200Utils.normalize(from, to, props);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("from", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_nullToFile_HLhM1() throws IOException {
    File from = new File("test.jar");
    File to = null;
    Map<String, String> props = new HashMap<>();
    try {
        Pack200Utils.normalize(from, to, props);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("to", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_nullProps_DoLv2() throws IOException {
    File from = new File("test.jar");
    File to = new File("test.jar");
    Map<String, String> props = null;
    try {
        Pack200Utils.normalize(from, to, props);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("props", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_validFiles_FJcx3() throws IOException {
    File from = new File("test.jar");
    File to = new File("test.jar");
    Map<String, String> props = new HashMap<>();
    Pack200Utils.normalize(from, to, props);
    assertTrue(to.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_jar_null_riDi0() throws IOException {
    File jar = null;
    Map<String, String> props = new HashMap<>();
    try {
        Pack200Utils.normalize(jar, props);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("jar", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_props_null_wSyd1() throws IOException {
    File jar = new File("test.jar");
    Map<String, String> props = null;
    try {
        Pack200Utils.normalize(jar, props);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("props", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_jar_not_jar_TKSp3() throws IOException {
    File jar = new File("test.txt");
    Map<String, String> props = new HashMap<>();
    try {
        Pack200Utils.normalize(jar, props);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("test.txt is not a JAR file", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_success_NlgY4_1() throws IOException {
    File jar = new File("test.jar");
    Map<String, String> props = new HashMap<>();
    props.put("key", "value");
    Pack200Utils.normalize(jar, props);
    assertEquals(1, props.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_success_NlgY4_2() throws IOException {
    File jar = new File("test.jar");
    Map<String, String> props = new HashMap<>();
    props.put("key", "value");
    Pack200Utils.normalize(jar, props);
    assertEquals("value", props.get("key"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_nullJar_valL0() throws IOException {
    File jar = null;
    try {
        Pack200Utils.normalize(jar);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("jar", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_invalidJar_ofyv2() throws IOException {
    File jar = new File("test.jar");
    try {
        Pack200Utils.normalize(jar, new File("invalid.jar"));
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Invalid JAR file", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_invalidDestination_EfLz3() throws IOException {
    File jar = new File("test.jar");
    try {
        Pack200Utils.normalize(jar, new File("invalid.jar"));
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Invalid destination file", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_validJar_nenl4() throws IOException {
    File jar = new File("test.jar");
    File destination = new File("test_normalized.jar");
    Pack200Utils.normalize(jar, destination);
    assertTrue(destination.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithNullTo_JWDn2_kUAl0() throws IOException {
    File from = new File("from.txt");
    Pack200Utils.normalize(from, from, null);
    assertFalse(from.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_nullDestination_CWUp1_jjzS0() throws IOException {
    File jar = new File("test.jar");
    try {
        Pack200Utils.normalize(jar, null, null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("destination", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalize_sTAS0() throws IOException {
        File from = new File("from.txt");
        File to = new File("to.txt");
        Pack200Utils.normalize(from, to);
        assertTrue(to.exists());
        assertEquals(from.length(), to.length());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithEmptyFrom_lBbR5() throws IOException {
        File from = new File("empty.txt");
        File to = new File("to.txt");
        Pack200Utils.normalize(from, to);
        assertTrue(to.exists());
        assertEquals(0, to.length());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithEmptyTo_zQAB6() throws IOException {
        File from = new File("from.txt");
        File to = new File("empty.txt");
        Pack200Utils.normalize(from, to);
        assertTrue(from.exists());
        assertEquals(0, from.length());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithSameFromAndTo_oYWE7() throws IOException {
        File from = new File("from.txt");
        File to = new File("from.txt");
        Pack200Utils.normalize(from, to);
        assertTrue(from.exists());
        assertEquals(from.length(), to.length());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithDifferentFromAndTo_LJJR8() throws IOException {
        File from = new File("from.txt");
        File to = new File("to.txt");
        Pack200Utils.normalize(from, to);
        assertTrue(from.exists());
        assertEquals(from.length(), to.length());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_success_NlgY4() throws IOException {
    File jar = new File("test.jar");
    Map<String, String> props = new HashMap<>();
    props.put("key", "value");
    Pack200Utils.normalize(jar, props);
    assertEquals(1, props.size());
    assertEquals("value", props.get("key"));
}
}