/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.channels.ReadableByteChannel;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IOUtils_Test_Passing {
    private InputStream inputStream;

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadFully_NullInputStream_ajbW7() throws IOException {
    byte[] array = new byte[10];
    int offset = 0;
    int length = 5;
    InputStream input = null;
    try {
        IOUtils.readFully(input, array, offset, length);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopy_NullFileAndValidOutputStream_yKhR2() throws IOException {
    File sourceFile = null;
    OutputStream outputStream = new ByteArrayOutputStream();
    try {
        IOUtils.copy(sourceFile, outputStream);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    assertNull(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopy_NullFileAndNullOutputStream_LlwD3() throws IOException {
    File sourceFile = null;
    OutputStream outputStream = null;
    try {
        IOUtils.copy(sourceFile, outputStream);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopy_ValidFileAndClosedOutputStream_OlSh4() throws IOException {
    File sourceFile = new File("test.txt");
    OutputStream outputStream = new ByteArrayOutputStream();
    outputStream.close();
    try {
        IOUtils.copy(sourceFile, outputStream);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("test.txt", e.getMessage());
    }
}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_ValidFile_Success_MPWO0() throws IOException {
    File file = new File("test.txt");
    byte[] array = new byte[10];
    int result = IOUtils.read(file, array);
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_InvalidFile_IOException_acSp1() throws IOException {
    File file = new File("invalid_file.txt");
    byte[] array = new byte[10];
    try {
        IOUtils.read(file, array);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_NullFile_NullPointerException_HmIt2() throws IOException {
    File file = null;
    byte[] array = new byte[10];
    try {
        IOUtils.read(file, array);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertNull(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopy_InputStream_OutputStream_int_NullInputStream_ewYq1() throws IOException {
    InputStream input = null;
    OutputStream output = new ByteArrayOutputStream();
    int bufferSize = 1024;
    try {
        IOUtils.copy(input, output, bufferSize);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip_aGnH0() throws IOException {
        long toSkip = 10;
        long expected = 5;
        when(inputStream.skip(toSkip)).thenReturn(expected);
        long actual = IOUtils.skip(inputStream, toSkip);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadFullyWithNullInputStream_uKNV5() throws IOException {
        byte[] array = new byte[10];
        try {
            IOUtils.readFully(null, array);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyRange_nullInput_GQiW2() throws IOException {
    InputStream input = null;
    OutputStream output = new ByteArrayOutputStream();
    long length = 5;
    int bufferSize = 10;
    try {
        IOUtils.copyRange(input, length, output, bufferSize);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    assertNull(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseQuietly_null_RrWT0() {
    IOUtils.closeQuietly(null);
    assertNull(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_InvalidFile_IOException_acSp1_EFwx0() throws IOException {
    File file = new File("invalid_file.txt");
    byte[] array = new byte[10];
    try {
        IOUtils.read(file, array);
        fail("Expected IOException");
    } catch (IOException e) {
        assertFalse(e.getMessage().contains("Invalid file"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseQuietly_nonCloseable_waDw3_ZNaA0() {
    Object o = new Object();
    IOUtils.closeQuietly((Closeable) o);
    assertNull(o);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseQuietly_nullObject_zoTx7_GwrM0() {
    IOUtils.closeQuietly((Closeable) null);
    assertNull(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToByteArrayWithNullInputStream_gGfZ2_PXBK1() throws IOException {
    InputStream input = null;
    byte[] expected = new byte[0];
    byte[] actual = IOUtils.toByteArray(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopy_ValidFileAndNullOutputStream_sqhX1() throws IOException {
    File sourceFile = new File("test.txt");
    OutputStream outputStream = null;
    try {
        IOUtils.copy(sourceFile, outputStream);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("outputStream", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopy_NullFileAndValidOutputStream_yKhR2_fid1() throws IOException {
    File sourceFile = null;
    OutputStream outputStream = new ByteArrayOutputStream();
    try {
        IOUtils.copy(sourceFile, outputStream);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("sourceFile", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopy_NullFileAndNullOutputStream_LlwD3_fid1() throws IOException {
    File sourceFile = null;
    OutputStream outputStream = null;
    try {
        IOUtils.copy(sourceFile, outputStream);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("sourceFile", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopy_ValidFileAndClosedOutputStream_OlSh4_fid1() throws IOException {
    File sourceFile = new File("test.txt");
    OutputStream outputStream = new ByteArrayOutputStream();
    outputStream.close();
    try {
        IOUtils.copy(sourceFile, outputStream);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("OutputStream is closed", e.getMessage());
    }
}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_InvalidFile_IOException_acSp1_fid1() throws IOException {
    File file = new File("invalid_file.txt");
    byte[] array = new byte[10];
    try {
        IOUtils.read(file, array);
        fail("Expected IOException");
    } catch (IOException e) {
        assertTrue(e.getMessage().contains("Invalid file"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_NullFile_NullPointerException_HmIt2_fid1() throws IOException {
    File file = null;
    byte[] array = new byte[10];
    try {
        IOUtils.read(file, array);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertTrue(e.getMessage().contains("file is null"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopy_InputStream_OutputStream_int_NullInputStream_ewYq1_fid1() throws IOException {
    InputStream input = null;
    OutputStream output = new ByteArrayOutputStream();
    int bufferSize = 1024;
    try {
        IOUtils.copy(input, output, bufferSize);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("input", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyRange_nullInput_GQiW2_fid1() throws IOException {
    InputStream input = null;
    OutputStream output = new ByteArrayOutputStream();
    long length = 5;
    int bufferSize = 10;
    try {
        IOUtils.copyRange(input, length, output, bufferSize);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("input is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseQuietly_nonCloseable_waDw3_ZNaA0_fid1() {
    Object o = new Object();
    IOUtils.closeQuietly((Closeable) o);
    assertNull(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToByteArrayWithNullInputStream_gGfZ2_PXBK1_fid1() throws IOException {
    InputStream input = null;
    byte[] expected = null;
    byte[] actual = IOUtils.toByteArray(input);
    assertArrayEquals(expected, actual);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadFully_ValidInput_VjFQ0() throws IOException {
    ReadableByteChannel channel = mock(ReadableByteChannel.class);
    ByteBuffer byteBuffer = ByteBuffer.allocate(10);
    byte[] bytes = new byte[10];
    Arrays.fill(bytes, (byte) 1);
    when(channel.read(byteBuffer)).thenReturn(bytes.length);
    IOUtils.readFully(channel, byteBuffer);
    assertEquals(10, byteBuffer.position());
    assertEquals(0, byteBuffer.remaining());
    assertArrayEquals(bytes, byteBuffer.array());
}
}