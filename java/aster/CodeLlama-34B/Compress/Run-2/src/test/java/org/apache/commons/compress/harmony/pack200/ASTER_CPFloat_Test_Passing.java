/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPFloat_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloatWithInfinity_UQTZ6() {
    CPFloat cpf = new CPFloat(Float.POSITIVE_INFINITY);
    assertEquals(Float.POSITIVE_INFINITY, cpf.getFloat(), 0.0001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloatWithNegativeInfinity_frsB7() {
    CPFloat cpf = new CPFloat(Float.NEGATIVE_INFINITY);
    assertEquals(Float.NEGATIVE_INFINITY, cpf.getFloat(), 0.0001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloatWithNull_RqsC8_wfst0() {
    CPFloat cpf = new CPFloat(0.0f);
    assertEquals(0.0f, cpf.getFloat(), 0.0001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_LiOW0() {
    CPFloat float1 = new CPFloat(1.0f);
    CPFloat float2 = new CPFloat(2.0f);
    assertTrue(float1.compareTo(float2) < 0);
    assertTrue(float2.compareTo(float1) > 0);
    assertTrue(float1.compareTo(float1) == 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_SameValue_UHJK1() {
    CPFloat float1 = new CPFloat(1.0f);
    CPFloat float2 = new CPFloat(1.0f);
    assertTrue(float1.compareTo(float2) == 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_DifferentValue_dzvJ2() {
    CPFloat float1 = new CPFloat(1.0f);
    CPFloat float2 = new CPFloat(2.0f);
    assertTrue(float1.compareTo(float2) < 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloat_ZahV0() {
    CPFloat cpf = new CPFloat(1.0f);
    assertEquals(1.0f, cpf.getFloat(), 0.0001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloatWithNegativeValue_crox1() {
    CPFloat cpf = new CPFloat(-1.0f);
    assertEquals(-1.0f, cpf.getFloat(), 0.0001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloatWithMaxValue_Acqo3() {
    CPFloat cpf = new CPFloat(Float.MAX_VALUE);
    assertEquals(Float.MAX_VALUE, cpf.getFloat(), 0.0001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloatWithMinValue_uSuw4() {
    CPFloat cpf = new CPFloat(Float.MIN_VALUE);
    assertEquals(Float.MIN_VALUE, cpf.getFloat(), 0.0001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloatWithNaN_runZ5() {
    CPFloat cpf = new CPFloat(Float.NaN);
    assertEquals(Float.NaN, cpf.getFloat(), 0.0001);
}
}