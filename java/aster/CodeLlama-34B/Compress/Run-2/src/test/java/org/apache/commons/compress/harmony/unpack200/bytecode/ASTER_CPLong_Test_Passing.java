/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPLong_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithInvalidGlobalIndex7_cbOw12() {
    CPLong cpl = new CPLong(10L, 1);
    String expected = "Long: 10";
    String actual = cpl.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithInvalidGlobalIndex8_Fpxi13() {
    CPLong cpl = new CPLong(10L, 1000);
    String expected = "Long: 10";
    String actual = cpl.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteBodyWithInvalidDataOutputStream_WHKg7() throws IOException {
    CPLong cpl = new CPLong(10L, 0);
    DataOutputStream dos = null;
    try {
        cpl.writeBody(dos);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_banP0() {
    CPLong cpl = new CPLong(10L, 0);
    String expected = "Long: 10";
    String actual = cpl.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNegativeValue_nzlB1() {
    CPLong cpl = new CPLong(-10L, 0);
    String expected = "Long: -10";
    String actual = cpl.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithZeroValue_qfHq2() {
    CPLong cpl = new CPLong(0L, 0);
    String expected = "Long: 0";
    String actual = cpl.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithMaxValue_McLX3() {
    CPLong cpl = new CPLong(Long.MAX_VALUE, 0);
    String expected = "Long: " + Long.MAX_VALUE;
    String actual = cpl.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithMinValue_qjLi4() {
    CPLong cpl = new CPLong(Long.MIN_VALUE, 0);
    String expected = "Long: " + Long.MIN_VALUE;
    String actual = cpl.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithInvalidValue_OKVm5() {
    CPLong cpl = new CPLong(null, 0);
    String expected = "Long: null";
    String actual = cpl.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithInvalidGlobalIndex_saMJ6() {
    CPLong cpl = new CPLong(10L, -1);
    String expected = "Long: 10";
    String actual = cpl.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithInvalidGlobalIndex2_ODgl7() {
    CPLong cpl = new CPLong(10L, 10);
    String expected = "Long: 10";
    String actual = cpl.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithInvalidGlobalIndex3_rmIA8() {
    CPLong cpl = new CPLong(10L, 100);
    String expected = "Long: 10";
    String actual = cpl.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithInvalidGlobalIndex4_XOlZ9() {
    CPLong cpl = new CPLong(10L, -10);
    String expected = "Long: 10";
    String actual = cpl.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithInvalidGlobalIndex5_IqFR10() {
    CPLong cpl = new CPLong(10L, -100);
    String expected = "Long: 10";
    String actual = cpl.toString();
    assertEquals(expected, actual);
}
}