/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_UnparseableExtraFieldData_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_ValidData_xNKT0() {
    UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    unparseableExtraFieldData.parseFromCentralDirectoryData(buffer, offset, length);
    assertEquals(buffer, unparseableExtraFieldData.getCentralDirectoryData());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_InvalidData_jPNm1() {
    UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    unparseableExtraFieldData.parseFromCentralDirectoryData(buffer, offset, length);
    assertNull(unparseableExtraFieldData.getCentralDirectoryData());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_LocalFileData_GxaN0() {
    UnparseableExtraFieldData data = new UnparseableExtraFieldData();
    byte[] centralDirectoryData = data.getCentralDirectoryData();
    assertEquals(centralDirectoryData, data.getLocalFileDataData());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_CentralDirectoryData_dtbM1() {
    UnparseableExtraFieldData data = new UnparseableExtraFieldData();
    byte[] centralDirectoryData = data.getCentralDirectoryData();
    assertNotNull(centralDirectoryData);
    assertEquals(centralDirectoryData, ZipUtil.copy(data.getLocalFileDataData()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_SIcw0() {
    UnparseableExtraFieldData data = new UnparseableExtraFieldData();
    ZipShort headerId = data.getHeaderId();
    assertEquals(headerId.getValue(), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdWithNull_sdwV6() {
    UnparseableExtraFieldData data = new UnparseableExtraFieldData();
    ZipShort headerId = data.getHeaderId();
    assertNull(headerId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdWithValidData_sRXl8() {
    UnparseableExtraFieldData data = new UnparseableExtraFieldData();
    ZipShort headerId = data.getHeaderId();
    assertNotNull(headerId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_okLy0() {
    UnparseableExtraFieldData data = new UnparseableExtraFieldData();
    byte[] expected = new byte[0];
    assertArrayEquals(expected, data.getLocalFileDataData());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_LocalFileDataLength_LEew0() {
    UnparseableExtraFieldData data = new UnparseableExtraFieldData();
    ZipShort centralDirectoryLength = data.getCentralDirectoryLength();
    assertEquals(data.getLocalFileDataLength().getValue(), centralDirectoryLength.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_CentralDirectoryData_dtbM1_1() {
    UnparseableExtraFieldData data = new UnparseableExtraFieldData();
    byte[] centralDirectoryData = data.getCentralDirectoryData();
    assertNotNull(centralDirectoryData);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_CentralDirectoryData_dtbM1_2() {
    UnparseableExtraFieldData data = new UnparseableExtraFieldData();
    byte[] centralDirectoryData = data.getCentralDirectoryData();
    assertEquals(centralDirectoryData, ZipUtil.copy(data.getLocalFileDataData()));}
}