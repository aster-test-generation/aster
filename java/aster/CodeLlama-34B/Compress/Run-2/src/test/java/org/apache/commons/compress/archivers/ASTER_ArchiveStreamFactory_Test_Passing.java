/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Set;
import java.util.SortedMap;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.utils.Sets;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Set;
import java.util.SortedMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ArchiveStreamFactory_Test_Passing {
private volatile String entryEncoding;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_rffn0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertEquals(8, archiveNames.size());
    assertTrue(archiveNames.contains("AR"));
    assertTrue(archiveNames.contains("ARJ"));
    assertTrue(archiveNames.contains("ZIP"));
    assertTrue(archiveNames.contains("TAR"));
    assertTrue(archiveNames.contains("JAR"));
    assertTrue(archiveNames.contains("CPIO"));
    assertTrue(archiveNames.contains("DUMP"));
    assertTrue(archiveNames.contains("SEVEN_Z"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_Zuss1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertEquals(8, archiveNames.size());
    assertTrue(archiveNames.contains("AR"));
    assertTrue(archiveNames.contains("ARJ"));
    assertTrue(archiveNames.contains("ZIP"));
    assertTrue(archiveNames.contains("TAR"));
    assertTrue(archiveNames.contains("JAR"));
    assertTrue(archiveNames.contains("CPIO"));
    assertTrue(archiveNames.contains("DUMP"));
    assertTrue(archiveNames.contains("SEVEN_Z"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEmptyInput_BPJi2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertNotNull(map);
    assertEquals(0, map.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEntryEncoding_nDFh0() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    archiveStreamFactory.setEntryEncoding("UTF-8");
    assertEquals("UTF-8", archiveStreamFactory.getEntryEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEntryEncodingWithNull_WHmD1() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    archiveStreamFactory.setEntryEncoding(null);
    assertNull(archiveStreamFactory.getEntryEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEntryEncodingWithEmptyString_dAib2() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    archiveStreamFactory.setEntryEncoding("");
    assertEquals("", archiveStreamFactory.getEntryEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryEncoding_DefaultEncoding_OeEa0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    String encoding = factory.getEntryEncoding();
    assertEquals("UTF-8", encoding);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryEncoding_CustomEncoding_dYCW1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("ISO-8859-1");
    String encoding = factory.getEntryEncoding();
    assertEquals("ISO-8859-1", encoding);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryEncoding_NullEncoding_aoWY2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory(null);
    String encoding = factory.getEntryEncoding();
    assertNull(encoding);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_rffn0_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertEquals(8, archiveNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_rffn0_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertFalse(archiveNames.contains("AR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_rffn0_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("ARJ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_rffn0_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("ZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_rffn0_5() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("TAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_rffn0_6() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("JAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_rffn0_7() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("CPIO"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_rffn0_8() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("DUMP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_rffn0_9() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("SEVEN_Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_Zuss1_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertEquals(8, archiveNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_Zuss1_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("AR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_Zuss1_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("ARJ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_Zuss1_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("ZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_Zuss1_5() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("TAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_Zuss1_6() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("JAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_Zuss1_7() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("CPIO"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_Zuss1_8() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("DUMP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_Zuss1_9() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("SEVEN_Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEmptyInput_BPJi2_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertNotNull(map);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEmptyInput_BPJi2_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertEquals(0, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_AR_GZhF0_rUra0() throws ArchiveException {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    ArchiveInputStream archiveInputStream = archiveStreamFactory.createArchiveInputStream("AR", new ByteArrayInputStream(new byte[0]));
    assertTrue(archiveInputStream instanceof ArArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_ARJ_Hnem1_soau0() throws ArchiveException {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    ArchiveInputStream archiveInputStream = archiveStreamFactory.createArchiveInputStream("ARJ", new ByteArrayInputStream(new byte[0]));
    assertTrue(archiveInputStream instanceof ArjArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_ZIP_snzX2_ClPP0() throws ArchiveException {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    ArchiveInputStream archiveInputStream = archiveStreamFactory.createArchiveInputStream("ZIP", new ByteArrayInputStream(new byte[0]), null);
    assertTrue(archiveInputStream instanceof ZipArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_TAR_sckK3_pUoH0() throws ArchiveException {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    ArchiveInputStream archiveInputStream = archiveStreamFactory.createArchiveInputStream("TAR", new ByteArrayInputStream(new byte[0]), null);
    assertTrue(archiveInputStream instanceof TarArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_JAR_HtUn4_IQlw0() throws ArchiveException {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    ArchiveInputStream archiveInputStream = archiveStreamFactory.createArchiveInputStream("JAR", new ByteArrayInputStream(new byte[0]), null);
    assertTrue(archiveInputStream instanceof JarArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_CPIO_cvGq5_vFPI0() throws ArchiveException {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    CpioArchiveInputStream archiveInputStream = (CpioArchiveInputStream) archiveStreamFactory.createArchiveInputStream("CPIO", new ByteArrayInputStream(new byte[0]));
    assertTrue(archiveInputStream instanceof CpioArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_DUMP_aRMc6_tlth0() throws ArchiveException {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    ArchiveInputStream archiveInputStream = archiveStreamFactory.createArchiveInputStream("DUMP", new ByteArrayInputStream(new byte[0]));
    assertTrue(archiveInputStream instanceof DumpArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_AR_withEncoding_vsIb8_lubN0() throws ArchiveException {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    ArchiveInputStream archiveInputStream = archiveStreamFactory.createArchiveInputStream("AR", new ByteArrayInputStream(new byte[0]), "UTF-8");
    assertTrue(archiveInputStream instanceof ArArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_ARJ_withEncoding_cfui9_zqzg0() throws ArchiveException {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    ArchiveInputStream archiveInputStream = archiveStreamFactory.createArchiveInputStream("ARJ", new ByteArrayInputStream(new byte[0]), "UTF-8");
    assertTrue(archiveInputStream instanceof ArjArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_ZIP_withEncoding_nHdF10_pWWL0() throws ArchiveException {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    ArchiveInputStream archiveInputStream = archiveStreamFactory.createArchiveInputStream("ZIP", new ByteArrayInputStream(new byte[0]), "UTF-8");
    assertTrue(archiveInputStream instanceof ZipArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_TAR_withEncoding_Nejv11_VdvT0() throws ArchiveException {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    ArchiveInputStream archiveInputStream = archiveStreamFactory.createArchiveInputStream("TAR", new ByteArrayInputStream(new byte[0]), "UTF-8");
    assertTrue(archiveInputStream instanceof TarArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_encoding_yrXO0_bIan0() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    InputStream in = new ByteArrayInputStream("test".getBytes());
    ArchiveInputStream archiveInputStream = factory.createArchiveInputStream(in);
    assertEquals(ArchiveInputStream.class, archiveInputStream.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_noEncoding_UjZq1_TIet0() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream("test".getBytes());
    ArchiveInputStream archiveInputStream = factory.createArchiveInputStream(in);
    assertEquals(ArchiveInputStream.class, archiveInputStream.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_nullEncoding_hkoJ3_Uspy1() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory(null);
    InputStream in = new ByteArrayInputStream("test".getBytes());
    ArchiveInputStream archiveInputStream = factory.createArchiveInputStream(in);
    assertEquals(ArchiveInputStream.class, archiveInputStream.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_emptyEncoding_RXxq4_UiTG0() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("");
    InputStream in = new ByteArrayInputStream("test".getBytes());
    ArchiveInputStream archiveInputStream = factory.createArchiveInputStream(in);
    assertEquals(ArchiveInputStream.class, archiveInputStream.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_1_cTkg0_pUzh0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> expected = Sets.newHashSet("ar", "zip", "tar", "jar", "cpio", "7z");
    Set<String> actual = factory.getOutputStreamArchiveNames();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersWithNullEncoding_mPDX2_AvTZ0_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersWithNullEncoding_mPDX2_AvTZ0_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
    assertEquals(7, providers.size());}
}