/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.SeekableByteChannel;
import org.apache.commons.compress.utils.InputStreamStatistics;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZFile_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_emptySignature_sJCh2() {
    byte[] signature = new byte[] {};
    int length = 0;
    assertFalse(SevenZFile.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nullSignature_FJzj3() {
    byte[] signature = null;
    int length = 0;
    assertFalse(SevenZFile.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_SeekableByteChannel_NSLV0() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    SevenZFile file = new SevenZFile(channel);
    assertEquals("SevenZFile{archive=SeekableByteChannel}", file.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_SeekableByteChannel_String_dBHK1() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    SevenZFile file = new SevenZFile(channel, "fileName");
    assertEquals("SevenZFile{archive=SeekableByteChannel, fileName=fileName}", file.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_SeekableByteChannel_String_SevenZFileOptions_xeAD2() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    SevenZFileOptions options = mock(SevenZFileOptions.class);
    SevenZFile file = new SevenZFile(channel, "fileName", options);
    assertEquals("SevenZFile{archive=SeekableByteChannel, fileName=fileName, options=SevenZFileOptions}", file.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_SeekableByteChannel_String_byteArray_dyQu3() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    byte[] password = new byte[0];
    SevenZFile file = new SevenZFile(channel, "fileName", password);
    assertEquals("SevenZFile{archive=SeekableByteChannel, fileName=fileName, password=byte[0]}", file.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_SeekableByteChannel_String_charArray_tDsz4() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    char[] password = new char[0];
    SevenZFile file = new SevenZFile(channel, "fileName", password);
    assertEquals("SevenZFile{archive=SeekableByteChannel, fileName=fileName, password=char[0]}", file.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_File_Zbaf7() throws IOException {
    File file = mock(File.class);
    SevenZFile sevenZFile = new SevenZFile(file);
    assertEquals("SevenZFile{archive=File}", sevenZFile.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_File_SevenZFileOptions_TjpE8() throws IOException {
    File file = mock(File.class);
    SevenZFileOptions options = mock(SevenZFileOptions.class);
    SevenZFile sevenZFile = new SevenZFile(file, options);
    assertEquals("SevenZFile{archive=File, options=SevenZFileOptions}", sevenZFile.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_File_byteArray_bqPC9() throws IOException {
    File file = mock(File.class);
    byte[] password = new byte[0];
    SevenZFile sevenZFile = new SevenZFile(file, password);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithInvalidEntry_OIEE1() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] { 'a', 'b', 'c' });
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("test.txt");
    entry.setSize(100);
    entry.setHasCrc(true);
    entry.setCrcValue(123456789);
    entry.setHasCreationDate(true);
    entry.setCreationDate(new Date());
    entry.setHasLastModifiedDate(true);
    entry.setLastModifiedDate(new Date());
    entry.setHasAccessDate(true);
    entry.setAccessDate(new Date());
    entry.setHasWindowsAttributes(true);
    entry.setWindowsAttributes(123456789);
    entry.setHasStream(true);
    entry.setContentMethods(new SevenZMethodConfiguration[] { new SevenZMethodConfiguration(SevenZMethod.LZMA2, 123456789) });
    InputStream inputStream = sevenZFile.getInputStream(null);
    assertNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead1_RHNj0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b);
    assertEquals(10, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead2_mrUJ1() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 0, 5);
    assertEquals(5, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead3_VvxM2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 5, 5);
    assertEquals(5, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead4_vKLn3() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 0, 10);
    assertEquals(10, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead5_kxgM4() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 0, 0);
    assertEquals(0, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead6_taik5() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 10, 0);
    assertEquals(0, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead7_yubG6() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 10, 10);
    assertEquals(0, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead8_fGxD7() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 5, 10);
    assertEquals(5, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead9_wFIE8() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    byte[] b = new byte[10];
    int bytesRead = sevenZFile.read(b, 10, 5);
    assertEquals(5, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatisticsForCurrentEntry_JOnb0_1() throws IOException {
SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
InputStreamStatistics statistics = sevenZFile.getStatisticsForCurrentEntry();
assertEquals(100, statistics.getCompressedCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatisticsForCurrentEntry_JOnb0_2() throws IOException {
SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
InputStreamStatistics statistics = sevenZFile.getStatisticsForCurrentEntry();
assertEquals(1000, statistics.getUncompressedCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_clhr0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    int b = sevenZFile.read();
    assertEquals(0, b);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithoutPassword_MSMs2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"));
    int b = sevenZFile.read();
    assertEquals(0, b);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_SeekableByteChannel_String_SevenZFileOptions_byteArray_laIM5_UDZy0() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    SevenZFileOptions options = mock(SevenZFileOptions.class);
    byte[] password = new byte[0];
    SevenZFile file = new SevenZFile(channel, "fileName", options);
    assertEquals("SevenZFile{archive=SeekableByteChannel, fileName=fileName, options=SevenZFileOptions, password=byte[0]}", file.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuilderWithFile_mAcN1_vEKG0() {
    File file = new File("test.7z");
    SevenZFile.Builder builder = SevenZFile.builder();
    builder.setFile(file);
    assertNotNull(builder);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries_singleFile_QuPU1_zSMg0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("single_file.7z"));
    Iterable<SevenZArchiveEntry> entries = sevenZFile.getEntries();
    assertEquals(1, entries.iterator().next().getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries_emptyArchive_OEYo6_xfOR0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("empty_archive.7z"));
    Iterable<SevenZArchiveEntry> entries = sevenZFile.getEntries();
    assertEquals(0, entries.iterator().next().getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_NbiA0_juvY0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    sevenZFile.close();
    assertNull(sevenZFile.getDefaultName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatisticsForCurrentEntry_JOnb0() throws IOException {
SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
InputStreamStatistics statistics = sevenZFile.getStatisticsForCurrentEntry();
assertEquals(100, statistics.getCompressedCount());
assertEquals(1000, statistics.getUncompressedCount());
}
}