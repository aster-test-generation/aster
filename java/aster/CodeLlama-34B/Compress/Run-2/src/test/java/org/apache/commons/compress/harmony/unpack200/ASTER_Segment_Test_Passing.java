/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Segment_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttrDefinitionBands_FXvD0() {
    Segment segment = new Segment();
    AttrDefinitionBands attrDefinitionBands = segment.getAttrDefinitionBands();
    assertNotNull(attrDefinitionBands);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackRead_HEpR1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    segment.unpackRead(inputStream);
    assertEquals(0, inputStream.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIcBands_tfDC0() {
    Segment segment = new Segment();
    IcBands icBands = segment.getIcBands();
    assertNotNull(icBands);
}
@Test
public void testGetIcBands_OyYr0_2() {
    Segment segment = new Segment();
    IcBands icBands = segment.getIcBands();
    assertEquals(0, icBands.getIcTuples().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpBands_XhZN0_ieHP1() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodClass_fJQv1_ynmm2() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpMethodClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpUTF8_Ryhm2_BrrK3() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpUTF8());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptor_ZxTW3_KVwV4() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpDescriptor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantPool_beip4_wEtD5() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getConstantPool());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameInts_gbnh5_feKo6() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpDescriptorNameInts());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpFieldClass_NMDv6_IqTZ7() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpFieldClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClass_WNDF7_JImP8() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptor_LKIe8_jhnw9() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpMethodDescriptor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpIMethodClass_FcZy9_OuuM10() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands.getCpIMethodClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackRead_InputStream_jtqx0_wjaW0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    segment.unpackRead(inputStream);
    assertEquals(0, segment.getIcBands().getIcTuples().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOverrideDeflateHintNull_fIOy2_VkiW0() {
    Segment segment = new Segment();
    segment.overrideDeflateHint(false);
    assertNull(segment.getIcBands());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPreRead_invalidValue_ugPd8_djxQ0() {
    Segment segment = new Segment();
    segment.setPreRead(false);
    assertNull(segment.getIcBands());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIcBandsWithClassConstantPool_MlaD2_SoOM0() {
    Segment segment = new Segment();
    ClassConstantPool cp = new ClassConstantPool();
    IcBands icBands = segment.getIcBands();
    assertNotNull(icBands);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIcBandsWithInvalidClassName_ejYk4_ETMH0() {
    Segment segment = new Segment();
    IcBands icBands = segment.getIcBands();
    assertNull(icBands);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIcBandsWithInvalidClassConstantPool_OWwr5_qRwz0() {
    Segment segment = new Segment();
    ClassConstantPool cp = new ClassConstantPool();
    IcBands icBands = segment.getIcBands();
    assertNull(icBands);
}
}