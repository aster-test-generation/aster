/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_OperandManager_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextShort_ZvTd0() {
    int[] bcCaseCount = new int[0];
    int[] bcCaseValue = new int[0];
    int[] bcByte = new int[0];
    int[] bcShort = new int[0];
    int[] bcLocal = new int[0];
    int[] bcLabel = new int[0];
    int[] bcIntRef = new int[0];
    int[] bcFloatRef = new int[0];
    int[] bcLongRef = new int[0];
    int[] bcDoubleRef = new int[0];
    int[] bcStringRef = new int[0];
    int[] bcClassRef = new int[0];
    int[] bcFieldRef = new int[0];
    int[] bcMethodRef = new int[0];
    int[] bcIMethodRef = new int[0];
    int[] bcThisField = new int[0];
    int[] bcSuperField = new int[0];
    int[] bcThisMethod = new int[0];
    int[] bcSuperMethod = new int[0];
    int[] bcInitRef = new int[0];
    int[] wideByteCodes = new int[0];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextShort();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextShortWithNonZeroValue_rsNT1() {
    int[] bcCaseCount = new int[0];
    int[] bcCaseValue = new int[0];
    int[] bcByte = new int[0];
    int[] bcShort = new int[1];
    bcShort[0] = 10;
    int[] bcLocal = new int[0];
    int[] bcLabel = new int[0];
    int[] bcIntRef = new int[0];
    int[] bcFloatRef = new int[0];
    int[] bcLongRef = new int[0];
    int[] bcDoubleRef = new int[0];
    int[] bcStringRef = new int[0];
    int[] bcClassRef = new int[0];
    int[] bcFieldRef = new int[0];
    int[] bcMethodRef = new int[0];
    int[] bcIMethodRef = new int[0];
    int[] bcThisField = new int[0];
    int[] bcSuperField = new int[0];
    int[] bcThisMethod = new int[0];
    int[] bcSuperMethod = new int[0];
    int[] bcInitRef = new int[0];
    int[] wideByteCodes = new int[0];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextShort();
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisFieldRef_XWzD0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisFieldRefWithMultipleValues_UBvV1() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[0], result);
    result = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[1], result);
    result = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[2], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextStringRef_XFbO0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextStringRef();
    assertEquals(bcStringRef[0], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextStringRefWithDifferentValues_zsmD1() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextStringRef();
    assertEquals(bcStringRef[1], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextCaseCount_SUeR0() {
    int[] bcCaseCount = {1, 2, 3};
    int[] bcCaseValue = {10, 20, 30};
    int[] bcByte = {1, 2, 3};
    int[] bcShort = {1, 2, 3};
    int[] bcLocal = {1, 2, 3};
    int[] bcLabel = {1, 2, 3};
    int[] bcIntRef = {1, 2, 3};
    int[] bcFloatRef = {1, 2, 3};
    int[] bcLongRef = {1, 2, 3};
    int[] bcDoubleRef = {1, 2, 3};
    int[] bcStringRef = {1, 2, 3};
    int[] bcClassRef = {1, 2, 3};
    int[] bcFieldRef = {1, 2, 3};
    int[] bcMethodRef = {1, 2, 3};
    int[] bcIMethodRef = {1, 2, 3};
    int[] bcThisField = {1, 2, 3};
    int[] bcSuperField = {1, 2, 3};
    int[] bcThisMethod = {1, 2, 3};
    int[] bcSuperMethod = {1, 2, 3};
    int[] bcInitRef = {1, 2, 3};
    int[] wideByteCodes = {1, 2, 3};
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextCaseCount();
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisMethodRef_ivaX0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextThisMethodRef();
    assertEquals(bcThisMethod[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisMethodRefWithMultipleValues_lVOs1() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextThisMethodRef();
    assertEquals(bcThisMethod[0], result);
    result = operandManager.nextThisMethodRef();
    assertEquals(bcThisMethod[1], result);
    result = operandManager.nextThisMethodRef();
    assertEquals(bcThisMethod[2], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisMethodRefWithNullValues_tRBn2() {
    int[] bcCaseCount = null;
    int[] bcCaseValue = null;
    int[] bcByte = null;
    int[] bcShort = null;
    int[] bcLocal = null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLabel_ZHkB0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int label = operandManager.nextLabel();
    assertEquals(0, label);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLabelWithLabelIndex_YWcm1() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    operandManager.bcLabelIndex = 5;
    int label = operandManager.nextLabel();
    assertEquals(5, label);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSuperFieldRef_suGo0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextSuperFieldRef();
    assertEquals(bcSuperField[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSuperFieldRefWithMultipleValues_kYDz1() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextSuperFieldRef();
    assertEquals(bcSuperField[0], result);
    result = operandManager.nextSuperFieldRef();
    assertEquals(bcSuperField[1], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextMethodRef_RFgL0() {
        int[] bcCaseCount = new int[1];
        int[] bcCaseValue = new int[1];
        int[] bcByte = new int[1];
        int[] bcShort = new int[1];
        int[] bcLocal = new int[1];
        int[] bcLabel = new int[1];
        int[] bcIntRef = new int[1];
        int[] bcFloatRef = new int[1];
        int[] bcLongRef = new int[1];
        int[] bcDoubleRef = new int[1];
        int[] bcStringRef = new int[1];
        int[] bcClassRef = new int[1];
        int[] bcFieldRef = new int[1];
        int[] bcMethodRef = new int[1];
        int[] bcIMethodRef = new int[1];
        int[] bcThisField = new int[1];
        int[] bcSuperField = new int[1];
        int[] bcThisMethod = new int[1];
        int[] bcSuperMethod = new int[1];
        int[] bcInitRef = new int[1];
        int[] wideByteCodes = new int[1];
        OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
        int actual = operandManager.nextMethodRef();
        int expected = bcMethodRef[0];
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextWideByteCode_NCVs0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextWideByteCode();
    assertEquals(wideByteCodes[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLongRef_CqVq0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int expected = bcLongRef[0];
    int actual = operandManager.nextLongRef();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLongRef2_npdM1() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int expected = bcLongRef[1];
    int actual = operandManager.nextLongRef();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFloatRef_PhBq0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextFloatRef();
    assertEquals(bcFloatRef[0], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFloatRefWithMultipleValues_bEpn1() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextFloatRef();
    assertEquals(bcFloatRef[0], actual);
    actual = operandManager.nextFloatRef();
    assertEquals(bcFloatRef[1], actual);
    actual = operandManager.nextFloatRef();
    assertEquals(bcFloatRef[2], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSuperMethodRef_TCUM0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextSuperMethodRef();
    assertEquals(bcSuperMethod[0], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSuperMethodRefWithMultipleValues_eibS1() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextSuperMethodRef();
    assertEquals(bcSuperMethod[0], actual);
    actual = operandManager.nextSuperMethodRef();
    assertEquals(bcSuperMethod[1], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisFieldRefWithMultipleValues_UBvV1_1() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextThisFieldRef();
    result = operandManager.nextThisFieldRef();
    result = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[0], result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisFieldRefWithMultipleValues_UBvV1_2() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextThisFieldRef();
    result = operandManager.nextThisFieldRef();
    result = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[1], result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisFieldRefWithMultipleValues_UBvV1_3() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextThisFieldRef();
    result = operandManager.nextThisFieldRef();
    result = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[2], result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisMethodRefWithMultipleValues_lVOs1_1() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextThisMethodRef();
    result = operandManager.nextThisMethodRef();
    result = operandManager.nextThisMethodRef();
    assertEquals(bcThisMethod[0], result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisMethodRefWithMultipleValues_lVOs1_2() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextThisMethodRef();
    result = operandManager.nextThisMethodRef();
    result = operandManager.nextThisMethodRef();
    assertEquals(bcThisMethod[1], result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisMethodRefWithMultipleValues_lVOs1_3() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextThisMethodRef();
    result = operandManager.nextThisMethodRef();
    result = operandManager.nextThisMethodRef();
    assertEquals(bcThisMethod[2], result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSuperFieldRefWithMultipleValues_kYDz1_1() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextSuperFieldRef();
    result = operandManager.nextSuperFieldRef();
    assertEquals(bcSuperField[0], result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSuperFieldRefWithMultipleValues_kYDz1_2() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextSuperFieldRef();
    result = operandManager.nextSuperFieldRef();
    assertEquals(bcSuperField[1], result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFloatRefWithMultipleValues_bEpn1_1() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextFloatRef();
    actual = operandManager.nextFloatRef();
    actual = operandManager.nextFloatRef();
    assertEquals(bcFloatRef[0], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFloatRefWithMultipleValues_bEpn1_2() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextFloatRef();
    actual = operandManager.nextFloatRef();
    actual = operandManager.nextFloatRef();
    assertEquals(bcFloatRef[1], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFloatRefWithMultipleValues_bEpn1_3() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextFloatRef();
    actual = operandManager.nextFloatRef();
    actual = operandManager.nextFloatRef();
    assertEquals(bcFloatRef[2], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSuperMethodRefWithMultipleValues_eibS1_1() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextSuperMethodRef();
    actual = operandManager.nextSuperMethodRef();
    assertEquals(bcSuperMethod[0], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSuperMethodRefWithMultipleValues_eibS1_2() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextSuperMethodRef();
    actual = operandManager.nextSuperMethodRef();
    assertEquals(bcSuperMethod[1], actual);}
}