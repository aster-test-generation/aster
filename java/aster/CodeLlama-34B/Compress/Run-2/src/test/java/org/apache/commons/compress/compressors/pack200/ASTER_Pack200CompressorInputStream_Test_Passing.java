/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200CompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailable_wKVj0() throws IOException {
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY, new HashMap<String, String>());
    int available = pack200CompressorInputStream.available();
    assertEquals(0, available);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailableWithTempFile_Hzrh1() throws IOException {
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.TEMP_FILE, new HashMap<String, String>());
    int available = pack200CompressorInputStream.available();
    assertEquals(0, available);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailableWithFile_cXpF6() throws IOException {
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"));
    int available = pack200CompressorInputStream.available();
    assertEquals(0, available);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailableWithFileAndStrategy_lcaF7() throws IOException {
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY);
    int available = pack200CompressorInputStream.available();
    assertEquals(0, available);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailableWithFileAndProperties_Qovw8() throws IOException {
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), new HashMap<String, String>());
    int available = pack200CompressorInputStream.available();
    assertEquals(0, available);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_EmptySignature_GVPL2() {
    byte[] signature = new byte[] {};
    int length = 0;
    assertFalse(Pack200CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMarkSupportedWithFileAndProperties_tcDz3() throws IOException {
Pack200CompressorInputStream compressor = new Pack200CompressorInputStream(new File("test.txt"), new HashMap<String, String>());
assertTrue(compressor.markSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMarkSupportedWithFileAndPack200StrategyInMemory_jXIb4() throws IOException {
Pack200CompressorInputStream compressor = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY);
assertTrue(compressor.markSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMarkSupportedWithFileAndPack200StrategyTempFile_ppTB5() throws IOException {
Pack200CompressorInputStream compressor = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.TEMP_FILE);
assertTrue(compressor.markSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMarkSupportedWithFile_KweS7() throws IOException {
Pack200CompressorInputStream compressor = new Pack200CompressorInputStream(new File("test.txt"));
assertTrue(compressor.markSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkip_kQnw0() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY, new HashMap<String, String>());
    long count = 10;
    long skipped = inputStream.skip(count);
    assertEquals(count, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithTempFile_TIXQ1() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.TEMP_FILE, new HashMap<String, String>());
    long count = 10;
    long skipped = inputStream.skip(count);
    assertEquals(count, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithProperties_xfaH2() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), new HashMap<String, String>());
    long count = 10;
    long skipped = inputStream.skip(count);
    assertEquals(count, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithFileAndStrategy_LOmu6() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.TEMP_FILE);
    long count = 10;
    long skipped = inputStream.skip(count);
    assertEquals(count, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithFile_lVpv8() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"));
    long count = 10;
    long skipped = inputStream.skip(count);
    assertEquals(count, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead1_paqo0() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY);
    byte[] b = new byte[10];
    int off = 0;
    int count = 10;
    int result = inputStream.read(b, off, count);
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead2_HBMV1() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.TEMP_FILE);
    byte[] b = new byte[10];
    int off = 0;
    int count = 10;
    int result = inputStream.read(b, off, count);
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead3_ankD2() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"));
    byte[] b = new byte[10];
    int off = 0;
    int count = 10;
    int result = inputStream.read(b, off, count);
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead4_HHUr3() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY, new HashMap<String, String>());
    byte[] b = new byte[10];
    int off = 0;
    int count = 10;
    int result = inputStream.read(b, off, count);
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead5_cVXn4() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.TEMP_FILE, new HashMap<String, String>());
    byte[] b = new byte[10];
    int off = 0;
    int count = 10;
    int result = inputStream.read(b, off, count);
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead6_ExfT5() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), new HashMap<String, String>());
    byte[] b = new byte[10];
    int off = 0;
    int count = 10;
    int result = inputStream.read(b, off, count);
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ValidSignature_yDdV0_qOpk0() {
    byte[] signature = new byte[] { (byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE };
    int length = 4;
    assertTrue(Pack200CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidSignature_UCnz1_SKZF0() {
    byte[] signature = new byte[] { (byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE };
    int length = 5;
    assertFalse(Pack200CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithInputStreamAndStrategy_WjnY4_qyRd0() throws IOException {
    Pack200CompressorInputStream inputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY);
    long count = 10;
    long skipped = inputStream.skip(count);
    assertEquals(count, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_WithFile_DEdE3_mzgM0() throws IOException {
    File file = new File("test.txt");
    Pack200CompressorInputStream stream = new Pack200CompressorInputStream(file, Pack200Strategy.IN_MEMORY);
    stream.reset();
    assertEquals(0, stream.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_WithFileAndProperties_Yvnj4_Pljv0() throws IOException {
    File file = new File("test.txt");
    Map<String, String> properties = new HashMap<>();
    properties.put("key", "value");
    Pack200CompressorInputStream stream = new Pack200CompressorInputStream(file, Pack200Strategy.IN_MEMORY, properties);
    stream.reset();
    assertEquals(0, stream.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_WithFileAndStrategy_UvRd7_AFfU0() throws IOException {
    File file = new File("test.txt");
    Pack200CompressorInputStream stream = new Pack200CompressorInputStream(file, Pack200Strategy.TEMP_FILE);
    stream.reset();
    assertEquals(0, stream.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_WithFileAndStrategyAndProperties_dCAY8_SaDi0() throws IOException {
    File file = new File("test.txt");
    Map<String, String> properties = new HashMap<>();
    properties.put("key", "value");
    Pack200CompressorInputStream stream = new Pack200CompressorInputStream(file, Pack200Strategy.TEMP_FILE, properties);
    stream.reset();
    assertEquals(0, stream.available());
}
}