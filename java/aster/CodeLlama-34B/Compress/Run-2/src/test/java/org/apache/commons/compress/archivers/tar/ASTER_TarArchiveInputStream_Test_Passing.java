/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveInputStream_Test_Passing {
    private TarArchiveEntry currEntry;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_posix_rNZJ0() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_POSIX, 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy(TarConstants.VERSION_POSIX, 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    assertTrue(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_gnu_LNbo1() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_GNU, 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy(TarConstants.VERSION_GNU_SPACE, 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    assertTrue(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ant_iKGd2() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_ANT, 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy(TarConstants.VERSION_ANT, 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    assertTrue(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_cyfK3() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_POSIX, 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy(TarConstants.VERSION_GNU_SPACE, 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    assertFalse(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidLength_wEjW4() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_POSIX, 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy(TarConstants.VERSION_POSIX, 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    assertFalse(TarArchiveInputStream.matches(signature, signature.length - 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nullSignature_zRTk5() {
    assertFalse(TarArchiveInputStream.matches(null, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_emptySignature_CHbD6() {
    assertFalse(TarArchiveInputStream.matches(new byte[0], 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidMagic_HyKo7() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_POSIX, 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy(TarConstants.VERSION_POSIX, 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    signature[TarConstants.MAGIC_OFFSET] = (byte) 0xFF;
    assertFalse(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidVersion_dRhG8() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongNameData_NullInput_PFsv1() throws IOException {
    TarArchiveInputStream tarInput = new TarArchiveInputStream(null);
    byte[] longNameData = tarInput.getLongNameData();
    assertNull(longNameData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_nullInputStream_sCqW0() throws IOException {
TarArchiveInputStream tarInputStream = new TarArchiveInputStream(null);
TarArchiveEntry entry = tarInputStream.getNextTarEntry();
assertNull(entry);
}
}