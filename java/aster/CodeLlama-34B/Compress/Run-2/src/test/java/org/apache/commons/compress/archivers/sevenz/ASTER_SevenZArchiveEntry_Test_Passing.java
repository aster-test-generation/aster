/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZArchiveEntry_Test_Passing {
private SevenZArchiveEntry entry;
private Iterable<? extends SevenZMethodConfiguration> contentMethods;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_NTFSLastModifiedDate_bAMf0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = 1234567890;
    entry.setLastModifiedDate(ntfsLastModifiedDate);
    assertEquals(ntfsLastModifiedDate, entry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_FileTime_ljgg1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long fileTime = 1234567890;
    entry.setLastModifiedDate(fileTime);
    assertEquals(fileTime, entry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_NegativeValue_FCSK2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = -1234567890;
    entry.setLastModifiedDate(ntfsLastModifiedDate);
    assertEquals(ntfsLastModifiedDate, entry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_ZeroValue_dBWw3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = 0;
    entry.setLastModifiedDate(ntfsLastModifiedDate);
    assertEquals(ntfsLastModifiedDate, entry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_MaxValue_LAUT4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = Long.MAX_VALUE;
    entry.setLastModifiedDate(ntfsLastModifiedDate);
    assertEquals(ntfsLastModifiedDate, entry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_MinValue_mTCI5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = Long.MIN_VALUE;
    entry.setLastModifiedDate(ntfsLastModifiedDate);
    assertEquals(ntfsLastModifiedDate, entry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_InvalidValue_fqRp6() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = 1234567890;
    entry.setLastModifiedDate(ntfsLastModifiedDate);
    assertNotEquals(ntfsLastModifiedDate, entry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_NullValue_fuJp7() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedDate(null);
    assertNull(entry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcValue_EJdA0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = entry.getCrcValue();
    assertEquals(0, crc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcValueWithNonZeroCrc_yjdu1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(123456789);
    long crc = entry.getCrcValue();
    assertEquals(123456789, crc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcValueWithNegativeCrc_Vneq2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(-123456789);
    long crc = entry.getCrcValue();
    assertEquals(-123456789, crc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_Mbtr0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsAccessDate = 1234567890L;
    entry.setAccessDate(ntfsAccessDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsAccessDate), entry.getAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDateWithInvalidNtfsTime_lcKf1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsAccessDate = -1L;
    try {
        entry.setAccessDate(ntfsAccessDate);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid NTFS time", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_UQjA0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        String name = entry.getName();
        assertEquals("", name);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNonEmptyName_jfRN1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test");
        String name = entry.getName();
        assertEquals("test", name);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithEmptyName_TqdS2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("");
        String name = entry.getName();
        assertEquals("", name);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullName_RKxm3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName(null);
        String name = entry.getName();
        assertNull(name);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreationDate_HFcv0_1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date creationDate = entry.getCreationDate();
        assertNotNull(creationDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreationDate_HFcv0_2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date creationDate = entry.getCreationDate();
        assertEquals(creationDate, FileTimes.toDate(entry.getCreationTime()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreationDateWithNullCreationTime_baxe1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCreationTime(null);
        Date creationDate = entry.getCreationDate();
        assertNull(creationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_ValidInput_TsNb0() {
    long ntfsTime = 1234567890;
    Date expected = new Date(ntfsTime);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_InvalidInput_KlGN1() {
    long ntfsTime = -1;
    Date expected = null;
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_ZeroInput_kQQw2() {
    long ntfsTime = 0;
    Date expected = new Date(0);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_MaxValueInput_AAHK3() {
    long ntfsTime = Long.MAX_VALUE;
    Date expected = new Date(Long.MAX_VALUE);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_MinValueInput_yCjo4() {
    long ntfsTime = Long.MIN_VALUE;
    Date expected = new Date(Long.MIN_VALUE);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_NegativeInput_pfMP5() {
    long ntfsTime = -1234567890;
    Date expected = new Date(-1234567890);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_PositiveInput_Giyo6() {
    long ntfsTime = 1234567890;
    Date expected = new Date(1234567890);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_validCrc_lwdV0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(123456789);
    assertEquals(123456789, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_invalidCrc_VkEd1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(-1);
    assertEquals(0, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasLastModifiedDate_True_Sena0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasLastModifiedDate(true);
    assertTrue(entry.getHasLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasLastModifiedDate_False_xHrC1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasLastModifiedDate(false);
    assertFalse(entry.getHasLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_EIbd0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_OyNo1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_FKsZ2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_True_juId0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setDirectory(true);
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_False_jUnH1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setDirectory(false);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_KLlY0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertNotNull(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDateWithNullLastModifiedTime_fppO2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedTime(null);
    Date lastModifiedDate = entry.getLastModifiedDate();
    assertNull(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAntiItem_True_vZnF0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAntiItem(true);
    assertTrue(entry.isAntiItem());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAntiItem_False_ctWF1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAntiItem(false);
    assertFalse(entry.isAntiItem());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_TAfx0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date creationDate = new Date();
    entry.setCreationDate(creationDate);
    assertEquals(FileTimes.toFileTime(creationDate), entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithNull_MHeR1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationDate(null);
    assertNull(entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithInvalidDate_yGoV2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date creationDate = new Date(0);
    entry.setCreationDate(creationDate);
    assertEquals(FileTimes.toFileTime(creationDate), entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithFutureDate_nlFr3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date creationDate = new Date(System.currentTimeMillis() + 10000);
    entry.setCreationDate(creationDate);
    assertEquals(FileTimes.toFileTime(creationDate), entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithPastDate_Ahit4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date creationDate = new Date(System.currentTimeMillis() - 10000);
    entry.setCreationDate(creationDate);
    assertEquals(FileTimes.toFileTime(creationDate), entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasStream_True_GUHo0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasStream(true);
    assertTrue(entry.hasStream());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasStream_False_dKpZ1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasStream(false);
    assertFalse(entry.hasStream());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasStream_NullEntry_OQKB6() {
    SevenZArchiveEntry entry = null;
    assertFalse(entry.hasStream());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDate_Pvmm0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertTrue(entry.getHasAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDate_fGgP1_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry = null;
    entry = new SevenZArchiveEntry();
    entry.setHasAccessDate(false);
    assertTrue(entry.getHasAccessDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDate_fGgP1_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry = null;
    entry = new SevenZArchiveEntry();
    entry.setHasAccessDate(false);
    assertFalse(entry.getHasAccessDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_invalid_BkXT2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertThrows(IllegalArgumentException.class, () -> entry.setCreationTime(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedTime_noLastModifiedDate_cPjB1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasLastModifiedDate(false);
    assertThrows(UnsupportedOperationException.class, () -> entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_small_HMyG0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedSize(10);
    assertEquals(10, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_medium_PSeM1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedSize(100);
    assertEquals(100, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_large_RhlK2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedSize(1000);
    assertEquals(1000, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_negative_MncC3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedSize(-10);
    assertEquals(-10, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_zero_hKnW4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedSize(0);
    assertEquals(0, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasStream_NullEntry_ZTsJ3() {
    SevenZArchiveEntry entry = null;
    entry.setHasStream(true);
    assertNull(entry.hasStream());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_ijnr0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithNull_mLBf1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName(null);
    assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithEmptyString_OYyM2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("");
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithSpecialCharacters_EBEa4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("!@#$%^&*()_+");
    assertEquals("!@#$%^&*()_+", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithInvalidCharacters_tLcw6() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("\\/:*?\"<>|");
    assertEquals("\\/:*?\"<>|", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValue_iHMS0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = 1234567890L;
    entry.setCrcValue(crc);
    assertEquals(crc, entry.getCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValueWithInvalidValue_QHsc1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = -1L;
    try {
        entry.setCrcValue(crc);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid crc value: " + crc, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_validSize_vJuZ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = 100;
    entry.setCompressedSize(size);
    assertEquals(size, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_invalidSize_XUWx1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = -1;
    try {
        entry.setCompressedSize(size);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Compressed size must be non-negative", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_zeroSize_zbBw2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = 0;
    entry.setCompressedSize(size);
    assertEquals(size, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_largeSize_mxNQ3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = Long.MAX_VALUE;
    entry.setCompressedSize(size);
    assertEquals(size, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_negativeSize_oMkD5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = -100;
    try {
        entry.setCompressedSize(size);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Compressed size must be non-negative", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_ifOS0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(100);
    assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeNegative_YCkH1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(-100);
    assertEquals(-100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeZero_oaPD2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(0);
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeMaxValue_JJht3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeMinValue_tXzn4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nullName_BrKq0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTime_CWqQ0() {
    Date date = new Date();
    long expected = FileTimes.toNtfsTime(date);
    long actual = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTime_NullDate_wOcW1() {
    long expected = 0;
    long actual = SevenZArchiveEntry.javaTimeToNtfsTime(null);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTime_MinDate_PmbE2() {
    Date date = new Date(Long.MIN_VALUE);
    long expected = FileTimes.toNtfsTime(date);
    long actual = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_rSmd0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date accessDate = new Date();
    entry.setAccessDate(accessDate);
    assertEquals(FileTimes.toFileTime(accessDate), entry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDateWithNull_TALB1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessDate(null);
    assertNull(entry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDateWithInvalidDate_Awlm2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date accessDate = new Date(0);
    entry.setAccessDate(accessDate);
    assertEquals(FileTimes.toFileTime(accessDate), entry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDateWithFutureDate_LEWx3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date accessDate = new Date(System.currentTimeMillis() + 10000);
    entry.setAccessDate(accessDate);
    assertEquals(FileTimes.toFileTime(accessDate), entry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDateWithPastDate_xmbQ4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date accessDate = new Date(System.currentTimeMillis() - 10000);
    entry.setAccessDate(accessDate);
    assertEquals(FileTimes.toFileTime(accessDate), entry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDateWithValidFileTime_lrbo6() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date accessDate = new Date(System.currentTimeMillis());
    entry.setAccessDate(accessDate);
    assertEquals(FileTimes.toFileTime(accessDate), entry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrc_yJBj0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    int crc = entry.getCrc();
    assertEquals(0, crc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcWithNonZeroCrc_meGt1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(123456789);
    int crc = entry.getCrc();
    assertEquals(123456789, crc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcWithNegativeCrc_SoAn2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(-123456789);
    int crc = entry.getCrc();
    assertEquals(-123456789, crc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcWithMaxIntCrc_UXZz3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(Integer.MAX_VALUE);
    int crc = entry.getCrc();
    assertEquals(Integer.MAX_VALUE, crc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasCreationDate_xorM0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        assertTrue(entry.getHasCreationDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasCreationDateWithCreationDate_ixCa1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCreationDate(new Date());
        assertTrue(entry.getHasCreationDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasCreationDateWithoutCreationDate_QTeO2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        assertFalse(entry.getHasCreationDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_ValidCrc_CbZC0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = 1234567890L;
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_InvalidCrc_WnbD1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = -1L;
    try {
        entry.setCompressedCrcValue(crc);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid CRC value: " + crc, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_ZeroCrc_aPks3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = 0L;
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_MaxValueCrc_HzhW4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = Long.MAX_VALUE;
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_MinValueCrc_mVhz5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = Long.MIN_VALUE;
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_RandomCrc_ThtC6() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = new Random().nextLong();
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_NegativeCrc_SzPx7() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = -1234567890L;
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_NonZeroCrc_yTqs9() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = 1234567890L;
    entry.setCompressedCrcValue(crc);
    assertNotEquals(0L, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_RDTT0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date();
    entry.setLastModifiedDate(lastModifiedDate);
    assertEquals(FileTimes.toFileTime(lastModifiedDate), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDateWithNull_ABiT1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedDate(null);
    assertNull(entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDateWithInvalidDate_BoaJ2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date(0);
    entry.setLastModifiedDate(lastModifiedDate);
    assertEquals(FileTimes.toFileTime(lastModifiedDate), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDateWithValidDate_PzHS3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date(1000000000);
    entry.setLastModifiedDate(lastModifiedDate);
    assertEquals(FileTimes.toFileTime(lastModifiedDate), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDateWithFutureDate_RUbA4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date(System.currentTimeMillis() + 1000000000);
    entry.setLastModifiedDate(lastModifiedDate);
    assertEquals(FileTimes.toFileTime(lastModifiedDate), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDateWithPastDate_ZjWP5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date lastModifiedDate = new Date(System.currentTimeMillis() - 1000000000);
    entry.setLastModifiedDate(lastModifiedDate);
    assertEquals(FileTimes.toFileTime(lastModifiedDate), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_InvalidInput_xSCs1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(0);
    assertEquals(0, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_NegativeInput_eLLI2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(-123456789);
    assertEquals(-123456789, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_MaxValue_GHNx3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_MinValue_bVTM4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAntiItem_NullEntry_QTou7() {
    SevenZArchiveEntry entry = null;
    assertFalse(entry.isAntiItem());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCrc_True_Qowi0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCrc(true);
    assertTrue(entry.getHasCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCrc_False_WQWV1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCrc(false);
    assertFalse(entry.getHasCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDate_eUVR0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date accessDate = entry.getAccessDate();
    assertNotNull(accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDate_eUVR0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date accessDate = entry.getAccessDate();
    assertEquals(entry.getAccessTime(), accessDate.getTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithNullAccessTime_VHjw1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(null);
    Date accessDate = entry.getAccessDate();
    assertNull(accessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithNullAccessTimeAndNullAccessDate_AjUP6_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(null);
    Date accessDate = entry.getAccessDate();
    entry.setAccessDate(null);
    accessDate = entry.getAccessDate();
    assertNull(accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithoutCreationDate_aVRA1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCreationDate(false);
    try {
        entry.getCreationTime();
        fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_oJJw0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = entry.getSize();
    assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithNonZeroSize_TeYD1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(10);
    long size = entry.getSize();
    assertEquals(10, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithNegativeSize_jlJj2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(-10);
    long size = entry.getSize();
    assertEquals(-10, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithMaxValue_vgyH3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(Long.MAX_VALUE);
    long size = entry.getSize();
    assertEquals(Long.MAX_VALUE, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithMinValue_psXo4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(Long.MIN_VALUE);
    long size = entry.getSize();
    assertEquals(Long.MIN_VALUE, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithInvalidValue_psOy5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(Long.MAX_VALUE + 1);
    long size = entry.getSize();
    assertEquals(Long.MAX_VALUE, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_nULK0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsCreationDate = 1234567890;
    entry.setCreationDate(ntfsCreationDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsCreationDate), entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithNull_yujs1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationDate(null);
    assertNull(entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithInvalidValue_GHbY2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsCreationDate = -1;
    entry.setCreationDate(ntfsCreationDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsCreationDate), entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithMaxValue_QJkE3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsCreationDate = Long.MAX_VALUE;
    entry.setCreationDate(ntfsCreationDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsCreationDate), entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithMinValue_SPcX4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsCreationDate = Long.MIN_VALUE;
    entry.setCreationDate(ntfsCreationDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsCreationDate), entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithZero_mLbI5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsCreationDate = 0;
    entry.setCreationDate(ntfsCreationDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsCreationDate), entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithNegativeValue_yZjG6() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsCreationDate = -1234567890;
    entry.setCreationDate(ntfsCreationDate);
    assertEquals(FileTimes.ntfsTimeToFileTime(ntfsCreationDate), entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrc_DhLR0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(123456789);
    assertEquals(123456789, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcNegative_SlOi1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(-123456789);
    assertEquals(-123456789, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcZero_AxEh2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(0);
    assertEquals(0, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcMaxValue_QEof3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcMinValue_vDQB4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcInvalidValue_oUug5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    try {
        entry.setCrc(Integer.MAX_VALUE + 1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid CRC value", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTimeWithoutAccessDate_CLyq1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertThrows(UnsupportedOperationException.class, () -> entry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrcValue_ValidInput_gnFf0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long compressedCrc = entry.getCompressedCrcValue();
    assertEquals(0, compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrcValue_InvalidInput_FJiG1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long compressedCrc = entry.getCompressedCrcValue();
    assertNotEquals(0, compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrcValue_NullInput_Emuz2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long compressedCrc = entry.getCompressedCrcValue();
    assertNull(compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributes_default_HJUE0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    int attributes = entry.getWindowsAttributes();
    assertEquals(0, attributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributes_nonDefault_cgrv1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(1);
    int attributes = entry.getWindowsAttributes();
    assertEquals(1, attributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributes_invalid_LQZr2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(-1);
    int attributes = entry.getWindowsAttributes();
    assertEquals(0, attributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributes_YCWN0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(0);
    assertEquals(0, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributesWithNonZeroValue_AalG1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(1);
    assertEquals(1, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributesWithNegativeValue_PXAN2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(-1);
    assertEquals(-1, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributesWithMaxValue_LjvQ3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributesWithMinValue_RnLl4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributesWithInvalidValue_Ppjj5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    try {
        entry.setWindowsAttributes(Integer.MAX_VALUE + 1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid windows attributes value: " + (Integer.MAX_VALUE + 1), e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_NuqQ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    boolean hasWindowsAttributes = entry.getHasWindowsAttributes();
    assertTrue(hasWindowsAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_RZkc1_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    boolean hasWindowsAttributes = entry.getHasWindowsAttributes();
    entry.setHasWindowsAttributes(false);
    hasWindowsAttributes = entry.getHasWindowsAttributes();
    assertTrue(hasWindowsAttributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_RZkc1_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    boolean hasWindowsAttributes = entry.getHasWindowsAttributes();
    entry.setHasWindowsAttributes(false);
    hasWindowsAttributes = entry.getHasWindowsAttributes();
    assertFalse(hasWindowsAttributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetContentMethods_nonNull_OOvt1_xYBh0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    List<SevenZMethodConfiguration> methods = new ArrayList<>();
    methods.add(new SevenZMethodConfiguration(null));
    entry.setContentMethods(methods);
    assertEquals(methods, entry.getContentMethods());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_null_uzBP0_kFOK0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedTime(null);
    assertFalse(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_null_uzBP0_kFOK0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedTime(null);
    assertNull(entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_nonNull_kppD1_rPuV0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(time);
    assertTrue(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_nonNull_kppD1_rPuV0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(time);
    assertEquals(time, entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_invalid_NcHV2_ATAh0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(time);
    entry.setLastModifiedTime(null);
    assertTrue(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_invalid_NcHV2_ATAh0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(time);
    entry.setLastModifiedTime(null);
    assertEquals(time, entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_invalid_NcHV2_ATAh0_3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(time);
    entry.setLastModifiedTime(null);
    assertFalse(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_invalid_NcHV2_ATAh0_4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(time);
    entry.setLastModifiedTime(null);
    assertNull(entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasCreationDate_True_DhXM0_TYyH0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCreationDate(true);
    assertTrue(entry.getHasCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasCreationDate_False_bJnF1_bEvk0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCreationDate(false);
    assertFalse(entry.getHasCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDateWithNullNtfsTime_tRJN2_NArL0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsAccessDate = 0L;
    try {
        entry.setAccessDate(ntfsAccessDate);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("NTFS time cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDateWithInvalidCreationTime_UoVJ2_Nmaa0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationTime(FileTime.fromMillis(0));
    Date creationDate = entry.getCreationDate();
    assertNull(creationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasAccessDate_GrqD0_Cwez0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasAccessDate(true);
    entry.setHasAccessDate(false);
    assertTrue(entry.getHasAccessDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasAccessDate_GrqD0_Cwez0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasAccessDate(true);
    entry.setHasAccessDate(false);
    assertFalse(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasAccessDateAllCombinations_XEYf1_zfAT0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasAccessDate(true);
    entry.setHasAccessDate(false);
    entry.setHasAccessDate(true);
    entry.setHasAccessDate(false);
    assertTrue(entry.getHasAccessDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasAccessDateAllCombinations_XEYf1_zfAT0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasAccessDate(true);
    entry.setHasAccessDate(false);
    entry.setHasAccessDate(true);
    entry.setHasAccessDate(false);
    assertFalse(entry.getHasAccessDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_NullInput_VWod7_Nzft0() {
    long ntfsTime = 0;
    Date expected = null;
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_invalidCrcLength_PMjL7_RqBA0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(1234567890);
    assertEquals(1234567890, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasLastModifiedDate_Null_fSSV2_uAAD0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasLastModifiedDate(false);
    assertNull(entry.getHasLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameName_pTdB3_caVl0() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry1.setName("name");
    entry2.setName("name");
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAntiItem_NonBooleanValue_Null_QybV16_ZEyZ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAntiItem(false);
    assertNull(entry.isAntiItem());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_null_SnQU0_MaUa0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationTime(null);
    assertFalse(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_nonNull_nmnB1_iCGI0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertTrue(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_nonNull_nmnB1_iCGI0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_null_jyWP5_bBKb0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedSize(0L);
    assertNull(entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_invalid_IPbQ6_NzPD0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedSize(0);
    assertNull(entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_null_fprP0_PkeP0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(null);
    assertFalse(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_nonNull_nzib1_DcMN0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setAccessTime(time);
    assertTrue(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_nonNull_nzib1_DcMN0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setAccessTime(time);
    assertEquals(time, entry.getAccessDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_nonNullAndNonNull_cxDj5_TOAC0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time1 = FileTime.fromMillis(System.currentTimeMillis());
    FileTime time2 = FileTime.fromMillis(System.currentTimeMillis() + 1000);
    entry.setAccessTime(time1);
    entry.setAccessTime(time2);
    assertTrue(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_nonNullAndNonNull_cxDj5_TOAC0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time1 = FileTime.fromMillis(System.currentTimeMillis());
    FileTime time2 = FileTime.fromMillis(System.currentTimeMillis() + 1000);
    entry.setAccessTime(time1);
    entry.setAccessTime(time2);
    assertEquals(time1, entry.getAccessDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_nonNullAndNonNull_cxDj5_TOAC0_4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time1 = FileTime.fromMillis(System.currentTimeMillis());
    FileTime time2 = FileTime.fromMillis(System.currentTimeMillis() + 1000);
    entry.setAccessTime(time1);
    entry.setAccessTime(time2);
    assertEquals(time2, entry.getAccessDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_nullSize_uFId4_WMbJ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = 0;
    try {
        entry.setCompressedSize(size);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Compressed size must not be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_stringSize_bJBm6_GyeM0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    String size = "100";
    try {
        entry.setCompressedSize(Long.parseLong(size));
        fail("Expected ClassCastException");
    } catch (ClassCastException e) {
        assertEquals("Compressed size must be a long", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_objectSize_GCaK7_WWAu0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Object size = new Object();
    try {
        entry.setCompressedSize((long) size);
        fail("Expected ClassCastException");
    } catch (ClassCastException e) {
        assertEquals("Compressed size must be a long", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_nullObjectSize_JSIG8_bieV0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = 0L;
    try {
        entry.setCompressedSize(size);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Compressed size must not be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_NullCrc_Afwj2_ZGNT0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    try {
        entry.setCompressedCrcValue(0L);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("CRC value cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_Null_vgzm5_GsqY0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(0);
    assertNull(entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAntiItem_False_MizT1_JvKb0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(false);
    assertFalse(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCrc_NullPointerException_RBrc7_YCrx0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCrc(false);
    try {
        entry.getHasCrc();
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertTrue(e.getMessage().contains("hasCrc"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCrc_IllegalStateException_Isyn9_Snfm0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCrc(true);
    try {
        entry.getHasCrc();
        fail("Expected IllegalStateException");
    } catch (IllegalStateException e) {
        assertTrue(e.getMessage().contains("hasCrc"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDirectoryDirectoryWithInvalidChars2_BHjJ13_CJMN0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setDirectory(true);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithInvalidAccessTime_jYfR2_kmBZ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(0));
    Date accessDate = entry.getAccessDate();
    assertNull(accessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithValidAccessTime_uscG3_RXAU0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(1000));
    Date accessDate = entry.getAccessDate();
    assertNotNull(accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithValidAccessTime_uscG3_RXAU0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(1000));
    Date accessDate = entry.getAccessDate();
    assertEquals(new Date(1000), accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithDifferentAccessTime_ZrBq4_sEEd0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(1000));
    Date accessDate = entry.getAccessDate();
    entry.setAccessTime(FileTime.fromMillis(2000));
    accessDate = entry.getAccessDate();
    assertNotNull(accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithDifferentAccessTime_ZrBq4_sEEd0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(1000));
    Date accessDate = entry.getAccessDate();
    entry.setAccessTime(FileTime.fromMillis(2000));
    accessDate = entry.getAccessDate();
    assertEquals(new Date(1000), accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithDifferentAccessTime_ZrBq4_sEEd0_4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(1000));
    Date accessDate = entry.getAccessDate();
    entry.setAccessTime(FileTime.fromMillis(2000));
    accessDate = entry.getAccessDate();
    assertEquals(new Date(2000), accessDate);}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessDateWithSameAccessTime_tQMf5_hqBh0_1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAccessTime(FileTime.fromMillis(1000));
        Date accessDate = entry.getAccessDate();
        entry.setAccessTime(FileTime.fromMillis(1000));
        accessDate = entry.getAccessDate();
        assertNotNull(accessDate);}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessDateWithSameAccessTime_tQMf5_hqBh0_2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAccessTime(FileTime.fromMillis(1000));
        Date accessDate = entry.getAccessDate();
        entry.setAccessTime(FileTime.fromMillis(1000));
        accessDate = entry.getAccessDate();
        assertEquals(new Date(1000), accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithInvalidAccessTimeAndNullAccessDate_jgBQ7_NZDM0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(0));
    Date accessDate = entry.getAccessDate();
    entry.setAccessDate(null);
    accessDate = entry.getAccessDate();
    assertNull(accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithValidAccessTimeAndNullAccessDate_hxKU8_sNTY0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(1000));
    Date accessDate = entry.getAccessDate();
    entry.setAccessDate(null);
    accessDate = entry.getAccessDate();
    assertNotNull(accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithValidAccessTimeAndNullAccessDate_hxKU8_sNTY0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(1000));
    Date accessDate = entry.getAccessDate();
    entry.setAccessDate(null);
    accessDate = entry.getAccessDate();
    assertEquals(new Date(1000), accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithValidAccessTimeAndNullAccessDate_hxKU8_sNTY0_3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(1000));
    Date accessDate = entry.getAccessDate();
    entry.setAccessDate(null);
    accessDate = entry.getAccessDate();
    assertNull(accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithInvalidString_egDO8_UbZs0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(0);
    long size = entry.getSize();
    assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithValidString_srYS9_DtEh0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(10L);
    long size = entry.getSize();
    assertEquals(10L, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcNull_CcUO6_FdBf0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    try {
        entry.setCrc(0);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("CRC value cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcEmpty_IyWR7_mGIH0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    try {
        entry.setCrc(0);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("CRC value cannot be empty", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreationDate_HFcv0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date creationDate = entry.getCreationDate();
        assertNotNull(creationDate);
        assertEquals(creationDate, FileTimes.toDate(entry.getCreationTime()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDate_fGgP1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertTrue(entry.getHasAccessDate());
    entry = null;
    assertFalse(entry.getHasAccessDate());
    entry = new SevenZArchiveEntry();
    entry.setHasAccessDate(false);
    assertFalse(entry.getHasAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_cpKl0() {
        entry = new SevenZArchiveEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDate_eUVR0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date accessDate = entry.getAccessDate();
    assertNotNull(accessDate);
    assertEquals(entry.getAccessTime(), accessDate.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithNullAccessTimeAndNullAccessDate_AjUP6() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(null);
    Date accessDate = entry.getAccessDate();
    assertNull(accessDate);
    entry.setAccessDate(null);
    accessDate = entry.getAccessDate();
    assertNull(accessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_RZkc1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    boolean hasWindowsAttributes = entry.getHasWindowsAttributes();
    assertTrue(hasWindowsAttributes);
    entry.setHasWindowsAttributes(false);
    hasWindowsAttributes = entry.getHasWindowsAttributes();
    assertFalse(hasWindowsAttributes);
}
}