/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.jar.JarFile;
import org.apache.commons.compress.harmony.pack200.Archive.PackingFile;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackingUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyThroughJar_invalidJarFile_throwsIOException_WcZl1() throws IOException {
    JarFile jarFile = new JarFile("invalid.jar");
    OutputStream outputStream = new ByteArrayOutputStream();
    try {
        PackingUtils.copyThroughJar(jarFile, outputStream);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Invalid JAR file", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyThroughJar_nullOutputStream_throwsNullPointerException_TRwp3() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    try {
        PackingUtils.copyThroughJar(jarFile, null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("OutputStream cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_EmptyJarFile_rCpE4() throws IOException {
    JarFile jarFile = new JarFile("path/to/empty/jar/file.jar");
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
    assertNotNull(packingFileList);
    assertEquals(packingFileList.size(), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_EmptyJarFile_rCpE4_1() throws IOException {
    JarFile jarFile = new JarFile("path/to/empty/jar/file.jar");
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
    assertNotNull(packingFileList);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_EmptyJarFile_rCpE4_2() throws IOException {
    JarFile jarFile = new JarFile("path/to/empty/jar/file.jar");
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
    assertEquals(packingFileList.size(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyThroughJar_validJarFile_validOutputStream_uOcx0_ndqt0_1() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    OutputStream outputStream = new ByteArrayOutputStream();
    PackingUtils.copyThroughJar(jarFile, outputStream);
    assertEquals(1, jarFile.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyThroughJar_validJarFile_validOutputStream_uOcx0_ndqt0_2() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    OutputStream outputStream = new ByteArrayOutputStream();
    PackingUtils.copyThroughJar(jarFile, outputStream);
    assertEquals("PACK200", jarFile.getComment());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyThroughJar_validJarFile_validOutputStream_uOcx0_ndqt0_3() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    OutputStream outputStream = new ByteArrayOutputStream();
    PackingUtils.copyThroughJar(jarFile, outputStream);
    assertEquals(16384, ((ByteArrayOutputStream) outputStream).toByteArray().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyThroughJar_validJarFile_validOutputStream_uOcx0_ndqt0_4() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    OutputStream outputStream = new ByteArrayOutputStream();
    PackingUtils.copyThroughJar(jarFile, outputStream);
    assertTrue(outputStream.toString().contains("Packed test.jar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyThroughJar_emptyJarFile_doesNotThrowException_sgWS4_DsgX0_1() throws IOException {
    JarFile jarFile = new JarFile("empty.jar");
    OutputStream outputStream = new ByteArrayOutputStream();
    PackingUtils.copyThroughJar(jarFile, outputStream);
    assertEquals(0, jarFile.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyThroughJar_emptyJarFile_doesNotThrowException_sgWS4_DsgX0_2() throws IOException {
    JarFile jarFile = new JarFile("empty.jar");
    OutputStream outputStream = new ByteArrayOutputStream();
    PackingUtils.copyThroughJar(jarFile, outputStream);
    assertEquals("", jarFile.getComment());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyThroughJar_emptyJarFile_doesNotThrowException_sgWS4_DsgX0_3() throws IOException {
    JarFile jarFile = new JarFile("empty.jar");
    OutputStream outputStream = new ByteArrayOutputStream();
    PackingUtils.copyThroughJar(jarFile, outputStream);
    assertEquals(0, ((ByteArrayOutputStream) outputStream).size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullJarInputStream_PeSs0_gdRJ0() {
    try {
        PackingUtils.log(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("JarInputStream cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_ValidJarFile_KeepFileOrderTrue_TCpg0_KaJJ0_1() throws IOException {
    JarFile jarFile = new JarFile("path/to/valid/jar/file.jar");
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
    for (PackingFile packingFile : packingFileList) {
    }
    assertNotNull(packingFileList);}
}