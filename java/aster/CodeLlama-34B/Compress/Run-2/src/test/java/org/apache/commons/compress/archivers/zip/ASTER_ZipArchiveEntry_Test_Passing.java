/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveEntry_Test_Passing {
private int versionRequired;
private GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
private int rawFlag;
private long time = -1;
private String name;
private byte[] rawName;
private int alignment;
private ZipExtraField[] extraFields;
private boolean isStreamContiguous;
ZipArchiveEntry ziparchiveentry;
private boolean lastModifiedDateSet;
private static String ZIP_DIR_SEP = "/";
@Mock
    private ZipExtraField zipExtraField;
@InjectMocks
    private ZipArchiveEntry zipArchiveEntry;
    private int method = ZipMethod.UNKNOWN_CODE;
    private static final int SHORT_MASK = 0xFFFF;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGeneralPurposeBit_sNfV0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    entry.setGeneralPurposeBit(generalPurposeBit);
    assertEquals(generalPurposeBit, entry.getGeneralPurposeBit());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixModeWithInvalidMode_ICwZ2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test");
    try {
        entry.setUnixMode(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid mode: -1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternalAttributesWithStringName_cPqh3() {
ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
assertEquals(0, entry.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternalAttributesWithFileAndEntryName_Eixh4() {
ZipArchiveEntry entry = new ZipArchiveEntry(new File("inputFile"), "entryName");
assertEquals(0, entry.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternalAttributesWithNullInputPath_mXdU8() {
ZipArchiveEntry entry = new ZipArchiveEntry(null, "entryName");
assertEquals(0, entry.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveUnparseableExtraFieldData_sYlx0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.removeUnparseableExtraFieldData();
    assertNull(entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInternalAttributesWithInvalidFileAndEntryName_FMTp9() {
    File inputFile = new File("path/to/input");
    String entryName = "entryName";
    ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
    assertEquals(0, entry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag_default_auGn0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    int actual = entry.getRawFlag();
    int expected = 0;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag_name_mEHd4() {
    String name = "entryName";
    ZipArchiveEntry entry = new ZipArchiveEntry(name);
    int actual = entry.getRawFlag();
    int expected = 4;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag_file_Wxoh5() {
    File inputFile = new File("path/to/file.zip");
    String entryName = "entryName";
    ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
    int actual = entry.getRawFlag();
    int expected = 5;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag_invalid_CTwP7() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    int actual = entry.getRawFlag();
    int expected = -1;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_ValidName_OCkp0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("newName", new byte[0]);
    assertEquals("newName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_ValidName_OCkp0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("newName", new byte[0]);
    assertArrayEquals(new byte[0], entry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NullName_mrsD1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    try {
        entry.setName(null, new byte[0]);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("name", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_EmptyName_ArfE2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    try {
        entry.setName("", new byte[0]);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("name", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_InvalidName_OrhS3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    try {
        entry.setName("newName", new byte[0]);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("name", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NullRawName_BXjv4() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    try {
        entry.setName("newName", null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("rawName", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_EmptyRawName_iciZ5() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    try {
        entry.setName("newName", new byte[0]);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("rawName", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_SameName_tXCH7_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("entry", new byte[0]);
    assertEquals("entry", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_SameName_tXCH7_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("entry", new byte[0]);
    assertArrayEquals(new byte[0], entry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_DifferentRawName_MbMl9_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("newName", new byte[] { 0x01, 0x02, 0x03 });
    assertEquals("newName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_DifferentRawName_MbMl9_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("newName", new byte[] { 0x01, 0x02, 0x03 });
    assertArrayEquals(new byte[] { 0x01, 0x02, 0x03 }, entry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment_Default_stAq0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    assertEquals(0, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment_String_rIuR3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry1");
    assertEquals(0, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment_File_jLGY4() {
    File inputFile = new File("test.zip");
    ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, "entry1");
    assertEquals(1, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment_Invalid_QYIm6() {
    ZipArchiveEntry entry = new ZipArchiveEntry("invalid");
    assertEquals(0, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment_Empty_mNYv7() {
    ZipArchiveEntry entry = new ZipArchiveEntry("");
    assertEquals(0, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment_NonWhitespace_uzBi9() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry1");
    assertEquals(1, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithNullExtraFields_NRSl1() throws IOException {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setExtra(null);
    assertEquals(0, entry.getExtraFields().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_1_NPzl0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertNotNull(data);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_1_NPzl0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getCentralDirectoryData().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_1_NPzl0_3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getLocalFileDataData().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_1_NPzl0_4() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getLocalFileDataLength().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_1_NPzl0_5() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getCentralDirectoryLength().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_2_RQuc1_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry2");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertNotNull(data);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_2_RQuc1_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry2");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getCentralDirectoryData().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_2_RQuc1_3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry2");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getLocalFileDataData().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_2_RQuc1_4() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry2");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getLocalFileDataLength().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_2_RQuc1_5() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry2");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getCentralDirectoryLength().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_3_GRdX2_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry3");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertNotNull(data);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_3_GRdX2_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry3");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getCentralDirectoryData().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_3_GRdX2_3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry3");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getLocalFileDataData().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_3_GRdX2_4() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry3");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getLocalFileDataLength().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_3_GRdX2_5() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry3");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getCentralDirectoryLength().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_4_FceU3_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry4");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertNotNull(data);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_4_FceU3_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry4");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getCentralDirectoryData().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_4_FceU3_3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry4");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getLocalFileDataData().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_4_FceU3_4() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry4");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getLocalFileDataLength().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_4_FceU3_5() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry4");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getCentralDirectoryLength().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_5_IlLe4_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry5");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertNotNull(data);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_5_IlLe4_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry5");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getCentralDirectoryData().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_5_IlLe4_3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry5");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getLocalFileDataData().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_5_IlLe4_4() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry5");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getLocalFileDataLength().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_5_IlLe4_5() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry5");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getCentralDirectoryLength().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_6_elqL5_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry6");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertNotNull(data);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_6_elqL5_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry6");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getCentralDirectoryData().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_6_elqL5_3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry6");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getLocalFileDataData().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_6_elqL5_4() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry6");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getLocalFileDataLength().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_6_elqL5_5() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry6");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertEquals(0, data.getCentralDirectoryLength().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_ValidSize_cAdD0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setSize(100);
    assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_NullInputPath_JnKJ2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(null, "entry1");
    try {
        entry.setSize(100);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid entry size", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_NullEntryName_vWGi3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), null);
    try {
        entry.setSize(100);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid entry size", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisStreamContiguous() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        assertTrue(ziparchiveentry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguousWithZipArchiveEntry_gcAg0() throws ZipException, IOException {
ZipArchiveEntry entry = new ZipArchiveEntry(new ZipArchiveEntry(new ZipArchiveEntry("entryName")));
assertTrue(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguousWithJavaUtilZipZipEntry_yLwj2() throws ZipException {
ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entryName"));
assertTrue(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguousWithStringName_rDlw3() {
ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
assertTrue(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguousWithFileInputFileAndEntryName_OoOH4() {
ZipArchiveEntry entry = new ZipArchiveEntry(new File("inputFile"), "entryName");
assertTrue(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguousWithNullZipArchiveEntry_dYvn5() throws ZipException {
ZipArchiveEntry entry = new ZipArchiveEntry((ZipArchiveEntry) null);
assertFalse(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguousWithNullPathInputPathAndEntryName_rECr6() throws IOException {
ZipArchiveEntry entry = new ZipArchiveEntry((Path) null, "entryName");
assertFalse(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguousWithNullJavaUtilZipZipEntry_Ebia7() throws ZipException {
ZipArchiveEntry entry = new ZipArchiveEntry((java.util.zip.ZipEntry) null);
assertFalse(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguousWithNullStringName_hIKa8() {
ZipArchiveEntry entry = new ZipArchiveEntry((String) null);
assertFalse(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguousWithNullFileInputFileAndEntryName_kKxW9() {
ZipArchiveEntry entry = new ZipArchiveEntry((File) null, "entryName");
assertFalse(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPlatform_ValidPlatform_WRgA0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setPlatform(ZipArchiveEntry.PLATFORM_UNIX);
    assertEquals(ZipArchiveEntry.PLATFORM_UNIX, entry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPlatform_InvalidPlatform_iydm1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    try {
        entry.setPlatform(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid platform", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPlatform_ValidPlatform_String_VumF9() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry1");
    entry.setPlatform(ZipArchiveEntry.PLATFORM_UNIX);
    assertEquals(ZipArchiveEntry.PLATFORM_UNIX, entry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVersionMadeBy_Upql0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setVersionMadeBy(10);
    assertEquals(10, entry.getVersionMadeBy());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVersionMadeBy_invalidValue_vvQC1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    try {
        entry.setVersionMadeBy(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetCentralDirectoryExtra() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        ziparchiveentry = new ZipArchiveEntry();
        ziparchiveentry = new ZipArchiveEntry();
        byte[] b = new byte[0];
        ziparchiveentry.setCentralDirectoryExtra(b);
        // TODO: Add assertions that verify the behavior of the setCentralDirectoryExtra method.
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtra_Xssc0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    byte[] extra = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    entry.setCentralDirectoryExtra(extra);
    assertArrayEquals(extra, entry.getCentralDirectoryExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtraNull_OUuy2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setCentralDirectoryExtra(null);
    assertNull(entry.getCentralDirectoryExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtraEmpty_iibT3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setCentralDirectoryExtra(new byte[0]);
    assertEquals(0, entry.getCentralDirectoryExtra().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithoutIncludeUnparseable_bUsn1_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipExtraField[] extraFields = entry.getExtraFields(false);
    assertNotNull(extraFields);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithoutIncludeUnparseable_bUsn1_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipExtraField[] extraFields = entry.getExtraFields(false);
    assertEquals(0, extraFields.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithIncludeUnparseableAndNoExtraFields_wuRU2_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipExtraField[] extraFields = entry.getExtraFields(true);
    assertNotNull(extraFields);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithIncludeUnparseableAndNoExtraFields_wuRU2_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipExtraField[] extraFields = entry.getExtraFields(true);
    assertEquals(0, extraFields.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_FileTime_nLnZ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastAccessTime(fileTime);
    assertEquals(fileTime, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_NullFileTime_ldQg1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setLastAccessTime(null);
    assertNull(entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_InvalidFileTime_JokC2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() - 1000000000L);
    entry.setLastAccessTime(fileTime);
    assertEquals(fileTime, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_FutureFileTime_Sixh3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() + 1000000000L);
    entry.setLastAccessTime(fileTime);
    assertEquals(fileTime, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_ZipEntry_UieX4() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipEntry zipEntry = new ZipEntry("entry1");
    zipEntry.setLastAccessTime(FileTime.fromMillis(System.currentTimeMillis()));
    entry.setLastAccessTime(zipEntry.getLastAccessTime());
    assertEquals(zipEntry.getLastAccessTime(), entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_InvalidZipEntry_BEhI6() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipEntry zipEntry = new ZipEntry("entry1");
    zipEntry.setLastAccessTime(FileTime.fromMillis(System.currentTimeMillis() - 1000000000L));
    entry.setLastAccessTime(zipEntry.getLastAccessTime());
    assertEquals(zipEntry.getLastAccessTime(), entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_FutureZipEntry_paXm7() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipEntry zipEntry = new ZipEntry("entry1");
    zipEntry.setLastAccessTime(FileTime.fromMillis(System.currentTimeMillis() + 1000000000L));
    entry.setLastAccessTime(zipEntry.getLastAccessTime());
    assertEquals(zipEntry.getLastAccessTime(), entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionMadeBy_3_MNDe2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    assertEquals(entry.getVersionMadeBy(), 3);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionMadeBy_4_JkNA3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    assertEquals(entry.getVersionMadeBy(), 4);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionMadeBy_7_oISA6() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    assertEquals(entry.getVersionMadeBy(), 7);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionMadeBy_8_VdHh7() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    assertEquals(entry.getVersionMadeBy(), 8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithFileTime_NzeW0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    entry.setTime(fileTime);
    assertEquals(fileTime.toMillis(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithLong_Zxwz1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    long time = System.currentTimeMillis();
    entry.setTime(time);
    assertEquals(time, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNullFileTime_rqeP2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    FileTime fileTime = null;
    entry.setTime(fileTime);
    assertNull(entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithInvalidFileTime_apgC4() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() + 1000000000);
    entry.setTime(fileTime);
    assertEquals(fileTime.toMillis(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithInvalidLong_FBDB5() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    long time = System.currentTimeMillis() + 1000000000;
    entry.setTime(time);
    assertEquals(time, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithZeroFileTime_IvIA6() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    FileTime fileTime = FileTime.fromMillis(0);
    entry.setTime(fileTime);
    assertEquals(0, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithZeroLong_iXjD7() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    long time = 0;
    entry.setTime(time);
    assertEquals(0, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNegativeFileTime_DRbR8() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    FileTime fileTime = FileTime.fromMillis(-1000000000);
    entry.setTime(fileTime);
    assertEquals(-1000000000, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNegativeLong_wimU9() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    long time = -1000000000;
    entry.setTime(time);
    assertEquals(-1000000000, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag_DuIQ0() throws ZipException, IOException {
        ZipArchiveEntry entry = new ZipArchiveEntry(new ZipArchiveEntry(new ZipEntry("entryName")));
        entry.setRawFlag(1);
        assertEquals(1, entry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlagWithFile_dQAX2() throws ZipException, IOException {
        File inputFile = new File("inputFile");
        String entryName = "entryName";
        ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
        entry.setRawFlag(1);
        assertEquals(1, entry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlagWithZipEntry_lOOS3() throws ZipException, IOException {
        ZipEntry zipEntry = new ZipEntry("entryName");
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        entry.setRawFlag(1);
        assertEquals(1, entry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlagWithString_Lczm4() throws ZipException, IOException {
        String entryName = "entryName";
        ZipArchiveEntry entry = new ZipArchiveEntry(entryName);
        entry.setRawFlag(1);
        assertEquals(1, entry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlagWithInvalidValue_aBce5() throws ZipException, IOException {
        ZipArchiveEntry entry = new ZipArchiveEntry(new ZipArchiveEntry(new ZipEntry("entryName")));
        try {
            entry.setRawFlag(-1);
            assertTrue(false);
        } catch (IllegalArgumentException e) {
            assertTrue(true);
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testclone() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        Object clone = ziparchiveentry.clone();
        assertNotNull(clone);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_pNOq0_1() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getName(), clone.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_pNOq0_2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getSize(), clone.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_pNOq0_3() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getCompressedSize(), clone.getCompressedSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_pNOq0_4() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getCrc(), clone.getCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_pNOq0_5() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getMethod(), clone.getMethod());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_pNOq0_6() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getTime(), clone.getTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_pNOq0_7() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getExtra(), clone.getExtra());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_pNOq0_8() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getComment(), clone.getComment());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_pNOq0_9() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.isDirectory(), clone.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithNull_saCh1_1() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(null, null);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertNull(clone.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithNull_saCh1_2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(null, null);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertNull(clone.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithNull_saCh1_3() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(null, null);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertNull(clone.getCompressedSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithNull_saCh1_4() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(null, null);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertNull(clone.getCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithNull_saCh1_5() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(null, null);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertNull(clone.getMethod());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithNull_saCh1_6() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(null, null);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertNull(clone.getTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithNull_saCh1_7() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(null, null);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertNull(clone.getExtra());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithNull_saCh1_8() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(null, null);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertNull(clone.getComment());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithNull_saCh1_9() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(null, null);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertFalse(clone.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidName_cvkt2_1() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("invalid");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals("invalid", clone.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidName_cvkt2_2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("invalid");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getSize(), clone.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidName_cvkt2_3() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("invalid");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getCompressedSize(), clone.getCompressedSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidName_cvkt2_4() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("invalid");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getCrc(), clone.getCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidName_cvkt2_5() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("invalid");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getMethod(), clone.getMethod());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidName_cvkt2_6() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("invalid");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getTime(), clone.getTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidName_cvkt2_7() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("invalid");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getExtra(), clone.getExtra());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidName_cvkt2_8() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("invalid");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getComment(), clone.getComment());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidName_cvkt2_9() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("invalid");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertFalse(clone.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidSize_SUTh3_1() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(1000, clone.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidSize_SUTh3_2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getCompressedSize(), clone.getCompressedSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidSize_SUTh3_3() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getCrc(), clone.getCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidSize_SUTh3_4() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getMethod(), clone.getMethod());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidSize_SUTh3_5() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getTime(), clone.getTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidSize_SUTh3_6() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getExtra(), clone.getExtra());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidSize_SUTh3_7() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getComment(), clone.getComment());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidSize_SUTh3_8() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertFalse(clone.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidCompressedSize_MLMG4_1() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setCompressedSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(1000, clone.getCompressedSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidCompressedSize_MLMG4_2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setCompressedSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getSize(), clone.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidCompressedSize_MLMG4_3() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setCompressedSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getCrc(), clone.getCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidCompressedSize_MLMG4_4() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setCompressedSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getMethod(), clone.getMethod());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidCompressedSize_MLMG4_5() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setCompressedSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getTime(), clone.getTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidCompressedSize_MLMG4_6() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setCompressedSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getExtra(), clone.getExtra());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidCompressedSize_MLMG4_7() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setCompressedSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getComment(), clone.getComment());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidCompressedSize_MLMG4_8() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setCompressedSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertFalse(clone.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveExtraField_ulyX0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test.txt");
    entry.removeExtraField(new ZipShort(1234));
    assertEquals(1, entry.getExtraFields().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixSymlink_true_AOQj0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test.txt");
    entry.setUnixMode(UnixStat.LINK_FLAG);
    assertTrue(entry.isUnixSymlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixSymlink_false_XVkO1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test.txt");
    entry.setUnixMode(UnixStat.FILE_TYPE_FLAG);
    assertFalse(entry.isUnixSymlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixSymlink_null_XyLl2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(null, null);
    assertFalse(entry.isUnixSymlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAlignment_powerOfTwo_GADU0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setAlignment(4);
    assertEquals(4, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAlignment_notPowerOfTwo_uWBK1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    try {
        entry.setAlignment(3);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid value for alignment, must be power of two and no bigger than " + 0xffff + " but is " + 3, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMethod_ValidMethod_BCLl0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setMethod(ZipEntry.STORED);
    assertEquals(ZipEntry.STORED, entry.getMethod());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_empty_qBcQ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    ZipExtraField[] extraFields = entry.getExtraFields();
    assertEquals(0, extraFields.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_EmptyEntry_ZQyW0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_NonEmptyEntry_WithFile_aWdP5() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals(10, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStreamContiguous_Amcu0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setStreamContiguous(true);
    entry.setStreamContiguous(false);
    assertTrue(entry.isStreamContiguous());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStreamContiguous_Amcu0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setStreamContiguous(true);
    entry.setStreamContiguous(false);
    assertFalse(entry.isStreamContiguous());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStreamContiguousWithDifferentConstructors_lqJs1_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setStreamContiguous(true);
    entry = new ZipArchiveEntry(new File("test.zip"), "entry2");
    entry.setStreamContiguous(false);
    entry = new ZipArchiveEntry(new File("test.zip"), "entry3");
    entry.setStreamContiguous(true);
    entry = new ZipArchiveEntry(new File("test.zip"), "entry4");
    entry.setStreamContiguous(false);
    assertTrue(entry.isStreamContiguous());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStreamContiguousWithDifferentConstructors_lqJs1_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setStreamContiguous(true);
    entry = new ZipArchiveEntry(new File("test.zip"), "entry2");
    entry.setStreamContiguous(false);
    entry = new ZipArchiveEntry(new File("test.zip"), "entry3");
    entry.setStreamContiguous(true);
    entry = new ZipArchiveEntry(new File("test.zip"), "entry4");
    entry.setStreamContiguous(false);
    assertFalse(entry.isStreamContiguous());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStreamContiguousWithDifferentConstructorsAndMethods_pvEX2_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setStreamContiguous(true);
    entry = new ZipArchiveEntry(new File("test.zip"), "entry2");
    entry.setStreamContiguous(false);
    entry = new ZipArchiveEntry(new File("test.zip"), "entry3");
    entry.setStreamContiguous(true);
    entry = new ZipArchiveEntry(new File("test.zip"), "entry4");
    entry.setStreamContiguous(false);
    entry = new ZipArchiveEntry(new File("test.zip"), "entry5");
    entry.setStreamContiguous(true);
    entry = new ZipArchiveEntry(new File("test.zip"), "entry6");
    entry.setStreamContiguous(false);
    assertTrue(entry.isStreamContiguous());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStreamContiguousWithDifferentConstructorsAndMethods_pvEX2_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setStreamContiguous(true);
    entry = new ZipArchiveEntry(new File("test.zip"), "entry2");
    entry.setStreamContiguous(false);
    entry = new ZipArchiveEntry(new File("test.zip"), "entry3");
    entry.setStreamContiguous(true);
    entry = new ZipArchiveEntry(new File("test.zip"), "entry4");
    entry.setStreamContiguous(false);
    entry = new ZipArchiveEntry(new File("test.zip"), "entry5");
    entry.setStreamContiguous(true);
    entry = new ZipArchiveEntry(new File("test.zip"), "entry6");
    entry.setStreamContiguous(false);
    assertFalse(entry.isStreamContiguous());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetLocalHeaderOffset_zGMN0() throws Exception{
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    long expectedLocalHeaderOffset = 100;
    zipArchiveEntry.setLocalHeaderOffset(expectedLocalHeaderOffset);
    assertEquals(expectedLocalHeaderOffset, zipArchiveEntry.getLocalHeaderOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDiskNumberStart_ValidInput_ykyL0_g_dakp0() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entryName");
        assertEquals(0, entry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDiskNumberStart_InvalidInput_INRQ1_hEVk1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entryName");
        assertEquals(-1, entry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDiskNumberStart_NullInput_QwcA2_yqbQ2() {
        ZipArchiveEntry entry = new ZipArchiveEntry(null, null);
        assertEquals(-1, entry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDiskNumberStart_EmptyInput_YbKm3_hUyS3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("");
        assertEquals(-1, entry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffset_DefaultConstructor_scfk0_mBWF0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        assertEquals(0, entry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffset_ZipEntryConstructor_REbs2_PkFz2() throws ZipException {
        java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entryName");
        ZipArchiveEntry zipEntry = new ZipArchiveEntry(entry);
        assertEquals(0, zipEntry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffset_StringConstructor_ZDlR3_QjdC3() {
        String name = "entryName";
        ZipArchiveEntry entry = new ZipArchiveEntry(name);
        assertEquals(0, entry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffset_FileConstructor_YHVR4_cWqB4() {
        File inputFile = new File("path/to/file.zip");
        String entryName = "entryName";
        ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
        assertEquals(0, entry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffset_NullEntry_ujWT9_dMZP9() {
        ZipArchiveEntry entry = null;
        assertEquals(0, entry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesUTF8ForNames_DyKh3_UYNo0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    entry.setGeneralPurposeBit(generalPurposeBit);
    generalPurposeBit.useUTF8ForNames(true);
    assertFalse(entry.getGeneralPurposeBit().usesUTF8ForNames());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesUTF8ForNames_DyKh3_UYNo0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    entry.setGeneralPurposeBit(generalPurposeBit);
    generalPurposeBit.useUTF8ForNames(true);
    assertTrue(entry.getGeneralPurposeBit().usesUTF8ForNames());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesDataDescriptor_BWix4_bOOS0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    entry.setGeneralPurposeBit(generalPurposeBit);
    generalPurposeBit.useDataDescriptor(true);
    assertFalse(entry.getGeneralPurposeBit().usesDataDescriptor());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesDataDescriptor_BWix4_bOOS0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    entry.setGeneralPurposeBit(generalPurposeBit);
    generalPurposeBit.useDataDescriptor(true);
    assertTrue(entry.getGeneralPurposeBit().usesDataDescriptor());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesStrongEncryption_WUQW5_hkEZ0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    entry.setGeneralPurposeBit(generalPurposeBit);
    generalPurposeBit.useStrongEncryption(true);
    assertFalse(entry.getGeneralPurposeBit().usesStrongEncryption());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesStrongEncryption_WUQW5_hkEZ0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    entry.setGeneralPurposeBit(generalPurposeBit);
    generalPurposeBit.useStrongEncryption(true);
    assertTrue(entry.getGeneralPurposeBit().usesStrongEncryption());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithValidZipEntry_RNNt3_ZSaV0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    ZipEntry zipEntry = new ZipEntry("test.txt");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    zipEntry.setCreationTime(time);
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithEmptyExtraFields_TNnH2_WpiZ1() throws IOException {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setExtra(new byte[0]);
    assertEquals(0, entry.getExtraFields().length);
}
@Test
    public void testSetSize_NullZipEntry_WrhV5_wSjM0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        try {
            entry.setSize(100);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid entry size", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_withValidExtraFields_qutd0_jzJS0() throws IOException {
        ZipArchiveEntry entry = new ZipArchiveEntry("entry1");
        byte[] extra = new byte[] { 0x01, 0x02, 0x03, 0x04 };
        entry.setExtra(extra);
        assertEquals(extra, entry.getExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_withInvalidExtraFields_wmsH1_TKsZ0() throws IOException {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry1");
    byte[] extra = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    entry.setExtra(extra);
    assertNotNull(entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_withNullExtraFields_ZAFM2_UDMl0() throws IOException {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry1");
    byte[] extra = null;
    entry.setExtra(extra);
    assertNull(entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNullLong_dfUd3_vdlo0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    long time = 0;
    entry.setTime(time);
    assertNotNull(entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlagWithNullValue_LuBh6_Ozqd0() throws ZipException, IOException {
        ZipArchiveEntry entry = new ZipArchiveEntry(new ZipArchiveEntry(new ZipEntry("entryName")));
        try {
            entry.setRawFlag(0);
            assertTrue(false);
        } catch (NullPointerException e) {
            assertTrue(true);
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRawFlagWithInvalidType_dxwb7_DYCX0() throws ZipException, IOException {
    ZipArchiveEntry entry = new ZipArchiveEntry(new ZipArchiveEntry(new ZipEntry("entryName")));
    try {
        entry.setRawFlag(0);
        assertTrue(false);
    } catch (ClassCastException e) {
        assertTrue(true);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRawFlagWithInvalidLength_oenN8_HQoH0() throws ZipException, IOException {
    ZipArchiveEntry entry = new ZipArchiveEntry(new ZipArchiveEntry(new ZipEntry("entryName")));
    try {
        entry.setRawFlag(0);
        assertTrue(false);
    } catch (IllegalArgumentException e) {
        assertTrue(true);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixSymlink_invalid_YGqK3_QjVG0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test.txt");
    entry.setUnixMode(UnixStat.LINK_FLAG);
    assertFalse(entry.isUnixSymlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testaddAsFirstExtraField_grOk0() throws Exception {
    zipArchiveEntry = new ZipArchiveEntry("test");
    extraFields = new ZipExtraField[1];
    extraFields[0] = zipExtraField;
    zipArchiveEntry.addAsFirstExtraField(zipExtraField);
    assertEquals(zipExtraField, extraFields[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLastAccessTime_ufHA11() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_ValidName_OCkp0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("newName", new byte[0]);
    assertEquals("newName", entry.getName());
    assertArrayEquals(new byte[0], entry.getRawName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_SameName_tXCH7() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("entry", new byte[0]);
    assertEquals("entry", entry.getName());
    assertArrayEquals(new byte[0], entry.getRawName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_DifferentRawName_MbMl9() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("newName", new byte[] { 0x01, 0x02, 0x03 });
    assertEquals("newName", entry.getName());
    assertArrayEquals(new byte[] { 0x01, 0x02, 0x03 }, entry.getRawName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_1_NPzl0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertNotNull(data);
    assertEquals(0, data.getCentralDirectoryData().length);
    assertEquals(0, data.getLocalFileDataData().length);
    assertEquals(0, data.getLocalFileDataLength().getValue());
    assertEquals(0, data.getCentralDirectoryLength().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_2_RQuc1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry2");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertNotNull(data);
    assertEquals(0, data.getCentralDirectoryData().length);
    assertEquals(0, data.getLocalFileDataData().length);
    assertEquals(0, data.getLocalFileDataLength().getValue());
    assertEquals(0, data.getCentralDirectoryLength().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_3_GRdX2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry3");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertNotNull(data);
    assertEquals(0, data.getCentralDirectoryData().length);
    assertEquals(0, data.getLocalFileDataData().length);
    assertEquals(0, data.getLocalFileDataLength().getValue());
    assertEquals(0, data.getCentralDirectoryLength().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_4_FceU3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry4");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertNotNull(data);
    assertEquals(0, data.getCentralDirectoryData().length);
    assertEquals(0, data.getLocalFileDataData().length);
    assertEquals(0, data.getLocalFileDataLength().getValue());
    assertEquals(0, data.getCentralDirectoryLength().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_5_IlLe4() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry5");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertNotNull(data);
    assertEquals(0, data.getCentralDirectoryData().length);
    assertEquals(0, data.getLocalFileDataData().length);
    assertEquals(0, data.getLocalFileDataLength().getValue());
    assertEquals(0, data.getCentralDirectoryLength().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData_6_elqL5() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry6");
    UnparseableExtraFieldData data = entry.getUnparseableExtraFieldData();
    assertNotNull(data);
    assertEquals(0, data.getCentralDirectoryData().length);
    assertEquals(0, data.getLocalFileDataData().length);
    assertEquals(0, data.getLocalFileDataLength().getValue());
    assertEquals(0, data.getCentralDirectoryLength().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithoutIncludeUnparseable_bUsn1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipExtraField[] extraFields = entry.getExtraFields(false);
    assertNotNull(extraFields);
    assertEquals(0, extraFields.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithIncludeUnparseableAndNoExtraFields_wuRU2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipExtraField[] extraFields = entry.getExtraFields(true);
    assertNotNull(extraFields);
    assertEquals(0, extraFields.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_timeSet_Cswd1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setTime(1000000000);
    assertEquals(1000000000, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_pNOq0() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getName(), clone.getName());
    assertEquals(entry.getSize(), clone.getSize());
    assertEquals(entry.getCompressedSize(), clone.getCompressedSize());
    assertEquals(entry.getCrc(), clone.getCrc());
    assertEquals(entry.getMethod(), clone.getMethod());
    assertEquals(entry.getTime(), clone.getTime());
    assertEquals(entry.getExtra(), clone.getExtra());
    assertEquals(entry.getComment(), clone.getComment());
    assertEquals(entry.isDirectory(), clone.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithNull_saCh1() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(null, null);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertNull(clone.getName());
    assertNull(clone.getSize());
    assertNull(clone.getCompressedSize());
    assertNull(clone.getCrc());
    assertNull(clone.getMethod());
    assertNull(clone.getTime());
    assertNull(clone.getExtra());
    assertNull(clone.getComment());
    assertFalse(clone.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidName_cvkt2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("invalid");
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals("invalid", clone.getName());
    assertEquals(entry.getSize(), clone.getSize());
    assertEquals(entry.getCompressedSize(), clone.getCompressedSize());
    assertEquals(entry.getCrc(), clone.getCrc());
    assertEquals(entry.getMethod(), clone.getMethod());
    assertEquals(entry.getTime(), clone.getTime());
    assertEquals(entry.getExtra(), clone.getExtra());
    assertEquals(entry.getComment(), clone.getComment());
    assertFalse(clone.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidSize_SUTh3() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(1000, clone.getSize());
    assertEquals(entry.getCompressedSize(), clone.getCompressedSize());
    assertEquals(entry.getCrc(), clone.getCrc());
    assertEquals(entry.getMethod(), clone.getMethod());
    assertEquals(entry.getTime(), clone.getTime());
    assertEquals(entry.getExtra(), clone.getExtra());
    assertEquals(entry.getComment(), clone.getComment());
    assertFalse(clone.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidCompressedSize_MLMG4() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setCompressedSize(1000);
    ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
    assertEquals(1000, clone.getCompressedSize());
    assertEquals(entry.getSize(), clone.getSize());
    assertEquals(entry.getCrc(), clone.getCrc());
    assertEquals(entry.getMethod(), clone.getMethod());
    assertEquals(entry.getTime(), clone.getTime());
    assertEquals(entry.getExtra(), clone.getExtra());
    assertEquals(entry.getComment(), clone.getComment());
    assertFalse(clone.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStreamContiguous_Amcu0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setStreamContiguous(true);
    assertTrue(entry.isStreamContiguous());
    entry.setStreamContiguous(false);
    assertFalse(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStreamContiguousWithDifferentConstructors_lqJs1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setStreamContiguous(true);
    assertTrue(entry.isStreamContiguous());
    entry = new ZipArchiveEntry(new File("test.zip"), "entry2");
    entry.setStreamContiguous(false);
    assertFalse(entry.isStreamContiguous());
    entry = new ZipArchiveEntry(new File("test.zip"), "entry3");
    entry.setStreamContiguous(true);
    assertTrue(entry.isStreamContiguous());
    entry = new ZipArchiveEntry(new File("test.zip"), "entry4");
    entry.setStreamContiguous(false);
    assertFalse(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStreamContiguousWithDifferentConstructorsAndMethods_pvEX2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setStreamContiguous(true);
    assertTrue(entry.isStreamContiguous());
    entry = new ZipArchiveEntry(new File("test.zip"), "entry2");
    entry.setStreamContiguous(false);
    assertFalse(entry.isStreamContiguous());
    entry = new ZipArchiveEntry(new File("test.zip"), "entry3");
    entry.setStreamContiguous(true);
    assertTrue(entry.isStreamContiguous());
    entry = new ZipArchiveEntry(new File("test.zip"), "entry4");
    entry.setStreamContiguous(false);
    assertFalse(entry.isStreamContiguous());
    entry = new ZipArchiveEntry(new File("test.zip"), "entry5");
    entry.setStreamContiguous(true);
    assertTrue(entry.isStreamContiguous());
    entry = new ZipArchiveEntry(new File("test.zip"), "entry6");
    entry.setStreamContiguous(false);
    assertFalse(entry.isStreamContiguous());
}
}