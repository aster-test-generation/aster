/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AES256SHA256Decoder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Password_1_DPJE0() {
    byte[] password = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int numCyclesPower = 1;
    byte[] salt = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] actual = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Password_2_Ctko1() {
    byte[] password = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int numCyclesPower = 2;
    byte[] salt = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] actual = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Password_3_fLYt2() {
    byte[] password = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int numCyclesPower = 3;
    byte[] salt = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] actual = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Password_4_DeyT3() {
    byte[] password = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int numCyclesPower = 4;
    byte[] salt = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] actual = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUtf16Decode_null_lWHb0() {
    char[] chars = null;
    byte[] expected = null;
    byte[] actual = AES256SHA256Decoder.utf16Decode(chars);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUtf16Decode_empty_emzV1() {
    char[] chars = new char[0];
    byte[] expected = new byte[0];
    byte[] actual = AES256SHA256Decoder.utf16Decode(chars);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUtf16Decode_nonEmpty_HkBp2() {
    char[] chars = new char[] {'a', 'b', 'c'};
    byte[] expected = new byte[] {97, 98, 99};
    byte[] actual = AES256SHA256Decoder.utf16Decode(chars);
    assertArrayEquals(expected, actual);
}
}