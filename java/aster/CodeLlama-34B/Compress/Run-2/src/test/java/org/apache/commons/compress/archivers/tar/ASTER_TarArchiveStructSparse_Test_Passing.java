/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveStructSparse_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOffset_aLdJ0() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, 100);
    assertEquals(10, tarArchiveStructSparse.getOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOffsetWithNegativeOffset_LvYh1() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(-10, 100);
    assertEquals(-10, tarArchiveStructSparse.getOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOffsetWithZeroOffset_uyuG2() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0, 100);
    assertEquals(0, tarArchiveStructSparse.getOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOffsetWithLargeOffset_rsng3() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(1000000000, 100);
    assertEquals(1000000000, tarArchiveStructSparse.getOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_Tlqe0() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, 20);
    assertTrue(tarArchiveStructSparse.equals(tarArchiveStructSparse));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectSameValues_gsHp1() {
    TarArchiveStructSparse tarArchiveStructSparse1 = new TarArchiveStructSparse(10, 20);
    TarArchiveStructSparse tarArchiveStructSparse2 = new TarArchiveStructSparse(10, 20);
    assertTrue(tarArchiveStructSparse1.equals(tarArchiveStructSparse2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectDifferentValues_qTHR2() {
    TarArchiveStructSparse tarArchiveStructSparse1 = new TarArchiveStructSparse(10, 20);
    TarArchiveStructSparse tarArchiveStructSparse2 = new TarArchiveStructSparse(15, 30);
    assertFalse(tarArchiveStructSparse1.equals(tarArchiveStructSparse2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_JJHN3() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, 20);
    assertFalse(tarArchiveStructSparse.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_HaDJ4() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, 20);
    assertFalse(tarArchiveStructSparse.equals(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameValuesDifferentTypes_fcaW5() {
    TarArchiveStructSparse tarArchiveStructSparse1 = new TarArchiveStructSparse(10, 20);
    TarArchiveStructSparse tarArchiveStructSparse2 = new TarArchiveStructSparse(10, 20);
    assertFalse(tarArchiveStructSparse1.equals(tarArchiveStructSparse2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_DQur0() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, 20);
    String expected = "TarArchiveStructSparse{offset=10, numbytes=20}";
    String actual = tarArchiveStructSparse.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytes_1_PGFA0() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, 100);
    long numbytes = tarArchiveStructSparse.getNumbytes();
    assertEquals(100, numbytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytes_2_zJxi1() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, 0);
    long numbytes = tarArchiveStructSparse.getNumbytes();
    assertEquals(0, numbytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytes_3_GhqN2() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, -1);
    long numbytes = tarArchiveStructSparse.getNumbytes();
    assertEquals(-1, numbytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytes_4_DXYr3() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, Long.MAX_VALUE);
    long numbytes = tarArchiveStructSparse.getNumbytes();
    assertEquals(Long.MAX_VALUE, numbytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytes_5_GVnH4() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, Long.MIN_VALUE);
    long numbytes = tarArchiveStructSparse.getNumbytes();
    assertEquals(Long.MIN_VALUE, numbytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytes_8_cEHa7() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, 0L);
    long numbytes = tarArchiveStructSparse.getNumbytes();
    assertEquals(0L, numbytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytes_9_bMvv8() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, 1L);
    long numbytes = tarArchiveStructSparse.getNumbytes();
    assertEquals(1L, numbytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytes_10_XRNC9() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, -1L);
    long numbytes = tarArchiveStructSparse.getNumbytes();
    assertEquals(-1L, numbytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytes_11_dRQN10() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, Long.MAX_VALUE - 1);
    long numbytes = tarArchiveStructSparse.getNumbytes();
    assertEquals(Long.MAX_VALUE - 1, numbytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_WIIM0() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(100L, 200L);
    int actual = tarArchiveStructSparse.hashCode();
    int expected = Objects.hash(100L, 200L);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeNegativeOffset_DutN1() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(-100L, 200L);
    int actual = tarArchiveStructSparse.hashCode();
    int expected = Objects.hash(-100L, 200L);
    assertEquals(expected, actual);
}
}