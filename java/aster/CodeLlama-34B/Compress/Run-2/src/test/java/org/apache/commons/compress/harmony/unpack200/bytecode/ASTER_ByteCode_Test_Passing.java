/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ByteCode_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperand2BytesWithInvalidPosition_FSCS2() {
    ByteCode byteCode = new ByteCode(1);
    try {
        byteCode.setOperand2Bytes(10, 2);
        fail("Expected an error to be thrown");
    } catch (Error e) {
        assertEquals("Trying to rewrite ByteCode with an int at position 2 but this won't fit in the rewrite array", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes_InvalidOperands_VbTv1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] operands = new int[] {1, 2, 3, 4};
    try {
        byteCode.setOperandBytes(operands);
        fail("Expected Error to be thrown");
    } catch (Error e) {
        assertEquals("Trying to rewrite ByteCode that has no rewrite", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes_InvalidByteCodeFormLength_aehz2() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] operands = new int[] {1, 2, 3};
    try {
        byteCode.setOperandBytes(operands);
        fail("Expected Error to be thrown");
    } catch (Error e) {
        assertEquals("Trying to rewrite ByteCode with 3 but bytecode has length 0", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedMustStartClassPool_YLwc0() {
    ByteCode byteCode = new ByteCode(1);
    assertTrue(byteCode.nestedMustStartClassPool());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedMustStartClassPoolWithNested_ppid1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    assertFalse(byteCode.nestedMustStartClassPool());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedMustStartClassPoolWithoutNested_INGE2() {
    ByteCode byteCode = new ByteCode(1);
    assertFalse(byteCode.nestedMustStartClassPool());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargets_Hunp0() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] byteCodeTargets = new int[1];
    byteCode.setByteCodeTargets(byteCodeTargets);
    assertEquals(byteCodeTargets, byteCode.getByteCodeTargets());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargetsWithNested_anwH1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[1]);
    int[] byteCodeTargets = new int[1];
    byteCode.setByteCodeTargets(byteCodeTargets);
    assertEquals(byteCodeTargets, byteCode.getByteCodeTargets());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargetsWithInvalidOpcode_zYBQ2() {
    ByteCode byteCode = new ByteCode(0, new ClassFileEntry[0]);
    int[] byteCodeTargets = new int[1];
    try {
        byteCode.setByteCodeTargets(byteCodeTargets);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid opcode: 0", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargetsWithNullByteCodeTargets_zETG3() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    try {
        byteCode.setByteCodeTargets(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("byteCodeTargets cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargetsWithEmptyByteCodeTargets_fIxY4() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] byteCodeTargets = new int[0];
    try {
        byteCode.setByteCodeTargets(byteCodeTargets);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("byteCodeTargets cannot be empty", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargetsWithInvalidByteCodeTargets_NNfW5() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] byteCodeTargets = new int[1];
    byteCodeTargets[0] = -1;
    try {
        byteCode.setByteCodeTargets(byteCodeTargets);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid byte code target: -1", e.getMessage());
    }
}
}
 