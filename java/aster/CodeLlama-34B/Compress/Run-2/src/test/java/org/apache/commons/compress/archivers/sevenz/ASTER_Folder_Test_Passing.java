/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Folder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForInStream_EmptyBindPairs_pDgS0() {
    Folder folder = new Folder();
    int result = folder.findBindPairForInStream(0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForInStream_NonEmptyBindPairs_Evma1() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[1];
    folder.bindPairs[0] = new BindPair(0, 1);
    int result = folder.findBindPairForInStream(0);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForInStream_NonEmptyBindPairs_InvalidIndex_rRJI2() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[1];
    folder.bindPairs[0] = new BindPair(0, 1);
    int result = folder.findBindPairForInStream(2);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForInStream_NullBindPairs_fOnY3() {
    Folder folder = new Folder();
    folder.bindPairs = null;
    int result = folder.findBindPairForInStream(0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForInStream_EmptyBindPairs_InvalidIndex_HCbr4() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[0];
    int result = folder.findBindPairForInStream(2);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForInStream_NullBindPairs_InvalidIndex_OHJB6() {
    Folder folder = new Folder();
    folder.bindPairs = null;
    int result = folder.findBindPairForInStream(2);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForInStream_NonEmptyBindPairs_InvalidIndex_3_eDtu8() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[1];
    folder.bindPairs[0] = new BindPair(0, 1);
    int result = folder.findBindPairForInStream(3);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForInStream_NullBindPairs_InvalidIndex_2_EzYi9() {
    Folder folder = new Folder();
    folder.bindPairs = null;
    int result = folder.findBindPairForInStream(3);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForInStream_EmptyBindPairs_InvalidIndex_3_LuOM10() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[0];
    int result = folder.findBindPairForInStream(3);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_EmptyBindPairs_dEOG0() {
    Folder folder = new Folder();
    assertEquals(-1, folder.findBindPairForOutStream(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_NonEmptyBindPairs_HMEB1() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[1];
    folder.bindPairs[0] = new BindPair(0, 1);
    assertEquals(0, folder.findBindPairForOutStream(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_MultipleBindPairs_DXIS2_1() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[2];
    folder.bindPairs[0] = new BindPair(0, 1);
    folder.bindPairs[1] = new BindPair(1, 2);
    assertEquals(0, folder.findBindPairForOutStream(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_MultipleBindPairs_DXIS2_2() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[2];
    folder.bindPairs[0] = new BindPair(0, 1);
    folder.bindPairs[1] = new BindPair(1, 2);
    assertEquals(1, folder.findBindPairForOutStream(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_InvalidIndex_lUiy3() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[1];
    folder.bindPairs[0] = new BindPair(0, 1);
    assertEquals(-1, folder.findBindPairForOutStream(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_NullBindPairs_hdmX4() {
    Folder folder = new Folder();
    folder.bindPairs = null;
    assertEquals(-1, folder.findBindPairForOutStream(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_NegativeIndex_Chky5() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[1];
    folder.bindPairs[0] = new BindPair(0, 1);
    assertEquals(-1, folder.findBindPairForOutStream(-1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_IndexNotInBindPairs_JHEA7() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[1];
    folder.bindPairs[0] = new BindPair(0, 1);
    assertEquals(-1, folder.findBindPairForOutStream(3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsZero_DvBt0() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 0;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsOne_DTov1() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 1;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsTwo_fhmk2() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 2;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsThree_TytB3() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 3;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsFour_IMGA4() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 4;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsFive_rgod5() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 5;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsSix_ETSe6() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 6;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsSeven_rdMC7() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 7;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsEight_xpVu8() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 8;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsNine_PGqC9() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 9;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsTen_hxEZ10() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 10;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSizeForCoder_NullCoder_DwXl0() {
    Folder folder = new Folder();
    long result = folder.getUnpackSizeForCoder(null);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_MultipleBindPairs_DXIS2() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[2];
    folder.bindPairs[0] = new BindPair(0, 1);
    folder.bindPairs[1] = new BindPair(1, 2);
    assertEquals(0, folder.findBindPairForOutStream(0));
    assertEquals(1, folder.findBindPairForOutStream(1));
}
}