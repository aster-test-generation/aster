/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SegmentConstantPool_Test_Passing {
private static final int CP_CLASS = 7;
private final SegmentConstantPoolArrayCache arrayCache = new SegmentConstantPoolArrayCache();
private static final int CP_FIELD = 1;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatches_NoMatch_xOyG2() {
    String regexString = "something";
    String compareString = "anything";
    assertFalse(SegmentConstantPool.regexMatches(regexString, compareString));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatches_InvalidRegex_zKpk3() {
    String regexString = "invalid";
    String compareString = "anything";
    try {
        SegmentConstantPool.regexMatches(regexString, compareString);
        fail("Expected an Error to be thrown");
    } catch (Error e) {
        assertEquals("regex trying to match a pattern I don't know: invalid", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_InvalidTag_uiSl9() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    try {
        pool.getValue(100, 0);
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
        assertEquals("Tried to get a value I don't know about: 100", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_PrimaryArrayNull_XPMJ0() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    String[] primaryArray = null;
    String[] secondaryArray = new String[] {"a", "b", "c"};
    String primaryCompareString = "a";
    String secondaryCompareRegex = "a";
    int desiredIndex = 0;
    int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
    assertEquals(-1, actualIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_SecondaryArrayNull_CNxf1() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    String[] primaryArray = new String[] {"a", "b", "c"};
    String[] secondaryArray = null;
    String primaryCompareString = "a";
    String secondaryCompareRegex = "a";
    int desiredIndex = 0;
    int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
    assertEquals(-1, actualIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_PrimaryCompareStringNull_VOIp2() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    String[] primaryArray = new String[] {"a", "b", "c"};
    String[] secondaryArray = new String[] {"a", "b", "c"};
    String primaryCompareString = null;
    String secondaryCompareRegex = "a";
    int desiredIndex = 0;
    int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
    assertEquals(-1, actualIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_SecondaryCompareRegexNull_Vuas3() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    String[] primaryArray = new String[] {"a", "b", "c"};
    String[] secondaryArray = new String[] {"a", "b", "c"};
    String primaryCompareString = "a";
    String secondaryCompareRegex = null;
    int desiredIndex = 0;
    int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
    assertEquals(-1, actualIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_DesiredIndexNegative_tHVd4() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    String[] primaryArray = new String[] {"a", "b", "c"};
    String[] secondaryArray = new String[] {"a", "b", "c"};
    String primaryCompareString = "a";
    String secondaryCompareRegex = "a";
    int desiredIndex = -1;
    int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
    assertEquals(-1, actualIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_emptyNameArray_wufr0() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[0], "test", 0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_nullNameArray_lOpF1() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(null, "test", 0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_emptyCompareString_mwJS2() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[]{"test"}, "", 0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_nullCompareString_Tsiv3() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[]{"test"}, null, 0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_desiredIndexOutOfBounds_nrva4() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[]{"test"}, "test", 10);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_desiredIndexNegative_sxyA5() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[]{"test"}, "test", -1);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_matchingString_oCtj6() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[]{"test"}, "test", 0);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_nonMatchingString_nWQX7() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[]{"test"}, "test1", 0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_matchingStringWithDifferentCase_OECD8() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[]{"test"}, "Test", 0);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_matchingStringWithDifferentCaseAndDesiredIndex_amRT9() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[]{"test"}, "Test", 1);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntry_qrkH0_1() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    String name = "java.lang.Object";
    ConstantPoolEntry entry = pool.getClassPoolEntry(name);
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntry_qrkH0_2() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    String name = "java.lang.Object";
    ConstantPoolEntry entry = pool.getClassPoolEntry(name);
    assertEquals(CP_CLASS, entry.getTag());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntry_qrkH0_3() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    String name = "java.lang.Object";
    ConstantPoolEntry entry = pool.getClassPoolEntry(name);
    assertEquals(0, entry.getGlobalIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntryWithValidNameAndGlobalIndex2_OZYp5_1() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    String name = "java.lang.String";
    ConstantPoolEntry entry = pool.getClassPoolEntry(name);
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntryWithValidNameAndGlobalIndex2_OZYp5_2() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    String name = "java.lang.String";
    ConstantPoolEntry entry = pool.getClassPoolEntry(name);
    assertEquals(CP_CLASS, entry.getTag());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntryWithValidNameAndGlobalIndex2_OZYp5_3() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    String name = "java.lang.String";
    ConstantPoolEntry entry = pool.getClassPoolEntry(name);
    assertEquals(1, entry.getGlobalIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSpecificPoolEntry_CP_FIELD_ZCon0_1() throws Pack200Exception {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    ConstantPoolEntry entry = segmentConstantPool.getClassSpecificPoolEntry(CP_FIELD, 0, "java/lang/Object");
    assertEquals(0, entry.getGlobalIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSpecificPoolEntry_CP_FIELD_ZCon0_2() throws Pack200Exception {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    ConstantPoolEntry entry = segmentConstantPool.getClassSpecificPoolEntry(CP_FIELD, 0, "java/lang/Object");
    assertEquals(CP_FIELD, entry.getTag());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatches_MatchAll_MRoc0_XNha0() {
    String regexString = ".*";
    String compareString = "anything";
    assertTrue(SegmentConstantPool.regexMatches(regexString, compareString));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatches_MatchInit_RJbC1_wKWg0() {
    String regexString = "init";
    String compareString = "init";
    assertTrue(SegmentConstantPool.regexMatches(regexString, compareString));
}
}