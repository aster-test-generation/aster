/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeServletAction_Test_Failing {
  private TradeServices tAction;
  private TradeServices services;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogoutWithException_bbcy2() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    when(req.getAttribute("TSS-RecreateSessionInLogout")).thenReturn(Boolean.FALSE);
    try {
      tradeServletAction.doLogout(ctx, req, resp, userID);
      fail("Expected Exception");
    } catch (Exception e) {
      assertEquals("Error logging out testUser", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_ValidInputs_dmkb0() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String password = "testPassword";
    String cpassword = "testPassword";
    String fullName = "Test User";
    String address = "Test Address";
    String creditcard = "Test Credit Card";
    String email = "test@email.com";
    String results = "";
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean(userID, password, fullName, address, email, creditcard);
    try {
      tradeServletAction.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
      assertEquals("Account profile update successful", results);
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_InvalidPassword_pchO1() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String password = "testPassword";
    String cpassword = "wrongPassword";
    String fullName = "Test User";
    String address = "Test Address";
    String creditcard = "Test Credit Card";
    String email = "test@email.com";
    String results = "";
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean(userID, password, fullName, address, email, creditcard);
    try {
      tradeServletAction.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
      assertEquals("Update profile error: passwords do not match", results);
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_MissingFields_vFFt2() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String password = "testPassword";
    String cpassword = "testPassword";
    String fullName = "";
    String address = "";
    String creditcard = "";
    String email = "";
    String results = "";
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean(userID, password, fullName, address, email, creditcard);
    try {
      tradeServletAction.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
      assertEquals("Update profile error: please fill in all profile information fields", results);
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcome_frHI0() throws ServletException, IOException {
    TradeServletAction servletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String status = "success";
    servletAction.doWelcome(ctx, req, resp, status);
    verify(req).setAttribute("results", status);
    verify(req).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp).setStatus(HttpServletResponse.SC_OK);
    verify(resp).setContentType("text/html");
    verify(resp).getWriter();
    verify(resp).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcomeWithNullStatus_RUjF1() throws ServletException, IOException {
    TradeServletAction servletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String status = null;
    servletAction.doWelcome(ctx, req, resp, status);
    verify(req).setAttribute("results", status);
    verify(req).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp).setStatus(HttpServletResponse.SC_OK);
    verify(resp).setContentType("text/html");
    verify(resp).getWriter();
    verify(resp).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcomeWithEmptyStatus_qaZV2() throws ServletException, IOException {
    TradeServletAction servletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String status = "";
    servletAction.doWelcome(ctx, req, resp, status);
    verify(req).setAttribute("results", status);
    verify(req).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp).setStatus(HttpServletResponse.SC_OK);
    verify(resp).setContentType("text/html");
    verify(resp).getWriter();
    verify(resp).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcomeWithInvalidStatus_Qcps3() throws ServletException, IOException {
    TradeServletAction servletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String status = "invalid";
    servletAction.doWelcome(ctx, req, resp, status);
    verify(req).setAttribute("results", status);
    verify(req).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp).setStatus(HttpServletResponse.SC_OK);
    verify(resp).setContentType("text/html");
    verify(resp).getWriter();
    verify(resp).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcomeWithNullRequest_hCIN4() throws ServletException, IOException {
    TradeServletAction servletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = null;
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String status = "success";
    servletAction.doWelcome(ctx, req, resp, status);
    verify(req, never()).setAttribute("results", status);
    verify(req, never()).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp, never()).setStatus(HttpServletResponse.SC_OK);
    verify(resp, never()).setContentType("text/html");
    verify(resp, never()).getWriter();
    verify(resp, never()).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoHome_UWRM0_fid1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "test_user";
    String results = "test_results";
    tradeServletAction.doHome(ctx, req, resp, userID, results);
    verify(ctx).setAttribute("accountData", any(AccountDataBean.class));
    verify(ctx).setAttribute("holdingDataBeans", any(Collection.class));
    verify(ctx).setAttribute("results", results);
    verify(req).setAttribute("results", results);
    verify(req).setAttribute("userID", userID);
    verify(resp).setStatus(HttpServletResponse.SC_OK);
    verify(resp).setContentType("text/html");
    verify(resp).getWriter();
    verify(resp).flushBuffer();
    // Fix the error by adding the missing argument
    verify(resp).getWriter().write(results);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_ValidInputs_dmkb0_fid1() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String password = "testPassword";
    String cpassword = "testPassword";
    String fullName = "Test User";
    String address = "Test Address";
    String creditcard = "Test Credit Card";
    String email = "test@email.code";
    String results = "";
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean(userID, password, fullName, address, email, creditcard);
    try {
      tradeServletAction.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
      assertEquals("Account profile update successful", results);
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_InvalidPassword_pchO1_fid1() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String password = "testPassword";
    String cpassword = "wrongPassword";
    String fullName = "Test User";
    String address = "Test Address";
    String creditcard = "Test Credit Card";
    String email = "test@email.com";
    String results = "";
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean(userID, password, fullName, address, email, creditcard);
    try {
      tradeServletAction.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
      assertEquals("Update profile error: passwords do not match", results);
    } catch (Exception e) {
      assertEquals("Update profile error: passwords do not match", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcomeWithNullRequest_hCIN4_fid1() throws ServletException, IOException {
    TradeServletAction servletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String status = "success";
    servletAction.doWelcome(ctx, req, resp, status);
    verify(req, never()).setAttribute("results", status);
    verify(req, never()).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp, never()).setStatus(HttpServletResponse.SC_OK);
    verify(resp, never()).setContentType("text/html");
    verify(resp, never()).getWriter();
    verify(resp, never()).flushBuffer();
  }
}