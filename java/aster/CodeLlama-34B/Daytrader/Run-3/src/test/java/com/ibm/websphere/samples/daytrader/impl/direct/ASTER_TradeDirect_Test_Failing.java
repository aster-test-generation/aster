/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.*;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Failing {
  @InjectMocks
  private static final String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";
  private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
  private static Integer marketSummaryLock = new Integer(0);
  private static long nextMarketSummary = System.currentTimeMillis();
  @Mock
  private Connection connection;
  @Mock
  private PreparedStatement preparedstatement;
  @Mock
  private DataSource datasource;
  @Mock
  private ResultSet resultset;
  @InjectMocks
  private TradeDirect tradedirect;
  private static String getAllQuotesSQL = "select * from quoteejb q";
  private boolean inSession = false;
  private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
  private static String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
  private  UserTransaction txn;
  @Mock
  private PreparedStatement preparedStatement;
  @Mock
  private ResultSet resultSet;
  @Mock
  private DataSource dataSource;
  @InjectMocks
  private TradeDirect tradeDirect;
  private static final String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";
  private static final String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
  private static final String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
  private static final String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_1() throws Exception {
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    MarketSummaryDataBean marketSummaryDataBean = tradedirect.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_2() throws Exception {
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    MarketSummaryDataBean marketSummaryDataBean = tradedirect.getMarketSummary();
    assertEquals(cachedMSDB, marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRecreateDBTables_exception_ptiZ2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[]{"DROP TABLE IF EXISTS trade"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
    assertThrows(SQLException.class, () -> tradeDirect.recreateDBTables(sqlBuffer, out));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRecreateDBTables_Exception_dsHo2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[]{"DROP TABLE IF EXISTS trade", "CREATE TABLE trade (id INTEGER PRIMARY KEY, name VARCHAR(255))"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
      tradeDirect.recreateDBTables(sqlBuffer, out);
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertTrue(e instanceof SQLException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_Success_rIUW0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.completeOrder(1, true);
    assertNotNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_Success_rIUW0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.completeOrder(1, true);
    assertNotNull(orderData);
    assertEquals("COMPLETE", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_Failure_CwGT1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.completeOrder(1, true);
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_XQvI0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    assertNotNull(quotes);
    assertEquals(10, quotes.size());
    for (QuoteDataBean quote : quotes) {
      assertNotNull(quote.getSymbol());
      assertNotNull(quote.getCompanyName());
      assertNotNull(quote.getVolume());
      assertNotNull(quote.getPrice());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_XQvI0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    assertNotNull(quotes);
    assertEquals(100, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithInvalidOrderID_sBce2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = new Integer(3);
    boolean twoPhase = true;
    OrderDataBean orderData = tradeDirect.completeOrder(orderID, twoPhase);
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithEmptyResultSet_izOs1_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    assertNotNull(quotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithEmptyResultSet_izOs1_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    assertEquals(0, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_qQUv0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = 10.0;
    double rnd2 = 20.0;
    double expectedReturn = 30.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_negativeRnd1_yECf1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = -10.0;
    double rnd2 = 20.0;
    double expectedReturn = -30.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_negativeRnd2_Brig2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = 10.0;
    double rnd2 = -20.0;
    double expectedReturn = -30.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_zeroRnd1_uzbq3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = 0.0;
    double rnd2 = 20.0;
    double expectedReturn = 0.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_zeroRnd2_OLyV4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = 10.0;
    double rnd2 = 0.0;
    double expectedReturn = 0.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_invalidRnd1_CEit7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = Double.NaN;
    double rnd2 = 20.0;
    double expectedReturn = Double.NaN;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_invalidRnd2_aQPJ8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = 10.0;
    double rnd2 = Double.NaN;
    double expectedReturn = Double.NaN;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_marketSummaryIntervalZero_NIax0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
    assertNotNull(marketSummary);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_marketSummaryIntervalZero_NIax806675_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
    assertEquals(806675, marketSummary.getOpenTSIA().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_marketSummaryIntervalZero_NIax428482_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
    assertEquals(428482, marketSummary.getTSIA().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_marketSummaryIntervalZero_NIax0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
    assertEquals(0, marketSummary.getVolume(), 131.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_marketSummaryIntervalZero_NIax5_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
    assertEquals(5, marketSummary.getTopGainers().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_marketSummaryIntervalZero_NIax5_8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
    assertEquals(5, marketSummary.getTopLosers().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_marketSummaryIntervalNegative_ZCQP1_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
    assertEquals(-47, marketSummary.getGainPercent().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_null_icwl0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(null);
      assertNull(orderDataBeans);
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_empty_ZhnM1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders("");
      assertNotNull(orderDataBeans);
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_nonExistent_jrGY3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders("nonExistentUser");
      assertNull(orderDataBeans);
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_noOrders_nyhF4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders("userWithNoOrders");
      assertEquals(0, orderDataBeans.size());
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_veTX1_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("invalidUserID");
    assertEquals(0, holdingDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_veTX1_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("invalidUserID");
    assertNotNull(holdingDataBeans);
    assertEquals(0, holdingDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wnXK0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNotNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wnXK0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNotNull(accountProfileData);
    assertEquals("password1", accountProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wnXK0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNotNull(accountProfileData);
    assertEquals("fullName1", accountProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wnXK0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNotNull(accountProfileData);
    assertEquals("address1", accountProfileData.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wnXK0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNotNull(accountProfileData);
    assertEquals("email1", accountProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wnXK0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("creditCard1", accountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetConnPublic_MngA0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = tradeDirect.getConnPublic();
    assertNotNull(conn);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Synch_qpgh0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
    assertEquals("sold", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch_razh1_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.ASYNCH);
    assertNotNull(orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch_razh1_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.ASYNCH);
    assertEquals("sold", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch2Phase_nYOT2_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.ASYNCH_2PHASE);
    assertNotNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch2Phase_nYOT2_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.ASYNCH_2PHASE);
    assertEquals("sold", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InvalidUserID_klMp3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("invalidUserID", 1, TradeConfig.SYNCH);
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InvalidHoldingID_rmEc4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", -1, TradeConfig.SYNCH);
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InvalidOrderProcessingMode_IHag5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", 1, -1);
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_NoAccountData_KhAF6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_NotInSession_QgAx10_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
    assertNotNull(orderData);
    assertEquals("sold", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_GlobalTransaction_mpgS11_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.ASYNCH_2PHASE);
    assertNotNull(orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_TradeConfigUpdateQuotePricesFalse_FOfO0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 1000.0;
    boolean publishQuotePriceChange = true;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt("ABC", changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(quoteData, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_PennystockPrice_toCx1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 1000.0;
    boolean publishQuotePriceChange = true;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt("ABC", changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(quoteData.getPrice(), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_MaximumStockPrice_dGoc2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 1000.0;
    boolean publishQuotePriceChange = true;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt("ABC", changeFactor, sharesTraded, publishQuotePriceChange);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_kkQz0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertNotNull(updatedAccountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_kkQz0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getPassword(), updatedAccountProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_kkQz0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertNotNull(updatedAccountProfileData);
    assertEquals(accountProfileData.getAddress(), updatedAccountProfileData.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_kkQz0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertNotNull(updatedAccountProfileData);
    assertEquals(accountProfileData.getEmail(), updatedAccountProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_kkQz0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertNotNull(updatedAccountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_TMOC0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders("user1");
    OrderDataBean orderData = orderDataBeans.iterator().next();
    assertNotNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_TMOC0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders("user1");
    OrderDataBean orderData = orderDataBeans.iterator().next();
    assertEquals(1, orderData.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_TMOC0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders("user1");
    OrderDataBean orderData = orderDataBeans.iterator().next();
    assertEquals("completed", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUserID_OGJA1_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders("invalidUserID");
    assertNotNull(orderDataBeans);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUserID_OGJA1_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders("invalidUserID");
    assertNotNull(orderDataBeans);
    assertEquals(0, orderDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_toNB0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertNotNull(updatedQuoteDataBean);
    assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_toNB0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getPrice().multiply(changeFactor), updatedQuoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_toNB0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getOpen().multiply(changeFactor), updatedQuoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_toNB0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getLow().multiply(changeFactor), updatedQuoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_toNB0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getHigh().multiply(changeFactor), updatedQuoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_toNB0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getVolume() + sharesTraded, updatedQuoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_toNB0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertNotNull(updatedQuoteDataBean);
    assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
    assertEquals(quoteDataBean.getPrice().multiply(changeFactor), updatedQuoteDataBean.getPrice());
    assertEquals(quoteDataBean.getVolume() + sharesTraded, updatedQuoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInvalidUserID_NAtB1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("invalidUserID");
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullUserID_jZmc2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData(null);
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithEmptyUserID_XYcL3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("");
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullAccount_lvHW5_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertNotNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullAccount_lvHW5_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertNotNull(accountProfileData.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_wehJ0_dzZC0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_wehJ0_dzZC0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_wehJ0_dzZC0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertEquals(100, quoteDataBean.getPrice().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_wehJ0_dzZC0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertEquals(100, quoteDataBean.getOpen().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_wehJ0_dzZC0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertEquals(100, quoteDataBean.getLow().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_wehJ0_dzZC0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertEquals(100, quoteDataBean.getHigh().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_wehJ0_dzZC0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertEquals(100, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_eUKi0_qzrk0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    Assertions.assertNotNull(quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_eUKi0_qzrk0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    Assertions.assertEquals("ABC", quoteData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_eUKi0_qzrk0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    Assertions.assertEquals(100, quoteData.getPrice().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_eUKi0_qzrk0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    Assertions.assertEquals(90, quoteData.getOpen().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_eUKi0_qzrk0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    Assertions.assertEquals(80, quoteData.getLow().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_eUKi0_qzrk0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    Assertions.assertEquals(110, quoteData.getHigh().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_eUKi0_qzrk0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    Assertions.assertEquals(10.0, quoteData.getChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_eUKi0_qzrk0_8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    Assertions.assertEquals(1000, quoteData.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_fprg0_APJu0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    for (QuoteDataBean quote : quotes) {
      assertNotNull(quote);
    }
    assertNotNull(quotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_fprg0_APJu0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    for (QuoteDataBean quote : quotes) {
    }
    assertNotNull(quotes);
    assertEquals(10, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_cancel_VdGp2_Mfqx0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("cancel");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100.00));
    orderData.setQuantity(100.0);
    orderData.setOrderFee(new BigDecimal(10.00));
    orderData.setQuote(new QuoteDataBean());
    orderData.setSymbol("ABC");
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_ZXtP0_ExMq0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = tradeDirect.getHolding(1);
    assertNotNull(holdingData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_ZXtP0_ExMq0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = tradeDirect.getHolding(1);
    assertEquals(1, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_ZXtP0_ExMq0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = tradeDirect.getHolding(1);
    assertEquals(100, holdingData.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_ZXtP0_ExMq0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = tradeDirect.getHolding(1);
    assertEquals("SUN", holdingData.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_ZXtP0_ExMq0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = tradeDirect.getHolding(1);
    assertEquals(new BigDecimal("100.00"), holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_ZXtP0_ExMq0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = tradeDirect.getHolding(1);
    assertEquals(new java.util.Date(), holdingData.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_ZXtP0_ExMq0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = tradeDirect.getHolding(1);
    assertEquals(new AccountDataBean(), holdingData.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_DGyv0_1() throws Exception {
    MockitoAnnotations.initMocks(this);
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    String symbol = "TEST";
    BigDecimal changeFactor = BigDecimal.valueOf(1.0);
    double sharesTraded = 100.0;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol(symbol);
    quoteDataBean.setPrice(BigDecimal.valueOf(100.0));
    quoteDataBean.setOpen(BigDecimal.valueOf(100.0));
    quoteDataBean.setVolume(100.0);
    when(resultSet.next()).thenReturn(true).thenReturn(false);
    when(resultSet.getString("symbol")).thenReturn(symbol);
    when(resultSet.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(100.0));
    when(resultSet.getBigDecimal("open")).thenReturn(BigDecimal.valueOf(100.0));
    when(resultSet.getDouble("volume")).thenReturn(100.0);
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(symbol, updatedQuoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_DGyv0_2() throws Exception {
    MockitoAnnotations.initMocks(this);
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    String symbol = "TEST";
    BigDecimal changeFactor = BigDecimal.valueOf(1.0);
    double sharesTraded = 100.0;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol(symbol);
    quoteDataBean.setPrice(BigDecimal.valueOf(100.0));
    quoteDataBean.setOpen(BigDecimal.valueOf(100.0));
    quoteDataBean.setVolume(100.0);
    when(resultSet.next()).thenReturn(true).thenReturn(false);
    when(resultSet.getString("symbol")).thenReturn(symbol);
    when(resultSet.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(100.0));
    when(resultSet.getBigDecimal("open")).thenReturn(BigDecimal.valueOf(100.0));
    when(resultSet.getDouble("volume")).thenReturn(100.0);
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(BigDecimal.valueOf(100.0), updatedQuoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_DGyv0_3() throws Exception {
    MockitoAnnotations.initMocks(this);
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    String symbol = "TEST";
    BigDecimal changeFactor = BigDecimal.valueOf(1.0);
    double sharesTraded = 100.0;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol(symbol);
    quoteDataBean.setPrice(BigDecimal.valueOf(100.0));
    quoteDataBean.setOpen(BigDecimal.valueOf(100.0));
    quoteDataBean.setVolume(100.0);
    when(resultSet.next()).thenReturn(true).thenReturn(false);
    when(resultSet.getString("symbol")).thenReturn(symbol);
    when(resultSet.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(100.0));
    when(resultSet.getBigDecimal("open")).thenReturn(BigDecimal.valueOf(100.0));
    when(resultSet.getDouble("volume")).thenReturn(100.0);
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(BigDecimal.valueOf(100.0), updatedQuoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_DGyv0_4() throws Exception {
    MockitoAnnotations.initMocks(this);
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    String symbol = "TEST";
    BigDecimal changeFactor = BigDecimal.valueOf(1.0);
    double sharesTraded = 100.0;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol(symbol);
    quoteDataBean.setPrice(BigDecimal.valueOf(100.0));
    quoteDataBean.setOpen(BigDecimal.valueOf(100.0));
    quoteDataBean.setVolume(100.0);
    when(resultSet.next()).thenReturn(true).thenReturn(false);
    when(resultSet.getString("symbol")).thenReturn(symbol);
    when(resultSet.getBigDecimal("price")).thenReturn(BigDecimal.valueOf(100.0));
    when(resultSet.getBigDecimal("open")).thenReturn(BigDecimal.valueOf(100.0));
    when(resultSet.getDouble("volume")).thenReturn(100.0);
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(200.0, updatedQuoteDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_MTiY0_sDcz0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100.00));
    orderData.setQuantity(100.0);
    orderData.setOrderFee(new BigDecimal(10.00));
    orderData.setQuote(new QuoteDataBean());
    orderData.setSymbol("ABC");
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_pNyj0_qlBs0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_pNyj0_qlBs0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getOrderID(), result.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_pNyj0_qlBs0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getOrderStatus(), result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_pNyj0_qlBs0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_pNyj0_qlBs0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getQuantity(), result.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_pNyj0_qlBs0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getPrice(), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_pNyj0_qlBs0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getOrderFee(), result.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRecreateDBTables_success_YKMI0_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[]{"DROP TABLE IF EXISTS trade"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
    assertTrue(success);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRecreateDBTables_exception_ptiZ2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[]{"DROP TABLE IF EXISTS trade"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
    assertThrows(Exception.class, () -> tradeDirect.recreateDBTables(sqlBuffer, out));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRecreateDBTables_Success_pWAb0_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[]{"DROP TABLE IF EXISTS trade", "CREATE TABLE trade (id INTEGER PRIMARY KEY, name VARCHAR(255))"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
    assertTrue(success);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_Success_rIUW0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.completeOrder(1, true);
    assertEquals(1, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_Success_rIUW0_3_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.completeOrder(1, true);
    assertEquals("COMPLETE", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_XQvI0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    assertEquals(100, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithException_RXJm1_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    PreparedStatement stmt = mock(PreparedStatement.class);
    ResultSet rs = mock(ResultSet.class);
    when(conn.prepareStatement(anyString())).thenReturn(stmt);
    when(stmt.executeQuery()).thenReturn(rs);
    when(rs.next()).thenThrow(new SQLException());
    try {
      tradeDirect.getAllQuotes();
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertTrue(e instanceof SQLException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithException_qiPc2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.getAllQuotes();
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertTrue(e instanceof SQLException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_invalidRnd1_CEit7_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = Double.NaN;
    double rnd2 = 20.0;
    double expectedReturn = 0.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_invalidRnd2_aQPJ8_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = 10.0;
    double rnd2 = Double.NaN;
    double expectedReturn = 0.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_marketSummaryIntervalZero_NIax0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
    assertEquals(0, marketSummary.getOpenTSIA().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_marketSummaryIntervalZero_NIax0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
    assertEquals(0, marketSummary.getGainPercent().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_marketSummaryIntervalZero_NIax0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
    assertEquals(0, marketSummary.getSummaryDate().getTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_marketSummaryIntervalZero_NIax0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
    assertEquals(0, marketSummary.getTSIA().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_marketSummaryIntervalZero_NIax0_6_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
    assertEquals(0, marketSummary.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_marketSummaryIntervalZero_NIax0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
    assertEquals(0, marketSummary.getTopGainers().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_marketSummaryIntervalZero_NIax0_8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
    assertEquals(0, marketSummary.getTopLosers().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_null_icwl0_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(null);
      assertTrue(orderDataBeans.isEmpty());
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_empty_ZhnM1_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders("");
      assertTrue(orderDataBeans.isEmpty());
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_nonExistent_jrGY3_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders("nonExistentUser");
      assertTrue(orderDataBeans.isEmpty());
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_noOrders_nyhF4_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders("userWithNoOrders");
      assertTrue(orderDataBeans.isEmpty());
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_veTX1_1_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("invalidUserID");
    assertNotNull(holdingDataBeans);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wnXK0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("user1", accountProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wnXK0_3_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("password1", accountProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wnXK0_4_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("fullName1", accountProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wnXK0_5_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("address1", accountProfileData.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wnXK0_6_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("email1", accountProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetConnPublic_MngA0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = tradeDirect.getConnPublic();
    assertEquals(conn.getClass(), Connection.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Synch_qpgh0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
    assertNotNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch_razh1_1_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.ASYNCH);
    assertNotNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_kkQz0_1_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getUserID(), updatedAccountProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_kkQz0_3_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getFullName(), updatedAccountProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_kkQz0_4_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getAddress(), updatedAccountProfileData.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_kkQz0_5_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getEmail(), updatedAccountProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_kkQz0_6_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getCreditCard(), updatedAccountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_TMOC0_1_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders("user1");
    OrderDataBean orderData = orderDataBeans.iterator().next();
    assertNotNull(orderDataBeans);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_TMOC0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders("user1");
    OrderDataBean orderData = orderDataBeans.iterator().next();
    assertEquals(1, orderDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUserID_OGJA1_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders("invalidUserID");
    assertEquals(0, orderDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_toNB0_1_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_toNB0_7_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullAccount_lvHW5_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertEquals("userID", accountProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullAccount_lvHW5_3_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertNull(accountProfileData.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullAccount_lvHW5_4_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertNotNull(accountProfileData.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullAccount_lvHW5_5_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertNotNull(accountProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullAccount_lvHW5_6_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertNotNull(accountProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullAccount_lvHW5_7_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertNotNull(accountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullAccount_lvHW5_8_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertNotNull(accountProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_fprg0_APJu0_1_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    for (QuoteDataBean quote : quotes) {
    }
    assertNotNull(quotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_fprg0_APJu0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    for (QuoteDataBean quote : quotes) {
    }
    assertEquals(10, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_pNyj0_qlBs0_8_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getAccount(), result.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_pNyj0_qlBs0_9() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getHolding(), result.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_pNyj0_qlBs0_10() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getQuote(), result.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_NZUv1_qbcy0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_NZUv1_qbcy0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getOrderID(), result.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_NZUv1_qbcy0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getOrderStatus(), result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_NZUv1_qbcy0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_NZUv1_qbcy0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getQuantity(), result.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_NZUv1_qbcy0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getPrice(), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_NZUv1_qbcy0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getOrderFee(), result.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_NZUv1_qbcy0_8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getAccount(), result.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_NZUv1_qbcy0_9() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getHolding(), result.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_NZUv1_qbcy0_10() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setSymbol("GOOG");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setOrderFee(new BigDecimal(10.0));
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getQuote(), result.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_JOyJ0_rIaP0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertEquals("userID", accountProfileData.getAccount().getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_gFLc0_niOq0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100));
    orderData.setQuantity(10);
    orderData.setOrderFee(new BigDecimal(1));
    orderData.setSymbol("ABC");
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getOrderID(), result.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_gFLc0_niOq0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100));
    orderData.setQuantity(10);
    orderData.setOrderFee(new BigDecimal(1));
    orderData.setSymbol("ABC");
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getOrderType(), result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_gFLc0_niOq0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100));
    orderData.setQuantity(10);
    orderData.setOrderFee(new BigDecimal(1));
    orderData.setSymbol("ABC");
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getOrderStatus(), result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_gFLc0_niOq0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100));
    orderData.setQuantity(10);
    orderData.setOrderFee(new BigDecimal(1));
    orderData.setSymbol("ABC");
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getPrice(), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_gFLc0_niOq0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100));
    orderData.setQuantity(10);
    orderData.setOrderFee(new BigDecimal(1));
    orderData.setSymbol("ABC");
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getQuantity(), result.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_gFLc0_niOq0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100));
    orderData.setQuantity(10);
    orderData.setOrderFee(new BigDecimal(1));
    orderData.setSymbol("ABC");
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getOrderFee(), result.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_gFLc0_niOq0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100));
    orderData.setQuantity(10);
    orderData.setOrderFee(new BigDecimal(1));
    orderData.setSymbol("ABC");
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_gFLc0_niOq0_8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100));
    orderData.setQuantity(10);
    orderData.setOrderFee(new BigDecimal(1));
    orderData.setSymbol("ABC");
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getOpenDate(), result.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_gFLc0_niOq0_9() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100));
    orderData.setQuantity(10);
    orderData.setOrderFee(new BigDecimal(1));
    orderData.setSymbol("ABC");
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getCompletionDate(), result.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_gFLc0_niOq0_10() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100));
    orderData.setQuantity(10);
    orderData.setOrderFee(new BigDecimal(1));
    orderData.setSymbol("ABC");
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getAccount(), result.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_gFLc0_niOq0_11() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100));
    orderData.setQuantity(10);
    orderData.setOrderFee(new BigDecimal(1));
    orderData.setSymbol("ABC");
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getHolding(), result.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_buy_gFLc0_niOq0_12() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100));
    orderData.setQuantity(10);
    orderData.setOrderFee(new BigDecimal(1));
    orderData.setSymbol("ABC");
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    orderData.setQuote(new QuoteDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getQuote(), result.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_FULh4_fMGm0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.createQuote("", "Company ABC", new BigDecimal(10.0));
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Symbol cannot be empty", e.getMessage());
    } catch (Exception e) {
      fail("Expected IllegalArgumentException");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_WUju0_USuO0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      QuoteDataBean quoteData = tradeDirect.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
      assertNotNull(quoteData);
      assertEquals("ABC", quoteData.getSymbol());
      assertEquals("Company ABC", quoteData.getCompanyName());
      assertEquals(new BigDecimal(10.0), quoteData.getPrice());
      assertEquals(new BigDecimal(10.0), quoteData.getOpen());
      assertEquals(new BigDecimal(10.0), quoteData.getLow());
      assertEquals(new BigDecimal(10.0), quoteData.getHigh());
      assertEquals(0.0, quoteData.getChange(), 0.0);
      assertEquals(0.0, quoteData.getVolume(), 0.0);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sell_holdingID_null_VptA3_awkG0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "user1";
    Integer holdingID = null;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
      assertEquals("cancelled", orderData.getOrderStatus());
    } catch (Exception e) {
      assertEquals("holdingID cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeIntInvalidSymbol_cDhc1_nlCO0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = new QuoteDataBean();
    quoteData.setSymbol("XYZ");
    quoteData.setPrice(new BigDecimal("100.00"));
    quoteData.setOpen(new BigDecimal("90.00"));
    quoteData.setVolume(1000.0);
    BigDecimal changeFactor = new BigDecimal("1.10");
    double sharesTraded = 100.0;
    boolean publishQuotePriceChange = true;
    try {
      tradeDirect.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid symbol", e.getMessage());
    } catch (Exception e) {
      fail("Expected IllegalArgumentException");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeIntInvalidChangeFactor_UzMZ2_RAEz0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = new QuoteDataBean();
    quoteData.setSymbol("ABC");
    quoteData.setPrice(new BigDecimal("100.00"));
    quoteData.setOpen(new BigDecimal("90.00"));
    quoteData.setVolume(1000.0);
    BigDecimal changeFactor = new BigDecimal("0.00");
    double sharesTraded = 100.0;
    boolean publishQuotePriceChange = true;
    try {
      tradeDirect.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid change factor", e.getMessage());
    } catch (Exception e) {
      fail("Expected IllegalArgumentException");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_enje0_tXme0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "123 Main St";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountData = null;
    try {
      accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
    } catch (Exception e) {
      e.printStackTrace();
    }
    assertNotNull(accountData);
    assertEquals(userID, accountData.getProfileID());
    assertEquals(openBalance, accountData.getOpenBalance());
    assertEquals(0, accountData.getLoginCount());
    assertEquals(0, accountData.getLogoutCount());
    assertNotNull(accountData.getCreationDate());
    assertNotNull(accountData.getLastLogin());
    assertEquals(openBalance, accountData.getBalance());
    assertNotNull(accountData.getProfile());
    assertEquals(userID, accountData.getProfile().getUserID());
    assertEquals(password, accountData.getProfile().getPassword());
    assertEquals(fullname, accountData.getProfile().getFullName());
    assertEquals(address, accountData.getProfile().getAddress());
    assertEquals(email, accountData.getProfile().getEmail());
    assertEquals(creditcard, accountData.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary() throws Exception {
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    MarketSummaryDataBean marketSummaryDataBean = tradedirect.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertEquals(cachedMSDB, marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_Success_rIUW0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.completeOrder(1, true);
    assertNotNull(orderData);
    assertEquals(1, orderData.getOrderID());
    assertEquals("COMPLETE", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithEmptyResultSet_izOs1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    assertNotNull(quotes);
    assertEquals(0, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_marketSummaryIntervalZero_NIax0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
    assertNotNull(marketSummary);
    assertEquals(0, marketSummary.getOpenTSIA().intValue());
    assertEquals(0, marketSummary.getGainPercent().intValue());
    assertEquals(0, marketSummary.getSummaryDate().getTime());
    assertEquals(0, marketSummary.getTSIA().intValue());
    assertEquals(0, marketSummary.getVolume(), 0.0);
    assertEquals(0, marketSummary.getTopGainers().size());
    assertEquals(0, marketSummary.getTopLosers().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wnXK0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNotNull(accountProfileData);
    assertEquals("user1", accountProfileData.getUserID());
    assertEquals("password1", accountProfileData.getPassword());
    assertEquals("fullName1", accountProfileData.getFullName());
    assertEquals("address1", accountProfileData.getAddress());
    assertEquals("email1", accountProfileData.getEmail());
    assertEquals("creditCard1", accountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetConnPublic_MngA0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = tradeDirect.getConnPublic();
    assertNotNull(conn);
    assertEquals(conn.getClass(), Connection.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch_razh1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.ASYNCH);
    assertNotNull(orderData);
    assertEquals("sold", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch2Phase_nYOT2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.ASYNCH_2PHASE);
    assertNotNull(orderData);
    assertEquals("sold", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_kkQz0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getUserID(), updatedAccountProfileData.getUserID());
    assertEquals(accountProfileData.getPassword(), updatedAccountProfileData.getPassword());
    assertEquals(accountProfileData.getFullName(), updatedAccountProfileData.getFullName());
    assertEquals(accountProfileData.getAddress(), updatedAccountProfileData.getAddress());
    assertEquals(accountProfileData.getEmail(), updatedAccountProfileData.getEmail());
    assertEquals(accountProfileData.getCreditCard(), updatedAccountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_TMOC0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders("user1");
    assertNotNull(orderDataBeans);
    assertEquals(1, orderDataBeans.size());
    OrderDataBean orderData = orderDataBeans.iterator().next();
    assertEquals("completed", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_toNB0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
    assertEquals(quoteDataBean.getPrice().multiply(changeFactor), updatedQuoteDataBean.getPrice());
    assertEquals(quoteDataBean.getOpen().multiply(changeFactor), updatedQuoteDataBean.getOpen());
    assertEquals(quoteDataBean.getLow().multiply(changeFactor), updatedQuoteDataBean.getLow());
    assertEquals(quoteDataBean.getHigh().multiply(changeFactor), updatedQuoteDataBean.getHigh());
    assertEquals(quoteDataBean.getVolume() + sharesTraded, updatedQuoteDataBean.getVolume());
    assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullAccount_lvHW5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertNotNull(accountProfileData);
    assertEquals("userID", accountProfileData.getUserID());
    assertNull(accountProfileData.getAccount());
    assertNotNull(accountProfileData.getAddress());
    assertNotNull(accountProfileData.getPassword());
    assertNotNull(accountProfileData.getFullName());
    assertNotNull(accountProfileData.getCreditCard());
    assertNotNull(accountProfileData.getEmail());
  }
}