/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.jms.ConnectionFactory;
import javax.jms.Queue;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2MDBQueue_Test_Passing {
  private static String initTime;
  private static int hitCount;
  private ConnectionFactory queueConnectionFactory;
  private Queue tradeBrokerQueue;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_CAJm0() {
    PingServlet2MDBQueue pingServlet2MDBQueue = new PingServlet2MDBQueue();
    String servletInfo = pingServlet2MDBQueue.getServletInfo();
    assertEquals("web primitive, configured with trade runtime configs, tests Servlet to Session EJB path", servletInfo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_jQpf0_LIpU0() throws ServletException, IOException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doPost(req, res);
    verify(req).getParameter("message");
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullMessage_STGe2_fDQa0() throws ServletException, IOException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("message")).thenReturn(null);
    servlet.doPost(req, res);
    verify(req).getParameter("message");
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_aJVn0_NKbd0() throws IOException, ServletException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
    verify(res).sendError(500, "PingServlet2MDBQueue.doGet(...): error, " + "Exception message");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithValidMessage_EsfN4_LSQJ0() throws ServletException, IOException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("message")).thenReturn("Hello, World!");
    servlet.doPost(req, res);
    verify(req).getParameter("message");
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithInvalidMessage_KHsY1_tfvO0() throws ServletException, IOException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("message")).thenReturn("invalid message");
    servlet.doPost(req, res);
    verify(req).getParameter("message");
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithEmptyMessage_yHPU3_Duwp0() throws ServletException, IOException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("message")).thenReturn("");
    servlet.doPost(req, res);
    verify(req).getParameter("message");
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithInvalidParameters_KjOW4_tuhC0() throws IOException, ServletException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("command")).thenReturn("invalid");
    when(req.getParameter("publishTime")).thenReturn("invalid");
    when(req.getParameter("message")).thenReturn("invalid");
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
    verify(res).sendError(500, "PingServlet2MDBQueue.doGet(...): error, " + "invalid");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithException_EdPM1_PHkn0() throws IOException, ServletException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("command")).thenReturn("ping");
    when(req.getParameter("publishTime")).thenReturn("1234567890");
    when(req.getParameter("message")).thenReturn("Ping message for queue java:comp/env/jms/TradeBrokerQueue sent from PingServlet2MDBQueue at " + new java.util.Date());
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
    verify(res).sendError(500, "PingServlet2MDBQueue.doGet(...): error, " + "Exception");
  }
}