/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.sql.DatabaseMetaData;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeDirectDBUtils_Coverage_Test_Failing {
  private DatabaseMetaData databaseMetaData;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testParseDDLToBuffer_MvCi0_1() throws Exception {
    TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
    InputStream ddlFile = getClass().getResourceAsStream("ddl.txt");
    Object[] result = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
    for (Object obj : result) {
    }
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testParseDDLToBuffer_MvCi0_2() throws Exception {
    TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
    InputStream ddlFile = getClass().getResourceAsStream("ddl.txt");
    Object[] result = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
    for (Object obj : result) {
    }
    assertTrue(result.length > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testParseDDLToBufferWithEmptyFile_sUba1_1() throws Exception {
    TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
    InputStream ddlFile = getClass().getResourceAsStream("empty.txt");
    Object[] result = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testParseDDLToBufferWithEmptyFile_sUba1_2() throws Exception {
    TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
    InputStream ddlFile = getClass().getResourceAsStream("empty.txt");
    Object[] result = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
    assertEquals(0, result.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testParseDDLToBufferWithNullFile_fTiR2() throws Exception {
    TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
    InputStream ddlFile = null;
    try {
      tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
      fail("Expected IOException");
    } catch (IOException ex) {
      assertTrue(ex.getMessage().contains("ddlFile is null"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testParseDDLToBufferWithIOException_Bvgr3() throws Exception {
    TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
    InputStream ddlFile = getClass().getResourceAsStream("ddl.txt");
    BufferedReader br = new BufferedReader(new InputStreamReader(ddlFile));
    try {
      br.close();
    } catch (IOException ex) {
      fail("Expected IOException");
    }
    try {
      tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
      fail("Expected IOException");
    } catch (IOException ex) {
      assertTrue(ex.getMessage().contains("Failed to read from BufferedReader"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testParseDDLToBufferWithInvalidDDL_flyw4() throws Exception {
    TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
    InputStream ddlFile = getClass().getResourceAsStream("invalid_ddl.txt");
    try {
      tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
      fail("Expected Exception");
    } catch (Exception ex) {
      assertTrue(ex.getMessage().contains("Invalid DDL statement"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testParseDDLToBufferWithValidDDL_ROxx5_1() throws Exception {
    TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
    InputStream ddlFile = getClass().getResourceAsStream("valid_ddl.txt");
    Object[] result = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testParseDDLToBufferWithValidDDL_ROxx5_2() throws Exception {
    TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
    InputStream ddlFile = getClass().getResourceAsStream("valid_ddl.txt");
    Object[] result = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
    assertEquals(1, result.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testParseDDLToBufferWithValidDDL_ROxx5_3() throws Exception {
    TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
    InputStream ddlFile = getClass().getResourceAsStream("valid_ddl.txt");
    Object[] result = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
    assertTrue(result[0] instanceof String);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testParseDDLToBufferWithValidDDL_ROxx5_4() throws Exception {
    TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
    InputStream ddlFile = getClass().getResourceAsStream("valid_ddl.txt");
    Object[] result = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
    assertEquals("CREATE TABLE IF NOT EXISTS trade (\n" +
        "  id int(11) NOT NULL AUTO_INCREMENT,\n" +
        "  symbol varchar(255) NOT NULL,\n" +
        "  price decimal(19, 4) NOT NULL,\n" +
        "  quantity int(11) NOT NULL,\n" +
        "  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n" +
        "  PRIMARY KEY (id)\n" +
        ");", result[0]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testParseDDLToBuffer_MvCi0() throws Exception {
    TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
    InputStream ddlFile = getClass().getResourceAsStream("ddl.txt");
    Object[] result = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
    assertNotNull(result);
    assertTrue(result.length > 0);
    for (Object obj : result) {
      assertTrue(obj instanceof String);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testParseDDLToBufferWithEmptyFile_sUba1() throws Exception {
    TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
    InputStream ddlFile = getClass().getResourceAsStream("empty.txt");
    Object[] result = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
    assertNotNull(result);
    assertEquals(0, result.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testParseDDLToBufferWithValidDDL_ROxx5() throws Exception {
    TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
    InputStream ddlFile = getClass().getResourceAsStream("valid_ddl.txt");
    Object[] result = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
    assertNotNull(result);
    assertEquals(1, result.length);
    assertTrue(result[0] instanceof String);
    assertEquals("CREATE TABLE IF NOT EXISTS trade (\n" +
        "  id int(11) NOT NULL AUTO_INCREMENT,\n" +
        "  symbol varchar(255) NOT NULL,\n" +
        "  price decimal(19, 4) NOT NULL,\n" +
        "  quantity int(11) NOT NULL,\n" +
        "  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n" +
        "  PRIMARY KEY (id)\n" +
        ");", result[0]);
  }
}