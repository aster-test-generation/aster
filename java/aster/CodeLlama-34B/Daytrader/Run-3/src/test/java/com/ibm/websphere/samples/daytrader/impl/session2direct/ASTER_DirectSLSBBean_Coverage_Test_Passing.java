/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_DirectSLSBBean_Coverage_Test_Passing {
  private TradeDirect tradeDirect;
  private DirectSLSBBean directSLSBBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_qKCJ0() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    assertThrows(UnsupportedOperationException.class, () -> directSLSBBean.investmentReturn(1.0, 2.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_exception_dMha2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.queueOrder(null, true);
      fail("Expected exception not thrown");
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseValidSymbolMockedQuoteDataBean_djIJ7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean mockQuoteDataBean = mock(QuoteDataBean.class);
    when(mockQuoteDataBean.getSymbol()).thenReturn("symbol");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImpl_tRDg0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    int actual = directSLSBBean.getImpl();
    assertEquals(TradeConfig.SESSION_TO_DIRECT, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_buy_ohvh1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    when(tradeDirect.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH)).thenReturn(mock(OrderDataBean.class));
    directSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
    assertNotNull(tradeDirect.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_grwY1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.createQuote("", "companyName", new BigDecimal(10.0));
    } catch (Exception e) {
      assertFalse(e instanceof IllegalArgumentException);
    }
  }
}