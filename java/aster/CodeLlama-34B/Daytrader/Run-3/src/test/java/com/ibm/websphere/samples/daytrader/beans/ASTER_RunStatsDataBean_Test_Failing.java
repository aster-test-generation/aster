/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RunStatsDataBean_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeUserCountWithDifferentInputs_oGen1_1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeUserCount = runStatsDataBean.getTradeUserCount();
    runStatsDataBean.setTradeUserCount(120);
    tradeUserCount = runStatsDataBean.getTradeUserCount();
    runStatsDataBean.setTradeUserCount(220);
    tradeUserCount = runStatsDataBean.getTradeUserCount();
    assertEquals(20, tradeUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCountWithNegativeValue_LxHJ1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = -1 - 10;
    runStatsDataBean.setSumLoginCount(sumLoginCount);
    assertEquals(-10, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCountWithNegativeValue_YrqN1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sellOrderCount = -1 - 10;
    runStatsDataBean.setSellOrderCount(sellOrderCount);
    assertEquals(-10, runStatsDataBean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeStockCountWithNegativeValue_ZBWm1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeStockCount = -1 - 10;
    runStatsDataBean.setTradeStockCount(tradeStockCount);
    assertEquals(-10, runStatsDataBean.getTradeStockCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_negative_BsJl1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int cancelledOrderCount = -1 - 10;
    runStatsDataBean.setCancelledOrderCount(cancelledOrderCount);
    assertEquals(-10, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumLogoutCountWithNegativeValue_hzNn2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSumLogoutCount(-1 - 10);
    int sumLogoutCount = runStatsDataBean.getSumLogoutCount();
    assertEquals(-10, sumLogoutCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumLogoutCountWithNonMultipleOfSizeValue_Kdwg6() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSumLogoutCount(110);
    int sumLogoutCount = runStatsDataBean.getSumLogoutCount();
    assertEquals(10, sumLogoutCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNewUserCountWithNegativeValue_xqfb1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int newUserCount = -1 - 10;
    runStatsDataBean.setNewUserCount(newUserCount);
    assertEquals(-10, runStatsDataBean.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCountWithNegativeValue_LxHJ1_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = -10;
    runStatsDataBean.setSumLoginCount(sumLoginCount);
    assertEquals(0, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenOrderCountWithNegativeValue_LUQu1_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOpenOrderCount(-1);
    assertEquals(0, runStatsDataBean.getOpenOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCountWithNegativeValue_YrqN1_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sellOrderCount = -10;
    runStatsDataBean.setSellOrderCount(sellOrderCount);
    assertEquals(0, runStatsDataBean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCountWithInvalidValue_IHhw4_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sellOrderCount = -1;
    runStatsDataBean.setSellOrderCount(sellOrderCount);
    assertEquals(0, runStatsDataBean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeStockCountWithNegativeValue_ZBWm1_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeStockCount = -10;
    runStatsDataBean.setTradeStockCount(tradeStockCount);
    assertEquals(0, runStatsDataBean.getTradeStockCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_negative_BsJl1_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int cancelledOrderCount = -10;
    runStatsDataBean.setCancelledOrderCount(cancelledOrderCount);
    assertEquals(0, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeUserCount_invalidInput_gDnk1_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeUserCount = -1;
    runStatsDataBean.setTradeUserCount(tradeUserCount);
    assertEquals(0, runStatsDataBean.getTradeUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeUserCount_negativeInput_wQdD6_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeUserCount = -10;
    runStatsDataBean.setTradeUserCount(tradeUserCount);
    assertEquals(0, runStatsDataBean.getTradeUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumLogoutCountWithNegativeValue_hzNn2_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSumLogoutCount(-10);
    int sumLogoutCount = runStatsDataBean.getSumLogoutCount();
    assertEquals(0, sumLogoutCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumLogoutCountWithNonMultipleOfSizeValue_Kdwg6_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSumLogoutCount(10);
    int sumLogoutCount = runStatsDataBean.getSumLogoutCount();
    assertEquals(0, sumLogoutCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNewUserCountWithNegativeValue_xqfb1_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int newUserCount = -10;
    runStatsDataBean.setNewUserCount(newUserCount);
    assertEquals(0, runStatsDataBean.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNewUserCountWithMinValue_OtIu9_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int newUserCount = Integer.MIN_VALUE;
    runStatsDataBean.setNewUserCount(newUserCount);
    assertEquals(0, runStatsDataBean.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeUserCountWithDifferentInputs_oGen1_1_fid3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeUserCount = runStatsDataBean.getTradeUserCount();
    runStatsDataBean.setTradeUserCount(10);
    tradeUserCount = runStatsDataBean.getTradeUserCount();
    runStatsDataBean.setTradeUserCount(20);
    tradeUserCount = runStatsDataBean.getTradeUserCount();
    assertEquals(0, tradeUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeUserCountWithDifferentInputs_oGen1_2_fid3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeUserCount = runStatsDataBean.getTradeUserCount();
    runStatsDataBean.setTradeUserCount(10);
    tradeUserCount = runStatsDataBean.getTradeUserCount();
    runStatsDataBean.setTradeUserCount(20);
    tradeUserCount = runStatsDataBean.getTradeUserCount();
    assertEquals(10, tradeUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenOrderCountWithOpenOrders_Yreu1_MaCH0_fid3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setNewUserCount(1);
    int openOrderCount = runStatsDataBean.getOpenOrderCount();
    assertEquals(1, openOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingCountWithNullValue_pOrF5_vDvU0_fid3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setHoldingCount(0);
    assertNull(runStatsDataBean.getHoldingCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenOrderCountWithMultipleOpenOrders_Fukw2_UblG0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setNewUserCount(2);
    int openOrderCount = runStatsDataBean.getOpenOrderCount();
    assertEquals(2, openOrderCount);
  }
}