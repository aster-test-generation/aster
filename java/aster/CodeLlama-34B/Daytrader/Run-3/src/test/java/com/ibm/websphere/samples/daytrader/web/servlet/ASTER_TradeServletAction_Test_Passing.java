/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeServletAction_Test_Passing {
  private TradeServices tAction;
  private TradeServices services;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoHome_UWRM0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "test_user";
    String results = "test_results";
    tradeServletAction.doHome(ctx, req, resp, userID, results);
    verify(ctx).setAttribute("accountData", any(AccountDataBean.class));
    verify(ctx).setAttribute("holdingDataBeans", any(Collection.class));
    verify(ctx).setAttribute("results", results);
    verify(req).setAttribute("results", results);
    verify(req).setAttribute("userID", userID);
    verify(resp).setStatus(HttpServletResponse.SC_OK);
    verify(resp).setContentType("text/html");
    verify(resp).getWriter();
    verify(resp).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoSell_Exception_MQKX1() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    Integer holdingID = 1;
    try {
      tradeServletAction.doSell(ctx, req, resp, userID, holdingID);
      fail("Expected Exception");
    } catch (Exception e) {
      assertEquals("TradeServletAction.doSell(...) exception selling holding 1 for user =testUser", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogoutWithException_bbcy2_fid1() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    when(req.getAttribute("TSS-RecreateSessionInLogout")).thenReturn(Boolean.FALSE);
    try {
      tradeServletAction.doLogout(ctx, req, resp, userID);
      fail("Expected Exception");
    } catch (Exception e) {
      assertEquals("TradeServletAction.doLogout(...)exception logging out user testUser", e.getMessage());
    }
  }
}