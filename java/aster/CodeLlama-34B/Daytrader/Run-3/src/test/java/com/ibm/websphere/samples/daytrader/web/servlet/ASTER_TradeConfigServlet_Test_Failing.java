/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirectDBUtils;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigServlet_Test_Failing {
  private TradeDirectDBUtils dbUtils;
  private HttpServletRequest request;
  @Mock
  private HttpServletResponse response;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullConfig_eChi1() throws ServletException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.init(null);
    assertNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testService_actionInvalid_RQwC5() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("invalid");
    servlet.service(req, resp);
    verify(resp).sendError(500, "TradeConfigServlet.service(...)" + "Exception trying to perform action=invalid\nException details: " + "Invalid action");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testService_exception_UbgD6() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenThrow(new IOException("Exception"));
    servlet.service(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_RuntimeMode_CYUS0() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("RuntimeMode")).thenReturn("DEV");
    servlet.doConfigUpdate(request, response);
    assertEquals("DEV", TradeConfig.getRunTimeModeNames()[TradeConfig.getRunTimeMode()]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_OrderProcessingMode_OXLO1() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("OrderProcessingMode")).thenReturn("1");
    servlet.doConfigUpdate(request, response);
    assertEquals("MARKET_CLOSED", TradeConfig.getOrderProcessingModeNames()[TradeConfig.getOrderProcessingMode()]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_WebInterface_ujVF2() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("WebInterface")).thenReturn("1");
    servlet.doConfigUpdate(request, response);
    assertEquals("JSP", TradeConfig.getWebInterfaceNames()[TradeConfig.getWebInterface()]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_MaxUsers_SMpc3() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("MaxUsers")).thenReturn("100");
    servlet.doConfigUpdate(request, response);
    assertEquals(100, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_MaxQuotes_XYMG4() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("MaxQuotes")).thenReturn("100");
    servlet.doConfigUpdate(request, response);
    assertEquals(100, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_MarketSummaryInterval_UNlT5() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("marketSummaryInterval")).thenReturn("100");
    servlet.doConfigUpdate(request, response);
    assertEquals(100, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_PrimIterations_vPxc6() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("primIterations")).thenReturn("100");
    servlet.doConfigUpdate(request, response);
    assertEquals(100, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_PublishQuotePriceChange_idLb7() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    servlet.doConfigUpdate(request, response);
    assertEquals(true, TradeConfig.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_ListQuotePriceChangeFrequency_VzEd8() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("ListQuotePriceChangeFrequency")).thenReturn("100");
    servlet.doConfigUpdate(request, response);
    assertEquals(100, TradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullServletName_PabM4_eXuM0() throws ServletException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    ServletConfig config = mock(ServletConfig.class);
    servlet.init(config);
    assertNotNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithInvalidConfig_VWDI2_akIJ0() throws ServletException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getServletName()).thenReturn("invalid");
    servlet.init(config);
    assertNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullServletContext_fGCp9_Nnny0() throws ServletException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    ServletConfig config = null;
    servlet.init(config);
    assertNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testService_actionResetTrade_nqWq2_hwEE0() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("resetTrade");
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
    verify(resp).getWriter();
    verify(resp).getWriter().println("<b><br>Current DayTrader Configuration:</br></b>");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullServletName_PabM4_eXuM0_fid3() throws ServletException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    ServletConfig config = mock(ServletConfig.class);
    servlet.init(config);
    assertNull(servlet.getServletConfig());
  }
}