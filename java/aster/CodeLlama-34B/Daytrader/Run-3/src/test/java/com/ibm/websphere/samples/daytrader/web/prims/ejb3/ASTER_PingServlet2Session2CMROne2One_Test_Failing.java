/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2CMROne2One_Test_Failing {
  private static int hitCount;
  private static String initTime;
  private TradeServices tradeSLSBLocal;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_zOoL0() throws ServletException, IOException {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doPost(req, res);
    verify(req).getParameter("param1");
    verify(req).getParameter("param2");
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).getWriter().print("Hello, World!");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_ZjXR0() {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    String expected = "web primitive, tests Servlet to Entity EJB path";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithNull_uulD1() {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    String expected = null;
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithEmptyString_bnzQ2() {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    String expected = "";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithInvalidString_bkKi3() {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    String expected = "invalid";
    String actual = servlet.getServletInfo();
    assertNotEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithNullServlet_JdAI5() {
    PingServlet2Session2CMROne2One servlet = null;
    String expected = null;
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_vgXH0() throws IOException, ServletException {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
    verify(req).getParameter("userID");
    verify(req).getParameter("iter");
    verify(req).getParameter("hitCount");
    verify(req).getParameter("initTime");
    verify(req).getParameter("accountProfileData");
    verify(req).getParameter("output");
    verify(req).getParameter("userID");
    verify(req).getParameter("iter");
    verify(req).getParameter("hitCount");
    verify(req).getParameter("initTime");
    verify(req).getParameter("accountProfileData");
    verify(req).getParameter("output");
    verify(res).sendError(500, "PingServlet2Session2CMROne2One.doGet(...): error");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithException_TIqT1() throws IOException, ServletException {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("userID")).thenThrow(new ServletException("Error"));
    servlet.doGet(req, res);
    verify(res).sendError(500, "PingServlet2Session2CMROne2One.doGet(...): error");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullUserID_ELVp2() throws IOException, ServletException {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("userID")).thenReturn(null);
    servlet.doGet(req, res);
    verify(res).sendError(500, "PingServlet2Session2CMROne2One.doGet(...): error");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullIter_wELN3() throws IOException, ServletException {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("iter")).thenReturn(null);
    servlet.doGet(req, res);
    verify(res).sendError(500, "PingServlet2Session2CMROne2One.doGet(...): error");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullHitCount_kxHJ4() throws IOException, ServletException {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("hitCount")).thenReturn(null);
    servlet.doGet(req, res);
    verify(res).sendError(500, "PingServlet2Session2CMROne2One.doGet(...): error");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithNull_uulD1_fid1() {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    String expected = "PingServlet2Session2CMROne2One";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithNullServlet_JdAI5_fid1() {
    PingServlet2Session2CMROne2One servlet = null;
    String expected = "";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithInvalidServlet_dpWF6_fid1() {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    String expected = "invalid";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullIter_wELN3_fid1() throws IOException, ServletException {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("iter")).thenReturn(null);
    servlet.doGet(req, res);
    verify(res).sendError(500, "PingServlet2Session2CMROne2One.doGet(...): error");
    // Fix the assertion
    assertEquals(500, res.getStatus());
  }
}