/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Passing {
  private AccountProfileDataBean profile;
  @Mock
  private AccountDataBean account;
  private OrderDataBean orderDataBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_Wyly0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 1000.0;
    double netValue = 1100.0;
    double expectedIR = 0.1;
    double actualIR = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(expectedIR, actualIR, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnWithNegativeInvestment_OUWq4() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = -1000.0;
    double netValue = 1100.0;
    double expectedIR = -2.1;
    double actualIR = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(expectedIR, actualIR, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnWithNegativeNetValue_wRYm5() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 1000.0;
    double netValue = -1100.0;
    double expectedIR = -2.1;
    double actualIR = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(expectedIR, actualIR, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithInvalidQuery_wJRc2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImpl_dqui0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    int result = tradeSLSBBean.getImpl();
    assertEquals(TradeConfig.EJB3, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_userID_exception_euRe2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      tradeSLSBBean.getClosedOrders("user1");
      fail("Expected EJBException");
    } catch (EJBException e) {
      assertEquals("TradeSLSBBean.getClosedOrders - error", e.getMessage());
    }
  }
}