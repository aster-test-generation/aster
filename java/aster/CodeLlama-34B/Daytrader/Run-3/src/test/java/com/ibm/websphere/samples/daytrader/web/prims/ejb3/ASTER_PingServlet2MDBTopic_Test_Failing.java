/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2MDBTopic_Test_Failing {
  private static String initTime;
  private static int hitCount;
  private HttpServletRequest request;
  @Mock
  private HttpServletResponse response;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_VVwb0() throws Exception {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    servlet.doPost(request, response);
    Mockito.verify(request).getParameter("message");
    Mockito.verify(response).setStatus(HttpServletResponse.SC_OK);
    Mockito.verify(response).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_withMessage_bKyf1() throws Exception {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    Mockito.when(request.getParameter("message")).thenReturn("Hello, World!");
    servlet.doPost(request, response);
    Mockito.verify(request).getParameter("message");
    Mockito.verify(response).setStatus(HttpServletResponse.SC_OK);
    Mockito.verify(response).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_withError_CYHb2() throws Exception {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    Mockito.when(request.getParameter("message")).thenReturn("Hello, World!");
    Mockito.when(response.getWriter()).thenThrow(new IOException());
    servlet.doPost(request, response);
    Mockito.verify(request).getParameter("message");
    Mockito.verify(response).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    Mockito.verify(response).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_rGbU0() {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    String expected = "web primitive, configured with trade runtime configs, tests Servlet to Session EJB path";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithNull_PQMx1() {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    String expected = "PingServlet2MDBTopic";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SOQR0() throws IOException, ServletException {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
    verify(res).sendError(500, "PingServlet2MDBTopic.doGet(...): error");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithException_ICLx1() throws IOException, ServletException {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("command")).thenReturn("ping");
    when(req.getParameter("publishTime")).thenReturn("1234567890");
    when(req.getParameter("message")).thenReturn("Ping message for topic java:comp/env/jms/TradeStreamerTopic sent from PingServlet2MDBTopic at " + new java.util.Date());
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
    verify(res).sendError(500, "PingServlet2MDBTopic.doGet(...): error");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithNull_PQMx1_fid1() {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    String expected = null;
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithEmptyString_GVxs2_fid1() {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    String expected = "";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }
}