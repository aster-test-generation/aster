/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TimerStat_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMax_NegativeValue_bLdw1() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(-100.0);
    assertEquals(0.0, timerStat.getMax(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMinNegative_typN1() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(-10.0);
    assertEquals(0.0, timerStat.getMin(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCount_invalidCount_CKqg1() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(-1);
    assertEquals(0, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCount_invalidCount_negative_OiNC7() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(-10);
    assertEquals(0, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMin_1_Fhdc0() {
    TimerStat timerStat = new TimerStat();
    double min = timerStat.getMin();
    assertEquals(0.0, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinSecs_1_JxJD0() {
    TimerStat timerStat = new TimerStat();
    double minSecs = timerStat.getMinSecs();
    assertEquals(0.0, minSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinSecs_9_BhnO8_KJZF0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(1000000000);
    double minSecs = timerStat.getMinSecs();
    assertEquals(10000000.0, minSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCount_invalidCount_negative_OiNC7_fid2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(-1 - 10);
    assertEquals(-10, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinSecs_9_BhnO8_KJZF0_fid2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(1000000000);
    double minSecs = timerStat.getMinSecs();
    assertEquals(1000000000.0, minSecs, 0.0);
  }
}