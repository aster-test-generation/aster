/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TimerStat_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMax_ValidValue_gbAk0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(100.0);
    assertEquals(100.0, timerStat.getMax(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMax_GreaterThanCurrentMax_ZCDk2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(100.0);
    timerStat.setMax(200.0);
    assertEquals(200.0, timerStat.getMax(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMinValid_jmvu0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(10.0);
    assertEquals(10.0, timerStat.getMin(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMinGreaterThanMax_yAhq2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(1000.0);
    assertEquals(1000.0, timerStat.getMin(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMax_empty_ZbCM0() {
    TimerStat timerStat = new TimerStat();
    double max = timerStat.getMax();
    assertEquals(0.0, max, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalTimePositive_qHgh0() {
    TimerStat timerStat = new TimerStat();
    double totalTime = 10.0;
    timerStat.setTotalTime(totalTime);
    assertEquals(totalTime, timerStat.getTotalTime(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalTimeNegative_UCVP1() {
    TimerStat timerStat = new TimerStat();
    double totalTime = -10.0;
    timerStat.setTotalTime(totalTime);
    assertEquals(totalTime, timerStat.getTotalTime(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalTimeZero_ZfGB2() {
    TimerStat timerStat = new TimerStat();
    double totalTime = 0.0;
    timerStat.setTotalTime(totalTime);
    assertEquals(totalTime, timerStat.getTotalTime(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCount_validCount_jQYJ0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(10);
    assertEquals(10, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCount_zeroCount_Bbxc3() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(0);
    assertEquals(0, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCount_maxCount_wqRE4() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCount_minCount_atjM5() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCount_randomCount_ZXMw6() {
    TimerStat timerStat = new TimerStat();
    int randomCount = (int) (Math.random() * 100);
    timerStat.setCount(randomCount);
    assertEquals(randomCount, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMin_2_JZSo1() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(10.0);
    double min = timerStat.getMin();
    assertEquals(10.0, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMin_3_Dill2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(0.0);
    double min = timerStat.getMin();
    assertEquals(0.0, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMin_4_nktd3() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(-10.0);
    double min = timerStat.getMin();
    assertEquals(-10.0, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMin_5_sbKd4() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(Double.MAX_VALUE);
    double min = timerStat.getMin();
    assertEquals(Double.MAX_VALUE, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMin_6_ezbt5() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(Double.MIN_VALUE);
    double min = timerStat.getMin();
    assertEquals(Double.MIN_VALUE, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMin_7_FKUU6() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(Double.NaN);
    double min = timerStat.getMin();
    assertEquals(Double.NaN, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMin_8_BtEg7() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(Double.NEGATIVE_INFINITY);
    double min = timerStat.getMin();
    assertEquals(Double.NEGATIVE_INFINITY, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMin_9_nZXZ8() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(Double.POSITIVE_INFINITY);
    double min = timerStat.getMin();
    assertEquals(Double.POSITIVE_INFINITY, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalTime_QJjI0() {
    TimerStat timerStat = new TimerStat();
    double totalTime = timerStat.getTotalTime();
    assertEquals(0.0, totalTime, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinSecs_2_LteP1() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(1000);
    double minSecs = timerStat.getMinSecs();
    assertEquals(1.0, minSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinSecs_3_tNxu2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(10000);
    double minSecs = timerStat.getMinSecs();
    assertEquals(10.0, minSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinSecs_4_yPOT3() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(100000);
    double minSecs = timerStat.getMinSecs();
    assertEquals(100.0, minSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinSecs_5_cgjE4() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(1000000);
    double minSecs = timerStat.getMinSecs();
    assertEquals(1000.0, minSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinSecs_6_AtOm5() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(10000000);
    double minSecs = timerStat.getMinSecs();
    assertEquals(10000.0, minSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinSecs_7_TeIH6() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(100000000);
    double minSecs = timerStat.getMinSecs();
    assertEquals(100000.0, minSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinSecs_8_Ambb7() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(1000000000);
    double minSecs = timerStat.getMinSecs();
    assertEquals(1000000.0, minSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCount_1_WDmv0() {
    TimerStat timerStat = new TimerStat();
    int count = timerStat.getCount();
    assertEquals(0, count);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_1_eoPj0() {
    TimerStat timerStat = new TimerStat();
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(0.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_2_lctN1() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(1000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(1.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_3_zmbO2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(10000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(10.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_4_NJOh3() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(100000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(100.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_5_doOL4() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(1000000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(1000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_6_YpSu5() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(10000000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(10000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_7_HOsa6() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(100000000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(100000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_8_leJD7() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(1000000000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(1000000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_9_GBGx8() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(10000000000L);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(10000000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_10_OrvN9() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(100000000000L);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(100000000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_11_uPxz10() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(1000000000000L);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(1000000000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void start_Yeoi0()
  {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMax_NegativeValue_bLdw1_fid2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(-100.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMinNegative_typN1_fid2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(-10.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCount_invalidCount_CKqg1_fid2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(-1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMin_1_Fhdc0_fid2() {
    TimerStat timerStat = new TimerStat();
    double min = timerStat.getMin();
    assertEquals(0.0, min, 1.0E9);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinSecs_1_JxJD0_fid2() {
    TimerStat timerStat = new TimerStat();
    double minSecs = timerStat.getMinSecs();
  }
}