/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPStreaming_Test_Failing {
  private static String initTime;
  private static int hitCount;
  private HttpServletRequest request;
  @Mock
  private HttpServletResponse response;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_lmwO0() {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    String servletInfo = pingJSONPStreaming.getServletInfo();
    assertEquals("Basic JSON generation and parsing in a servlet", servletInfo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_GFLT0() throws Exception {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    when(request.getMethod()).thenReturn("POST");
    when(request.getParameter("callback")).thenReturn("callback");
    when(request.getParameter("data")).thenReturn("data");
    when(request.getParameter("contentType")).thenReturn("application/json");
    when(request.getParameter("charset")).thenReturn("UTF-8");
    when(request.getParameter("status")).thenReturn("200");
    when(request.getParameter("statusText")).thenReturn("OK");
    when(request.getParameter("headers")).thenReturn("{\"Content-Type\":\"application/json; charset=UTF-8\"}");
    when(request.getParameter("body")).thenReturn("{\"message\":\"Hello, World!\"}");
    pingJSONPStreaming.doPost(request, response);
    assertEquals("callback", request.getParameter("callback"));
    assertEquals("data", request.getParameter("data"));
    assertEquals("application/json", request.getParameter("contentType"));
    assertEquals("UTF-8", request.getParameter("charset"));
    assertEquals("200", request.getParameter("status"));
    assertEquals("OK", request.getParameter("statusText"));
    assertEquals("{\"Content-Type\":\"application/json; charset=UTF-8\"}", request.getParameter("headers"));
    assertEquals("{\"message\":\"Hello, World!\"}", request.getParameter("body"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_GFLT0_1() throws Exception {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    when(request.getMethod()).thenReturn("POST");
    when(request.getParameter("callback")).thenReturn("callback");
    when(request.getParameter("data")).thenReturn("data");
    when(request.getParameter("contentType")).thenReturn("application/json");
    when(request.getParameter("charset")).thenReturn("UTF-8");
    when(request.getParameter("status")).thenReturn("200");
    when(request.getParameter("statusText")).thenReturn("OK");
    when(request.getParameter("headers")).thenReturn("{\"Content-Type\":\"application/json; charset=UTF-8\"}");
    when(request.getParameter("body")).thenReturn("{\"message\":\"Hello, World!\"}");
    pingJSONPStreaming.doPost(request, response);
    assertEquals("callback", request.getParameter("callback"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_GFLT0_2() throws Exception {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    when(request.getMethod()).thenReturn("POST");
    when(request.getParameter("callback")).thenReturn("callback");
    when(request.getParameter("data")).thenReturn("data");
    when(request.getParameter("contentType")).thenReturn("application/json");
    when(request.getParameter("charset")).thenReturn("UTF-8");
    when(request.getParameter("status")).thenReturn("200");
    when(request.getParameter("statusText")).thenReturn("OK");
    when(request.getParameter("headers")).thenReturn("{\"Content-Type\":\"application/json; charset=UTF-8\"}");
    when(request.getParameter("body")).thenReturn("{\"message\":\"Hello, World!\"}");
    pingJSONPStreaming.doPost(request, response);
    assertEquals("data", request.getParameter("data"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_GFLT0_3() throws Exception {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    when(request.getMethod()).thenReturn("POST");
    when(request.getParameter("callback")).thenReturn("callback");
    when(request.getParameter("data")).thenReturn("data");
    when(request.getParameter("contentType")).thenReturn("application/json");
    when(request.getParameter("charset")).thenReturn("UTF-8");
    when(request.getParameter("status")).thenReturn("200");
    when(request.getParameter("statusText")).thenReturn("OK");
    when(request.getParameter("headers")).thenReturn("{\"Content-Type\":\"application/json; charset=UTF-8\"}");
    when(request.getParameter("body")).thenReturn("{\"message\":\"Hello, World!\"}");
    pingJSONPStreaming.doPost(request, response);
    assertEquals("application/json", request.getParameter("contentType"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_GFLT0_4() throws Exception {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    when(request.getMethod()).thenReturn("POST");
    when(request.getParameter("callback")).thenReturn("callback");
    when(request.getParameter("data")).thenReturn("data");
    when(request.getParameter("contentType")).thenReturn("application/json");
    when(request.getParameter("charset")).thenReturn("UTF-8");
    when(request.getParameter("status")).thenReturn("200");
    when(request.getParameter("statusText")).thenReturn("OK");
    when(request.getParameter("headers")).thenReturn("{\"Content-Type\":\"application/json; charset=UTF-8\"}");
    when(request.getParameter("body")).thenReturn("{\"message\":\"Hello, World!\"}");
    pingJSONPStreaming.doPost(request, response);
    assertEquals("UTF-8", request.getParameter("charset"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_GFLT0_5() throws Exception {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    when(request.getMethod()).thenReturn("POST");
    when(request.getParameter("callback")).thenReturn("callback");
    when(request.getParameter("data")).thenReturn("data");
    when(request.getParameter("contentType")).thenReturn("application/json");
    when(request.getParameter("charset")).thenReturn("UTF-8");
    when(request.getParameter("status")).thenReturn("200");
    when(request.getParameter("statusText")).thenReturn("OK");
    when(request.getParameter("headers")).thenReturn("{\"Content-Type\":\"application/json; charset=UTF-8\"}");
    when(request.getParameter("body")).thenReturn("{\"message\":\"Hello, World!\"}");
    pingJSONPStreaming.doPost(request, response);
    assertEquals("200", request.getParameter("status"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_GFLT0_6() throws Exception {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    when(request.getMethod()).thenReturn("POST");
    when(request.getParameter("callback")).thenReturn("callback");
    when(request.getParameter("data")).thenReturn("data");
    when(request.getParameter("contentType")).thenReturn("application/json");
    when(request.getParameter("charset")).thenReturn("UTF-8");
    when(request.getParameter("status")).thenReturn("200");
    when(request.getParameter("statusText")).thenReturn("OK");
    when(request.getParameter("headers")).thenReturn("{\"Content-Type\":\"application/json; charset=UTF-8\"}");
    when(request.getParameter("body")).thenReturn("{\"message\":\"Hello, World!\"}");
    pingJSONPStreaming.doPost(request, response);
    assertEquals("OK", request.getParameter("statusText"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_GFLT0_7() throws Exception {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    when(request.getMethod()).thenReturn("POST");
    when(request.getParameter("callback")).thenReturn("callback");
    when(request.getParameter("data")).thenReturn("data");
    when(request.getParameter("contentType")).thenReturn("application/json");
    when(request.getParameter("charset")).thenReturn("UTF-8");
    when(request.getParameter("status")).thenReturn("200");
    when(request.getParameter("statusText")).thenReturn("OK");
    when(request.getParameter("headers")).thenReturn("{\"Content-Type\":\"application/json; charset=UTF-8\"}");
    when(request.getParameter("body")).thenReturn("{\"message\":\"Hello, World!\"}");
    pingJSONPStreaming.doPost(request, response);
    assertEquals("{\"Content-Type\":\"application/json; charset=UTF-8\"}", request.getParameter("headers"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_GFLT0_8() throws Exception {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    when(request.getMethod()).thenReturn("POST");
    when(request.getParameter("callback")).thenReturn("callback");
    when(request.getParameter("data")).thenReturn("data");
    when(request.getParameter("contentType")).thenReturn("application/json");
    when(request.getParameter("charset")).thenReturn("UTF-8");
    when(request.getParameter("status")).thenReturn("200");
    when(request.getParameter("statusText")).thenReturn("OK");
    when(request.getParameter("headers")).thenReturn("{\"Content-Type\":\"application/json; charset=UTF-8\"}");
    when(request.getParameter("body")).thenReturn("{\"message\":\"Hello, World!\"}");
    pingJSONPStreaming.doPost(request, response);
    assertEquals("{\"message\":\"Hello, World!\"}", request.getParameter("body"));
  }
}