/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.TimeUnit;
import javax.websocket.DecodeException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JsonDecoder_Test_Failing {
  private JsonDecoder jsonDecoder;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecode_ZhLZ0_2() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":\"value\"}";
    JsonMessage message = decoder.decode(json);
    assertEquals("value", message.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithEmptyJson_ruNB1_1() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "";
    JsonMessage message = decoder.decode(json);
    assertNull(message);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithNullJson_Goif3() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = null;
    try {
      decoder.decode(json);
      fail("Expected DecodeException");
    } catch (DecodeException e) {
      assertTrue(e.getMessage().contains("Null JSON"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithEmptyKey_Gwas4_1() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":\"\"}";
    JsonMessage message = decoder.decode(json);
    assertEquals("", message.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithEmptyKey_Gwas4_2() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":\"\"}";
    JsonMessage message = decoder.decode(json);
    assertEquals("", message.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithEmptyValue_yxiO5_1() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":\"value\",\"value\":\"\"}";
    JsonMessage message = decoder.decode(json);
    assertEquals("", message.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithNullValue_Kqjy6_1() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":\"value\",\"value\":null}";
    JsonMessage message = decoder.decode(json);
    assertNull(message.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithNullKey_LEdN9() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":null,\"value\":\"value\"}";
    try {
      decoder.decode(json);
      fail("Expected DecodeException");
    } catch (DecodeException e) {
      assertTrue(e.getMessage().contains("Null key"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWillDecode_ValidJson_tSrA0_fid1() {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":\"value\"}";
    assertTrue(decoder.willDecode(json));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecode_ZhLZ0() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":\"value\"}";
    JsonMessage message = decoder.decode(json);
    assertEquals("value", message.getValue());
    assertEquals("key", message.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithEmptyJson_ruNB1() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "";
    JsonMessage message = decoder.decode(json);
    assertNull(message.getValue());
    assertNull(message.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithEmptyKey_Gwas4() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":\"\"}";
    JsonMessage message = decoder.decode(json);
    assertEquals("", message.getKey());
    assertNull(message.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithEmptyValue_yxiO5() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":\"value\",\"value\":\"\"}";
    JsonMessage message = decoder.decode(json);
    assertEquals("value", message.getKey());
    assertEquals("", message.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithNullValue_Kqjy6() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":\"value\",\"value\":null}";
    JsonMessage message = decoder.decode(json);
    assertEquals("value", message.getKey());
    assertNull(message.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithInvalidKey_vfSI7() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":\"value\",\"value\":\"invalid\"}";
    try {
      decoder.decode(json);
      fail("Expected DecodeException");
    } catch (DecodeException e) {
      assertTrue(e.getMessage().contains("Invalid key"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithInvalidValue_dabZ8() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":\"value\",\"value\":\"invalid\"}";
    try {
      decoder.decode(json);
      fail("Expected DecodeException");
    } catch (DecodeException e) {
      assertTrue(e.getMessage().contains("Invalid value"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecode_ZhLZ0_1() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":\"value\"}";
    JsonMessage message = decoder.decode(json);
    assertEquals("value", message.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecode_ZhLZ0_2_fid3() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":\"value\"}";
    JsonMessage message = decoder.decode(json);
    assertEquals("key", message.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithEmptyJson_ruNB1_1_fid3() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "";
    JsonMessage message = decoder.decode(json);
    assertNull(message.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithEmptyJson_ruNB1_2_fid3() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "";
    JsonMessage message = decoder.decode(json);
    assertNull(message.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithEmptyKey_Gwas4_2_fid3() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":\"\"}";
    JsonMessage message = decoder.decode(json);
    assertNull(message.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithEmptyValue_yxiO5_1_fid3() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":\"value\",\"value\":\"\"}";
    JsonMessage message = decoder.decode(json);
    assertEquals("value", message.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithNullValue_Kqjy6_1_fid3() throws DecodeException {
    JsonDecoder decoder = new JsonDecoder();
    String json = "{\"key\":\"value\",\"value\":null}";
    JsonMessage message = decoder.decode(json);
    assertEquals("value", message.getKey());
  }
}