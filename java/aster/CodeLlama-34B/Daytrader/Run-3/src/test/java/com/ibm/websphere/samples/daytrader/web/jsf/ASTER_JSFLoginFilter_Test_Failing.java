/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JSFLoginFilter_Test_Failing {
  private FilterConfig filterConfig = null;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullFilterConfig_gxqg1() throws ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    try {
      filter.init(null);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("filterConfig", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithInvalidFilterConfig_pZOG2() throws ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    FilterConfig filterConfig = mock(FilterConfig.class);
    when(filterConfig.getInitParameter("login-page")).thenReturn(null);
    try {
      filter.init(filterConfig);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("login-page", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithInvalidLoginPage_nMbq4() throws ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    FilterConfig filterConfig = mock(FilterConfig.class);
    when(filterConfig.getInitParameter("login-page")).thenReturn("invalid-login-page");
    try {
      filter.init(filterConfig);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("invalid-login-page", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilter_userLoggedIn_nNvl4() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    filter.doFilter(request, response, chain);
    verify(chain).doFilter(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilter_userNotLoggedIn_cpWI5() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getServletPath()).thenReturn("home");
    filter.doFilter(request, response, chain);
    verify(response).sendRedirect("welcome.faces");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilter_userNotLoggedIn_invalidUrl_yCDO6() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getServletPath()).thenReturn("invalid");
    filter.doFilter(request, response, chain);
    verify(response).sendError(HttpServletResponse.SC_NOT_FOUND);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilter_userNotLoggedIn_nullUrl_XoOX7() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getServletPath()).thenReturn(null);
    filter.doFilter(request, response, chain);
    verify(response).sendError(HttpServletResponse.SC_NOT_FOUND);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilter_userNotLoggedIn_emptyUrl_dKVq8() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getServletPath()).thenReturn("");
    filter.doFilter(request, response, chain);
    verify(response).sendError(HttpServletResponse.SC_NOT_FOUND);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilter_userNotLoggedIn_invalidUrl_yCDO6_fid1() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getServletPath()).thenReturn("invalid");
    filter.doFilter(request, response, chain);
    verify(response).sendRedirect("welcome.faces");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilter_userNotLoggedIn_nullUrl_XoOX7_fid1() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getServletPath()).thenReturn(null);
    filter.doFilter(request, response, chain);
    verify(response).sendRedirect("welcome.faces");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilter_userNotLoggedIn_emptyUrl_dKVq8_fid1() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getServletPath()).thenReturn("");
    filter.doFilter(request, response, chain);
    verify(response).sendRedirect("welcome.faces");
  }
}