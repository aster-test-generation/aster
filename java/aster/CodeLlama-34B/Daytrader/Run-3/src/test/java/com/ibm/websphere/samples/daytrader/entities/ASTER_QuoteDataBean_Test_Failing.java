/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_Symbol_lYAq0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    BigDecimal price = quoteDataBean.getPrice();
    assertEquals(BigDecimal.valueOf(100.0), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenWithNaN_FANV6() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
    BigDecimal open = new BigDecimal(Double.NaN);
    quoteDataBean.setOpen(open);
    assertEquals(open, quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenWithPositiveInfinity_UlTi7() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
    BigDecimal open = new BigDecimal(Double.POSITIVE_INFINITY);
    quoteDataBean.setOpen(open);
    assertEquals(open, quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenWithNegativeInfinity_GScZ8() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
    BigDecimal open = new BigDecimal(Double.NEGATIVE_INFINITY);
    quoteDataBean.setOpen(open);
    assertEquals(open, quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_withCompanyName_LERL1_LUjp0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    quoteDataBean.print();
    assertEquals("Apple Inc.", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenWithNullCompanyName_Lpuo2_aZaJ0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", null, 1000000, BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), BigDecimal.valueOf(80.0), BigDecimal.valueOf(100.0), 10.0);
    BigDecimal open = quoteDataBean.getOpen();
    assertNull(open);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLowWithEmptySymbol_JpVf2_vXdZ0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("", "Apple Inc.", 1000000, BigDecimal.valueOf(100.0), BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), BigDecimal.valueOf(110.0), 10.0);
    BigDecimal low = quoteDataBean.getLow();
    assertNull(low);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLowWithInvalidSymbol_OqbD3_MGNF0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("ABC", "Apple Inc.", 1000000, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(90.0), new BigDecimal(110.0), 10.0);
    BigDecimal low = quoteDataBean.getLow();
    assertNull(low);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullCompanyName_jTbm2_nylb0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", null, 1000000, BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), BigDecimal.valueOf(80.0), BigDecimal.valueOf(110.0), 10.0);
    String expected = "\n\tQuote Data for: AAPL\n\t\t companyName: null\n\t\t      volume: 1000000\n\t\t       price: 100.0\n\t\t        open1: 90.0\n\t\t         low: 80.0\n\t\t        high: 110.0\n\t\t      change1: 10.0";
    assertEquals(expected, quoteDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenWithNegativeInfinity_GScZ8_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
    BigDecimal open = new BigDecimal(Double.NEGATIVE_INFINITY);
    quoteDataBean.setOpen(open);
    assertEquals(Double.NEGATIVE_INFINITY, quoteDataBean.getOpen().doubleValue());
  }
}