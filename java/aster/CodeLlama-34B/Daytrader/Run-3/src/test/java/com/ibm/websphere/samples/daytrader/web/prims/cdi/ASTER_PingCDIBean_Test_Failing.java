/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.cdi;

import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.spi.BeanManager;
import javax.naming.InitialContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingCDIBean_Test_Failing {
  private static int getBeanManagerHitCountJNDI = 0;
  private InitialContext initialContext;
  @Mock
  private BeanManager beanManager;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBeanMangerViaCDICurrent_success_fqJq0() throws Exception {
    PingCDIBean pingCDIBean = new PingCDIBean();
    int result = pingCDIBean.getBeanMangerViaCDICurrent();
    assertEquals(0, result);
  }

  @Test
  @Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHello_OlVB0() {
    PingCDIBean pingCDIBean = new PingCDIBean();
    int result = pingCDIBean.hello();
    assertEquals(1, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHelloWithNullObject_inDO7() {
    PingCDIBean pingCDIBean = null;
    int result = 0;
    assertEquals(result, pingCDIBean.hello());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHelloWithParameter_Iyso1_ZAQA0() {
    PingCDIBean pingCDIBean = new PingCDIBean();
    int result = pingCDIBean.hello();
    assertEquals(9, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHelloWithInvalidParameter_CJuY3_ZYQf6() {
    PingCDIBean pingCDIBean = new PingCDIBean();
    int result = pingCDIBean.hello();
    assertEquals(6, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHelloWithInvalidMethod_aDAC9_IKOs2() {
    PingCDIBean pingCDIBean = new PingCDIBean();
    int result = pingCDIBean.hello();
    assertEquals(2, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHelloWithInvalidMethod_aDAC9_MGne1() {
    PingCDIBean pingCDIBean = new PingCDIBean();
    int result = pingCDIBean.hello();
    assertEquals(3, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHelloWithInvalidParameterValue_NadS14_geXT12() {
    PingCDIBean pingCDIBean = new PingCDIBean();
    int result = pingCDIBean.hello();
    assertEquals(12, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHelloWithInvalidParameterValue_NadS14_Pffv1() {
    PingCDIBean pingCDIBean = new PingCDIBean();
    int result = pingCDIBean.hello();
    assertEquals(11, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBeanMangerViaCDICurrent_success_fqJq0_fid1() throws Exception {
    PingCDIBean pingCDIBean = new PingCDIBean();
    int result = pingCDIBean.getBeanMangerViaCDICurrent();
    assertEquals(1, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHelloWithNullObject_inDO7_fid1() {
    PingCDIBean pingCDIBean = null;
    int result = pingCDIBean.hello();
    assertEquals(0, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHelloWithInvalidParameter_CJuY3_ZYQf0() {
    PingCDIBean pingCDIBean = new PingCDIBean();
    int result = pingCDIBean.hello();
    assertEquals(0, result);
  }
}