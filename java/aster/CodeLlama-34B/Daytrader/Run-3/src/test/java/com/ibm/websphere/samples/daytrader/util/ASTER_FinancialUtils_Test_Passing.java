/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_FinancialUtils_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGain_kAKI0() {
    BigDecimal currentBalance = new BigDecimal("100.00");
    BigDecimal openBalance = new BigDecimal("50.00");
    BigDecimal expectedGain = new BigDecimal("50.00");
    BigDecimal actualGain = FinancialUtils.computeGain(currentBalance, openBalance);
    assertEquals(expectedGain, actualGain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainHTMLPositive_dxjW0() {
    BigDecimal gain = new BigDecimal("10.50");
    String expected = "<FONT color=\"#009900\">10.50</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainHTMLNegative_uwiB1() {
    BigDecimal gain = new BigDecimal("-10.50");
    String expected = "<FONT color=\"#ff0000\">-10.50</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainHTMLZero_MUtu2() {
    BigDecimal gain = new BigDecimal("0.00");
    String expected = "<FONT color=\"#009900\">0.00</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainHTMLNull_qFQy3() {
    BigDecimal gain = null;
    String expected = "<FONT color=\"#ff0000\">null</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainPercent_zeroOpenBalance_hLAk0() {
    BigDecimal currentBalance = new BigDecimal(100);
    BigDecimal openBalance = new BigDecimal(0);
    BigDecimal gainPercent = FinancialUtils.computeGainPercent(currentBalance, openBalance);
    assertEquals(BigDecimal.ZERO, gainPercent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainPercent_nonZeroOpenBalance_DRcF1() {
    BigDecimal currentBalance = new BigDecimal(100);
    BigDecimal openBalance = new BigDecimal(50);
    BigDecimal gainPercent = FinancialUtils.computeGainPercent(currentBalance, openBalance);
    assertEquals(new BigDecimal(100), gainPercent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainPercent_zeroCurrentBalance_GJbq2() {
    BigDecimal currentBalance = new BigDecimal(0);
    BigDecimal openBalance = new BigDecimal(50);
    BigDecimal gainPercent = FinancialUtils.computeGainPercent(currentBalance, openBalance);
    assertEquals(BigDecimal.ZERO, gainPercent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_PositiveGain_bDGu0() {
    BigDecimal gain = new BigDecimal("10.50");
    String expected = "(<B><FONT color=\"#009900\">+10.50%</FONT></B>)<IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainPercentHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_NegativeGain_VRcH1() {
    BigDecimal gain = new BigDecimal("-10.50");
    String expected = "(<B><FONT color=\"#ff0000\">-10.50%</FONT></B>)<IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainPercentHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_ZeroGain_uIbu2() {
    BigDecimal gain = new BigDecimal("0.00");
    String expected = "(<B><FONT color=\"#009900\">+0.00%</FONT></B>)<IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainPercentHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_NullGain_fsjc3() {
    BigDecimal gain = null;
    String expected = "(<B><FONT color=\"#ff0000\">null</FONT></B>)<IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainPercentHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintChangeHTML_PositiveChange_QYQs0() {
    String expected = "<FONT color=\"#009900\">10.0</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printChangeHTML(10.0);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintChangeHTML_NegativeChange_rFzR1() {
    String expected = "<FONT color=\"#ff0000\">-10.0</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printChangeHTML(-10.0);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintChangeHTML_ZeroChange_QUCq2() {
    String expected = "<FONT color=\"#009900\">0.0</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printChangeHTML(0.0);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLink_KmYw0() {
    String symbol = "AAPL";
    String expected = "<A href=\"app?action=quotes&symbols=" + symbol + "\">" + symbol + "</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLinkWithInvalidSymbol_DzKm2() {
    String symbol = "INVALID";
    String expected = "<A href=\"app?action=quotes&symbols=" + symbol + "\">" + symbol + "</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLinkWithNullSymbol_xVYF3() {
    String symbol = null;
    String expected = "<A href=\"app?action=quotes&symbols=" + symbol + "\">" + symbol + "</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLinkWithEmptySymbol_tZaW4() {
    String symbol = "";
    String expected = "<A href=\"app?action=quotes&symbols=" + symbol + "\">" + symbol + "</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLinkWithInvalidAction_wrTw5() {
    String symbol = "AAPL";
    String expected = "<A href=\"app?action=invalid&symbols=" + symbol + "\">" + symbol + "</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLinkWithNullAction_XMGi6() {
    String symbol = "AAPL";
    String expected = "<A href=\"app?action=null&symbols=" + symbol + "\">" + symbol + "</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLinkWithEmptyAction_EbiC7() {
    String symbol = "AAPL";
    String expected = "<A href=\"app?action=&symbols=" + symbol + "\">" + symbol + "</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeHoldingsTotal_emptyCollection_QCEk0_cIXB0() {
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    BigDecimal expected = new BigDecimal(0.0);
    BigDecimal actual = FinancialUtils.computeHoldingsTotal(holdingDataBeans);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLinkWithMultipleSymbols_evDn1_iOiG0() {
    String symbol1 = "AAPL";
    String symbol2 = "GOOG";
    String expected = "<A href=\"app?action=quotes&symbols=" + symbol1 + "," + symbol2 + "\">" + symbol1 + "," + symbol2 + "</A>";
    String actual = FinancialUtils.printQuoteLink(symbol1 + "," + symbol2);
    assertEquals(expected, actual);
  }
}