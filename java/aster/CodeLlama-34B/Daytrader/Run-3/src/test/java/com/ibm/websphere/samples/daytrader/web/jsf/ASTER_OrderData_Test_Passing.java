/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderData_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_yiPa0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals("AAPL", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbolWithNullSymbol_ppgV1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, null);
    assertEquals(null, orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderType_bKdm0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("market");
    assertEquals("market", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderTypeWithNull_vsGX1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType(null);
    assertNull(orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderTypeWithInvalidValue_dUZh2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("invalid");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbol_vvQZ0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setSymbol("GOOG");
    assertEquals("GOOG", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithNull_QCyj1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setSymbol(null);
    assertEquals(null, orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee_Hnzd0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOrderFee(new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), orderData.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFeeWithNull_oatx1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOrderFee(null);
    assertNull(orderData.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDate_WSHs0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOpenDate(new Date());
    assertEquals(new Date(), orderData.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDateWithNull_shoV1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOpenDate(null);
    assertNull(orderData.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_csZQ0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setPrice(new BigDecimal(15.0));
    assertEquals(new BigDecimal(15.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithNull_CXls1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setPrice(null);
    assertNull(orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithInvalidValue_SHXi2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setPrice(new BigDecimal(-1.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDate_JKqN0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date completionDate = orderData.getCompletionDate();
    assertEquals(new Date(), completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDateWithNull_NADY1() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date completionDate = orderData.getCompletionDate();
    assertNull(completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullPrice_mEme1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setPrice(null);
    BigDecimal price = orderData.getPrice();
    assertNull(price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderStatus_mSpG0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals("open", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderStatusWithCompleteDate_KIXe1() {
    OrderData orderData = new OrderData(1, "complete", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals("complete", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderStatusWithCancelDate_PXAC2() {
    OrderData orderData = new OrderData(1, "cancel", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals("cancel", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderStatusWithInvalidStatus_sGHv3() {
    OrderData orderData = new OrderData(1, "invalid", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals("invalid", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderStatusWithNullStatus_vOuy4() {
    OrderData orderData = new OrderData(1, null, new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertNull(orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_nNOM0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    BigDecimal total = orderData.getTotal();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalWithZeroQuantity_NNrA1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 0.0, "AAPL");
    BigDecimal total = orderData.getTotal();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_zzED0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setQuantity(20.0);
    assertEquals(20.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithNegativeValue_Ewpa1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setQuantity(-20.0);
    assertEquals(-20.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderID_llZY0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOrderID(2);
    assertEquals(2, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderIDWithNull_uFZH1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOrderID(null);
    assertEquals(null, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotal_CupL0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setTotal(new BigDecimal(100.0));
    assertEquals(new BigDecimal(100.0), orderData.getTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalWithZero_hnNE1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setTotal(BigDecimal.ZERO);
    assertEquals(BigDecimal.ZERO, orderData.getTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDate_rOxA0() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setCompletionDate(new Date());
    assertEquals(new Date(), orderData.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDateWithNull_plwg1() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setCompletionDate(null);
    assertNull(orderData.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_FhhR0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals(new BigDecimal(10.0), orderData.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeWithNullOrderFee_SMoZ1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), null, "buy", 10.0, "AAPL");
    assertNull(orderData.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeWithZeroOrderFee_ppbF2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(0.0), "buy", 10.0, "AAPL");
    assertEquals(new BigDecimal(0.0), orderData.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeWithNegativeOrderFee_kRPI3() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(-10.0), "buy", 10.0, "AAPL");
    assertEquals(new BigDecimal(-10.0), orderData.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeWithDifferentOrderType_GHjA4() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "AAPL");
    assertEquals(new BigDecimal(10.0), orderData.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_lexR0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals(1, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderIDWithNullOrderID_synE1() {
    OrderData orderData = new OrderData(null, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertNull(orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderIDWithInvalidOrderID_bcyB2() {
    OrderData orderData = new OrderData(-1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals(-1, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderIDWithDifferentOrderID_zxUo4() {
    OrderData orderData = new OrderData(2, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertNotEquals(1, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderIDWithNullOrderData_WBwn5() {
    OrderData orderData = null;
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_ysKg0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    assertEquals("limit", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderTypeWithNullOrderType_Wxke1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), null, 10.0, "AAPL");
    assertNull(orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderTypeWithEmptyOrderType_LFDW2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "", 10.0, "AAPL");
    assertEquals("", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderTypeWithInvalidOrderType_pFoO3() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "invalid", 10.0, "AAPL");
    assertEquals("invalid", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate_hYzR0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertEquals(new Date(), openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullOpenDate_kRFA1() {
    OrderData orderData = new OrderData(1, "open", null, new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullCompleteDate_aeWS2() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullOrderFee_MbWh3() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), null, "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullOrderType_AdHC4() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), null, 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullSymbol_QAkj6() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, null);
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_1_XqWS0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals(10.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_2_xFpW1() {
    OrderData orderData = new OrderData(2, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "GOOG");
    assertEquals(10.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_3_CLOi2() {
    OrderData orderData = new OrderData(3, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "TSLA");
    assertEquals(10.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_4_kqDf3() {
    OrderData orderData = new OrderData(4, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "AMZN");
    assertEquals(10.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_5_hrKE4() {
    OrderData orderData = new OrderData(5, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "FB");
    assertEquals(10.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_6_yVAZ5() {
    OrderData orderData = new OrderData(6, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "NFLX");
    assertEquals(10.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_7_LRwu6() {
    OrderData orderData = new OrderData(7, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "GOOG");
    assertEquals(10.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_8_xvTx7() {
    OrderData orderData = new OrderData(8, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "AAPL");
    assertEquals(10.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_9_Nuni8() {
    OrderData orderData = new OrderData(9, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "TSLA");
    assertEquals(10.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_10_MjxZ9() {
    OrderData orderData = new OrderData(10, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "AMZN");
    assertEquals(10.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_11_Kuux10() {
    OrderData orderData = new OrderData(11, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "FB");
    assertEquals(10.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullQuantity_vTah5_vxXq0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 0.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }
}