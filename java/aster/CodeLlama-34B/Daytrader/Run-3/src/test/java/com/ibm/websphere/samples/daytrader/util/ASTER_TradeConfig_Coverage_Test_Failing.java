/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction2_LNsQ1() {
    boolean newUser = false;
    char action = TradeConfig.getScenarioAction(newUser);
    assertEquals('b', action);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_XRvC0() {
    int maxUsers = 10;
    int userIDCount = 0;
    String userID = TradeConfig.nextUserID();
    assertEquals("uid:0", userID);
    userIDCount++;
    if (userIDCount % maxUsers == 0) {
      userIDCount = 0;
    }
    userID = TradeConfig.nextUserID();
    assertEquals("uid:1", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_equalToZero_FTXo1() {
    BigDecimal percentGainBD = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(BigDecimal.ONE, percentGainBD);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_RND_USER_CUll0() {
    TradeConfig.RND_USER = true;
    String userID = TradeConfig.getUserID();
    assertEquals("rndUserID", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_nextUserID_skju1() {
    TradeConfig.RND_USER = false;
    String userID = TradeConfig.getUserID();
    assertEquals("nextUserID", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_XRvC0_1() {
    int maxUsers = 10;
    int userIDCount = 0;
    String userID = TradeConfig.nextUserID();
    userIDCount++;
    if (userIDCount % maxUsers == 0) {
      userIDCount = 0;
    }
    userID = TradeConfig.nextUserID();
    assertEquals("uid:0", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_XRvC0_2() {
    int maxUsers = 10;
    int userIDCount = 0;
    String userID = TradeConfig.nextUserID();
    userIDCount++;
    if (userIDCount % maxUsers == 0) {
      userIDCount = 0;
    }
    userID = TradeConfig.nextUserID();
    assertEquals("uid:1", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserID5_JmyB4_FhdH0() {
    String hostName = "localhost";
    long currentTimeMillis = System.currentTimeMillis();
    int count = 4;
    String expected = "newUserPrefix" + hostName + currentTimeMillis + count;
    String actual = TradeConfig.rndNewUserID();
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_AccessMode_QxYI5_ppws0() {
    TradeConfig.setConfigParam("accessMode", "value");
    Assertions.assertEquals(TradeConfig.getAccessMode(), "value");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_WebInterface_ESAn6_bgcF0() {
    TradeConfig.setConfigParam("WebInterface", "value");
    Assertions.assertEquals(TradeConfig.getWebInterface(), "value");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_PrimIterations_UFFi9_NugY0() {
    TradeConfig.setConfigParam("primIterations", "value");
    Assertions.assertEquals(TradeConfig.getPrimIterations(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_invalid_zvuP3_LfQu0() {
    TradeConfig.RND_USER = false;
    String userID = TradeConfig.getUserID();
    assertNull(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction2_LNsQ1_fid2() {
    boolean newUser = false;
    char action = TradeConfig.getScenarioAction(newUser);
    assertEquals('q', action);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_XRvC0_1_fid2() {
    int maxUsers = 10;
    int userIDCount = 0;
    String userID = TradeConfig.nextUserID();
    userIDCount++;
    if (userIDCount % maxUsers == 0) {
      userIDCount = 0;
    }
    userID = TradeConfig.nextUserID();
    assertEquals("uid:3", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_XRvC0_2_fid2() {
    int maxUsers = 10;
    int userIDCount = 0;
    String userID = TradeConfig.nextUserID();
    userIDCount++;
    if (userIDCount % maxUsers == 0) {
      userIDCount = 0;
    }
    userID = TradeConfig.nextUserID();
    assertEquals("uid:5", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_RND_USER_CUll0_fid2() {
    TradeConfig.RND_USER = true;
    String userID = TradeConfig.getUserID();
    assertEquals("uid:6528", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserID5_JmyB4_FhdH0_fid2() {
    String hostName = "localhost";
    long currentTimeMillis = System.currentTimeMillis();
    int count = 4;
    String expected = "ru:asterfinal" + hostName + currentTimeMillis + count;
    String actual = TradeConfig.rndNewUserID();
    Assertions.assertEquals(expected, actual);
  }
}