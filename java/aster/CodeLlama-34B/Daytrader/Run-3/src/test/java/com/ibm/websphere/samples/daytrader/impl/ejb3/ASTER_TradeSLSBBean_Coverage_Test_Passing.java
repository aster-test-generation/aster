/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.jms.TextMessage;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_TradeSLSBBean_Coverage_Test_Passing {
  private TypedQuery<OrderDataBean> q;
  private EntityManager entityManager;
  private AccountDataBean account;
  private Log log;
  private TextMessage message;
  private TradeConfig tradeConfig;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn1_epGT0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 1000.0;
    double NetValue = 1100.0;
    double ir = tradeSLSBBean.investmentReturn(investment, NetValue);
    assertEquals(0.1, ir, 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn2_EqpA1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 1000.0;
    double NetValue = 900.0;
    double ir = tradeSLSBBean.investmentReturn(investment, NetValue);
    assertEquals(-0.1, ir, 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetInSession_jSvP0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      tradeSLSBBean.setInSession(true);
      fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
      assertEquals("TradeSLSBBean::setInGlobalTxn not supported", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_zonK3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = null;
    BigDecimal price = new BigDecimal("123.45");
    try {
      tradeSLSBBean.createQuote(symbol, companyName, price);
    } catch (EJBException e) {
      verify(log).error("TradeSLSBBean:createQuote -- exception creating Quote", e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNegativePrice_zOkm5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy3_tUUP2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String symbol = "IBM";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
    AccountDataBean account = mock(AccountDataBean.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void tearDown_hptU1_zQkU1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    tradeSLSBBean = null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy1_oLAi0_YuWJ0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String symbol = "IBM";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
    AccountDataBean account = mock(AccountDataBean.class);
    QuoteDataBean quote = mock(QuoteDataBean.class);
    HoldingDataBean holding = mock(HoldingDataBean.class);
    OrderDataBean order = mock(OrderDataBean.class);
    when(profile.getAccount()).thenReturn(account);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    when(entityManager.find(QuoteDataBean.class, symbol)).thenReturn(quote);
    when(tradeSLSBBean.createOrder(account, quote, holding, "buy", quantity)).thenReturn(order);
    when(order.getOrderFee()).thenReturn(BigDecimal.ZERO);
    when(order.getOrderID()).thenReturn(1);
    OrderDataBean result = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_bftu1_JreQ0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String symbol = "IBM";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
    AccountDataBean account = mock(AccountDataBean.class);
    QuoteDataBean quote = mock(QuoteDataBean.class);
    HoldingDataBean holding = mock(HoldingDataBean.class);
    OrderDataBean order = mock(OrderDataBean.class);
    when(profile.getAccount()).thenReturn(account);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    when(entityManager.find(QuoteDataBean.class, symbol)).thenReturn(quote);
    when(tradeSLSBBean.createOrder(account, quote, holding, "buy", quantity)).thenReturn(order);
    when(order.getOrderFee()).thenReturn(BigDecimal.ZERO);
    when(order.getOrderID()).thenReturn(1);
    OrderDataBean result = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn3_qdAL2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 1000.0;
    double NetValue = 1000.0;
    double ir = tradeSLSBBean.investmentReturn(investment, NetValue);
    assertEquals(0.0, ir, 0.01);
  }
}