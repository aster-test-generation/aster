/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderDataBean_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentOrderType_JvKg2() {
    OrderDataBean order1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    OrderDataBean order2 = new OrderDataBean(1, "SELL", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    assertFalse(order1.equals(order2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullOrderType_BWjg3() {
    OrderDataBean order1 = new OrderDataBean(1, null, "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    OrderDataBean order2 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    assertFalse(order1.equals(order2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentOrderStatus_DpuF4() {
    OrderDataBean order1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    OrderDataBean order2 = new OrderDataBean(1, "BUY", "CLOSED", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    assertFalse(order1.equals(order2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullOrderStatus_iWan5() {
    OrderDataBean order1 = new OrderDataBean(1, "BUY", null, new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    OrderDataBean order2 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    assertFalse(order1.equals(order2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsOpen_NullStatus_eAUm3() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus(null);
    assertFalse(orderDataBean.isOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSellWithNullOrderType_Hqva2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderType(null);
    assertFalse(orderDataBean.isSell());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuy_orderTypeIsNull_uRfx2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderType(null);
    assertFalse(orderDataBean.isBuy());
  }
}