/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import javax.json.JsonObject;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullTopGainersAndLosers_rjMV0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, null, 0, null, null);
    String actual = marketSummaryDataBean.toString();
    String expected = "\n\tMarket Summary at: null\n\t\t        TSIA:null\n\t\t    openTSIA:null\n\t\t        gain:null\n\t\t      volume:0";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithEmptyTopGainersAndLosers_dIPL1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, null, 0, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    String actual = marketSummaryDataBean.toString();
    String expected = "\n\tMarket Summary at: null\n\t\t        TSIA:null\n\t\t    openTSIA:null\n\t\t        gain:null\n\t\t      volume:0";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToJSON_CGNE0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
    assertNotNull(jsonObject);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent_nonNull_ZVel1_Buep0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopGainers(Collections.emptyList());
    BigDecimal gainPercent = marketSummaryDataBean.getGainPercent();
    assertEquals(BigDecimal.ZERO, gainPercent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent_null_YXCS0_IjTs0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(BigDecimal.ZERO);
    marketSummaryDataBean.setOpenTSIA(BigDecimal.ZERO);
    BigDecimal gainPercent = marketSummaryDataBean.getGainPercent();
    assertEquals(BigDecimal.ZERO, gainPercent);
  }
}