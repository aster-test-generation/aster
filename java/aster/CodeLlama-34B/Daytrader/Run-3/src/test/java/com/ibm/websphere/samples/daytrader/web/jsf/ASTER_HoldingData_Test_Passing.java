/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePrice_sDEp0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = new BigDecimal(100.00);
    holdingData.setPurchasePrice(purchasePrice);
    Assertions.assertEquals(purchasePrice, holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePriceWithNull_CmvV1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = null;
    holdingData.setPurchasePrice(purchasePrice);
    Assertions.assertNull(holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePriceWithZero_mRbN2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = new BigDecimal(0.00);
    holdingData.setPurchasePrice(purchasePrice);
    Assertions.assertEquals(purchasePrice, holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_dLVF0() {
    HoldingData holdingData = new HoldingData();
    double quantity = holdingData.getQuantity();
    assertEquals(0.0, quantity, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchaseDateWithNull_nvNf1() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = holdingData.getPurchaseDate();
    assertNull(purchaseDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchaseDateWithInvalidDate_SHuM2() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = holdingData.getPurchaseDate();
    assertNotEquals(new Date(0), purchaseDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDate_YvgN0() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = new Date();
    holdingData.setPurchaseDate(purchaseDate);
    assertEquals(purchaseDate, holdingData.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDateWithNull_cPsG1() {
    HoldingData holdingData = new HoldingData();
    holdingData.setPurchaseDate(null);
    assertNull(holdingData.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDateWithInvalidDate_meBs2() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = new Date(0);
    holdingData.setPurchaseDate(purchaseDate);
    assertEquals(purchaseDate, holdingData.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDateWithValidDate_oqes3() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = new Date(1000000000);
    holdingData.setPurchaseDate(purchaseDate);
    assertEquals(purchaseDate, holdingData.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainWithNegativeValue_xoTc2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = holdingData.getGain();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainWithNullValue_rzBZ4() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = holdingData.getGain();
    assertNull(gain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainWithInvalidValue_OfYC5() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = holdingData.getGain();
    assertNotEquals(BigDecimal.valueOf(100), gain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValue_TmMy0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = holdingData.getMarketValue();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValueWithNullMarketValue_eLkv1() {
    HoldingData holdingData = new HoldingData();
    holdingData.setMarketValue(null);
    BigDecimal marketValue = holdingData.getMarketValue();
    assertNull(marketValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingID_wrvD0_1() {
    HoldingData holdingData = new HoldingData();
    Integer holdingID = holdingData.getHoldingID();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingIDWithNullHoldingID_EnYL1() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(null);
    Integer holdingID = holdingData.getHoldingID();
    assertNull(holdingID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchasePriceWithNonZeroValue_gOMk1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = holdingData.getPurchasePrice();
    assertNotEquals(BigDecimal.ZERO, purchasePrice);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchasePriceWithNullValue_BZOg2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = holdingData.getPurchasePrice();
    assertNull(purchasePrice);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchasePriceWithInvalidValue_hjxq3() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = holdingData.getPurchasePrice();
    assertNotEquals(BigDecimal.valueOf(100), purchasePrice);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_validInput_LPKN0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(1);
    assertEquals(1, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_nullInput_CEQb1() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(null);
    assertNull(holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_invalidInput_VkDn2() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(-1);
    assertEquals(-1, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_zeroInput_sWDF3() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(0);
    assertEquals(0, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_maxValueInput_wywW4() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_minValueInput_bJYR5() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_ValidInput_AeUo0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal price = new BigDecimal(100.00);
    holdingData.setPrice(price);
    assertEquals(price, holdingData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_NullInput_XWYp1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal price = null;
    holdingData.setPrice(price);
    assertNull(holdingData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_InvalidInput_lvdT2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal price = new BigDecimal(-100.00);
    holdingData.setPrice(price);
    assertEquals(price, holdingData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_ZeroInput_NmVf3() {
    HoldingData holdingData = new HoldingData();
    BigDecimal price = new BigDecimal(0.00);
    holdingData.setPrice(price);
    assertEquals(price, holdingData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_MaxValueInput_NShd4() {
    HoldingData holdingData = new HoldingData();
    BigDecimal price = new BigDecimal(Double.MAX_VALUE);
    holdingData.setPrice(price);
    assertEquals(price, holdingData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_MinValueInput_diWX5() {
    HoldingData holdingData = new HoldingData();
    BigDecimal price = new BigDecimal(Double.MIN_VALUE);
    holdingData.setPrice(price);
    assertEquals(price, holdingData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGain_uikG0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = new BigDecimal(100.0);
    holdingData.setGain(gain);
    assertEquals(gain, holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainWithZero_upvo1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = new BigDecimal(0.0);
    holdingData.setGain(gain);
    assertEquals(gain, holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainWithNegative_UyIy2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = new BigDecimal(-100.0);
    holdingData.setGain(gain);
    assertEquals(gain, holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainWithNull_LQST3() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = null;
    holdingData.setGain(gain);
    assertNull(holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasis_Null_zGwn0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setBasis(null);
    assertNull(holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasis_NonNull_uIJq1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = new BigDecimal(100);
    holdingData.setBasis(basis);
    assertEquals(basis, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasis_Zero_KZQM2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = new BigDecimal(0);
    holdingData.setBasis(basis);
    assertEquals(basis, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasis_Negative_RqfQ3() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = new BigDecimal(-100);
    holdingData.setBasis(basis);
    assertEquals(basis, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasis_MaxValue_VyGD5() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = new BigDecimal(Double.MAX_VALUE);
    holdingData.setBasis(basis);
    assertEquals(basis, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasis_MinValue_tLyG6() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = new BigDecimal(Double.MIN_VALUE);
    holdingData.setBasis(basis);
    assertEquals(basis, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasis_Random_ukRD10() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = new BigDecimal(Math.random() * 100);
    holdingData.setBasis(basis);
    assertEquals(basis, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_kqSd0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(10.0);
    assertEquals(10.0, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithNegativeValue_UNLl1() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(-10.0);
    assertEquals(-10.0, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithZeroValue_SqPb2() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(0.0);
    assertEquals(0.0, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithMaxValue_xhUU4() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(Double.MAX_VALUE);
    assertEquals(Double.MAX_VALUE, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithMinValue_TaQl5() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(Double.MIN_VALUE);
    assertEquals(Double.MIN_VALUE, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithNaN_qupO6() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(Double.NaN);
    assertEquals(Double.NaN, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithInfinity_mZmq7() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(Double.POSITIVE_INFINITY);
    assertEquals(Double.POSITIVE_INFINITY, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasisWithNullValue_gAHN4() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = holdingData.getBasis();
    assertNull(basis);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValue_yBrm0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(100.0);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithNull_DsAX1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = null;
    holdingData.setMarketValue(marketValue);
    assertEquals(null, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithZero_BGpZ2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(0.0);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithNegative_fMNK3() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(-100.0);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithMaxValue_klab4() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(Double.MAX_VALUE);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithMinValue_mkVO5() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(Double.MIN_VALUE);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithMaxValueAndMinValue_sctv8() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(Double.MAX_VALUE);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
    marketValue = new BigDecimal(Double.MIN_VALUE);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithMaxValueAndMinValue_sctv8_1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(Double.MAX_VALUE);
    holdingData.setMarketValue(marketValue);
    marketValue = new BigDecimal(Double.MIN_VALUE);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_ValidStringInput_sNjh10_cJUA0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal price = new BigDecimal("100.00");
    holdingData.setMarketValue(price);
    assertEquals(price, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_EmptyStringInput_niVi12_qCPy0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal price = new BigDecimal("0.0");
    holdingData.setPrice(price);
    assertEquals(price, holdingData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuoteIDDifferent_mWOf6_DBSG0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuoteID("12345");
    holdingData.setQuoteID("67890");
    assertEquals("67890", holdingData.getQuoteID());
  }
}