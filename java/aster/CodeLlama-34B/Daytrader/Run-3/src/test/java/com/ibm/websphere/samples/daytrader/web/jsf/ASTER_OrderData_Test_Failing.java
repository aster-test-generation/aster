/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderData_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_yLtm0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    BigDecimal price = orderData.getPrice();
    assertNull(new BigDecimal(10.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullOrderData_OGze7() {
    OrderData orderData = null;
    Date openDate = null;
    assertEquals(openDate, orderData.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderTypeWithInvalidValue_dUZh2_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("invalid");
    assertEquals("limit", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithInvalidValue_SHXi2_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setPrice(new BigDecimal(-1.0));
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_yLtm0_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    BigDecimal price = orderData.getPrice();
    assertEquals(new BigDecimal(10.0), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_nNOM0_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    BigDecimal total = orderData.getTotal();
    assertEquals(new BigDecimal(100.0), total);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalWithZeroQuantity_NNrA1_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 0.0, "AAPL");
    BigDecimal total = orderData.getTotal();
    assertEquals(new BigDecimal(0.0), total);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderIDWithInvalidOrderID_bcyB2_fid1() {
    OrderData orderData = new OrderData(-1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertNull(orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderIDWithNullOrderData_WBwn5_fid1() {
    OrderData orderData = null;
    assertNull(orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullOrderData_OGze7_fid1() {
    OrderData orderData = null;
    Date openDate = orderData.getOpenDate();
    assertNull(openDate);
  }
}