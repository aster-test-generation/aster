/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.transaction.RollbackException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Failing {
  private AccountProfileDataBean profile;
  @Mock
  private AccountDataBean account;
  private OrderDataBean orderDataBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_OqCB0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user1";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    HoldingDataBean holdingDataBean = holdings.iterator().next();
    assertNotNull(holdingDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_OqCB0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user1";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    HoldingDataBean holdingDataBean = holdings.iterator().next();
    assertEquals(1, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_OqCB0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user1";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    HoldingDataBean holdingDataBean = holdings.iterator().next();
    assertEquals(userID, holdingDataBean.getAccount().getProfile().getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_sLFO1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalid_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_sLFO1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalid_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_FBAr2_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_FBAr2_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_cEmm0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_cEmm0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getOpenTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_cEmm0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_cEmm0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_cEmm0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_cEmm0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryWithRandomInstance_ESuw1_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getTopGainers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryWithRandomInstance_ESuw1_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals(1, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals(new BigDecimal(1000), account.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals(new BigDecimal(1000), account.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_9() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("password", account.getProfile().getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_11() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("address", account.getProfile().getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_12() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals("email", account.getProfile().getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_13() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("creditcard", account.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_mGQj0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData(userID);
    assertNotNull(accountProfileDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_mGQj0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData(userID);
    assertNotNull(accountProfileDataBean.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_mGQj0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData(userID);
    assertNotNull(accountProfileDataBean.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_mGQj0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData(userID);
    assertNotNull(accountProfileDataBean.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_mGQj0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData(userID);
    assertNotNull(accountProfileDataBean.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_mGQj0_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData(userID);
    assertNotNull(accountProfileDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithInvalidUserID_jGyv1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("invalid_user_id");
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(accountProfileDataBean.getUserID());
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithInvalidUserID_jGyv1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("invalid_user_id");
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(accountProfileDataBean.getUserID());
    assertEquals(orders, Collections.emptyList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullUserID_nHrQ2_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID(null);
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(accountProfileDataBean.getUserID());
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullUserID_nHrQ2_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID(null);
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(accountProfileDataBean.getUserID());
    assertNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChange1_AYCK0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("ABC", "ABC Company", 100, BigDecimal.valueOf(10.0), BigDecimal.valueOf(9.0), BigDecimal.valueOf(8.0), BigDecimal.valueOf(11.0), 10.0);
    BigDecimal oldPrice = BigDecimal.valueOf(9.0);
    BigDecimal changeFactor = BigDecimal.valueOf(0.1);
    double sharesTraded = 100.0;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(BigDecimal.valueOf(10.0), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChange1_AYCK0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("ABC", "ABC Company", 100, BigDecimal.valueOf(10.0), BigDecimal.valueOf(9.0), BigDecimal.valueOf(8.0), BigDecimal.valueOf(11.0), 10.0);
    BigDecimal oldPrice = BigDecimal.valueOf(9.0);
    BigDecimal changeFactor = BigDecimal.valueOf(0.1);
    double sharesTraded = 100.0;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(BigDecimal.valueOf(9.0), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChange1_AYCK0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("ABC", "ABC Company", 100, BigDecimal.valueOf(10.0), BigDecimal.valueOf(9.0), BigDecimal.valueOf(8.0), BigDecimal.valueOf(11.0), 10.0);
    BigDecimal oldPrice = BigDecimal.valueOf(9.0);
    BigDecimal changeFactor = BigDecimal.valueOf(0.1);
    double sharesTraded = 100.0;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(BigDecimal.valueOf(9.0), quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChange1_AYCK0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("ABC", "ABC Company", 100, BigDecimal.valueOf(10.0), BigDecimal.valueOf(9.0), BigDecimal.valueOf(8.0), BigDecimal.valueOf(11.0), 10.0);
    BigDecimal oldPrice = BigDecimal.valueOf(9.0);
    BigDecimal changeFactor = BigDecimal.valueOf(0.1);
    double sharesTraded = 100.0;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(BigDecimal.valueOf(11.0), quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChange1_AYCK0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("ABC", "ABC Company", 100, BigDecimal.valueOf(10.0), BigDecimal.valueOf(9.0), BigDecimal.valueOf(8.0), BigDecimal.valueOf(11.0), 10.0);
    BigDecimal oldPrice = BigDecimal.valueOf(9.0);
    BigDecimal changeFactor = BigDecimal.valueOf(0.1);
    double sharesTraded = 100.0;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(100.0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChange1_AYCK0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("ABC", "ABC Company", 100, BigDecimal.valueOf(10.0), BigDecimal.valueOf(9.0), BigDecimal.valueOf(8.0), BigDecimal.valueOf(11.0), 10.0);
    BigDecimal oldPrice = BigDecimal.valueOf(9.0);
    BigDecimal changeFactor = BigDecimal.valueOf(0.1);
    double sharesTraded = 100.0;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(BigDecimal.valueOf(0.1), changeFactor);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChange1_AYCK0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("ABC", "ABC Company", 100, BigDecimal.valueOf(10.0), BigDecimal.valueOf(9.0), BigDecimal.valueOf(8.0), BigDecimal.valueOf(11.0), 10.0);
    BigDecimal oldPrice = BigDecimal.valueOf(9.0);
    BigDecimal changeFactor = BigDecimal.valueOf(0.1);
    double sharesTraded = 100.0;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(100.0, sharesTraded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChange2_pYpN1_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("ABC", "ABC Company", 100, BigDecimal.valueOf(10.0), BigDecimal.valueOf(9.0), BigDecimal.valueOf(8.0), BigDecimal.valueOf(11.0), 10.0);
    BigDecimal oldPrice = BigDecimal.valueOf(9.0);
    BigDecimal changeFactor = BigDecimal.valueOf(0.1);
    double sharesTraded = 100.0;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(BigDecimal.valueOf(8.0), quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChange3_phkU2_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("ABC", "ABC Company", 100, BigDecimal.valueOf(10.0), BigDecimal.valueOf(9.0), BigDecimal.valueOf(8.0), BigDecimal.valueOf(11.0), 10.0);
    BigDecimal oldPrice = BigDecimal.valueOf(9.0);
    BigDecimal changeFactor = BigDecimal.valueOf(0.1);
    double sharesTraded = 100.0;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(BigDecimal.valueOf(9.9), quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnWithZeroNetValue_Yhdd3() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 1000.0;
    double netValue = -1.0;
    double expectedIR = -1.0;
    double actualIR = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(expectedIR, actualIR, -1.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_Yezq0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> quotes = tradeSLSBBean.getAllQuotes();
    for (QuoteDataBean quote : quotes) {
    }
    assertNotNull(quotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_Yezq0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> quotes = tradeSLSBBean.getAllQuotes();
    for (QuoteDataBean quote : quotes) {
    }
    assertEquals(100, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithEmptyResult_BoBn1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> quotes = tradeSLSBBean.getAllQuotes();
    assertNotNull(quotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithEmptyResult_BoBn1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> quotes = tradeSLSBBean.getAllQuotes();
    assertEquals(0, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_OqCB0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user1";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
    assertEquals(1, holdings.size());
    HoldingDataBean holdingDataBean = holdings.iterator().next();
    assertEquals(userID, holdingDataBean.getAccount().getProfile().getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_FBAr2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_cEmm0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertNotNull(marketSummaryDataBean.getOpenTSIA());
    assertNotNull(marketSummaryDataBean.getGainPercent());
    assertNotNull(marketSummaryDataBean.getSummaryDate());
    assertNotNull(marketSummaryDataBean.getTSIA());
    assertNotNull(marketSummaryDataBean.getVolume());
    assertNotNull(marketSummaryDataBean.getTopGainers());
    assertNotNull(marketSummaryDataBean.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryWithNullInstance_ihZw2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNull(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals(0, account.getLoginCount());
    assertEquals(0, account.getLogoutCount());
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getCreationDate());
    assertEquals(new BigDecimal(1000), account.getBalance());
    assertEquals(new BigDecimal(1000), account.getOpenBalance());
    assertEquals("userID", account.getProfileID());
    assertNotNull(account.getProfile());
    assertEquals("password", account.getProfile().getPassword());
    assertEquals("fullname", account.getProfile().getFullName());
    assertEquals("address", account.getProfile().getAddress());
    assertEquals("email", account.getProfile().getEmail());
    assertEquals("creditcard", account.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithInvalidUserID_andu1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("invalidUserID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_mGQj0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData(userID);
    assertNotNull(accountProfileDataBean);
    assertEquals(userID, accountProfileDataBean.getUserID());
    assertNotNull(accountProfileDataBean.getFullName());
    assertNotNull(accountProfileDataBean.getEmail());
    assertNotNull(accountProfileDataBean.getAddress());
    assertNotNull(accountProfileDataBean.getPassword());
    assertNotNull(accountProfileDataBean.getCreditCard());
    assertNotNull(accountProfileDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithInvalidUserID_jGyv1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("invalid_user_id");
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(accountProfileDataBean.getUserID());
    assertNotNull(orders);
    assertEquals(orders.size(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullUserID_nHrQ2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID(null);
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(accountProfileDataBean.getUserID());
    assertNotNull(orders);
    assertEquals(orders.size(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChange1_AYCK0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("ABC", "ABC Company", 100, BigDecimal.valueOf(10.0), BigDecimal.valueOf(9.0), BigDecimal.valueOf(8.0), BigDecimal.valueOf(11.0), 10.0);
    BigDecimal oldPrice = BigDecimal.valueOf(9.0);
    BigDecimal changeFactor = BigDecimal.valueOf(0.1);
    double sharesTraded = 100.0;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(BigDecimal.valueOf(10.0), quote.getPrice());
    assertEquals(BigDecimal.valueOf(9.0), oldPrice);
    assertEquals(BigDecimal.valueOf(8.0), quote.getLow());
    assertEquals(BigDecimal.valueOf(11.0), quote.getHigh());
    assertEquals(100.0, quote.getVolume());
    assertEquals(BigDecimal.valueOf(0.1), changeFactor);
    assertEquals(100.0, sharesTraded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnWithZeroInvestment_WlQe2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 0.0;
    double netValue = 1100.0;
    double expectedIR = 0.0;
    double actualIR = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(expectedIR, actualIR, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnWithZeroNetValue_Yhdd3_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 1000.0;
    double netValue = 0.0;
    double expectedIR = 0.0;
    double actualIR = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(expectedIR, actualIR, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnWithNegativeInvestment_OUWq4_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = -1000.0;
    double netValue = 1100.0;
    double expectedIR = -0.1;
    double actualIR = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(expectedIR, actualIR, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnWithNegativeNetValue_wRYm5_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 1000.0;
    double netValue = -1100.0;
    double expectedIR = -0.1;
    double actualIR = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(expectedIR, actualIR, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_Yezq0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> quotes = tradeSLSBBean.getAllQuotes();
    assertNotNull(quotes);
    assertEquals(100, quotes.size());
    for (QuoteDataBean quote : quotes) {
      assertNotNull(quote.getSymbol());
      assertNotNull(quote.getPrice());
      assertNotNull(quote.getVolume());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithEmptyResult_BoBn1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> quotes = tradeSLSBBean.getAllQuotes();
    assertNotNull(quotes);
    assertEquals(0, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithInvalidQuery_wJRc2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      tradeSLSBBean.getAllQuotes();
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertTrue(e instanceof IllegalArgumentException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_validSymbol_validChangeFactor_validSharesTraded_IGfH0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(symbol, quote.getSymbol());
    assertEquals(changeFactor.multiply(new BigDecimal("1.5")).setScale(2, BigDecimal.ROUND_HALF_UP), quote.getPrice());
    assertEquals(changeFactor.multiply(new BigDecimal("1.5")).setScale(2, BigDecimal.ROUND_HALF_UP).subtract(new BigDecimal("1.5")).doubleValue(), quote.getChange(), 0.0001);
    assertEquals(sharesTraded, quote.getVolume(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_validSymbol_validChangeFactor_invalidSharesTraded_gdUK1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = -100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(symbol, quote.getSymbol());
    assertEquals(changeFactor.multiply(new BigDecimal("1.5")).setScale(2, BigDecimal.ROUND_HALF_UP), quote.getPrice());
    assertEquals(changeFactor.multiply(new BigDecimal("1.5")).setScale(2, BigDecimal.ROUND_HALF_UP).subtract(new BigDecimal("1.5")).doubleValue(), quote.getChange(), 0.0001);
    assertEquals(0, quote.getVolume(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_validSymbol_invalidChangeFactor_validSharesTraded_VVLS2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("0");
    double sharesTraded = 100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(symbol, quote.getSymbol());
    assertEquals(new BigDecimal("0"), quote.getPrice());
    assertEquals(0, quote.getChange(), 0.0001);
    assertEquals(sharesTraded, quote.getVolume(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_invalidSymbol_validChangeFactor_validSharesTraded_kvSB3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "INVALID";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(symbol, quote.getSymbol());
    assertEquals(new BigDecimal("0"), quote.getPrice());
    assertEquals(0, quote.getChange(), 0.0001);
    assertEquals(sharesTraded, quote.getVolume(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithInvalidSymbol_tHIA1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("INVALID");
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithNullSymbol_oETJ2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote(null);
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithEmptySymbol_XKYQ3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("");
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_gqhF0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal(123.45);
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertNotNull(quote);
    assertEquals(symbol, quote.getSymbol());
    assertEquals(companyName, quote.getCompanyName());
    assertEquals(price, quote.getPrice());
    assertEquals(price, quote.getOpen());
    assertEquals(price, quote.getLow());
    assertEquals(price, quote.getHigh());
    assertEquals(0, quote.getChange());
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_NzYN1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = null;
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal(123.45);
    try {
      tradeSLSBBean.createQuote(symbol, companyName, price);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Symbol cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_DvLn2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = null;
    BigDecimal price = new BigDecimal(123.45);
    try {
      tradeSLSBBean.createQuote(symbol, companyName, price);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Company name cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_XaFI3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = null;
    try {
      tradeSLSBBean.createQuote(symbol, companyName, price);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Price cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNegativePrice_YPXV4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal(-123.45);
    try {
      tradeSLSBBean.createQuote(symbol, companyName, price);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Price cannot be negative", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithZeroPrice_LcEa5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal(0);
    try {
      tradeSLSBBean.createQuote(symbol, companyName, price);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Price cannot be zero", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_ETrF0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
    assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
    assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullUserID_dCyj1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean(null, "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertNull(updatedProfileData.getUserID());
    assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
    assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullPassword_LTzT2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", null, "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
    assertNull(updatedProfileData.getPassword());
    assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullFullName_Ireh3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password", null, "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
    assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
    assertNull(updatedProfileData.getFullName());
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_userID_TvRj0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("user1");
    assertEquals(1, closedOrders.size());
    assertEquals("closed", closedOrders.iterator().next().getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_userID_longRun_RRhl1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("user1");
    assertEquals(1, closedOrders.size());
    assertEquals("completed", closedOrders.iterator().next().getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_InvalidUserID_shYX1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalid_user";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid user ID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_InvalidSymbol_VGKn2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "test_user";
    String symbol = "INVALID_SYMBOL";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid symbol", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_InvalidQuantity_xuSb3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "test_user";
    String symbol = "GOOG";
    double quantity = -100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid quantity", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellInvalidQuantity_fLyY4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_OqCB0_1_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user1";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    HoldingDataBean holdingDataBean = holdings.iterator().next();
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_sLFO1_2_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalid_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_FBAr2_2_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_2_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(0, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_3_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(0, account.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_4_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_5_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new BigDecimal(1000), account.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_6_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new BigDecimal(1000), account.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_7_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("userID", account.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_8_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_10_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("fullname", account.getProfile().getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_Njfe0_12_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("email", account.getProfile().getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_mGQj0_2_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData(userID);
    assertEquals(userID, accountProfileDataBean.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_mGQj0_6_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData(userID);
    assertNotNull(accountProfileDataBean.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithInvalidUserID_jGyv1_2_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("invalid_user_id");
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(accountProfileDataBean.getUserID());
    assertEquals(orders.size(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullUserID_nHrQ2_2_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID(null);
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(accountProfileDataBean.getUserID());
    assertEquals(orders.size(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChange1_AYCK0_2_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("ABC", "ABC Company", 100, BigDecimal.valueOf(10.0), BigDecimal.valueOf(9.0), BigDecimal.valueOf(8.0), BigDecimal.valueOf(11.0), 10.0);
    BigDecimal oldPrice = BigDecimal.valueOf(9.0);
    BigDecimal changeFactor = BigDecimal.valueOf(0.1);
    double sharesTraded = 100.0;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(BigDecimal.valueOf(9.0), oldPrice);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChange1_AYCK0_3_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("ABC", "ABC Company", 100, BigDecimal.valueOf(10.0), BigDecimal.valueOf(9.0), BigDecimal.valueOf(8.0), BigDecimal.valueOf(11.0), 10.0);
    BigDecimal oldPrice = BigDecimal.valueOf(9.0);
    BigDecimal changeFactor = BigDecimal.valueOf(0.1);
    double sharesTraded = 100.0;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(BigDecimal.valueOf(8.0), quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_validSymbol_validChangeFactor_validSharesTraded_IGfH0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(symbol, quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_validSymbol_validChangeFactor_validSharesTraded_IGfH0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(changeFactor.multiply(new BigDecimal("1.5")).setScale(2, BigDecimal.ROUND_HALF_UP), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_validSymbol_validChangeFactor_validSharesTraded_IGfH0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(changeFactor.multiply(new BigDecimal("1.5")).setScale(2, BigDecimal.ROUND_HALF_UP).subtract(new BigDecimal("1.5")).doubleValue(), quote.getChange(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_validSymbol_validChangeFactor_validSharesTraded_IGfH0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(sharesTraded, quote.getVolume(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_validSymbol_validChangeFactor_invalidSharesTraded_gdUK1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = -100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(symbol, quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_validSymbol_validChangeFactor_invalidSharesTraded_gdUK1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = -100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(changeFactor.multiply(new BigDecimal("1.5")).setScale(2, BigDecimal.ROUND_HALF_UP), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_validSymbol_validChangeFactor_invalidSharesTraded_gdUK1_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = -100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(changeFactor.multiply(new BigDecimal("1.5")).setScale(2, BigDecimal.ROUND_HALF_UP).subtract(new BigDecimal("1.5")).doubleValue(), quote.getChange(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_validSymbol_validChangeFactor_invalidSharesTraded_gdUK1_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = -100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(0, quote.getVolume(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_validSymbol_invalidChangeFactor_validSharesTraded_VVLS2_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("0");
    double sharesTraded = 100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(symbol, quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_validSymbol_invalidChangeFactor_validSharesTraded_VVLS2_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("0");
    double sharesTraded = 100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(new BigDecimal("0"), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_validSymbol_invalidChangeFactor_validSharesTraded_VVLS2_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("0");
    double sharesTraded = 100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(0, quote.getChange(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_validSymbol_invalidChangeFactor_validSharesTraded_VVLS2_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("0");
    double sharesTraded = 100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(sharesTraded, quote.getVolume(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_invalidSymbol_validChangeFactor_validSharesTraded_kvSB3_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "INVALID";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(symbol, quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_invalidSymbol_validChangeFactor_validSharesTraded_kvSB3_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "INVALID";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(new BigDecimal("0"), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_invalidSymbol_validChangeFactor_validSharesTraded_kvSB3_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "INVALID";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(0, quote.getChange(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_invalidSymbol_validChangeFactor_validSharesTraded_kvSB3_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "INVALID";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(sharesTraded, quote.getVolume(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_gqhF0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal(123.45);
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertNotNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_gqhF0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal(123.45);
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(symbol, quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_gqhF0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal(123.45);
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(companyName, quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_gqhF0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal(123.45);
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(price, quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_gqhF0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal(123.45);
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(price, quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_gqhF0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal(123.45);
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(price, quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_gqhF0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal(123.45);
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(price, quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_gqhF0_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal(123.45);
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(0, quote.getChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_gqhF0_9() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal(123.45);
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_ETrF0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_ETrF0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_ETrF0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_ETrF0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_ETrF0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullUserID_dCyj1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean(null, "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertNull(updatedProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullUserID_dCyj1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean(null, "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullUserID_dCyj1_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean(null, "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullUserID_dCyj1_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean(null, "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullUserID_dCyj1_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean(null, "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullPassword_LTzT2_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", null, "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullPassword_LTzT2_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", null, "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertNull(updatedProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullPassword_LTzT2_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", null, "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullPassword_LTzT2_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", null, "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullPassword_LTzT2_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", null, "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullFullName_Ireh3_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password", null, "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullFullName_Ireh3_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password", null, "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullFullName_Ireh3_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password", null, "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertNull(updatedProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullFullName_Ireh3_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password", null, "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullFullName_Ireh3_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password", null, "123 Main St", "johndoe@example.com", "1234567890");
    AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_userID_TvRj0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("user1");
    assertEquals(1, closedOrders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_userID_TvRj0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("user1");
    assertEquals("closed", closedOrders.iterator().next().getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_userID_longRun_RRhl1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("user1");
    assertEquals("completed", closedOrders.iterator().next().getOrderStatus());
  }

  @Test
  public void testCompleteOrderAsync_eBcg0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(1, true);
    assertNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_orderID_twoPhase_null_RRMq1_SOge0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = null;
    boolean twoPhase = false;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
    assertNull(orderID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_orderID_twoPhase_null_RRMq1_SOge0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = null;
    boolean twoPhase = false;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
    assertFalse(twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginEmptyUsername_WDUi2_ZNdy0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      AccountDataBean account = tradeSLSBBean.login("", "password1");
      assertNull(account);
    } catch (RollbackException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_NMpw0_KBtp0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_NMpw0_KBtp0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_NMpw0_KBtp0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals(100, quoteDataBean.getPrice().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_NMpw0_KBtp0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals(100, quoteDataBean.getOpen().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_NMpw0_KBtp0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals(100, quoteDataBean.getLow().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_NMpw0_KBtp0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals(100, quoteDataBean.getHigh().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_NMpw0_KBtp0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals(100.0, quoteDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginNullUsername_nsXC3_dxbi0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      AccountDataBean account = tradeSLSBBean.login(null, "password1");
      assertNull(account);
    } catch (RollbackException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginEmptyPassword_BzVL4_BQba0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      AccountDataBean account = tradeSLSBBean.login("user1", "");
      assertNull(account);
    } catch (RollbackException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_ValidSymbol_ZBuF0_Dsus0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      QuoteDataBean quoteData = tradeSLSBBean.pingTwoPhase("GOOG");
      assertNotNull(quoteData);
      assertEquals("GOOG", quoteData.getSymbol());
      assertTrue(quoteData.getPrice().compareTo(BigDecimal.ZERO) > 0);
      assertTrue(quoteData.getOpen().compareTo(BigDecimal.ZERO) > 0);
      assertTrue(quoteData.getLow().compareTo(BigDecimal.ZERO) > 0);
      assertTrue(quoteData.getHigh().compareTo(BigDecimal.ZERO) > 0);
      assertTrue(quoteData.getVolume() > 0);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}