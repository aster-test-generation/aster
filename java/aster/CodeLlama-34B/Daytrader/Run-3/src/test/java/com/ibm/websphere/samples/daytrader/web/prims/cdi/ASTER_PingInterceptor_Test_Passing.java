/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.cdi;

import java.util.concurrent.TimeUnit;
import javax.interceptor.InvocationContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_PingInterceptor_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testMethodInterceptor_UjKJ0() throws Exception {
    PingInterceptor pingInterceptor = new PingInterceptor();
    InvocationContext ctx = mock(InvocationContext.class);
    when(ctx.proceed()).thenReturn(null);
    Object result = pingInterceptor.methodInterceptor(ctx);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testMethodInterceptorWithException_eooE1() throws Exception {
    PingInterceptor pingInterceptor = new PingInterceptor();
    InvocationContext ctx = mock(InvocationContext.class);
    when(ctx.proceed()).thenThrow(new Exception());
    try {
      pingInterceptor.methodInterceptor(ctx);
      fail("Exception should be thrown");
    } catch (Exception e) {
      assertTrue(e instanceof Exception);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testMethodInterceptorWithNonNullResult_kMQi2() throws Exception {
    PingInterceptor pingInterceptor = new PingInterceptor();
    InvocationContext ctx = mock(InvocationContext.class);
    when(ctx.proceed()).thenReturn("result");
    Object result = pingInterceptor.methodInterceptor(ctx);
    assertEquals("result", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testMethodInterceptorWithDifferentResult_xaeV4() throws Exception {
    PingInterceptor pingInterceptor = new PingInterceptor();
    InvocationContext ctx = mock(InvocationContext.class);
    when(ctx.proceed()).thenReturn("different result");
    Object result = pingInterceptor.methodInterceptor(ctx);
    assertNotEquals("result", result);
  }
}