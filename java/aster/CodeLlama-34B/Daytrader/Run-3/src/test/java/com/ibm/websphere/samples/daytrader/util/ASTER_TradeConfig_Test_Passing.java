/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Passing {
  private static List<Integer> deck = null;
  private static Random r0 = new Random();
  private static int card = 0;
  private TradeConfig tradeConfig;
  private TradeConfig config;
  private static int scenarioCount = 0;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterations_uEAU0() {
    int expected = -5;
    int actual = TradeConfig.getPrimIterations();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterationsWithDifferentValue_IEWG1() {
    int expected = 20;
    int actual = TradeConfig.getPrimIterations();
    assertNotEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_lzZF0() {
    float result = TradeConfig.rndFloat(10);
    assertTrue(result >= 0.0f && result <= 10.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloatWithNegativeInput_ETGa1() {
    float result = TradeConfig.rndFloat(-10);
    assertTrue(result >= -10.0f && result <= 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloatWithZeroInput_PJIF2() {
    float result = TradeConfig.rndFloat(0);
    assertEquals(0.0f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloatWithLargeInput_uLTA3() {
    float result = TradeConfig.rndFloat(1000000);
    assertTrue(result >= 0.0f && result <= 1000000.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixes_iejL0() {
    int[][] expected = {{1, 2}, {3, 4}, {5, 6}};
    int[][] actual = TradeConfig.getScenarioMixes();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetJDBCDriverNeedsGlobalTransation_True_OnNS0() {
    TradeConfig.setJDBCDriverNeedsGlobalTransation(true);
    assertTrue(TradeConfig.JDBCDriverNeedsGlobalTransation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetJDBCDriverNeedsGlobalTransation_False_ECki1() {
    TradeConfig.setJDBCDriverNeedsGlobalTransation(false);
    assertFalse(TradeConfig.JDBCDriverNeedsGlobalTransation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_HOLDINGS_tDbS0() {
    int maxHoldings = 10;
    TradeConfig.setMAX_HOLDINGS(maxHoldings);
    assertEquals(maxHoldings, TradeConfig.getMAX_HOLDINGS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_HOLDINGSWithZeroValue_eDok2() {
    int maxHoldings = 0;
    TradeConfig.setMAX_HOLDINGS(maxHoldings);
    assertEquals(0, TradeConfig.getMAX_HOLDINGS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_HOLDINGSWithLargeValue_urZG3() {
    int maxHoldings = 1000;
    TradeConfig.setMAX_HOLDINGS(maxHoldings);
    assertEquals(1000, TradeConfig.getMAX_HOLDINGS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_HOLDINGSWithInvalidValue_gqvh4() {
    int maxHoldings = -1;
    TradeConfig.setMAX_HOLDINGS(maxHoldings);
    assertEquals(-1, TradeConfig.getMAX_HOLDINGS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCountMultipleTimes_ToRz1() {
    TradeConfig.incrementScenarioCount();
    TradeConfig.incrementScenarioCount();
    assertEquals(-8, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeMode_QHYJ0() {
    TradeConfig.setRunTimeMode(1);
    assertEquals(1, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeModeWithInvalidValue_BvJW1() {
    TradeConfig.setRunTimeMode(-1);
    assertEquals(-1, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeModeWithValidValue_bgSW2() {
    TradeConfig.setRunTimeMode(10);
    assertEquals(10, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeModeWithNegativeValue_FWvQ3() {
    TradeConfig.setRunTimeMode(-1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeModeWithZeroValue_SepK4() {
    TradeConfig.setRunTimeMode(0);
    assertEquals(0, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeModeWithAlreadySetValue_MAXC6() {
    TradeConfig.setRunTimeMode(10);
    TradeConfig.setRunTimeMode(10);
    assertEquals(10, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_QUOTES_qRhN0() {
    int expected = 10;
    int actual = TradeConfig.getMAX_QUOTES();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_QUOTES_IBgE1_1() {
    int expected = 10;
    int actual = TradeConfig.getMAX_QUOTES();
    expected = 20;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 30;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 40;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 50;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 60;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 70;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 80;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 90;
    actual = TradeConfig.getMAX_QUOTES();
    expected = -10;
    actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_QUOTES_IBgE1_2() {
    int expected = 10;
    int actual = TradeConfig.getMAX_QUOTES();
    expected = 20;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 30;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 40;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 50;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 60;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 70;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 80;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 90;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 100;
    actual = TradeConfig.getMAX_QUOTES();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetListQuotePriceChangeFrequency_cpZR0() {
    TradeConfig config = new TradeConfig();
    config.setListQuotePriceChangeFrequency(10);
    assertEquals(10, config.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessModeWithDifferentValues_kPhA1_3() {
    TradeConfig tradeConfig = new TradeConfig();
    int accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    assertEquals(3, accessMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessModeWithInvalidValue_tQJf2_3() {
    TradeConfig tradeConfig = new TradeConfig();
    int accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    assertEquals(2, accessMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalWithDifferentInterval_lDOE1() {
    TradeConfig config = new TradeConfig();
    config.setMarketSummaryInterval(20);
    assertEquals(20, config.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalWithNegativeInterval_FkgE2() {
    TradeConfig config = new TradeConfig();
    config.setMarketSummaryInterval(-1);
    assertEquals(-1, config.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalWithZeroInterval_LkKd3() {
    TradeConfig config = new TradeConfig();
    config.setMarketSummaryInterval(0);
    assertEquals(0, config.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalWithLargeInterval_tvJz4() {
    TradeConfig config = new TradeConfig();
    config.setMarketSummaryInterval(1000);
    assertEquals(1000, config.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_sTBn0() {
    String address = TradeConfig.rndAddress();
    assertTrue(address.matches("\\d+ Oak St."));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterations_EMnB0() {
    int iter = 5;
    TradeConfig.setPrimIterations(iter);
    assertEquals(iter, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterationsWithZeroValue_uQFM2() {
    int iter = 0;
    TradeConfig.setPrimIterations(iter);
    assertEquals(0, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERS_TQam0() {
    int expected = 10;
    int actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERSWithDifferentValue_npCO1() {
    int expected = 20;
    int actual = TradeConfig.getMAX_USERS();
    assertNotEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERSWithInvalidValue_VgBJ3() {
    int expected = -1;
    int actual = TradeConfig.getMAX_USERS();
    assertNotEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERSWithLargeValue_FSED7() {
    int expected = 100;
    int actual = TradeConfig.getMAX_USERS();
    assertNotEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERSWithSmallValue_YKTM8() {
    int expected = 1;
    int actual = TradeConfig.getMAX_USERS();
    assertNotEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryInterval_jDCF0() {
    TradeConfig.setMarketSummaryInterval(10);
    assertEquals(10, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryIntervalWithZero_qaQh1() {
    TradeConfig.setMarketSummaryInterval(0);
    assertEquals(0, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryIntervalWithNegative_whdA2() {
    TradeConfig.setMarketSummaryInterval(-1);
    assertEquals(-1, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryIntervalWithMaxValue_nMss3() {
    TradeConfig.setMarketSummaryInterval(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryIntervalWithMinValue_UDJJ4() {
    TradeConfig.setMarketSummaryInterval(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryIntervalWithRandomValue_REbC5() {
    int randomValue = (int) (Math.random() * (Integer.MAX_VALUE - Integer.MIN_VALUE + 1)) + Integer.MIN_VALUE;
    TradeConfig.setMarketSummaryInterval(randomValue);
    assertEquals(randomValue, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndQuantity_1_aHBm0() {
    float result = TradeConfig.rndQuantity();
    assertTrue(result >= 1.0f && result <= 200.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_QUOTES_gCui0() {
    int expected = 10;
    TradeConfig.setMAX_QUOTES(expected);
    assertEquals(expected, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_QUOTESWithNegativeValue_Aanw1() {
    int expected = -10;
    TradeConfig.setMAX_QUOTES(expected);
    assertEquals(expected, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_QUOTESWithZeroValue_QCLy2() {
    int expected = 0;
    TradeConfig.setMAX_QUOTES(expected);
    assertEquals(expected, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPublishQuotePriceChange_Fnlp0() {
    TradeConfig config = new TradeConfig();
    boolean result = config.getPublishQuotePriceChange();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_HOLDINGS_ConP0() {
    int expected = 10;
    int actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetScenarioCount_sSwI0() {
    TradeConfig config = new TradeConfig();
    config.setScenarioCount(10);
    assertEquals(10, config.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetScenarioCountNegative_kwSV2() {
    TradeConfig config = new TradeConfig();
    config.setScenarioCount(-10);
    assertEquals(-10, config.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetScenarioCountZero_tQIh3() {
    TradeConfig config = new TradeConfig();
    config.setScenarioCount(0);
    assertEquals(0, config.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndPrice_1_ZbMN0() {
    float price = TradeConfig.rndPrice();
    assertTrue(price >= 1.0f && price <= 200.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioCountWithZeroScenarios_CrNd1() {
    int expected = 0;
    int actual = TradeConfig.getScenarioCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Positive_iJrp0() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertTrue(result.doubleValue() > 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBalance_dSKP0() {
    String balance = TradeConfig.rndBalance();
    assertEquals("1000000", balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUpdateQuotePrices_xfDc0() {
    TradeConfig config = new TradeConfig();
    assertTrue(config.getUpdateQuotePrices());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBoolean_False_vfwg1() {
    TradeConfig tradeConfig = new TradeConfig();
    boolean result = tradeConfig.rndBoolean();
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard_EgyW0_1() {
    String creditCard = TradeConfig.rndCreditCard();
    assertNotNull(creditCard);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeNames_OfoV0_1() {
    String[] orderProcessingModeNames = TradeConfig.getOrderProcessingModeNames();
    assertNotNull(orderProcessingModeNames);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeNames_OfoV0_2() {
    String[] orderProcessingModeNames = TradeConfig.getOrderProcessingModeNames();
    assertEquals(3, orderProcessingModeNames.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_float_zero_TAqt2() {
    float f = 0.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("0.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterface_NzwS0() {
    TradeConfig config = new TradeConfig();
    config.setWebInterface(1);
    assertEquals(1, config.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_dCJu0_1() {
    TradeConfig config = new TradeConfig();
    String nextUser = config.rndUserID();
    assertNotNull(nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_dCJu0_2() {
    TradeConfig config = new TradeConfig();
    String nextUser = config.rndUserID();
    assertEquals("uid:0", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserIDWithMaxUsers_LvmS1_1() {
    TradeConfig config = new TradeConfig();
    config.setMAX_USERS(10);
    String nextUser = config.rndUserID();
    assertNotNull(nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDisplayOrderAlertsFalse_GqUA1_siQi0() {
    TradeConfig.setDisplayOrderAlerts(false);
    assertFalse(TradeConfig.getDisplayOrderAlerts());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongRun_False_kYMd1_sUoE0() {
    TradeConfig.setLongRun(false);
    assertFalse(TradeConfig.getLongRun());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongRun_True_Vldh0_uqhF0() {
    TradeConfig.setLongRun(true);
    assertTrue(TradeConfig.getLongRun());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode_ValidValue_zCtH0_tiuf0() {
    int validValue = 1;
    TradeConfig.setOrderProcessingMode(validValue);
    assertEquals(validValue, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPublishQuotePriceChangeTrue_NiSQ0_kurG0() {
    TradeConfig.setPublishQuotePriceChange(true);
    assertTrue(TradeConfig.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccessMode1_DgoY0_tFrp0() {
    TradeConfig.setAccessMode(1);
    assertEquals(1, TradeConfig.getAccessMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccessMode3_bxBR2_qBzS0() {
    TradeConfig.setAccessMode(3);
    assertEquals(3, TradeConfig.getAccessMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccessMode2_hkmg1_TkgO0() {
    TradeConfig.setAccessMode(2);
    assertEquals(2, TradeConfig.getAccessMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUpdateQuotePricesTrue_VxHa0_pdQz0() {
    TradeConfig.setUpdateQuotePrices(true);
    assertTrue(TradeConfig.getUpdateQuotePrices());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUpdateQuotePricesFalse_fAPM1_zeci0() {
    TradeConfig.setUpdateQuotePrices(false);
    assertFalse(TradeConfig.getUpdateQuotePrices());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERSWithZeroValue_ZOMm2_VPvq0() {
    int maxUsers = 0;
    TradeConfig.setMAX_USERS(maxUsers);
    assertEquals(0, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_sIeS0_eqxb0() {
    int maxUsers = 10;
    TradeConfig.setMAX_USERS(maxUsers);
    assertEquals(maxUsers, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDisplayOrderAlerts_True_GFEB0_MMNz0() {
    TradeConfig.setDisplayOrderAlerts(true);
    assertTrue(TradeConfig.getDisplayOrderAlerts());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_VaaO0() {
    TradeConfig.setMAX_USERS(1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterfaceWithNullValue_jNDe2_qpng0() {
    TradeConfig config = new TradeConfig();
    config.setWebInterface(0);
    assertEquals(0, config.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_osCD0() {
    tradeConfig = new TradeConfig();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_Elyw0() {
    config = new TradeConfig();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_ValidInput_DWVH1() {
    String userID = config.nextUserID();
    assertEquals("uid:0", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequency_fwNE1() {
    int frequency = config.getListQuotePriceChangeFrequency();
    assertEquals(10, frequency);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRandom_GwXI1() {
    double randomNumber = tradeConfig.random();
    assertTrue(randomNumber >= 0.0 && randomNumber <= 1.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserIDWithMaxUsers_LvmS1() {
    TradeConfig config = new TradeConfig();
    config.setMAX_USERS(10);
    String nextUser = config.rndUserID();
    assertNotNull(nextUser);
    assertEquals("uid:0", nextUser);
  }
}