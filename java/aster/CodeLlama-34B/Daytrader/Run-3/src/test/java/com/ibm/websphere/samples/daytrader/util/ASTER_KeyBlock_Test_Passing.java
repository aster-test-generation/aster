/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.ListIterator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_KeyBlock_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSize_minMax_dUvc0() {
    KeyBlock keyBlock = new KeyBlock(1, 10);
    assertEquals(10, keyBlock.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSize_minMax_negative_QVgJ1() {
    KeyBlock keyBlock = new KeyBlock(-10, 10);
    assertEquals(20, keyBlock.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSize_minMax_zero_KarW2() {
    KeyBlock keyBlock = new KeyBlock(0, 10);
    assertEquals(10, keyBlock.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSize_minMax_same_izrm3() {
    KeyBlock keyBlock = new KeyBlock(10, 10);
    assertEquals(0, keyBlock.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSize_minMax_different_azSk4() {
    KeyBlock keyBlock = new KeyBlock(10, 20);
    assertEquals(10, keyBlock.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListIterator_VFgW0_1() {
    KeyBlock keyBlock = new KeyBlock(1, 10);
    ListIterator<Object> iterator = keyBlock.listIterator(1);
    assertNotNull(iterator);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListIterator_VFgW0_2() {
    KeyBlock keyBlock = new KeyBlock(1, 10);
    ListIterator<Object> iterator = keyBlock.listIterator(1);
    assertEquals(1, iterator.nextIndex());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListIterator_VFgW0_3() {
    KeyBlock keyBlock = new KeyBlock(1, 10);
    ListIterator<Object> iterator = keyBlock.listIterator(1);
    assertEquals(10, iterator.previousIndex());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testConstructor_rPam1() {
    KeyBlock keyBlock = new KeyBlock();
    assertNotNull(keyBlock);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSize_minMax_null_ohOl5_wJHY0() {
    KeyBlock keyBlock = new KeyBlock(0, 10);
    assertEquals(0, keyBlock.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSize_minMax_null_null_dijR6_kUkz0() {
    KeyBlock keyBlock = new KeyBlock(0, 0);
    assertEquals(0, keyBlock.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListIterator_VFgW0() {
    KeyBlock keyBlock = new KeyBlock(1, 10);
    ListIterator<Object> iterator = keyBlock.listIterator(1);
    assertNotNull(iterator);
    assertEquals(1, iterator.nextIndex());
    assertEquals(10, iterator.previousIndex());
  }
}