/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.AsyncContext;
import javax.servlet.ReadListener;
import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet31AsyncRead_Test_Failing {
  private static String initTime;
  private static int hitCount;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_HPxZ0() {
    PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
    String actual = servlet.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet", actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_startAsyncThrowsException_zUge1() throws ServletException, IOException {
    PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    AsyncContext ac = mock(AsyncContext.class);
    ServletInputStream input = mock(ServletInputStream.class);
    ReadListener readListener = mock(ReadListener.class);
    when(req.startAsync()).thenThrow(new ServletException("Async start failed"));
    servlet.doPost(req, res);
    verify(res).setContentType("text/html");
    verify(ac, never()).start(any(Runnable.class));
    verify(input, never()).setReadListener(readListener);
    verify(readListener, never()).onDataAvailable();
    verify(readListener, never()).onAllDataRead();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithInvalidString_IFup3_nwcX0() {
    PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
    String actual = servlet.getServletInfo();
    assertEquals("PingServlet31AsyncRead", actual);
  }
}