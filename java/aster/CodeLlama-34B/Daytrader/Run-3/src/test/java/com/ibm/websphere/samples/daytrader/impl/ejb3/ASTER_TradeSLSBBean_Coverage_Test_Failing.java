/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.jms.TextMessage;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.transaction.RollbackException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_TradeSLSBBean_Coverage_Test_Failing {
  private TypedQuery<OrderDataBean> q;
  private EntityManager entityManager;
  private AccountDataBean account;
  private Log log;
  private TextMessage message;
  private TradeConfig tradeConfig;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder1_bKFH0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "orderType";
    double quantity = 10.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder1_bKFH0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "orderType";
    double quantity = 10.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(orderType, order.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder1_bKFH0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "orderType";
    double quantity = 10.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quantity, order.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder1_bKFH0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "orderType";
    double quantity = 10.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), order.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder1_bKFH0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "orderType";
    double quantity = 10.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(TradeConfig.getOrderFee(orderType), order.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder1_bKFH0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "orderType";
    double quantity = 10.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(account, order.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder1_bKFH0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "orderType";
    double quantity = 10.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quote, order.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder1_bKFH0_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "orderType";
    double quantity = 10.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(holding, order.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_UserIDNull_fKWE0() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      tradeSLSBBean.login(null, "password");
    } catch (EJBException e) {
      assertEquals("No such user: null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_UserIDNotFound_Uxkc1() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      tradeSLSBBean.login("userID", "password");
    } catch (EJBException e) {
      assertEquals("No such user: userID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_PasswordNull_TLrX2() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      tradeSLSBBean.login("userID", null);
    } catch (EJBException e) {
      assertEquals("No such user: userID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_Success_OsdV4() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    profile.setAccount(account);
    when(entityManager.find(AccountProfileDataBean.class, "userID")).thenReturn(profile);
    AccountDataBean result = tradeSLSBBean.login("userID", "password");
    assertEquals(account, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_RollbackException_eHCx5() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    profile.setAccount(account);
    when(entityManager.find(AccountProfileDataBean.class, "userID")).thenReturn(profile);
    doThrow(new RollbackException()).when(account).login(anyString());
    try {
      tradeSLSBBean.login("userID", "password");
      fail("Expected RollbackException");
    } catch (RollbackException e) {
      assertEquals("RollbackException", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_EJBException_qXpb6() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    profile.setAccount(account);
    when(entityManager.find(AccountProfileDataBean.class, "userID")).thenReturn(profile);
    doThrow(new EJBException()).when(account).login(anyString());
    try {
      tradeSLSBBean.login("userID", "password");
      fail("Expected EJBException");
    } catch (EJBException e) {
      assertEquals("EJBException", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_orderNotFound_mitq1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    when(entityManager.find(OrderDataBean.class, orderID)).thenReturn(null);
    tradeSLSBBean.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullProfile_iIeQ1_1() {
    String userID = "12345";
    Collection<OrderDataBean> expectedOrders = new ArrayList<>();
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(null);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> actualOrders = tradeSLSBBean.getOrders(userID);
    for (OrderDataBean order : actualOrders) {
    }
    assertNotNull(actualOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullProfile_iIeQ1_2() {
    String userID = "12345";
    Collection<OrderDataBean> expectedOrders = new ArrayList<>();
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(null);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> actualOrders = tradeSLSBBean.getOrders(userID);
    for (OrderDataBean order : actualOrders) {
    }
    assertEquals(expectedOrders.size(), actualOrders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_SCCi0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal("123.45");
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    verify(entityManager).persist(quote);
    verify(log).trace("TradeSLSBBean:createQuote-->" + quote);
    assertNotNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_SCCi0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal("123.45");
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    verify(entityManager).persist(quote);
    verify(log).trace("TradeSLSBBean:createQuote-->" + quote);
    assertEquals(symbol, quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_SCCi0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal("123.45");
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    verify(entityManager).persist(quote);
    verify(log).trace("TradeSLSBBean:createQuote-->" + quote);
    assertEquals(companyName, quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_SCCi0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal("123.45");
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    verify(entityManager).persist(quote);
    verify(log).trace("TradeSLSBBean:createQuote-->" + quote);
    assertEquals(price, quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_SCCi0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal("123.45");
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    verify(entityManager).persist(quote);
    verify(log).trace("TradeSLSBBean:createQuote-->" + quote);
    assertEquals(price, quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_SCCi0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal("123.45");
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    verify(entityManager).persist(quote);
    verify(log).trace("TradeSLSBBean:createQuote-->" + quote);
    assertEquals(price, quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_SCCi0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal("123.45");
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    verify(entityManager).persist(quote);
    verify(log).trace("TradeSLSBBean:createQuote-->" + quote);
    assertEquals(price, quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_SCCi0_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal("123.45");
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    verify(entityManager).persist(quote);
    verify(log).trace("TradeSLSBBean:createQuote-->" + quote);
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_WPKx2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = null;
    String companyName = "Google Inc.";
    BigDecimal price = new BigDecimal("123.45");
    try {
      tradeSLSBBean.createQuote(symbol, companyName, price);
    } catch (EJBException e) {
      verify(log).error("TradeSLSBBean:createQuote -- exception creating Quote", e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_DOQW4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "GOOG";
    String companyName = "Google Inc.";
    BigDecimal price = null;
    try {
      tradeSLSBBean.createQuote(symbol, companyName, price);
    } catch (EJBException e) {
      verify(log).error("TradeSLSBBean:createQuote -- exception creating Quote", e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_TGiP0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword("password123");
    profileData.setFullName("John Doe");
    profileData.setAddress("123 Main St");
    profileData.setCreditCard("1234567890");
    profileData.setEmail("johndoe@example.com");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertEquals(profileData.getUserID(), updatedProfile.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_TGiP0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword("password123");
    profileData.setFullName("John Doe");
    profileData.setAddress("123 Main St");
    profileData.setCreditCard("1234567890");
    profileData.setEmail("johndoe@example.com");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertEquals(profileData.getPassword(), updatedProfile.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_TGiP0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword("password123");
    profileData.setFullName("John Doe");
    profileData.setAddress("123 Main St");
    profileData.setCreditCard("1234567890");
    profileData.setEmail("johndoe@example.com");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertEquals(profileData.getFullName(), updatedProfile.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_TGiP0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword("password123");
    profileData.setFullName("John Doe");
    profileData.setAddress("123 Main St");
    profileData.setCreditCard("1234567890");
    profileData.setEmail("johndoe@example.com");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertEquals(profileData.getAddress(), updatedProfile.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_TGiP0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword("password123");
    profileData.setFullName("John Doe");
    profileData.setAddress("123 Main St");
    profileData.setCreditCard("1234567890");
    profileData.setEmail("johndoe@example.com");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_TGiP0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword("password123");
    profileData.setFullName("John Doe");
    profileData.setAddress("123 Main St");
    profileData.setCreditCard("1234567890");
    profileData.setEmail("johndoe@example.com");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertEquals(profileData.getEmail(), updatedProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullUserID_VHyW1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID(null);
    profileData.setPassword("password123");
    profileData.setFullName("John Doe");
    profileData.setAddress("123 Main St");
    profileData.setCreditCard("1234567890");
    profileData.setEmail("johndoe@example.com");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertNull(updatedProfile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullPassword_fWvF2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword(null);
    profileData.setFullName("John Doe");
    profileData.setAddress("123 Main St");
    profileData.setCreditCard("1234567890");
    profileData.setEmail("johndoe@example.com");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertNull(updatedProfile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullFullName_hHhW3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword("password123");
    profileData.setFullName(null);
    profileData.setAddress("123 Main St");
    profileData.setCreditCard("1234567890");
    profileData.setEmail("johndoe@example.com");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertNull(updatedProfile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_QuoteDataBeanNull_IWbf0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "TEST";
    QuoteDataBean quoteData = null;
    when(entityManager.find(QuoteDataBean.class, symbol)).thenReturn(quoteData);
    QuoteDataBean result = tradeSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteData, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_QuoteDataBeanNotNull_vfMB1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "TEST";
    QuoteDataBean quoteData = new QuoteDataBean();
    when(entityManager.find(QuoteDataBean.class, symbol)).thenReturn(quoteData);
    QuoteDataBean result = tradeSLSBBean.pingTwoPhase(symbol);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell1_TcRz0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell2_SwHu1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell3_LpFE2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell4_cpSM3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertEquals("sell", order.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell5_vBWH4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertEquals("sell", order.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell6_hhFt5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertEquals("sell", order.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell7_lmVF6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertNotNull(order.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_NullCreditCard_McmV7_ZOLI1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", null, BigDecimal.ZERO);
    Assertions.assertNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_whenUserIDIsValid_thenReturnAccountDataBean_JJZJ0_NTaf0_1() {
    String userID = "user123";
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setUserID(userID);
    AccountDataBean account = new AccountDataBean();
    account.setProfile(profile);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean actualAccountData = tradeSLSBBean.getAccountData(userID);
    assertNotNull(actualAccountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_whenUserIDIsValid_thenReturnAccountDataBean_JJZJ0_NTaf0_2() {
    String userID = "user123";
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setUserID(userID);
    AccountDataBean account = new AccountDataBean();
    account.setProfile(profile);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean actualAccountData = tradeSLSBBean.getAccountData(userID);
    assertEquals(profile.getUserID(), actualAccountData.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_whenUserIDIsInvalid_thenReturnNull_maan1_RKop0() {
    String userID = "invalidUserID";
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(null);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean actualAccountData = tradeSLSBBean.getAccountData(userID);
    assertNull(actualAccountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder1_bKFH0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "orderType";
    double quantity = 10.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(order);
    assertEquals(orderType, order.getOrderType());
    assertEquals(quantity, order.getQuantity(), 0.0);
    assertEquals(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), order.getPrice());
    assertEquals(TradeConfig.getOrderFee(orderType), order.getOrderFee());
    assertEquals(account, order.getAccount());
    assertEquals(quote, order.getQuote());
    assertEquals(holding, order.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_TGiP0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword("password123");
    profileData.setFullName("John Doe");
    profileData.setAddress("123 Main St");
    profileData.setCreditCard("1234567890");
    profileData.setEmail("johndoe@example.com");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertEquals(profileData.getUserID(), updatedProfile.getUserID());
    Assertions.assertEquals(profileData.getPassword(), updatedProfile.getPassword());
    Assertions.assertEquals(profileData.getFullName(), updatedProfile.getFullName());
    Assertions.assertEquals(profileData.getAddress(), updatedProfile.getAddress());
    Assertions.assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());
    Assertions.assertEquals(profileData.getEmail(), updatedProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullAddress_GqcS4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword("password123");
    profileData.setFullName("John Doe");
    profileData.setAddress(null);
    profileData.setCreditCard("1234567890");
    profileData.setEmail("johndoe@example.com");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertNull(updatedProfile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell8_xvRk7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertNotNull(order.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_returnNull_UKNx1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = true;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNull(future);
  }
}