/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_jJGA1_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "invalid_user";
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_jJGA1_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "invalid_user";
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_LgMl2_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = null;
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_LgMl2_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = null;
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_lJTG0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    double rnd1 = 10.0;
    double rnd2 = 20.0;
    double result = directSLSBBean.investmentReturn(rnd1, rnd2);
    assertEquals(30.0, result, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnWithZero_FbKH1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    double rnd1 = 0.0;
    double rnd2 = 0.0;
    double result = directSLSBBean.investmentReturn(rnd1, rnd2);
    assertEquals(0.0, result, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnWithNegative_ikQI2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    double rnd1 = -10.0;
    double rnd2 = -20.0;
    double result = directSLSBBean.investmentReturn(rnd1, rnd2);
    assertEquals(-30.0, result, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_Ugia0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_Ugia0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean);
    assertEquals("userID", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_Ugia0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean);
    assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithInvalidUserID_Qxgw1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("invalidUserID", "password");
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithInvalidPassword_Oepo2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "invalidPassword");
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullUserID_CeTF3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login(null, "password");
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullPassword_HGUb4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", null);
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wsut0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("Test Address");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertNotNull(updatedProfileData);
    assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
    assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
    assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
    assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wsut0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("Test Address");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wsut0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("Test Address");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertNotNull(updatedProfileData);
    assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wsut0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("Test Address");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wsut0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("Test Address");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertNotNull(updatedProfileData);
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wsut0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("Test Address");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithInvalidSymbol_flvP1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("INVALID");
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithNullSymbol_HJNy2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote(null);
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_gJMC0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_gJMC0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(newPrice, updatedQuoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_gJMC0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(quoteDataBean.getOpen(), updatedQuoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_gJMC0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(quoteDataBean.getLow(), updatedQuoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_gJMC0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(quoteDataBean.getChange(), updatedQuoteDataBean.getChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_gJMC0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(newPrice, updatedQuoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_gJMC0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
    assertEquals(newPrice, updatedQuoteDataBean.getPrice());
    assertEquals(sharesTraded, updatedQuoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_gJMC0_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(updatedQuoteDataBean.getVolume(), quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_XISM0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_XISM0_12() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountDataWithInvalidUserID_IQGZ1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("invalidUserID");
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountDataWithNullUserID_prpL2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData(null);
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithInvalidUserID_QZiK1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "invalidUser";
    Collection<?> orders = directSLSBBean.getOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullUserID_qVBL2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = null;
    Collection<?> orders = directSLSBBean.getOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithEmptyUserID_BSvS3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "";
    Collection<?> orders = directSLSBBean.getClosedOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInvalidUserID_wKFz1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("invalidUserID");
    assertNull(accountProfileDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithInvalidUserID_WxaW1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "invalid_user";
    String password = "test_password";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    try {
      directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid user ID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithInvalidPassword_rFnT2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "invalid_password";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    try {
      directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid password", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithInvalidFullName_blLP3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    String fullname = "Invalid Full Name";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    try {
      directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid full name", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithInvalidUserID_nEVf1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.buy("invalidUserID", "symbol", 10.0, TradeConfig.ASYNCH);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid user ID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithInvalidUserID_ZHAD1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "invalid_user";
    Integer orderID = 1;
    try {
      directSLSBBean.orderCompleted(userID, orderID);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid user ID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithInvalidOrderID_IZeN2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user1";
    Integer orderID = -1;
    try {
      directSLSBBean.orderCompleted(userID, orderID);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid order ID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithInvalidOrderIDAndInvalidUserID_jsEj5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "invalid_user";
    Integer orderID = -1;
    try {
      directSLSBBean.orderCompleted(userID, orderID);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid user ID and order ID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_emcL0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    QuoteDataBean createdQuote = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(symbol, createdQuote.getSymbol());
    assertEquals(companyName, createdQuote.getCompanyName());
    assertEquals(price, createdQuote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_emcL0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    QuoteDataBean createdQuote = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(companyName, createdQuote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_emcL0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    QuoteDataBean createdQuote = directSLSBBean.createQuote(symbol, companyName, price);
    assertNotNull(createdQuote);
    assertEquals(symbol, createdQuote.getSymbol());
    assertEquals(companyName, createdQuote.getCompanyName());
    assertEquals(price, createdQuote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_fivB1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = "INVALID_SYMBOL";
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    try {
      directSLSBBean.createQuote(symbol, companyName, price);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid symbol", e.getMessage());
    }
    // Fix the error by initializing the tradeDirect field
    directSLSBBean.tradeDirect = new TradeDirect();
    // Update the assertion to match the return type of createQuote
    assertNull(directSLSBBean.createQuote(symbol, companyName, price));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidCompanyName_JfnA2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = "INVALID_COMPANY_NAME";
    BigDecimal price = quoteDataBean.getPrice();
    try {
      directSLSBBean.createQuote(symbol, companyName, price);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid company name", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidPrice_VwZu3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = BigDecimal.ZERO;
    try {
      directSLSBBean.createQuote(symbol, companyName, price);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid price", e.getMessage());
    }
    // Fix the error by setting the tradeDirect field to a non-null value
    directSLSBBean.tradeDirect = new TradeDirect();
    // Regenerate the fixed test case
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RdOE0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RdOE0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RdOE0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getPrice(), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RdOE0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getOpen(), result.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RdOE0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getLow(), result.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RdOE0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getChange(), result.getChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RdOE0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getHigh(), result.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RdOE0_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RdOE0_9() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getVolume(), result.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUserID_tKXP1_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("invalidUserID");
    assertNotNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUserID_tKXP1_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("invalidUserID");
    assertTrue(closedOrders.size() == 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithNullUserID_ZOAr2_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders(null);
    assertNotNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithNullUserID_ZOAr2_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders(null);
    assertTrue(closedOrders.size() == 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithEmptyUserID_mAEQ3_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("");
    assertNotNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithEmptyUserID_mAEQ3_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("");
    assertTrue(closedOrders.size() == 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullUserIDAndNullOrderID_YRrb5_jPjH0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = null;
    String orderID = null;
    Collection<?> orders = directSLSBBean.getClosedOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithInvalidUserIDAndInvalidOrderID_bYOc4_TzAm0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "invalidUser";
    String orderID = "invalidOrder";
    Collection<?> orders = directSLSBBean.getClosedOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithEmptyUserIDAndEmptyOrderID_rKXX6_kkSC0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "";
    String orderID = "";
    Collection<?> orders = directSLSBBean.getClosedOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_PBsH0_hLWx0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_PBsH0_hLWx0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(BigDecimal.ZERO, marketSummaryDataBean.getOpenTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_PBsH0_hLWx0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(BigDecimal.ZERO, marketSummaryDataBean.getGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_PBsH0_hLWx0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertEquals(new java.util.Date(), marketSummaryDataBean.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_PBsH0_hLWx0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(BigDecimal.ZERO, marketSummaryDataBean.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_PBsH0_hLWx0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertEquals(0.0, marketSummaryDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_PBsH0_hLWx0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(Collections.emptyList(), marketSummaryDataBean.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_QVvs0_nSRZ0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    holdingDataBean.setQuantity(100.0);
    holdingDataBean.setQuoteID("AAPL");
    holdingDataBean.setQuote(new QuoteDataBean());
    holdingDataBean.setPurchasePrice(new BigDecimal(100.0));
    holdingDataBean.setPurchaseDate(new java.util.Date());
    holdingDataBean.setAccount(new AccountDataBean());
    directSLSBBean.getHolding(holdingDataBean.getHoldingID());
    assertEquals(holdingDataBean, directSLSBBean.getHolding(holdingDataBean.getHoldingID()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithNullTradeDirect_IpHI5_vwMr0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("userID");
    assertNotNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CwmS0_hhJs1_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CwmS0_hhJs1_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean);
    assertEquals("user1", orderDataBean.getAccount().getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CwmS0_hhJs1_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean.getHolding());
    assertEquals("holding1", orderDataBean.getHolding().getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CwmS0_hhJs1_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals(100.0, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CwmS0_hhJs1_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals(new BigDecimal(10.0), orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CwmS0_hhJs1_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean);
    assertEquals("sell", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CwmS0_hhJs1_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals("completed", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CwmS0_hhJs1_9() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_jJGA1_2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "invalid_user";
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_LgMl2_2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = null;
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_BeLX0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> quotes = directSLSBBean.getAllQuotes();
    assertNotNull(quotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_BeLX0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> quotes = directSLSBBean.getAllQuotes();
    assertTrue(quotes.size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_Ugia0_2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertEquals("userID", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_Ugia0_3_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertEquals(1, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_Ugia0_4_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_Ugia0_5_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_Ugia0_6_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_Ugia0_7_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_Ugia0_8_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_Ugia0_9_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_Ugia0_10_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_Ugia0_11_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wsut0_1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("Test Address");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wsut0_3_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("Test Address");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wsut0_5_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("Test Address");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_gJMC0_2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_gJMC0_6_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(quoteDataBean.getHigh(), updatedQuoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_gJMC0_7_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_gJMC0_8_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(quoteDataBean.getVolume(), updatedQuoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_XISM0_2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertEquals("userID", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_XISM0_3_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_XISM0_4_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_XISM0_5_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_XISM0_6_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_XISM0_7_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_XISM0_8_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_XISM0_9_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_XISM0_10_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_XISM0_11_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_iIzc0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<?> orders = directSLSBBean.getOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_iIzc0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<?> orders = directSLSBBean.getOrders(userID);
    assertEquals(1, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_iIzc0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<?> orders = directSLSBBean.getOrders(userID);
    assertTrue(orders.contains("order1"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithInvalidUserID_QZiK1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "invalidUser";
    Collection<?> orders = directSLSBBean.getOrders(userID);
    assertNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullUserID_qVBL2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = null;
    Collection<?> orders = directSLSBBean.getOrders(userID);
    assertNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithEmptyUserID_BSvS3_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "";
    Collection<?> orders = directSLSBBean.getOrders(userID);
    assertNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithNullUserID_SJpv3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = null;
    Integer orderID = 1;
    try {
      directSLSBBean.orderCompleted(userID, orderID);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("User ID cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithNullOrderID_nAig4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user1";
    Integer orderID = null;
    try {
      directSLSBBean.orderCompleted(userID, orderID);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("Order ID cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithNullUserIDAndNullOrderID_eYYa6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = null;
    Integer orderID = null;
    try {
      directSLSBBean.orderCompleted(userID, orderID);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("User ID and order ID cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_emcL0_1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    QuoteDataBean createdQuote = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(symbol, createdQuote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_emcL0_3_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    QuoteDataBean createdQuote = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(price, createdQuote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_fivB1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = "INVALID_SYMBOL";
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    try {
      directSLSBBean.createQuote(symbol, companyName, price);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid symbol", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidPrice_VwZu3_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = BigDecimal.ZERO;
    try {
      directSLSBBean.createQuote(symbol, companyName, price);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid price", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_FgWj4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = null;
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    try {
      directSLSBBean.createQuote(symbol, companyName, price);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("Symbol cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_ZPHm5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = null;
    BigDecimal price = quoteDataBean.getPrice();
    try {
      directSLSBBean.createQuote(symbol, companyName, price);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("Company name cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullUserIDAndNullOrderID_YRrb5_jPjH0_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = null;
    String orderID = null;
    Collection<?> orders = directSLSBBean.getClosedOrders(userID);
    assertNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithInvalidUserIDAndInvalidOrderID_bYOc4_TzAm0_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "invalidUser";
    String orderID = "invalidOrder";
    Collection<?> orders = directSLSBBean.getClosedOrders(userID);
    assertNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithEmptyUserIDAndEmptyOrderID_rKXX6_kkSC0_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "";
    String orderID = "";
    Collection<?> orders = directSLSBBean.getClosedOrders(userID);
    assertNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_PBsH0_hLWx0_4_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(new java.util.Date(), marketSummaryDataBean.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_PBsH0_hLWx0_6_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(0.0, marketSummaryDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_PBsH0_hLWx0_7_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(Collections.emptyList(), marketSummaryDataBean.getTopGainers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithNullTradeDirect_IpHI5_vwMr0_2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("userID");
    assertTrue(closedOrders.size() == 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CwmS0_hhJs1_2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals(1, orderDataBean.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CwmS0_hhJs1_3_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals("user1", orderDataBean.getAccount().getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CwmS0_hhJs1_4_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals("holding1", orderDataBean.getHolding().getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CwmS0_hhJs1_7_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals("sell", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CwmS0_hhJs1_9_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals(new java.util.Date(), orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_BeLX0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> quotes = directSLSBBean.getAllQuotes();
    assertNotNull(quotes);
    assertTrue(quotes.size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_Ugia0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean);
    assertEquals("userID", accountDataBean.getProfileID());
    assertEquals(1, accountDataBean.getLoginCount());
    assertEquals(0, accountDataBean.getLogoutCount());
    assertNotNull(accountDataBean.getCreationDate());
    assertNotNull(accountDataBean.getLastLogin());
    assertNotNull(accountDataBean.getBalance());
    assertNotNull(accountDataBean.getOpenBalance());
    assertNotNull(accountDataBean.getHoldings());
    assertNotNull(accountDataBean.getOrders());
    assertNotNull(accountDataBean.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_wsut0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("Test Address");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
    assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
    assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
    assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_gJMC0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
    assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
    assertEquals(quoteDataBean.getOpen(), updatedQuoteDataBean.getOpen());
    assertEquals(quoteDataBean.getLow(), updatedQuoteDataBean.getLow());
    assertEquals(quoteDataBean.getChange(), updatedQuoteDataBean.getChange());
    assertEquals(quoteDataBean.getHigh(), updatedQuoteDataBean.getHigh());
    assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
    assertEquals(quoteDataBean.getVolume(), updatedQuoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_XISM0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean);
    assertEquals("userID", accountDataBean.getProfileID());
    assertNotNull(accountDataBean.getCreationDate());
    assertNotNull(accountDataBean.getLastLogin());
    assertNotNull(accountDataBean.getBalance());
    assertNotNull(accountDataBean.getOpenBalance());
    assertNotNull(accountDataBean.getLoginCount());
    assertNotNull(accountDataBean.getLogoutCount());
    assertNotNull(accountDataBean.getHoldings());
    assertNotNull(accountDataBean.getOrders());
    assertNotNull(accountDataBean.getAccountID());
    assertNotNull(accountDataBean.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_iIzc0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<?> orders = directSLSBBean.getOrders(userID);
    assertNotNull(orders);
    assertEquals(1, orders.size());
    assertTrue(orders.contains("order1"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RdOE0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertNotNull(result);
    assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
    assertEquals(quoteDataBean.getPrice(), result.getPrice());
    assertEquals(quoteDataBean.getOpen(), result.getOpen());
    assertEquals(quoteDataBean.getLow(), result.getLow());
    assertEquals(quoteDataBean.getChange(), result.getChange());
    assertEquals(quoteDataBean.getHigh(), result.getHigh());
    assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
    assertEquals(quoteDataBean.getVolume(), result.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUserID_tKXP1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("invalidUserID");
    assertNotNull(closedOrders);
    assertTrue(closedOrders.size() == 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithNullUserID_ZOAr2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders(null);
    assertNotNull(closedOrders);
    assertTrue(closedOrders.size() == 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithEmptyUserID_mAEQ3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("");
    assertNotNull(closedOrders);
    assertTrue(closedOrders.size() == 0);
  }
}