/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.concurrent.TimeUnit;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.context.ExternalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_QuoteJSF_Test_Failing {
  private TradeServices tradeAction;
  private ExternalContext context;
  private HtmlDataTable dataTable;
  private Integer quantity = 100;
  private String symbols = null;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantityWithNullTradeServices_ZIIh10() {
    QuoteJSF quoteJSF = new QuoteJSF(null);
    int quantity = quoteJSF.getQuantity();
    assertEquals(0, quantity);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantityWithNullTradeServices_ZIIh10_fid2() {
    QuoteJSF quoteJSF = new QuoteJSF(null);
    int quantity = quoteJSF.getQuantity();
    assertNull(quantity);
  }
}