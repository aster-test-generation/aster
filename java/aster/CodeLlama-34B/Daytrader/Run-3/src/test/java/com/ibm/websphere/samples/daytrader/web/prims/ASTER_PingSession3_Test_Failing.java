/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession3_Test_Failing {
  private static String initTime = null;
  private static int hitCount = 0;
  private static int NUM_OBJECTS = 2;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullConfig_GDkI1() throws ServletException {
    PingSession3 pingSession3 = new PingSession3();
    ServletConfig config = null;
    try {
      pingSession3.init(config);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("ServletConfig cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithInvalidConfig_ZrIS2() throws ServletException {
    PingSession3 pingSession3 = new PingSession3();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getInitParameter("hitCount")).thenReturn("invalid");
    try {
      pingSession3.init(config);
      fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
      assertEquals("Invalid hitCount: invalid", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_ikHm0() {
    PingSession3 session = new PingSession3();
    String expected = "HTTP Session Object: Tests management of a large custom session class";
    String actual = session.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_pdbj0() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingSession3.doPost(req, res);
    verify(req).getParameter("name");
    verify(res).setContentType("text/html");
    verify(res).getWriter();
    verify(res).setStatus(HttpServletResponse.SC_OK);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithInvalidName_leWd1() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("name")).thenReturn("");
    pingSession3.doPost(req, res);
    verify(req).getParameter("name");
    verify(res).setContentType("text/html");
    verify(res).getWriter();
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithValidName_pEEf2() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("name")).thenReturn("John Doe");
    pingSession3.doPost(req, res);
    verify(req).getParameter("name");
    verify(res).setContentType("text/html");
    verify(res).getWriter();
    verify(res).setStatus(HttpServletResponse.SC_OK);
  }
}