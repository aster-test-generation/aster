/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.Log;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.jms.TextMessage;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class Aster_TradeDirect_Coverage_Test_Failing {
  private ResultSet rs;
  private TextMessage mockMessage;
  private AsyncOrderSubmitter asyncOrderSubmitter;
  private Log log;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_ZOhd0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders("userID");
    assertNotNull(orderDataBeans);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_PDBf0() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.createQuote("symbol", "companyName", new BigDecimal(10.0));
    Assertions.assertNotNull(quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithValidPrice_PaFF5_2() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.createQuote("symbol", "companyName", new BigDecimal(10.0));
    Assertions.assertEquals(new BigDecimal(10.0), quoteData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithValidVolume_sTco6_2() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.createQuote("symbol", "companyName", new BigDecimal(10.0));
    Assertions.assertEquals(0.0, quoteData.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithValidChange_BGIK7_2() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.createQuote("symbol", "companyName", new BigDecimal(10.0));
    Assertions.assertEquals(0.0, quoteData.getChange(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithValidOpen_FRXp8_2() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.createQuote("symbol", "companyName", new BigDecimal(10.0));
    Assertions.assertEquals(new BigDecimal(10.0), quoteData.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithValidLow_VBGb9_2() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.createQuote("symbol", "companyName", new BigDecimal(10.0));
    Assertions.assertEquals(new BigDecimal(10.0), quoteData.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_inSession_DlCI0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Future<OrderDataBean> future = tradeDirect.completeOrderAsync(1, true);
    assertNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_notInSession_aHPL1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    when(asyncOrderSubmitter.submitOrder(1, true)).thenReturn(null);
    Future<OrderDataBean> future = tradeDirect.completeOrderAsync(1, true);
    assertNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_exception_xICh2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    when(asyncOrderSubmitter.submitOrder(1, true)).thenThrow(new Exception());
    Future<OrderDataBean> future = tradeDirect.completeOrderAsync(1, true);
    assertNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder1_XgZr0() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = new AccountDataBean();
    QuoteDataBean quoteData = new QuoteDataBean();
    HoldingDataBean holdingData = new HoldingDataBean();
    String orderType = "orderType";
    double quantity = 10.0;
    OrderDataBean orderData = tradeDirect.createOrder(accountData, quoteData, holdingData, orderType, quantity);
    Assertions.assertNotNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_CreateNewArrayList_cgsU1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("userID");
    assertEquals(holdingDataBeans.getClass(), ArrayList.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_RvXF0() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.login("userID", "password");
    Assertions.assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithInvalidUserID_tfKF1() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.login("invalidUserID", "password");
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithInvalidPassword_ntXh2() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.login("userID", "invalidPassword");
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullUserID_ocRZ3() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.login(null, "password");
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullPassword_uOxg4() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.login("userID", null);
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithEmptyUserID_rjrU5() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.login("", "password");
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithEmptyPassword_sMXA6() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.login("userID", "");
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullUserIDAndPassword_omtR7() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.login(null, null);
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithEmptyUserIDAndPassword_btIw8() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.login("", "");
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithInvalidUserIDAndInvalidPassword_VeXX9() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.login("invalidUserID", "invalidPassword");
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_NullUserID_KOjf0() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData(null);
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_EmptyUserID_SadG1() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("");
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_InvalidUserID_BDzn2() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("invalidUserID");
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_ValidUserID_FbXI3() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("validUserID");
    assertNotNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_ConnectionException_HDqo4() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("validUserID");
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_SetStringProperty_mAlI3_ombz0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(1, true);
    verify(mockMessage).setStringProperty("command", "neworder");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_SetIntProperty_USUG4_QDFs0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(1, true);
    verify(mockMessage).setIntProperty("orderID", 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_SetBooleanProperty_Dopx5_cjxs0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(1, true);
    verify(mockMessage).setBooleanProperty("twoPhase", true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_SetLongProperty_uAMz6_CGQK0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(1, true);
    verify(mockMessage).setLongProperty("publishTime", System.currentTimeMillis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_SetText_bXqi7_GClp0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(1, true);
    verify(mockMessage).setText("neworder: orderID=" + 1 + " runtimeMode=Direct twoPhase=" + true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountDataWithNullUserID_EHte3_ZubK0() throws Exception {
    String userID = null;
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(userID);
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_kbvB0() {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = 10.0;
    double rnd2 = 20.0;
    try {
      double returnValue = tradeDirect.investmentReturn(rnd1, rnd2);
      fail("Expected UnsupportedOperationException to be thrown");
    } catch (UnsupportedOperationException e) {
      assertEquals("Expected exception message", "Unsupported operation", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithValidPrice_PaFF5() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.createQuote("symbol", "companyName", new BigDecimal(10.0));
    Assertions.assertNotNull(quoteData);
    Assertions.assertEquals(new BigDecimal(10.0), quoteData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithValidVolume_sTco6() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.createQuote("symbol", "companyName", new BigDecimal(10.0));
    Assertions.assertNotNull(quoteData);
    Assertions.assertEquals(0.0, quoteData.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithValidChange_BGIK7() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.createQuote("symbol", "companyName", new BigDecimal(10.0));
    Assertions.assertNotNull(quoteData);
    Assertions.assertEquals(0.0, quoteData.getChange(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithValidOpen_FRXp8() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.createQuote("symbol", "companyName", new BigDecimal(10.0));
    Assertions.assertNotNull(quoteData);
    Assertions.assertEquals(new BigDecimal(10.0), quoteData.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithValidLow_VBGb9() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.createQuote("symbol", "companyName", new BigDecimal(10.0));
    Assertions.assertNotNull(quoteData);
    Assertions.assertEquals(new BigDecimal(10.0), quoteData.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithValidHigh_tSSu10() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.createQuote("symbol", "companyName", new BigDecimal(10.0));
    Assertions.assertNotNull(quoteData);
    Assertions.assertEquals(new BigDecimal(10.0), quoteData.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_sIor0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.pingTwoPhase("symbol");
      fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
      assertEquals("pingTwoPhase is not supported", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_ReturnHoldingDataBeans_ybZN0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("userID");
    assertNotNull(holdingDataBeans);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_CQkO0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 1000.0;
    QuoteDataBean quoteDataBean = tradeDirect.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertNotNull(quoteDataBean);
    assertEquals(symbol, quoteDataBean.getSymbol());
    assertEquals(changeFactor, quoteDataBean.getPrice());
    assertEquals(sharesTraded, quoteDataBean.getVolume(), 0.0);
  }
}