/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_quoteNotNull_FZwJ0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    holdingDataBean.setQuote(quote);
    String actual = holdingDataBean.getQuoteID();
    String expected = "AAPL";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_quoteNull_jlMC1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    String actual = holdingDataBean.getQuoteID();
    String expected = null;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_quoteIDNotNull_FpZZ2() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setQuoteID("AAPL");
    String actual = holdingDataBean.getQuoteID();
    String expected = "AAPL";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NotInstanceOfHoldingDataBean_XBIu0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    Object object = new Object();
    assertFalse(holdingDataBean.equals(object));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString1_QCEd0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(10.0, new BigDecimal(10.0), new Date(), new AccountDataBean(), new QuoteDataBean());
    String expected = "\n\tHolding Data for holding: " + holdingDataBean.getHoldingID() + "\n\t\t      quantity:" + holdingDataBean.getQuantity() + "\n\t\t purchasePrice:" + holdingDataBean.getPurchasePrice() + "\n\t\t  purchaseDate:" + holdingDataBean.getPurchaseDate() + "\n\t\t       quoteID:" + holdingDataBean.getQuoteID();
    assertEquals(expected, holdingDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_holdingID_fYhC0() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_quantity_IGwK1() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_purchasePrice_ROCu2() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_purchaseDate_fcWO3() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_NullHoldingID_woyP0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    int actualHashCode = holdingDataBean.hashCode();
    assertEquals(0, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_NonNullHoldingID_VYJZ1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(1, 10, BigDecimal.valueOf(100), new Date(), "ABC");
    int actualHashCode = holdingDataBean.hashCode();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_SameHoldingID_avfz2() {
    HoldingDataBean holdingDataBean1 = new HoldingDataBean(1, 10, BigDecimal.valueOf(100), new Date(), "ABC");
    HoldingDataBean holdingDataBean2 = new HoldingDataBean(1, 10, BigDecimal.valueOf(100), new Date(), "ABC");
    int hashCode1 = holdingDataBean1.hashCode();
    int hashCode2 = holdingDataBean2.hashCode();
    assertEquals(hashCode1, hashCode2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullHoldingID_NwIX1_yYyw0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    HoldingDataBean other = new HoldingDataBean();
    other.setHoldingID(null);
    assertTrue(holdingDataBean.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentHoldingID_DVkv2_FXxK0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    HoldingDataBean other = new HoldingDataBean();
    other.setHoldingID(1);
    holdingDataBean.setHoldingID(2);
    assertFalse(holdingDataBean.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameHoldingID_glXR3_JPSk0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    HoldingDataBean other = new HoldingDataBean();
    other.setHoldingID(1);
    holdingDataBean.setHoldingID(1);
    assertTrue(holdingDataBean.equals(other));
  }
}