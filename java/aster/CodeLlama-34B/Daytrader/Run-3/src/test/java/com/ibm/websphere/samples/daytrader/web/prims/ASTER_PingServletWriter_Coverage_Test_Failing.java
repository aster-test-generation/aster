/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingServletWriter_Coverage_Test_Failing {
  private ServletConfig config;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_UFvq0() throws ServletException, IOException {
    PingServletWriter writer = new PingServletWriter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    writer.doPost(request, response);
    verify(writer).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_IFHf0() {
    PingServletWriter writer = new PingServletWriter();
    String result = writer.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet using a PrintWriter", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithException_Wzgo1_vtVg0() throws ServletException, IOException {
    PingServletWriter writer = new PingServletWriter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    doThrow(new ServletException()).when(writer).doGet(request, response);
    try {
      writer.doPost(request, response);
      fail("Expected ServletException");
    } catch (ServletException e) {
      assertEquals("Expected ServletException", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithException_Wzgo1_vtVg0_fid2() throws ServletException, IOException {
    PingServletWriter writer = new PingServletWriter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    doThrow(new ServletException()).when(writer).doGet(request, response);
    try {
      writer.doPost(request, response);
      fail("Expected ServletException");
    } catch (ServletException e) {
    }
  }
}