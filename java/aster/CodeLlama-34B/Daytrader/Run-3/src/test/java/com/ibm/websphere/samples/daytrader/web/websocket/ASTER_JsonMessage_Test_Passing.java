/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JsonMessage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_ValidKey_lVAZ0() {
    JsonMessage jsonMessage = new JsonMessage();
    String key = "key";
    jsonMessage.setKey(key);
    assertEquals(key, jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_NullKey_Kwkx1() {
    JsonMessage jsonMessage = new JsonMessage();
    String key = null;
    jsonMessage.setKey(key);
    assertNull(jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_EmptyKey_arVQ2() {
    JsonMessage jsonMessage = new JsonMessage();
    String key = "";
    jsonMessage.setKey(key);
    assertEquals("", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_InvalidKey_llHG3() {
    JsonMessage jsonMessage = new JsonMessage();
    String key = "invalid_key";
    jsonMessage.setKey(key);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_NullJsonMessage_NKrV4() {
    JsonMessage jsonMessage = null;
    String key = "key";
    //jsonMessage.setKey(key);
    assertNull(jsonMessage);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_null_TOOw0() {
    JsonMessage jsonMessage = new JsonMessage();
    String value = jsonMessage.getValue();
    assertNull(value);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_nonEmpty_ZVcN2() {
    JsonMessage jsonMessage = new JsonMessage();
    String value = jsonMessage.getValue();
    assertNotEquals("", value);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_invalidType_MLHQ3() {
    JsonMessage jsonMessage = new JsonMessage();
    String value = jsonMessage.getValue();
    assertNotEquals("invalid", value);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_validType_xdbn4() {
    JsonMessage jsonMessage = new JsonMessage();
    String value = jsonMessage.getValue();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetKey_ValidKey_HNMO0() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("key");
    assertEquals("key", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetKey_NullKey_eCyu1() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey(null);
    assertNull(jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetKey_EmptyKey_dSes2() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("");
    assertEquals("", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetKey_InvalidKey_XUDR3() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("invalid_key");
    assertEquals("invalid_key", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetKey_DuplicateKey_FkSb4() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("key");
    jsonMessage.setKey("key");
    assertEquals("key", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetKey_DifferentKey_ZOMP5() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("key1");
    jsonMessage.setKey("key2");
    assertEquals("key2", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetKey_InvalidValue_DChF8() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("invalid_value");
    assertEquals("invalid_value", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetKey_DuplicateValue_GfWV9() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("value");
    jsonMessage.setKey("value");
    assertEquals("value", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetKey_DifferentValue_cyAF10() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("value1");
    jsonMessage.setKey("value2");
    assertEquals("value2", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValue_Null_iEtA0() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue(null);
    assertNull(jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValue_EmptyString_qzKh1() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("");
    assertEquals("", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValue_NonEmptyString_pQVF2() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("hello");
    assertEquals("hello", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValue_ValidJson_NGPQ4() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("{\"key\":\"value\"}");
    assertEquals("{\"key\":\"value\"}", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValue_NullKey_RPLs5() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("{\"key\":null}");
    assertEquals("{\"key\":null}", jsonMessage.getValue());
  }
}