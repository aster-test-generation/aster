/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;

import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CDIMethodConstraintBean_Test_Failing {
  @Test
  @Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHitCount_smTY0() {
    CDIMethodConstraintBean bean = new CDIMethodConstraintBean();
    LocalDateTime now = LocalDateTime.now();
    int hitCount = bean.getHitCount(now);
    assertEquals(1, hitCount);
  }

  @Test
  @Timeout(value = 3, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHitCountWithPastDate_msFQ1() {
    CDIMethodConstraintBean bean = new CDIMethodConstraintBean();
    LocalDateTime pastDate = LocalDateTime.of(2022, 3, 3, 0, 0, 0);
    int hitCount = bean.getHitCount(pastDate);
    assertEquals(1, hitCount);
  }

  @Test
  @Timeout(value = 2, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHitCountWithFutureDate_hRMR3() {
    CDIMethodConstraintBean bean = new CDIMethodConstraintBean();
    LocalDateTime futureDate = LocalDateTime.of(2023, 2, 2, 0, 0, 0);
    int hitCount = bean.getHitCount(futureDate);
    assertEquals(1, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHitCountWithPastDate_msFQ1_fid1() {
    CDIMethodConstraintBean bean = new CDIMethodConstraintBean();
    LocalDateTime pastDate = LocalDateTime.of(2022, 1, 1, 0, 0, 0);
    int hitCount = bean.getHitCount(pastDate);
    assertEquals(1, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHitCountWithFutureDate_hRMR3_fid1() {
    CDIMethodConstraintBean bean = new CDIMethodConstraintBean();
    LocalDateTime futureDate = LocalDateTime.of(2023, 1, 1, 0, 0, 0);
    int hitCount = bean.getHitCount(futureDate);
    assertEquals(1, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHitCountWithNullDate_TSAy4_fid1() {
    CDIMethodConstraintBean bean = new CDIMethodConstraintBean();
    int hitCount = bean.getHitCount(null);
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHitList_NonEmptyList_VcWU1_1_fid1() {
    CDIMethodConstraintBean bean = new CDIMethodConstraintBean();
    List<Integer> list = bean.hitList();
    assertFalse(list.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHitList_NonEmptyList_VcWU1_2() {
    CDIMethodConstraintBean bean = new CDIMethodConstraintBean();
    List<Integer> list = bean.hitList();
    assertEquals(1, list.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHitList_NonEmptyList_VcWU1_3() {
    CDIMethodConstraintBean bean = new CDIMethodConstraintBean();
    List<Integer> list = bean.hitList();
    assertEquals(1, list.get(0).intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHitList_NullList_KOiV2() {
    CDIMethodConstraintBean bean = new CDIMethodConstraintBean();
    List<Integer> list = bean.hitList();
    assertNull(list);
  }
}