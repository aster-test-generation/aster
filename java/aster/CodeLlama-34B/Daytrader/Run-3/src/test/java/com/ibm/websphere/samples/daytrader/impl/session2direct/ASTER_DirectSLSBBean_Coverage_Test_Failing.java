/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DirectSLSBBean_Coverage_Test_Failing {
  private TradeDirect tradeDirect;
  private DirectSLSBBean directSLSBBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_HUDX0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_HUDX0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(account, order.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_HUDX0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quote, order.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_HUDX0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(holding, order.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_HUDX0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(orderType, order.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_HUDX0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quantity, order.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_HUDX0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertTrue(order.getOrderFee().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_HUDX0_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(order.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_HUDX0_9() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(order.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_HUDX0_10() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(order.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_HUDX0_11() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals("OPEN", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_aRTJ0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    when(tradeDirect.getMarketSummary()).thenReturn(marketSummaryDataBean);
    directSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean, directSLSBBean.getMarketSummary());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_setInSession_VfGO0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    Collection<?> allQuotes = directSLSBBean.getAllQuotes();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_getAllQuotes_PVyv1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> allQuotes = directSLSBBean.getAllQuotes();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_pexl0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(100.0);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_pexl0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(100.0);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(userID, accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_pexl0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(100.0);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(fullname, accountDataBean.getProfile().getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_pexl0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(100.0);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(address, accountDataBean.getProfile().getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_pexl0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(100.0);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(email, accountDataBean.getProfile().getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_pexl0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(100.0);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(creditcard, accountDataBean.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_pexl0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(100.0);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(openBalance, accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithInvalidInput_rKun1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(100.0);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_getHoldings_HArE1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings("userID");
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithInvalidOrderID_oPNB1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = null;
    boolean twoPhase = true;
    try {
      directSLSBBean.completeOrder(orderID, twoPhase);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid order ID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_LhXv0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(100.00);
    double sharesTraded = 1000.00;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertNotNull(updatedQuoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_LhXv0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(100.00);
    double sharesTraded = 1000.00;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(newPrice, updatedQuoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_LhXv0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(100.00);
    double sharesTraded = 1000.00;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(sharesTraded, updatedQuoteDataBean.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_LQlk0() throws Exception {
    Integer orderID = 123;
    boolean twoPhase = true;
    directSLSBBean.cancelOrder(orderID, twoPhase);
    verify(tradeDirect).setInSession(true);
    verify(tradeDirect).cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_eqWP0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("GOOG");
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_eqWP0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("GOOG");
    assertEquals("GOOG", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithInvalidSymbol_FcdU1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("INVALID");
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_pLvN0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_pLvN0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals("symbol", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_pLvN0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals("companyName", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_pLvN0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_grwY1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.createQuote("", "companyName", new BigDecimal(10.0));
    } catch (Exception e) {
      assertTrue(e instanceof IllegalArgumentException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_updateAccountProfile_bRJJ1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("Test Address");
    profileData.setEmail("test@email.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    Assertions.assertEquals(profileData, updatedProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_setInSession_lmTO0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.queueOrder(1, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_returnOrderDataBean_lleE3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    when(tradeDirect.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH)).thenReturn(mock(OrderDataBean.class));
    OrderDataBean orderDataBean = directSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_submitOrder_KVDM0() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = true;
    Future<OrderDataBean> future = bean.completeOrderAsync(orderID, twoPhase);
    assertNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_wHrE0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("userID");
    assertNotNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInSession_WsGx1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("userID");
    assertNotNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_setInSessionTrue_phtu0_ZjdH0_1() throws Exception {
    String userID = "testUserID";
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    when(tradeDirect.getAccountProfileData(userID)).thenReturn(accountProfileDataBean);
    AccountProfileDataBean result = directSLSBBean.getAccountProfileData(userID);
    verify(tradeDirect, times(1)).setInSession(true);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_setInSessionTrue_phtu0_ZjdH0_2() throws Exception {
    String userID = "testUserID";
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    when(tradeDirect.getAccountProfileData(userID)).thenReturn(accountProfileDataBean);
    AccountProfileDataBean result = directSLSBBean.getAccountProfileData(userID);
    verify(tradeDirect, times(1)).setInSession(true);
    assertEquals(accountProfileDataBean, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_getAccountProfileData_SOpd1_rIjf0_1() throws Exception {
    String userID = "testUserID";
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    when(tradeDirect.getAccountProfileData(userID)).thenReturn(accountProfileDataBean);
    AccountProfileDataBean result = directSLSBBean.getAccountProfileData(userID);
    verify(tradeDirect).getAccountProfileData(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_getAccountProfileData_SOpd1_rIjf0_2() throws Exception {
    String userID = "testUserID";
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    when(tradeDirect.getAccountProfileData(userID)).thenReturn(accountProfileDataBean);
    AccountProfileDataBean result = directSLSBBean.getAccountProfileData(userID);
    verify(tradeDirect).getAccountProfileData(userID);
    assertEquals(accountProfileDataBean, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_setInSession_vpHj0_zTDK0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = 1;
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setPurchasePrice(BigDecimal.ONE);
    holdingDataBean.setPurchaseDate(new Date());
    holdingDataBean.setHoldingID(holdingID);
    when(tradeDirect.getHolding(holdingID)).thenReturn(holdingDataBean);
    HoldingDataBean result = directSLSBBean.getHolding(holdingID);
    verify(tradeDirect, times(1)).setInSession(true);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_setInSession_vpHj0_zTDK0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = 1;
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setPurchasePrice(BigDecimal.ONE);
    holdingDataBean.setPurchaseDate(new Date());
    holdingDataBean.setHoldingID(holdingID);
    when(tradeDirect.getHolding(holdingID)).thenReturn(holdingDataBean);
    HoldingDataBean result = directSLSBBean.getHolding(holdingID);
    verify(tradeDirect, times(1)).setInSession(true);
    assertEquals(holdingID, result.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_setInSession_vpHj0_zTDK0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = 1;
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setPurchasePrice(BigDecimal.ONE);
    holdingDataBean.setPurchaseDate(new Date());
    holdingDataBean.setHoldingID(holdingID);
    when(tradeDirect.getHolding(holdingID)).thenReturn(holdingDataBean);
    HoldingDataBean result = directSLSBBean.getHolding(holdingID);
    verify(tradeDirect, times(1)).setInSession(true);
    assertEquals(BigDecimal.ONE, result.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_setInSession_vpHj0_zTDK0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = 1;
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setPurchasePrice(BigDecimal.ONE);
    holdingDataBean.setPurchaseDate(new Date());
    holdingDataBean.setHoldingID(holdingID);
    when(tradeDirect.getHolding(holdingID)).thenReturn(holdingDataBean);
    HoldingDataBean result = directSLSBBean.getHolding(holdingID);
    verify(tradeDirect, times(1)).setInSession(true);
    assertNotNull(result.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_getHolding_gfRC1_ayZx0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = 1;
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setPurchasePrice(BigDecimal.ONE);
    holdingDataBean.setPurchaseDate(new Date());
    holdingDataBean.setHoldingID(holdingID);
    when(tradeDirect.getHolding(holdingID)).thenReturn(holdingDataBean);
    HoldingDataBean result = directSLSBBean.getHolding(holdingID);
    verify(tradeDirect, times(1)).getHolding(holdingID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_getHolding_gfRC1_ayZx0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = 1;
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setPurchasePrice(BigDecimal.ONE);
    holdingDataBean.setPurchaseDate(new Date());
    holdingDataBean.setHoldingID(holdingID);
    when(tradeDirect.getHolding(holdingID)).thenReturn(holdingDataBean);
    HoldingDataBean result = directSLSBBean.getHolding(holdingID);
    verify(tradeDirect, times(1)).getHolding(holdingID);
    assertEquals(holdingID, result.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_getHolding_gfRC1_ayZx0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = 1;
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setPurchasePrice(BigDecimal.ONE);
    holdingDataBean.setPurchaseDate(new Date());
    holdingDataBean.setHoldingID(holdingID);
    when(tradeDirect.getHolding(holdingID)).thenReturn(holdingDataBean);
    HoldingDataBean result = directSLSBBean.getHolding(holdingID);
    verify(tradeDirect, times(1)).getHolding(holdingID);
    assertEquals(BigDecimal.ONE, result.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_getHolding_gfRC1_ayZx0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = 1;
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setPurchasePrice(BigDecimal.ONE);
    holdingDataBean.setPurchaseDate(new Date());
    holdingDataBean.setHoldingID(holdingID);
    when(tradeDirect.getHolding(holdingID)).thenReturn(holdingDataBean);
    HoldingDataBean result = directSLSBBean.getHolding(holdingID);
    verify(tradeDirect, times(1)).getHolding(holdingID);
    assertNotNull(result.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_submitOrder_KVDM0_fid1() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = true;
    Future<OrderDataBean> future = bean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_setInSession_vpHj0_zTDK0_2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = 1;
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setPurchasePrice(BigDecimal.ONE);
    holdingDataBean.setPurchaseDate(new Date());
    holdingDataBean.setHoldingID(holdingID);
    when(tradeDirect.getHolding(holdingID)).thenReturn(holdingDataBean);
    HoldingDataBean result = directSLSBBean.getHolding(holdingID);
    verify(tradeDirect, times(1)).setInSession(true);
    assertEquals(holdingDataBean, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_getHolding_gfRC1_ayZx0_1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = 1;
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setPurchasePrice(BigDecimal.ONE);
    holdingDataBean.setPurchaseDate(new Date());
    holdingDataBean.setHoldingID(holdingID);
    when(tradeDirect.getHolding(holdingID)).thenReturn(holdingDataBean);
    HoldingDataBean result = directSLSBBean.getHolding(holdingID);
    verify(tradeDirect, times(1)).getHolding(holdingID);
    assertEquals(holdingDataBean, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_HUDX0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(order);
    assertEquals(account, order.getAccount());
    assertEquals(quote, order.getQuote());
    assertEquals(holding, order.getHolding());
    assertEquals(orderType, order.getOrderType());
    assertEquals(quantity, order.getQuantity(), 0.0);
    assertTrue(order.getOrderFee().compareTo(BigDecimal.ZERO) > 0);
    assertNotNull(order.getOrderID());
    assertNotNull(order.getOpenDate());
    assertNotNull(order.getCompletionDate());
    assertEquals("OPEN", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrderWithInvalidAccount_udaz1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = null;
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_pexl0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(100.0);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(accountDataBean);
    assertEquals(userID, accountDataBean.getProfileID());
    assertEquals(fullname, accountDataBean.getProfile().getFullName());
    assertEquals(address, accountDataBean.getProfile().getAddress());
    assertEquals(email, accountDataBean.getProfile().getEmail());
    assertEquals(creditcard, accountDataBean.getProfile().getCreditCard());
    assertEquals(openBalance, accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_LhXv0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(100.00);
    double sharesTraded = 1000.00;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertNotNull(updatedQuoteDataBean);
    assertEquals(newPrice, updatedQuoteDataBean.getPrice());
    assertEquals(sharesTraded, updatedQuoteDataBean.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_eqWP0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("GOOG");
    assertNotNull(quoteDataBean);
    assertEquals("GOOG", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_pLvN0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertNotNull(quoteDataBean);
    assertEquals("symbol", quoteDataBean.getSymbol());
    assertEquals("companyName", quoteDataBean.getCompanyName());
    assertEquals(new BigDecimal(10.0), quoteDataBean.getPrice());
  }
}