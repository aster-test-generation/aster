/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Failing {
  private static List<Integer> deck = null;
  private static Random r0 = new Random();
  private static int card = 0;
  private TradeConfig tradeConfig;
  private TradeConfig config;
  private static int scenarioCount = 0;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixesLineCoverage_DWmB1() {
    int[][] expected = {{1, 2}, {3, 4}, {5, 6}};
    int[][] actual = TradeConfig.getScenarioMixes();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_HOLDINGSWithNegativeValue_ADuP1() {
    int maxHoldings = -1 - 10;
    TradeConfig.setMAX_HOLDINGS(maxHoldings);
    assertEquals(-10, TradeConfig.getMAX_HOLDINGS());
  }

  @Test
  @Timeout(value = 11, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_GsQw0() {
    TradeConfig.incrementScenarioCount();
    assertEquals(1, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterations_uEAU0_fid1() {
    int expected = 10;
    int actual = TradeConfig.getPrimIterations();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterationsWithNullValue_JaWE2_fid1() {
    int expected = 0;
    int actual = TradeConfig.getPrimIterations();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_HOLDINGSWithNegativeValue_ADuP1_fid1() {
    int maxHoldings = -10;
    TradeConfig.setMAX_HOLDINGS(maxHoldings);
    assertEquals(0, TradeConfig.getMAX_HOLDINGS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_HOLDINGSWithInvalidValue_gqvh4_fid1() {
    int maxHoldings = -1;
    TradeConfig.setMAX_HOLDINGS(maxHoldings);
    assertEquals(0, TradeConfig.getMAX_HOLDINGS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCountMultipleTimes_ToRz1_fid1() {
    TradeConfig.incrementScenarioCount();
    TradeConfig.incrementScenarioCount();
    assertEquals(2, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeModeWithInvalidValue_BvJW1_fid1() {
    TradeConfig.setRunTimeMode(-1);
    assertEquals(0, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_QUOTES_qRhN0_fid1() {
    int expected = 10;
    int actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_QUOTES_IBgE1_1_fid1() {
    int expected = 10;
    int actual = TradeConfig.getMAX_QUOTES();
    expected = 20;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 30;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 40;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 50;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 60;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 70;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 80;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 90;
    actual = TradeConfig.getMAX_QUOTES();
    expected = 100;
    actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeModeNames_ptJE0() {
    String[] expected = new String[]{"mode1", "mode2", "mode3"};
    String[] actual = TradeConfig.getRunTimeModeNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessMode_xBjU0() {
    TradeConfig tradeConfig = new TradeConfig();
    int accessMode = tradeConfig.getAccessMode();
    assertEquals(0, accessMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessModeWithDifferentValues_kPhA1_1() {
    TradeConfig tradeConfig = new TradeConfig();
    int accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    assertEquals(1, accessMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessModeWithDifferentValues_kPhA1_2() {
    TradeConfig tradeConfig = new TradeConfig();
    int accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    assertEquals(2, accessMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessModeWithInvalidValue_tQJf2_1() {
    TradeConfig tradeConfig = new TradeConfig();
    int accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    assertEquals(0, accessMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessModeWithInvalidValue_tQJf2_2() {
    TradeConfig tradeConfig = new TradeConfig();
    int accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    assertEquals(1, accessMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessModeWithInvalidValue_tQJf2_4() {
    TradeConfig tradeConfig = new TradeConfig();
    int accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    accessMode = tradeConfig.getAccessMode();
    assertEquals(3, accessMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInterval_DOfX0() {
    TradeConfig config = new TradeConfig();
    assertEquals(10, config.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterationsWithNegativeValue_mMqL1() {
    int iter = -5;
    TradeConfig.setPrimIterations(iter);
    assertEquals(0, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_Buy_wghV0() {
    BigDecimal orderFee = TradeConfig.getOrderFee("BUY");
    assertEquals(orderFee, new BigDecimal("0.005"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_Sell_jKqB1() {
    BigDecimal orderFee = TradeConfig.getOrderFee("SELL");
    assertEquals(orderFee, new BigDecimal("0.005"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_Other_mkCO2() {
    BigDecimal orderFee = TradeConfig.getOrderFee("OTHER");
    assertEquals(orderFee, new BigDecimal("0.01"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_1_kOIP0() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:1000 last:5000", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_2_xzsV1() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:500 last:1000", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_3_Bgrv2() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:100 last:500", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_4_GVyQ3() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:50 last:100", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_5_ovag4() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:10 last:50", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_6_DPDw5() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:5 last:10", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_7_jbTv6() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:1 last:5", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_8_WpLJ7() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:0 last:1", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_9_ItHr8() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:0 last:0", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERSWithNullValue_BDvs2() {
    int expected = 0;
    int actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryIntervalWithInvalidValue_HoxM6() {
    try {
      TradeConfig.setMarketSummaryInterval(Integer.MAX_VALUE + 1);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid market summary interval: " + (Integer.MAX_VALUE + 1), e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryIntervalWithNegativeValue_pCpq11() {
    try {
      TradeConfig.setMarketSummaryInterval(-1);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid market summary interval: -1", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryIntervalWithZeroValue_Djul12() {
    try {
      TradeConfig.setMarketSummaryInterval(0);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid market summary interval: 0", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioActionNewUser_Etbz0() {
    boolean newUser = true;
    char action = TradeConfig.getScenarioAction(newUser);
    assertEquals('b', action);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioActionExistingUser_zcYn1() {
    boolean newUser = false;
    char action = TradeConfig.getScenarioAction(newUser);
    assertEquals('s', action);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPublishQuotePriceChange_VHyy1_2() {
    TradeConfig config = new TradeConfig();
    boolean result = config.getPublishQuotePriceChange();
    assertFalse(config.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_HOLDINGS_aNJv1_1() {
    int expected = 10;
    int actual = TradeConfig.getMAX_HOLDINGS();
    expected = 20;
    actual = TradeConfig.getMAX_HOLDINGS();
    expected = 30;
    actual = TradeConfig.getMAX_HOLDINGS();
    expected = 40;
    actual = TradeConfig.getMAX_HOLDINGS();
    expected = 50;
    actual = TradeConfig.getMAX_HOLDINGS();
    expected = 60;
    actual = TradeConfig.getMAX_HOLDINGS();
    expected = 70;
    actual = TradeConfig.getMAX_HOLDINGS();
    expected = 80;
    actual = TradeConfig.getMAX_HOLDINGS();
    expected = 90;
    actual = TradeConfig.getMAX_HOLDINGS();
    expected = 100;
    actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_xxkc0() {
    int expected = 1;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_SuZf1_1() {
    int expected = 1;
    int actual = TradeConfig.getOrderProcessingMode();
    expected = 2;
    actual = TradeConfig.getOrderProcessingMode();
    expected = 3;
    actual = TradeConfig.getOrderProcessingMode();
    expected = 4;
    actual = TradeConfig.getOrderProcessingMode();
    expected = 5;
    actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbols_Empty_qbSv0() {
    String symbols = TradeConfig.rndSymbols();
    assertEquals("", symbols);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioCount_hZAn0() {
    int expected = 10;
    int actual = TradeConfig.getScenarioCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioCountWithOneScenario_ixzs2() {
    int expected = 1;
    int actual = TradeConfig.getScenarioCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_RND_USER_Kzhn0() {
    TradeConfig config = new TradeConfig();
    String userID = config.getUserID();
    assertEquals("rndUserID", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_nextUserID_EKwc1() {
    TradeConfig config = new TradeConfig();
    String userID = config.getUserID();
    assertEquals("nextUserID", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Negative_pKvD1() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertTrue(result.doubleValue() < 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Zero_qowu2() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(0.0, result.doubleValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Positive_RoundUp_tMJZ3_2() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(1.0, result.doubleValue(), 0.00001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Negative_RoundDown_iOFK4_2() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(-1.0, result.doubleValue(), 0.00001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Zero_RoundHalfUp_hrGf5_2() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(0.5, result.doubleValue(), 0.00001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterface_kaXO0() {
    TradeConfig tradeConfig = new TradeConfig();
    int webInterface = tradeConfig.getWebInterface();
    assertEquals(1, webInterface);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBoolean_kYsJ0() {
    TradeConfig tradeConfig = new TradeConfig();
    boolean result = tradeConfig.rndBoolean();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard_EgyW0_2() {
    String creditCard = TradeConfig.rndCreditCard();
    assertTrue(creditCard.matches("\\d{3}-\\d{4}-\\d{4}-\\d{4}"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmail_kCgb0() {
    String userID = "user123";
    String expectedEmail = "user123@123.com";
    String actualEmail = TradeConfig.rndEmail(userID);
    assertEquals(expectedEmail, actualEmail);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeNames_OfoV0_3() {
    String[] orderProcessingModeNames = TradeConfig.getOrderProcessingModeNames();
    assertEquals("LIVE", orderProcessingModeNames[0]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeNames_OfoV0_4() {
    String[] orderProcessingModeNames = TradeConfig.getOrderProcessingModeNames();
    assertEquals("SIMULATED", orderProcessingModeNames[1]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeNames_OfoV0_5() {
    String[] orderProcessingModeNames = TradeConfig.getOrderProcessingModeNames();
    assertEquals("PAPER", orderProcessingModeNames[2]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_1_dZPo0() {
    int result = TradeConfig.rndInt(1);
    assertEquals(1, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_2_wpAv1() {
    int result = TradeConfig.rndInt(2);
    assertEquals(2, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_3_YTlk2() {
    int result = TradeConfig.rndInt(3);
    assertEquals(3, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_4_iMyk3() {
    int result = TradeConfig.rndInt(4);
    assertEquals(4, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_5_XjUp4() {
    int result = TradeConfig.rndInt(5);
    assertEquals(5, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_6_FQJo5() {
    int result = TradeConfig.rndInt(6);
    assertEquals(6, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_7_ruuI6() {
    int result = TradeConfig.rndInt(7);
    assertEquals(7, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_8_DyGI7() {
    int result = TradeConfig.rndInt(8);
    assertEquals(8, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_9_Eibw8() {
    int result = TradeConfig.rndInt(9);
    assertEquals(9, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_10_ixuF9() {
    int result = TradeConfig.rndInt(10);
    assertEquals(10, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_11_zofz10() {
    int result = TradeConfig.rndInt(11);
    assertEquals(11, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_12_EVsj11() {
    int result = TradeConfig.rndInt(12);
    assertEquals(12, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_13_gPoP12() {
    int result = TradeConfig.rndInt(13);
    assertEquals(13, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_14_iOCS13() {
    int result = TradeConfig.rndInt(14);
    assertEquals(14, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_15_mlYQ14() {
    int result = TradeConfig.rndInt(15);
    assertEquals(15, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_16_eGIW15() {
    int result = TradeConfig.rndInt(16);
    assertEquals(16, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_17_NjCr16() {
    int result = TradeConfig.rndInt(17);
    assertEquals(17, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_18_pdfn17() {
    int result = TradeConfig.rndInt(18);
    assertEquals(18, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_19_ABBm18() {
    int result = TradeConfig.rndInt(19);
    assertEquals(19, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_20_zwSG19() {
    int result = TradeConfig.rndInt(20);
    assertEquals(20, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_21_HTsN20() {
    int result = TradeConfig.rndInt(21);
    assertEquals(21, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_22_sZlu21() {
    int result = TradeConfig.rndInt(22);
    assertEquals(22, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_23_Iufv22() {
    int result = TradeConfig.rndInt(23);
    assertEquals(23, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_float_QsfZ0() {
    float f = 1.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("1.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_float_negative_Omfj1() {
    float f = -1.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("-1.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_float_decimal_OzFB3() {
    float f = 1.5f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("1.50"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_float_maxValue_fSks4() {
    float f = Float.MAX_VALUE;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal(Float.MAX_VALUE), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_float_minValue_WjKj5() {
    float f = Float.MIN_VALUE;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal(Float.MIN_VALUE), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_float_NaN_uHdK6() {
    float f = Float.NaN;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal(Float.NaN), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_float_infinity_QYNZ7() {
    float f = Float.POSITIVE_INFINITY;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal(Float.POSITIVE_INFINITY), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_float_negativeInfinity_hyOl8() {
    float f = Float.NEGATIVE_INFINITY;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal(Float.NEGATIVE_INFINITY), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_float_random_FKKF9() {
    float f = (float) Math.random();
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal(f), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterfaceWithInvalidValue_Blsl1() {
    TradeConfig config = new TradeConfig();
    config.setWebInterface(-1);
    assertEquals(0, config.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_NDKY0() {
    TradeConfig config = new TradeConfig();
    int runTimeMode = config.getRunTimeMode();
    assertEquals(0, runTimeMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeModeWithDifferentValues_UuRB1() {
    TradeConfig config = new TradeConfig();
    int runTimeMode = config.getRunTimeMode();
    assertEquals(1, runTimeMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeModeWithInvalidValue_haKn3() {
    TradeConfig config = new TradeConfig();
    int runTimeMode = config.getRunTimeMode();
    assertEquals(2, runTimeMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeModeWithValidValue_lurs4() {
    TradeConfig config = new TradeConfig();
    int runTimeMode = config.getRunTimeMode();
    assertEquals(3, runTimeMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserIDWithMaxUsers_LvmS1_2() {
    TradeConfig config = new TradeConfig();
    config.setMAX_USERS(10);
    String nextUser = config.rndUserID();
    assertEquals("uid:0", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserIDWithEmptyDeck_VBrP2_1() {
    TradeConfig config = new TradeConfig();
    config.setMAX_USERS(0);
    String nextUser = config.rndUserID();
    assertNotNull(nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserIDWithEmptyDeck_VBrP2_2() {
    TradeConfig config = new TradeConfig();
    config.setMAX_USERS(0);
    String nextUser = config.rndUserID();
    assertEquals("uid:0", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode_InvalidValue_CBzR1_irEA0() {
    int invalidValue = -1;
    TradeConfig.setOrderProcessingMode(invalidValue);
    assertNotEquals(invalidValue, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERSWithNegativeValue_xdVm1_cvwi0() {
    int maxUsers = -10;
    TradeConfig.setMAX_USERS(maxUsers);
    assertEquals(0, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDisplayOrderAlerts_False_True_kzro4_IjkG0() {
    TradeConfig.setDisplayOrderAlerts(false);
    assertTrue(TradeConfig.getDisplayOrderAlerts());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDisplayOrderAlerts_True_False_hJIV3_nZdP0() {
    TradeConfig.setDisplayOrderAlerts(true);
    assertFalse(TradeConfig.getDisplayOrderAlerts());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERSWithSmallValue_YKTM8_dYMu1() {
    int expected = 1;
    int actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryIntervalWithNull_OpOQ7_TEgH0() {
    try {
      TradeConfig.setMarketSummaryInterval(0);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("Market summary interval cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryIntervalWithEmptyString_Bnle9_sPBq0() {
    try {
      TradeConfig.setMarketSummaryInterval(0);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid market summary interval: ", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUpdateQuotePricesWithParameterFalse_gUiN2_yvOQ0() {
    TradeConfig config = new TradeConfig();
    assertFalse(config.getUpdateQuotePrices());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUpdateQuotePricesWithParameterNull_DqAu3_kaQf0() {
    TradeConfig config = new TradeConfig();
    assertNull(config.getUpdateQuotePrices());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_QUOTES_IBgE1() {
    int expected = 10;
    int actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
    expected = 20;
    actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
    expected = 30;
    actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
    expected = 40;
    actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
    expected = 50;
    actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
    expected = 60;
    actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
    expected = 70;
    actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
    expected = 80;
    actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
    expected = 90;
    actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
    expected = 100;
    actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessModeWithDifferentValues_kPhA1() {
    TradeConfig tradeConfig = new TradeConfig();
    int accessMode = tradeConfig.getAccessMode();
    assertEquals(1, accessMode);
    accessMode = tradeConfig.getAccessMode();
    assertEquals(2, accessMode);
    accessMode = tradeConfig.getAccessMode();
    assertEquals(3, accessMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessModeWithInvalidValue_tQJf2() {
    TradeConfig tradeConfig = new TradeConfig();
    int accessMode = tradeConfig.getAccessMode();
    assertEquals(0, accessMode);
    accessMode = tradeConfig.getAccessMode();
    assertEquals(1, accessMode);
    accessMode = tradeConfig.getAccessMode();
    assertEquals(2, accessMode);
    accessMode = tradeConfig.getAccessMode();
    assertEquals(3, accessMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_aMlP1() {
    String[] expected = new String[]{"WebInterface1", "WebInterface2", "WebInterface3"};
    String[] actual = tradeConfig.getWebInterfaceNames();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserID_JOvw1() {
    String expected = "newUserPrefix" + "localhost" + System.currentTimeMillis() + 0;
    String actual = tradeConfig.rndNewUserID();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPublishQuotePriceChange_VHyy1() {
    TradeConfig config = new TradeConfig();
    boolean result = config.getPublishQuotePriceChange();
    assertTrue(result);
    assertFalse(config.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_HOLDINGS_aNJv1() {
    int expected = 10;
    int actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
    expected = 20;
    actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
    expected = 30;
    actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
    expected = 40;
    actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
    expected = 50;
    actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
    expected = 60;
    actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
    expected = 70;
    actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
    expected = 80;
    actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
    expected = 90;
    actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
    expected = 100;
    actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetJDBCDriverNeedsGlobalTransation_LBne1() {
    boolean expected = true;
    boolean actual = tradeConfig.getJDBCDriverNeedsGlobalTransation();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_MaxQuotes_taif1() {
    String symbol = config.rndSymbol();
    assertEquals("s:99", symbol);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_MinQuotes_LCKT2() {
    String symbol = config.rndSymbol();
    assertEquals("s:0", symbol);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_RandomQuotes_jAXw3() {
    String symbol = config.rndSymbol();
    assertTrue(symbol.startsWith("s:"));
    assertTrue(symbol.endsWith("99"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_SuZf1() {
    int expected = 1;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
    expected = 2;
    actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
    expected = 3;
    actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
    expected = 4;
    actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
    expected = 5;
    actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Positive_RoundUp_tMJZ3() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertTrue(result.doubleValue() > 0.0);
    assertEquals(1.0, result.doubleValue(), 0.00001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Negative_RoundDown_iOFK4() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertTrue(result.doubleValue() < 0.0);
    assertEquals(-1.0, result.doubleValue(), 0.00001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Zero_RoundHalfUp_hrGf5() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(0.0, result.doubleValue());
    assertEquals(0.5, result.doubleValue(), 0.00001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard_EgyW0() {
    String creditCard = TradeConfig.rndCreditCard();
    assertNotNull(creditCard);
    assertTrue(creditCard.matches("\\d{3}-\\d{4}-\\d{4}-\\d{4}"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeNames_OfoV0() {
    String[] orderProcessingModeNames = TradeConfig.getOrderProcessingModeNames();
    assertNotNull(orderProcessingModeNames);
    assertEquals(3, orderProcessingModeNames.length);
    assertEquals("LIVE", orderProcessingModeNames[0]);
    assertEquals("SIMULATED", orderProcessingModeNames[1]);
    assertEquals("PAPER", orderProcessingModeNames[2]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_dCJu0() {
    TradeConfig config = new TradeConfig();
    String nextUser = config.rndUserID();
    assertNotNull(nextUser);
    assertEquals("uid:0", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserIDWithEmptyDeck_VBrP2() {
    TradeConfig config = new TradeConfig();
    config.setMAX_USERS(0);
    String nextUser = config.rndUserID();
    assertNotNull(nextUser);
    assertEquals("uid:0", nextUser);
  }
}