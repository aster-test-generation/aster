/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJDBCRead2JSP_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_hhrL0() {
    PingJDBCRead2JSP ping = new PingJDBCRead2JSP();
    String expected = "Basic JDBC Read using a prepared statment forwarded to a JSP, makes use of TradeJDBC class";
    String actual = ping.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_TzSj0() throws ServletException {
    PingJDBCRead2JSP servlet = new PingJDBCRead2JSP();
    ServletConfig config = mock(ServletConfig.class);
    servlet.init(config);
    assertTrue(servlet.getServletConfig() == config);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullConfig_tdqC1() throws ServletException {
    PingJDBCRead2JSP servlet = new PingJDBCRead2JSP();
    servlet.init(null);
    assertNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithInvalidConfig_BsQp2() throws ServletException {
    PingJDBCRead2JSP servlet = new PingJDBCRead2JSP();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getInitParameter("ping.jdbc.read.2.jsp")).thenReturn("invalid_value");
    servlet.init(config);
    assertNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithValidConfig_TAhC3() throws ServletException {
    PingJDBCRead2JSP servlet = new PingJDBCRead2JSP();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getInitParameter("ping.jdbc.read.2.jsp")).thenReturn("valid_value");
    servlet.init(config);
    assertNotNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullServletContext_iHOk4() throws ServletException {
    PingJDBCRead2JSP servlet = new PingJDBCRead2JSP();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getServletContext()).thenReturn(null);
    servlet.init(config);
    assertNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithValidServletContext_wJcf5() throws ServletException {
    PingJDBCRead2JSP servlet = new PingJDBCRead2JSP();
    ServletConfig config = mock(ServletConfig.class);
    ServletContext context = mock(ServletContext.class);
    when(config.getServletContext()).thenReturn(context);
    servlet.init(config);
    assertNotNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithValidServletConfig_ZICl7() throws ServletException {
    PingJDBCRead2JSP servlet = new PingJDBCRead2JSP();
    ServletConfig config = mock(ServletConfig.class);
    servlet.init(config);
    assertNotNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetException_MCQL1() throws ServletException, IOException {
    PingJDBCRead2JSP ping = new PingJDBCRead2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    when(req.getServletContext()).thenReturn(ctx);
    when(ctx.getRequestDispatcher("/quoteDataPrimitive.jsp")).thenThrow(new ServletException());
    ping.doGet(req, res);
    verify(ctx).getRequestDispatcher("/quoteDataPrimitive.jsp");
    verify(res).sendError(500, "PingJDBCRead2JSP Exception caught: " + any(Exception.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithInvalidConfig_BsQp2_fid1() throws ServletException {
    PingJDBCRead2JSP servlet = new PingJDBCRead2JSP();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getInitParameter("ping.jdbc.read.2.jsp")).thenReturn("invalid_value");
    servlet.init(config);
    assertNotNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithValidConfig_TAhC3_fid1() throws ServletException {
    PingJDBCRead2JSP servlet = new PingJDBCRead2JSP();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getInitParameter("ping.jdbc.read.2.jsp")).thenReturn("valid_value");
    servlet.init(config);
    assertNotNull(servlet.getServletConfig());
    // Fix the assertion
    assertEquals("valid_value", servlet.getServletConfig().getInitParameter("ping.jdbc.read.2.jsp"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullServletContext_iHOk4_fid1() throws ServletException {
    PingJDBCRead2JSP servlet = new PingJDBCRead2JSP();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getServletContext()).thenReturn(null);
    servlet.init(config);
    assertNull(servlet.getServletContext());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithValidServletContext_wJcf5_fid1() throws ServletException {
    PingJDBCRead2JSP servlet = new PingJDBCRead2JSP();
    ServletConfig config = mock(ServletConfig.class);
    ServletContext context = mock(ServletContext.class);
    when(config.getServletContext()).thenReturn(context);
    servlet.init(config);
    assertNotNull(servlet.getServletConfig());
    // Fix the assertion
    assertEquals(context, servlet.getServletConfig().getServletContext());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithValidServletConfig_ZICl7_fid1() throws ServletException {
    PingJDBCRead2JSP servlet = new PingJDBCRead2JSP();
    ServletConfig config = mock(ServletConfig.class);
    servlet.init(config);
    assertNotNull(servlet.getServletConfig());
    // Fix the assertion
    assertEquals(config, servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithValidServletConfigAndNullServletContext_avGM9_fid1() throws ServletException {
    PingJDBCRead2JSP servlet = new PingJDBCRead2JSP();
    ServletConfig config = mock(ServletConfig.class);
    servlet.init(config);
    assertNotNull(servlet.getServletConfig());
    // Fix the assertion
    assertNotNull(servlet.getServletContext());
  }
}