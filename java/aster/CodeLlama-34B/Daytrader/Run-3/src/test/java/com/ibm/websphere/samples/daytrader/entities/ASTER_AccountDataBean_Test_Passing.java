/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCount_ZQlt0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLoginCount(5);
    assertEquals(5, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_sVQZ0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLogoutCount(5);
    Assertions.assertEquals(5, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreationDate_IdFB0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Date creationDate = accountDataBean.getCreationDate();
    assertEquals(new Date(), creationDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_WrBj0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(50.0), "profileID");
    accountDataBean.print();
    assertEquals("AccountDataBean[accountID=1, loginCount=2, logoutCount=0, lastLogin=null, creationDate=null, balance=100.0, openBalance=50.0, profileID=profileID]", accountDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ZJNq0_1() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ZJNq0_2() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ZJNq0_3() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ZJNq0_4() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ZJNq0_5() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ZJNq0_6() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ZJNq0_7() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ZJNq0_8() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ZJNq0_9() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ZJNq0_10() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ZJNq0_11() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ZJNq0_12() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginSuccess_DgWA0_1() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profile1");
    account.login("password");
    assertEquals(1, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginSuccess_DgWA0_2() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profile1");
    account.login("password");
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailure_WqXp1_1() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profile1");
    account.login("wrong_password");
    assertEquals(0, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailure_WqXp1_2() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profile1");
    account.login("wrong_password");
    assertNull(account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginNullProfile_zZye2_1() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profile1");
    account.setProfile(null);
    account.login("password");
    assertEquals(0, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginNullProfile_zZye2_2() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profile1");
    account.setProfile(null);
    account.login("password");
    assertNull(account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginNullPassword_rxzT3_1() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profile1");
    account.login(null);
    assertEquals(0, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginNullPassword_rxzT3_2() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profile1");
    account.login(null);
    assertNull(account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_jKoV0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.logout();
    assertEquals(2, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithZeroLoginCount_lUTU1() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.logout();
    assertEquals(1, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileID_qcTt0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setProfileID("newProfileID");
    assertEquals("newProfileID", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileIDWithNull_hlWP1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setProfileID(null);
    assertNull(accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithEmptyHoldings_lwHg1_1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    Collection<HoldingDataBean> holdings = accountDataBean.getHoldings();
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithEmptyHoldings_lwHg1_2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    Collection<HoldingDataBean> holdings = accountDataBean.getHoldings();
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfile_nXFC0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    AccountProfileDataBean profile = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountDataBean.setProfile(profile);
    assertEquals(profile, accountDataBean.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLogin_oZmS0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    Date lastLogin = accountDataBean.getLastLogin();
    assertEquals(new Date(), lastLogin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalance_SKqM0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "profileID");
    BigDecimal balance = accountDataBean.getBalance();
    assertEquals(new BigDecimal(100.0), balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalanceWithZeroBalance_KjSt1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(0.0), new BigDecimal(100.0), "profileID");
    BigDecimal balance = accountDataBean.getBalance();
    assertEquals(new BigDecimal(0.0), balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalanceWithNegativeBalance_sOwA2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(-100.0), new BigDecimal(100.0), "profileID");
    BigDecimal balance = accountDataBean.getBalance();
    assertEquals(new BigDecimal(-100.0), balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountID_GUwP0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    assertEquals(1, accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountIDWithZeroAccountID_xPdY2() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    assertEquals(0, accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountIDWithNegativeAccountID_oUMG3() {
    AccountDataBean accountDataBean = new AccountDataBean(-1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    assertEquals(-1, accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountIDWithMaxValueAccountID_eqFv4() {
    AccountDataBean accountDataBean = new AccountDataBean(Integer.MAX_VALUE, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    assertEquals(Integer.MAX_VALUE, accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountIDWithMinValueAccountID_GdTD5() {
    AccountDataBean accountDataBean = new AccountDataBean(Integer.MIN_VALUE, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    assertEquals(Integer.MIN_VALUE, accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalance_ZdFN0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    BigDecimal openBalance = accountDataBean.getOpenBalance();
    assertEquals(new BigDecimal(50), openBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalanceWithZeroBalance_QRnH1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(0), new BigDecimal(0), "profileID");
    BigDecimal openBalance = accountDataBean.getOpenBalance();
    assertEquals(new BigDecimal(0), openBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_UElP0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    String html = accountDataBean.toHTML();
    assertEquals("<BR>Account Data for account: <B>1</B><LI>   loginCount:2</LI><LI>  logoutCount:3</LI><LI>    lastLogin:2023-02-28 12:00:00</LI><LI> creationDate:2023-02-28 12:00:00</LI><LI>      balance:100</LI><LI>  openBalance:50</LI><LI>    profileID:profileID</LI>", html);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileID_xdXM0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    assertEquals("profileID", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileIDWithNullProfileID_etvo1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), null);
    assertNull(accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileIDWithEmptyProfileID_TrBy2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "");
    assertEquals("", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileIDWithInvalidProfileID_Aitr4() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "invalidProfileID");
    assertEquals("invalidProfileID", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileIDWithNullAccountDataBean_wnPJ5() {
    AccountDataBean accountDataBean = null;
    assertNull(accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCount_TIrP0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(2, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCountWithZeroLoginCount_uKZh1() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCountWithNegativeLoginCount_uEUN2() {
    AccountDataBean accountDataBean = new AccountDataBean(-1, 0, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCountWithNullCreationDate_qieq5() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, null, new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCountWithNullBalance_qANT6() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), null, BigDecimal.ZERO, "profileID");
    assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCountWithNullOpenBalance_KAmj7() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.ZERO, null, "profileID");
    assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCountWithNullProfileID_fZvw8() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, null);
    assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrdersWithEmptyCollection_eazn1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 10, 10, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Collection<OrderDataBean> orders = new ArrayList<>();
    accountDataBean.setOrders(orders);
    assertEquals(orders, accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrdersWithNullCollection_qluU2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 10, 10, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setOrders(null);
    assertNull(accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingsWithNull_LeSW1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setHoldings(null);
    assertEquals(0, accountDataBean.getHoldings().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingsWithEmptyCollection_DyDc2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Collection<HoldingDataBean> holdings = new ArrayList<>();
    accountDataBean.setHoldings(holdings);
    assertEquals(0, accountDataBean.getHoldings().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_withAccountID_PZAD0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    int expectedHashCode = 1;
    int actualHashCode = accountDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_withoutAccountID_wXUX1() {
    AccountDataBean accountDataBean = new AccountDataBean(2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    int expectedHashCode = 2;
    int actualHashCode = accountDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_withNullAccountID_GnvR2() {
    AccountDataBean accountDataBean = new AccountDataBean(null, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    int expectedHashCode = 2;
    int actualHashCode = accountDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_withNullLastLogin_tvDc5() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, null, new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    int expectedHashCode = 5;
    int actualHashCode = accountDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_withNullCreationDate_iDNu6() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), null, new BigDecimal(100), new BigDecimal(100), "profileID");
    int expectedHashCode = 6;
    int actualHashCode = accountDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_withNullBalance_SUjH7() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), null, new BigDecimal(100), "profileID");
    int expectedHashCode = 7;
    int actualHashCode = accountDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_JFsM0_1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Collection<OrderDataBean> orders = accountDataBean.getOrders();
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_JFsM0_2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Collection<OrderDataBean> orders = accountDataBean.getOrders();
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_1_eLoi0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(1, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_2_gopa1() {
    AccountDataBean accountDataBean = new AccountDataBean(2, 2, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(2, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_3_vgKW2() {
    AccountDataBean accountDataBean = new AccountDataBean(3, 3, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(3, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_4_cFgL3() {
    AccountDataBean accountDataBean = new AccountDataBean(4, 4, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(4, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_5_WYZX4() {
    AccountDataBean accountDataBean = new AccountDataBean(5, 5, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(5, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_6_gOmx5() {
    AccountDataBean accountDataBean = new AccountDataBean(6, 6, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(6, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_7_dLeH6() {
    AccountDataBean accountDataBean = new AccountDataBean(7, 7, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(7, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_8_xgvD7() {
    AccountDataBean accountDataBean = new AccountDataBean(8, 8, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(8, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_9_Axez8() {
    AccountDataBean accountDataBean = new AccountDataBean(9, 9, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(9, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_10_aCWy9() {
    AccountDataBean accountDataBean = new AccountDataBean(10, 10, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(10, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_11_LkIO10() {
    AccountDataBean accountDataBean = new AccountDataBean(11, 11, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(11, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_12_qqZV11() {
    AccountDataBean accountDataBean = new AccountDataBean(12, 12, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(12, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_13_kPzI12() {
    AccountDataBean accountDataBean = new AccountDataBean(13, 13, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(13, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_OCDF0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    assertTrue(accountDataBean.equals(accountDataBean));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObject_iRBi1() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountDataBean accountDataBean2 = new AccountDataBean(2, 3, new Date(), new Date(), new BigDecimal(200), new BigDecimal(200), "profileID");
    assertFalse(accountDataBean1.equals(accountDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_cCiM2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    assertFalse(accountDataBean.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_ydXi3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    assertFalse(accountDataBean.equals(""));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentValues_NANW5() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountDataBean accountDataBean2 = new AccountDataBean(1, 3, new Date(), new Date(), new BigDecimal(200), new BigDecimal(200), "profileID");
    assertFalse(accountDataBean1.equals(accountDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_hBFr0_1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertNotNull(profile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_hBFr0_2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("profileID", profile.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_hBFr0_3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("fullName", profile.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_hBFr0_4() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("address", profile.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_hBFr0_5() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("email", profile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_hBFr0_6() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("creditCard", profile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_hBFr0_7() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("password", profile.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithNullProfile_VFdP1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), null);
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertNull(profile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithEmptyProfile_eBow2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertNull(profile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithInvalidProfile_AEeF3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "invalidProfileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertNull(profile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithNullAccountDataBean_nRlT4() {
    AccountDataBean accountDataBean = null;
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertNull(profile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithInvalidAccountDataBean_wIKG5() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertNull(profile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_ZDsl0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    String expected = "\n\tAccount Data for account: 1\n\t\t   loginCount:2\n\t\t  logoutCount:3\n\t\t    lastLogin:2023-02-28 12:00:00\n\t\t creationDate:2023-02-28 12:00:00\n\t\t      balance:100\n\t\t  openBalance:50\n\t\t    profileID:profileID";
    String actual = accountDataBean.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithZeroValues_NbQP2() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, 0, new Date(0), new Date(0), new BigDecimal(0), new BigDecimal(0), "");
    String expected = "\n\tAccount Data for account: 0\n\t\t   loginCount:0\n\t\t  logoutCount:0\n\t\t    lastLogin:1970-01-01 00:00:00\n\t\t creationDate:1970-01-01 00:00:00\n\t\t      balance:0\n\t\t  openBalance:0\n\t\t    profileID:";
    String actual = accountDataBean.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNegativeValues_TaXB3() {
    AccountDataBean accountDataBean = new AccountDataBean(-1, -2, -3, new Date(-1), new Date(-1), new BigDecimal(-100), new BigDecimal(-50), "profileID");
    String expected = "\n\tAccount Data for account: -1\n\t\t   loginCount:-2\n\t\t  logoutCount:-3\n\t\t    lastLogin:1969-12-31 23:59:59\n\t\t creationDate:1969-12-31 23:59:59\n\t\t      balance:-100\n\t\t  openBalance:-50\n\t\t    profileID:profileID";
    String actual = accountDataBean.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDate_OEIk0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Date creationDate = new Date();
    accountDataBean.setCreationDate(creationDate);
    assertEquals(creationDate, accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateWithNull_FYHj1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setCreationDate(null);
    assertNull(accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateWithDifferentDate_GnCJ2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Date creationDate = new Date(1000000000);
    accountDataBean.setCreationDate(creationDate);
    assertNotEquals(creationDate, accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateWithSameDate_znZf3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Date creationDate = new Date(1000000000);
    accountDataBean.setCreationDate(creationDate);
    assertEquals(creationDate, accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalance_ouDs0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    BigDecimal newBalance = new BigDecimal(200);
    accountDataBean.setBalance(newBalance);
    assertEquals(newBalance, accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceNull_dFUS1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    accountDataBean.setBalance(null);
    assertNull(accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceNegative_IrIp2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    BigDecimal newBalance = new BigDecimal(-100);
    accountDataBean.setBalance(newBalance);
    assertEquals(newBalance, accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceZero_jRor3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    BigDecimal newBalance = new BigDecimal(0);
    accountDataBean.setBalance(newBalance);
    assertEquals(newBalance, accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceNonZero_vzKu4() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    BigDecimal newBalance = new BigDecimal(100);
    accountDataBean.setBalance(newBalance);
    assertEquals(newBalance, accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceLarge_DjEY5() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    BigDecimal newBalance = new BigDecimal(1000000000);
    accountDataBean.setBalance(newBalance);
    assertEquals(newBalance, accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountIDWithNullAccountID_cDzs1_BPgU0() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    assertNull(accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCountWithNullLogoutCount_WBgW4_HTDh0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 0, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_withNullLogoutCount_GFxZ4_Tqvr0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    int expectedHashCode = 4;
    int actualHashCode = accountDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_withNullLoginCount_LrCy3_xvYM0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 0, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    int expectedHashCode = 3;
    int actualHashCode = accountDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateWithNullDate_rCyb8_kSmE0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Date creationDate = null;
    accountDataBean.setCreationDate(creationDate);
    assertNull(accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateWithSameType_zQnd5_wdkg0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Date creationDate = new Date(2023, 0, 1);
    accountDataBean.setCreationDate(creationDate);
    assertEquals(creationDate, accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateWithDifferentType_TBJk4_iigo0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Date creationDate = new Date(2023, 0, 1);
    accountDataBean.setCreationDate(creationDate);
    assertNotEquals(creationDate, accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateWithValidDate_dJtn7_cGVQ0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Date creationDate = new Date(2023, 2, 28);
    accountDataBean.setCreationDate(creationDate);
    assertEquals(creationDate, accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ZJNq0() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean);
    assertNotNull(accountDataBean.getAccountID());
    assertNotNull(accountDataBean.getLoginCount());
    assertNotNull(accountDataBean.getLogoutCount());
    assertNotNull(accountDataBean.getLastLogin());
    assertNotNull(accountDataBean.getCreationDate());
    assertNotNull(accountDataBean.getBalance());
    assertNotNull(accountDataBean.getOpenBalance());
    assertNotNull(accountDataBean.getProfileID());
    assertNotNull(accountDataBean.getHoldings());
    assertNotNull(accountDataBean.getOrders());
    assertNotNull(accountDataBean.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginSuccess_DgWA0() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profile1");
    account.login("password");
    assertEquals(1, account.getLoginCount());
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailure_WqXp1() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profile1");
    account.login("wrong_password");
    assertEquals(0, account.getLoginCount());
    assertNull(account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginNullProfile_zZye2() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profile1");
    account.setProfile(null);
    account.login("password");
    assertEquals(0, account.getLoginCount());
    assertNull(account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginNullPassword_rxzT3() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profile1");
    account.login(null);
    assertEquals(0, account.getLoginCount());
    assertNull(account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithEmptyHoldings_lwHg1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    Collection<HoldingDataBean> holdings = accountDataBean.getHoldings();
    assertNotNull(holdings);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_JFsM0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Collection<OrderDataBean> orders = accountDataBean.getOrders();
    assertNotNull(orders);
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_hBFr0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertNotNull(profile);
    assertEquals("profileID", profile.getUserID());
    assertEquals("fullName", profile.getFullName());
    assertEquals("address", profile.getAddress());
    assertEquals("email", profile.getEmail());
    assertEquals("creditCard", profile.getCreditCard());
    assertEquals("password", profile.getPassword());
  }
}