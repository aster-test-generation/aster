/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Passing {
  private String symbol;
  private Integer orderID;
  private HoldingDataBean holding;
  private double quantity;
  private String orderType;
  private QuoteDataBean quote;
  private BigDecimal price;
  private String orderStatus;
  @Mock
  private OrderDataBean orderDataBean;
  private AccountDataBean account;
  private BigDecimal orderFee;
  private Date openDate;
  private Date completionDate;
  OrderDataBean orderdatabean;

  public void testSetAccount_oVNZ0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    AccountDataBean accountDataBean = new AccountDataBean();
    orderDataBean.setAccount(accountDataBean);
    assertEquals(accountDataBean, orderDataBean.getAccount());
  }

  public void testSetAccountWithNull_MZSO1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setAccount(null);
    assertNull(orderDataBean.getAccount());
  }

  public void testSetAccountWithDifferentObject_Kyht2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    AccountDataBean accountDataBean = new AccountDataBean();
    orderDataBean.setAccount(accountDataBean);
    assertNotEquals(new AccountDataBean(), orderDataBean.getAccount());
  }

  public void testSetAccountWithSameObject_dHsQ3() {
    OrderDataBean orderDataBean = new OrderDataBean();
    AccountDataBean accountDataBean = new AccountDataBean();
    orderDataBean.setAccount(accountDataBean);
    assertEquals(accountDataBean, orderDataBean.getAccount());
  }

  public void testSetAccountWithDifferentAccountID_HpzE4() {
    OrderDataBean orderDataBean = new OrderDataBean();
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setAccountID(1);
    orderDataBean.setAccount(accountDataBean);
    assertNotEquals(new AccountDataBean().getAccountID(), orderDataBean.getAccount().getAccountID());
  }

  public void testSetAccountWithSameAccountID_CooX5() {
    OrderDataBean orderDataBean = new OrderDataBean();
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setAccountID(1);
    orderDataBean.setAccount(accountDataBean);
    assertEquals(accountDataBean.getAccountID(), orderDataBean.getAccount().getAccountID());
  }

  public void testSetAccountWithDifferentLoginCount_vKCe6() {
    OrderDataBean orderDataBean = new OrderDataBean();
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setLoginCount(1);
    orderDataBean.setAccount(accountDataBean);
    assertNotEquals(new AccountDataBean().getLoginCount(), orderDataBean.getAccount().getLoginCount());
  }

  public void testSetAccountWithSameLoginCount_sKyU7() {
    OrderDataBean orderDataBean = new OrderDataBean();
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setLoginCount(1);
    orderDataBean.setAccount(accountDataBean);
    assertEquals(accountDataBean.getLoginCount(), orderDataBean.getAccount().getLoginCount());
  }

  public void testSetAccountWithDifferentLogoutCount_SXBZ8() {
    OrderDataBean orderDataBean = new OrderDataBean();
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setLogoutCount(1);
    orderDataBean.setAccount(accountDataBean);
    assertNotEquals(new AccountDataBean().getLogoutCount(), orderDataBean.getAccount().getLogoutCount());
  }

  public void testSetAccountWithSameLogoutCount_FIJU9() {
    OrderDataBean orderDataBean = new OrderDataBean();
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setLogoutCount(1);
    orderDataBean.setAccount(accountDataBean);
    assertEquals(accountDataBean.getLogoutCount(), orderDataBean.getAccount().getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbol_GpAy0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setSymbol("GOOG");
    assertEquals("GOOG", orderDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithNull_uUNG1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setSymbol(null);
    assertNull(orderDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithEmptyString_jgsz2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setSymbol("");
    assertEquals("", orderDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_yZoY0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "GOOG");
    assertEquals(100.0, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantityWithZeroQuantity_NWoZ1() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 0.0, new BigDecimal(10.0), new BigDecimal(1.0), "GOOG");
    assertEquals(0.0, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantityWithNegativeQuantity_EEvp2() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), -100.0, new BigDecimal(10.0), new BigDecimal(1.0), "GOOG");
    assertEquals(-100.0, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_FAsY0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal expectedOrderFee = new BigDecimal(10.0);
    orderDataBean.setOrderFee(expectedOrderFee);
    BigDecimal actualOrderFee = orderDataBean.getOrderFee();
    assertEquals(expectedOrderFee, actualOrderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeWithNull_zpHG1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal expectedOrderFee = null;
    orderDataBean.setOrderFee(expectedOrderFee);
    BigDecimal actualOrderFee = orderDataBean.getOrderFee();
    assertNull(actualOrderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeWithZero_HEbI2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal expectedOrderFee = BigDecimal.ZERO;
    orderDataBean.setOrderFee(expectedOrderFee);
    BigDecimal actualOrderFee = orderDataBean.getOrderFee();
    assertEquals(expectedOrderFee, actualOrderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOrderID() throws Exception {
    orderDataBean = new OrderDataBean();
    when(orderDataBean.getOrderID()).thenReturn(1);
    assertEquals(1, orderDataBean.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_orderIDNotNull_vYbv0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    int expectedHashCode = 1;
    int actualHashCode = orderDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_orderIDNull_NcVv1() {
    OrderDataBean orderDataBean = new OrderDataBean(null, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    int expectedHashCode = 0;
    int actualHashCode = orderDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_GLqq0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal price = new BigDecimal(10.50);
    orderDataBean.setPrice(price);
    assertEquals(price, orderDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithNull_FCNy1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setPrice(null);
    assertNull(orderDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithZero_fsQn2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal price = new BigDecimal(0);
    orderDataBean.setPrice(price);
    assertEquals(price, orderDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_apmb0_1() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_apmb0_2() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_apmb0_3() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_apmb0_4() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_apmb0_5() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_apmb0_6() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_apmb0_7() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_apmb0_8() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_apmb0_9() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_apmb0_10() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_apmb0_11() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_apmb0_12() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_apmb0_13() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbolWithoutQuote_Ygty1() {
    OrderDataBean order = new OrderDataBean();
    assertEquals(null, order.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee_oikD0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = new BigDecimal(10.0);
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFeeWithNull_hCPG1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderFee(null);
    assertNull(orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFeeWithZero_PrVk2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = new BigDecimal(0.0);
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisBuy() throws Exception {
    orderdatabean = new OrderDataBean();
    when(orderdatabean.getOrderType()).thenReturn("buy");
    assertTrue(orderdatabean.isBuy());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_qzla0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "GOOG");
    String html = orderDataBean.toHTML();
    assertEquals("<BR>Order <B>1</B><LI>      orderType: BUY</LI><LI>    orderStatus: OPEN</LI><LI>       openDate: " + new Date() + "</LI><LI> completionDate: " + new Date() + "</LI><LI>       quantity: 100.0</LI><LI>          price: 10.0</LI><LI>       orderFee: 1.0</LI><LI>         symbol: GOOG</LI>", html);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithZeroValues_ARSP4() {
    OrderDataBean orderDataBean = new OrderDataBean(0, "BUY", "OPEN", new Date(), new Date(), 0.0, BigDecimal.valueOf(0.0), BigDecimal.valueOf(0.0), "GOOG");
    String html = orderDataBean.toHTML();
    assertEquals("<BR>Order <B>0</B><LI>      orderType: BUY</LI><LI>    orderStatus: OPEN</LI><LI>       openDate: " + new Date() + "</LI><LI> completionDate: " + new Date() + "</LI><LI>       quantity: 0.0</LI><LI>          price: 0.0</LI><LI>       orderFee: 0.0</LI><LI>         symbol: GOOG</LI>", html);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_kwCc0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    assertTrue(orderDataBean.equals(orderDataBean));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObject_gzWM1() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    OrderDataBean orderDataBean2 = new OrderDataBean(2, "SELL", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "GOOG");
    assertFalse(orderDataBean1.equals(orderDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_IAcX2() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    assertFalse(orderDataBean.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_Mcwg3() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    AccountDataBean accountDataBean = new AccountDataBean(1, 10, 10, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "profile1");
    assertFalse(orderDataBean.equals(accountDataBean));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameValues_Golu4() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    assertTrue(orderDataBean1.equals(orderDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentOrderID_mpHd5() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    OrderDataBean orderDataBean2 = new OrderDataBean(2, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    assertFalse(orderDataBean1.equals(orderDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentOrderType_zmmr6() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "SELL", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    assertFalse(orderDataBean1.equals(orderDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_yRRI0() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + new Date() + "\n\t completionDate: " + new Date() + "\n\t       quantity: 100.0\n\t          price: 10.0\n\t       orderFee: 1.0\n\t         symbol: AAPL";
    assertEquals(expected, order.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuoteNull_HghL1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setQuote(null);
    assertNull(orderDataBean.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatus_NPMc0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("open");
    assertEquals("open", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithNull_Oato1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus(null);
    assertEquals(null, orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithEmptyString_uQkT2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("");
    assertEquals("", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithInvalidString_UFhJ3() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("invalid");
    assertEquals("invalid", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithValidString_BbPJ4() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("valid");
    assertEquals("valid", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCases_JIpk5_1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    orderDataBean.setOrderStatus("Closed");
    orderDataBean.setOrderStatus("pending");
    assertEquals("OPEN", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCases_JIpk5_2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    orderDataBean.setOrderStatus("Closed");
    orderDataBean.setOrderStatus("pending");
    assertEquals("Closed", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCases_JIpk5_3() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    orderDataBean.setOrderStatus("Closed");
    orderDataBean.setOrderStatus("pending");
    assertEquals("pending", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCasesAndInvalidString_yAHX6_1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    orderDataBean.setOrderStatus("Closed");
    orderDataBean.setOrderStatus("pending");
    orderDataBean.setOrderStatus("invalid");
    assertEquals("OPEN", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCasesAndInvalidString_yAHX6_2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    orderDataBean.setOrderStatus("Closed");
    orderDataBean.setOrderStatus("pending");
    orderDataBean.setOrderStatus("invalid");
    assertEquals("Closed", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCasesAndInvalidString_yAHX6_3() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    orderDataBean.setOrderStatus("Closed");
    orderDataBean.setOrderStatus("pending");
    orderDataBean.setOrderStatus("invalid");
    assertEquals("pending", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCasesAndInvalidString_yAHX6_4() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    orderDataBean.setOrderStatus("Closed");
    orderDataBean.setOrderStatus("pending");
    orderDataBean.setOrderStatus("invalid");
    assertEquals("invalid", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCasesAndEmptyString_NIYR7_1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    orderDataBean.setOrderStatus("Closed");
    orderDataBean.setOrderStatus("pending");
    orderDataBean.setOrderStatus("");
    assertEquals("OPEN", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCasesAndEmptyString_NIYR7_2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    orderDataBean.setOrderStatus("Closed");
    orderDataBean.setOrderStatus("pending");
    orderDataBean.setOrderStatus("");
    assertEquals("Closed", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCasesAndEmptyString_NIYR7_3() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    orderDataBean.setOrderStatus("Closed");
    orderDataBean.setOrderStatus("pending");
    orderDataBean.setOrderStatus("");
    assertEquals("pending", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCasesAndEmptyString_NIYR7_4() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    orderDataBean.setOrderStatus("Closed");
    orderDataBean.setOrderStatus("pending");
    orderDataBean.setOrderStatus("");
    assertEquals("", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCasesAndNull_UrGD8_1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    orderDataBean.setOrderStatus("Closed");
    orderDataBean.setOrderStatus("pending");
    orderDataBean.setOrderStatus(null);
    assertEquals("OPEN", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCasesAndNull_UrGD8_2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    orderDataBean.setOrderStatus("Closed");
    orderDataBean.setOrderStatus("pending");
    orderDataBean.setOrderStatus(null);
    assertEquals("Closed", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCasesAndNull_UrGD8_3() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    orderDataBean.setOrderStatus("Closed");
    orderDataBean.setOrderStatus("pending");
    orderDataBean.setOrderStatus(null);
    assertEquals("pending", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCasesAndNull_UrGD8_4() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    orderDataBean.setOrderStatus("Closed");
    orderDataBean.setOrderStatus("pending");
    orderDataBean.setOrderStatus(null);
    assertEquals(null, orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHolding_ztan0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    orderDataBean.setHolding(holdingDataBean);
    assertEquals(holdingDataBean, orderDataBean.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingNull_tNiw2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setHolding(null);
    assertNull(orderDataBean.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_open_closed_Pzac11() {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDate_rFsP0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    Date completionDate = new Date();
    orderDataBean.setCompletionDate(completionDate);
    assertEquals(completionDate, orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDateWithNull_dOAN1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setCompletionDate(null);
    assertNull(orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDateWithDifferentDate_gfEY2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    Date completionDate = new Date();
    Date differentDate = new Date(completionDate.getTime() + 1000);
    orderDataBean.setCompletionDate(completionDate);
    assertNotEquals(differentDate, orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDateWithDifferentTimeZone_SPdn4() {
    OrderDataBean orderDataBean = new OrderDataBean();
    Date completionDate = new Date();
    Date differentTimeZoneDate = new Date(completionDate.getTime() + 1000);
    orderDataBean.setCompletionDate(completionDate);
    assertNotEquals(differentTimeZoneDate, orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDateWithDifferentTime_yaWn6() {
    OrderDataBean orderDataBean = new OrderDataBean();
    Date completionDate = new Date();
    Date differentTimeDate = new Date(completionDate.getTime() + 1000);
    orderDataBean.setCompletionDate(completionDate);
    assertNotEquals(differentTimeDate, orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDateWithDifferentDateAndTime_Jjhn8() {
    OrderDataBean orderDataBean = new OrderDataBean();
    Date completionDate = new Date();
    Date differentDateAndTimeDate = new Date(completionDate.getTime() + 1000);
    orderDataBean.setCompletionDate(completionDate);
    assertNotEquals(differentDateAndTimeDate, orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbolWithEmptyQuote_GmZe3_WXnX0() {
    QuoteDataBean quote = new QuoteDataBean("");
    OrderDataBean order = new OrderDataBean();
    order.setQuote(quote);
    assertEquals("", order.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDateWithNull_KBYW1_zUcN0() {
    OrderDataBean orderDataBean = new OrderDataBean(new Integer(1), "BUY", "OPEN", null, new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    orderDataBean.setOpenDate(null);
    assertNull(orderDataBean.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDate_ckTn0_UhvL0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    Date newOpenDate = new Date();
    orderDataBean.setOpenDate(newOpenDate);
    assertEquals(newOpenDate, orderDataBean.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_SjvE0() {
    orderDataBean = new OrderDataBean();
  }

  @Test
  public void testIsCancelled_rFyG1() {
    orderDataBean.setOrderStatus("cancelled");
    assertTrue(orderDataBean.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_alertcompleted_ZfOe1_AvWw0() {
    OrderDataBean orderDataBean = new OrderDataBean("alertcompleted", "open", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(10.0), new AccountDataBean(), new QuoteDataBean(), new HoldingDataBean());
    assertTrue(orderDataBean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_completed_YxHG0_kxif0() {
    OrderDataBean orderDataBean = new OrderDataBean("completed", "open", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(10.0), new AccountDataBean(), new QuoteDataBean(), new HoldingDataBean());
    assertTrue(orderDataBean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_notCompleted_Vzua3_RTox0() {
    OrderDataBean orderDataBean = new OrderDataBean("open", "open", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(10.0), new AccountDataBean(), new QuoteDataBean(), new HoldingDataBean());
    assertFalse(orderDataBean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_cancelled_closed_ndRA9_muIk0() {
    OrderDataBean orderDataBean = new OrderDataBean("cancelled", "closed", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(10.0), new AccountDataBean(), new QuoteDataBean(), new HoldingDataBean());
    assertTrue(orderDataBean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_alertcompleted_closed_YGta7_SRqF0() {
    OrderDataBean orderDataBean = new OrderDataBean("alertcompleted", "closed", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(10.0), new AccountDataBean(), new QuoteDataBean(), new HoldingDataBean());
    assertTrue(orderDataBean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_completed_closed_OUEA5_HwLS0() {
    OrderDataBean orderDataBean = new OrderDataBean("completed", "closed", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(10.0), new AccountDataBean(), new QuoteDataBean(), new HoldingDataBean());
    assertTrue(orderDataBean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType3_zMJv2_rBpl1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    assertEquals("BUY", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCancelled_EmptyString_JOOY4_kimW0() {
    OrderDataBean order = new OrderDataBean("", "open", new Date(), new Date(), 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(0.0), new AccountDataBean(), new QuoteDataBean(), new HoldingDataBean());
    assertFalse(order.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_apmb0() {
    OrderDataBean order = OrderDataBean.getRandomInstance();
    assertNotNull(order);
    assertNotNull(order.getOrderID());
    assertNotNull(order.getOrderType());
    assertNotNull(order.getOrderStatus());
    assertNotNull(order.getOpenDate());
    assertNotNull(order.getCompletionDate());
    assertNotNull(order.getQuantity());
    assertNotNull(order.getPrice());
    assertNotNull(order.getOrderFee());
    assertNotNull(order.getSymbol());
    assertNotNull(order.getAccount());
    assertNotNull(order.getHolding());
    assertNotNull(order.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCases_JIpk5() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    assertEquals("OPEN", orderDataBean.getOrderStatus());
    orderDataBean.setOrderStatus("Closed");
    assertEquals("Closed", orderDataBean.getOrderStatus());
    orderDataBean.setOrderStatus("pending");
    assertEquals("pending", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCasesAndInvalidString_yAHX6() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    assertEquals("OPEN", orderDataBean.getOrderStatus());
    orderDataBean.setOrderStatus("Closed");
    assertEquals("Closed", orderDataBean.getOrderStatus());
    orderDataBean.setOrderStatus("pending");
    assertEquals("pending", orderDataBean.getOrderStatus());
    orderDataBean.setOrderStatus("invalid");
    assertEquals("invalid", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCasesAndEmptyString_NIYR7() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    assertEquals("OPEN", orderDataBean.getOrderStatus());
    orderDataBean.setOrderStatus("Closed");
    assertEquals("Closed", orderDataBean.getOrderStatus());
    orderDataBean.setOrderStatus("pending");
    assertEquals("pending", orderDataBean.getOrderStatus());
    orderDataBean.setOrderStatus("");
    assertEquals("", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithDifferentCasesAndNull_UrGD8() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("OPEN");
    assertEquals("OPEN", orderDataBean.getOrderStatus());
    orderDataBean.setOrderStatus("Closed");
    assertEquals("Closed", orderDataBean.getOrderStatus());
    orderDataBean.setOrderStatus("pending");
    assertEquals("pending", orderDataBean.getOrderStatus());
    orderDataBean.setOrderStatus(null);
    assertEquals(null, orderDataBean.getOrderStatus());
  }
}