/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJDBCWrite_Test_Failing {
  private static int hitCount;
  private static String initTime;
  private HttpServletRequest request;
  @Mock
  private HttpServletResponse response;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_KJlW0() {
    PingJDBCWrite pingJDBCWrite = new PingJDBCWrite();
    String expected = "Basic JDBC Write using a prepared statment makes use of TradeJDBC code.";
    String actual = pingJDBCWrite.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithNull_JqSE1() {
    PingJDBCWrite pingJDBCWrite = new PingJDBCWrite();
    String expected = null;
    String actual = pingJDBCWrite.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithEmptyString_dtMb2() {
    PingJDBCWrite pingJDBCWrite = new PingJDBCWrite();
    String expected = "";
    String actual = pingJDBCWrite.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithInvalidConfig_ZVvC2_Laml0() {
    PingJDBCWrite pingJDBCWrite = new PingJDBCWrite();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getInitParameter("ping.jdbc.write.enabled")).thenReturn("invalid");
    try {
      pingJDBCWrite.init(config);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid value for ping.jdbc.write.enabled: invalid", e.getMessage());
    } catch (ServletException e) {
      fail("Unexpected ServletException");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithNull_JqSE1_fid2() {
    PingJDBCWrite pingJDBCWrite = new PingJDBCWrite();
    String expected = "Ping JDBC Write w/ Prepared Stmt.";
    String actual = pingJDBCWrite.getServletInfo();
    assertEquals(expected, actual);
  }
}