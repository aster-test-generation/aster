/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession3_Test_Failing {
  private static String initTime = null;
  private static int hitCount = 0;
  private static int NUM_OBJECTS = 2;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_FPos0() {
    PingSession3 pingSession3 = new PingSession3();
    String expected = "HTTP Session Object: Tests management of a large custom session class";
    String actual = pingSession3.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_NoSession_qKDr0() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PrintWriter out = mock(PrintWriter.class);
    when(response.getWriter()).thenReturn(out);
    pingSession3.doGet(request, response);
    verify(out).print("<html><head> Session object size set to " + NUM_OBJECTS + "K bytes </head><body></body></html>");
    verify(response).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_WithSession_NSci1() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PrintWriter out = mock(PrintWriter.class);
    when(response.getWriter()).thenReturn(out);
    HttpSession session = mock(HttpSession.class);
    when(request.getSession(true)).thenReturn(session);
    PingSession3Object[] sessionData = new PingSession3Object[NUM_OBJECTS];
    for (int i = 0; i < NUM_OBJECTS; i++) {
      sessionData[i] = new PingSession3Object();
    }
    when(session.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
    pingSession3.doGet(request, response);
    verify(out).print("<html><head><title>Session Large Data Test</title></head><body><HR><BR><FONT size=\"+2\" color=\"#000066\">HTTP Session Test 3: Large Data<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time: " + initTime + "</FONT><BR><BR><B>Hit Count: " + hitCount + "<BR>Session object updated. Session Object size = " + (NUM_OBJECTS * 1024) + " bytes </B></body></html>");
    verify(response).setHeader("SessionTrackingTest-largeSessionData", (NUM_OBJECTS * 1024) + "bytes");
    verify(response).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_InvalidSession_zrro2() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PrintWriter out = mock(PrintWriter.class);
    when(response.getWriter()).thenReturn(out);
    HttpSession session = mock(HttpSession.class);
    when(request.getSession(true)).thenReturn(session);
    when(session.getAttribute("sessiontest.sessionData")).thenThrow(new IllegalStateException("Invalid session"));
    pingSession3.doGet(request, response);
    verify(out).print("<html><head> Session object size set to " + NUM_OBJECTS + "K bytes </head><body></body></html>");
    verify(response).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_NullSession_zaQd3() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PrintWriter out = mock(PrintWriter.class);
    when(response.getWriter()).thenReturn(out);
    HttpSession session = mock(HttpSession.class);
    when(request.getSession(true)).thenReturn(null);
    pingSession3.doGet(request, response);
    verify(out).print("<html><head> Session object size set to " + NUM_OBJECTS + "K bytes </head><body></body></html>");
    verify(response).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_NyCF0_mMxF0() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingSession3.doPost(req, res);
    verify(req).getMethod();
    verify(req).getRequestURI();
    verify(req).getQueryString();
    verify(req).getParameterMap();
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).setContentType("text/plain");
    verify(res).getWriter();
    verify(res).flushBuffer();
    verify(res).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithInvalidMethod_fJua1_rSJb0() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getMethod()).thenReturn("INVALID");
    pingSession3.doPost(req, res);
    verify(req).getMethod();
    verify(req).getRequestURI();
    verify(req).getQueryString();
    verify(req).getParameterMap();
    verify(res).setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
    verify(res).setContentType("text/plain");
    verify(res).getWriter();
    verify(res).flushBuffer();
    verify(res).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithInvalidRequestURI_MdwD2_rAsT0() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getRequestURI()).thenReturn("INVALID");
    pingSession3.doPost(req, res);
    verify(req).getMethod();
    verify(req).getRequestURI();
    verify(req).getQueryString();
    verify(req).getParameterMap();
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).setContentType("text/plain");
    verify(res).getWriter();
    verify(res).flushBuffer();
    verify(res).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithInvalidQueryString_pTVa3_pRoR0() throws ServletException, IOException {
    PingSession3 pingSession3 = new PingSession3();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getQueryString()).thenReturn("INVALID");
    pingSession3.doPost(req, res);
    verify(req).getMethod();
    verify(req).getRequestURI();
    verify(req).getQueryString();
    verify(req).getParameterMap();
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).setContentType("text/plain");
    verify(res).getWriter();
    verify(res).flushBuffer();
    verify(res).getOutputStream();
  }
}