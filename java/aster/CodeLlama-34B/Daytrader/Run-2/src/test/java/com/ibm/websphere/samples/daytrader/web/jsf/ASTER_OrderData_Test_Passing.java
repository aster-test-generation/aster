/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderData_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_jfVs0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    BigDecimal orderFee = orderData.getOrderFee();
    assertEquals(new BigDecimal(10.0), orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeWithNullOrderFee_SLWD1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), null, "buy", 10.0, "AAPL");
    BigDecimal orderFee = orderData.getOrderFee();
    assertNull(orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_mGyN0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    assertEquals(10.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantityWithZeroQuantity_VImb1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 0.0, "AAPL");
    assertEquals(0.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderType1_nniC0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("market");
    assertEquals("market", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderType2_lDhc1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("stop");
    assertEquals("stop", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderType3_JnGp2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("limit");
    assertEquals("limit", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderType4_JuDR3() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("stop_limit");
    assertEquals("stop_limit", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderType5_ZTva4() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("trailing_stop");
    assertEquals("trailing_stop", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderType6_SUmB5() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("market_on_close");
    assertEquals("market_on_close", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderType7_JfuE6() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("market_on_open");
    assertEquals("market_on_open", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderType8_YZny7() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("limit_on_close");
    assertEquals("limit_on_close", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderType9_cDLW8() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("stop_limit_on_close");
    assertEquals("stop_limit_on_close", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderType10_tNNI9() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("trailing_stop_limit");
    assertEquals("trailing_stop_limit", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_yKSd0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10), "buy", 100, "AAPL");
    orderData.setPrice(new BigDecimal(100));
    assertEquals(new BigDecimal(100), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithNull_QRMw1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10), "buy", 100, "AAPL");
    orderData.setPrice(null);
    assertNull(orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatus_KkVN0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOrderStatus("closed");
    assertEquals("closed", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithInvalidStatus_pmnJ1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOrderStatus("invalid");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderStatus_uStg0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals("open", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderStatusWithDifferentOrderStatus_qPUa1() {
    OrderData orderData = new OrderData(1, "closed", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals("closed", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_qldw0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals("AAPL", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbolWithNullSymbol_FREw1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, null);
    assertNull(orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_1_Olgy0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals(1, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_2_DaBm1() {
    OrderData orderData = new OrderData(2, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "GOOG");
    assertEquals(2, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_3_VrTs2() {
    OrderData orderData = new OrderData(3, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "TSLA");
    assertEquals(3, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_4_KmVq3() {
    OrderData orderData = new OrderData(4, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "AMZN");
    assertEquals(4, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_5_ApiT4() {
    OrderData orderData = new OrderData(5, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "FB");
    assertEquals(5, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_6_GkGb5() {
    OrderData orderData = new OrderData(6, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "NFLX");
    assertEquals(6, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_7_VWnD6() {
    OrderData orderData = new OrderData(7, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "DIS");
    assertEquals(7, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_8_wQuP7() {
    OrderData orderData = new OrderData(8, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "AAPL");
    assertEquals(8, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_9_BrFf8() {
    OrderData orderData = new OrderData(9, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "GOOG");
    assertEquals(9, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_10_DAAc9() {
    OrderData orderData = new OrderData(10, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "TSLA");
    assertEquals(10, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbol_BIDh0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setSymbol("GOOG");
    assertEquals("GOOG", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithNull_ZMPv1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setSymbol(null);
    assertNull(orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithEmptyString_uwkZ2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setSymbol("");
    assertEquals("", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithInvalidSymbol_ivyy3() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "INVALID");
    orderData.setSymbol("INVALID");
    assertEquals("INVALID", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithDifferentCase_vlAm5() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setSymbol("goog");
    assertEquals("goog", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee_NnQZ0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 100.0, "AAPL");
    orderData.setOrderFee(new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), orderData.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate_cKPm0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertEquals(new Date(), openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullOpenDate_DaWw1() {
    OrderData orderData = new OrderData(1, "open", null, new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullCompleteDate_JrkF2() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullOrderFee_LnyS3() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), null, "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullOrderType_McxN4() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), null, 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullSymbol_CMWy6() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, null);
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullPrice_uoji7() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL", BigDecimal.ZERO);
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDate_yHmF0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOpenDate(new Date());
    assertEquals(new Date(), orderData.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDateWithNull_XVhi1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOpenDate(null);
    assertNull(orderData.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDateWithInvalidDate_jkgV2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOpenDate(new Date(0));
    assertEquals(new Date(0), orderData.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDateWithValidDate_ZhWX3() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOpenDate(new Date(1000000000));
    assertEquals(new Date(1000000000), orderData.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDate_InMr0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), BigDecimal.ZERO, "limit", 100.0, "AAPL");
    Date completionDate = orderData.getCompletionDate();
    assertEquals(new Date(), completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDateWithNullOpenDate_MPaN1() {
    OrderData orderData = new OrderData(1, "open", null, new Date(), BigDecimal.ZERO, "limit", 100.0, "AAPL");
    Date completionDate = orderData.getCompletionDate();
    assertNotNull(completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDateWithNullCompleteDate_Htbq2() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, BigDecimal.ZERO, "limit", 100.0, "AAPL");
    Date completionDate = orderData.getCompletionDate();
    assertNull(completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDateWithNullOrderFee_ivbX3() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), null, "limit", 100.0, "AAPL");
    Date completionDate = orderData.getCompletionDate();
    assertNotNull(completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDateWithNullOrderType_CiUo4() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), BigDecimal.ZERO, null, 100.0, "AAPL");
    Date completionDate = orderData.getCompletionDate();
    assertNotNull(completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDateWithNullSymbol_taAI6() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), BigDecimal.ZERO, "limit", 100.0, null);
    Date completionDate = orderData.getCompletionDate();
    assertNotNull(completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_1_uFes0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals("buy", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_2_Swzn1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "AAPL");
    assertEquals("sell", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_3_jyAJ2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "GOOG");
    assertEquals("buy", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_4_lzVA3() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "GOOG");
    assertEquals("sell", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_5_aIVj4() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "TSLA");
    assertEquals("buy", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_6_tWAZ5() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "TSLA");
    assertEquals("sell", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_7_sdtd6() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AMZN");
    assertEquals("buy", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_8_hiHA7() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "AMZN");
    assertEquals("sell", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_9_uGVb8() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "FB");
    assertEquals("buy", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_10_VrWn9() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "FB");
    assertEquals("sell", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_11_eaAk10() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "NFLX");
    assertEquals("buy", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_12_NkDg11() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "NFLX");
    assertEquals("sell", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderID_hdOP0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOrderID(2);
    assertEquals(2, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderIDWithNull_scaY1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOrderID(null);
    assertNull(orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_YYBc0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setQuantity(20.0);
    assertEquals(20.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithNegativeValue_GIaH1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setQuantity(-20.0);
    assertEquals(-20.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalWithOrderFee_ZkGd1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL", new BigDecimal(1.0));
    assertEquals(new BigDecimal(10.0), orderData.getTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotal_uRBN0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setTotal(new BigDecimal(100.0));
    assertEquals(new BigDecimal(100.0), orderData.getTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDate_NaWN0() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date completionDate = new Date();
    orderData.setCompletionDate(completionDate);
    assertEquals(completionDate, orderData.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDateWithNull_VNti1() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setCompletionDate(null);
    assertNull(orderData.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDateWithInvalidDate_feho2() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date invalidDate = new Date(0);
    orderData.setCompletionDate(invalidDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDateWithValidDate_wjIl3() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date validDate = new Date(1000);
    orderData.setCompletionDate(validDate);
    assertEquals(validDate, orderData.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDateWithDifferentDate_aqBG4() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date differentDate = new Date(2000);
    orderData.setCompletionDate(differentDate);
    assertEquals(differentDate, orderData.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullQuantity_esIP5_HTnL0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 0.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDateWithNullQuantity_uhBt5_njEs0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), BigDecimal.ZERO, "limit", 0.0, "AAPL");
    Date completionDate = orderData.getCompletionDate();
  }
}