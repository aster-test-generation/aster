/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2Entity2JSP_Test_Passing {
  @Mock
  PingServlet2Session2Entity2JSP pingservlet2session2entity2jsp;
  @Mock
  HttpServlet httpservlet;
  @Mock
  ServletConfig servletconfig;
  @Mock
  HttpServletRequest httpservletrequest;
  @Mock
  ServletContext servletcontext;
  @Mock
  HttpServletResponse httpservletresponse;
  private TradeServices tradeSLSBLocal;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullConfig_HNsz1() throws ServletException {
    PingServlet2Session2Entity2JSP servlet = new PingServlet2Session2Entity2JSP();
    servlet.init(null);
    assertNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_CRBL0() {
    PingServlet2Session2Entity2JSP servlet = new PingServlet2Session2Entity2JSP();
    String expected = "web primitive, tests Servlet to Session to Entity EJB to JSP path";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_PqJp0_iQEz0() throws ServletException {
    PingServlet2Session2Entity2JSP servlet = new PingServlet2Session2Entity2JSP();
    ServletConfig config = mock(ServletConfig.class);
    servlet.init(config);
    assertTrue(servlet.getServletConfig() == config);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullServletName_MWaV4_Lqik0() throws ServletException {
    PingServlet2Session2Entity2JSP servlet = new PingServlet2Session2Entity2JSP();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getServletName()).thenReturn(null);
    servlet.init(config);
    assertNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithEmptyServletName_ikhk5_eVkO0() throws ServletException {
    PingServlet2Session2Entity2JSP servlet = new PingServlet2Session2Entity2JSP();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getServletName()).thenReturn("");
    servlet.init(config);
    assertNull(servlet.getServletConfig());
  }
}