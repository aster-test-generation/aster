/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeAppJSF_Test_Failing {
  private TradeServices tradeAction;
  private String password = "xxx";
  private String userID = "uid:0";
  private String email;
  private String money;
  private String fullname;
  private String address;
  private String ccn;
  private TradeAppJSF tradeAppJSF;
  @Mock
  private TradeServices tradeServices;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAddressWithNullTradeServices_tepu1() {
    TradeAppJSF tradeApp = new TradeAppJSF(null);
    String address = tradeApp.getAddress();
    assertNull(address);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithNull_EzIt1() {
    String password = null;
    tradeAppJSF.setPassword(password);
    assertEquals(null, tradeAppJSF.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithEmptyString_XBSb2() {
    String password = "";
    tradeAppJSF.setPassword(password);
    assertEquals("", tradeAppJSF.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithInvalidString_BwFr3() {
    String password = "invalid_password";
    tradeAppJSF.setPassword(password);
    assertEquals(null, tradeAppJSF.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithValidString_PQMb4() {
    String password = "valid_password";
    tradeAppJSF.setPassword(password);
    assertEquals(password, tradeAppJSF.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithDifferentCase_yzJB5() {
    String password = "PaSsWoRd";
    tradeAppJSF.setPassword(password);
    assertEquals(password.toLowerCase(), tradeAppJSF.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithWhitespace_AWax6() {
    String password = " password ";
    tradeAppJSF.setPassword(password);
    assertEquals(password.trim(), tradeAppJSF.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithSpecialCharacters_DyzC7() {
    String password = "p@ssw0rd";
    tradeAppJSF.setPassword(password);
    assertEquals(password, tradeAppJSF.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithMultipleSpecialCharacters_dDFN8() {
    String password = "p@ssw0rd!";
    tradeAppJSF.setPassword(password);
    assertEquals(password, tradeAppJSF.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithMultipleSpecialCharactersAndWhitespace_vEBc9() {
    String password = "p@ssw0rd !";
    tradeAppJSF.setPassword(password);
    assertEquals(password.trim(), tradeAppJSF.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithMultipleSpecialCharactersAndWhitespaceAndDifferentCase_WuGl10() {
    String password = "P@ssW0rd !";
    tradeAppJSF.setPassword(password);
    assertEquals(password.toLowerCase().trim(), tradeAppJSF.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithMultipleSpecialCharactersAndWhitespaceAndDifferentCaseAndInvalidString_zsMI11() {
    String password = "P@ssW0rd ! invalid_password";
    tradeAppJSF.setPassword(password);
    assertEquals(null, tradeAppJSF.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithMultipleSpecialCharactersAndWhitespaceAndDifferentCaseAndValidString_fgdc12() {
    String password = "P@ssW0rd ! valid_password";
    tradeAppJSF.setPassword(password);
    assertEquals(password.toLowerCase().trim(), tradeAppJSF.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFullnameWithEmptyString_Qnws2_Smig0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
    String fullname = tradeAppJSF.getFullname();
    assertEquals("", fullname);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPassword_bUWz0_TMyl0() {
    String password = "password";
    tradeAppJSF.setAddress(password);
    assertEquals(password, tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithNull_EzIt1_KemQ0() {
    String address = null;
    tradeAppJSF.setAddress(address);
    assertNull(tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithEmptyString_XBSb2_RcSF0() {
    String address = "";
    tradeAppJSF.setAddress(address);
    assertEquals(address, tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithInvalidString_BwFr3_BHGX0() {
    String password = "invalid_password";
    tradeAppJSF.setAddress(password);
    assertEquals(password, tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithValidString_PQMb4_Wund0() {
    String password = "valid_password";
    tradeAppJSF.setAddress(password);
    assertEquals(password, tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithDifferentCase_yzJB5_syrV0() {
    String password = "PaSsWoRd";
    tradeAppJSF.setAddress(password.toLowerCase());
    assertEquals(password.toLowerCase(), tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithWhitespace_AWax6_tndZ0() {
    String password = " password ";
    tradeAppJSF.setAddress(password.trim());
    assertEquals(password.trim(), tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithMultipleSpecialCharacters_dDFN8_MIGW0() {
    String password = "p@ssw0rd!";
    tradeAppJSF.setAddress(password);
    assertEquals(password, tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithMultipleSpecialCharactersAndWhitespaceAndDifferentCase_WuGl10_WBtv0() {
    String password = "P@ssW0rd !";
    tradeAppJSF.setAddress(password);
    assertEquals(password.toLowerCase().trim(), tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithMultipleSpecialCharactersAndWhitespaceAndDifferentCaseAndInvalidString_zsMI11_Tseo0() {
    String password = "P@ssW0rd ! invalid_password";
    tradeAppJSF.setAddress(password);
    assertEquals("P@ssW0rd ! invalid_password", tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithMultipleSpecialCharactersAndWhitespaceAndDifferentCaseAndValidString_fgdc12_GBFZ0() {
    String password = "P@ssW0rd ! valid_password";
    tradeAppJSF.setAddress(password);
    assertEquals(password.toLowerCase().trim(), tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFullnameWithNull_iKCY1() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
    String fullname = tradeAppJSF.getFullname();
    assertNull(fullname);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithNull_EzIt1_KemQ0_fid1() {
    String address = null;
    tradeAppJSF.setAddress(address);
    assertEquals(null, tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithEmptyString_XBSb2_RcSF0_fid1() {
    String address = "";
    tradeAppJSF.setAddress(address);
    assertEquals("", tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithInvalidString_BwFr3_BHGX0_fid1() {
    String password = "invalid_password";
    tradeAppJSF.setAddress(password);
    assertEquals(null, tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithDifferentCase_yzJB5_syrV0_fid1() {
    String password = "PaSsWoRd";
    tradeAppJSF.setAddress(password);
    assertEquals(password.toLowerCase(), tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithWhitespace_AWax6_tndZ0_fid1() {
    String password = " password ";
    tradeAppJSF.setAddress(password);
    assertEquals(password.trim(), tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithSpecialCharacters_DyzC7_enXV0_fid1() {
    String password = "p@ssw0rd";
    tradeAppJSF.setAddress(password);
    assertEquals(password, tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithMultipleSpecialCharactersAndWhitespace_vEBc9_Ujbq0_fid1() {
    String password = "p@ssw0rd !";
    tradeAppJSF.setAddress(password);
    assertEquals(password.trim(), tradeAppJSF.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithMultipleSpecialCharactersAndWhitespaceAndDifferentCaseAndInvalidString_zsMI11_Tseo0_fid1() {
    String password = "P@ssW0rd ! invalid_password";
    tradeAppJSF.setAddress(password);
    assertEquals(null, tradeAppJSF.getAddress());
  }
}