/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Coverage_Test_Passing {
  @Test
  @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_NWRY0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    int actual = accountDataBean.hashCode();
    int expected = 0;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentAccountID_VDrK0() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountDataBean accountDataBean2 = new AccountDataBean(2, 1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Assertions.assertFalse(accountDataBean1.equals(accountDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullAccountID_mFaH1() {
    AccountDataBean accountDataBean1 = new AccountDataBean(null, 1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountDataBean accountDataBean2 = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Assertions.assertFalse(accountDataBean1.equals(accountDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullProfile_yMeL0() {
    AccountDataBean account = new AccountDataBean();
    account.setProfile(null);
    try {
      account.login("password");
      Assertions.fail("Expected EJBException");
    } catch (EJBException e) {
      Assertions.assertEquals("AccountBean:Login failure for account: nullnull AccountProfile", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithAccountID_jjvV0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    String html = accountDataBean.toHTML();
    assertTrue(html.contains("<BR>Account Data for account: <B>1</B>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithLoginCount_tlgN1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    String html = accountDataBean.toHTML();
    assertTrue(html.contains("<LI>   loginCount:2</LI>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithLogoutCount_PfYp2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    String html = accountDataBean.toHTML();
    assertTrue(html.contains("<LI>  logoutCount:3</LI>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithLastLogin_RbbJ3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    String html = accountDataBean.toHTML();
    assertTrue(html.contains("<LI>    lastLogin:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithCreationDate_ALKt4() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    String html = accountDataBean.toHTML();
    assertTrue(html.contains("<LI> creationDate:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithBalance_IABb5() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    String html = accountDataBean.toHTML();
    assertTrue(html.contains("<LI>      balance:100</LI>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithOpenBalance_aGqo6() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    String html = accountDataBean.toHTML();
    assertTrue(html.contains("<LI>  openBalance:100</LI>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithProfileID_zBRU7() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    String html = accountDataBean.toHTML();
    assertTrue(html.contains("<LI>    profileID:profileID</LI>"));
  }
}