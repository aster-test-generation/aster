/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TimerStat_Test_Failing {
  private TimerStat timerStat;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMin_PDdi0_fid2() {
    TimerStat timerStat = new TimerStat();
    double min = timerStat.getMin();
    assertEquals(0.0, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCount_cOJe1() {
    timerStat.setCount(10);
    assertEquals(10, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCountNegative_Zlvm2() {
    timerStat.setCount(-10);
    assertEquals(-10, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCountZero_CYOK3() {
    timerStat.setCount(0);
    assertEquals(0, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCountMaxValue_sFPk4() {
    timerStat.setCount(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCountMinValue_XVsp5() {
    timerStat.setCount(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCountInvalidValue_ZYvy6() {
    timerStat.setCount(Integer.MAX_VALUE + 1);
    assertEquals(Integer.MAX_VALUE, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCountInvalidValueNegative_ajqu7() {
    timerStat.setCount(Integer.MIN_VALUE - 1);
    assertEquals(Integer.MIN_VALUE, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMax_JcTO1() {
    double max = timerStat.getMax();
    assertEquals(0.0, max, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxWithNonZeroMax_mnJr2() {
    timerStat.setMax(10.0);
    double max = timerStat.getMax();
    assertEquals(10.0, max, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxWithNegativeMax_vMvd3() {
    timerStat.setMax(-10.0);
    double max = timerStat.getMax();
    assertEquals(-10.0, max, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxWithZeroMax_lWvc4() {
    timerStat.setMax(0.0);
    double max = timerStat.getMax();
    assertEquals(0.0, max, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxWithNullTimerStat_nfvb8() {
    timerStat = null;
    double max = timerStat.getMax();
    assertEquals(0.0, max, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxWithNullTimerStatAndNonZeroMax_hPYB11() {
    timerStat = null;
    timerStat.setMax(10.0);
    double max = timerStat.getMax();
    assertEquals(10.0, max, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxWithNullTimerStatAndZeroMax_Mitw14() {
    timerStat = null;
    timerStat.setMax(0.0);
    double max = timerStat.getMax();
    assertEquals(0.0, max, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinSecs_GsXH0_fid2() {
    TimerStat timerStat = new TimerStat();
    double minSecs = timerStat.getMinSecs();
    assertEquals(0.0, minSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMax_invalidInput_tilb1_fid2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(-100.0);
    assertEquals(0.0, timerStat.getMax(), 0.0);
  }
}