/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import javax.faces.context.ExternalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AccountDataJSF_Test_Failing {
  private OrderData[] closedOrders;
  private ExternalContext context;
  private TradeServices tradeAction;
  private AccountDataJSF accountDataJSF;
  @Mock
  private TradeServices tradeServices;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainWithInvalidValueAndNullTradeServices_WqZl6() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    BigDecimal gain = new BigDecimal(1000.0);
    accountDataJSF.setGain(gain);
    assertEquals(gain, accountDataJSF.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainWithInvalidValueAndNullTradeServices_FfgH8() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    BigDecimal gain = new BigDecimal(Double.NaN);
    accountDataJSF.setGain(gain);
    assertEquals(gain, accountDataJSF.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_RBWE0() {
    int logoutCount = 5;
    accountDataJSF.setLogoutCount(logoutCount);
    assertEquals(logoutCount, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_negative_jjqd1() {
    int logoutCount = -1;
    accountDataJSF.setLogoutCount(logoutCount);
    assertEquals(0, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_zero_lTiP2() {
    int logoutCount = 0;
    accountDataJSF.setLogoutCount(logoutCount);
    assertEquals(0, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_invalid_Qipb4() {
    int logoutCount = -10;
    accountDataJSF.setLogoutCount(logoutCount);
    assertEquals(0, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_valid_yIaB5() {
    int logoutCount = 10;
    accountDataJSF.setLogoutCount(logoutCount);
    assertEquals(logoutCount, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_max_hPbB6() {
    int logoutCount = Integer.MAX_VALUE;
    accountDataJSF.setLogoutCount(logoutCount);
    assertEquals(logoutCount, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_min_WERz7() {
    int logoutCount = Integer.MIN_VALUE;
    accountDataJSF.setLogoutCount(logoutCount);
    assertEquals(0, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_overflow_STnK8() {
    int logoutCount = Integer.MAX_VALUE + 1;
    accountDataJSF.setLogoutCount(logoutCount);
    assertEquals(0, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_underflow_iBAx9() {
    int logoutCount = Integer.MIN_VALUE - 1;
    accountDataJSF.setLogoutCount(logoutCount);
    assertEquals(0, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNumberOfOrdersWithNullTradeServices_POtC3() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    int numberOfOrders = accountDataJSF.getNumberOfOrders();
    assertEquals(0, numberOfOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCountWithNullTradeServices_fPVY7() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    int logoutCount = accountDataJSF.getLogoutCount();
    assertEquals(0, logoutCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountIDWithNullTradeServices_oCNt5() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    Integer accountID = accountDataJSF.getAccountID();
    assertNull(accountID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountIDWithNullAccountDataJSF_xodi8() {
    AccountDataJSF accountDataJSF = null;
    Integer accountID = null;
    assertEquals(accountID, accountDataJSF.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileIDWithNullTradeServices_Rdik1() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    String profileID = accountDataJSF.getProfileID();
    assertNull(profileID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_null_lOjE3_wuIF0() {
    accountDataJSF.setLogoutCount(1);
    assertEquals(1, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_zero_lTiP2_wfqH0() {
    int logoutCount = 0;
    accountDataJSF.setLogoutCount(logoutCount);
    assertEquals(logoutCount, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_min_WERz7_MeGR0() {
    int logoutCount = Integer.MIN_VALUE;
    accountDataJSF.setLogoutCount(logoutCount);
    assertEquals(logoutCount, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_overflow_STnK8_xilI0() {
    int logoutCount = Integer.MAX_VALUE + 1;
    accountDataJSF.setLogoutCount(logoutCount);
    assertEquals(Integer.MAX_VALUE + 1, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_underflow_iBAx9_Jtgu0() {
    int logoutCount = Integer.MIN_VALUE - 1;
    accountDataJSF.setLogoutCount(logoutCount);
    assertEquals(Integer.MIN_VALUE, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountIDWithNullAccountDataJSF_xodi8_fid1() {
    AccountDataJSF accountDataJSF = null;
    Integer accountID = accountDataJSF.getAccountID();
    assertNull(accountID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_null_lOjE3_wuIF0_fid1() {
    accountDataJSF.setLogoutCount(0);
    assertEquals(0, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_negative_jjqd1_NTHt0_fid1() {
    int logoutCount = -1;
    accountDataJSF.setLogoutCount(logoutCount);
    assertEquals(logoutCount, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_min_WERz7_MeGR0_fid1() {
    int logoutCount = Integer.MIN_VALUE;
    accountDataJSF.setLogoutCount(logoutCount);
    assertEquals(Integer.MIN_VALUE, accountDataJSF.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_underflow_iBAx9_Jtgu0_fid1() {
    int logoutCount = Integer.MIN_VALUE - 1;
    accountDataJSF.setLogoutCount(logoutCount);
    assertEquals(Integer.MAX_VALUE, accountDataJSF.getLogoutCount());
  }
}