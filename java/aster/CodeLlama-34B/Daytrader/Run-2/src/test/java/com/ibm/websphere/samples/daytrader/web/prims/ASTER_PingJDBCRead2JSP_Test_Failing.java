/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJDBCRead2JSP_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_SDfP0() throws ServletException, IOException {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingJDBCRead2JSP.doPost(req, res);
    verify(req).getParameter("username");
    verify(req).getParameter("password");
    verify(res).setContentType("text/html");
    verify(res).setCharacterEncoding("UTF-8");
    verify(res).getWriter();
    verify(res).sendRedirect("login.jsp");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithInvalidCredentials_CsRX1() throws ServletException, IOException {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("username")).thenReturn("invalid_username");
    when(req.getParameter("password")).thenReturn("invalid_password");
    pingJDBCRead2JSP.doPost(req, res);
    verify(req).getParameter("username");
    verify(req).getParameter("password");
    verify(res).setContentType("text/html");
    verify(res).setCharacterEncoding("UTF-8");
    verify(res).getWriter();
    verify(res).sendRedirect("login.jsp");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithValidCredentials_gLSS2() throws ServletException, IOException {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("username")).thenReturn("valid_username");
    when(req.getParameter("password")).thenReturn("valid_password");
    pingJDBCRead2JSP.doPost(req, res);
    verify(req).getParameter("username");
    verify(req).getParameter("password");
    verify(res).setContentType("text/html");
    verify(res).setCharacterEncoding("UTF-8");
    verify(res).getWriter();
    verify(res).sendRedirect("login.jsp");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_XldE0() {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    String servletInfo = pingJDBCRead2JSP.getServletInfo();
    assertEquals("Basic JDBC Read using a prepared statment forwarded to a JSP, makes use of TradeJDBC class", servletInfo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullConfig_DDOC1_GutS0() {
    PingJDBCRead2JSP servlet = new PingJDBCRead2JSP();
    try {
      servlet.init(null);
    } catch (ServletException e) {
      e.printStackTrace();
    }
    assertNull(servlet.getServletConfig());
  }
}