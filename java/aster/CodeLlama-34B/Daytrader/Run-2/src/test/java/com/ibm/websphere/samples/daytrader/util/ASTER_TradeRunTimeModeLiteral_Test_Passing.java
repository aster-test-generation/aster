/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeRunTimeModeLiteral_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testValue_PQbq0() {
    TradeRunTimeModeLiteral tradeRunTimeModeLiteral = new TradeRunTimeModeLiteral("value");
    assertEquals("value", tradeRunTimeModeLiteral.value());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testValueWithNull_esVa1() {
    TradeRunTimeModeLiteral tradeRunTimeModeLiteral = new TradeRunTimeModeLiteral(null);
    assertEquals(null, tradeRunTimeModeLiteral.value());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testValueWithEmptyString_Tsze2() {
    TradeRunTimeModeLiteral tradeRunTimeModeLiteral = new TradeRunTimeModeLiteral("");
    assertEquals("", tradeRunTimeModeLiteral.value());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testValueWithValidValue_WwTt5() {
    TradeRunTimeModeLiteral tradeRunTimeModeLiteral = new TradeRunTimeModeLiteral("valid");
    assertEquals("valid", tradeRunTimeModeLiteral.value());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testValueWithDifferentCase_sexl6() {
    TradeRunTimeModeLiteral tradeRunTimeModeLiteral = new TradeRunTimeModeLiteral("VaLid");
    assertEquals("VaLid", tradeRunTimeModeLiteral.value());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testValueWithSpecialCharacters_ODhO7() {
    TradeRunTimeModeLiteral tradeRunTimeModeLiteral = new TradeRunTimeModeLiteral("!@#$%^&*()_+");
    assertEquals("!@#$%^&*()_+", tradeRunTimeModeLiteral.value());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testValueWithMultipleValues_GoRl8() {
    TradeRunTimeModeLiteral tradeRunTimeModeLiteral = new TradeRunTimeModeLiteral("value1, value2");
    assertEquals("value1, value2", tradeRunTimeModeLiteral.value());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testValueWithMultipleValuesAndWhitespace_AZSC9() {
    TradeRunTimeModeLiteral tradeRunTimeModeLiteral = new TradeRunTimeModeLiteral("value1, value2, value3");
    assertEquals("value1, value2, value3", tradeRunTimeModeLiteral.value());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testValueWithMultipleValuesAndSpecialCharacters_ZsrJ10() {
    TradeRunTimeModeLiteral tradeRunTimeModeLiteral = new TradeRunTimeModeLiteral("value1, value2, value3, value4");
    assertEquals("value1, value2, value3, value4", tradeRunTimeModeLiteral.value());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testValueWithMultipleValuesAndDifferentCases_IfzF11() {
    TradeRunTimeModeLiteral tradeRunTimeModeLiteral = new TradeRunTimeModeLiteral("value1, Value2, VALUE3");
    assertEquals("value1, Value2, VALUE3", tradeRunTimeModeLiteral.value());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testValueWithMultipleValuesAndSpecialCharactersAndDifferentCases_iswW12() {
    TradeRunTimeModeLiteral tradeRunTimeModeLiteral = new TradeRunTimeModeLiteral("value1, Value2, VALUE3, value4");
    assertEquals("value1, Value2, VALUE3, value4", tradeRunTimeModeLiteral.value());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testValueWithInvalidValue_iMDl4_fid1() {
    TradeRunTimeModeLiteral tradeRunTimeModeLiteral = new TradeRunTimeModeLiteral("invalid");
    assertNull(null);
  }
}