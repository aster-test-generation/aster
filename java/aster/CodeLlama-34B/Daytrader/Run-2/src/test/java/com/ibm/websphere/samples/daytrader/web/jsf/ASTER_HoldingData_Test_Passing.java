/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_ValidInput_rAfJ0() {
    HoldingData holdingData = new HoldingData();
    double quantity = holdingData.getQuantity();
    assertEquals(0.0, quantity, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_NullInput_knwT2() {
    HoldingData holdingData = new HoldingData();
    double quantity = holdingData.getQuantity();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_MaxValueInput_jeMd6() {
    HoldingData holdingData = new HoldingData();
    double quantity = holdingData.getQuantity();
    assertEquals(Double.MAX_VALUE, quantity, 1.7976931348623157E308);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_MinValueInput_loQb7() {
    HoldingData holdingData = new HoldingData();
    double quantity = holdingData.getQuantity();
    assertEquals(Double.MIN_VALUE, quantity, 4.9E-324);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_NotANumberInput2_RFNG13() {
    HoldingData holdingData = new HoldingData();
    double quantity = holdingData.getQuantity();
    assertFalse(Double.isNaN(quantity));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_pTHo0_2() {
    HoldingData holdingData = new HoldingData();
    String quoteID = holdingData.getQuoteID();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteIDWithNull_ccXR3() {
    HoldingData holdingData = new HoldingData();
    String quoteID = holdingData.getQuoteID();
    assertNull(quoteID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePrice_QGUK0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = new BigDecimal(100.00);
    holdingData.setPurchasePrice(purchasePrice);
    assertEquals(purchasePrice, holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePriceWithNull_ROeg1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = null;
    holdingData.setPurchasePrice(purchasePrice);
    assertNull(holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePriceWithZero_ogXc2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = new BigDecimal(0.00);
    holdingData.setPurchasePrice(purchasePrice);
    assertEquals(purchasePrice, holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePriceWithNegative_aXxB3() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = new BigDecimal(-100.00);
    holdingData.setPurchasePrice(purchasePrice);
    assertEquals(purchasePrice, holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePriceWithMaxValue_kCNb5() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = new BigDecimal(Double.MAX_VALUE);
    holdingData.setPurchasePrice(purchasePrice);
    assertEquals(purchasePrice, holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePriceWithMinValue_svVl6() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = new BigDecimal(Double.MIN_VALUE);
    holdingData.setPurchasePrice(purchasePrice);
    assertEquals(purchasePrice, holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_GNUK0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal price = new BigDecimal(10.5);
    holdingData.setPrice(price);
    assertEquals(price, holdingData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchaseDateWithNull_dNyy1() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = holdingData.getPurchaseDate();
    assertNull(purchaseDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchaseDateWithInvalidDate_bzyZ2() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = holdingData.getPurchaseDate();
    assertNotEquals(new Date(0), purchaseDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasis_itbJ0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = new BigDecimal(100);
    holdingData.setBasis(basis);
    assertEquals(basis, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasisWithNull_fSiQ1() {
    HoldingData holdingData = new HoldingData();
    holdingData.setBasis(null);
    assertNull(holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasisWithZero_thOa2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = new BigDecimal(0);
    holdingData.setBasis(basis);
    assertEquals(basis, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasisWithNegative_wFxJ3() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = new BigDecimal(-100);
    holdingData.setBasis(basis);
    assertEquals(basis, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasisWithMaxValue_gYLE5() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = new BigDecimal(Double.MAX_VALUE);
    holdingData.setBasis(basis);
    assertEquals(basis, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasisWithMinValue_eSHm6() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = new BigDecimal(Double.MIN_VALUE);
    holdingData.setBasis(basis);
    assertEquals(basis, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGain_QUCq0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = new BigDecimal(100);
    holdingData.setGain(gain);
    assertEquals(gain, holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainWithZero_HBfR1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = new BigDecimal(0);
    holdingData.setGain(gain);
    assertEquals(gain, holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainWithNegative_vjBr2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = new BigDecimal(-100);
    holdingData.setGain(gain);
    assertEquals(gain, holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainWithNull_BkbQ3() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = null;
    holdingData.setGain(gain);
    assertNull(holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainWithMaxValue_pymX5() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = new BigDecimal(Double.MAX_VALUE);
    holdingData.setGain(gain);
    assertEquals(gain, holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainWithMinValue_gWzE6() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = new BigDecimal(Double.MIN_VALUE);
    holdingData.setGain(gain);
    assertEquals(gain, holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuoteID_ValidInput_fGvt0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuoteID("12345");
    assertEquals("12345", holdingData.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuoteID_InvalidInput_CHFk1() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuoteID("");
    assertEquals("", holdingData.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuoteID_NullInput_wBiu2() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuoteID(null);
    assertNull(holdingData.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValue_2_qNty1() {
    HoldingData holdingData = new HoldingData();
    holdingData.setMarketValue(BigDecimal.TEN);
    BigDecimal marketValue = holdingData.getMarketValue();
    assertEquals(BigDecimal.TEN, marketValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValue_3_SaZO2() {
    HoldingData holdingData = new HoldingData();
    holdingData.setMarketValue(BigDecimal.valueOf(100));
    BigDecimal marketValue = holdingData.getMarketValue();
    assertEquals(BigDecimal.valueOf(100), marketValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValue_4_jADr3() {
    HoldingData holdingData = new HoldingData();
    holdingData.setMarketValue(BigDecimal.valueOf(1000));
    BigDecimal marketValue = holdingData.getMarketValue();
    assertEquals(BigDecimal.valueOf(1000), marketValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValue_5_MyKY4() {
    HoldingData holdingData = new HoldingData();
    holdingData.setMarketValue(BigDecimal.valueOf(10000));
    BigDecimal marketValue = holdingData.getMarketValue();
    assertEquals(BigDecimal.valueOf(10000), marketValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValue_6_eOtU5() {
    HoldingData holdingData = new HoldingData();
    holdingData.setMarketValue(BigDecimal.valueOf(100000));
    BigDecimal marketValue = holdingData.getMarketValue();
    assertEquals(BigDecimal.valueOf(100000), marketValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValue_7_pkRb6() {
    HoldingData holdingData = new HoldingData();
    holdingData.setMarketValue(BigDecimal.valueOf(1000000));
    BigDecimal marketValue = holdingData.getMarketValue();
    assertEquals(BigDecimal.valueOf(1000000), marketValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValue_8_LWRx7() {
    HoldingData holdingData = new HoldingData();
    holdingData.setMarketValue(BigDecimal.valueOf(10000000));
    BigDecimal marketValue = holdingData.getMarketValue();
    assertEquals(BigDecimal.valueOf(10000000), marketValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValue_9_SttF8() {
    HoldingData holdingData = new HoldingData();
    holdingData.setMarketValue(BigDecimal.valueOf(100000000));
    BigDecimal marketValue = holdingData.getMarketValue();
    assertEquals(BigDecimal.valueOf(100000000), marketValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValue_10_Uqre9() {
    HoldingData holdingData = new HoldingData();
    holdingData.setMarketValue(BigDecimal.valueOf(1000000000));
    BigDecimal marketValue = holdingData.getMarketValue();
    assertEquals(BigDecimal.valueOf(1000000000), marketValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainWithNullValue_ZJpV4() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = holdingData.getGain();
    assertNull(gain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingIDWithNull_DXzc1() {
    HoldingData holdingData = new HoldingData();
    Integer holdingID = holdingData.getHoldingID();
    assertNull(holdingID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingIDWithInvalidInput_lnDj2() {
    HoldingData holdingData = new HoldingData();
    Integer holdingID = holdingData.getHoldingID();
    assertNotEquals(holdingID, 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_SLpt0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(10.0);
    assertEquals(10.0, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithNegativeValue_TWxa1() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(-10.0);
    assertEquals(-10.0, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithZeroValue_VqVo2() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(0.0);
    assertEquals(0.0, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithMaxValue_rJBg3() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(Double.MAX_VALUE);
    assertEquals(Double.MAX_VALUE, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithMinValue_wxtz4() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(Double.MIN_VALUE);
    assertEquals(Double.MIN_VALUE, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithNaN_pomy5() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(Double.NaN);
    assertEquals(Double.NaN, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithInfinity_kusV6() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(Double.POSITIVE_INFINITY);
    assertEquals(Double.POSITIVE_INFINITY, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithNegativeInfinity_UgNB7() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(Double.NEGATIVE_INFINITY);
    assertEquals(Double.NEGATIVE_INFINITY, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValue_Zilj0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(100.0);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithNull_YarF1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = null;
    holdingData.setMarketValue(marketValue);
    assertNull(holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithZero_oZgK2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(0.0);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithNegativeValue_zUbt3() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(-100.0);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithMaxValue_ScBN4() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(Double.MAX_VALUE);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithMinValue_IXqS5() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(Double.MIN_VALUE);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithNullAndZero_zjdy9_2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = null;
    holdingData.setMarketValue(marketValue);
    marketValue = new BigDecimal(0.0);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithZeroAndNull_Nqjd10_1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(0.0);
    holdingData.setMarketValue(marketValue);
    marketValue = null;
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithZeroAndNull_Nqjd10_2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(0.0);
    holdingData.setMarketValue(marketValue);
    marketValue = null;
    holdingData.setMarketValue(marketValue);
    assertNull(holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_Null_jrRr0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(null);
    assertNull(holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_NonNull_AqBc1() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(1);
    assertEquals(1, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_Duplicate_CAmH4() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(1);
    holdingData.setHoldingID(1);
    assertEquals(1, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_Different_JpMx5() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(1);
    holdingData.setHoldingID(2);
    assertEquals(2, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_NullWithNonNull_ktZt8() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(null);
    holdingData.setHoldingID(1);
    assertEquals(1, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_NonNullWithNull_gZCi9() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(1);
    holdingData.setHoldingID(null);
    assertNull(holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValue_11_XUzv10_xHmm0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setMarketValue(BigDecimal.valueOf(10000000000L));
    BigDecimal marketValue = holdingData.getMarketValue();
    assertEquals(BigDecimal.valueOf(10000000000L), marketValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithNullAndZero_zjdy9() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = null;
    holdingData.setMarketValue(marketValue);
    assertNull(holdingData.getMarketValue());
    marketValue = new BigDecimal(0.0);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithZeroAndNull_Nqjd10() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(0.0);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
    marketValue = null;
    holdingData.setMarketValue(marketValue);
    assertNull(holdingData.getMarketValue());
  }
}