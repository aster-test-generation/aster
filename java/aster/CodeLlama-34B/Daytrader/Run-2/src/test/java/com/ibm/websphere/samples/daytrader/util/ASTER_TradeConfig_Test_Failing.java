/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_1_OGGq0() {
    float result = TradeConfig.rndFloat(1);
    assertEquals(0.0f, result, 0.6279309f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_2_EzdB1() {
    float result = TradeConfig.rndFloat(2);
    assertEquals(1.8232603f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_3_qoXR2() {
    float result = TradeConfig.rndFloat(3);
    assertEquals(1.4432036f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_4_BkjJ3() {
    float result = TradeConfig.rndFloat(4);
    assertEquals(3.982608f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_5_LOyr4() {
    float result = TradeConfig.rndFloat(5);
    assertEquals(2.3970084f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_6_YaKM5() {
    float result = TradeConfig.rndFloat(6);
    assertEquals(2.5851083f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_7_KCdr6() {
    float result = TradeConfig.rndFloat(7);
    assertEquals(4.2500963f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_8_YqZq7() {
    float result = TradeConfig.rndFloat(8);
    assertEquals(6.26087f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_9_xVNS8() {
    float result = TradeConfig.rndFloat(9);
    assertEquals(8.474037f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_10_yonl9() {
    float result = TradeConfig.rndFloat(10);
    assertEquals(4.372605f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_11_nFXv10() {
    float result = TradeConfig.rndFloat(11);
    assertEquals(1.5442746f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_12_uCDp11() {
    float result = TradeConfig.rndFloat(12);
    assertEquals(0.586836f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_13_SVEJ12() {
    float result = TradeConfig.rndFloat(13);
    assertEquals(12.168825f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_14_XUec13() {
    float result = TradeConfig.rndFloat(14);
    assertEquals(13.204122f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_15_ISLs14() {
    float result = TradeConfig.rndFloat(15);
    assertEquals(4.8560863f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_16_dYEH15() {
    float result = TradeConfig.rndFloat(16);
    assertEquals(0.73304653f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_17_qXOC16() {
    float result = TradeConfig.rndFloat(17);
    assertEquals(3.362858f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_18_xPeX17() {
    float result = TradeConfig.rndFloat(18);
    assertEquals(6.6286063f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_19_IAyO18() {
    float result = TradeConfig.rndFloat(19);
    assertEquals(18.984756f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_20_vfOi19() {
    float result = TradeConfig.rndFloat(20);
    assertEquals(11.230724f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_2_RDqt1_3() {
    String address = TradeConfig.rndAddress();
    assertTrue(address.contains("1000"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_3_dsVi2_2() {
    String address = TradeConfig.rndAddress();
    assertFalse(address.contains("Oak St."));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_3_dsVi2_4() {
    String address = TradeConfig.rndAddress();
    assertTrue(address.contains("1001"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_4_eRfn3_5() {
    String address = TradeConfig.rndAddress();
    assertTrue(address.contains("1002"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_5_LYzb4_6() {
    String address = TradeConfig.rndAddress();
    assertTrue(address.contains("1003"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_6_Pfpr5_7() {
    String address = TradeConfig.rndAddress();
    assertTrue(address.contains("1004"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_7_DgLE6_8() {
    String address = TradeConfig.rndAddress();
    assertTrue(address.contains("1005"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_8_cAep7_9() {
    String address = TradeConfig.rndAddress();
    assertTrue(address.contains("1006"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_9_hJGR8_10() {
    String address = TradeConfig.rndAddress();
    assertTrue(address.contains("1007"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_1_OGGq0_fid1() {
    float result = TradeConfig.rndFloat(1);
    assertEquals(0.0f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_2_EzdB1_fid1() {
    float result = TradeConfig.rndFloat(2);
    assertEquals(0.5f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_3_qoXR2_fid1() {
    float result = TradeConfig.rndFloat(3);
    assertEquals(1.0f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_4_BkjJ3_fid1() {
    float result = TradeConfig.rndFloat(4);
    assertEquals(1.5f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_5_LOyr4_fid1() {
    float result = TradeConfig.rndFloat(5);
    assertEquals(2.0f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_6_YaKM5_fid1() {
    float result = TradeConfig.rndFloat(6);
    assertEquals(2.5f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_7_KCdr6_fid1() {
    float result = TradeConfig.rndFloat(7);
    assertEquals(3.0f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_8_YqZq7_fid1() {
    float result = TradeConfig.rndFloat(8);
    assertEquals(3.5f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_9_xVNS8_fid1() {
    float result = TradeConfig.rndFloat(9);
    assertEquals(4.0f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_10_yonl9_fid1() {
    float result = TradeConfig.rndFloat(10);
    assertEquals(4.5f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_11_nFXv10_fid1() {
    float result = TradeConfig.rndFloat(11);
    assertEquals(5.0f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_12_uCDp11_fid1() {
    float result = TradeConfig.rndFloat(12);
    assertEquals(5.5f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_13_SVEJ12_fid1() {
    float result = TradeConfig.rndFloat(13);
    assertEquals(6.0f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_14_XUec13_fid1() {
    float result = TradeConfig.rndFloat(14);
    assertEquals(6.5f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_15_ISLs14_fid1() {
    float result = TradeConfig.rndFloat(15);
    assertEquals(7.0f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_16_dYEH15_fid1() {
    float result = TradeConfig.rndFloat(16);
    assertEquals(7.5f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_17_qXOC16_fid1() {
    float result = TradeConfig.rndFloat(17);
    assertEquals(8.0f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_18_xPeX17_fid1() {
    float result = TradeConfig.rndFloat(18);
    assertEquals(8.5f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_19_IAyO18_fid1() {
    float result = TradeConfig.rndFloat(19);
    assertEquals(9.0f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInterval_PLBZ0_fid1() {
    int expected = 10;
    int actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalWithDifferentValues_dxIx1() {
    int expected = 5;
    int actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
    expected = 15;
    actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
    expected = 30;
    actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalWithDifferentValuesAndInvalidValues_gJhY4() {
    int expected = 5;
    int actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
    expected = 15;
    actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
    expected = 30;
    actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
    expected = -1;
    actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
    expected = 0;
    actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
    expected = 100;
    actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeModeNames_SmFb0() {
    String[] expected = new String[]{"mode1", "mode2", "mode3"};
    String[] actual = TradeConfig.getRunTimeModeNames();
    assertEquals(expected.length, actual.length);
    for (int i = 0; i < expected.length; i++) {
      assertEquals(expected[i], actual[i]);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_2_RDqt1() {
    String address = TradeConfig.rndAddress();
    assertNotNull(address);
    assertTrue(address.contains("Oak St."));
    assertTrue(address.contains("1000"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_3_dsVi2() {
    String address = TradeConfig.rndAddress();
    assertNotNull(address);
    assertTrue(address.contains("Oak St."));
    assertTrue(address.contains("1000"));
    assertTrue(address.contains("1001"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_4_eRfn3() {
    String address = TradeConfig.rndAddress();
    assertNotNull(address);
    assertTrue(address.contains("Oak St."));
    assertTrue(address.contains("1000"));
    assertTrue(address.contains("1001"));
    assertTrue(address.contains("1002"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_5_LYzb4() {
    String address = TradeConfig.rndAddress();
    assertNotNull(address);
    assertTrue(address.contains("Oak St."));
    assertTrue(address.contains("1000"));
    assertTrue(address.contains("1001"));
    assertTrue(address.contains("1002"));
    assertTrue(address.contains("1003"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_6_Pfpr5() {
    String address = TradeConfig.rndAddress();
    assertNotNull(address);
    assertTrue(address.contains("Oak St."));
    assertTrue(address.contains("1000"));
    assertTrue(address.contains("1001"));
    assertTrue(address.contains("1002"));
    assertTrue(address.contains("1003"));
    assertTrue(address.contains("1004"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_7_DgLE6() {
    String address = TradeConfig.rndAddress();
    assertNotNull(address);
    assertTrue(address.contains("Oak St."));
    assertTrue(address.contains("1000"));
    assertTrue(address.contains("1001"));
    assertTrue(address.contains("1002"));
    assertTrue(address.contains("1003"));
    assertTrue(address.contains("1004"));
    assertTrue(address.contains("1005"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_8_cAep7() {
    String address = TradeConfig.rndAddress();
    assertNotNull(address);
    assertTrue(address.contains("Oak St."));
    assertTrue(address.contains("1000"));
    assertTrue(address.contains("1001"));
    assertTrue(address.contains("1002"));
    assertTrue(address.contains("1003"));
    assertTrue(address.contains("1004"));
    assertTrue(address.contains("1005"));
    assertTrue(address.contains("1006"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_9_hJGR8() {
    String address = TradeConfig.rndAddress();
    assertNotNull(address);
    assertTrue(address.contains("Oak St."));
    assertTrue(address.contains("1000"));
    assertTrue(address.contains("1001"));
    assertTrue(address.contains("1002"));
    assertTrue(address.contains("1003"));
    assertTrue(address.contains("1004"));
    assertTrue(address.contains("1005"));
    assertTrue(address.contains("1006"));
    assertTrue(address.contains("1007"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCountMultipleTimes_dHYu1() {
    TradeConfig config = new TradeConfig();
    config.incrementScenarioCount();
    config.incrementScenarioCount();
    config.incrementScenarioCount();
    assertEquals(3, config.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixes_empty_rtre0() {
    int[][] scenarioMixes = TradeConfig.getScenarioMixes();
    assertEquals(0, scenarioMixes.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixes_single_ztET1() {
    int[][] scenarioMixes = TradeConfig.getScenarioMixes();
    assertEquals(1, scenarioMixes.length);
    assertEquals(0, scenarioMixes[0].length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixes_multiple_GwgI2() {
    int[][] scenarioMixes = TradeConfig.getScenarioMixes();
    assertEquals(2, scenarioMixes.length);
    assertEquals(0, scenarioMixes[0].length);
    assertEquals(1, scenarioMixes[1].length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixes_null_dIJo3() {
    int[][] scenarioMixes = TradeConfig.getScenarioMixes();
    assertNull(scenarioMixes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERS_WithNegativeValue_ZLTz1() {
    int expected = -1;
    int actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERS_WithZeroValue_wZIX2() {
    int expected = 0;
    int actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndQuantity_XGWJ0() {
    float result = TradeConfig.rndQuantity();
    assertEquals(1.0f, result, 0.0001f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequencyWithDifferentValues_JscV1() {
    int expected = 5;
    int actual = TradeConfig.getListQuotePriceChangeFrequency();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequencyWithNegativeValue_hrRb2() {
    int expected = -1;
    int actual = TradeConfig.getListQuotePriceChangeFrequency();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserID_UPtX0() {
    String hostname = "localhost";
    long currentTime = System.currentTimeMillis();
    int count = 1;
    String expected = "newUserPrefix" + hostname + currentTime + count;
    String actual = TradeConfig.rndNewUserID();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndPrice_DIkT0() {
    float price = TradeConfig.rndPrice();
    assertEquals(1.0f, price, 0.001f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_Buy_KnhM0() {
    BigDecimal orderFee = TradeConfig.getOrderFee("BUY");
    assertEquals(new BigDecimal("0.01"), orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_Sell_xBES1() {
    BigDecimal orderFee = TradeConfig.getOrderFee("SELL");
    assertEquals(new BigDecimal("0.01"), orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_Other_scqZ2() {
    BigDecimal orderFee = TradeConfig.getOrderFee("OTHER");
    assertEquals(new BigDecimal("0.02"), orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioActionNewUser_jsAV0() {
    boolean newUser = true;
    char action = TradeConfig.getScenarioAction(newUser);
    assertEquals('b', action);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioActionExistingUser_HiRM1() {
    boolean newUser = false;
    char action = TradeConfig.getScenarioAction(newUser);
    assertEquals('s', action);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioActionIncrementScenarioCount_vxNR3() {
    int scenarioCount = 0;
    TradeConfig.getScenarioAction(true);
    assertEquals(1, scenarioCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioActionSellDeficit_Ipvv4() {
    int sellDeficit = 1;
    char action = TradeConfig.getScenarioAction(false);
    assertEquals('s', action);
    assertEquals(0, sellDeficit);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterationsWithNegativeValue_zDML1() {
    int iter = -5;
    TradeConfig.setPrimIterations(iter);
    assertEquals(0, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_ValidInput_EXJd0() {
    TradeConfig tradeConfig = new TradeConfig();
    String userID = tradeConfig.nextUserID();
    assertEquals("uid:0", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_pageNumberIsZero_RAaE0() {
    int pageNumber = 0;
    String expected = "webUI[webInterface][0]";
    String actual = TradeConfig.getPage(pageNumber);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_pageNumberIsOne_KgrU1() {
    int pageNumber = 1;
    String expected = "webUI[webInterface][1]";
    String actual = TradeConfig.getPage(pageNumber);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_pageNumberIsTwo_SyYx2() {
    int pageNumber = 2;
    String expected = "webUI[webInterface][2]";
    String actual = TradeConfig.getPage(pageNumber);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_pageNumberIsThree_QxRS3() {
    int pageNumber = 3;
    String expected = "webUI[webInterface][3]";
    String actual = TradeConfig.getPage(pageNumber);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_pageNumberIsFour_jKob4() {
    int pageNumber = 4;
    String expected = "webUI[webInterface][4]";
    String actual = TradeConfig.getPage(pageNumber);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_pageNumberIsFive_nQxi5() {
    int pageNumber = 5;
    String expected = "webUI[webInterface][5]";
    String actual = TradeConfig.getPage(pageNumber);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_pageNumberIsSix_hBmn6() {
    int pageNumber = 6;
    String expected = "webUI[webInterface][6]";
    String actual = TradeConfig.getPage(pageNumber);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_pageNumberIsSeven_mGav7() {
    int pageNumber = 7;
    String expected = "webUI[webInterface][7]";
    String actual = TradeConfig.getPage(pageNumber);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_pageNumberIsEight_JbAJ8() {
    int pageNumber = 8;
    String expected = "webUI[webInterface][8]";
    String actual = TradeConfig.getPage(pageNumber);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_pageNumberIsNine_gdsk9() {
    int pageNumber = 9;
    String expected = "webUI[webInterface][9]";
    String actual = TradeConfig.getPage(pageNumber);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_pageNumberIsTen_oQIo10() {
    int pageNumber = 10;
    String expected = "webUI[webInterface][10]";
    String actual = TradeConfig.getPage(pageNumber);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_pageNumberIsEleven_BkYa11() {
    int pageNumber = 11;
    String expected = "webUI[webInterface][11]";
    String actual = TradeConfig.getPage(pageNumber);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_pageNumberIsTwelve_cLiz12() {
    int pageNumber = 12;
    String expected = "webUI[webInterface][12]";
    String actual = TradeConfig.getPage(pageNumber);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_pageNumberIsThirteen_yEHL13() {
    int pageNumber = 13;
    String expected = "webUI[webInterface][13]";
    String actual = TradeConfig.getPage(pageNumber);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUpdateQuotePrices_KjRJ0() {
    TradeConfig config = new TradeConfig();
    assertTrue(config.getUpdateQuotePrices());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetScenarioCountWithNegativeValue_kJcS1() {
    TradeConfig config = new TradeConfig();
    config.setScenarioCount(-1);
    assertEquals(0, config.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeNames_ucvt0() {
    String[] expected = new String[]{"LIVE", "SIMULATED"};
    String[] actual = TradeConfig.getOrderProcessingModeNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode1_vTPH1() {
    int expected = 1;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode2_lUDC2() {
    int expected = 2;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode3_XyrX3() {
    int expected = 3;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode5_HXnH5() {
    int expected = 5;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode6_IRua6() {
    int expected = 6;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode7_CViw7() {
    int expected = 7;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode8_lVhf8() {
    int expected = 8;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode9_iPYS9() {
    int expected = 9;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode10_iScZ10() {
    int expected = 10;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode11_MbYo11() {
    int expected = 11;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode12_ndio12() {
    int expected = 12;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode13_lZpt13() {
    int expected = 13;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode14_VOoC14() {
    int expected = 14;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode15_eCMg15() {
    int expected = 15;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode16_UveG16() {
    int expected = 16;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode17_VfQj17() {
    int expected = 17;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode18_heVI18() {
    int expected = 18;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbols_Empty_HwYc0() {
    String symbols = TradeConfig.rndSymbols();
    assertEquals("", symbols);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbols_OneSymbol_ZqjM1() {
    String symbols = TradeConfig.rndSymbols();
    assertEquals("s:0", symbols);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbols_MultipleSymbols_zszp2() {
    String symbols = TradeConfig.rndSymbols();
    assertEquals("s:0,s:1,s:2,s:3,s:4,s:5,s:6,s:7,s:8,s:9", symbols);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbols_MaxSymbols_Ludr3() {
    String symbols = TradeConfig.rndSymbols();
    assertEquals("s:0,s:1,s:2,s:3,s:4,s:5,s:6,s:7,s:8,s:9,s:10,s:11,s:12,s:13,s:14,s:15,s:16,s:17,s:18,s:19,s:20", symbols);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbols_InvalidSymbols_GIJZ5() {
    String symbols = TradeConfig.rndSymbols();
    assertEquals("s:0,s:1,s:2,s:3,s:4,s:5,s:6,s:7,s:8,s:9,s:10,s:11,s:12,s:13,s:14,s:15,s:16,s:17,s:18,s:19,s:20,s:21", symbols);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Negative_Owje1() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertTrue(result.doubleValue() < 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Zero_wAFa2() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(BigDecimal.ZERO, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Negative_RoundUp_ySaw4() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertTrue(result.doubleValue() < 0.0);
    assertEquals(BigDecimal.ONE.negate(), result.setScale(0, BigDecimal.ROUND_HALF_UP));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_RND_USER_aHwu0() {
    TradeConfig.RND_USER = true;
    String userID = TradeConfig.getUserID();
    assertEquals("rndUserID", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_nextUserID_cNFA1() {
    TradeConfig.RND_USER = false;
    String userID = TradeConfig.getUserID();
    assertEquals("nextUserID", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmail_XSZb0() {
    String userID = "user1";
    String expectedEmail = "user1@100.com";
    String actualEmail = TradeConfig.rndEmail(userID);
    assertEquals(expectedEmail, actualEmail);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmailWithMultipleDigits_XfyD1() {
    String userID = "user123";
    String expectedEmail = "user123@123.com";
    String actualEmail = TradeConfig.rndEmail(userID);
    assertEquals(expectedEmail, actualEmail);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmailWithSpecialCharacters_eXPb2() {
    String userID = "user!@#$%^&*()_+";
    String expectedEmail = "user!@#$%^&*()_+@100.com";
    String actualEmail = TradeConfig.rndEmail(userID);
    assertEquals(expectedEmail, actualEmail);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmailWithEmptyString_YBUb3() {
    String userID = "";
    String expectedEmail = "@100.com";
    String actualEmail = TradeConfig.rndEmail(userID);
    assertEquals(expectedEmail, actualEmail);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmailWithNullString_Agvw4() {
    String userID = null;
    String expectedEmail = null;
    String actualEmail = TradeConfig.rndEmail(userID);
    assertEquals(expectedEmail, actualEmail);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioCount_hSzx0() {
    int expected = 10;
    int actual = TradeConfig.getScenarioCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioCountWithZeroScenarios_wJCz1() {
    int expected = 0;
    int actual = TradeConfig.getScenarioCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioCountWithOneScenario_PYya2() {
    int expected = 1;
    int actual = TradeConfig.getScenarioCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard_OCfX0() {
    String creditCard = TradeConfig.rndCreditCard();
    assertNotNull(creditCard);
    assertEquals(16, creditCard.length());
    assertTrue(creditCard.matches("^[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}$"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Default_smtt0() {
    int expected = 0;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode1_GHYN1() {
    int expected = 1;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode2_eprk2() {
    int expected = 2;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode3_LPPq3() {
    int expected = 3;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode4_DwaH4() {
    int expected = 4;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode5_FUBc5() {
    int expected = 5;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode6_KubT6() {
    int expected = 6;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode7_UWZU7() {
    int expected = 7;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode8_iwQg8() {
    int expected = 8;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode9_Yfdo9() {
    int expected = 9;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode10_VGtR10() {
    int expected = 10;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode11_nFyO11() {
    int expected = 11;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode12_TDyg12() {
    int expected = 12;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode13_rpfP13() {
    int expected = 13;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode14_ZNuk14() {
    int expected = 14;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode15_zpJL15() {
    int expected = 15;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode16_EYns16() {
    int expected = 16;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode17_lKGC17() {
    int expected = 17;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Mode18_yBPy18() {
    int expected = 18;
    int actual = TradeConfig.getRunTimeMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_wTfG0() {
    BigDecimal result = TradeConfig.rndBigDecimal(100.0f);
    assertEquals(100.00, result.doubleValue(), 0.00001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimalWithRounding_yMFZ1() {
    BigDecimal result = TradeConfig.rndBigDecimal(100.5f);
    assertEquals(100.50, result.doubleValue(), 0.00001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimalWithNegativeValue_ABIW2() {
    BigDecimal result = TradeConfig.rndBigDecimal(-100.0f);
    assertEquals(-100.00, result.doubleValue(), 0.00001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimalWithInvalidValue_JdgL7() {
    try {
      TradeConfig.rndBigDecimal(Float.NaN);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid value: NaN", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimalWithInfinityValue_GbHV8() {
    try {
      TradeConfig.rndBigDecimal(Float.POSITIVE_INFINITY);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid value: Infinity", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimalWithNegativeInfinityValue_FiMD9() {
    try {
      TradeConfig.rndBigDecimal(Float.NEGATIVE_INFINITY);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid value: -Infinity", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_WFUZ0() {
    TradeConfig config = new TradeConfig();
    String nextUser = config.rndUserID();
    assertNotNull(nextUser);
    assertEquals("uid:0", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserIDWithMaxUsers_CCSi1() {
    TradeConfig config = new TradeConfig();
    config.setMAX_USERS(10);
    String nextUser = config.rndUserID();
    assertNotNull(nextUser);
    assertEquals("uid:0", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_20_vfOi19_fid3() {
    float result = TradeConfig.rndFloat(20);
    assertEquals(9.5f, result, 0.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalWithDifferentValues_dxIx1_1_fid3() {
    int expected = 5;
    int actual = TradeConfig.getMarketSummaryInterval();
    expected = 15;
    actual = TradeConfig.getMarketSummaryInterval();
    expected = 30;
    actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalWithDifferentValuesAndInvalidValues_gJhY4_1_fid3() {
    int expected = 5;
    int actual = TradeConfig.getMarketSummaryInterval();
    expected = 15;
    actual = TradeConfig.getMarketSummaryInterval();
    expected = 30;
    actual = TradeConfig.getMarketSummaryInterval();
    expected = -1;
    actual = TradeConfig.getMarketSummaryInterval();
    expected = 0;
    actual = TradeConfig.getMarketSummaryInterval();
    expected = 100;
    actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixes_single_ztET1_1() {
    int[][] scenarioMixes = TradeConfig.getScenarioMixes();
    assertEquals(1, scenarioMixes.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixes_single_ztET1_2() {
    int[][] scenarioMixes = TradeConfig.getScenarioMixes();
    assertEquals(0, scenarioMixes[0].length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixes_multiple_GwgI2_3() {
    int[][] scenarioMixes = TradeConfig.getScenarioMixes();
    assertEquals(1, scenarioMixes[1].length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioActionSellDeficit_Ipvv4_1() {
    int sellDeficit = 1;
    char action = TradeConfig.getScenarioAction(false);
    assertEquals('s', action);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioActionSellDeficit_Ipvv4_2() {
    int sellDeficit = 1;
    char action = TradeConfig.getScenarioAction(false);
    assertEquals(0, sellDeficit);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Negative_RoundUp_ySaw4_2() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(BigDecimal.ONE.negate(), result.setScale(0, BigDecimal.ROUND_HALF_UP));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard_OCfX0_2() {
    String creditCard = TradeConfig.rndCreditCard();
    assertEquals(16, creditCard.length());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard_OCfX0_3() {
    String creditCard = TradeConfig.rndCreditCard();
    assertTrue(creditCard.matches("^[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}$"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_WFUZ0_2() {
    TradeConfig config = new TradeConfig();
    String nextUser = config.rndUserID();
    assertEquals("uid:0", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserIDWithMaxUsers_CCSi1_2() {
    TradeConfig config = new TradeConfig();
    config.setMAX_USERS(10);
    String nextUser = config.rndUserID();
    assertEquals("uid:0", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeMode_nullValue_NDQS2_dNCy0() {
    TradeConfig.setRunTimeMode(0);
    assertNull(TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeMode_invalidObject_hWcX9_tnog0() {
    TradeConfig.setRunTimeMode(1);
    assertNull(TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetJDBCDriverNeedsGlobalTransationNull_JfbK2_sAQS0() {
    TradeConfig.setJDBCDriverNeedsGlobalTransation(false);
    assertNull(TradeConfig.JDBCDriverNeedsGlobalTransation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullNameWithValidInput_eMsb2_yQpE0_2() {
    String name = TradeConfig.rndBalance();
    assertTrue(name.contains("first:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullNameWithValidInput_eMsb2_yQpE0_3() {
    String name = TradeConfig.rndBalance();
    assertTrue(name.contains("last:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullNameWithValidInput_eMsb2_yQpE0_4() {
    String name = TradeConfig.rndBalance();
    assertTrue(name.matches("first:\\d+ last:\\d+"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryIntervalWithNegativeValue_zuwH1_spxb0() {
    int seconds = -10;
    TradeConfig.setMarketSummaryInterval(seconds);
    assertEquals(0, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_QUOTES_WithNegativeInput_pTxJ1_Vcgf0() {
    int expected = -1;
    int actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_QUOTES_WithZeroInput_tkBz2_ihFr0() {
    int expected = 0;
    int actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_19_tFSC18_MmMa1() {
    assertEquals(190, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUpdateQuotePricesWithNull_iWSe2_aykh0() {
    TradeConfig config = new TradeConfig();
    config.setUpdateQuotePrices(false);
    assertNull(config.getUpdateQuotePrices());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUpdateQuotePricesWithInvalidValueAndNullValue_TdEz10_EOEG0() {
    TradeConfig config = new TradeConfig();
    config.setUpdateQuotePrices(false);
    config.setUpdateQuotePrices(false);
    assertNull(config.getUpdateQuotePrices());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_AllCombinations_Hrsc2_scZC0() {
    for (boolean rndUser : new boolean[]{true, false}) {
      for (String userID : new String[]{"rndUserID", "nextUserID"}) {
        TradeConfig.RND_USER = rndUser;
        String returnedUserID = TradeConfig.getUserID();
        assertEquals(userID, returnedUserID);
      }
    }
  }
}