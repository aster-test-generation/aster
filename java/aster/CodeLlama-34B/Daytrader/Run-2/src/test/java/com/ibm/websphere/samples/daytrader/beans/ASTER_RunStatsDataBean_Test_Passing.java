/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RunStatsDataBean_Test_Passing {
  private RunStatsDataBean runStatsDataBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeUserCount_MscV0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeUserCount = runStatsDataBean.getTradeUserCount();
    assertEquals(0, tradeUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeUserCountWithNonZeroValue_MEYJ1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(10);
    int tradeUserCount = runStatsDataBean.getTradeUserCount();
    assertEquals(10, tradeUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeUserCountWithNegativeValue_WVms2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(-10);
    int tradeUserCount = runStatsDataBean.getTradeUserCount();
    assertEquals(-10, tradeUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeUserCountWithMaxValue_mkVB3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(Integer.MAX_VALUE);
    int tradeUserCount = runStatsDataBean.getTradeUserCount();
    assertEquals(Integer.MAX_VALUE, tradeUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeUserCountWithMinValue_pqkM4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(Integer.MIN_VALUE);
    int tradeUserCount = runStatsDataBean.getTradeUserCount();
    assertEquals(Integer.MIN_VALUE, tradeUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeUserCountWithNegativeNumericString_fxHz11() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBuyOrderCount_XIZk0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int buyOrderCount = 10;
    runStatsDataBean.setBuyOrderCount(buyOrderCount);
    assertEquals(buyOrderCount, runStatsDataBean.getBuyOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDeletedOrderCount_UIKs0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int deletedOrderCount = 10;
    runStatsDataBean.setDeletedOrderCount(deletedOrderCount);
    assertEquals(deletedOrderCount, runStatsDataBean.getDeletedOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDeletedOrderCountWithZero_veov1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int deletedOrderCount = 0;
    runStatsDataBean.setDeletedOrderCount(deletedOrderCount);
    assertEquals(deletedOrderCount, runStatsDataBean.getDeletedOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDeletedOrderCountWithNegative_ZjaI2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int deletedOrderCount = -10;
    runStatsDataBean.setDeletedOrderCount(deletedOrderCount);
    assertEquals(deletedOrderCount, runStatsDataBean.getDeletedOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDeletedOrderCountWithLargeNumber_DLAS3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int deletedOrderCount = 100000;
    runStatsDataBean.setDeletedOrderCount(deletedOrderCount);
    assertEquals(deletedOrderCount, runStatsDataBean.getDeletedOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDeletedOrderCountWithInvalidValue_txHj5() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int deletedOrderCount = -1;
    runStatsDataBean.setDeletedOrderCount(deletedOrderCount);
    assertEquals(deletedOrderCount, runStatsDataBean.getDeletedOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeUserCount_asbE0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(10);
    assertEquals(10, runStatsDataBean.getTradeUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeUserCountWithZeroValue_ZqEt2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(0);
    assertEquals(0, runStatsDataBean.getTradeUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeUserCountWithLargeValue_mkIZ3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(10000);
    assertEquals(10000, runStatsDataBean.getTradeUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBuyOrderCount_wOnK0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int buyOrderCount = runStatsDataBean.getBuyOrderCount();
    assertEquals(0, buyOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBuyOrderCountWithPositiveCount_niIW1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setBuyOrderCount(10);
    int buyOrderCount = runStatsDataBean.getBuyOrderCount();
    assertEquals(10, buyOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBuyOrderCountWithNegativeCount_gMOL2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setBuyOrderCount(-10);
    int buyOrderCount = runStatsDataBean.getBuyOrderCount();
    assertEquals(-10, buyOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBuyOrderCountWithZeroCount_kMxh3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setBuyOrderCount(0);
    int buyOrderCount = runStatsDataBean.getBuyOrderCount();
    assertEquals(0, buyOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBuyOrderCountWithMaxCount_OVOt4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setBuyOrderCount(Integer.MAX_VALUE);
    int buyOrderCount = runStatsDataBean.getBuyOrderCount();
    assertEquals(Integer.MAX_VALUE, buyOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBuyOrderCountWithMinCount_nMck5() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setBuyOrderCount(Integer.MIN_VALUE);
    int buyOrderCount = runStatsDataBean.getBuyOrderCount();
    assertEquals(Integer.MIN_VALUE, buyOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderCount_zZTC0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int orderCount = runStatsDataBean.getOrderCount();
    assertEquals(0, orderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderCountWithPositiveCount_DGXV1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(10);
    int orderCount = runStatsDataBean.getOrderCount();
    assertEquals(10, orderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderCountWithNegativeCount_NYgb2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(-10);
    int orderCount = runStatsDataBean.getOrderCount();
    assertEquals(-10, orderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderCountWithZeroCount_bwkG3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(0);
    int orderCount = runStatsDataBean.getOrderCount();
    assertEquals(0, orderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenOrderCount_LsrR0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int openOrderCount = runStatsDataBean.getOpenOrderCount();
    assertEquals(0, openOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenOrderCountWithPositiveValue_EYxn1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOpenOrderCount(10);
    int openOrderCount = runStatsDataBean.getOpenOrderCount();
    assertEquals(10, openOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenOrderCountWithNegativeValue_JTZq2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOpenOrderCount(-10);
    int openOrderCount = runStatsDataBean.getOpenOrderCount();
    assertEquals(-10, openOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNewUserCount_BsdH0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int newUserCount = runStatsDataBean.getNewUserCount();
    assertEquals(0, newUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenOrderCount_ValidInput_IdIc0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int openOrderCount = 10;
    runStatsDataBean.setOpenOrderCount(openOrderCount);
    assertEquals(openOrderCount, runStatsDataBean.getOpenOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeStockCount_GEGC0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeStockCount = 10;
    runStatsDataBean.setTradeStockCount(tradeStockCount);
    assertEquals(tradeStockCount, runStatsDataBean.getTradeStockCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeStockCountWithZero_OfBj1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeStockCount = 0;
    runStatsDataBean.setTradeStockCount(tradeStockCount);
    assertEquals(tradeStockCount, runStatsDataBean.getTradeStockCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeStockCountWithNegativeValue_dTFR2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeStockCount = -10;
    runStatsDataBean.setTradeStockCount(tradeStockCount);
    assertEquals(tradeStockCount, runStatsDataBean.getTradeStockCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_hwGD0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSumLoginCount(10);
    assertEquals(10, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCountWithNegativeValue_lwfp1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSumLoginCount(-10);
    assertEquals(-10, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCountWithZeroValue_ePsP2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSumLoginCount(0);
    assertEquals(0, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCountWithLargeValue_BRIg3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSumLoginCount(1000);
    assertEquals(1000, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingCount_gPDD0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setHoldingCount(10);
    assertEquals(10, runStatsDataBean.getHoldingCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingCount_negativeValue_kxKZ1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setHoldingCount(-10);
    assertEquals(-10, runStatsDataBean.getHoldingCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingCount_zeroValue_cKlF2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setHoldingCount(0);
    assertEquals(0, runStatsDataBean.getHoldingCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingCount_largeValue_fsVV3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setHoldingCount(1000);
    assertEquals(1000, runStatsDataBean.getHoldingCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCancelledOrderCount_XRux0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int cancelledOrderCount = runStatsDataBean.getCancelledOrderCount();
    assertEquals(0, cancelledOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCancelledOrderCount_nonZero_CINH1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(1);
    int cancelledOrderCount = runStatsDataBean.getCancelledOrderCount();
    assertEquals(1, cancelledOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCount_EKkL0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sellOrderCount = 10;
    runStatsDataBean.setSellOrderCount(sellOrderCount);
    assertEquals(sellOrderCount, runStatsDataBean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_ylIX0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    String expected = "\n\tRunStatsData for reset at " + new java.util.Date() + "\n\t\t      tradeUserCount: " + runStatsDataBean.getTradeUserCount() + "\n\t\t        newUserCount: " + runStatsDataBean.getNewUserCount() + "\n\t\t       sumLoginCount: " + runStatsDataBean.getSumLoginCount() + "\n\t\t      sumLogoutCount: " + runStatsDataBean.getSumLogoutCount() + "\n\t\t        holdingCount: " + runStatsDataBean.getHoldingCount() + "\n\t\t          orderCount: " + runStatsDataBean.getOrderCount() + "\n\t\t       buyOrderCount: " + runStatsDataBean.getBuyOrderCount() + "\n\t\t      sellOrderCount: " + runStatsDataBean.getSellOrderCount() + "\n\t\t cancelledOrderCount: " + runStatsDataBean.getCancelledOrderCount() + "\n\t\t      openOrderCount: " + runStatsDataBean.getOpenOrderCount() + "\n\t\t   deletedOrderCount: " + runStatsDataBean.getDeletedOrderCount();
    String actual = runStatsDataBean.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithTradeUserCount_huNV1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(10);
    String expected = "\n\tRunStatsData for reset at " + new java.util.Date() + "\n\t\t      tradeUserCount: 10" + "\n\t\t        newUserCount: " + runStatsDataBean.getNewUserCount() + "\n\t\t       sumLoginCount: " + runStatsDataBean.getSumLoginCount() + "\n\t\t      sumLogoutCount: " + runStatsDataBean.getSumLogoutCount() + "\n\t\t        holdingCount: " + runStatsDataBean.getHoldingCount() + "\n\t\t          orderCount: " + runStatsDataBean.getOrderCount() + "\n\t\t       buyOrderCount: " + runStatsDataBean.getBuyOrderCount() + "\n\t\t      sellOrderCount: " + runStatsDataBean.getSellOrderCount() + "\n\t\t cancelledOrderCount: " + runStatsDataBean.getCancelledOrderCount() + "\n\t\t      openOrderCount: " + runStatsDataBean.getOpenOrderCount() + "\n\t\t   deletedOrderCount: " + runStatsDataBean.getDeletedOrderCount();
    String actual = runStatsDataBean.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeStockCount_xoOD0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeStockCount = runStatsDataBean.getTradeStockCount();
    assertEquals(0, tradeStockCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeStockCount_Gqgy1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeStockCount = runStatsDataBean.getTradeStockCount();
    assertEquals(0, tradeStockCount);
    runStatsDataBean.setTradeStockCount(10);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    assertEquals(10, tradeStockCount);
    runStatsDataBean.setTradeStockCount(20);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    assertEquals(20, tradeStockCount);
    runStatsDataBean.setTradeStockCount(30);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    assertEquals(30, tradeStockCount);
    runStatsDataBean.setTradeStockCount(40);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    assertEquals(40, tradeStockCount);
    runStatsDataBean.setTradeStockCount(50);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    assertEquals(50, tradeStockCount);
    runStatsDataBean.setTradeStockCount(60);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    assertEquals(60, tradeStockCount);
    runStatsDataBean.setTradeStockCount(70);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    assertEquals(70, tradeStockCount);
    runStatsDataBean.setTradeStockCount(80);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    assertEquals(80, tradeStockCount);
    runStatsDataBean.setTradeStockCount(90);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    assertEquals(90, tradeStockCount);
    runStatsDataBean.setTradeStockCount(100);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    assertEquals(100, tradeStockCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDeletedOrderCount_hMya0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int deletedOrderCount = runStatsDataBean.getDeletedOrderCount();
    assertEquals(0, deletedOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDeletedOrderCountWithNonZeroCount_cEXt1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(10);
    int deletedOrderCount = runStatsDataBean.getDeletedOrderCount();
    assertEquals(10, deletedOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDeletedOrderCountWithNegativeCount_NOlT2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(-10);
    int deletedOrderCount = runStatsDataBean.getDeletedOrderCount();
    assertEquals(-10, deletedOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDeletedOrderCountWithZeroCount_xdMR3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(0);
    int deletedOrderCount = runStatsDataBean.getDeletedOrderCount();
    assertEquals(0, deletedOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_eljv0() {
    runStatsDataBean = new RunStatsDataBean();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNewUserCount_eQCE0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int newUserCount = 10;
    runStatsDataBean.setNewUserCount(newUserCount);
    assertEquals(newUserCount, runStatsDataBean.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderCount_fSoT0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int orderCount = 10;
    runStatsDataBean.setOrderCount(orderCount);
    assertEquals(orderCount, runStatsDataBean.getOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderCountWithZeroValue_KFxx2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int orderCount = 0;
    runStatsDataBean.setOrderCount(orderCount);
    assertEquals(0, runStatsDataBean.getOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderCountWithLargeValue_LLVw3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int orderCount = 1000;
    runStatsDataBean.setOrderCount(orderCount);
    assertEquals(1000, runStatsDataBean.getOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumLoginCount_1_LIrW0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = runStatsDataBean.getSumLoginCount();
    assertEquals(0, sumLoginCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_1_ZVLe0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(1);
    assertEquals(1, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_2_TjBT1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(2);
    assertEquals(2, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_3_eosR2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(3);
    assertEquals(3, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_4_flqA3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(4);
    assertEquals(4, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_5_GNsA4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(5);
    assertEquals(5, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_6_hbjo5() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(6);
    assertEquals(6, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_7_pndo6() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(7);
    assertEquals(7, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_8_cDTp7() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(8);
    assertEquals(8, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_9_WEaU8() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(9);
    assertEquals(9, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_10_xnmv9() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(10);
    assertEquals(10, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_11_qVtk10() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(11);
    assertEquals(11, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_12_KtQD11() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(12);
    assertEquals(12, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_13_DWem12() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(13);
    assertEquals(13, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_14_vJPd13() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(14);
    assertEquals(14, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLogoutCount_hitg0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLogoutCount = 10;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    assertEquals(sumLogoutCount, runStatsDataBean.getSumLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingCount_AFfB0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int holdingCount = runStatsDataBean.getHoldingCount();
    assertEquals(0, holdingCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingCountWithNonZeroHoldingCount_EYiJ1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setHoldingCount(10);
    int holdingCount = runStatsDataBean.getHoldingCount();
    assertEquals(10, holdingCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingCountWithNegativeHoldingCount_dKpa2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setHoldingCount(-10);
    int holdingCount = runStatsDataBean.getHoldingCount();
    assertEquals(-10, holdingCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingCountWithMaxValue_LXki3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setHoldingCount(Integer.MAX_VALUE);
    int holdingCount = runStatsDataBean.getHoldingCount();
    assertEquals(Integer.MAX_VALUE, holdingCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingCountWithMinValue_aUvV4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setHoldingCount(Integer.MIN_VALUE);
    int holdingCount = runStatsDataBean.getHoldingCount();
    assertEquals(Integer.MIN_VALUE, holdingCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSellOrderCount_xCDG0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sellOrderCount = runStatsDataBean.getSellOrderCount();
    assertEquals(0, sellOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSellOrderCountWithPositiveCount_aDnv1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(5);
    int sellOrderCount = runStatsDataBean.getSellOrderCount();
    assertEquals(5, sellOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSellOrderCountWithNegativeCount_SbnE2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(-5);
    int sellOrderCount = runStatsDataBean.getSellOrderCount();
    assertEquals(-5, sellOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSellOrderCountWithZeroCount_HDtP3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(0);
    int sellOrderCount = runStatsDataBean.getSellOrderCount();
    assertEquals(0, sellOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNewUserCountWithMaxValue_ICve4_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int newUserCount = runStatsDataBean.getNewUserCount();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenOrderCount_InvalidInput_kOTh1_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int openOrderCount = -1;
    runStatsDataBean.setOpenOrderCount(openOrderCount);
    assertEquals(-1, runStatsDataBean.getOpenOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeStockCount_Gqgy1_3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(10);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(20);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(30);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(40);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(50);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(60);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(70);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(80);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(90);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(100);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeStockCount_Gqgy1_11() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(10);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(20);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(30);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(40);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(50);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(60);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(70);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(80);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(90);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    runStatsDataBean.setTradeStockCount(100);
    tradeStockCount = runStatsDataBean.getTradeStockCount();
    assertEquals(100, tradeStockCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeUserCountWithNullValue_tQPd5_YzBG0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(0);
    int tradeUserCount = runStatsDataBean.getTradeUserCount();
    assertEquals(0, tradeUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenOrderCount_NullInput_Gtso2_dIDA0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int openOrderCount = 0;
    runStatsDataBean.setOpenOrderCount(openOrderCount);
    assertEquals(0, runStatsDataBean.getOpenOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCount_dUXw1_HXQJ0_1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sellOrderCount = 10;
    runStatsDataBean.setSellOrderCount(sellOrderCount);
    sellOrderCount = 0;
    runStatsDataBean.setSellOrderCount(sellOrderCount);
    sellOrderCount = -1;
    runStatsDataBean.setSellOrderCount(sellOrderCount);
    sellOrderCount = 0;
    runStatsDataBean.setSellOrderCount(sellOrderCount);
    sellOrderCount = 0;
    runStatsDataBean.setSellOrderCount(sellOrderCount);
    assertEquals(sellOrderCount, runStatsDataBean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_FsiP0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLogoutCount_QNYt1_nIUG0_1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLogoutCount = 10;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    sumLogoutCount = 20;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    sumLogoutCount = -10;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    sumLogoutCount = 0;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    sumLogoutCount = 0;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    sumLogoutCount = 10;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    sumLogoutCount = 20;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    sumLogoutCount = 30;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    sumLogoutCount = 40;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    sumLogoutCount = 50;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    sumLogoutCount = 60;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    sumLogoutCount = 70;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    sumLogoutCount = 80;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    assertEquals(sumLogoutCount, runStatsDataBean.getSumLogoutCount());
  }
}