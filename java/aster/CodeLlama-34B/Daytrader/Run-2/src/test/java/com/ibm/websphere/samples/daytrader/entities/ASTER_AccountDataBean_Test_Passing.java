/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCount_RjfA0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLoginCount(10);
    assertEquals(10, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCountWithZero_wGRD1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLoginCount(0);
    assertEquals(0, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCountWithNegative_DFXX2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLoginCount(-1);
    assertEquals(-1, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCountWithMaxValue_mgSe3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLoginCount(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCountWithMinValue_UpYx4() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLoginCount(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_xvGl0_1() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_xvGl0_2() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_xvGl0_3() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_xvGl0_4() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_xvGl0_5() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_xvGl0_6() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_xvGl0_7() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_xvGl0_8() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_xvGl0_9() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance3_GHZX2_1() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotSame(accountDataBean.getAccountID(), accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance3_GHZX2_2() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotSame(accountDataBean.getCreationDate(), accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance3_GHZX2_3() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotSame(accountDataBean.getBalance(), accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance3_GHZX2_4() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotSame(accountDataBean.getLoginCount(), accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance3_GHZX2_5() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_BzbK0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLogoutCount(3);
    assertEquals(3, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCountWithNegativeValue_idWs1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLogoutCount(-1);
    assertEquals(-1, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCountWithZeroValue_YINN2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLogoutCount(0);
    assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingsWithNull_ixZp1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Collection<HoldingDataBean> holdings = null;
    accountDataBean.setHoldings(holdings);
    assertNull(accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreationDate_glqI0_1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    Date creationDate = accountDataBean.getCreationDate();
    assertNotNull(creationDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreationDate_glqI0_2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    Date creationDate = accountDataBean.getCreationDate();
    assertEquals(new Date(), creationDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCount_YChT0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    int logoutCount = accountDataBean.getLogoutCount();
    assertEquals(2, logoutCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCountWithZeroLoginCount_PnkU1() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    int logoutCount = accountDataBean.getLogoutCount();
    assertEquals(0, logoutCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCountWithNegativeLoginCount_hhHs2() {
    AccountDataBean accountDataBean = new AccountDataBean(-1, -1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    int logoutCount = accountDataBean.getLogoutCount();
    assertEquals(-1, logoutCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountIDWithNullDate_iwjs6() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, null, new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    assertNull(accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountIDWithNullBigDecimal_JhkT11() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), null, new BigDecimal(100), "profileID");
    assertNull(accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_YNcq0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    assertTrue(accountDataBean.equals(accountDataBean));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_cabm2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    assertFalse(accountDataBean.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_GdjU3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    assertFalse(accountDataBean.equals("not an AccountDataBean"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_yENa0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.logout();
    assertEquals(2, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithZeroLoginCount_Rcyh1() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.logout();
    assertEquals(1, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithNegativeLoginCount_xvvj2() {
    AccountDataBean accountDataBean = new AccountDataBean(-1, -1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.logout();
    assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenBalance_dDml0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    accountDataBean.setOpenBalance(new BigDecimal(100));
    assertEquals(new BigDecimal(100), accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileID_CKiq0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    String profileID = accountDataBean.getProfileID();
    assertEquals("profileID", profileID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileIDWithNullProfileID_Qaqp1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), null);
    String profileID = accountDataBean.getProfileID();
    assertNull(profileID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileIDWithEmptyProfileID_XJxJ2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "");
    String profileID = accountDataBean.getProfileID();
    assertEquals("", profileID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDate_CchQ0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Date creationDate = new Date();
    accountDataBean.setCreationDate(creationDate);
    assertEquals(creationDate, accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateWithNull_IqzW1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setCreationDate(null);
    assertNull(accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileID_wbiP0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setProfileID("newProfileID");
    assertEquals("newProfileID", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileIDNull_pjpx1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setProfileID(null);
    assertNull(accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileIDEmpty_EAoa2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setProfileID("");
    assertEquals("", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLogin_obCR0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    Date lastLogin = accountDataBean.getLastLogin();
    assertEquals(new Date(), lastLogin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalance_ZboQ0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    BigDecimal balance = accountDataBean.getBalance();
    assertEquals(new BigDecimal(100), balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalanceWithZeroBalance_aheN1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(0), new BigDecimal(100), "profileID");
    BigDecimal balance = accountDataBean.getBalance();
    assertEquals(new BigDecimal(0), balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalanceWithNegativeBalance_NRLw2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(-100), new BigDecimal(100), "profileID");
    BigDecimal balance = accountDataBean.getBalance();
    assertEquals(new BigDecimal(-100), balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithNullProfile_qQNI1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), null);
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertNull(profile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalance_UEKz0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    assertEquals(new BigDecimal(50), accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalanceWithZeroBalance_aGTh1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(0), new BigDecimal(0), "profileID");
    assertEquals(new BigDecimal(0), accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalanceWithNegativeBalance_pWXl2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(-100), new BigDecimal(-50), "profileID");
    assertEquals(new BigDecimal(-50), accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalance_eUqg0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setBalance(new BigDecimal(50));
    assertEquals(new BigDecimal(50), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceWithZero_AOic1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setBalance(new BigDecimal(0));
    assertEquals(new BigDecimal(0), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceWithNegative_EQSR2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setBalance(new BigDecimal(-50));
    assertEquals(new BigDecimal(-50), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceWithNull_sLSL3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setBalance(null);
    assertNull(accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nullAccountID_Wszz1_okhk0() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    int expectedHashCode = 0;
    int actualHashCode = accountDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreationDateWithNullParameters_bdoJ5_PycJ0() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, null, null, null, null, null);
    Date creationDate = accountDataBean.getCreationDate();
    assertNull(creationDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreationDateWithNullLoginCount_hYKZ9_oRrO0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 0, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    Date creationDate = accountDataBean.getCreationDate();
    assertNotNull(creationDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCountWithInvalidAccountID_huWN6_JtlD0() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    assertEquals(0, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountIDWithNullAccountID_Lsdf1_gcYm0() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    assertNull(accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceWithDifferentType_nUWF4_iRVf1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setBalance(new BigDecimal("50"));
    assertEquals(new BigDecimal("50"), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceWithDifferentTypeAndDecimal_MeLc8_Cerf0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setBalance(new BigDecimal(50.50));
    assertEquals(new BigDecimal(50.50), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreationDate_glqI0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(50), "profileID");
    Date creationDate = accountDataBean.getCreationDate();
    assertNotNull(creationDate);
    assertEquals(new Date(), creationDate);
  }
}