/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_FinancialUtils_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainHTML_NegativeGain_yxrm0() {
    BigDecimal gain = new BigDecimal("-10.50");
    String expected = "<FONT color=\"#ff0000\">-10.50</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainHTML_PositiveGain_fqNb1() {
    BigDecimal gain = new BigDecimal("10.50");
    String expected = "<FONT color=\"#009900\">10.50</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainHTML_ZeroGain_Dbdw2() {
    BigDecimal gain = new BigDecimal("0.00");
    String expected = "<FONT color=\"#009900\">0.00</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLink_ValidSymbol_hjpN0() {
    String symbol = "AAPL";
    String expected = "<A href=\"app?action=quotes&symbols=AAPL\">AAPL</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLink_InvalidSymbol_ZNwL1() {
    String symbol = "INVALID";
    String expected = "<A href=\"app?action=quotes&symbols=INVALID\">INVALID</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLink_EmptySymbol_yfuQ2() {
    String symbol = "";
    String expected = "<A href=\"app?action=quotes&symbols=\"></A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLink_NullSymbol_Enmv3() {
    String symbol = null;
    String expected = "<A href=\"app?action=quotes&symbols=\"></A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLink_MultipleSymbols_iobI4() {
    String symbol = "AAPL,GOOG";
    String expected = "<A href=\"app?action=quotes&symbols=AAPL,GOOG\">AAPL,GOOG</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLink_MultipleSymbolsWithInvalidSymbol_LdpN6() {
    String symbol = "AAPL,INVALID";
    String expected = "<A href=\"app?action=quotes&symbols=AAPL,INVALID\">AAPL,INVALID</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLink_MultipleSymbolsWithNullSymbol_WqiY8() {
    String symbol = "AAPL,null";
    String expected = "<A href=\"app?action=quotes&symbols=AAPL,null\">AAPL,null</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLink_MultipleSymbolsWithMixedCase_xntQ9() {
    String symbol = "AAPL,GoOg";
    String expected = "<A href=\"app?action=quotes&symbols=AAPL,GoOg\">AAPL,GoOg</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGain_ckYA0() {
    BigDecimal currentBalance = new BigDecimal("100.00");
    BigDecimal openBalance = new BigDecimal("50.00");
    BigDecimal expectedGain = new BigDecimal("50.00");
    BigDecimal actualGain = FinancialUtils.computeGain(currentBalance, openBalance);
    assertEquals(expectedGain, actualGain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainWithNegativeBalance_JeSd1() {
    BigDecimal currentBalance = new BigDecimal("-100.00");
    BigDecimal openBalance = new BigDecimal("50.00");
    BigDecimal expectedGain = new BigDecimal("-150.00");
    BigDecimal actualGain = FinancialUtils.computeGain(currentBalance, openBalance);
    assertEquals(expectedGain, actualGain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainWithZeroBalance_NkgU2() {
    BigDecimal currentBalance = new BigDecimal("0.00");
    BigDecimal openBalance = new BigDecimal("50.00");
    BigDecimal expectedGain = new BigDecimal("-50.00");
    BigDecimal actualGain = FinancialUtils.computeGain(currentBalance, openBalance);
    assertEquals(expectedGain, actualGain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainWithSameBalance_qNCt3() {
    BigDecimal currentBalance = new BigDecimal("50.00");
    BigDecimal openBalance = new BigDecimal("50.00");
    BigDecimal expectedGain = new BigDecimal("0.00");
    BigDecimal actualGain = FinancialUtils.computeGain(currentBalance, openBalance);
    assertEquals(expectedGain, actualGain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_NegativeGain_cPxh0() {
    BigDecimal gain = new BigDecimal("-10.50");
    String expected = "(<B><FONT color=\"#ff0000\">-10.50%</FONT></B>)<IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainPercentHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_PositiveGain_wEYq1() {
    BigDecimal gain = new BigDecimal("10.50");
    String expected = "(<B><FONT color=\"#009900\">+10.50%</FONT></B>)<IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainPercentHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_ZeroGain_tZVy2() {
    BigDecimal gain = new BigDecimal("0.00");
    String expected = "(<B><FONT color=\"#009900\">+0.00%</FONT></B>)<IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainPercentHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_NegativeGainWithRounding_SUXJ3() {
    BigDecimal gain = new BigDecimal("-10.51");
    String expected = "(<B><FONT color=\"#ff0000\">-10.51%</FONT></B>)<IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainPercentHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_PositiveGainWithRounding_Ajsr4() {
    BigDecimal gain = new BigDecimal("10.49");
    String expected = "(<B><FONT color=\"#009900\">+10.49%</FONT></B>)<IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainPercentHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintChangeHTML_PositiveChange_thZh0() {
    String expected = "<FONT color=\"#009900\">10.0</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printChangeHTML(10.0);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintChangeHTML_NegativeChange_BiXj1() {
    String expected = "<FONT color=\"#ff0000\">-10.0</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printChangeHTML(-10.0);
    assertEquals(expected, actual);
  }
}