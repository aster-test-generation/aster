/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_AFRO0_1() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_AFRO0_2() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_AFRO0_3() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_AFRO0_4() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_AFRO0_5() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_AFRO0_6() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_AFRO0_7() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_AFRO0_8() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbol_DyBr0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    quoteDataBean.setSymbol("GOOG");
    assertEquals("GOOG", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithEmptyString_SgSW1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    quoteDataBean.setSymbol("");
    assertEquals("", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithNull_JDgb2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    quoteDataBean.setSymbol(null);
    assertNull(quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHigh_OmHA0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    BigDecimal high = new BigDecimal(100.0);
    quoteDataBean.setHigh(high);
    assertEquals(high, quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHighWithNull_aStb1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    BigDecimal high = null;
    quoteDataBean.setHigh(high);
    assertNull(quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHighWithInvalidValue_GQJK2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    BigDecimal high = new BigDecimal(-100.0);
    quoteDataBean.setHigh(high);
    assertEquals(high, quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyName_AIIv0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(123.45), BigDecimal.valueOf(120.00), BigDecimal.valueOf(125.00), BigDecimal.valueOf(122.50), 2.5);
    assertEquals("Apple Inc.", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyNameWithNullSymbol_OEqm1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean(null, "Apple Inc.", 1000000, BigDecimal.valueOf(123.45), BigDecimal.valueOf(120.00), BigDecimal.valueOf(125.00), BigDecimal.valueOf(122.50), 2.5);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyNameWithInvalidSymbol_bZfT3() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("INVALID", "Apple Inc.", 1000000, BigDecimal.valueOf(123.45), BigDecimal.valueOf(120.00), BigDecimal.valueOf(125.00), BigDecimal.valueOf(122.50), 2.5);
    assertEquals("Apple Inc.", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyNameWithNullCompanyName_ymvD4() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", null, 1000000, BigDecimal.valueOf(123.45), BigDecimal.valueOf(120.00), BigDecimal.valueOf(125.00), BigDecimal.valueOf(122.50), 2.5);
    assertNull(quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyNameWithEmptyCompanyName_uGFj5() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "", 1000000, BigDecimal.valueOf(123.45), BigDecimal.valueOf(120.00), BigDecimal.valueOf(125.00), BigDecimal.valueOf(122.50), 2.5);
    assertEquals("", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyNameWithInvalidCompanyName_VDvz6() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "INVALID", 1000000, BigDecimal.valueOf(123.45), BigDecimal.valueOf(120.00), BigDecimal.valueOf(125.00), BigDecimal.valueOf(122.50), 2.5);
    assertEquals("INVALID", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_SymbolNotNull_penC0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    int expectedHashCode = "AAPL".hashCode();
    int actualHashCode = quoteDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_SymbolNull_DnTT1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    int expectedHashCode = 0;
    int actualHashCode = quoteDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolume_Wmww0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    quoteDataBean.setVolume(1000);
    assertEquals(1000, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolumeWithNegativeValue_jfPn1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    quoteDataBean.setVolume(-1000);
    assertEquals(-1000, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolumeWithZeroValue_UQEr2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    quoteDataBean.setVolume(0);
    assertEquals(0, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolumeWithMaxValue_rHOP3() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    quoteDataBean.setVolume(Double.MAX_VALUE);
    assertEquals(Double.MAX_VALUE, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolumeWithMinValue_inZE4() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    quoteDataBean.setVolume(Double.MIN_VALUE);
    assertEquals(Double.MIN_VALUE, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolumeWithNaN_PGQc5() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    quoteDataBean.setVolume(Double.NaN);
    assertEquals(Double.NaN, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolumeWithInfinity_GbCV6() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    quoteDataBean.setVolume(Double.POSITIVE_INFINITY);
    assertEquals(Double.POSITIVE_INFINITY, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolumeWithNegativeInfinity_iADI7() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    quoteDataBean.setVolume(Double.NEGATIVE_INFINITY);
    assertEquals(Double.NEGATIVE_INFINITY, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_qXVd0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(110.00), 10.0);
    BigDecimal price = quoteDataBean.getPrice();
    assertEquals(BigDecimal.valueOf(100.00), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullSymbol_wdoy1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean(null, "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(110.00), 10.0);
    BigDecimal price = quoteDataBean.getPrice();
    assertEquals(BigDecimal.valueOf(100.00), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullCompanyName_WlZe2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", null, 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(110.00), 10.0);
    BigDecimal price = quoteDataBean.getPrice();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullPrice_fBCf4() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, null, BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(110.00), 10.0);
    BigDecimal price = quoteDataBean.getPrice();
    assertNull(price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullOpen_Kzok5() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), null, BigDecimal.valueOf(80.00), BigDecimal.valueOf(110.00), 10.0);
    BigDecimal price = quoteDataBean.getPrice();
    assertEquals(BigDecimal.valueOf(100.00), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullLow_DREi6() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), null, BigDecimal.valueOf(110.00), 10.0);
    BigDecimal price = quoteDataBean.getPrice();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullHigh_Nitg7() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), null, 10.0);
    BigDecimal price = quoteDataBean.getPrice();
    assertEquals(BigDecimal.valueOf(100.00), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLow_ifWR0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(95.00), 5.00);
    BigDecimal expectedLow = BigDecimal.valueOf(80.00);
    BigDecimal actualLow = quoteDataBean.getLow();
    assertEquals(expectedLow, actualLow);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLowWithZeroVolume_uuRY1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 0, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(95.00), 5.00);
    BigDecimal expectedLow = BigDecimal.valueOf(80.00);
    BigDecimal actualLow = quoteDataBean.getLow();
    assertEquals(expectedLow, actualLow);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLowWithNegativeVolume_cMLA2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", -1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(95.00), 5.00);
    BigDecimal expectedLow = BigDecimal.valueOf(80.00);
    BigDecimal actualLow = quoteDataBean.getLow();
    assertEquals(expectedLow, actualLow);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetChange_1_JibS0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(95.00), 5.00);
    double change = quoteDataBean.getChange();
    assertEquals(5.00, change, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetChange_2_XDVj1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("GOOG", "Alphabet Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(95.00), 5.00);
    double change = quoteDataBean.getChange();
    assertEquals(5.00, change, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetChange_3_AUmn2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("FB", "Facebook Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(95.00), 5.00);
    double change = quoteDataBean.getChange();
    assertEquals(5.00, change, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetChange_4_vzUS3() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AMZN", "Amazon Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(95.00), 5.00);
    double change = quoteDataBean.getChange();
    assertEquals(5.00, change, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetChange_5_sPVH4() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("MSFT", "Microsoft Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(95.00), 5.00);
    double change = quoteDataBean.getChange();
    assertEquals(5.00, change, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetChange_6_cAdy5() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("BRK.B", "Berkshire Hathaway Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(95.00), 5.00);
    double change = quoteDataBean.getChange();
    assertEquals(5.00, change, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithValidValue_KBPd0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal(100.00), new BigDecimal(90.00), new BigDecimal(80.00), new BigDecimal(110.00), 10.0);
    quoteDataBean.setPrice(new BigDecimal(105.00));
    assertEquals(new BigDecimal(105.00), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithNullValue_Srca1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal(100.00), new BigDecimal(90.00), new BigDecimal(80.00), new BigDecimal(110.00), 10.0);
    quoteDataBean.setPrice(null);
    assertNull(quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_dpQu0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbolWithInvalidSymbol_hMsu2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("INVALID");
    assertEquals("INVALID", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVolume_jByi0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal(100.00), new BigDecimal(90.00), new BigDecimal(80.00), new BigDecimal(95.00), 5.00);
    assertEquals(1000000, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVolumeWithZeroVolume_MERD1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 0, new BigDecimal(100.00), new BigDecimal(90.00), new BigDecimal(80.00), new BigDecimal(95.00), 5.00);
    assertEquals(0, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVolumeWithNegativeVolume_gjqp2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", -1000000, new BigDecimal(100.00), new BigDecimal(90.00), new BigDecimal(80.00), new BigDecimal(95.00), 5.00);
    assertEquals(-1000000, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyNameWithNullVolume_yzwM7_jYvC0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 0.0, BigDecimal.valueOf(123.45), BigDecimal.valueOf(120.00), BigDecimal.valueOf(125.00), BigDecimal.valueOf(122.50), 2.5);
    assertEquals("Apple Inc.", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolumeWithNull_tErN8_KBrL0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    quoteDataBean.setVolume(0.0);
    assertEquals(0.0, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullVolume_GFak3_rBjL0_1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 0.0, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(110.00), 10.0);
    BigDecimal price = quoteDataBean.getPrice();
    assertNotNull(price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullVolume_GFak3_rBjL0_2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 0.0, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(110.00), 10.0);
    BigDecimal price = quoteDataBean.getPrice();
    assertEquals(BigDecimal.valueOf(100.00), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithNullInput_MGXC2_Daus0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean(null, null, 0.0, null, null, null, null, 0.0);
    quoteDataBean.print();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHigh_QjeF0_LqmJ0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal(100.0), new BigDecimal(90.0), new BigDecimal(80.0), new BigDecimal(100.0), 10.0);
    BigDecimal high = quoteDataBean.getHigh();
    assertEquals(100.0, high.doubleValue(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObject_cMyd1_Ejkp1() {
    QuoteDataBean quote1 = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(90.0), new BigDecimal(110.0), 10.0);
    QuoteDataBean quote2 = new QuoteDataBean("GOOG", "Alphabet Inc.", 1000000, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(90.0), new BigDecimal(110.0), 10.0);
    assertFalse(quote1.equals(quote2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLowPositive_ftDv0_ICPz0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(90.0), new BigDecimal(110.0), 10.0);
    quoteDataBean.setLow(new BigDecimal(95.0));
    assertEquals(new BigDecimal(95.0), quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLowZero_MZgV2_yQSn0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(90.0), new BigDecimal(110.0), 10.0);
    quoteDataBean.setLow(new BigDecimal(0.0));
    assertEquals(new BigDecimal(0.0), quoteDataBean.getLow());
  }
}