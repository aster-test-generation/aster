/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.transaction.RollbackException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Failing {
  private TradeSLSBBean tradeSLSBBean;
  private AccountDataBean account;
  private EntityManager entityManager;
  TradeSLSBBean tradeslsbbean;
  private TypedQuery<QuoteDataBean> query;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnWithZeroNetValue_eWZx2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 1000.0;
    double netValue = -1.0;
    double ir = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(0.0, ir, -1.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_SJUy0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    when(entityManager.createNamedQuery("quoteejb.allQuotes", QuoteDataBean.class)).thenReturn(query);
    when(query.getResultList()).thenReturn(Arrays.asList(new QuoteDataBean()));
    Collection<QuoteDataBean> quotes = tradeSLSBBean.getAllQuotes();
    assertEquals(1, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_CZtK0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_CZtK0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_CZtK0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_CZtK0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals(new BigDecimal(1000), account.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_CZtK0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals(new BigDecimal(1000), account.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithInvalidUserID_zkuu1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("invalidUserID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(4, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(4, account.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals(new BigDecimal(1000), account.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals(new BigDecimal(1000), account.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("user4", account.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2_12() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new BigDecimal(4000), account.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2_13() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new BigDecimal(4000), account.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_dIoq0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "test_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    HoldingDataBean holdingDataBean = holdings.iterator().next();
    assertNotNull(holdingDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_dIoq0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "test_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    HoldingDataBean holdingDataBean = holdings.iterator().next();
    assertEquals(userID, holdingDataBean.getAccount().getProfile().getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_SnLS1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalid_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_SnLS1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalid_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_FPdy2_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_FPdy2_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_sOHk0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 100;
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertEquals(new BigDecimal(1.5), updatedQuote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_sOHk0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 100;
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertEquals(150, updatedQuote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithPennyStockPrice_Adpf1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 100;
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertEquals(new BigDecimal(1.5), updatedQuote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithMaximumStockPrice_vNGc2_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 100;
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertEquals(100, updatedQuote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithZeroSharesTraded_oWNn3_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 0;
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertEquals(new BigDecimal(0), updatedQuote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithZeroSharesTraded_oWNn3_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 0;
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertEquals(new BigDecimal(0), updatedQuote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithZeroSharesTraded_oWNn3_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 0;
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertEquals(0, updatedQuote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_Ntfw0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(profile.getUserID());
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_Ntfw0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(profile.getUserID());
    assertEquals(orders.size(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_Ntfw0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(profile.getUserID());
    assertEquals(orders.size(), 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithInvalidUserID_DtHx1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("invalid_user_id");
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithEmptyUserID_WqGX3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("");
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNonExistentUserID_fvDO4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("non_existent_user_id");
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithMultipleOrders_xaXS5_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(profile.getUserID());
    assertEquals(orders.size(), 2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithMultipleOrders_xaXS5_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(profile.getUserID());
    assertEquals(orders.iterator().next().getOrderID(), "2");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithMultipleOrders_xaXS5_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(profile.getUserID());
    assertEquals(orders.iterator().next().getOrderID(), "1");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithDifferentUserID_PUnd6_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("different_user_id");
    assertNotNull(orders);
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithDifferentUserID_PUnd6_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("different_user_id");
    assertEquals(orders.size(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithSameUserID_Rmvj7_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(profile.getUserID());
    assertNotNull(orders);
    assertEquals(orders.size(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithSameUserID_Rmvj7_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(profile.getUserID());
    assertNotNull(orders);
    assertEquals(orders.size(), 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithDifferentAccountID_KPNB8_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("different_account_id");
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithDifferentAccountID_KPNB8_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("different_account_id");
    assertNotNull(orders);
    assertEquals(orders.size(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OTAo0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OTAo0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OTAo0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OTAo0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OTAo0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals(123.45, quoteDataBean.getChange(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OTAo0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OTAo0_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals(123.45, quoteDataBean.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithInvalidSymbol_ZLTH1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("INVALID");
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithNullSymbol_vpwn2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote(null);
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_lckK0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertNotNull(quote);
    assertEquals("ABC", quote.getSymbol());
    assertEquals("Company ABC", quote.getCompanyName());
    assertEquals(new BigDecimal(10.0), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_lckK0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals("Company ABC", quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_lckK0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_lckK0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertNotNull(quote);
    assertEquals("ABC", quote.getSymbol());
    assertEquals("Company ABC", quote.getCompanyName());
    assertEquals(new BigDecimal(10.0), quote.getPrice());
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_BcDJ1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertNotNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_BcDJ1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("null", "Company ABC", new BigDecimal(10.0));
    assertEquals("Company ABC", quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_BcDJ1_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertNotNull(quote);
    assertEquals("Company ABC", quote.getSymbol());
    assertEquals(new BigDecimal(10.0), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_BcDJ1_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("null", "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_BcDJ1_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_BcDJ1_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("null", "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_BcDJ1_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertNotNull(quote);
    assertEquals("Company ABC", quote.getCompanyName());
    assertEquals(new BigDecimal(10.0), quote.getPrice());
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_gcFy2_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "XYZ", new BigDecimal(10.0));
    assertEquals("ABC", quote.getSymbol());
    assertEquals("XYZ", quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_gcFy2_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertNotNull(quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_gcFy2_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "XYZ", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_gcFy2_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_gcFy2_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_gcFy2_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertEquals(null, quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_zVHB3_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", BigDecimal.ZERO);
    assertEquals("ABC", quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_zVHB3_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertEquals("Company ABC", quote.getCompanyName());
    assertNull(quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_zVHB3_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertNotNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_zVHB3_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", BigDecimal.ZERO);
    assertEquals(BigDecimal.ZERO, quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_zVHB3_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", BigDecimal.ZERO);
    assertEquals(BigDecimal.ZERO, quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_zVHB3_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertNotNull(quote);
    assertEquals(new BigDecimal(0), quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_zVHB3_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertEquals(null, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithZeroPrice_jNbr4_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(0));
    assertNotNull(quote);
    assertEquals("ABC", quote.getSymbol());
    assertEquals("Company ABC", quote.getCompanyName());
    assertEquals(new BigDecimal(0), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithZeroPrice_jNbr4_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(0));
    assertEquals(new BigDecimal(0), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithZeroPrice_jNbr4_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(0));
    assertNotNull(quote);
    assertEquals(new BigDecimal(0), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithZeroPrice_jNbr4_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(0));
    assertEquals(new BigDecimal(0), quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithZeroPrice_jNbr4_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(0));
    assertEquals(0, quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_sazI0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("testUserID");
    accountProfileDataBean.setPassword("testPassword");
    accountProfileDataBean.setFullName("testFullName");
    accountProfileDataBean.setCreditCard("testCreditCard");
    accountProfileDataBean.setEmail("testEmail");
    AccountProfileDataBean updatedAccountProfileDataBean = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    assertEquals(accountProfileDataBean.getUserID(), updatedAccountProfileDataBean.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_sazI0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("testUserID");
    accountProfileDataBean.setPassword("testPassword");
    accountProfileDataBean.setFullName("testFullName");
    accountProfileDataBean.setCreditCard("testCreditCard");
    accountProfileDataBean.setEmail("testEmail");
    AccountProfileDataBean updatedAccountProfileDataBean = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    assertEquals(accountProfileDataBean.getPassword(), updatedAccountProfileDataBean.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_sazI0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("testUserID");
    accountProfileDataBean.setPassword("testPassword");
    accountProfileDataBean.setFullName("testFullName");
    accountProfileDataBean.setCreditCard("testCreditCard");
    accountProfileDataBean.setEmail("testEmail");
    AccountProfileDataBean updatedAccountProfileDataBean = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    assertEquals(accountProfileDataBean.getFullName(), updatedAccountProfileDataBean.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_sazI0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("testUserID");
    accountProfileDataBean.setPassword("testPassword");
    accountProfileDataBean.setFullName("testFullName");
    accountProfileDataBean.setCreditCard("testCreditCard");
    accountProfileDataBean.setEmail("testEmail");
    AccountProfileDataBean updatedAccountProfileDataBean = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    assertEquals(accountProfileDataBean.getCreditCard(), updatedAccountProfileDataBean.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_sazI0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("testUserID");
    accountProfileDataBean.setPassword("testPassword");
    accountProfileDataBean.setFullName("testFullName");
    accountProfileDataBean.setCreditCard("testCreditCard");
    accountProfileDataBean.setEmail("testEmail");
    AccountProfileDataBean updatedAccountProfileDataBean = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    assertEquals(accountProfileDataBean.getEmail(), updatedAccountProfileDataBean.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_JBiX0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    profile.setUserID("test_user");
    account.setProfileID(profile.getUserID());
    when(entityManager.find(AccountProfileDataBean.class, "test_user")).thenReturn(profile);
    when(profile.getAccount()).thenReturn(account);
    AccountDataBean result = tradeSLSBBean.getAccountData("test_user");
    assertEquals(account, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountDataWithNullProfile_WMhy1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = null;
    AccountDataBean account = new AccountDataBean();
    when(entityManager.find(AccountProfileDataBean.class, "test_user")).thenReturn(profile);
    AccountDataBean result = tradeSLSBBean.getAccountData("test_user");
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountDataWithNullAccount_DnAz2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = null;
    profile.setUserID("test_user");
    when(entityManager.find(AccountProfileDataBean.class, "test_user")).thenReturn(profile);
    when(profile.getAccount()).thenReturn(account);
    AccountDataBean result = tradeSLSBBean.getAccountData("test_user");
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_CUFs0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_CUFs0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean);
    assertEquals("password", accountProfileDataBean.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_CUFs0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean);
    assertEquals("creditCard", accountProfileDataBean.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInvalidUserID_gtCV1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("invalidUserID");
    assertNull(accountProfileDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullUserID_vuzP2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData(null);
    assertNull(accountProfileDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void tearDown_ONnZ1() {
    entityManager.close();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_invalidUserID_swUS1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalid_user";
    String symbol = "GOOG";
    double quantity = 10.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid user ID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_invalidSymbol_CBjz2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "test_user";
    String symbol = "INVALID";
    double quantity = 10.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid symbol", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_invalidQuantity_WRJC3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "test_user";
    String symbol = "GOOG";
    double quantity = -10.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid quantity", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithInvalidUserID_eHoG1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalidUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithInvalidHoldingID_nLgV2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = -1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithInvalidOrderProcessingMode_xjhq3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = -1;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithNullInputs_KjOK4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Integer holdingID = null;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithInvalidHoldingID_eath1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(null);
    assertNull(holdingDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_withTwoPhase_GwsD0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_withoutTwoPhase_SWbV1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = false;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_withInvalidOrderID_PyVp2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = -1;
    boolean twoPhase = true;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_withNullOrderID_VQRF3() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = null;
    boolean twoPhase = true;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_empty_gaEg0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("");
    assertEquals(0, closedOrders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_nonEmpty_OTmB1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("user1");
    assertNotNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testbuy_MxMb0() throws Exception {
    tradeslsbbean = new TradeSLSBBean();
    entityManager = mock(EntityManager.class);
    String userID = "testUser";
    String symbol = "testSymbol";
    double quantity = 100.0;
    int orderProcessingMode = 1;
    AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
    AccountDataBean account = mock(AccountDataBean.class);
    QuoteDataBean quote = mock(QuoteDataBean.class);
    HoldingDataBean holding = mock(HoldingDataBean.class);
    OrderDataBean order = mock(OrderDataBean.class);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    when(profile.getAccount()).thenReturn(account);
    when(entityManager.find(QuoteDataBean.class, symbol)).thenReturn(quote);
    when(quote.getPrice()).thenReturn(BigDecimal.valueOf(100.0));
    when(quote.getPrice()).thenReturn(BigDecimal.valueOf(100.0));
    when(order.getOrderFee()).thenReturn(BigDecimal.valueOf(10.0));
    when(account.getBalance()).thenReturn(BigDecimal.valueOf(1000.0));
    when(order.getOrderID()).thenReturn(1);
    tradeslsbbean.buy(userID, symbol, quantity, orderProcessingMode);
    verify(entityManager, times(1)).find(AccountProfileDataBean.class, userID);
    verify(profile, times(1)).getAccount();
    verify(entityManager, times(1)).find(QuoteDataBean.class, symbol);
    verify(quote, times(1)).getPrice();
    verify(quote, times(1)).getPrice();
    verify(order, times(1)).getOrderFee();
    verify(account, times(1)).getBalance();
    verify(order, times(1)).getOrderID();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_Wppj0_PcnQ0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_Wppj0_PcnQ0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getOpenTSIA(), new BigDecimal(10000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_Wppj0_PcnQ0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getGainPercent(), new BigDecimal(10));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_Wppj0_PcnQ0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertEquals(marketSummaryDataBean.getSummaryDate(), new java.util.Date());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_Wppj0_PcnQ0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getTSIA(), new BigDecimal(10000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_Wppj0_PcnQ0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertEquals(10000, marketSummaryDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_Wppj0_PcnQ0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertEquals(10, marketSummaryDataBean.getTopGainers().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_Wppj0_PcnQ0_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertEquals(10, marketSummaryDataBean.getTopLosers().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginSuccess_ZTSJ0_fdoi0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    profile.setAccount(account);
    String userID = "testUser";
    String password = "testPassword";
    AccountDataBean result = null;
    try {
      result = tradeSLSBBean.login(userID, password);
    } catch (RollbackException e) {
      e.printStackTrace();
    }
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailure_phwo1_ixQA0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    profile.setAccount(account);
    String userID = "testUser";
    String password = "wrongPassword";
    try {
      tradeSLSBBean.login(userID, password);
      fail("Expected EJBException");
    } catch (EJBException e) {
      assertEquals("No such user: " + userID, e.getMessage());
    } catch (RollbackException e) {
      fail("Unexpected RollbackException");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnWithZeroInvestment_skfR1_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 0.0;
    double netValue = 1000.0;
    double ir = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(0.0, ir, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnWithZeroNetValue_eWZx2_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 1000.0;
    double netValue = 0.0;
    double ir = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(0.0, ir, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnWithNegativeInvestment_rkMP3_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = -1000.0;
    double netValue = 1000.0;
    double ir = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(-0.1, ir, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnWithNegativeNetValue_tKoN4_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 1000.0;
    double netValue = -1000.0;
    double ir = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(-0.1, ir, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnWithZeroInvestmentAndNetValue_OsKE5() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 0.0;
    double netValue = 0.0;
    double ir = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(0.0, ir, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_CZtK0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(0, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_CZtK0_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(0, account.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_CZtK0_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_CZtK0_5_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new BigDecimal(1000), account.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_CZtK0_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new BigDecimal(1000), account.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_CZtK0_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("user1", account.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(0, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(0, account.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2_5_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new BigDecimal(1000), account.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new BigDecimal(1000), account.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("user1", account.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2_14_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("user2", account.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2_21_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("user3", account.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_dIoq0_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "test_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    HoldingDataBean holdingDataBean = holdings.iterator().next();
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_dIoq0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "test_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    HoldingDataBean holdingDataBean = holdings.iterator().next();
    assertEquals(1, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_FPdy2_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithZeroSharesTraded_oWNn3_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 0;
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertEquals(new BigDecimal(1.5), updatedQuote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithZeroSharesTraded_oWNn3_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 0;
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertEquals(new BigDecimal(1.5), updatedQuote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithInvalidUserID_DtHx1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("invalid_user_id");
    assertNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullUserID_wUjs2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(null);
    assertNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithEmptyUserID_WqGX3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("");
    assertNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNonExistentUserID_fvDO4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("non_existent_user_id");
    assertNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithDifferentUserID_PUnd6_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("different_user_id");
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithDifferentUserID_PUnd6_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("different_user_id");
    assertEquals(orders.size(), 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithDifferentUserID_PUnd6_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("different_user_id");
    assertEquals(orders.iterator().next().getOrderID(), "1");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithDifferentAccountID_KPNB8_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("different_account_id");
    assertEquals(orders.size(), 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OTAo0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OTAo0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OTAo0_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OTAo0_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OTAo0_5_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OTAo0_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals(123.45, quoteDataBean.getChange(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OTAo0_8_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals(123.45, quoteDataBean.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_lckK0_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals("ABC", quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_lckK0_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_lckK0_5_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_lckK0_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_lckK0_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_BcDJ1_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertNull(quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_BcDJ1_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertEquals("Company ABC", quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_BcDJ1_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_BcDJ1_5_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_BcDJ1_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_BcDJ1_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_gcFy2_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertEquals("ABC", quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_gcFy2_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertNull(quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_gcFy2_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_gcFy2_5_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_gcFy2_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_gcFy2_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_zVHB3_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertEquals("ABC", quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_zVHB3_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertEquals("Company ABC", quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_zVHB3_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertNull(quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_zVHB3_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertEquals(new BigDecimal(0), quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_zVHB3_5_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertEquals(new BigDecimal(0), quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_zVHB3_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertEquals(new BigDecimal(0), quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_zVHB3_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithZeroPrice_jNbr4_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(0));
    assertEquals("ABC", quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithZeroPrice_jNbr4_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(0));
    assertEquals("Company ABC", quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithZeroPrice_jNbr4_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(0));
    assertEquals(new BigDecimal(0), quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithZeroPrice_jNbr4_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(0));
    assertEquals(new BigDecimal(0), quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithZeroPrice_jNbr4_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(0));
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_CUFs0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertEquals("userID", accountProfileDataBean.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_CUFs0_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertEquals("email", accountProfileDataBean.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_CUFs0_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertEquals("password", accountProfileDataBean.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_CUFs0_5_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertEquals("fullName", accountProfileDataBean.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_CUFs0_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertEquals("address", accountProfileDataBean.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_CUFs0_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertEquals("creditCard", accountProfileDataBean.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_CUFs0_8_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertEquals("account", accountProfileDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_empty_gaEg0_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("");
    assertTrue(closedOrders.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_nonEmpty_OTmB1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("user1");
    assertFalse(closedOrders.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_Wppj0_PcnQ0_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getSummaryDate(), new java.util.Date());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_Wppj0_PcnQ0_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getVolume(), 10000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_Wppj0_PcnQ0_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getTopGainers().size(), 10);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_Wppj0_PcnQ0_8_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getTopLosers().size(), 10);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginSuccess_ZTSJ0_fdoi0_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    profile.setAccount(account);
    String userID = "testUser";
    String password = "testPassword";
    AccountDataBean result = null;
    try {
      result = tradeSLSBBean.login(userID, password);
    } catch (RollbackException e) {
      e.printStackTrace();
    }
    assertEquals(account, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_ValidSymbol_rhKE0_XUYz0_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      QuoteDataBean quoteData = tradeSLSBBean.pingTwoPhase("GOOG");
      assertNotNull(quoteData);
      assertEquals("GOOG", quoteData.getSymbol());
      assertNotNull(quoteData.getPrice());
      assertNotNull(quoteData.getOpen());
      assertNotNull(quoteData.getLow());
      assertNotNull(quoteData.getHigh());
      assertNotNull(quoteData.getVolume());
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_CZtK0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals(0, account.getLoginCount());
    assertEquals(0, account.getLogoutCount());
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getCreationDate());
    assertEquals(new BigDecimal(1000), account.getBalance());
    assertEquals(new BigDecimal(1000), account.getOpenBalance());
    assertEquals("user1", account.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithAllScenarios_BoYB2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals(0, account.getLoginCount());
    assertEquals(0, account.getLogoutCount());
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getCreationDate());
    assertEquals(new BigDecimal(1000), account.getBalance());
    assertEquals(new BigDecimal(1000), account.getOpenBalance());
    assertEquals("user1", account.getProfileID());
    account = tradeSLSBBean.register("user2", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals(0, account.getLoginCount());
    assertEquals(0, account.getLogoutCount());
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getCreationDate());
    assertEquals(new BigDecimal(1000), account.getBalance());
    assertEquals(new BigDecimal(1000), account.getOpenBalance());
    assertEquals("user2", account.getProfileID());
    account = tradeSLSBBean.register("user3", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals(0, account.getLoginCount());
    assertEquals(0, account.getLogoutCount());
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getCreationDate());
    assertEquals(new BigDecimal(1000), account.getBalance());
    assertEquals(new BigDecimal(1000), account.getOpenBalance());
    assertEquals("user3", account.getProfileID());
    account = tradeSLSBBean.register("user4", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_dIoq0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "test_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
    assertEquals(1, holdings.size());
    HoldingDataBean holdingDataBean = holdings.iterator().next();
    assertEquals(userID, holdingDataBean.getAccount().getProfile().getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_SnLS1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalid_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_FPdy2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_sOHk0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 100;
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertEquals(new BigDecimal(1.5), updatedQuote.getPrice());
    assertEquals(new BigDecimal(1.5), updatedQuote.getOpen());
    assertEquals(100, updatedQuote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithZeroSharesTraded_oWNn3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 0;
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertEquals(new BigDecimal(1.5), updatedQuote.getPrice());
    assertEquals(new BigDecimal(1.5), updatedQuote.getOpen());
    assertEquals(0, updatedQuote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_Ntfw0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(profile.getUserID());
    assertNotNull(orders);
    assertEquals(orders.size(), 1);
    assertEquals(orders.iterator().next().getOrderID(), "1");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithMultipleOrders_xaXS5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(profile.getUserID());
    assertNotNull(orders);
    assertEquals(orders.size(), 2);
    assertEquals(orders.iterator().next().getOrderID(), "1");
    assertEquals(orders.iterator().next().getOrderID(), "2");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithDifferentUserID_PUnd6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("different_user_id");
    assertNotNull(orders);
    assertEquals(orders.size(), 1);
    assertEquals(orders.iterator().next().getOrderID(), "1");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithDifferentAccountID_KPNB8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("different_account_id");
    assertNotNull(orders);
    assertEquals(orders.size(), 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OTAo0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals("AAPL", quoteDataBean.getSymbol());
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getPrice());
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getOpen());
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getLow());
    assertEquals(123.45, quoteDataBean.getChange(), 0.001);
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getHigh());
    assertEquals(123.45, quoteDataBean.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_lckK0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals("ABC", quote.getSymbol());
    assertEquals("Company ABC", quote.getCompanyName());
    assertEquals(new BigDecimal(10.0), quote.getPrice());
    assertEquals(new BigDecimal(10.0), quote.getOpen());
    assertEquals(new BigDecimal(10.0), quote.getLow());
    assertEquals(new BigDecimal(10.0), quote.getHigh());
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_BcDJ1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertNull(quote.getSymbol());
    assertEquals("Company ABC", quote.getCompanyName());
    assertEquals(new BigDecimal(10.0), quote.getPrice());
    assertEquals(new BigDecimal(10.0), quote.getOpen());
    assertEquals(new BigDecimal(10.0), quote.getLow());
    assertEquals(new BigDecimal(10.0), quote.getHigh());
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_gcFy2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertEquals("ABC", quote.getSymbol());
    assertNull(quote.getCompanyName());
    assertEquals(new BigDecimal(10.0), quote.getPrice());
    assertEquals(new BigDecimal(10.0), quote.getOpen());
    assertEquals(new BigDecimal(10.0), quote.getLow());
    assertEquals(new BigDecimal(10.0), quote.getHigh());
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_zVHB3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertEquals("ABC", quote.getSymbol());
    assertEquals("Company ABC", quote.getCompanyName());
    assertNull(quote.getPrice());
    assertEquals(new BigDecimal(0), quote.getOpen());
    assertEquals(new BigDecimal(0), quote.getLow());
    assertEquals(new BigDecimal(0), quote.getHigh());
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithZeroPrice_jNbr4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(0));
    assertEquals("ABC", quote.getSymbol());
    assertEquals("Company ABC", quote.getCompanyName());
    assertEquals(new BigDecimal(0), quote.getPrice());
    assertEquals(new BigDecimal(0), quote.getOpen());
    assertEquals(new BigDecimal(0), quote.getLow());
    assertEquals(new BigDecimal(0), quote.getHigh());
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_sazI0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("testUserID");
    accountProfileDataBean.setPassword("testPassword");
    accountProfileDataBean.setFullName("testFullName");
    accountProfileDataBean.setCreditCard("testCreditCard");
    accountProfileDataBean.setEmail("testEmail");
    AccountProfileDataBean updatedAccountProfileDataBean = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    assertEquals(accountProfileDataBean.getUserID(), updatedAccountProfileDataBean.getUserID());
    assertEquals(accountProfileDataBean.getPassword(), updatedAccountProfileDataBean.getPassword());
    assertEquals(accountProfileDataBean.getFullName(), updatedAccountProfileDataBean.getFullName());
    assertEquals(accountProfileDataBean.getCreditCard(), updatedAccountProfileDataBean.getCreditCard());
    assertEquals(accountProfileDataBean.getEmail(), updatedAccountProfileDataBean.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_CUFs0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean);
    assertEquals("userID", accountProfileDataBean.getUserID());
    assertEquals("email", accountProfileDataBean.getEmail());
    assertEquals("password", accountProfileDataBean.getPassword());
    assertEquals("fullName", accountProfileDataBean.getFullName());
    assertEquals("address", accountProfileDataBean.getAddress());
    assertEquals("creditCard", accountProfileDataBean.getCreditCard());
    assertEquals("account", accountProfileDataBean.getAccount());
  }
}