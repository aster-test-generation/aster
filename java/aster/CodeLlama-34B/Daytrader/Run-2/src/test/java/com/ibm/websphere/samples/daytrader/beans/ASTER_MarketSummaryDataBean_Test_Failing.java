/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.json.JsonObject;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenTSIA_NullOpenTSIA_NNTS1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, new BigDecimal(50), 1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    BigDecimal openTSIA = marketSummaryDataBean.getOpenTSIA();
    assertEquals(null, openTSIA);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent_TSIAAndOpenTSIAAreNull_NaaT0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, null, 0, null, null);
    BigDecimal gainPercent = marketSummaryDataBean.getGainPercent();
    assertNull(gainPercent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent_TSIAIsNullAndOpenTSIAIsNotNull_hjRp2() {
    BigDecimal openTSIA = new BigDecimal(50);
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, openTSIA, 0, null, null);
    BigDecimal gainPercent = marketSummaryDataBean.getGainPercent();
    assertNull(gainPercent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_dKKP0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1000), new BigDecimal(900), 1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    String expected = "\n\tMarket Summary at: " + marketSummaryDataBean.getSummaryDate() + "\n\t\t        TSIA:" + marketSummaryDataBean.getTSIA() + "\n\t\t    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "\n\t\t        gain:" + marketSummaryDataBean.getGainPercent() + "\n\t\t      volume:" + marketSummaryDataBean.getVolume();
    assertEquals(expected, marketSummaryDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryDateWithNullTSIA_VtxV1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, new BigDecimal(1000), 1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    Date summaryDate = marketSummaryDataBean.getSummaryDate();
    assertNull(summaryDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryDateWithNullOpenTSIA_fGKL2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1000), null, 1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    Date summaryDate = marketSummaryDataBean.getSummaryDate();
    assertNull(summaryDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryDateWithNullTopGainers_QHLu4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1000), new BigDecimal(1000), 1000, null, new ArrayList<QuoteDataBean>());
    Date summaryDate = marketSummaryDataBean.getSummaryDate();
    assertNull(summaryDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryDateWithNullTopLosers_AymF5() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1000), new BigDecimal(1000), 1000, new ArrayList<QuoteDataBean>(), null);
    Date summaryDate = marketSummaryDataBean.getSummaryDate();
    assertNull(summaryDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTSIAWithZeroVolume_Fuws1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(50), 0, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    BigDecimal tsiA = marketSummaryDataBean.getTSIA();
    assertEquals(new BigDecimal(0), tsiA);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTSIAWithNegativeVolume_lLoA2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(50), -1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    BigDecimal tsiA = marketSummaryDataBean.getTSIA();
    assertEquals(new BigDecimal(-1000), tsiA);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToJSON_RNRR0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1000), new BigDecimal(1000), 1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
    assertEquals(1000, jsonObject.getInt("tsia"));
    assertEquals(1000, jsonObject.getInt("volume"));
    assertEquals("2023-02-28", jsonObject.getString("date"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTSIA_TyrR1_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    marketSummaryDataBean.setTSIA(new BigDecimal(200));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(300));
    marketSummaryDataBean.setTSIA(new BigDecimal(400));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(500));
    marketSummaryDataBean.setTSIA(new BigDecimal(600));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(700));
    marketSummaryDataBean.setTSIA(new BigDecimal(800));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(900));
    marketSummaryDataBean.setTSIA(new BigDecimal(1000));
    marketSummaryDataBean.setTSIA(null);
    assertEquals(new BigDecimal(200), marketSummaryDataBean.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTSIA_TyrR1_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    marketSummaryDataBean.setTSIA(new BigDecimal(200));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(300));
    marketSummaryDataBean.setTSIA(new BigDecimal(400));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(500));
    marketSummaryDataBean.setTSIA(new BigDecimal(600));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(700));
    marketSummaryDataBean.setTSIA(new BigDecimal(800));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(900));
    marketSummaryDataBean.setTSIA(new BigDecimal(1000));
    marketSummaryDataBean.setTSIA(null);
    assertEquals(new BigDecimal(300), marketSummaryDataBean.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTSIA_TyrR1_4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    marketSummaryDataBean.setTSIA(new BigDecimal(200));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(300));
    marketSummaryDataBean.setTSIA(new BigDecimal(400));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(500));
    marketSummaryDataBean.setTSIA(new BigDecimal(600));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(700));
    marketSummaryDataBean.setTSIA(new BigDecimal(800));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(900));
    marketSummaryDataBean.setTSIA(new BigDecimal(1000));
    marketSummaryDataBean.setTSIA(null);
    assertEquals(new BigDecimal(400), marketSummaryDataBean.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTSIA_TyrR1_6() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    marketSummaryDataBean.setTSIA(new BigDecimal(200));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(300));
    marketSummaryDataBean.setTSIA(new BigDecimal(400));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(500));
    marketSummaryDataBean.setTSIA(new BigDecimal(600));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(700));
    marketSummaryDataBean.setTSIA(new BigDecimal(800));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(900));
    marketSummaryDataBean.setTSIA(new BigDecimal(1000));
    marketSummaryDataBean.setTSIA(null);
    assertEquals(new BigDecimal(500), marketSummaryDataBean.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTSIA_TyrR1_7() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    marketSummaryDataBean.setTSIA(new BigDecimal(200));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(300));
    marketSummaryDataBean.setTSIA(new BigDecimal(400));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(500));
    marketSummaryDataBean.setTSIA(new BigDecimal(600));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(700));
    marketSummaryDataBean.setTSIA(new BigDecimal(800));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(900));
    marketSummaryDataBean.setTSIA(new BigDecimal(1000));
    marketSummaryDataBean.setTSIA(null);
    assertEquals(new BigDecimal(600), marketSummaryDataBean.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTSIA_TyrR1_9() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    marketSummaryDataBean.setTSIA(new BigDecimal(200));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(300));
    marketSummaryDataBean.setTSIA(new BigDecimal(400));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(500));
    marketSummaryDataBean.setTSIA(new BigDecimal(600));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(700));
    marketSummaryDataBean.setTSIA(new BigDecimal(800));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(900));
    marketSummaryDataBean.setTSIA(new BigDecimal(1000));
    marketSummaryDataBean.setTSIA(null);
    assertEquals(new BigDecimal(700), marketSummaryDataBean.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTSIA_TyrR1_10() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    marketSummaryDataBean.setTSIA(new BigDecimal(200));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(300));
    marketSummaryDataBean.setTSIA(new BigDecimal(400));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(500));
    marketSummaryDataBean.setTSIA(new BigDecimal(600));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(700));
    marketSummaryDataBean.setTSIA(new BigDecimal(800));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(900));
    marketSummaryDataBean.setTSIA(new BigDecimal(1000));
    marketSummaryDataBean.setTSIA(null);
    assertEquals(new BigDecimal(800), marketSummaryDataBean.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTSIA_TyrR1_12() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    marketSummaryDataBean.setTSIA(new BigDecimal(200));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(300));
    marketSummaryDataBean.setTSIA(new BigDecimal(400));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(500));
    marketSummaryDataBean.setTSIA(new BigDecimal(600));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(700));
    marketSummaryDataBean.setTSIA(new BigDecimal(800));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(900));
    marketSummaryDataBean.setTSIA(new BigDecimal(1000));
    marketSummaryDataBean.setTSIA(null);
    assertEquals(new BigDecimal(900), marketSummaryDataBean.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTSIA_TyrR1_13() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    marketSummaryDataBean.setTSIA(new BigDecimal(200));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(300));
    marketSummaryDataBean.setTSIA(new BigDecimal(400));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(500));
    marketSummaryDataBean.setTSIA(new BigDecimal(600));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(700));
    marketSummaryDataBean.setTSIA(new BigDecimal(800));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(900));
    marketSummaryDataBean.setTSIA(new BigDecimal(1000));
    marketSummaryDataBean.setTSIA(null);
    assertEquals(new BigDecimal(1000), marketSummaryDataBean.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToJSON_RNRR0_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1000), new BigDecimal(1000), 1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
    assertEquals(1000, jsonObject.getInt("tsia"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToJSON_RNRR0_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1000), new BigDecimal(1000), 1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
    assertEquals(1000, jsonObject.getInt("volume"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToJSON_RNRR0_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1000), new BigDecimal(1000), 1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    JsonObject jsonObject = marketSummaryDataBean.toJSON();
    assertEquals("2023-02-28", jsonObject.getString("date"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryDateWithNullVolume_SYWV3_wBfe0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1000), new BigDecimal(1000), 0.0, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    Date summaryDate = marketSummaryDataBean.getSummaryDate();
    assertNull(summaryDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVolumeWithNullVolume_gacL3_tJHQ0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1000), new BigDecimal(1000), 0.0, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    assertNull(marketSummaryDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenTSIA_NullOpenTSIA_NNTS1_fid2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, new BigDecimal(50), 1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    BigDecimal openTSIA = marketSummaryDataBean.getOpenTSIA();
    assertNull(openTSIA);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent_TSIAIsNullAndOpenTSIAIsNotNull_hjRp2_fid2() {
    BigDecimal openTSIA = new BigDecimal(50);
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, openTSIA, 0, null, null);
    BigDecimal gainPercent = marketSummaryDataBean.getGainPercent();
    assertEquals(BigDecimal.ZERO, gainPercent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTSIA_TyrR1_1_fid2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    marketSummaryDataBean.setTSIA(new BigDecimal(200));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(300));
    marketSummaryDataBean.setTSIA(new BigDecimal(400));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(500));
    marketSummaryDataBean.setTSIA(new BigDecimal(600));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(700));
    marketSummaryDataBean.setTSIA(new BigDecimal(800));
    marketSummaryDataBean.setTSIA(null);
    marketSummaryDataBean.setTSIA(new BigDecimal(900));
    marketSummaryDataBean.setTSIA(new BigDecimal(1000));
    marketSummaryDataBean.setTSIA(null);
    assertNull(new BigDecimal(200));
  }
}