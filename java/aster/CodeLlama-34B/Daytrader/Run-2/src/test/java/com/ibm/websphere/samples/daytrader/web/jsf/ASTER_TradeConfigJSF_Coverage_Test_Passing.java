/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirectDBUtils;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfigJSF_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPopulateDatabase_gXyE0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String result = tradeConfigJSF.populateDatabase();
    Assertions.assertEquals("database", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuildDB_InZe1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    try {
      tradeConfigJSF.dbUtils.buildDB(new java.io.PrintWriter(System.out), null);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  public void testBuildDatabaseTables_VGSb0() throws Exception {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String result = tradeConfigJSF.buildDatabaseTables();
    assertEquals("database", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERS_lDou2_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int maxUsers = TradeConfig.getMAX_USERS();
    Assertions.assertEquals(15000, maxUsers);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_QUOTES_DHrD3_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int maxQuotes = TradeConfig.getMAX_QUOTES();
    Assertions.assertEquals(10000, maxQuotes);
  }
}