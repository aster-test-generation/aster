/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.AsyncContext;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_PingManagedExecutor_Coverage_Test_Failing {
  private HttpServletResponse response;
  private ServletConfig config;
  private PingManagedExecutor executor;
  private ServletOutputStream out;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithException_ZcYK1() throws ServletException, IOException {
    PingManagedExecutor pingManagedExecutor = new PingManagedExecutor();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    AsyncContext asyncContext = mock(AsyncContext.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(req.startAsync()).thenThrow(new ServletException());
    try {
      pingManagedExecutor.doGet(req, res);
    } catch (ServletException e) {
      assertTrue(e.getMessage().contains("Error in doGet"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithIOException_Wajr2() throws ServletException, IOException {
    PingManagedExecutor pingManagedExecutor = new PingManagedExecutor();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    AsyncContext asyncContext = mock(AsyncContext.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(req.startAsync()).thenReturn(asyncContext);
    when(res.getOutputStream()).thenThrow(new IOException());
    try {
      pingManagedExecutor.doGet(req, res);
    } catch (IOException e) {
      assertTrue(e.getMessage().contains("Error in doGet"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_tFir0() {
    PingManagedExecutor executor = new PingManagedExecutor();
    String actual = executor.getServletInfo();
    String expected = "Tests a ManagedExecutor";
    assertEquals(expected, actual);
  }
}