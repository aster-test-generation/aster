/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.jms.JMSException;
import javax.transaction.UserTransaction;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Failing {
  private static final String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";
  private static final String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
  private static final String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
  private ManagedExecutorService mes;
  private static final String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";
  private static final String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
  private static BigDecimal ZERO = new BigDecimal(0.0);
  private static String getAllQuotesSQL = "select * from quoteejb q";
  private boolean inSession = false;
  private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
  private static String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
  private  UserTransaction txn;
  private static long nextMarketSummary = System.currentTimeMillis();
  private static final Integer marketSummaryLock = new Integer(0);
  private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRecreateDBTables_Exception_Vvyr2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[]{"DROP TABLE IF EXISTS trade", "CREATE TABLE trade (id INTEGER PRIMARY KEY, name VARCHAR(255))"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
      tradeDirect.recreateDBTables(sqlBuffer, out);
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertTrue(e instanceof SQLException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRecreateDBTables_Exception_oxXa2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[]{"DROP TABLE IF EXISTS trade"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
      tradeDirect.recreateDBTables(sqlBuffer, out);
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertTrue(e instanceof SQLException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_1_pMvU0() {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = 10.0;
    double rnd2 = 20.0;
    double expectedReturn = 30.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_2_RVRN1() {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = 10.0;
    double rnd2 = 0.0;
    double expectedReturn = 10.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_3_WyXW2() {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = 0.0;
    double rnd2 = 20.0;
    double expectedReturn = 0.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_4_PgJF3() {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = -10.0;
    double rnd2 = 20.0;
    double expectedReturn = 20.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_5_HYax4() {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = 10.0;
    double rnd2 = -20.0;
    double expectedReturn = -30.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_6_ubmq5() {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = -10.0;
    double rnd2 = -20.0;
    double expectedReturn = -30.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_7_DIrW6() {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = 10.0;
    double rnd2 = 0.0;
    double expectedReturn = 0.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_9_fOKM8() {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = -10.0;
    double rnd2 = 0.0;
    double expectedReturn = 0.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_YVkr0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    assertNotNull(quotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_YVkr0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    assertNotNull(quotes);
    assertEquals(100, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_xbWa0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    assertNotNull(quotes);
    assertEquals(10, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_orderID_null_PxUG0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      OrderDataBean orderData = tradeDirect.completeOrder(null, false);
      assertNull(orderData);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_orderID_invalid_OoJy1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      OrderDataBean orderData = tradeDirect.completeOrder(0, false);
      assertNull(orderData);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_orderID_valid_ypSe2() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      OrderDataBean orderData = tradeDirect.completeOrder(1, false);
      assertNotNull(orderData);
      assertEquals(1, orderData.getOrderID().intValue());
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_orderStatus_completed_tDGe9() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      OrderDataBean orderData = tradeDirect.completeOrder(1, false);
      assertNotNull(orderData);
      assertEquals("completed", orderData.getOrderStatus());
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_TcKk0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_TcKk0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_TcKk0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_TcKk0_11() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData);
    assertEquals(1, accountData.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_TcKk0_12() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData);
    assertEquals(0, accountData.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_JJtm0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData);
    assertEquals(1, accountData.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_JJtm0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData);
    assertEquals(new BigDecimal(100.0), accountData.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_JJtm0_8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertEquals(new BigDecimal(100.0), accountData.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_JJtm0_9() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData);
    assertEquals("user1", accountData.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RCCz0_1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertNotNull(quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RCCz0_2() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RCCz0_3() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertNotNull(quoteDataBean);
    assertTrue(quoteDataBean.getPrice().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RCCz0_4() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertNotNull(quoteDataBean);
    assertTrue(quoteDataBean.getOpen().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RCCz0_5() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertNotNull(quoteDataBean);
    assertTrue(quoteDataBean.getLow().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RCCz0_6() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertNotNull(quoteDataBean);
    assertTrue(quoteDataBean.getHigh().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RCCz0_7() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertNotNull(quoteDataBean);
    assertTrue(quoteDataBean.getVolume() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseWithInvalidSymbol_AggE1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("INVALID");
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseWithNullSymbol_OYXS2() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase(null);
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseWithEmptySymbol_rhnh3() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("");
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseWithInvalidPrice_fava4_1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseWithNullPrice_MyMO5_1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertNotNull(quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_inSession_mRoB0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    Future<OrderDataBean> future = tradeDirect.completeOrderAsync(1, true);
    assertNotNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_inSession_mRoB0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    Future<OrderDataBean> future = tradeDirect.completeOrderAsync(1, true);
    assertTrue(future.isDone());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_inSession_mRoB0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    Future<OrderDataBean> future = tradeDirect.completeOrderAsync(1, true);
    assertEquals(1, future.get().getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_notInSession_jBZJ1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(false);
    Future<OrderDataBean> future = tradeDirect.completeOrderAsync(1, true);
    assertNotNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_HpUI0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user1");
    for (HoldingDataBean holdingDataBean : holdingDataBeans) {
      assertNotNull(holdingDataBean);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_HpUI0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user1");
    for (HoldingDataBean holdingDataBean : holdingDataBeans) {
      assertNotNull(holdingDataBean);
    }
    assertEquals(5, holdingDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_tLiE1_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("invalidUserID");
    assertNotNull(holdingDataBeans);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRecreateDBTables_Success_NZVb0_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[]{"DROP TABLE IF EXISTS trade"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
    assertTrue(success);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_4_PgJF3_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = -10.0;
    double rnd2 = 20.0;
    double expectedReturn = -30.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_6_ubmq5_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = -10.0;
    double rnd2 = -20.0;
    double expectedReturn = 30.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_9_fOKM8_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = -10.0;
    double rnd2 = 0.0;
    double expectedReturn = -10.0;
    double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_YVkr0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    assertEquals(100, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithException_sCsa1_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    PreparedStatement stmt = mock(PreparedStatement.class);
    ResultSet rs = mock(ResultSet.class);
    when(conn.prepareStatement(anyString())).thenReturn(stmt);
    when(stmt.executeQuery()).thenReturn(rs);
    when(rs.next()).thenThrow(new SQLException());
    try {
      tradeDirect.getAllQuotes();
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertTrue(e instanceof SQLException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_twoPhase_true_gtyc3() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      OrderDataBean orderData = tradeDirect.completeOrder(1, true);
      assertNotNull(orderData);
      assertEquals(1, orderData.getOrderID().intValue());
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_orderStatus_completed_tDGe9_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      OrderDataBean orderData = tradeDirect.completeOrder(1, false);
      assertNotNull(orderData);
      assertEquals(1, orderData.getOrderID().intValue());
      assertEquals("completed", orderData.getOrderStatus());
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_TcKk0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertEquals(1, accountData.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_TcKk0_3_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_TcKk0_6_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_TcKk0_7_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_TcKk0_8_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_TcKk0_9_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_TcKk0_10_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_TcKk0_11_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertEquals(0, accountData.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_TcKk0_12_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertEquals(0, accountData.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_JJtm0_3_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertEquals(1, accountData.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_JJtm0_4_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertEquals(1, accountData.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_JJtm0_8_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertEquals(new BigDecimal(100.0), accountData.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_JJtm0_9_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertEquals("user1", accountData.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RCCz0_2_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RCCz0_3_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertTrue(quoteDataBean.getPrice().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RCCz0_4_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertTrue(quoteDataBean.getOpen().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RCCz0_5_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertTrue(quoteDataBean.getLow().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RCCz0_6_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertTrue(quoteDataBean.getHigh().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RCCz0_7_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertTrue(quoteDataBean.getVolume() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sell_accountData_null_Rbyb3_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.sell("user1", 1, TradeConfig.SYNCH);
      fail("Expected Exception");
    } catch (Exception e) {
      assertEquals("TradeDirect:sell -- error selling stock -- unable to find:  \n\taccount=null\n\tholding=null\n\tquote=null\nfor user: user1 and holdingID: 1", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_notInSession_jBZJ1_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(false);
    Future<OrderDataBean> future = tradeDirect.completeOrderAsync(1, true);
    assertNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_HpUI0_1_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user1");
    for (HoldingDataBean holdingDataBean : holdingDataBeans) {
    }
    assertNotNull(holdingDataBeans);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_HpUI0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user1");
    for (HoldingDataBean holdingDataBean : holdingDataBeans) {
    }
    assertEquals(5, holdingDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_tLiE1_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("invalidUserID");
    assertEquals(0, holdingDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginException_RvmS2() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.login("user1", null);
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertTrue(e instanceof Exception);
      assertEquals("TradeDirect:Login failure for user: user1\n\tIncorrect password-->user1:null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginNullUserID_wHnb3() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.login(null, "password1");
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertTrue(e instanceof Exception);
      assertEquals("TradeDirect:Login failure for user: null\n\tIncorrect password-->null:password1", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetConnPublic_wqFO0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = tradeDirect.getConnPublic();
    assertNotNull(conn);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetConnPublic_wqFO0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = tradeDirect.getConnPublic();
    assertEquals(conn.getClass(), Connection.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_ugAS0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("0.5");
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_ugAS0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("0.5");
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getPrice().multiply(changeFactor), updatedQuoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_ugAS0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("0.5");
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getOpen().multiply(changeFactor), updatedQuoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_ugAS0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("0.5");
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getLow().multiply(changeFactor), updatedQuoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_ugAS0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("0.5");
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getHigh().multiply(changeFactor), updatedQuoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_ugAS0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("0.5");
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getVolume() + sharesTraded, updatedQuoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_ugAS0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("0.5");
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getChange() + changeFactor.doubleValue(), updatedQuoteDataBean.getChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithNullSymbol_lMdJ1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("0.5");
    double sharesTraded = 1000;
    try {
      tradeDirect.updateQuotePriceVolume(null, changeFactor, sharesTraded);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("Symbol cannot be null or empty", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithZeroChangeFactor_TtQi2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = BigDecimal.ZERO;
    double sharesTraded = 1000;
    try {
      tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Change factor cannot be zero", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithNegativeSharesTraded_opFp3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("0.5");
    double sharesTraded = -1000;
    try {
      tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Shares traded cannot be negative", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_swYu0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNotNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_swYu0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("user1", accountProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_swYu0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("password1", accountProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_swYu0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("fullName1", accountProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_swYu0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("address1", accountProfileData.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_swYu0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("email1", accountProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_swYu0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("creditCard1", accountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullProfileData_UCfL1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = null;
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithInvalidUserID_FfAM2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("invalidUserID", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithInvalidPassword_tIxC3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "invalidPassword", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithInvalidFullName_nhYT4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "invalidFullName", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithInvalidAddress_YuVP5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "invalidAddress", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithInvalidEmail_jseO6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "invalidEmail", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithInvalidCreditCard_oReT7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "invalidCreditCard");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullUserID_HkLy8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean(null, "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_Uqjn0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Test Street");
    accountProfileData.setEmail("test@test.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getUserID(), updatedAccountProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_Uqjn0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Test Street");
    accountProfileData.setEmail("test@test.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getPassword(), updatedAccountProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_Uqjn0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Test Street");
    accountProfileData.setEmail("test@test.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getFullName(), updatedAccountProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_Uqjn0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Test Street");
    accountProfileData.setEmail("test@test.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getAddress(), updatedAccountProfileData.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_Uqjn0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Test Street");
    accountProfileData.setEmail("test@test.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getEmail(), updatedAccountProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_Uqjn0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Test Street");
    accountProfileData.setEmail("test@test.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getCreditCard(), updatedAccountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithInvalidUserID_QeQn1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("invalidUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Test Street");
    accountProfileData.setEmail("test@test.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertNull(updatedAccountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithInvalidPassword_XyOj2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("invalidPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Test Street");
    accountProfileData.setEmail("test@test.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertNull(updatedAccountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithInvalidFullName_pEAK3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Invalid Full Name");
    accountProfileData.setAddress("123 Test Street");
    accountProfileData.setEmail("test@test.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertNull(updatedAccountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithInvalidAddress_ElHa4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("Invalid Address");
    accountProfileData.setEmail("test@test.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertNull(updatedAccountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_VgRn0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData("userID");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_VgRn0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData("userID");
    assertEquals("userID", accountData.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_VgRn0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData("userID");
    assertNotNull(accountData.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_VgRn0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData("userID");
    assertNotNull(accountData.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_VgRn0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData("userID");
    assertNotNull(accountData.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_VgRn0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData("userID");
    assertNotNull(accountData.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_VgRn0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData("userID");
    assertNotNull(accountData.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_VgRn0_8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData("userID");
    assertNotNull(accountData.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_VgRn0_9() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData("userID");
    assertNotNull(accountData.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_VgRn0_10() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData("userID");
    assertNotNull(accountData.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_VgRn0_11() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData("userID");
    assertNotNull(accountData.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountDataWithInvalidUserID_JuXZ1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData("invalidUserID");
    assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountDataWithNullUserID_DAsf2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(null);
    assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountDataWithEmptyUserID_URVY3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData("");
    assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_QpFq0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertNotNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_QpFq0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertEquals("userID", accountProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_QpFq0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertEquals("email", accountProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_QpFq0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertEquals("fullName", accountProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_QpFq0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertEquals("address", accountProfileData.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_QpFq0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertEquals("creditCard", accountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_QpFq0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertEquals("password", accountProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_QpFq0_8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertEquals("account", accountProfileData.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInvalidUserID_YhdV1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("invalidUserID");
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullUserID_Lent2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData(null);
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithEmptyUserID_XMmW3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("");
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_JSXX0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders("user1");
    for (OrderDataBean orderDataBean : orderDataBeans) {
    }
    assertEquals(10, orderDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUser_nUUP1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders("invalidUser");
    assertEquals(0, orderDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Synch_vXdi0_HLuD0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Synch_vXdi0_HLuD0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertEquals("sold", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch_cpBv1_ODgN1_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch_cpBv1_ODgN1_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertEquals("sold", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch2Phase_eIGo2_VnQy2_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch2Phase_eIGo2_VnQy2_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertEquals("sold", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InvalidUserID_KbyY3_GQYQ3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "invalidUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InvalidHoldingID_goVg4_euqw4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    Integer holdingID = -1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InvalidOrderProcessingMode_agqW5_mFgi5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = -1;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_NullUserID_JfyT6_IbGX6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = null;
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_NullHoldingID_xBqn7_tGrX7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    Integer holdingID = null;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_OVNu0_kODI0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    for (QuoteDataBean quote : quotes) {
    }
    assertNotNull(quotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_OVNu0_kODI0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    for (QuoteDataBean quote : quotes) {
    }
    assertEquals(10, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_UDHp1_vvUb0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setQuantity(10.0);
    orderData.setOrderFee(new BigDecimal(1.0));
    orderData.setQuote(new QuoteDataBean());
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setOrderType("sell");
    orderData.setSymbol("IBM");
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    OrderDataBean completedOrder = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getOrderID(), completedOrder.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_UDHp1_vvUb0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setQuantity(10.0);
    orderData.setOrderFee(new BigDecimal(1.0));
    orderData.setQuote(new QuoteDataBean());
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setOrderType("sell");
    orderData.setSymbol("IBM");
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    OrderDataBean completedOrder = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getOrderStatus(), completedOrder.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_UDHp1_vvUb0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setQuantity(10.0);
    orderData.setOrderFee(new BigDecimal(1.0));
    orderData.setQuote(new QuoteDataBean());
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setOrderType("sell");
    orderData.setSymbol("IBM");
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    OrderDataBean completedOrder = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getPrice(), completedOrder.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_UDHp1_vvUb0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setQuantity(10.0);
    orderData.setOrderFee(new BigDecimal(1.0));
    orderData.setQuote(new QuoteDataBean());
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setOrderType("sell");
    orderData.setSymbol("IBM");
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    OrderDataBean completedOrder = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getQuantity(), completedOrder.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_UDHp1_vvUb0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setQuantity(10.0);
    orderData.setOrderFee(new BigDecimal(1.0));
    orderData.setQuote(new QuoteDataBean());
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setOrderType("sell");
    orderData.setSymbol("IBM");
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    OrderDataBean completedOrder = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getOrderFee(), completedOrder.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_UDHp1_vvUb0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setQuantity(10.0);
    orderData.setOrderFee(new BigDecimal(1.0));
    orderData.setQuote(new QuoteDataBean());
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setOrderType("sell");
    orderData.setSymbol("IBM");
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    OrderDataBean completedOrder = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getQuote(), completedOrder.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_UDHp1_vvUb0_8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setQuantity(10.0);
    orderData.setOrderFee(new BigDecimal(1.0));
    orderData.setQuote(new QuoteDataBean());
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setOrderType("sell");
    orderData.setSymbol("IBM");
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    OrderDataBean completedOrder = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getOpenDate(), completedOrder.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_UDHp1_vvUb0_9() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setQuantity(10.0);
    orderData.setOrderFee(new BigDecimal(1.0));
    orderData.setQuote(new QuoteDataBean());
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setOrderType("sell");
    orderData.setSymbol("IBM");
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    OrderDataBean completedOrder = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getCompletionDate(), completedOrder.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_UDHp1_vvUb0_10() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setQuantity(10.0);
    orderData.setOrderFee(new BigDecimal(1.0));
    orderData.setQuote(new QuoteDataBean());
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setOrderType("sell");
    orderData.setSymbol("IBM");
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    OrderDataBean completedOrder = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getOrderType(), completedOrder.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_UDHp1_vvUb0_11() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setQuantity(10.0);
    orderData.setOrderFee(new BigDecimal(1.0));
    orderData.setQuote(new QuoteDataBean());
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setOrderType("sell");
    orderData.setSymbol("IBM");
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    OrderDataBean completedOrder = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getSymbol(), completedOrder.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_UDHp1_vvUb0_12() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setQuantity(10.0);
    orderData.setOrderFee(new BigDecimal(1.0));
    orderData.setQuote(new QuoteDataBean());
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setOrderType("sell");
    orderData.setSymbol("IBM");
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    OrderDataBean completedOrder = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getAccount(), completedOrder.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_UDHp1_vvUb0_13() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setQuantity(10.0);
    orderData.setOrderFee(new BigDecimal(1.0));
    orderData.setQuote(new QuoteDataBean());
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.util.Date());
    orderData.setCompletionDate(new java.util.Date());
    orderData.setOrderType("sell");
    orderData.setSymbol("IBM");
    orderData.setAccount(new AccountDataBean());
    orderData.setHolding(new HoldingDataBean());
    OrderDataBean completedOrder = tradeDirect.completeOrder(1, true);
    assertEquals(orderData.getHolding(), completedOrder.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_MarketSummaryIntervalZero_YvKY0_ScrO0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummary = null;
    try {
      marketSummary = tradeDirect.getMarketSummary();
    } catch (Exception e) {
      e.printStackTrace();
    }
    assertNotNull(marketSummary);
    assertEquals(0, marketSummary.getOpenTSIA().intValue());
    assertEquals(0, marketSummary.getGainPercent().intValue());
    assertEquals(0, marketSummary.getSummaryDate().getTime());
    assertEquals(0, marketSummary.getTSIA().intValue());
    assertEquals(0, marketSummary.getVolume(), 0.0);
    assertEquals(0, marketSummary.getTopGainers().size());
    assertEquals(0, marketSummary.getTopLosers().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_MarketSummaryIntervalNegative_Fetch_NextMarketSummary_SsPQ5_vXUa0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummaryInternal();
      assertNotNull(marketSummary);
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_CKAY0_ubqa0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      OrderDataBean orderData = tradeDirect.completeOrder(1, true);
      assertNotNull(orderData);
      assertEquals(1, orderData.getOrderID());
      assertEquals("open", orderData.getOrderStatus());
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_uFGL0_nAit0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      QuoteDataBean quoteData = tradeDirect.createQuote("ABC", "ABC Company", new BigDecimal(10.0));
      assertNotNull(quoteData);
      assertEquals("ABC", quoteData.getSymbol());
      assertEquals("ABC Company", quoteData.getCompanyName());
      assertEquals(new BigDecimal(10.0), quoteData.getPrice());
      assertEquals(new BigDecimal(10.0), quoteData.getOpen());
      assertEquals(new BigDecimal(10.0), quoteData.getLow());
      assertEquals(new BigDecimal(10.0), quoteData.getHigh());
      assertEquals(0.0, quoteData.getChange(), 0.0);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sell_userID_null_fpJt0_JtZO0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.sell(null, 1, TradeConfig.SYNCH);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("TradeDirect:sell -- userID is null", e.getMessage());
    } catch (Exception e) {
      fail("Expected IllegalArgumentException");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sell_holdingID_null_MfKC1_DVoe0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.sell("user1", null, TradeConfig.SYNCH);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("TradeDirect:sell -- holdingID is null", e.getMessage());
    } catch (Exception e) {
      fail("Expected IllegalArgumentException");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sell_orderProcessingMode_invalid_TMQv2_zVAb0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.sell("user1", 1, 5);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("TradeDirect:sell -- invalid orderProcessingMode: 5", e.getMessage());
    } catch (Exception e) {
      fail("Expected IllegalArgumentException");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InSession_YMAV6_QXsw0() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    try {
      OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
      assertNotNull(orderData);
      assertEquals("sold", orderData.getOrderStatus());
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_JMSException_ZSum11_KzaS0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
      fail("Expected exception not thrown");
    } catch (JMSException e) {
      assertTrue(e instanceof JMSException);
    } catch (Exception e) {
      fail("Expected JMSException not thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_QoNF0_XjNo0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@email.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    try {
      AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
      assertNotNull(accountData);
      assertEquals(userID, accountData.getProfileID());
      assertEquals(openBalance, accountData.getOpenBalance());
      assertEquals(new Integer(0), accountData.getLoginCount());
      assertEquals(new Integer(0), accountData.getLogoutCount());
      assertNotNull(accountData.getCreationDate());
      assertNotNull(accountData.getLastLogin());
      assertEquals(openBalance, accountData.getBalance());
      assertNotNull(accountData.getProfile());
      assertEquals(userID, accountData.getProfile().getUserID());
      assertEquals(password, accountData.getProfile().getPassword());
      assertEquals(fullname, accountData.getProfile().getFullName());
      assertEquals(address, accountData.getProfile().getAddress());
      assertEquals(email, accountData.getProfile().getEmail());
      assertEquals(creditcard, accountData.getProfile().getCreditCard());
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithInvalidUserID_njhG1_DHtn0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "invalid_user";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      tradeDirect.buy(userID, symbol, quantity, orderProcessingMode);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertTrue(e.getMessage().contains("Invalid userID"));
    } catch (Exception e) {
      fail("Expected IllegalArgumentException");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithInvalidSymbol_ZpCI2_WSJk0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    String symbol = "INVALID";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      tradeDirect.buy(userID, symbol, quantity, orderProcessingMode);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertTrue(e.getMessage().contains("Invalid symbol"));
    } catch (Exception e) {
      fail("Expected IllegalArgumentException");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithInvalidQuantity_KDCm3_sroP0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    String symbol = "GOOG";
    double quantity = -100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      tradeDirect.buy(userID, symbol, quantity, orderProcessingMode);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertTrue(e.getMessage().contains("Invalid quantity"));
    } catch (Exception e) {
      fail("Expected IllegalArgumentException");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithInvalidOrderProcessingMode_prMu4_hpIE0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = -1;
    try {
      tradeDirect.buy(userID, symbol, quantity, orderProcessingMode);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertTrue(e.getMessage().contains("Invalid orderProcessingMode"));
    } catch (Exception e) {
      fail("Expected IllegalArgumentException");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_TcKk0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData);
    assertEquals(1, accountData.getAccountID());
    assertNotNull(accountData.getProfileID());
    assertNotNull(accountData.getCreationDate());
    assertNotNull(accountData.getLastLogin());
    assertNotNull(accountData.getBalance());
    assertNotNull(accountData.getOpenBalance());
    assertNotNull(accountData.getProfile());
    assertNotNull(accountData.getOrders());
    assertNotNull(accountData.getHoldings());
    assertEquals(0, accountData.getLoginCount());
    assertEquals(0, accountData.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_JJtm0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData);
    assertEquals(1, accountData.getAccountID());
    assertEquals(1, accountData.getLoginCount());
    assertEquals(1, accountData.getLogoutCount());
    assertNotNull(accountData.getCreationDate());
    assertNotNull(accountData.getLastLogin());
    assertEquals(new BigDecimal(100.0), accountData.getBalance());
    assertEquals(new BigDecimal(100.0), accountData.getOpenBalance());
    assertEquals("user1", accountData.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_RCCz0() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals("AAPL", quoteDataBean.getSymbol());
    assertTrue(quoteDataBean.getPrice().compareTo(BigDecimal.ZERO) > 0);
    assertTrue(quoteDataBean.getOpen().compareTo(BigDecimal.ZERO) > 0);
    assertTrue(quoteDataBean.getLow().compareTo(BigDecimal.ZERO) > 0);
    assertTrue(quoteDataBean.getHigh().compareTo(BigDecimal.ZERO) > 0);
    assertTrue(quoteDataBean.getVolume() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_inSession_mRoB0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    Future<OrderDataBean> future = tradeDirect.completeOrderAsync(1, true);
    assertNotNull(future);
    assertTrue(future.isDone());
    assertEquals(1, future.get().getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_HpUI0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user1");
    assertNotNull(holdingDataBeans);
    assertEquals(5, holdingDataBeans.size());
    for (HoldingDataBean holdingDataBean : holdingDataBeans) {
      assertNotNull(holdingDataBean.getHoldingID());
      assertNotNull(holdingDataBean.getQuantity());
      assertNotNull(holdingDataBean.getPurchaseDate());
      assertNotNull(holdingDataBean.getPurchasePrice());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_tLiE1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("invalidUserID");
    assertNotNull(holdingDataBeans);
    assertEquals(0, holdingDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetConnPublic_wqFO0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = tradeDirect.getConnPublic();
    assertNotNull(conn);
    assertEquals(conn.getClass(), Connection.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_ugAS0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("0.5");
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
    assertEquals(quoteDataBean.getPrice().multiply(changeFactor), updatedQuoteDataBean.getPrice());
    assertEquals(quoteDataBean.getOpen().multiply(changeFactor), updatedQuoteDataBean.getOpen());
    assertEquals(quoteDataBean.getLow().multiply(changeFactor), updatedQuoteDataBean.getLow());
    assertEquals(quoteDataBean.getHigh().multiply(changeFactor), updatedQuoteDataBean.getHigh());
    assertEquals(quoteDataBean.getVolume() + sharesTraded, updatedQuoteDataBean.getVolume());
    assertEquals(quoteDataBean.getChange() + changeFactor.doubleValue(), updatedQuoteDataBean.getChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_swYu0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNotNull(accountProfileData);
    assertEquals("user1", accountProfileData.getUserID());
    assertEquals("password1", accountProfileData.getPassword());
    assertEquals("fullName1", accountProfileData.getFullName());
    assertEquals("address1", accountProfileData.getAddress());
    assertEquals("email1", accountProfileData.getEmail());
    assertEquals("creditCard1", accountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_Uqjn0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Test Street");
    accountProfileData.setEmail("test@test.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getUserID(), updatedAccountProfileData.getUserID());
    assertEquals(accountProfileData.getPassword(), updatedAccountProfileData.getPassword());
    assertEquals(accountProfileData.getFullName(), updatedAccountProfileData.getFullName());
    assertEquals(accountProfileData.getAddress(), updatedAccountProfileData.getAddress());
    assertEquals(accountProfileData.getEmail(), updatedAccountProfileData.getEmail());
    assertEquals(accountProfileData.getCreditCard(), updatedAccountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_VgRn0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData("userID");
    assertNotNull(accountData);
    assertEquals("userID", accountData.getProfileID());
    assertNotNull(accountData.getCreationDate());
    assertNotNull(accountData.getLastLogin());
    assertNotNull(accountData.getBalance());
    assertNotNull(accountData.getOpenBalance());
    assertNotNull(accountData.getProfile());
    assertNotNull(accountData.getHoldings());
    assertNotNull(accountData.getOrders());
    assertNotNull(accountData.getLoginCount());
    assertNotNull(accountData.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_QpFq0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("userID");
    assertNotNull(accountProfileData);
    assertEquals("userID", accountProfileData.getUserID());
    assertEquals("email", accountProfileData.getEmail());
    assertEquals("fullName", accountProfileData.getFullName());
    assertEquals("address", accountProfileData.getAddress());
    assertEquals("creditCard", accountProfileData.getCreditCard());
    assertEquals("password", accountProfileData.getPassword());
    assertEquals("account", accountProfileData.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_JSXX0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders("user1");
    assertEquals(10, orderDataBeans.size());
    for (OrderDataBean orderDataBean : orderDataBeans) {
      assertEquals("completed", orderDataBean.getOrderStatus());
    }
  }
}