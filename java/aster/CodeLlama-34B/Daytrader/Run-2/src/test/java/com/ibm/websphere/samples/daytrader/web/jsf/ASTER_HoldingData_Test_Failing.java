/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_pTHo0_1() {
    HoldingData holdingData = new HoldingData();
    String quoteID = holdingData.getQuoteID();
    assertNotNull(quoteID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_InvalidInput_gKXK1() {
    HoldingData holdingData = new HoldingData();
    double quantity = holdingData.getQuantity();
    assertNotEquals(0.0, quantity, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_NullInput_knwT2_fid1() {
    HoldingData holdingData = new HoldingData();
    double quantity = holdingData.getQuantity();
    assertNull(quantity);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_NegativeInput_wlBd3_fid1() {
    HoldingData holdingData = new HoldingData();
    double quantity = holdingData.getQuantity();
    assertTrue(quantity < 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_PositiveInput_PrdQ4_fid1() {
    HoldingData holdingData = new HoldingData();
    double quantity = holdingData.getQuantity();
    assertTrue(quantity > 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_MaxValueInput_jeMd6_fid1() {
    HoldingData holdingData = new HoldingData();
    double quantity = holdingData.getQuantity();
    assertEquals(Double.MAX_VALUE, quantity, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_MinValueInput_loQb7_fid1() {
    HoldingData holdingData = new HoldingData();
    double quantity = holdingData.getQuantity();
    assertEquals(Double.MIN_VALUE, quantity, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_NaNInput_sQgW8_fid1() {
    HoldingData holdingData = new HoldingData();
    double quantity = holdingData.getQuantity();
    assertTrue(Double.isNaN(quantity));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_InfinityInput_qFsr9_fid1() {
    HoldingData holdingData = new HoldingData();
    double quantity = holdingData.getQuantity();
    assertTrue(Double.isInfinite(quantity));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_pTHo0_2_fid1() {
    HoldingData holdingData = new HoldingData();
    String quoteID = holdingData.getQuoteID();
    assertEquals("", quoteID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteIDWithNonEmptyString_nkVe1_2() {
    HoldingData holdingData = new HoldingData();
    String quoteID = holdingData.getQuoteID();
    assertEquals("12345", quoteID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePriceWithNaN_CvWr7() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = new BigDecimal(Double.NaN);
    holdingData.setPurchasePrice(purchasePrice);
    assertEquals(purchasePrice, holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePriceWithInfinity_GonL8() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = new BigDecimal(Double.POSITIVE_INFINITY);
    holdingData.setPurchasePrice(purchasePrice);
    assertEquals(purchasePrice, holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePriceWithNegativeInfinity_Awnw9() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = new BigDecimal(Double.NEGATIVE_INFINITY);
    holdingData.setPurchasePrice(purchasePrice);
    assertEquals(purchasePrice, holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchaseDate_TvSO0() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = holdingData.getPurchaseDate();
    assertNotNull(purchaseDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchaseDateWithValidDate_jzXB3() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = holdingData.getPurchaseDate();
    assertEquals(new Date(1234567890), purchaseDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainHTML_HTez0() {
    HoldingData holdingData = new HoldingData();
    String gainHTML = holdingData.getGainHTML();
    assertEquals("Expected gain HTML", gainHTML);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasisWithNaN_aHan7() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = new BigDecimal(Double.NaN);
    holdingData.setBasis(basis);
    assertEquals(basis, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasisWithInfinity_KqEr8() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = new BigDecimal(Double.POSITIVE_INFINITY);
    holdingData.setBasis(basis);
    assertEquals(basis, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasisWithNegativeInfinity_NBEF9() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = new BigDecimal(Double.NEGATIVE_INFINITY);
    holdingData.setBasis(basis);
    assertEquals(basis, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainWithInvalidValue_HRur4() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = new BigDecimal("invalid");
    holdingData.setGain(gain);
    assertNull(holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainWithNaN_USIO7() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = new BigDecimal(Double.NaN);
    holdingData.setGain(gain);
    assertNull(holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainWithInfinity_yMJx8() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = new BigDecimal(Double.POSITIVE_INFINITY);
    holdingData.setGain(gain);
    assertEquals(gain, holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainWithNegativeInfinity_YnwB9() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = new BigDecimal(Double.NEGATIVE_INFINITY);
    holdingData.setGain(gain);
    assertEquals(gain, holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValue_1_NTea0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = holdingData.getMarketValue();
    assertEquals(BigDecimal.ZERO, marketValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGain_ZqTG0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = holdingData.getGain();
    assertEquals(BigDecimal.ZERO, gain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainWithPositiveValue_Iywu1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = holdingData.getGain();
    assertEquals(BigDecimal.valueOf(100), gain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainWithNegativeValue_iVcl2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = holdingData.getGain();
    assertEquals(BigDecimal.valueOf(-100), gain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingID_GJpK0_1() {
    HoldingData holdingData = new HoldingData();
    Integer holdingID = holdingData.getHoldingID();
    assertNotNull(holdingID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingID_GJpK0_2() {
    HoldingData holdingData = new HoldingData();
    Integer holdingID = holdingData.getHoldingID();
    assertEquals(holdingID, 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithNaN_PgPy6() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(Double.NaN);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithInfinity_oaZd7() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(Double.POSITIVE_INFINITY);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithNegativeInfinity_qOEH8() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(Double.NEGATIVE_INFINITY);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithNullAndZero_zjdy9_1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = null;
    holdingData.setMarketValue(marketValue);
    marketValue = new BigDecimal(0.0);
    holdingData.setMarketValue(marketValue);
    assertNull(holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_Invalid_EbIY2() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(-1);
    assertNull(holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchasePrice_gSMK0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = holdingData.getPurchasePrice();
    assertEquals(BigDecimal.ZERO, purchasePrice);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_NegativeInfinityInput_WUEZ10_rDQV0() {
    HoldingData holdingData = new HoldingData();
    double quantity = holdingData.getQuantity();
    assertTrue(Double.isInfinite(quantity) && quantity < 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_PositiveInfinityInput_hnFA11_PuHD0() {
    HoldingData holdingData = new HoldingData();
    double quantity = holdingData.getQuantity();
    assertTrue(Double.isInfinite(quantity) && quantity > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainHTMLPositiveGain_XfFl1_kVmy0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setGain(new BigDecimal(100));
    String gainHTML = holdingData.getGainHTML();
    assertEquals("Expected gain HTML for positive gain", gainHTML);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_pTHo0() {
    HoldingData holdingData = new HoldingData();
    String quoteID = holdingData.getQuoteID();
    assertNotNull(quoteID);
    assertEquals("", quoteID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteIDWithNonEmptyString_nkVe1() {
    HoldingData holdingData = new HoldingData();
    String quoteID = holdingData.getQuoteID();
    assertNotNull(quoteID);
    assertEquals("12345", quoteID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingID_GJpK0() {
    HoldingData holdingData = new HoldingData();
    Integer holdingID = holdingData.getHoldingID();
    assertNotNull(holdingID);
    assertEquals(holdingID, 1);
  }
}