/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingJDBCRead_Coverage_Test_Failing {
  private QuoteDataBean quoteDataBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_CKLI0() {
    PingJDBCRead pingJDBCRead = new PingJDBCRead();
    String expected = "Basic JDBC Read using a prepared statment, makes use of TradeJDBC class";
    String actual = pingJDBCRead.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_ssoF0() throws ServletException, IOException {
    PingJDBCRead pingJDBCRead = new PingJDBCRead();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingJDBCRead.doPost(req, res);
    verify(pingJDBCRead).doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostException_BDhI1() throws ServletException, IOException {
    PingJDBCRead pingJDBCRead = new PingJDBCRead();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    doThrow(new ServletException()).when(pingJDBCRead).doGet(req, res);
    try {
      pingJDBCRead.doPost(req, res);
      fail("Expected ServletException");
    } catch (ServletException e) {
      assertEquals("doGet", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullConfig_IhZe3() throws javax.servlet.ServletException {
    PingJDBCRead pingJDBCRead = new PingJDBCRead();
    try {
      pingJDBCRead.init(null);
      Assertions.fail("Expected exception not thrown");
    } catch (ServletException e) {
      Assertions.assertEquals("ServletConfig cannot be null", e.getMessage());
    }
  }
}