/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderData_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithInvalidValue_beqH2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10), "buy", -1000, "AAPL");
    orderData.setPrice(new BigDecimal(-100));
    assertEquals(new BigDecimal(10), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithZeroValue_vuqD3() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10), "buy", 00, "AAPL");
    orderData.setPrice(new BigDecimal(0));
    assertEquals(new BigDecimal(10), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithNaN_PaCO6() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10), "buy", 100, "AAPL");
    orderData.setPrice(new BigDecimal(Double.NaN));
    assertEquals(new BigDecimal(Double.NaN), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithInfinity_qZoa7() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10), "buy", 100, "AAPL");
    orderData.setPrice(new BigDecimal(Double.POSITIVE_INFINITY));
    assertEquals(new BigDecimal(Double.POSITIVE_INFINITY), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithNegativeInfinity_XCeh8() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10), "buy", 100, "AAPL");
    orderData.setPrice(new BigDecimal(Double.NEGATIVE_INFINITY));
    assertEquals(new BigDecimal(Double.NEGATIVE_INFINITY), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithSpecialCharacters_nrFH7() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setSymbol("GOOG!!");
    assertEquals("GOOG!", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithMultipleSymbols_pmbD8() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setSymbol("GOOG,AAPL,AAPL");
    assertEquals("GOOG,AAPL", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithInvalidSymbolAndValidSymbol_KPaX9() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setSymbol("INVALID,INVALID,GOOG");
    assertEquals("INVALID,GOOG", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithValidSymbolAndInvalidSymbol_Nygj10() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setSymbol("GOOG,INVALID,INVALID");
    assertEquals("GOOG,INVALID", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_fZXT0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertNull(new BigDecimal(10.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithZeroQuantity_GFuE1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 0.0, "AAPL");
    assertNull(new BigDecimal(0.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNegativeQuantity_eeGU2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", -10.0, "AAPL");
    assertNull(new BigDecimal(-10.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullSymbol_bfxV3() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, null);
    assertNull(new BigDecimal(10.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithEmptySymbol_UbCV4() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "");
    assertNull(new BigDecimal(10.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithInvalidSymbol_BUxl5() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "INVALID");
    assertNull(new BigDecimal(10.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullOrderType_JTxi6() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), null, 10.0, "AAPL");
    assertNull(new BigDecimal(10.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithEmptyOrderType_AJpk7() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "", 10.0, "AAPL");
    assertNull(new BigDecimal(10.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithInvalidOrderType_Cpta8() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "INVALID", 10.0, "AAPL");
    assertNull(new BigDecimal(10.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullOrderFee_ZRJF9() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), null, "buy", 10.0, "AAPL");
    assertNull(new BigDecimal(10.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithZeroOrderFee_MQmd10() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(0.0), "buy", 10.0, "AAPL");
    assertNull(new BigDecimal(10.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalWithNull_KJZa1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setTotal(null);
    assertNotNull(orderData.getTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithInvalidValue_beqH2_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10), "buy", 100, "AAPL");
    orderData.setPrice(new BigDecimal(-100));
    assertEquals(new BigDecimal(10), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithZeroValue_vuqD3_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10), "buy", 100, "AAPL");
    orderData.setPrice(new BigDecimal(0));
    assertEquals(new BigDecimal(10), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithMaxValue_Nzcx4() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10), "buy", 100, "AAPL");
    orderData.setPrice(new BigDecimal(Double.MAX_VALUE));
    assertEquals(new BigDecimal(10), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithMinValue_DPms5() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10), "buy", 100, "AAPL");
    orderData.setPrice(new BigDecimal(Double.MIN_VALUE));
    assertEquals(new BigDecimal(10), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithNaN_PaCO6_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10), "buy", 100, "AAPL");
    orderData.setPrice(new BigDecimal(Double.NaN));
    assertEquals(new BigDecimal(10), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithInfinity_qZoa7_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10), "buy", 100, "AAPL");
    orderData.setPrice(new BigDecimal(Double.POSITIVE_INFINITY));
    assertEquals(new BigDecimal(10), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithNegativeInfinity_XCeh8_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10), "buy", 100, "AAPL");
    orderData.setPrice(new BigDecimal(Double.NEGATIVE_INFINITY));
    assertEquals(new BigDecimal(10), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithInvalidStatus_pmnJ1_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOrderStatus("invalid");
    assertEquals("open", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithInvalidSymbol_ivyy3_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setSymbol("INVALID");
    assertEquals("AAPL", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithDifferentCase_vlAm5_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setSymbol("goog");
    assertEquals("GOOG", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithSpecialCharacters_nrFH7_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setSymbol("GOOG!");
    assertEquals("GOOG", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithMultipleSymbols_pmbD8_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setSymbol("GOOG,AAPL");
    assertEquals("GOOG", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithInvalidSymbolAndValidSymbol_KPaX9_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setSymbol("INVALID,GOOG");
    assertEquals("GOOG", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithValidSymbolAndInvalidSymbol_Nygj10_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setSymbol("GOOG,INVALID");
    assertEquals("GOOG", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullPrice_uoji7_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL", null);
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDateWithNullOpenDate_MPaN1_fid1() {
    OrderData orderData = new OrderData(1, "open", null, new Date(), BigDecimal.ZERO, "limit", 100.0, "AAPL");
    Date completionDate = orderData.getCompletionDate();
    assertNull(completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDateWithNullOrderFee_ivbX3_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), null, "limit", 100.0, "AAPL");
    Date completionDate = orderData.getCompletionDate();
    assertNull(completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDateWithNullOrderType_CiUo4_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), BigDecimal.ZERO, null, 100.0, "AAPL");
    Date completionDate = orderData.getCompletionDate();
    assertNull(completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDateWithNullSymbol_taAI6_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), BigDecimal.ZERO, "limit", 100.0, null);
    Date completionDate = orderData.getCompletionDate();
    assertNull(completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_fZXT0_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithZeroQuantity_GFuE1_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 0.0, "AAPL");
    assertEquals(new BigDecimal(0.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNegativeQuantity_eeGU2_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", -10.0, "AAPL");
    assertEquals(new BigDecimal(-10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullSymbol_bfxV3_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, null);
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithEmptySymbol_UbCV4_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "");
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithInvalidSymbol_BUxl5_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "INVALID");
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullOrderType_JTxi6_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), null, 10.0, "AAPL");
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithEmptyOrderType_AJpk7_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "", 10.0, "AAPL");
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithInvalidOrderType_Cpta8_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "INVALID", 10.0, "AAPL");
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullOrderFee_ZRJF9_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), null, "buy", 10.0, "AAPL");
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithZeroOrderFee_MQmd10_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(0.0), "buy", 10.0, "AAPL");
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_Oosm0_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals(new BigDecimal(10.0), orderData.getTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalWithOrderFee_ZkGd1_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL", new BigDecimal(1.0));
    assertEquals(new BigDecimal(11.0), orderData.getTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDateWithInvalidDate_feho2_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date invalidDate = new Date(0);
    orderData.setCompletionDate(invalidDate);
    assertNull(orderData.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDateWithDifferentDate_aqBG4_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date differentDate = new Date(2000);
    orderData.setCompletionDate(differentDate);
    assertNotEquals(differentDate, orderData.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDateWithNullQuantity_uhBt5_njEs0_fid2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), BigDecimal.ZERO, "limit", 0.0, "AAPL");
    Date completionDate = orderData.getCompletionDate();
    assertNull(completionDate);
  }
}