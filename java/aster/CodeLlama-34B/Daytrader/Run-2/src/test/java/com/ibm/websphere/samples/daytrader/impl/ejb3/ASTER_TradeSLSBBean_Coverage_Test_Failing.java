/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.persistence.TypedQuery;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeSLSBBean_Coverage_Test_Failing {
  private MarketSummaryDataBean marketSummarySingleton;
  private TypedQuery<QuoteDataBean> query;
  private TradeConfig tradeConfig;
  private TypedQuery<OrderDataBean> q;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_Vrnv0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("GOOG");
    assertNotNull(quoteDataBean);
    assertEquals("GOOG", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_ExistingUserID_HuQE0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountProfileDataBean profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    AccountDataBean account = new AccountDataBean(0, 0, null, new Timestamp(System.currentTimeMillis()), openBalance, openBalance, userID);
    profile.setAccount(account);
    account.setProfile(profile);
    AccountDataBean result = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_NewUserID_oOiZ1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountProfileDataBean profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    AccountDataBean account = new AccountDataBean(0, 0, null, new Timestamp(System.currentTimeMillis()), openBalance, openBalance, userID);
    profile.setAccount(account);
    account.setProfile(profile);
    AccountDataBean result = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
    assertEquals(userID, result.getProfileID());
    assertEquals(openBalance, result.getBalance());
    assertEquals(openBalance, result.getOpenBalance());
    assertEquals(new Timestamp(System.currentTimeMillis()), result.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_NullUserID_pVyY2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountProfileDataBean profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    AccountDataBean account = new AccountDataBean(0, 0, null, new Timestamp(System.currentTimeMillis()), openBalance, openBalance, userID);
    profile.setAccount(account);
    account.setProfile(profile);
    AccountDataBean result = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_submitOrder_exFk0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = true;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNull(future.get());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_returnNull_ZFoN1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = true;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertTrue(future.isDone());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_OrCg0() {
    String symbol = "ABC";
    String companyName = "ABC Company";
    BigDecimal price = new BigDecimal(10.0);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertNotNull(quote);
    assertEquals(symbol, quote.getSymbol());
    assertEquals(companyName, quote.getCompanyName());
    assertEquals(price, quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_find_EAEy0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("12345");
    AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertEquals("12345", temp.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_setAddress_cYpi1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("12345");
    profileData.setAddress("123 Main St");
    AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertEquals("123 Main St", temp.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_setPassword_BLwx2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("12345");
    profileData.setPassword("password123");
    AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertEquals("password123", temp.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_setFullName_vdkE3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("12345");
    profileData.setFullName("John Doe");
    AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertEquals("John Doe", temp.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_setCreditCard_UvlV4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("12345");
    profileData.setCreditCard("1234-5678-9012-3456");
    AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertEquals("1234-5678-9012-3456", temp.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_setEmail_ldmI5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("12345");
    profileData.setEmail("johndoe@example.com");
    AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertEquals("johndoe@example.com", temp.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_merge_yjJb6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("12345");
    AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
    Assertions.assertNotNull(temp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_NewUserID_oOiZ1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountProfileDataBean profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    AccountDataBean account = new AccountDataBean(0, 0, null, new Timestamp(System.currentTimeMillis()), openBalance, openBalance, userID);
    profile.setAccount(account);
    account.setProfile(profile);
    AccountDataBean result = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_NewUserID_oOiZ1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountProfileDataBean profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    AccountDataBean account = new AccountDataBean(0, 0, null, new Timestamp(System.currentTimeMillis()), openBalance, openBalance, userID);
    profile.setAccount(account);
    account.setProfile(profile);
    AccountDataBean result = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(userID, result.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_NewUserID_oOiZ1_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountProfileDataBean profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    AccountDataBean account = new AccountDataBean(0, 0, null, new Timestamp(System.currentTimeMillis()), openBalance, openBalance, userID);
    profile.setAccount(account);
    account.setProfile(profile);
    AccountDataBean result = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(openBalance, result.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_NewUserID_oOiZ1_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountProfileDataBean profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    AccountDataBean account = new AccountDataBean(0, 0, null, new Timestamp(System.currentTimeMillis()), openBalance, openBalance, userID);
    profile.setAccount(account);
    account.setProfile(profile);
    AccountDataBean result = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(openBalance, result.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_NewUserID_oOiZ1_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountProfileDataBean profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    AccountDataBean account = new AccountDataBean(0, 0, null, new Timestamp(System.currentTimeMillis()), openBalance, openBalance, userID);
    profile.setAccount(account);
    account.setProfile(profile);
    AccountDataBean result = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(new Timestamp(System.currentTimeMillis()), result.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_OrCg0_1() {
    String symbol = "ABC";
    String companyName = "ABC Company";
    BigDecimal price = new BigDecimal(10.0);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertNotNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_OrCg0_2() {
    String symbol = "ABC";
    String companyName = "ABC Company";
    BigDecimal price = new BigDecimal(10.0);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(symbol, quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_OrCg0_3() {
    String symbol = "ABC";
    String companyName = "ABC Company";
    BigDecimal price = new BigDecimal(10.0);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(companyName, quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_OrCg0_4() {
    String symbol = "ABC";
    String companyName = "ABC Company";
    BigDecimal price = new BigDecimal(10.0);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(price, quote.getPrice());
  }

  @Test
  public void testGetClosedOrders_Zbjm0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "12345";
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders(userID);
    for (OrderDataBean order : closedOrders) {
    }
    assertEquals(5, closedOrders.size());
  }

  @Test
  public void testGetClosedOrders_TMvo0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("userID");
    assertNotNull(closedOrders);
  }

  @Test
  public void testGetClosedOrders_TMvo0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("userID");
    assertEquals(0, closedOrders.size());
  }
}