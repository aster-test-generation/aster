/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Coverage_Test_Passing {
  private Iterator<QuoteDataBean> iterator;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_qiNT0_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<BR>Market Summary at:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_qiNT0_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<LI>        TSIA:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_qiNT0_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<LI>    openTSIA:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_qiNT0_4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<LI>      volume:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithTopGainers_ZZtf1_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    String html = marketSummaryDataBean.toHTML();
    assertFalse(html.contains("<BR> Current Top Gainers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithTopGainers_ZZtf1_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<LI>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithTopGainers_ZZtf1_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("</LI>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithTopLosers_yBQQ2_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String html = marketSummaryDataBean.toHTML();
    assertFalse(html.contains("<BR>   Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithTopLosers_yBQQ2_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<LI>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithTopLosers_yBQQ2_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("</LI>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithTopGainersAndLosers_tqwB3_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<BR> Current Top Gainers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithTopGainersAndLosers_tqwB3_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<LI>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithTopGainersAndLosers_tqwB3_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("</LI>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithTopGainersAndLosers_tqwB3_4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<BR>   Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullTopGainers_mnXC4_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopGainers(null);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<BR>Market Summary at:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullTopGainers_mnXC4_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopGainers(null);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<LI>        TSIA:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullTopGainers_mnXC4_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopGainers(null);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<LI>    openTSIA:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullTopGainers_mnXC4_4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopGainers(null);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<LI>      volume:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullTopLosers_rhdZ5_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopLosers(null);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<BR>Market Summary at:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullTopLosers_rhdZ5_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopLosers(null);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<LI>        TSIA:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullTopLosers_rhdZ5_3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopLosers(null);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<LI>    openTSIA:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullTopLosers_rhdZ5_4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopLosers(null);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<LI>      volume:"));
  }

  @Test
  public void testSetTopGainers_UJiv0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    QuoteDataBean quoteDataBean1 = new QuoteDataBean();
    quoteDataBean1.setSymbol("AAPL");
    QuoteDataBean quoteDataBean2 = new QuoteDataBean();
    quoteDataBean2.setSymbol("GOOG");
    topGainers.add(quoteDataBean1);
    topGainers.add(quoteDataBean2);
    marketSummaryDataBean.setTopGainers(topGainers);
    assertEquals(topGainers, marketSummaryDataBean.getTopGainers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_qiNT0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<BR>Market Summary at:"));
    assertTrue(html.contains("<LI>        TSIA:"));
    assertTrue(html.contains("<LI>    openTSIA:"));
    assertTrue(html.contains("<LI>      volume:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithTopGainersAndLosers_tqwB3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    topGainers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopGainers(topGainers);
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean());
    marketSummaryDataBean.setTopLosers(topLosers);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<BR> Current Top Gainers:"));
    assertTrue(html.contains("<LI>"));
    assertTrue(html.contains("</LI>"));
    assertTrue(html.contains("<BR>   Current Top Losers:"));
    assertTrue(html.contains("<LI>"));
    assertTrue(html.contains("</LI>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullTopGainers_mnXC4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopGainers(null);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<BR>Market Summary at:"));
    assertTrue(html.contains("<LI>        TSIA:"));
    assertTrue(html.contains("<LI>    openTSIA:"));
    assertTrue(html.contains("<LI>      volume:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullTopLosers_rhdZ5() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopLosers(null);
    String html = marketSummaryDataBean.toHTML();
    assertTrue(html.contains("<BR>Market Summary at:"));
    assertTrue(html.contains("<LI>        TSIA:"));
    assertTrue(html.contains("<LI>    openTSIA:"));
    assertTrue(html.contains("<LI>      volume:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullTopGainersAndLosers_rYKa6() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopGainers(null);
    marketSummaryDataBean.setTopLosers(null);
    String html = marketSummaryDataBean.toHTML();
  }
}