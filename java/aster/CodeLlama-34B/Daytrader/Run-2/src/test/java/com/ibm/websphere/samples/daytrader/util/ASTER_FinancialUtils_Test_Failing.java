/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_FinancialUtils_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLink_MultipleSymbolsWithEmptySymbol_JiOr7() {
    String symbol = "AAPL,";
    String expected = "<A href=\"app?action=quotes&symbols=AAPL,\"></A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainWithNullBalance_itRW5() {
    BigDecimal currentBalance = null;
    BigDecimal openBalance = new BigDecimal("50.00");
    BigDecimal expectedGain = new BigDecimal("-50.00");
    BigDecimal actualGain = FinancialUtils.computeGain(openBalance, openBalance);
    assertEquals(expectedGain, actualGain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainWithNullOpenBalance_oPEw6() {
    BigDecimal currentBalance = new BigDecimal("100.00");
    BigDecimal openBalance = null;
    BigDecimal expectedGain = new BigDecimal("100.00");
    BigDecimal actualGain = FinancialUtils.computeGain(currentBalance, openBalance);
    assertEquals(expectedGain, actualGain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainWithNullBalances_IdXD7() {
    BigDecimal currentBalance = null;
    BigDecimal openBalance = null;
    BigDecimal expectedGain = new BigDecimal("0.00");
    BigDecimal actualGain = FinancialUtils.computeGain(currentBalance, openBalance);
    assertEquals(expectedGain, actualGain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainPercent_negativeOpenBalance_tvWS2() {
    BigDecimal currentBalance = new BigDecimal(100);
    BigDecimal openBalance = new BigDecimal(-300.0000);
    BigDecimal gainPercent = FinancialUtils.computeGainPercent(currentBalance, openBalance);
    assertEquals(new BigDecimal(-300.0000), gainPercent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainPercent_currentBalanceIsZero_Zjyl3() {
    BigDecimal currentBalance = new BigDecimal(-100.0000);
    BigDecimal openBalance = new BigDecimal(5 - 100.0000);
    BigDecimal gainPercent = FinancialUtils.computeGainPercent(currentBalance, openBalance);
    assertEquals(BigDecimal.ZERO, gainPercent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLink_NullSymbol_Enmv3_fid1() {
    String symbol = null;
    String expected = "<A href=\"app?action=quotes&symbols=\"></A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainWithNullBalance_itRW5_fid1() {
    BigDecimal currentBalance = null;
    BigDecimal openBalance = new BigDecimal("50.00");
    BigDecimal expectedGain = new BigDecimal("-50.00");
    BigDecimal actualGain = FinancialUtils.computeGain(currentBalance, openBalance);
    assertEquals(expectedGain, actualGain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainPercent_zeroOpenBalance_qhee0() {
    BigDecimal currentBalance = new BigDecimal(100);
    BigDecimal openBalance = new BigDecimal(0);
    BigDecimal gainPercent = FinancialUtils.computeGainPercent(currentBalance, openBalance);
    assertEquals(BigDecimal.ZERO, gainPercent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainPercent_negativeOpenBalance_tvWS2_fid1() {
    BigDecimal currentBalance = new BigDecimal(100);
    BigDecimal openBalance = new BigDecimal(-50);
    BigDecimal gainPercent = FinancialUtils.computeGainPercent(currentBalance, openBalance);
    assertEquals(new BigDecimal(-50), gainPercent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainPercent_currentBalanceIsZero_Zjyl3_fid1() {
    BigDecimal currentBalance = new BigDecimal(0);
    BigDecimal openBalance = new BigDecimal(50);
    BigDecimal gainPercent = FinancialUtils.computeGainPercent(currentBalance, openBalance);
    assertEquals(BigDecimal.ZERO, gainPercent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeHoldingsTotal_emptyCollection_QbMZ0() {
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    BigDecimal holdingsTotal = FinancialUtils.computeHoldingsTotal(holdingDataBeans);
    assertEquals(BigDecimal.ZERO, holdingsTotal);
  }
}