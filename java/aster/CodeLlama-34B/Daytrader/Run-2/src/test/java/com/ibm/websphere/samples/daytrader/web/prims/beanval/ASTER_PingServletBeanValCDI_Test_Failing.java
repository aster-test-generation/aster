/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletBeanValCDI_Test_Failing {
  private static LocalDateTime initTime;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_BYCI0() {
    PingServletBeanValCDI pingServletBeanValCDI = new PingServletBeanValCDI();
    String servletInfo = pingServletBeanValCDI.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet", servletInfo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoCoverage_OBzs1() {
    PingServletBeanValCDI pingServletBeanValCDI = new PingServletBeanValCDI();
    String servletInfo = pingServletBeanValCDI.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet", servletInfo);
    assertEquals("Basic dynamic HTML generation through a servlet", pingServletBeanValCDI.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullRequest_ypzo2() throws ServletException, IOException {
    PingServletBeanValCDI servlet = new PingServletBeanValCDI();
    HttpServletRequest req = null;
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).sendError(500, "NullPointerException");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoCoverage_OBzs1_2() {
    PingServletBeanValCDI pingServletBeanValCDI = new PingServletBeanValCDI();
    String servletInfo = pingServletBeanValCDI.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet", pingServletBeanValCDI.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_nCgv0_mzuu0() throws ServletException, IOException {
    PingServletBeanValCDI servlet = new PingServletBeanValCDI();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doPost(req, res);
    verify(req).getMethod();
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithInvalidMethod_WkbH1_SBlV0() throws ServletException, IOException {
    PingServletBeanValCDI servlet = new PingServletBeanValCDI();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getMethod()).thenReturn("INVALID");
    servlet.doPost(req, res);
    verify(req).getMethod();
    verify(res).setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithException_GNNo2_anUS0() throws ServletException, IOException {
    PingServletBeanValCDI servlet = new PingServletBeanValCDI();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getMethod()).thenThrow(new ServletException());
    servlet.doPost(req, res);
    verify(req).getMethod();
    verify(res).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_BYCI0_fid2() {
    PingServletBeanValCDI pingServletBeanValCDI = new PingServletBeanValCDI();
    String servletInfo = pingServletBeanValCDI.getServletInfo();
    assertEquals("Ping Servlet Bean Validation CDI", servletInfo);
  }
}