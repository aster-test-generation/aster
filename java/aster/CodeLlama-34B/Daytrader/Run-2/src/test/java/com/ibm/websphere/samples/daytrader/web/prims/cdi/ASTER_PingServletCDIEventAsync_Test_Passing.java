/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.cdi;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletCDIEventAsync_Test_Passing {
  private static int hitCount2;
  private static String initTime;
  private static int hitCount1;
  @Mock
  private ServletConfig config;
  @InjectMocks
  private PingServletCDIEventAsync pingservletcdieventasync;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit() throws Exception {
    MockitoAnnotations.initMocks(this);
    // Given
    when(config.getInitParameter("hitCount1")).thenReturn("0");
    when(config.getInitParameter("hitCount2")).thenReturn("0");
    when(config.getInitParameter("initTime")).thenReturn("2023-02-28T12:34:56.789Z");
    // When
    pingservletcdieventasync.init(config);
    // Then
    assertEquals(0, hitCount1);
    assertEquals(0, hitCount2);
    assertEquals("2023-02-28T12:34:56.789Z", initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_HHsF0() throws IOException {
    PingServletCDIEventAsync servlet = new PingServletCDIEventAsync();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PrintWriter pw = mock(PrintWriter.class);
    when(response.getWriter()).thenReturn(pw);
    servlet.doGet(request, response);
    verify(pw).write("<html><head><title>Ping Servlet CDI Event Async</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet CDI Event Async<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time : " + initTime + "<BR><BR></FONT>");
    verify(pw).write("<B>hitCount1: " + hitCount1 + "</B><BR><B>hitCount2: " + hitCount2 + "</B></body></html>");
    verify(pw).flush();
    verify(pw).close();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithException_UqUK1() throws IOException {
    PingServletCDIEventAsync servlet = new PingServletCDIEventAsync();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PrintWriter pw = mock(PrintWriter.class);
    when(response.getWriter()).thenReturn(pw);
    doThrow(new IOException()).when(pw).write("<html><head><title>Ping Servlet CDI Event Async</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet CDI Event Async<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time : " + initTime + "<BR><BR></FONT>");
    servlet.doGet(request, response);
    verify(pw).write("<html><head><title>Ping Servlet CDI Event Async</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet CDI Event Async<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time : " + initTime + "<BR><BR></FONT>");
    verify(pw).write("<B>hitCount1: " + hitCount1 + "</B><BR><B>hitCount2: " + hitCount2 + "</B></body></html>");
    verify(pw).flush();
    verify(pw).close();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_1() throws Exception {
    MockitoAnnotations.initMocks(this);
    // Given
    when(config.getInitParameter("hitCount1")).thenReturn("0");
    when(config.getInitParameter("hitCount2")).thenReturn("0");
    when(config.getInitParameter("initTime")).thenReturn("2023-02-28T12:34:56.789Z");
    // When
    pingservletcdieventasync.init(config);
    // Then
    assertEquals(0, hitCount1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_2() throws Exception {
    MockitoAnnotations.initMocks(this);
    // Given
    when(config.getInitParameter("hitCount1")).thenReturn("0");
    when(config.getInitParameter("hitCount2")).thenReturn("0");
    when(config.getInitParameter("initTime")).thenReturn("2023-02-28T12:34:56.789Z");
    // When
    pingservletcdieventasync.init(config);
    // Then
    assertEquals(0, hitCount2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_3() throws Exception {
    MockitoAnnotations.initMocks(this);
    // Given
    when(config.getInitParameter("hitCount1")).thenReturn("0");
    when(config.getInitParameter("hitCount2")).thenReturn("0");
    when(config.getInitParameter("initTime")).thenReturn("2023-02-28T12:34:56.789Z");
    // When
    pingservletcdieventasync.init(config);
    // Then
    assertEquals("2023-02-28T12:34:56.789Z", initTime);
  }
}