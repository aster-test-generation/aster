/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInterval_PLBZ0() {
    int expected = -10;
    int actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalWithDifferentValues_dxIx1_1() {
    int expected = 5;
    int actual = TradeConfig.getMarketSummaryInterval();
    expected = 15;
    actual = TradeConfig.getMarketSummaryInterval();
    expected = 20;
    actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalReturnType_akEk3() {
    Object actual = TradeConfig.getMarketSummaryInterval();
    assertTrue(actual instanceof Integer);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalWithDifferentValuesAndInvalidValues_gJhY4_1() {
    int expected = 5;
    int actual = TradeConfig.getMarketSummaryInterval();
    expected = 15;
    actual = TradeConfig.getMarketSummaryInterval();
    expected = 30;
    actual = TradeConfig.getMarketSummaryInterval();
    expected = -1;
    actual = TradeConfig.getMarketSummaryInterval();
    expected = 0;
    actual = TradeConfig.getMarketSummaryInterval();
    expected = 20;
    actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeModeNames_SmFb0_1() {
    String[] expected = new String[]{"mode1", "mode2", "mode3"};
    String[] actual = TradeConfig.getRunTimeModeNames();
    for (int i = 0; i < expected.length; i++) {
    }
    assertEquals(expected.length, actual.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_1_SKiJ0_1() {
    String address = TradeConfig.rndAddress();
    assertNotNull(address);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_1_SKiJ0_2() {
    String address = TradeConfig.rndAddress();
    assertTrue(address.contains("Oak St."));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_4_eRfn3_3() {
    String address = TradeConfig.rndAddress();
    assertFalse(address.contains("1000"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_5_LYzb4_4() {
    String address = TradeConfig.rndAddress();
    assertFalse(address.contains("1001"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_6_Pfpr5_5() {
    String address = TradeConfig.rndAddress();
    assertFalse(address.contains("1002"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_7_DgLE6_6() {
    String address = TradeConfig.rndAddress();
    assertFalse(address.contains("1003"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_8_cAep7_7() {
    String address = TradeConfig.rndAddress();
    assertFalse(address.contains("1004"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_9_hJGR8_8() {
    String address = TradeConfig.rndAddress();
    assertFalse(address.contains("1005"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_10_oURI9() {
    String address = TradeConfig.rndAddress();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_1_SKiJ0() {
    String address = TradeConfig.rndAddress();
    assertNotNull(address);
    assertTrue(address.contains("Oak St."));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_rDxS0() {
    TradeConfig config = new TradeConfig();
    config.incrementScenarioCount();
    assertEquals(1, config.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeMode_validValue_dJHx0() {
    TradeConfig.setRunTimeMode(1);
    assertEquals(1, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeMode_invalidValue_uAmH1() {
    TradeConfig.setRunTimeMode(0);
    assertEquals(0, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeMode_negativeValue_GDUE3() {
    TradeConfig.setRunTimeMode(-1);
    assertEquals(-1, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeMode_maxValue_cqBG4() {
    TradeConfig.setRunTimeMode(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeMode_minValue_jfbd5() {
    TradeConfig.setRunTimeMode(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeMode_randomValue_ezXU6() {
    int randomValue = new Random().nextInt();
    TradeConfig.setRunTimeMode(randomValue);
    assertEquals(randomValue, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetJDBCDriverNeedsGlobalTransation_lGWd0() {
    TradeConfig.setJDBCDriverNeedsGlobalTransation(true);
    assertTrue(TradeConfig.JDBCDriverNeedsGlobalTransation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetJDBCDriverNeedsGlobalTransationFalse_ATyT1() {
    TradeConfig.setJDBCDriverNeedsGlobalTransation(false);
    assertFalse(TradeConfig.JDBCDriverNeedsGlobalTransation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_GuEq0() {
    String name = TradeConfig.rndFullName();
    assertNotNull(name);
    assertTrue(name.contains("first:"));
    assertTrue(name.contains("last:"));
    assertTrue(name.matches("first:\\d+ last:\\d+"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERS_Acsk0() {
    int expected = 100;
    int actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_QUOTES_xhuy0() {
    int expected = 10;
    int actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPublishQuotePriceChange_true_vNqU0() {
    TradeConfig.setPublishQuotePriceChange(true);
    assertTrue(TradeConfig.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPublishQuotePriceChange_false_jHIK1() {
    TradeConfig.setPublishQuotePriceChange(false);
    assertFalse(TradeConfig.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetListQuotePriceChangeFrequency_aMza0() {
    TradeConfig config = new TradeConfig();
    config.setListQuotePriceChangeFrequency(10);
    assertEquals(10, config.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode_gXba0() {
    int value = 1;
    TradeConfig.setOrderProcessingMode(value);
    assertEquals(value, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode_2_YHDP1() {
    int value = 2;
    TradeConfig.setOrderProcessingMode(value);
    assertEquals(value, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode_3_FbIV2() {
    int value = 3;
    TradeConfig.setOrderProcessingMode(value);
    assertEquals(value, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode_4_uKTg3() {
    int value = 4;
    TradeConfig.setOrderProcessingMode(value);
    assertEquals(value, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_1_gRNv0() {
    TradeConfig.setMAX_USERS(10);
    assertEquals(10, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_2_DkmD1() {
    TradeConfig.setMAX_USERS(20);
    assertEquals(20, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_3_hqsm2() {
    TradeConfig.setMAX_USERS(30);
    assertEquals(30, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_4_CBiD3() {
    TradeConfig.setMAX_USERS(40);
    assertEquals(40, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_5_vLaw4() {
    TradeConfig.setMAX_USERS(50);
    assertEquals(50, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_6_blRU5() {
    TradeConfig.setMAX_USERS(60);
    assertEquals(60, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_7_pPRx6() {
    TradeConfig.setMAX_USERS(70);
    assertEquals(70, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_8_EVry7() {
    TradeConfig.setMAX_USERS(80);
    assertEquals(80, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_9_xBhb8() {
    TradeConfig.setMAX_USERS(90);
    assertEquals(90, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_10_BHMC9() {
    TradeConfig.setMAX_USERS(100);
    assertEquals(100, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_11_QumX10() {
    TradeConfig.setMAX_USERS(110);
    assertEquals(110, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_12_oJWG11() {
    TradeConfig.setMAX_USERS(120);
    assertEquals(120, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_13_wNsm12() {
    TradeConfig.setMAX_USERS(130);
    assertEquals(130, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_14_rxgP13() {
    TradeConfig.setMAX_USERS(140);
    assertEquals(140, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_15_QAil14() {
    TradeConfig.setMAX_USERS(150);
    assertEquals(150, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_16_eFHz15() {
    TradeConfig.setMAX_USERS(160);
    assertEquals(160, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_17_VPjM16() {
    TradeConfig.setMAX_USERS(170);
    assertEquals(170, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_18_UxYa17() {
    TradeConfig.setMAX_USERS(180);
    assertEquals(180, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequency_vYnw0() {
    int expected = 10;
    int actual = TradeConfig.getListQuotePriceChangeFrequency();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccessMode_vKhj0() {
    TradeConfig config = new TradeConfig();
    config.setAccessMode(1);
    assertEquals(1, config.getAccessMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccessModeWithInvalidValue_Iehz1() {
    TradeConfig config = new TradeConfig();
    config.setAccessMode(0);
    assertEquals(0, config.getAccessMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_HOLDINGS_qlod0() {
    int expected = 10;
    int actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterations_hKRU0() {
    int iter = 5;
    TradeConfig.setPrimIterations(iter);
    assertEquals(iter, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterationsWithZeroValue_JkQL2() {
    int iter = 0;
    TradeConfig.setPrimIterations(iter);
    assertEquals(0, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_InvalidInput_kHXe1() {
    TradeConfig tradeConfig = new TradeConfig();
    String userID = tradeConfig.nextUserID();
    assertNotEquals("uid:1", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_QUOTES_LFap0() {
    int expected = 10;
    TradeConfig.setMAX_QUOTES(expected);
    assertEquals(expected, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_QUOTES_Negative_HYFW1() {
    int expected = -1;
    TradeConfig.setMAX_QUOTES(expected);
    assertEquals(expected, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_QUOTES_Zero_liDM2() {
    int expected = 0;
    TradeConfig.setMAX_QUOTES(expected);
    assertEquals(expected, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUpdateQuotePricesWithFalse_XNsK1() {
    TradeConfig config = new TradeConfig();
    config.setUpdateQuotePrices(false);
    assertFalse(config.getUpdateQuotePrices());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetScenarioCount_awFb0() {
    TradeConfig config = new TradeConfig();
    config.setScenarioCount(10);
    assertEquals(10, config.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetScenarioCountWithZeroValue_QHLt2() {
    TradeConfig config = new TradeConfig();
    config.setScenarioCount(0);
    assertEquals(0, config.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetScenarioCountWithLargeValue_NQGL3() {
    TradeConfig config = new TradeConfig();
    config.setScenarioCount(1000);
    assertEquals(1000, config.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPublishQuotePriceChange_True_VAfN0() {
    TradeConfig config = new TradeConfig();
    config.setPublishQuotePriceChange(true);
    assertTrue(config.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPublishQuotePriceChange_True_True_uJBh2() {
    TradeConfig config = new TradeConfig();
    config.setPublishQuotePriceChange(true);
    config.setPublishQuotePriceChange(true);
    assertTrue(config.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPublishQuotePriceChange_True_False_fxyG3() {
    TradeConfig config = new TradeConfig();
    config.setPublishQuotePriceChange(true);
    config.setPublishQuotePriceChange(false);
    assertFalse(config.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPublishQuotePriceChange_False_True_QbLZ4() {
    TradeConfig config = new TradeConfig();
    config.setPublishQuotePriceChange(false);
    config.setPublishQuotePriceChange(true);
    assertTrue(config.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterface_KxVV0() {
    int webInterface = TradeConfig.getWebInterface();
    assertEquals(1, webInterface);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_1_CNOC0() {
    int i = 10;
    int result = TradeConfig.rndInt(i);
    assertTrue(result >= 0 && result < i);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_2_xbwb1() {
    int i = 100;
    int result = TradeConfig.rndInt(i);
    assertTrue(result >= 0 && result < i);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_3_wNyU2() {
    int i = 1000;
    int result = TradeConfig.rndInt(i);
    assertTrue(result >= 0 && result < i);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_4_wipq3() {
    int i = 10000;
    int result = TradeConfig.rndInt(i);
    assertTrue(result >= 0 && result < i);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_5_Ogcu4() {
    int i = 100000;
    int result = TradeConfig.rndInt(i);
    assertTrue(result >= 0 && result < i);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_6_omdY5() {
    int i = 1000000;
    int result = TradeConfig.rndInt(i);
    assertTrue(result >= 0 && result < i);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_7_LFNo6() {
    int i = 10000000;
    int result = TradeConfig.rndInt(i);
    assertTrue(result >= 0 && result < i);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_8_ouPX7() {
    int i = 100000000;
    int result = TradeConfig.rndInt(i);
    assertTrue(result >= 0 && result < i);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndInt_9_AGoO8() {
    int i = 1000000000;
    int result = TradeConfig.rndInt(i);
    assertTrue(result >= 0 && result < i);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRandom_1_FAEu0() {
    double result = TradeConfig.random();
    assertTrue(result >= 0.0 && result < 1.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRandom_23_NdvN22() {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Default_miPL0() {
    int expected = 0;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Mode4_Vgde4() {
    int expected = 4;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Positive_QcNm0() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertTrue(result.doubleValue() > 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Positive_RoundUp_lWtc3() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertTrue(result.doubleValue() > 0.0);
    assertEquals(BigDecimal.ONE, result.setScale(0, BigDecimal.ROUND_HALF_UP));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_CwZW0() {
    String symbol = TradeConfig.rndSymbol();
    assertNotNull(symbol);
    assertTrue(symbol.startsWith("s:"));
    assertTrue(symbol.length() > 2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimalWithZeroValue_KGAb3() {
    BigDecimal result = TradeConfig.rndBigDecimal(0.0f);
    assertEquals(0.00, result.doubleValue(), 0.00001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterface_PyCu0() {
    TradeConfig config = new TradeConfig();
    config.setWebInterface(1);
    assertEquals(1, config.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_GuEq0_1() {
    String name = TradeConfig.rndFullName();
    assertNotNull(name);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_GuEq0_2() {
    String name = TradeConfig.rndFullName();
    assertTrue(name.contains("first:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_GuEq0_3() {
    String name = TradeConfig.rndFullName();
    assertTrue(name.contains("last:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_GuEq0_4() {
    String name = TradeConfig.rndFullName();
    assertTrue(name.matches("first:\\d+ last:\\d+"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixes_multiple_GwgI2_1() {
    int[][] scenarioMixes = TradeConfig.getScenarioMixes();
    assertEquals(2, scenarioMixes.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_USERS_19_tFSC18() {
    TradeConfig.setMAX_USERS(190);
    assertEquals(190, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Positive_RoundUp_lWtc3_2() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(BigDecimal.ONE, result.setScale(0, BigDecimal.ROUND_HALF_UP));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_CwZW0_1() {
    String symbol = TradeConfig.rndSymbol();
    assertNotNull(symbol);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_CwZW0_2() {
    String symbol = TradeConfig.rndSymbol();
    assertTrue(symbol.startsWith("s:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_CwZW0_3() {
    String symbol = TradeConfig.rndSymbol();
    assertTrue(symbol.length() > 2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard_OCfX0_1() {
    String creditCard = TradeConfig.rndCreditCard();
    assertNotNull(creditCard);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_WFUZ0_1() {
    TradeConfig config = new TradeConfig();
    String nextUser = config.rndUserID();
    assertNotNull(nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserIDWithMaxUsers_CCSi1_1() {
    TradeConfig config = new TradeConfig();
    config.setMAX_USERS(10);
    String nextUser = config.rndUserID();
    assertNotNull(nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBalanceWithInvalidInput_KzwP1_eeat0() {
    String balance = TradeConfig.rndBalance();
    assertEquals("1000000", balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullNameWithValidInput_eMsb2_yQpE0_1() {
    String name = TradeConfig.rndBalance();
    assertNotNull(name);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_HOLDINGS_YPeN0_KEbI0() {
    int expected = 10;
    TradeConfig.setMAX_HOLDINGS(expected);
    assertEquals(expected, TradeConfig.getMAX_HOLDINGS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_HOLDINGS_NegativeValue_MTsq1_DrlO0() {
    int expected = -1;
    TradeConfig.setMAX_HOLDINGS(expected);
    assertEquals(expected, TradeConfig.getMAX_HOLDINGS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_HOLDINGS_ZeroValue_OppR2_Hwth0() {
    int expected = 0;
    TradeConfig.setMAX_HOLDINGS(expected);
    assertEquals(expected, TradeConfig.getMAX_HOLDINGS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryInterval_OCYq0_oHJS0() {
    int seconds = 10;
    TradeConfig.setMarketSummaryInterval(seconds);
    assertEquals(seconds, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_KoPA0() {
    TradeConfig.setMAX_USERS(190);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUpdateQuotePrices_True_sLRV0_GqiV0() {
    TradeConfig.setUpdateQuotePrices(true);
    assertTrue(TradeConfig.getUpdateQuotePrices());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccessModeWithNullValue_cwhh2_hpnI0() {
    TradeConfig config = new TradeConfig();
    config.setAccessMode(0);
    assertNotNull(config.getAccessMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_gyGB0_JGpZ0() {
    TradeConfig tradeConfig = new TradeConfig();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDisplayOrderAlertsWithFalse_QMNL2_HzUE0() {
    TradeConfig config = new TradeConfig();
    config.setDisplayOrderAlerts(false);
    assertFalse(config.getDisplayOrderAlerts());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_empty_Hnbe1_RdRX0() {
    String[] webInterfaceNames = new String[0];
    assertEquals(0, webInterfaceNames.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_single_yiDZ2_GXop0_1() {
    String[] webInterfaceNames = {"WebInterface1"};
    assertEquals(1, webInterfaceNames.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_single_yiDZ2_GXop0_2() {
    String[] webInterfaceNames = {"WebInterface1"};
    assertEquals("WebInterface1", webInterfaceNames[0]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_multiple_ZWCP3_QCxB0_1() {
    String[] webInterfaceNames = {"WebInterface1", "WebInterface2"};
    assertEquals(2, webInterfaceNames.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_multiple_ZWCP3_QCxB0_2() {
    String[] webInterfaceNames = {"WebInterface1", "WebInterface2"};
    assertEquals("WebInterface1", webInterfaceNames[0]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_multiple_ZWCP3_QCxB0_3() {
    String[] webInterfaceNames = {"WebInterface1", "WebInterface2"};
    assertEquals("WebInterface2", webInterfaceNames[1]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLongRun_Invalid_MyJb3_twxG0() {
    TradeConfig.setLongRun(false);
    assertFalse(TradeConfig.getLongRun());
  }
}