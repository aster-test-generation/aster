/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPStreaming_Test_Failing {
  private static String initTime;
  private static int hitCount;
  private HttpServletRequest request;
  @Mock
  private HttpServletResponse response;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_VtQp0() {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    String servletInfo = pingJSONPStreaming.getServletInfo();
    assertEquals("Basic JSON generation and parsing in a servlet", servletInfo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithNullArgument_cSOS1_jhHz0() {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    String servletInfo = pingJSONPStreaming.getServletInfo();
    assertNotNull(servletInfo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_nUIn0_XsBj0() throws ServletException, IOException {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    try {
      pingJSONPStreaming.doGet(req, res);
    } catch (ServletException e) {
      e.printStackTrace();
    }
    assertEquals("text/html", res.getContentType());
    assertEquals("initTime: 0\nhitCount: 1\n", out.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithException_nzEx1_UlvZ0() {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    try {
      when(res.getOutputStream()).thenReturn(out);
    } catch (IOException e) {
      e.printStackTrace();
    }
    when(req.getParameter("initTime")).thenThrow(new RuntimeException("Test exception"));
    try {
      pingJSONPStreaming.doGet(req, res);
    } catch (ServletException e) {
      e.printStackTrace();
    } catch (IOException e) {
      e.printStackTrace();
    }
    assertEquals("text/html", res.getContentType());
    assertEquals("initTime: 0\nhitCount: 1\n", out.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithNullArgument_cSOS1_jhHz0_fid2() {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    String servletInfo = pingJSONPStreaming.getServletInfo();
    assertNull(servletInfo);
  }
}