/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import javax.jms.Topic;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeDirect_Coverage_Test_Passing {
  private Topic tradeBrokerTopic;
  private AsyncOrderSubmitter asyncOrderSubmitter;
  private ResultSet rs;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_PmXw1() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = null;
    String companyName = "ABC Company";
    BigDecimal price = new BigDecimal(100.0);
    QuoteDataBean quoteData = tradeDirect.createQuote(symbol, companyName, price);
    Assertions.assertNull(quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_mNlk2() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    String companyName = null;
    BigDecimal price = new BigDecimal(100.0);
    QuoteDataBean quoteData = tradeDirect.createQuote(symbol, companyName, price);
    Assertions.assertNull(quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_BitT3() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    String companyName = "ABC Company";
    BigDecimal price = null;
    QuoteDataBean quoteData = tradeDirect.createQuote(symbol, companyName, price);
    Assertions.assertNull(quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_sRIk4() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    String companyName = "ABC Company";
    BigDecimal price = new BigDecimal(100.0);
    QuoteDataBean quoteData = tradeDirect.createQuote(symbol, companyName, price);
    Assertions.assertNull(quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_ConnectionNull_ZSov0() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.cancelOrder(1, true);
      Assertions.fail("Expected exception not thrown");
    } catch (Exception e) {
      Assertions.assertTrue(e instanceof NullPointerException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_OrderDataBean_mpsC5() throws Exception {
    OrderDataBean orderData = new OrderDataBean();
    Assertions.assertNotNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_LogTrace_pzww6() throws Exception {
    Log.trace("Testing Log.trace()");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_creditAccountBalance_KUHy11() throws Exception {
    AccountDataBean accountData = new AccountDataBean();
    BigDecimal total = new BigDecimal(100.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_DfWs0() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders("userID");
      Assertions.assertNotNull(orderDataBeans);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUserID_mnNm1() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders("invalidUserID");
      Assertions.assertNotNull(orderDataBeans);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithNullUserID_HTzJ2() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders(null);
      Assertions.assertNotNull(orderDataBeans);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithEmptyUserID_rSAn3() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders("");
      Assertions.assertNotNull(orderDataBeans);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void cancelOrder(Connection conn, int orderID) {
    cancelOrder(conn, orderID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImpl_OECn0() {
    TradeDirect tradeDirect = new TradeDirect();
    int actual = tradeDirect.getImpl();
    int expected = TradeConfig.DIRECT;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void cancelOrder_fid2(Connection conn, int orderID) {
    cancelOrder_fid2(conn, orderID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void cancelOrder_fid3(Connection conn, int orderID) {
    cancelOrder_fid3(conn, orderID);
  }
}