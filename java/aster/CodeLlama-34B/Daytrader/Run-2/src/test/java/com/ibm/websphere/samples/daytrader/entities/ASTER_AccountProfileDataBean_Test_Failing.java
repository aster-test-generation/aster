/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountProfileDataBean_Test_Failing {
  public void testSetFullName_nSRa0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setFullName("John Doe");
    assertEquals("John Doe", accountProfileDataBean.getFullName());
  }

  public void testSetFullNameWithNull_qKHV1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setFullName(null);
    assertNull(accountProfileDataBean.getFullName());
  }

  public void testSetFullNameWithEmptyString_dBup2() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setFullName("");
    assertEquals("", accountProfileDataBean.getFullName());
  }

  public void testSetFullNameWithWhitespace_zqoK3() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setFullName(" ");
    assertEquals(" ", accountProfileDataBean.getFullName());
  }

  public void testSetFullNameWithMultipleNames_WKOD4() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setFullName("John Doe Jane Smith");
    assertEquals("John Doe Jane Smith", accountProfileDataBean.getFullName());
  }

  public void testSetFullNameWithSpecialCharacters_VWaa5() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setFullName("John Doe!@#$%^&*()_+");
    assertEquals("John Doe!@#$%^&*()_+", accountProfileDataBean.getFullName());
  }

  public void testSetFullNameWithDifferentCasing_aHNJ6() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setFullName("john doe");
    assertEquals("john doe", accountProfileDataBean.getFullName());
  }

  public void testSetFullNameWithDifferentCasingAndWhitespace_yUkX7() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setFullName("john  doe");
    assertEquals("john  doe", accountProfileDataBean.getFullName());
  }

  public void testSetFullNameWithDifferentCasingAndSpecialCharacters_UPQg8() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setFullName("john!@#$%^&*()_+ doe");
    assertEquals("john!@#$%^&*()_+ doe", accountProfileDataBean.getFullName());
  }

  public void testSetFullNameWithDifferentCasingAndWhitespaceAndSpecialCharacters_sOyB9() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setFullName("john!@#$%^&*()_+  doe");
    assertEquals("john!@#$%^&*()_+  doe", accountProfileDataBean.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEmailWithNullAccount_uhka4() {
    AccountProfileDataBean account = null;
    String email = account.getEmail();
    assertNull(email);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAddressWithInvalidAddress_asnT4() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    String address = accountProfileDataBean.getAddress();
    assertNotEquals("123 Main St", address);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_Tlvq0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountProfileDataBean.print();
    assertEquals("AccountProfileDataBean[userID=userID, password=password, fullName=fullName, address=address, email=email, creditCard=creditCard]", accountProfileDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithNullValues_UScs1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean(null, null, null, null, null, null);
    accountProfileDataBean.print();
    assertEquals("AccountProfileDataBean[userID=null, password=null, fullName=null, address=null, email=null, creditCard=null]", accountProfileDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithEmptyValues_Doee2() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("", "", "", "", "", "");
    accountProfileDataBean.print();
    assertEquals("AccountProfileDataBean[userID=, password=, fullName=, address=, email=, creditCard=]", accountProfileDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithInvalidValues_CXGi3() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("invalidUserID", "invalidPassword", "invalidFullName", "invalidAddress", "invalidEmail", "invalidCreditCard");
    accountProfileDataBean.print();
    assertEquals("AccountProfileDataBean[userID=invalidUserID, password=invalidPassword, fullName=invalidFullName, address=invalidAddress, email=invalidEmail, creditCard=invalidCreditCard]", accountProfileDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithValidValues_DwOq4() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("validUserID", "validPassword", "validFullName", "validAddress", "validEmail", "validCreditCard");
    accountProfileDataBean.print();
    assertEquals("AccountProfileDataBean[userID=validUserID, password=validPassword, fullName=validFullName, address=validAddress, email=validEmail, creditCard=validCreditCard]", accountProfileDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithSpecialCharacters_OUke6() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID!@#$%^&*()_+", "password!@#$%^&*()_+", "fullName!@#$%^&*()_+", "address!@#$%^&*()_+", "email!@#$%^&*()_+", "creditCard!@#$%^&*()_+");
    accountProfileDataBean.print();
    assertEquals("AccountProfileDataBean[userID=userID!@#$%^&*()_+, password=password!@#$%^&*()_+, fullName=fullName!@#$%^&*()_+, address=address!@#$%^&*()_+, email=email!@#$%^&*()_+, creditCard=creditCard!@#$%^&*()_+]", accountProfileDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPasswordWithInvalidPassword_MjqV3() {
    AccountProfileDataBean account = new AccountProfileDataBean("user1", "invalid_password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    String password = account.getPassword();
    assertNotEquals("invalid_password", password);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPasswordWithNullAccount_ncxZ4() {
    AccountProfileDataBean account = null;
    String password = account.getPassword();
    assertNull(password);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPasswordWithInvalidAccount_vpVG5() {
    AccountProfileDataBean account = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "johndoe@example.com", "1234567890");
    String password = account.getPassword();
    assertNotEquals("password1", password);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithInvalidPassword_iYcV3() {
    AccountProfileDataBean account = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    account.setPassword("invalidPassword");
    assertEquals("password1", account.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithDifferentCase_XTIB5() {
    AccountProfileDataBean account = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    account.setPassword("VALIDPASSWORD");
    assertEquals("validpassword", account.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAddressInvalid_jVHn4() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountProfileDataBean.setAddress("invalidAddress");
    assertNotEquals("invalidAddress", accountProfileDataBean.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccount_fUPP0_1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccount_fUPP0_2() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
    assertEquals("userID", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccount_fUPP0_3() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
    assertEquals("password", accountDataBean.getProfile().getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccount_fUPP0_4() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
    assertEquals("fullName", accountDataBean.getProfile().getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccount_fUPP0_5() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
    assertEquals("address", accountDataBean.getProfile().getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccount_fUPP0_6() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
    assertEquals("email", accountDataBean.getProfile().getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccount_fUPP0_7() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
    assertEquals("creditCard", accountDataBean.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountWithEmptyProfile_ClUV2_1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("", "", "", "", "", "");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountWithEmptyProfile_ClUV2_2() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("", "", "", "", "", "");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
    assertEquals("", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountWithEmptyProfile_ClUV2_3() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("", "", "", "", "", "");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
    assertEquals("", accountDataBean.getProfile().getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountWithEmptyProfile_ClUV2_4() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("", "", "", "", "", "");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
    assertEquals("", accountDataBean.getProfile().getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountWithEmptyProfile_ClUV2_5() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("", "", "", "", "", "");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
    assertEquals("", accountDataBean.getProfile().getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountWithEmptyProfile_ClUV2_6() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("", "", "", "", "", "");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
    assertEquals("", accountDataBean.getProfile().getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountWithEmptyProfile_ClUV2_7() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("", "", "", "", "", "");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
    assertEquals("", accountDataBean.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAddressWithInvalidAddress_asnT4_fid1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user1", "password1", "John Doe", "not equal", "johndoe@example.com", "1234567890");
    String address = accountProfileDataBean.getAddress();
    assertNotEquals("not equal", address);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_Tlvq0_fid1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountProfileDataBean.print();
    assertEquals("	Account Profile Data for userID:userID		   passwd:password		   fullName:fullName		    address:address		      email:email		 creditCard:creditCard", accountProfileDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithNullValues_UScs1_fid1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean(null, null, null, null, null, null);
    accountProfileDataBean.print();
    assertEquals("	Account Profile Data for userID:null		   passwd:null		   fullName:null		    address:null		      email:null		 creditCard:null", accountProfileDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithEmptyValues_Doee2_fid1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("", "", "", "", "", "");
    accountProfileDataBean.print();
    assertEquals("	Account Profile Data for userID:		   passwd:		   fullName:		    address:		      email:		 creditCard:", accountProfileDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithSpecialCharacters_OUke6_fid1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID!@#$%^&*()_+", "password!@#$%^&*()_+", "fullName!@#$%^&*()_+", "address!@#$%^&*()_+", "email!@#$%^&*()_+", "creditCard!@#$%^&*()_+");
    accountProfileDataBean.print();
    assertEquals("	Account Profile Data for userID:userID!@#$%^&*()_+		   passwd:password!@#$%^&*()_+		   fullName:fullName!@#$%^&*()_+		    address:address!@#$%^&*()_+		      email:email!@#$%^&*()_+		 creditCard:creditCard!@#$%^&*()_+", accountProfileDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPasswordWithNullAccount_ncxZ4_fid1() {
    AccountProfileDataBean account = null;
    String password = null;
    assertEquals(password, account.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAddressInvalid_jVHn4_fid1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountProfileDataBean.setAddress("not equal");
    assertNotEquals("not equal", accountProfileDataBean.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccount_fUPP0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
    assertNotNull(accountDataBean);
    assertEquals("userID", accountDataBean.getProfileID());
    assertEquals("password", accountDataBean.getProfile().getPassword());
    assertEquals("fullName", accountDataBean.getProfile().getFullName());
    assertEquals("address", accountDataBean.getProfile().getAddress());
    assertEquals("email", accountDataBean.getProfile().getEmail());
    assertEquals("creditCard", accountDataBean.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountWithEmptyProfile_ClUV2() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("", "", "", "", "", "");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
    assertNotNull(accountDataBean);
    assertEquals("", accountDataBean.getProfileID());
    assertEquals("", accountDataBean.getProfile().getPassword());
    assertEquals("", accountDataBean.getProfile().getFullName());
    assertEquals("", accountDataBean.getProfile().getAddress());
    assertEquals("", accountDataBean.getProfile().getEmail());
    assertEquals("", accountDataBean.getProfile().getCreditCard());
  }
}