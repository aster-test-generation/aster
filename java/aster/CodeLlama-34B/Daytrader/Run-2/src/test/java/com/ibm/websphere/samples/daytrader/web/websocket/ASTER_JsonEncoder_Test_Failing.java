/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.TimeUnit;
import javax.websocket.EncodeException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JsonEncoder_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncode_CapI0() throws EncodeException {
    JsonEncoder encoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    message.setKey("key");
    message.setValue("value");
    String encoded = encoder.encode(message);
    assertEquals("{\"key\":\"key\",\"value\":\"value\"}", encoded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithNullKey_OeSX1() throws EncodeException {
    JsonEncoder encoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    message.setValue("value");
    String encoded = encoder.encode(message);
    assertEquals("{\"value\":\"value\"}", encoded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithNullValue_YODO2() throws EncodeException {
    JsonEncoder encoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    message.setKey("key");
    String encoded = encoder.encode(message);
    assertEquals("{\"key\":\"key\"}", encoded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithEmptyKey_pQur3() throws EncodeException {
    JsonEncoder encoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    message.setKey("");
    message.setValue("value");
    String encoded = encoder.encode(message);
    assertEquals("{\"\":\"value\"}", encoded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithEmptyValue_jkDY4() throws EncodeException {
    JsonEncoder encoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    message.setKey("key");
    message.setValue("");
    String encoded = encoder.encode(message);
    assertEquals("{\"key\":\"\"}", encoded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithNullMessage_JIbE5() throws EncodeException {
    JsonEncoder encoder = new JsonEncoder();
    String encoded = encoder.encode(null);
    assertNull(encoded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithEmptyKey_pQur3_fid2() throws EncodeException {
    JsonEncoder encoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    message.setKey("");
    message.setValue("value");
    String encoded = encoder.encode(message);
    assertEquals("{\"value\":\"value\"}", encoded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithEmptyValue_jkDY4_fid2() throws EncodeException {
    JsonEncoder encoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    message.setKey("key");
    message.setValue("");
    String encoded = encoder.encode(message);
    assertEquals("{\"key\":\"key\"}", encoded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithNullMessage_JIbE5_fid2() throws EncodeException {
    JsonEncoder encoder = new JsonEncoder();
    String encoded = encoder.encode(null);
    assertEquals("", encoded);
  }
}