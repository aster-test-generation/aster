/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TimerStat_Test_Passing {
  private TimerStat timerStat;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMin_PDdi0() {
    TimerStat timerStat = new TimerStat();
    double min = timerStat.getMin();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinWithNonZeroValue_qlHQ1() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(10.0);
    double min = timerStat.getMin();
    assertEquals(10.0, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinWithNegativeValue_wccM2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(-10.0);
    double min = timerStat.getMin();
    assertEquals(-10.0, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinWithZeroValue_QCna3() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(0.0);
    double min = timerStat.getMin();
    assertEquals(0.0, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinWithInvalidValue_FSre4() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(Double.NaN);
    double min = timerStat.getMin();
    assertEquals(Double.NaN, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinWithInfinityValue_VmPH6() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(Double.POSITIVE_INFINITY);
    double min = timerStat.getMin();
    assertEquals(Double.POSITIVE_INFINITY, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinWithNegativeInfinityValue_XjuX7() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(Double.NEGATIVE_INFINITY);
    double min = timerStat.getMin();
    assertEquals(Double.NEGATIVE_INFINITY, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinSecs_GsXH0() {
    TimerStat timerStat = new TimerStat();
    double minSecs = timerStat.getMinSecs();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMax_validInput_heVh0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(100.0);
    assertEquals(100.0, timerStat.getMax(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMax_invalidInput_tilb1() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(-100.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMax_nonNumericInput12_PfBi15() {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMin_BkKL0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(10.0);
    assertEquals(10.0, timerStat.getMin(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMinWithNegativeValue_IcSq1() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(-10.0);
    assertEquals(-10.0, timerStat.getMin(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMinWithZeroValue_izQy2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(0.0);
    assertEquals(0.0, timerStat.getMin(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalTime_jEdI0() {
    TimerStat timerStat = new TimerStat();
    double totalTime = timerStat.getTotalTime();
    assertEquals(0.0, totalTime, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalTime_IYjO0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setTotalTime(10.0);
    assertEquals(10.0, timerStat.getTotalTime(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCount_1_pEiS0() {
    TimerStat timerStat = new TimerStat();
    int count = timerStat.getCount();
    assertEquals(0, count);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCount_2_jrUU1() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(10);
    int count = timerStat.getCount();
    assertEquals(10, count);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCount_3_jgVt2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(10);
    timerStat.setCount(5);
    int count = timerStat.getCount();
    assertEquals(5, count);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCount_4_ncnE3() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(10);
    timerStat.setCount(5);
    timerStat.setCount(15);
    int count = timerStat.getCount();
    assertEquals(15, count);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCount_5_MENM4() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(10);
    timerStat.setCount(5);
    timerStat.setCount(15);
    timerStat.setCount(20);
    int count = timerStat.getCount();
    assertEquals(20, count);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCount_6_KEFk5() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(10);
    timerStat.setCount(5);
    timerStat.setCount(15);
    timerStat.setCount(20);
    timerStat.setCount(25);
    int count = timerStat.getCount();
    assertEquals(25, count);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCount_7_ivjW6() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(10);
    timerStat.setCount(5);
    timerStat.setCount(15);
    timerStat.setCount(20);
    timerStat.setCount(25);
    timerStat.setCount(30);
    int count = timerStat.getCount();
    assertEquals(30, count);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCount_8_GnNH7() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(10);
    timerStat.setCount(5);
    timerStat.setCount(15);
    timerStat.setCount(20);
    timerStat.setCount(25);
    timerStat.setCount(30);
    timerStat.setCount(35);
    int count = timerStat.getCount();
    assertEquals(35, count);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCount_9_YUtw8() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(10);
    timerStat.setCount(5);
    timerStat.setCount(15);
    timerStat.setCount(20);
    timerStat.setCount(25);
    timerStat.setCount(30);
    timerStat.setCount(35);
    timerStat.setCount(40);
    int count = timerStat.getCount();
    assertEquals(40, count);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCount_10_ixVw9() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(10);
    timerStat.setCount(5);
    timerStat.setCount(15);
    timerStat.setCount(20);
    timerStat.setCount(25);
    timerStat.setCount(30);
    timerStat.setCount(35);
    timerStat.setCount(40);
    timerStat.setCount(45);
    int count = timerStat.getCount();
    assertEquals(45, count);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCount_11_sDvG10() {
    TimerStat timerStat = new TimerStat();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_1_ThTh0() {
    TimerStat timerStat = new TimerStat();
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(0.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_2_chKW1() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(1000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(1.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_3_ZxSS2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(10000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(10.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_4_RPNU3() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(100000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(100.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_5_GAsw4() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(1000000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(1000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_6_RCrv5() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(10000000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(10000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_7_OYSp6() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(100000000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(100000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_8_yjjD7() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(1000000000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(1000000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_9_TrxG8() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(10000000000L);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(10000000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_10_QglG9() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(100000000000L);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(100000000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_11_lGrw10() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(1000000000000L);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(1000000000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMax_nullInput_LbKS2_SCQG0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(0.0);
    assertEquals(0.0, timerStat.getMax(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMax_nonNumericInput3_ekvV6_GEKm1() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(-100.0);
    assertEquals(-100.0, timerStat.getMax(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_EXSy0() {
    timerStat = new TimerStat();
  }
}