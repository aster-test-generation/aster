/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeScenarioServlet_Test_Failing {
  private TradeScenarioServlet servlet;
  @Mock
  private ServletConfig servletConfig;
  @Mock
  private ServletContext servletContext;
  @Mock
  private HttpServletRequest request;
  @Mock
  private HttpServletResponse response;
  private static final String tasPathPrefix = "/app?action=";

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_wfuy0() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doGet(request, response);
    verify(response).setContentType("text/html");
    verify(response).setStatus(HttpServletResponse.SC_OK);
    verify(response).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithInvalidRequest_WubJ1() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("symbol")).thenReturn(null);
    servlet.doGet(request, response);
    verify(response).setContentType("text/html");
    verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(response).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithValidRequest_CCJA2() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("symbol")).thenReturn("AAPL");
    servlet.doGet(request, response);
    verify(response).setContentType("text/html");
    verify(response).setStatus(HttpServletResponse.SC_OK);
    verify(response).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithInvalidSymbol_kIjf3() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("symbol")).thenReturn("INVALID");
    servlet.doGet(request, response);
    verify(response).setContentType("text/html");
    verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(response).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithInvalidSymbolAndValidRequest_fwLK7() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doGet(request, response);
    verify(response).sendError(anyInt(), anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_bTOU0() throws ServletException, IOException {
    when(servlet.getServletInfo()).thenReturn("TradeScenarioServlet emulates a population of web users");
    assertEquals("TradeScenarioServlet emulates a population of web users", servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithInvalidSymbolAndValidRequest_fwLK7_fid2() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_RAxh0() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doPost(request, response);
    verify(request).getParameter("task");
    verify(response).setStatus(HttpServletResponse.SC_OK);
  }
}