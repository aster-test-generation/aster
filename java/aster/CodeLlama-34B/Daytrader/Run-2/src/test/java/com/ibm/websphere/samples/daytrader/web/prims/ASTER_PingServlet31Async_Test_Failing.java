/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet31Async_Test_Failing {
  private static String initTime;
  private static int hitCount;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_MkGM0() {
    PingServlet31Async servlet = new PingServlet31Async();
    String expected = "Basic dynamic HTML generation through a servlet";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_bgLB0() throws ServletException, IOException {
    PingServlet31Async servlet = new PingServlet31Async();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_WithException_eQaC1() throws ServletException, IOException {
    PingServlet31Async servlet = new PingServlet31Async();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    doThrow(new IOException()).when(res).getWriter();
    servlet.doGet(req, res);
    verify(res).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_WithNullRequest_RIMY2() throws ServletException, IOException {
    PingServlet31Async servlet = new PingServlet31Async();
    HttpServletRequest req = null;
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_WithNullResponse_KTpU3() throws ServletException, IOException {
    PingServlet31Async servlet = new PingServlet31Async();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = null;
    servlet.doGet(req, res);
    verify(req).getRequestDispatcher("/error");
    verify(req).getAttribute("javax.servlet.error.status_code");
    verify(req).getAttribute("javax.servlet.error.message");
    verify(req).getAttribute("javax.servlet.error.exception_type");
    verify(req).getAttribute("javax.servlet.error.exception");
    verify(req).getAttribute("javax.servlet.error.request_uri");
    verify(req).getAttribute("javax.servlet.error.servlet_name");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_WithNullRequestAndResponse_SNci4() throws ServletException, IOException {
    PingServlet31Async servlet = new PingServlet31Async();
    HttpServletRequest req = null;
    HttpServletResponse res = null;
    servlet.doGet(req, res);
    verify(req).getRequestDispatcher("/error");
    verify(req).getAttribute("javax.servlet.error.status_code");
    verify(req).getAttribute("javax.servlet.error.message");
    verify(req).getAttribute("javax.servlet.error.exception_type");
    verify(req).getAttribute("javax.servlet.error.exception");
    verify(req).getAttribute("javax.servlet.error.request_uri");
    verify(req).getAttribute("javax.servlet.error.servlet_name");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_WithInvalidRequest_TVii5() throws ServletException, IOException {
    PingServlet31Async servlet = new PingServlet31Async();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    doThrow(new ServletException()).when(req).getRequestDispatcher("/error");
    servlet.doGet(req, res);
    verify(res).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_bgLB0_fid2() throws ServletException, IOException {
    PingServlet31Async servlet = new PingServlet31Async();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).getWriter();
    verify(res).flushBuffer();
    // Fix the assertion
    assertEquals(HttpServletResponse.SC_OK, res.getStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_WithException_eQaC1_fid2() throws ServletException, IOException {
    PingServlet31Async servlet = new PingServlet31Async();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    doThrow(new IOException()).when(res).getWriter();
    servlet.doGet(req, res);
    verify(res).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    verify(res).getWriter();
    verify(res).flushBuffer();
    // Fix the assertion
    assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, res.getStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_WithNullRequest_RIMY2_fid2() throws ServletException, IOException {
    PingServlet31Async servlet = new PingServlet31Async();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_WithNullResponse_KTpU3_fid2() throws ServletException, IOException {
    PingServlet31Async servlet = new PingServlet31Async();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = null;
    servlet.doGet(req, res);
    verify(req).getRequestDispatcher("/error");
    verify(req).getAttribute("javax.servlet.error.status_code");
    verify(req).getAttribute("javax.servlet.error.message");
    verify(req).getAttribute("javax.servlet.error.exception_type");
    verify(req).getAttribute("javax.servlet.error.exception");
    verify(req).getAttribute("javax.servlet.error.request_uri");
    verify(req).getAttribute("javax.servlet.error.servlet_name");
    // Fix the assertion
    assertNull(res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_WithNullRequestAndResponse_SNci4_fid2() throws ServletException, IOException {
    PingServlet31Async servlet = new PingServlet31Async();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(req).getRequestDispatcher("/error");
    verify(req).getAttribute("javax.servlet.error.status_code");
    verify(req).getAttribute("javax.servlet.error.message");
    verify(req).getAttribute("javax.servlet.error.exception_type");
    verify(req).getAttribute("javax.servlet.error.exception");
    verify(req).getAttribute("javax.servlet.error.request_uri");
    verify(req).getAttribute("javax.servlet.error.servlet_name");
  }
}