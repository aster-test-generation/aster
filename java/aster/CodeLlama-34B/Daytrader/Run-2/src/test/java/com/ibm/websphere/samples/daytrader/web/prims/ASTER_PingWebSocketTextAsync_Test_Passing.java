/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.websocket.CloseReason;
import javax.websocket.Session;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PingWebSocketTextAsync_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnCloseWithNullSessionAndReason_bqTC3_1() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Session session = null;
    CloseReason reason = null;
    pingWebSocketTextAsync.onClose(session, reason);
    assertEquals(session, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnCloseWithNullSessionAndReason_bqTC3_2() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Session session = null;
    CloseReason reason = null;
    pingWebSocketTextAsync.onClose(session, reason);
    assertEquals(reason, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithNonNullThrowable_lYku2() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable();
    pingWebSocketTextAsync.onError(t);
    assertNotNull(t);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithMessage_WrEE3() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test message");
    pingWebSocketTextAsync.onError(t);
    assertEquals("Test message", t.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithCause_wufK4() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable(new Throwable("Test cause"));
    pingWebSocketTextAsync.onError(t);
    assertEquals("Test cause", t.getCause().getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithStackTrace_dNCj6() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test stack trace");
    pingWebSocketTextAsync.onError(t);
    assertNotNull(t.getStackTrace());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithLocalizedMessage_LTRj7() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test localized message");
    pingWebSocketTextAsync.onError(t);
    assertEquals("Test localized message", t.getLocalizedMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithMessageAndCause_Ckfw8_1() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test message and cause", new Throwable("Test cause"));
    pingWebSocketTextAsync.onError(t);
    assertEquals("Test message and cause", t.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithMessageAndCause_Ckfw8_2() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test message and cause", new Throwable("Test cause"));
    pingWebSocketTextAsync.onError(t);
    assertEquals("Test cause", t.getCause().getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithMessageAndSuppressedException_IzWl9_1() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test message and suppressed exception", new Throwable("Test suppressed exception"));
    pingWebSocketTextAsync.onError(t);
    assertEquals("Test message and suppressed exception", t.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnError_Pyps0_rhka0() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Pyps0");
    pingWebSocketTextAsync.onError(t);
    assertTrue(t.getMessage().contains("Pyps0"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnCloseWithNullSessionAndReason_bqTC3() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Session session = null;
    CloseReason reason = null;
    pingWebSocketTextAsync.onClose(session, reason);
    assertEquals(session, null);
    assertEquals(reason, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithMessageAndCause_Ckfw8() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test message and cause", new Throwable("Test cause"));
    pingWebSocketTextAsync.onError(t);
    assertEquals("Test message and cause", t.getMessage());
    assertEquals("Test cause", t.getCause().getMessage());
  }
}