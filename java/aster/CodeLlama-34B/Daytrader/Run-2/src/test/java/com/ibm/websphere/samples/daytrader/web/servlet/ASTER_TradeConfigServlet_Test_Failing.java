/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirectDBUtils;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigServlet_Test_Failing {
  private TradeDirectDBUtils dbUtils;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullConfig_VKMi1() throws ServletException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.init(null);
    assertNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_WfBO0_jsle0() throws ServletException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    ServletConfig config = mock(ServletConfig.class);
    servlet.init(config);
    assertTrue(servlet.getServletConfig() == config);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithInvalidConfig_NoIO2_WUXt0() throws ServletException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    ServletConfig config = Mockito.mock(ServletConfig.class);
    Mockito.when(config.getServletName()).thenReturn("invalid");
    servlet.init(config);
    assertNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithEmptyServletName_Atrq5_jIyP0() throws ServletException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getServletName()).thenReturn("");
    servlet.init(config);
    assertNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullServletContext_zUHr8_KhEp0() throws ServletException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    ServletConfig config = null;
    servlet.init(config);
    assertNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testService_actionUpdateConfig_AIEp1_VwgL0() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("updateConfig");
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
    verify(req).getParameter("action");
    verify(resp).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testService_actionResetTrade_QZRR2_YYZY0() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("resetTrade");
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
    verify(req).getParameter("action");
    verify(resp).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testService_actionBuildDB_QwKP3_zPIw1() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("buildDB");
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
    verify(req).getParameter("action");
    verify(resp).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testService_actionBuildDBTables_SsSC4_EBgT0() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("buildDBTables");
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
    verify(req).getParameter("action");
    verify(resp).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testService_actionInvalid_NAIX5_Gbet0() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("invalid");
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
    verify(req).getParameter("action");
    verify(resp).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testService_exception_VfZs6_EREN0() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenThrow(new ServletException("Test exception"));
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
    verify(req).getParameter("action");
    verify(resp).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_WfBO0_jsle0_fid1() throws ServletException {
    TradeConfigServlet servlet = mock(TradeConfigServlet.class);
    ServletConfig config = mock(ServletConfig.class);
    servlet.init(config);
    assertTrue(servlet.getServletConfig() == config);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithInvalidConfig_NoIO2_WUXt0_fid1() throws ServletException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    ServletConfig config = Mockito.mock(ServletConfig.class);
    Mockito.when(config.getServletName()).thenReturn("invalid");
    servlet.init(config);
    assertNotNull(servlet.getServletConfig());
  }
}