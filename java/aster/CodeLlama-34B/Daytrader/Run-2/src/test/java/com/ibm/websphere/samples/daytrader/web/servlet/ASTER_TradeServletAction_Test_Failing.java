/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeServletAction_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_EmptyHoldings_qJhc0_1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(results, req.getAttribute("portfolio"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_EmptyHoldings_qJhc0_2() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(Collections.emptyList(), req.getAttribute("holdingDataBeans"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_EmptyHoldings_qJhc0_3() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(holdingDataBeans, req.getAttribute("holdingDataBeans"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_NonEmptyHoldings_VMjG1_1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    holdingDataBeans.add(new HoldingDataBean());
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(results, req.getAttribute("portfolio"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_NonEmptyHoldings_VMjG1_2() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    holdingDataBeans.add(new HoldingDataBean());
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(holdingDataBeans, req.getAttribute("holdingDataBeans"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_Exception_CnRM2_1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    holdingDataBeans.add(new HoldingDataBean());
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(results, req.getAttribute("results"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout_IllegalArgumentException_Yejz0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    when(req.getAttribute("TSS-RecreateSessionInLogout")).thenReturn(Boolean.TRUE);
    try {
      tradeServletAction.doLogout(ctx, req, resp, userID);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("illegal argument:", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout_NoException_UkIi2() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    when(req.getAttribute("TSS-RecreateSessionInLogout")).thenReturn(Boolean.TRUE);
    tradeServletAction.doLogout(ctx, req, resp, userID);
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout_NullUserID_ILmb3() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = null;
    when(req.getAttribute("TSS-RecreateSessionInLogout")).thenReturn(Boolean.TRUE);
    try {
      tradeServletAction.doLogout(ctx, req, resp, userID);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("userID is null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoHome_Znhq0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "test_user";
    String results = "test_results";
    tradeServletAction.doHome(ctx, req, resp, userID, results);
    verify(req).setAttribute("accountData", null);
    verify(req).setAttribute("holdingDataBeans", null);
    verify(req).setAttribute("results", results);
    verify(req).setAttribute("userID", userID);
    verify(req).setAttribute("homePage", TradeConfig.getPage(TradeConfig.HOME_PAGE));
    verify(req).setAttribute("errorMessage", "check userID = " + userID + " and that the database is populated");
    verify(req).setAttribute("errorMessage", "Could not find account for " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
    verify(req).setAttribute("errorMessage", "Exception user = " + userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcome_TbmJ0() throws ServletException, IOException {
    TradeServletAction servletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String status = "success";
    servletAction.doWelcome(ctx, req, resp, status);
    verify(req).setAttribute("results", status);
    verify(req).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp).sendRedirect(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcomeWithNullStatus_LFmf1() throws ServletException, IOException {
    TradeServletAction servletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String status = null;
    servletAction.doWelcome(ctx, req, resp, status);
    verify(req).setAttribute("results", status);
    verify(req).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp).sendRedirect(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcomeWithEmptyStatus_fjdx2() throws ServletException, IOException {
    TradeServletAction servletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String status = "";
    servletAction.doWelcome(ctx, req, resp, status);
    verify(req).setAttribute("results", status);
    verify(req).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp).sendRedirect(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcomeWithInvalidStatus_Mltv3() throws ServletException, IOException {
    TradeServletAction servletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String status = "invalid";
    servletAction.doWelcome(ctx, req, resp, status);
    verify(req).setAttribute("results", status);
    verify(req).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp).sendRedirect(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    // Fix the assertion
    assertEquals(TradeConfig.getPage(TradeConfig.WELCOME_PAGE), req.getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE)));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcomeWithNullRequest_UkCC4() throws ServletException, IOException {
    TradeServletAction servletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = null;
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String status = "success";
    servletAction.doWelcome(ctx, req, resp, status);
    verify(req, never()).setAttribute("results", status);
    verify(req, never()).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp, never()).sendRedirect(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoRegisterSuccess_RCLR0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String passwd = "testPass";
    String cpasswd = "testPass";
    String fullname = "Test User";
    String ccn = "1234567890";
    String openBalanceString = "1000";
    String email = "test@example.com";
    String address = "123 Main St";
    tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    assertEquals("Registration operation succeeded;  Account " + userID + " has been created.", req.getAttribute("results"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoRegisterFailedPasswordMismatch_zEwD1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String passwd = "testPass";
    String cpasswd = "testPass1";
    String fullname = "Test User";
    String ccn = "1234567890";
    String openBalanceString = "1000";
    String email = "test@example.com";
    String address = "123 Main St";
    tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    assertEquals("Registration operation failed, your passwords did not match", req.getAttribute("results"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoRegisterFailedInvalidUserID_mFCI2() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String passwd = "testPass";
    String cpasswd = "testPass";
    String fullname = "Test User";
    String ccn = "1234567890";
    String openBalanceString = "1000";
    String email = "test@example.com";
    String address = "123 Main St";
    tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    assertEquals("Registration operation failed;", req.getAttribute("results"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_EmptyHoldings_qJhc0_1_fid1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(results, req.getAttribute("results"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_EmptyHoldings_qJhc0_3_fid1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(quoteDataBeans, req.getAttribute("quoteDataBeans"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_NonEmptyHoldings_VMjG1_3_fid1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    holdingDataBeans.add(new HoldingDataBean());
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(quoteDataBeans, req.getAttribute("quoteDataBeans"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout_Exception_ljWN1_fid1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    when(req.getAttribute("TSS-RecreateSessionInLogout")).thenReturn(Boolean.TRUE);
    try {
      tradeServletAction.doLogout(ctx, req, resp, userID);
      fail("Expected Exception");
    } catch (Exception e) {
      assertEquals("Error logging out" + userID, e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcomeWithInvalidStatus_Mltv3_fid1() throws ServletException, IOException {
    TradeServletAction servletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String status = "invalid";
    servletAction.doWelcome(ctx, req, resp, status);
    verify(req).setAttribute("results", status);
    verify(req).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp).sendRedirect(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_EmptyHoldings_qJhc0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(results, req.getAttribute("results"));
    assertEquals(holdingDataBeans, req.getAttribute("holdingDataBeans"));
    assertEquals(quoteDataBeans, req.getAttribute("quoteDataBeans"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_NonEmptyHoldings_VMjG1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    holdingDataBeans.add(new HoldingDataBean());
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(results, req.getAttribute("results"));
    assertEquals(holdingDataBeans, req.getAttribute("holdingDataBeans"));
    assertEquals(quoteDataBeans, req.getAttribute("quoteDataBeans"));
  }
}