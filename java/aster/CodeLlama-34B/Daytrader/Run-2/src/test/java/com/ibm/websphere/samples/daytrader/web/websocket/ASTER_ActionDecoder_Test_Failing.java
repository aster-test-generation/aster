/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.TimeUnit;
import javax.websocket.DecodeException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ActionDecoder_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecode_SkSU0() throws DecodeException {
    ActionDecoder actionDecoder = new ActionDecoder();
    String jsonText = "{\"action\":\"test\"}";
    ActionMessage actionMessage = actionDecoder.decode(jsonText);
    assertEquals("test", actionMessage.getDecodedAction());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithNullJson_zQOG2() throws DecodeException {
    ActionDecoder actionDecoder = new ActionDecoder();
    String jsonText = null;
    try {
      actionDecoder.decode(jsonText);
      fail("Expected DecodeException");
    } catch (DecodeException e) {
      assertTrue(e.getMessage().contains("Null JSON"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithEmptyJson_jcSB3() throws DecodeException {
    ActionDecoder actionDecoder = new ActionDecoder();
    String jsonText = "";
    try {
      actionDecoder.decode(jsonText);
      fail("Expected DecodeException");
    } catch (DecodeException e) {
      assertTrue(e.getMessage().contains("Empty JSON"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithInvalidAction_pKwE4() throws DecodeException {
    ActionDecoder actionDecoder = new ActionDecoder();
    String jsonText = "{\"action\":\"invalid\"}";
    try {
      actionDecoder.decode(jsonText);
      fail("Expected DecodeException");
    } catch (DecodeException e) {
      assertTrue(e.getMessage().contains("Invalid action"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithNullAction_aLFo5() throws DecodeException {
    ActionDecoder actionDecoder = new ActionDecoder();
    String jsonText = "{\"action\":null}";
    try {
      actionDecoder.decode(jsonText);
      fail("Expected DecodeException");
    } catch (DecodeException e) {
      assertTrue(e.getMessage().contains("Null action"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithEmptyAction_AusG6() throws DecodeException {
    ActionDecoder actionDecoder = new ActionDecoder();
    String jsonText = "{\"action\":\"\"}";
    try {
      actionDecoder.decode(jsonText);
      fail("Expected DecodeException");
    } catch (DecodeException e) {
      assertTrue(e.getMessage().contains("Empty action"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithInvalidPayload_cpWE7() throws DecodeException {
    ActionDecoder actionDecoder = new ActionDecoder();
    String jsonText = "{\"action\":\"test\",\"payload\":\"invalid\"}";
    try {
      actionDecoder.decode(jsonText);
      fail("Expected DecodeException");
    } catch (DecodeException e) {
      assertTrue(e.getMessage().contains("Invalid payload"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithNullPayload_ZDfm8() throws DecodeException {
    ActionDecoder actionDecoder = new ActionDecoder();
    String jsonText = "{\"action\":\"test\",\"payload\":null}";
    try {
      actionDecoder.decode(jsonText);
      fail("Expected DecodeException");
    } catch (DecodeException e) {
      assertTrue(e.getMessage().contains("Null payload"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWillDecode_emptyString_JlLq0() {
    ActionDecoder decoder = new ActionDecoder();
    assertFalse(decoder.willDecode(""));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWillDecode_nullString_uQfY1() {
    ActionDecoder decoder = new ActionDecoder();
    assertFalse(decoder.willDecode(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWillDecode_invalidString_fkFZ3() {
    ActionDecoder decoder = new ActionDecoder();
    assertFalse(decoder.willDecode("invalid_string"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithNullJson_zQOG2_fid2() throws DecodeException {
    ActionDecoder actionDecoder = new ActionDecoder();
    String jsonText = null;
    try {
      actionDecoder.decode(jsonText);
      fail("Expected DecodeException");
    } catch (DecodeException e) {
      assertEquals("Null JSON", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithEmptyJson_jcSB3_fid2() throws DecodeException {
    ActionDecoder actionDecoder = new ActionDecoder();
    String jsonText = "";
    try {
      actionDecoder.decode(jsonText);
      assertTrue(false);
    } catch (DecodeException e) {
      assertTrue(e.getMessage().contains("Empty JSON"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithInvalidAction_pKwE4_fid2() throws DecodeException {
    ActionDecoder actionDecoder = new ActionDecoder();
    String jsonText = "{\"action\":\"invalid\"}";
    try {
      actionDecoder.decode(jsonText);
      assertTrue(false);
    } catch (DecodeException e) {
      assertTrue(e.getMessage().contains("Invalid action"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithInvalidPayload_cpWE7_fid2() throws DecodeException {
    ActionDecoder actionDecoder = new ActionDecoder();
    String jsonText = "{\"action\":\"test\",\"payload\":\"invalid\"}";
    try {
      actionDecoder.decode(jsonText);
      assertTrue(false);
    } catch (DecodeException e) {
      assertTrue(e.getMessage().contains("Invalid payload"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithNullPayload_ZDfm8_fid2() throws DecodeException {
    ActionDecoder actionDecoder = new ActionDecoder();
    String jsonText = "{\"action\":\"test\",\"payload\":null}";
    try {
      actionDecoder.decode(jsonText);
      assertNull(actionDecoder.decode(jsonText));
    } catch (DecodeException e) {
      assertTrue(e.getMessage().contains("Null payload"));
    }
  }
}