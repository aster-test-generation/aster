/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.websocket.CloseReason;
import javax.websocket.EndpointConfig;
import javax.websocket.Session;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingWebSocketBinary_Coverage_Test_Passing {
  private Session currentSession;
  private EndpointConfig ec;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnCloseWithClosedSession_WPEt1_Kcff0() {
    PingWebSocketBinary pingWebSocketBinary = new PingWebSocketBinary();
    Session session = mock(Session.class);
    when(session.isOpen()).thenReturn(false);
    CloseReason reason = mock(CloseReason.class);
    try {
      pingWebSocketBinary.onClose(session, reason);
      verify(session, never()).close();
    } catch (IOException e) {
      fail("IOException should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnCloseWithOpenSession_Furn0_dPcE0() {
    PingWebSocketBinary pingWebSocketBinary = new PingWebSocketBinary();
    Session session = mock(Session.class);
    when(session.isOpen()).thenReturn(true);
    CloseReason reason = mock(CloseReason.class);
    try {
      pingWebSocketBinary.onClose(session, reason);
      verify(session).close();
    } catch (IOException e) {
      e.printStackTrace();
    }
  }
}