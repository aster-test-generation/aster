/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_MaxUsersReached_SXSR0_1() {
    int maxUsers = 10;
    int userIDCount = maxUsers - 1;
    String userID = TradeConfig.nextUserID();
    assertEquals("uid:" + userIDCount, userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_MaxUsersReached_SXSR9_2() {
    int maxUsers = 19;
    int userIDCount = maxUsers - 1;
    String userID = TradeConfig.nextUserID();
    assertEquals(9, userIDCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_MaxUsersNotReached_HNLt1_1() {
    int maxUsers = 10;
    int userIDCount = maxUsers - 2;
    String userID = TradeConfig.nextUserID();
    assertEquals("uid:" + userIDCount, userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_MaxUsersNotReached_HNLt1_2() {
    int maxUsers = 10;
    int userIDCount = maxUsers - 2;
    String userID = TradeConfig.nextUserID();
    assertEquals(userIDCount + 1, userIDCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction2_dgWw1() {
    boolean newUser = false;
    char action = TradeConfig.getScenarioAction(newUser);
    assertEquals('a', action);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction5_UvDv4() {
    boolean newUser = false;
    int sellDeficit = 1;
    char action = TradeConfig.getScenarioAction(newUser);
    assertEquals('a', action);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_MaxUsersReached_SXSR0_2() {
    int maxUsers = 10;
    int userIDCount = maxUsers - 1;
    String userID = TradeConfig.nextUserID();
    assertEquals(0, userIDCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction2_dgWw1_fid1() {
    boolean newUser = false;
    char action = TradeConfig.getScenarioAction(newUser);
    assertEquals('s', action);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction5_UvDv4_fid1() {
    boolean newUser = false;
    int sellDeficit = 1;
    char action = TradeConfig.getScenarioAction(newUser);
    assertEquals('s', action);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserID_NullHostname_pyUK0_1_fid1() {
    String expectedHostname = "localhost";
    String expectedPrefix = "newUserPrefix";
    long currentTime = System.currentTimeMillis();
    int expectedCount = 0;
    String actualUserID = TradeConfig.rndNewUserID();
    Assertions.assertTrue(actualUserID.startsWith(expectedPrefix));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserID_NullHostname_pyUK0_2_fid1() {
    String expectedHostname = "localhost";
    String expectedPrefix = "newUserPrefix";
    long currentTime = System.currentTimeMillis();
    int expectedCount = 0;
    String actualUserID = TradeConfig.rndNewUserID();
    Assertions.assertTrue(actualUserID.contains(expectedHostname));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserID_NonNullHostname_UcFP1_1_fid1() {
    String expectedHostname = "testHostname";
    String expectedPrefix = "newUserPrefix";
    long currentTime = System.currentTimeMillis();
    int expectedCount = 0;
    String actualUserID = TradeConfig.rndNewUserID();
    Assertions.assertTrue(actualUserID.startsWith(expectedPrefix));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserID_NonNullHostname_UcFP1_2_fid1() {
    String expectedHostname = "testHostname";
    String expectedPrefix = "newUserPrefix";
    long currentTime = System.currentTimeMillis();
    int expectedCount = 0;
    String actualUserID = TradeConfig.rndNewUserID();
    Assertions.assertTrue(actualUserID.contains(expectedHostname));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_EqualToOne_zwch1() {
    BigDecimal percentGainBD = TradeConfig.getRandomPriceChangeFactor();
    Assertions.assertEquals(BigDecimal.ONE, percentGainBD);
  }
}