/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingReentryServlet_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_MBLz0() {
    PingReentryServlet servlet = new PingReentryServlet();
    String servletInfo = servlet.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet", servletInfo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_NotInitialized_IDwM1() {
    PingReentryServlet servlet = new PingReentryServlet();
    String servletInfo = servlet.getServletInfo();
    assertNull(servletInfo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_numReentries_0_gxEA0() throws Exception {
    PingReentryServlet servlet = new PingReentryServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("numReentries")).thenReturn("0");
    when(req.getParameter("sleep")).thenReturn("0");
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getOutputStream();
    verify(res).sendError(500, "Invalid number of reentries");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_numReentries_1_Hick1() throws Exception {
    PingReentryServlet servlet = new PingReentryServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("numReentries")).thenReturn("1");
    when(req.getParameter("sleep")).thenReturn("0");
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getOutputStream();
    verify(res).sendError(500, "Invalid number of reentries");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_numReentries_2_WmFL2() throws Exception {
    PingReentryServlet servlet = new PingReentryServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("numReentries")).thenReturn("2");
    when(req.getParameter("sleep")).thenReturn("0");
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getOutputStream();
    verify(res).sendError(500, "Invalid number of reentries");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_numReentries_3_tYya3() throws Exception {
    PingReentryServlet servlet = new PingReentryServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("numReentries")).thenReturn("3");
    when(req.getParameter("sleep")).thenReturn("0");
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getOutputStream();
    verify(res).sendError(500, "Invalid number of reentries");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_numReentries_4_RUbd4() throws Exception {
    PingReentryServlet servlet = new PingReentryServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("numReentries")).thenReturn("4");
    when(req.getParameter("sleep")).thenReturn("0");
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getOutputStream();
    verify(res).sendError(500, "Invalid number of reentries");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_NotInitialized_IDwM1_fid1() {
    PingReentryServlet servlet = new PingReentryServlet();
    String servletInfo = servlet.getServletInfo();
    assertNotNull(servletInfo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_fqNs0_HPHY0() throws ServletException {
    PingReentryServlet servlet = mock(PingReentryServlet.class);
    ServletConfig config = mock(ServletConfig.class);
    servlet.init(config);
    assertTrue(servlet.getInitParameter("ping.reentry.enabled") == null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_fqNs0_HPHY0_fid2() throws ServletException {
    PingReentryServlet servlet = new PingReentryServlet();
    ServletConfig config = mock(ServletConfig.class);
    servlet.init(config);
    assertTrue(servlet.getInitParameter("ping.reentry.enabled") == null);
  }
}