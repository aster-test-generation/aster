/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Log_Test_Passing {
  private static List<Log> logs = new ArrayList<>();

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogWithMultipleMessagesAndNullAndEmptyAndInvalid_auFk15() {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintCollection_emptyCollection_zlVL0() {
    Collection<Object> collection = new ArrayList<>();
    Log.printCollection(collection);
    assertEquals(0, collection.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintCollection_nonEmptyCollection_bDUC1() {
    Collection<Object> collection = new ArrayList<>();
    collection.add("item1");
    collection.add("item2");
    Log.printCollection(collection);
    assertEquals(2, collection.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintCollection_oneElement_YtdO2() {
    Collection<Object> collection = new ArrayList<>();
    collection.add("item1");
    Log.printCollection(collection);
    assertEquals(1, collection.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintCollection_multipleElementsSame_VbFK3() {
    Collection<Object> collection = new ArrayList<>();
    collection.add("item1");
    collection.add("item1");
    Log.printCollection(collection);
    assertEquals(2, collection.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintCollection_mixedTypes_NWRf5() {
    Collection<Object> collection = new ArrayList<>();
    collection.add("item1");
    collection.add(1);
    Log.printCollection(collection);
    assertEquals(2, collection.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_EmptyMessage_PAOY2() {
    Log.error(new Throwable(), "");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_ValidMessage_TDRt3() {
    Log.error(new Throwable(), "message");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoTrace_nullLog_QzvB5() {
    Log log = null;
    assertFalse(log.doTrace());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoDebug_zneG0() {
    assertTrue(Log.doDebug());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_msg1_msg2_null_e_TDlB2() {
    String msg1 = "Error message 1";
    String msg2 = "Error message 2";
    String msg3 = null;
    Throwable e = new Throwable("Error message 4");
    Log.error(msg1, msg2, msg3, e);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_msg1_null_null_e_zqaw6() {
    String msg1 = "Error message 1";
    String msg2 = null;
    String msg3 = null;
    Throwable e = new Throwable("Error message 4");
    Log.error(msg1, msg2, msg3, e);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_gziu0_CxQk0() {
    Log log = new Log();
    log.printCollection("message", new ArrayList<String>());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceEnterWithMultipleMessagesAndNullAndEmptyStringAndNullAndEmptyStringAndNullAndEmptyStringAndNullAndEmptyStringAndNull_wQCf13() {
    Log log = new Log();
  }
}