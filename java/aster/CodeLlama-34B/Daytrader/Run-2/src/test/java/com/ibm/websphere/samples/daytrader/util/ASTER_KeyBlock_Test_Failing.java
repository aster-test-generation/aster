/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.ListIterator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_KeyBlock_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSizeWithMinGreaterThanMax_WNwc2() {
    KeyBlock keyBlock = new KeyBlock(1 - 8, 1);
    assertEquals(-8, keyBlock.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSizeWithMinGreaterThanMaxAndNegative_EjwV5() {
    KeyBlock keyBlock = new KeyBlock(-110, -1);
    assertEquals(10, keyBlock.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListIteratorWithValidIndex_qRGZ0_2_fid1() {
    KeyBlock keyBlock = new KeyBlock(1, 10);
    ListIterator<Object> iterator = keyBlock.listIterator(5);
    assertEquals(5, iterator.nextIndex());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListIteratorWithInvalidIndex_WWBn1_fid1() {
    KeyBlock keyBlock = new KeyBlock(1, 10);
    ListIterator<Object> iterator = keyBlock.listIterator(15);
    assertNull(iterator);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSizeWithMinGreaterThanMax_WNwc2_fid1() {
    KeyBlock keyBlock = new KeyBlock(10, 1);
    assertEquals(0, keyBlock.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSizeWithMinAndMaxEqualAndNegative_vRHs4_fid1() {
    KeyBlock keyBlock = new KeyBlock(-1, -1);
    assertEquals(0, keyBlock.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSizeWithMinGreaterThanMaxAndNegative_EjwV5_fid1() {
    KeyBlock keyBlock = new KeyBlock(-10, -1);
    assertEquals(0, keyBlock.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSizeWithMinLessThanMaxAndNegative_qwOl6() {
    KeyBlock keyBlock = new KeyBlock(-1, -10);
    assertEquals(10, keyBlock.size());
  }
}