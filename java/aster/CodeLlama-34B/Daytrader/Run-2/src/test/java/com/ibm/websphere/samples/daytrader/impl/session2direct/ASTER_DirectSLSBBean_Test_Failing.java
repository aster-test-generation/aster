/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryWithInSessionFalse_mISp2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(false);
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNull(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_jwSk0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    double rnd1 = 100.0;
    double rnd2 = 50.0;
    double expectedReturn = 150.0;
    double actualReturn = directSLSBBean.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_negativeRnd1_HqHV1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    double rnd1 = -100.0;
    double rnd2 = 50.0;
    double expectedReturn = -50.0;
    double actualReturn = directSLSBBean.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_negativeRnd2_AJnW2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    double rnd1 = 100.0;
    double rnd2 = -50.0;
    double expectedReturn = 50.0;
    double actualReturn = directSLSBBean.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_zeroRnd1_wzGl3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    double rnd1 = 0.0;
    double rnd2 = 50.0;
    double expectedReturn = 0.0;
    double actualReturn = directSLSBBean.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_zeroRnd2_EYrs4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    double rnd1 = 100.0;
    double rnd2 = 0.0;
    double expectedReturn = 100.0;
    double actualReturn = directSLSBBean.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_EXJy0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "123 Test Street";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(accountDataBean);
    assertEquals(userID, accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_EXJy0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "123 Test Street";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(password, accountDataBean.getProfile().getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_EXJy0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "123 Test Street";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(fullname, accountDataBean.getProfile().getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_EXJy0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "123 Test Street";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(address, accountDataBean.getProfile().getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_EXJy0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "123 Test Street";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(email, accountDataBean.getProfile().getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_EXJy0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "123 Test Street";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(creditcard, accountDataBean.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_EXJy0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "123 Test Street";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(accountDataBean);
    assertEquals(openBalance, accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithInvalidUserID_SACD1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "invalidUserID";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "123 Test Street";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    try {
      directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid user ID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithInvalidFullName_rtKy3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Invalid Full Name";
    String address = "123 Test Street";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    try {
      directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid full name", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_AUwM1_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "invalid_user";
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_AUwM1_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "invalid_user";
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_fGrU2_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = null;
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_fGrU2_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = null;
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_bNPr0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_bNPr0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean);
    assertEquals(0, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_bNPr0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertEquals(1, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_bNPr0_10() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean);
    assertEquals(0, accountDataBean.getOrders().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_bNPr0_11() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean);
    assertEquals(0, accountDataBean.getHoldings().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithInvalidUserID_Qyor1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("invalidUserID", "password");
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithInvalidPassword_uTmd2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "invalidPassword");
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullUserID_AfHH3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login(null, "password");
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullPassword_zGrW4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", null);
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithEmptyUserID_eutw5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("", "password");
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithEmptyPassword_HiqK6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "");
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_DpUL0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(100.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
    assertEquals(newPrice, updatedQuoteDataBean.getPrice());
    assertEquals(sharesTraded, updatedQuoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_DpUL0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(100.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(newPrice, updatedQuoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_DpUL0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(100.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(sharesTraded, updatedQuoteDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_InvalidOrderID_TwoPhaseFalse_dKaF2() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    Integer orderID = -1;
    boolean twoPhase = false;
    try {
      bean.cancelOrder(orderID, twoPhase);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid order ID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_InvalidOrderID_TwoPhaseTrue_PCdS3() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    Integer orderID = -1;
    boolean twoPhase = true;
    try {
      bean.cancelOrder(orderID, twoPhase);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid order ID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_null_xpDJ0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      Collection<?> orders = directSLSBBean.getOrders(null);
      assertNotNull(orders);
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_empty_UQdQ1() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      Collection<?> orders = directSLSBBean.getOrders("");
      assertNotNull(orders);
      assertTrue(orders.isEmpty());
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_valid_oidW2() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      Collection<?> orders = directSLSBBean.getOrders("user1");
      assertNotNull(orders);
      assertFalse(orders.isEmpty());
      assertEquals(1, orders.size());
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_invalid_CqYz3() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      Collection<?> orders = directSLSBBean.getOrders("invalid_user");
      assertNotNull(orders);
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_vjBW0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_vjBW0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_vjBW0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_vjBW0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_vjBW0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_vjBW0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_vjBW0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
    assertEquals(1000000, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithInvalidSymbol_cPTy1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("INVALID");
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithNullSymbol_qAAa2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote(null);
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_JSqL0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_JSqL0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertNotNull(quoteDataBean);
    assertEquals("ABC", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_JSqL0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals("Company ABC", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_JSqL0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_OiFS1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_VqhK2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_JXli3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("ABC", "Company ABC", null);
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_ICvh4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithValidSymbolAndCompanyNameAndPrice_MorD7_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertNotNull(quoteDataBean);
    assertEquals("ABC", quoteDataBean.getSymbol());
    assertEquals("Company ABC", quoteDataBean.getCompanyName());
    assertEquals(new BigDecimal(10.0), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithValidSymbolAndCompanyNameAndPrice_MorD7_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals("ABC", quoteDataBean.getSymbol());
    assertEquals("Company ABC", quoteDataBean.getCompanyName());
    assertEquals(new BigDecimal(10.0), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_TWko0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword("password123");
    profileData.setFullName("John Doe");
    profileData.setAddress("123 Main St");
    profileData.setEmail("johndoe@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals("user123", updatedProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_TWko0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword("password123");
    profileData.setFullName("John Doe");
    profileData.setAddress("123 Main St");
    profileData.setEmail("johndoe@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals("password123", updatedProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_TWko0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword("password123");
    profileData.setFullName("John Doe");
    profileData.setAddress("123 Main St");
    profileData.setEmail("johndoe@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals("John Doe", updatedProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_TWko0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword("password123");
    profileData.setFullName("John Doe");
    profileData.setAddress("123 Main St");
    profileData.setEmail("johndoe@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals("123 Main St", updatedProfileData.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_TWko0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword("password123");
    profileData.setFullName("John Doe");
    profileData.setAddress("123 Main St");
    profileData.setEmail("johndoe@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals("johndoe@example.com", updatedProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_TWko0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword("password123");
    profileData.setFullName("John Doe");
    profileData.setAddress("123 Main St");
    profileData.setEmail("johndoe@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals("1234567890", updatedProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_tsnO0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_tsnO0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertEquals("userID", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_tsnO0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_tsnO0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_tsnO0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_tsnO0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_tsnO0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_tsnO0_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_tsnO0_9() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_tsnO0_10() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_tsnO0_11() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_UQHP0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    BigDecimal price = quoteDataBean.getPrice();
    BigDecimal open = quoteDataBean.getOpen();
    BigDecimal low = quoteDataBean.getLow();
    double change = quoteDataBean.getChange();
    BigDecimal high = quoteDataBean.getHigh();
    double volume = quoteDataBean.getVolume();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(price, result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_UQHP0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    BigDecimal price = quoteDataBean.getPrice();
    BigDecimal open = quoteDataBean.getOpen();
    BigDecimal low = quoteDataBean.getLow();
    double change = quoteDataBean.getChange();
    BigDecimal high = quoteDataBean.getHigh();
    double volume = quoteDataBean.getVolume();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(low, result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_UQHP0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    BigDecimal price = quoteDataBean.getPrice();
    BigDecimal open = quoteDataBean.getOpen();
    BigDecimal low = quoteDataBean.getLow();
    double change = quoteDataBean.getChange();
    BigDecimal high = quoteDataBean.getHigh();
    double volume = quoteDataBean.getVolume();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(result.getChange(), change, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_UQHP0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    BigDecimal price = quoteDataBean.getPrice();
    BigDecimal open = quoteDataBean.getOpen();
    BigDecimal low = quoteDataBean.getLow();
    double change = quoteDataBean.getChange();
    BigDecimal high = quoteDataBean.getHigh();
    double volume = quoteDataBean.getVolume();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(high.doubleValue(), result.getHigh().doubleValue(), 0.00001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_UQHP0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    BigDecimal price = quoteDataBean.getPrice();
    BigDecimal open = quoteDataBean.getOpen();
    BigDecimal low = quoteDataBean.getLow();
    double change = quoteDataBean.getChange();
    BigDecimal high = quoteDataBean.getHigh();
    double volume = quoteDataBean.getVolume();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(result.getVolume(), volume, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseWithInvalidSymbol_jlWB1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = "INVALID_SYMBOL";
    BigDecimal price = quoteDataBean.getPrice();
    BigDecimal open = quoteDataBean.getOpen();
    BigDecimal low = quoteDataBean.getLow();
    double change = quoteDataBean.getChange();
    BigDecimal high = quoteDataBean.getHigh();
    double volume = quoteDataBean.getVolume();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseWithNullSymbol_nzZt2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = null;
    BigDecimal price = quoteDataBean.getPrice();
    BigDecimal open = quoteDataBean.getOpen();
    BigDecimal low = quoteDataBean.getLow();
    double change = quoteDataBean.getChange();
    BigDecimal high = quoteDataBean.getHigh();
    double volume = quoteDataBean.getVolume();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseWithEmptySymbol_VBlz3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = "";
    BigDecimal price = quoteDataBean.getPrice();
    BigDecimal open = quoteDataBean.getOpen();
    BigDecimal low = quoteDataBean.getLow();
    double change = quoteDataBean.getChange();
    BigDecimal high = quoteDataBean.getHigh();
    double volume = quoteDataBean.getVolume();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithInvalidUserID_IgMK1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.sell("invalidUserID", 1, TradeConfig.ASYNCH);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid user ID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithInvalidHoldingID_VWth3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.sell("user1", -1, TradeConfig.ASYNCH);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid holding ID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithInvalidOrderProcessingMode_pGrM4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.sell("user1", 1, -1);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid order processing mode", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithNullHoldingID_CMRY1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(null);
    assertNull(holdingDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithInvalidHoldingID_MFoH2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(0);
    assertNull(holdingDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_ekRy0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(1, true);
    assertNotNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_ujBU0_QOuX1_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_ujBU0_QOuX1_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getOpenTSIA(), new BigDecimal(1000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_ujBU0_QOuX1_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getGainPercent(), new BigDecimal(10));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_ujBU0_QOuX1_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertEquals(marketSummaryDataBean.getSummaryDate(), new java.util.Date());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_ujBU0_QOuX1_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getTSIA(), new BigDecimal(10000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_ujBU0_QOuX1_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertEquals(1000, marketSummaryDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_ujBU0_QOuX1_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(5, marketSummaryDataBean.getTopGainers().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_ujBU0_QOuX1_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertEquals(5, marketSummaryDataBean.getTopLosers().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_nullRnd2_dkKI6_GJdR0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    double rnd1 = 100.0;
    double rnd2 = 0.0;
    double expectedReturn = 0.0;
    double actualReturn = directSLSBBean.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_xsao0_KywU0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean);
    assertEquals(1, orderDataBean.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_xsao0_KywU0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals("sold", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_xsao0_KywU0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals(100.0, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_xsao0_KywU0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals(10.0, orderDataBean.getPrice().doubleValue(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_xsao0_KywU0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals(10.0, orderDataBean.getOrderFee().doubleValue(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_xsao0_KywU0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean);
    assertEquals("user1", orderDataBean.getAccount().getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_xsao0_KywU0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_xsao0_KywU0_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_xsao0_KywU0_9() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithDifferentOrderProcessingMode_yDAo2_FpDo0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithDifferentOrderProcessingMode_yDAo2_FpDo0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    assertEquals("sold", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithDifferentOrderProcessingMode_yDAo2_FpDo0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    assertEquals(100.0, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithDifferentOrderProcessingMode_yDAo2_FpDo0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    assertNotNull(orderDataBean);
    assertEquals(10.0, orderDataBean.getPrice().doubleValue(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithDifferentOrderProcessingMode_yDAo2_FpDo0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    assertEquals(10.0, orderDataBean.getOrderFee().doubleValue(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithDifferentOrderProcessingMode_yDAo2_FpDo0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    assertEquals("user1", orderDataBean.getAccount().getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithDifferentOrderProcessingMode_yDAo2_FpDo0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    assertNotNull(orderDataBean.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithDifferentOrderProcessingMode_yDAo2_FpDo0_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    assertNotNull(orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithDifferentOrderProcessingMode_yDAo2_FpDo0_9() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    assertNotNull(orderDataBean);
    assertEquals("sell", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_anSI0_Uqvs0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
    assertNotNull(holdingDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_anSI0_Uqvs0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
    assertNotNull(holdingDataBean);
    assertEquals(100.0, holdingDataBean.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_anSI0_Uqvs0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
    assertNotNull(holdingDataBean);
    assertEquals("QUOTE1", holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_anSI0_Uqvs0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
    assertNotNull(holdingDataBean);
    assertEquals(new java.util.Date(), holdingDataBean.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_anSI0_Uqvs0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
    assertNotNull(holdingDataBean);
    assertEquals(new BigDecimal("100.0"), holdingDataBean.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_anSI0_Uqvs0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
    assertNotNull(holdingDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_EXJy0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "123 Test Street";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(userID, accountDataBean.getProfileID());
    assertEquals(password, accountDataBean.getProfile().getPassword());
    assertEquals(fullname, accountDataBean.getProfile().getFullName());
    assertEquals(address, accountDataBean.getProfile().getAddress());
    assertEquals(email, accountDataBean.getProfile().getEmail());
    assertEquals(creditcard, accountDataBean.getProfile().getCreditCard());
    assertEquals(openBalance, accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithInvalidPassword_leRX2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "invalidPassword";
    String fullname = "Test User";
    String address = "123 Test Street";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    try {
      directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid password", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_bNPr0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean);
    assertEquals("userID", accountDataBean.getProfileID());
    assertEquals(0, accountDataBean.getLoginCount());
    assertEquals(0, accountDataBean.getLogoutCount());
    assertNotNull(accountDataBean.getCreationDate());
    assertNotNull(accountDataBean.getLastLogin());
    assertEquals(0, accountDataBean.getBalance().intValue());
    assertEquals(0, accountDataBean.getOpenBalance().intValue());
    assertNotNull(accountDataBean.getProfile());
    assertEquals(0, accountDataBean.getOrders().size());
    assertEquals(0, accountDataBean.getHoldings().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_DpUL0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(100.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
    assertEquals(newPrice, updatedQuoteDataBean.getPrice());
    assertEquals(sharesTraded, updatedQuoteDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_NullOrderID_TwoPhaseFalse_rpZJ4() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    Integer orderID = null;
    boolean twoPhase = false;
    try {
      bean.cancelOrder(orderID, twoPhase);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("Order ID cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_null_xpDJ0_fid1() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      Collection<?> orders = directSLSBBean.getOrders(null);
      assertNull(orders);
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_invalid_CqYz3_fid1() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      Collection<?> orders = directSLSBBean.getOrders("invalid_user");
      assertNull(orders);
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_vjBW0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals("AAPL", quoteDataBean.getSymbol());
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getPrice());
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getOpen());
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getLow());
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getHigh());
    assertEquals(1000000, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_TWko0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword("password123");
    profileData.setFullName("John Doe");
    profileData.setAddress("123 Main St");
    profileData.setEmail("johndoe@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals("user123", updatedProfileData.getUserID());
    assertEquals("password123", updatedProfileData.getPassword());
    assertEquals("John Doe", updatedProfileData.getFullName());
    assertEquals("123 Main St", updatedProfileData.getAddress());
    assertEquals("johndoe@example.com", updatedProfileData.getEmail());
    assertEquals("1234567890", updatedProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_tsnO0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("userID");
    assertNotNull(accountDataBean);
    assertEquals("userID", accountDataBean.getProfileID());
    assertNotNull(accountDataBean.getCreationDate());
    assertNotNull(accountDataBean.getLastLogin());
    assertNotNull(accountDataBean.getBalance());
    assertNotNull(accountDataBean.getOpenBalance());
    assertNotNull(accountDataBean.getLoginCount());
    assertNotNull(accountDataBean.getLogoutCount());
    assertNotNull(accountDataBean.getHoldings());
    assertNotNull(accountDataBean.getOrders());
    assertNotNull(accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_UQHP0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    BigDecimal price = quoteDataBean.getPrice();
    BigDecimal open = quoteDataBean.getOpen();
    BigDecimal low = quoteDataBean.getLow();
    double change = quoteDataBean.getChange();
    BigDecimal high = quoteDataBean.getHigh();
    double volume = quoteDataBean.getVolume();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(price, result.getPrice());
    assertEquals(open, result.getOpen());
    assertEquals(low, result.getLow());
    assertEquals(change, result.getChange(), 0.0001);
    assertEquals(high, result.getHigh());
    assertEquals(volume, result.getVolume(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseWithInvalidPrice_oPir4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    BigDecimal price = new BigDecimal("-1");
    BigDecimal open = quoteDataBean.getOpen();
    BigDecimal low = quoteDataBean.getLow();
    double change = quoteDataBean.getChange();
    BigDecimal high = quoteDataBean.getHigh();
    double volume = quoteDataBean.getVolume();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImplWithDifferentSessionToDirectValue_eASy1_fid1() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    int result = directSLSBBean.getImpl();
    assertEquals(TradeConfig.SESSION_TO_DIRECT + 1, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImplWithNullTradeConfig_vOZe2_fid1() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    int result = directSLSBBean.getImpl();
    assertEquals(0, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_ekRy0_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(1, true);
    assertNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_wFiy0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    Collection<?> closedOrders = directSLSBBean.getClosedOrders(userID);
    assertNotNull(closedOrders);
    assertEquals(1, closedOrders.size());
    assertTrue(closedOrders.contains("test_order"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_EXJy0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "123 Test Street";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(userID, accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_EXJy0_7_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "123 Test Street";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(openBalance, accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_AUwM1_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "invalid_user";
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_fGrU2_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = null;
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_bNPr0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertEquals("userID", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_bNPr0_3_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertEquals(0, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_bNPr0_4_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_bNPr0_5_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_bNPr0_6_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_bNPr0_7_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertEquals(0, accountDataBean.getBalance().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_bNPr0_8_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertEquals(0, accountDataBean.getOpenBalance().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_bNPr0_9_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertNotNull(accountDataBean.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_bNPr0_10_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertEquals(0, accountDataBean.getOrders().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_bNPr0_11_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.login("userID", "password");
    assertEquals(0, accountDataBean.getHoldings().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_DpUL0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(100.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_JSqL0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals("ABC", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_UQHP0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    BigDecimal price = quoteDataBean.getPrice();
    BigDecimal open = quoteDataBean.getOpen();
    BigDecimal low = quoteDataBean.getLow();
    double change = quoteDataBean.getChange();
    BigDecimal high = quoteDataBean.getHigh();
    double volume = quoteDataBean.getVolume();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(open, result.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_UQHP0_3_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    BigDecimal price = quoteDataBean.getPrice();
    BigDecimal open = quoteDataBean.getOpen();
    BigDecimal low = quoteDataBean.getLow();
    double change = quoteDataBean.getChange();
    BigDecimal high = quoteDataBean.getHigh();
    double volume = quoteDataBean.getVolume();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(low, result.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_UQHP0_4_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    BigDecimal price = quoteDataBean.getPrice();
    BigDecimal open = quoteDataBean.getOpen();
    BigDecimal low = quoteDataBean.getLow();
    double change = quoteDataBean.getChange();
    BigDecimal high = quoteDataBean.getHigh();
    double volume = quoteDataBean.getVolume();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(change, result.getChange(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_UQHP0_5_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    BigDecimal price = quoteDataBean.getPrice();
    BigDecimal open = quoteDataBean.getOpen();
    BigDecimal low = quoteDataBean.getLow();
    double change = quoteDataBean.getChange();
    BigDecimal high = quoteDataBean.getHigh();
    double volume = quoteDataBean.getVolume();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(high, result.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_UQHP0_6_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    BigDecimal price = quoteDataBean.getPrice();
    BigDecimal open = quoteDataBean.getOpen();
    BigDecimal low = quoteDataBean.getLow();
    double change = quoteDataBean.getChange();
    BigDecimal high = quoteDataBean.getHigh();
    double volume = quoteDataBean.getVolume();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(volume, result.getVolume(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_wFiy0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    Collection<?> closedOrders = directSLSBBean.getClosedOrders(userID);
    assertNotNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_wFiy0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    Collection<?> closedOrders = directSLSBBean.getClosedOrders(userID);
    assertEquals(1, closedOrders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_wFiy0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    Collection<?> closedOrders = directSLSBBean.getClosedOrders(userID);
    assertTrue(closedOrders.contains("test_order"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_ujBU0_QOuX1_4_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getSummaryDate(), new java.util.Date());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_ujBU0_QOuX1_6_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getVolume(), 1000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_ujBU0_QOuX1_7_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getTopGainers().size(), 5);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_ujBU0_QOuX1_8_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getTopLosers().size(), 5);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_xsao0_KywU0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals(1, orderDataBean.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_xsao0_KywU0_6_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals("user1", orderDataBean.getAccount().getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_xsao0_KywU0_7_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals(new java.util.Date(), orderDataBean.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_xsao0_KywU0_8_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals(new java.util.Date(), orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_xsao0_KywU0_9_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals("sell", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithDifferentOrderProcessingMode_yDAo2_FpDo0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    assertEquals(1, orderDataBean.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithDifferentOrderProcessingMode_yDAo2_FpDo0_4_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    assertEquals(10.0, orderDataBean.getPrice().doubleValue(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithDifferentOrderProcessingMode_yDAo2_FpDo0_7_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    assertEquals(new java.util.Date(), orderDataBean.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithDifferentOrderProcessingMode_yDAo2_FpDo0_8_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    assertEquals(new java.util.Date(), orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithDifferentOrderProcessingMode_yDAo2_FpDo0_9_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    assertEquals("sell", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_anSI0_Uqvs0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
    assertEquals(1, holdingDataBean.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_anSI0_Uqvs0_3_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
    assertEquals(100.0, holdingDataBean.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_anSI0_Uqvs0_4_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
    assertEquals("QUOTE1", holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_anSI0_Uqvs0_5_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
    assertEquals(new java.util.Date(), holdingDataBean.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_anSI0_Uqvs0_6_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
    assertEquals(new BigDecimal("100.0"), holdingDataBean.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_anSI0_Uqvs0_7_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
    assertEquals(new AccountDataBean(), holdingDataBean.getAccount());
  }
}