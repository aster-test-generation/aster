/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.json.JsonObject;
import javax.json.JsonReader;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPObject_Test_Passing {
  private static String initTime;
  @Mock
  private HttpServletResponse response;
  private static int hitCount;
  private HttpServletRequest request;
  @Mock
  private ServletOutputStream outputStream;
  @Mock
  private JsonReader jsonReader;
  @Mock
  private JsonObject jsonObject;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_Zjwx0() {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    String servletInfo = pingJSONPObject.getServletInfo();
    assertEquals("Basic JSON generation and parsing in a servlet", servletInfo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullResponse_XdJU3() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    pingJSONPObject.doGet(request, null);
    Mockito.verify(request).getRequestDispatcher("/error.jsp");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_GWKY0() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    pingJSONPObject.doGet(request, response);
    Mockito.verify(response).setContentType("text/html");
    Mockito.verify(response).getOutputStream();
    Mockito.verify(outputStream).println("<html><head><title>Ping JSONP</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping JSONP</FONT><BR>Generated JSON: " + jsonObject.toString() + "<br>Parsed JSON: " + jsonReader.readObject().toString() + "</body></html>");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithException_fotn1() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    Mockito.doThrow(new IOException("Test exception")).when(outputStream).println(Mockito.anyString());
    pingJSONPObject.doGet(request, response);
    Mockito.verify(response).sendError(500, "Test exception");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullRequest_UVZD2() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    pingJSONPObject.doGet(null, response);
    Mockito.verify(response).sendError(400, "Bad Request");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullOutputStream_Gbbr4() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    Mockito.doReturn(null).when(response).getOutputStream();
    pingJSONPObject.doGet(request, response);
    Mockito.verify(response).sendError(500, "Internal Server Error");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullJsonReader_XIwv5() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    Mockito.doReturn(null).when(jsonReader).readObject();
    pingJSONPObject.doGet(request, response);
    Mockito.verify(response).sendError(500, "Internal Server Error");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullJsonObject_wfUZ6() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    Mockito.doReturn(null).when(jsonObject).toString();
    pingJSONPObject.doGet(request, response);
    Mockito.verify(response).sendError(500, "Internal Server Error");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithNullParameter_qmSs1_vueX0() {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    String servletInfo = pingJSONPObject.getServletInfo();
    assertNull(servletInfo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullRequest_UVZD2_Qodn0() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    pingJSONPObject.doGet(request, response);
    Mockito.verify(response).sendError(400, "Bad Request");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullOutputStream_Gbbr4_Ndcn0() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    Mockito.doReturn(null).when(response).getOutputStream();
    pingJSONPObject.doGet(request, response);
    Mockito.verify(response).sendError(500);
  }
}