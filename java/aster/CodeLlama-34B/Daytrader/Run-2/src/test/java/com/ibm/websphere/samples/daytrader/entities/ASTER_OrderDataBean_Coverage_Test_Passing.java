/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderDataBean_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbolWithQuote_aZQJ0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    orderDataBean.setQuote(quoteDataBean);
    assertEquals("AAPL", orderDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbolWithoutQuote_CUCv1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setSymbol("GOOG");
    assertEquals("GOOG", orderDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsOpen_OpenStatus_zIGW0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("open");
    assertTrue(orderDataBean.isOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsOpen_ProcessingStatus_cMLD1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("processing");
    assertTrue(orderDataBean.isOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsOpen_ClosedStatus_yqjU2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("closed");
    assertFalse(orderDataBean.isOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentOrderID_cvUc0() {
    OrderDataBean order1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(1.0), "AAPL");
    OrderDataBean order2 = new OrderDataBean(2, "BUY", "OPEN", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(1.0), "AAPL");
    assertFalse(order1.equals(order2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullOrderID_aiNI1() {
    OrderDataBean order1 = new OrderDataBean(null, "BUY", "OPEN", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(1.0), "AAPL");
    OrderDataBean order2 = new OrderDataBean(2, "BUY", "OPEN", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(1.0), "AAPL");
    assertFalse(order1.equals(order2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameOrderID_Cjjw2() {
    OrderDataBean order1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(1.0), "AAPL");
    OrderDataBean order2 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(1.0), "AAPL");
    assertTrue(order1.equals(order2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_completed_UTbw0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("completed");
    assertTrue(orderDataBean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_alertcompleted_NPSF1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("alertcompleted");
    assertTrue(orderDataBean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_cancelled_cyuC2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("cancelled");
    assertTrue(orderDataBean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuy_buyOrderType_okgh0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderType("buy");
    assertTrue(orderDataBean.isBuy());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuy_sellOrderType_WtoG1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderType("sell");
    assertFalse(orderDataBean.isBuy());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuy_emptyOrderType_XUHh3() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderType("");
    assertFalse(orderDataBean.isBuy());
  }
}