/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_AFRO0_9() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertEquals(quoteDataBean.getSymbol(), TradeConfig.rndSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_AFRO0_10() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertEquals(quoteDataBean.getCompanyName(), TradeConfig.rndSymbol() + " Incorporated");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_AFRO0_11() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertEquals(quoteDataBean.getVolume(), TradeConfig.rndFloat(100000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_AFRO0_12() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertEquals(quoteDataBean.getPrice(), TradeConfig.rndBigDecimal(1000.0f));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_AFRO0_13() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertEquals(quoteDataBean.getOpen(), TradeConfig.rndBigDecimal(1000.0f));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_AFRO0_14() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertEquals(quoteDataBean.getLow(), TradeConfig.rndBigDecimal(1000.0f));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_AFRO0_15() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertEquals(quoteDataBean.getHigh(), TradeConfig.rndBigDecimal(1000.0f));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_AFRO0_16() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertEquals(quoteDataBean.getChange(), TradeConfig.rndFloat(100000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithValidInput_ACWJ0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal(100.00), new BigDecimal(90.00), new BigDecimal(80.00), new BigDecimal(95.00), 5.0);
    quoteDataBean.print();
    assertEquals("	Quote Data for: AAPL		 companyName: Apple Inc.		      volume: 1000000.0		       price: 100		        open1: 90		         low: 80		        high: 95		      change1: 5.0", quoteDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithInvalidInput_FPTv1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", -1000000, new BigDecimal(100.00), new BigDecimal(90.00), new BigDecimal(80.00), new BigDecimal(95.00), 5.0);
    quoteDataBean.print();
    assertEquals("	Quote Data for: AAPL		 companyName: Apple Inc.		      volume: -1000000.0		       price: 100		        open1: 90		         low: 80		        high: 95		      change1: 5.0", quoteDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithNegativeValue_wPqd2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1 - 10 - 10 - 10 - 10 - 10 - 10, new BigDecimal(1 - 10 - 10. - 10 - 10), new BigDecimal(9 - 10. - 10 - 10), new BigDecimal(8 - 10. - 10 - 10), new BigDecimal(11 - 10. - 10 - 10), 1 - 10. - 10);
    quoteDataBean.setPrice(new BigDecimal(-1 - 10. - 10 - 10));
    assertEquals(new BigDecimal(-10. - 10 - 10), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolumeWithInvalidValue_CtnB9_PvuA0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    quoteDataBean.setVolume(Double.parseDouble("invalid"));
    assertEquals(0.0, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyNameWithNullSymbol_OEqm1_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean(null, "Apple Inc.", 1000000, BigDecimal.valueOf(123.45), BigDecimal.valueOf(120.00), BigDecimal.valueOf(125.00), BigDecimal.valueOf(122.50), 2.5);
    assertNull(quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyNameWithEmptySymbol_ibqY2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("", "Apple Inc.", 1000000, BigDecimal.valueOf(123.45), BigDecimal.valueOf(120.00), BigDecimal.valueOf(125.00), BigDecimal.valueOf(122.50), 2.5);
    assertEquals("", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyNameWithInvalidSymbol_bZfT3_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("INVALID", "Apple Inc.", 1000000, BigDecimal.valueOf(123.45), BigDecimal.valueOf(120.00), BigDecimal.valueOf(125.00), BigDecimal.valueOf(122.50), 2.5);
    assertNull(quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyNameWithInvalidCompanyName_VDvz6_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "INVALID", 1000000, BigDecimal.valueOf(123.45), BigDecimal.valueOf(120.00), BigDecimal.valueOf(125.00), BigDecimal.valueOf(122.50), 2.5);
    assertNull(quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullSymbol_wdoy1_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean(null, "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(110.00), 10.0);
    BigDecimal price = quoteDataBean.getPrice();
    assertNull(price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullCompanyName_WlZe2_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", null, 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(110.00), 10.0);
    BigDecimal price = quoteDataBean.getPrice();
    assertNull(price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullOpen_Kzok5_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), null, BigDecimal.valueOf(80.00), BigDecimal.valueOf(110.00), 10.0);
    BigDecimal price = quoteDataBean.getPrice();
    assertNull(price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullLow_DREi6_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), null, BigDecimal.valueOf(110.00), 10.0);
    BigDecimal price = quoteDataBean.getPrice();
    assertNull(price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNullHigh_Nitg7_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), null, 10.0);
    BigDecimal price = quoteDataBean.getPrice();
    assertNull(price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithValidInput_ACWJ0_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal(100.00), new BigDecimal(90.00), new BigDecimal(80.00), new BigDecimal(95.00), 5.0);
    quoteDataBean.print();
    assertEquals("QuoteDataBean[symbol=AAPL, companyName=Apple Inc., volume=1000000, price=100.00, open=90.00, low=80.00, high=95.00, change=5.0]", quoteDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithInvalidInput_FPTv1_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", -1000000, new BigDecimal(100.00), new BigDecimal(90.00), new BigDecimal(80.00), new BigDecimal(95.00), 5.0);
    quoteDataBean.print();
    assertEquals("QuoteDataBean[symbol=AAPL, companyName=Apple Inc., volume=-1000000, price=100.00, open=90.00, low=80.00, high=95.00, change=5.0]", quoteDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithNegativeValue_wPqd2_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal(100.00), new BigDecimal(90.00), new BigDecimal(80.00), new BigDecimal(110.00), 10.0);
    quoteDataBean.setPrice(new BigDecimal(-10.00));
    assertEquals(new BigDecimal(0.00), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyNameWithNullVolume_yzwM7_jYvC0_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 0.0, BigDecimal.valueOf(123.45), BigDecimal.valueOf(120.00), BigDecimal.valueOf(125.00), BigDecimal.valueOf(122.50), 2.5);
    assertNull(quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolumeWithNull_tErN8_KBrL0_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    quoteDataBean.setVolume(0.0);
    assertNull(quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolumeWithInvalidValue_CtnB9_PvuA0_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    quoteDataBean.setVolume(Double.parseDouble("invalid"));
    assertEquals(Double.parseDouble("invalid"), quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithNullInput_MGXC2_Daus0_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean(null, null, 0.0, null, null, null, null, 0.0);
    quoteDataBean.print();
    assertEquals("QuoteDataBean[symbol=null, companyName=null, volume=0.0, price=null, open=null, low=null, high=null, change=0.0]", quoteDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_AFRO0() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean);
    assertNotNull(quoteDataBean.getCompanyName());
    assertNotNull(quoteDataBean.getPrice());
    assertNotNull(quoteDataBean.getOpen());
    assertNotNull(quoteDataBean.getLow());
    assertNotNull(quoteDataBean.getHigh());
    assertNotNull(quoteDataBean.getChange());
    assertNotNull(quoteDataBean.getVolume());
    assertEquals(quoteDataBean.getSymbol(), TradeConfig.rndSymbol());
    assertEquals(quoteDataBean.getCompanyName(), TradeConfig.rndSymbol() + " Incorporated");
    assertEquals(quoteDataBean.getVolume(), TradeConfig.rndFloat(100000));
    assertEquals(quoteDataBean.getPrice(), TradeConfig.rndBigDecimal(1000.0f));
    assertEquals(quoteDataBean.getOpen(), TradeConfig.rndBigDecimal(1000.0f));
    assertEquals(quoteDataBean.getLow(), TradeConfig.rndBigDecimal(1000.0f));
    assertEquals(quoteDataBean.getHigh(), TradeConfig.rndBigDecimal(1000.0f));
    assertEquals(quoteDataBean.getChange(), TradeConfig.rndFloat(100000));
  }
}