/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JsonMessage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_EmptyString_qfoZ0() {
    JsonMessage jsonMessage = new JsonMessage();
    String value = jsonMessage.getValue();
    assertNull(value);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_NonEmptyString_bGjm1() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("test");
    String value = jsonMessage.getValue();
    assertEquals("test", value);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_Null_oaFx2() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue(null);
    String value = jsonMessage.getValue();
    assertNull(value);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_nullKey_yxnC0() {
    JsonMessage jsonMessage = new JsonMessage();
    assertNull(jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_nonNullKey_UzoI1() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("key");
    assertEquals("key", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_emptyKey_kjDP2() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("");
    assertEquals("", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_nullKey_withNullValue_bTqA4() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey(null);
    assertNull(jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_nonNullKey_withNullValue_dQAU5() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("key");
    jsonMessage.setValue(null);
    assertEquals("key", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_emptyKey_withNullValue_vrDu6() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("");
    jsonMessage.setValue(null);
    assertEquals("", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_nullKey_withNonNullValue_otYC8() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey(null);
    jsonMessage.setValue("value");
    assertNull(jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_nonNullKey_withNonNullValue_nXlu9() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("key");
    jsonMessage.setValue("value");
    assertEquals("key", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_emptyKey_withNonNullValue_YXsV10() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("");
    jsonMessage.setValue("value");
    assertEquals("", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValue_BZRN0() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("testValue");
    assertEquals("testValue", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithNull_SyEd1() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue(null);
    assertNull(jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithEmptyString_Abqq2() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("");
    assertEquals("", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithInvalidValue_JiAd3() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("invalidValue");
    assertEquals("invalidValue", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithValidValue_ukBU4() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("validValue");
    assertEquals("validValue", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithNullAndEmptyString_rzFs6_2() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue(null);
    jsonMessage.setValue("");
    assertEquals("", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithInvalidAndValidValue_AXHr7_1() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("validValue");
    jsonMessage.setValue("validValue");
    assertEquals("validValue", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithInvalidAndValidValue_AXHr7_2() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("invalidValue");
    jsonMessage.setValue("validValue");
    assertEquals("validValue", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithNullAndEmptyStringAndInvalidValue_bvGe9_3() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue(null);
    jsonMessage.setValue("");
    jsonMessage.setValue("invalidValue");
    assertEquals("invalidValue", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_InvalidType_3_HQdd5_rMpb0() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("new Object()");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_InvalidType_4_uUWf6_SKKp0() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("[1, 2, 3]");
    String value = jsonMessage.getValue();
    assertEquals("[1, 2, 3]", value);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_InvalidType_5_xtsp7_DoGE0() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("[1.0, 2.0, 3.0]");
    String value = jsonMessage.getValue();
    assertEquals("[1.0, 2.0, 3.0]", value);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_InvalidType_6_JRyE8_ZCVD0() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("[\"a\", \"b\", \"c\"]");
    String value = jsonMessage.getValue();
    assertEquals("[\"a\", \"b\", \"c\"]", value);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_InvalidType_7_LOKl9_JhGU0() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("[new Object(), new Object(), new Object()]");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_InvalidType_8_vmcW10_GFII0() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("[[1, 2], [3, 4]]");
    String value = jsonMessage.getValue();
    assertEquals("[[1, 2], [3, 4]]", value);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_InvalidType_9_niVW11_tmdl0() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("[[1.0, 2.0], [3.0, 4.0]]");
    String value = jsonMessage.getValue();
    assertEquals("[[1.0, 2.0], [3.0, 4.0]]", value);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_InvalidType_10_pjcF12_QOAr0() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("[{\"a\": \"b\"}, {\"c\": \"d\"}]");
    String value = jsonMessage.getValue();
    assertEquals("[{\"a\": \"b\"}, {\"c\": \"d\"}]", value);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithDifferentTypesAndNull_jxav8_QGPY0_1() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("1");
    jsonMessage.setValue("1.0");
    jsonMessage.setValue("true");
    jsonMessage.setValue(new Object().toString());
    jsonMessage.setValue(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithDifferentTypesAndNull_jxav8_QGPY0_5() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("1");
    jsonMessage.setValue("1.0");
    jsonMessage.setValue("true");
    jsonMessage.setValue(new Object().toString());
    jsonMessage.setValue(null);
    assertNull(jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetKey_validKeyAndValue_cfWk14_oieO0_2() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("key");
    jsonMessage.setValue("value");
    assertEquals("value", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetKey_invalidKeyAndValue_TgeX15_UKGM0_2() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("invalid_key");
    assertNotEquals("invalid_value", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithNullAndEmptyString_rzFs6() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue(null);
    assertNull(jsonMessage.getValue());
    jsonMessage.setValue("");
    assertEquals("", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithInvalidAndValidValue_AXHr7() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("invalidValue");
    assertEquals("invalidValue", jsonMessage.getValue());
    jsonMessage.setValue("validValue");
    assertEquals("validValue", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithNullAndEmptyStringAndInvalidValue_bvGe9() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue(null);
    assertNull(jsonMessage.getValue());
    jsonMessage.setValue("");
    assertEquals("", jsonMessage.getValue());
    jsonMessage.setValue("invalidValue");
    assertEquals("invalidValue", jsonMessage.getValue());
  }
}