/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigJSF_Test_Failing {
  private TradeConfigJSF tradeConfigJSF;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceList_Vfua0() {
    String[] webInterfaceList = new String[]{"web1", "web2", "web3"};
    Mockito.when(tradeConfigJSF.getWebInterfaceList()).thenReturn(webInterfaceList);
    String[] actualWebInterfaceList = tradeConfigJSF.getWebInterfaceList();
    assertEquals(webInterfaceList, actualWebInterfaceList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceListWithNull_bdBc1() {
    String[] webInterfaceList = null;
    Mockito.when(tradeConfigJSF.getWebInterfaceList()).thenReturn(webInterfaceList);
    String[] actualWebInterfaceList = tradeConfigJSF.getWebInterfaceList();
    assertEquals(webInterfaceList, actualWebInterfaceList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceListWithEmpty_gIoD2() {
    String[] webInterfaceList = new String[0];
    Mockito.when(tradeConfigJSF.getWebInterfaceList()).thenReturn(webInterfaceList);
    String[] actualWebInterfaceList = tradeConfigJSF.getWebInterfaceList();
    assertEquals(webInterfaceList, actualWebInterfaceList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceListWithDifferentOrder_UNJL3() {
    String[] webInterfaceList = new String[]{"web3", "web2", "web1"};
    Mockito.when(tradeConfigJSF.getWebInterfaceList()).thenReturn(webInterfaceList);
    String[] actualWebInterfaceList = tradeConfigJSF.getWebInterfaceList();
    assertEquals(webInterfaceList, actualWebInterfaceList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceListWithDuplicates_voxk4() {
    String[] webInterfaceList = new String[]{"web1", "web2", "web3", "web1"};
    Mockito.when(tradeConfigJSF.getWebInterfaceList()).thenReturn(webInterfaceList);
    String[] actualWebInterfaceList = tradeConfigJSF.getWebInterfaceList();
    assertEquals(webInterfaceList, actualWebInterfaceList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceListWithInvalidValues_WujF5() {
    String[] webInterfaceList = new String[]{"web1", "web2", "web3", "invalid"};
    Mockito.when(tradeConfigJSF.getWebInterfaceList()).thenReturn(webInterfaceList);
    String[] actualWebInterfaceList = tradeConfigJSF.getWebInterfaceList();
    assertEquals(webInterfaceList, actualWebInterfaceList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceListWithNullValues_bdYK6() {
    String[] webInterfaceList = new String[]{"web1", "web2", "web3", null};
    Mockito.when(tradeConfigJSF.getWebInterfaceList()).thenReturn(webInterfaceList);
    String[] actualWebInterfaceList = tradeConfigJSF.getWebInterfaceList();
    assertEquals(webInterfaceList, actualWebInterfaceList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceListWithEmptyValues_NodS7() {
    String[] webInterfaceList = new String[]{"web1", "web2", "web3", ""};
    Mockito.when(tradeConfigJSF.getWebInterfaceList()).thenReturn(webInterfaceList);
    String[] actualWebInterfaceList = tradeConfigJSF.getWebInterfaceList();
    assertEquals(webInterfaceList, actualWebInterfaceList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetResult_zOvd0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String result = tradeConfigJSF.getResult();
    assertEquals("result", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeList_SEOp0_3_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] runtimeModeList = tradeConfigJSF.getRuntimeModeList();
    assertEquals("DEV", runtimeModeList[0]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeList_SEOp0_4_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] runtimeModeList = tradeConfigJSF.getRuntimeModeList();
    assertEquals("TEST", runtimeModeList[1]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeList_SEOp0_5() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] runtimeModeList = tradeConfigJSF.getRuntimeModeList();
    assertEquals("PROD", runtimeModeList[2]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeList_NullRuntimeModeList_MdOv1_1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setRuntimeModeList(null);
    String[] runtimeModeList = tradeConfigJSF.getRuntimeModeList();
    assertNotNull(runtimeModeList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeList_NullRuntimeModeList_MdOv1_2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setRuntimeModeList(null);
    String[] runtimeModeList = tradeConfigJSF.getRuntimeModeList();
    assertEquals(0, runtimeModeList.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInterval_NmDV0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int marketSummaryInterval = tradeConfigJSF.getMarketSummaryInterval();
    assertEquals(10, marketSummaryInterval);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeMode_rwGU0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String runtimeMode = tradeConfigJSF.getRuntimeMode();
    assertEquals("dev", runtimeMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeWithNull_pIdV1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String runtimeMode = tradeConfigJSF.getRuntimeMode();
    assertNull(runtimeMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeWithEmptyString_WZpd2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String runtimeMode = tradeConfigJSF.getRuntimeMode();
    assertEquals("", runtimeMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeWithDifferentCase_kaRP5() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String runtimeMode = tradeConfigJSF.getRuntimeMode();
    assertEquals("DEV", runtimeMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeWithSpecialCharacters_QUpB7() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String runtimeMode = tradeConfigJSF.getRuntimeMode();
    assertEquals("dev!", runtimeMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeWithMultipleValues_sVPM8() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String runtimeMode = tradeConfigJSF.getRuntimeMode();
    assertEquals("dev,prod", runtimeMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeWithMultipleValuesAndSpecialCharacters_Yqsx10() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String runtimeMode = tradeConfigJSF.getRuntimeMode();
    assertEquals("dev,prod!", runtimeMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeWithMultipleValuesAndDifferentCase_AGlm11() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String runtimeMode = tradeConfigJSF.getRuntimeMode();
    assertEquals("DEV,PROD", runtimeMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeWithMultipleValuesAndDifferentCaseAndWhitespaceAndSpecialCharacters_VAMj13() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String runtimeMode = tradeConfigJSF.getRuntimeMode();
    assertEquals("DEV, PROD!", runtimeMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterationsWithZero_jUDA1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int primIterations = tradeConfigJSF.getPrimIterations();
    assertEquals(0, primIterations);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterationsWithNegative_mxum2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int primIterations = tradeConfigJSF.getPrimIterations();
    assertEquals(-100, primIterations);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterationsWithNull_Otbg3() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int primIterations = tradeConfigJSF.getPrimIterations();
    assertNull(primIterations);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxUsers_LEqB1() {
    int maxUsers = tradeConfigJSF.getMaxUsers();
    assertEquals(100, maxUsers);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeList_kBMK0_3() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] orderProcessingModeList = tradeConfigJSF.getOrderProcessingModeList();
    assertEquals("AUTO", orderProcessingModeList[0]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeList_kBMK0_4() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] orderProcessingModeList = tradeConfigJSF.getOrderProcessingModeList();
    assertEquals("MANUAL", orderProcessingModeList[1]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeList_kBMK0_5() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] orderProcessingModeList = tradeConfigJSF.getOrderProcessingModeList();
    assertEquals("HYBRID", orderProcessingModeList[2]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxQuotes_mBMx1() {
    int maxQuotes = tradeConfigJSF.getMaxQuotes();
    assertEquals(10, maxQuotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxQuotesWithInvalidInput_xfnX2() {
    int maxQuotes = tradeConfigJSF.getMaxQuotes();
    assertEquals(0, maxQuotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterfaceWithDifferentCases_Adff5_1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setWebInterface("WebInterface");
    tradeConfigJSF.setWebInterface("webinterface");
    tradeConfigJSF.setWebInterface("WEBINTERFACE");
    assertEquals("WebInterface", tradeConfigJSF.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterfaceWithDifferentCases_Adff5_2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setWebInterface("WebInterface");
    tradeConfigJSF.setWebInterface("webinterface");
    tradeConfigJSF.setWebInterface("WEBINTERFACE");
    assertEquals("webinterface", tradeConfigJSF.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterfaceWithSpecialCharacters_Vvpf6_1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setWebInterface("web-interface");
    tradeConfigJSF.setWebInterface("web_interface");
    tradeConfigJSF.setWebInterface("web.interface");
    assertEquals("web-interface", tradeConfigJSF.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterfaceWithSpecialCharacters_Vvpf6_2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setWebInterface("web-interface");
    tradeConfigJSF.setWebInterface("web_interface");
    tradeConfigJSF.setWebInterface("web.interface");
    assertEquals("web_interface", tradeConfigJSF.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterfaceWithMultipleWords_VZjf7_1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setWebInterface("web interface");
    tradeConfigJSF.setWebInterface("web-interface");
    tradeConfigJSF.setWebInterface("web_interface");
    assertEquals("web interface", tradeConfigJSF.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterfaceWithMultipleWords_VZjf7_2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setWebInterface("web interface");
    tradeConfigJSF.setWebInterface("web-interface");
    tradeConfigJSF.setWebInterface("web_interface");
    assertEquals("web-interface", tradeConfigJSF.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterfaceWithInvalidCharacters_YFsl8_1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setWebInterface("web$interface");
    tradeConfigJSF.setWebInterface("web interface");
    tradeConfigJSF.setWebInterface("web-interface");
    assertEquals("web$interface", tradeConfigJSF.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterfaceWithInvalidCharacters_YFsl8_2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setWebInterface("web$interface");
    tradeConfigJSF.setWebInterface("web interface");
    tradeConfigJSF.setWebInterface("web-interface");
    assertEquals("web interface", tradeConfigJSF.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetResultWithNullAndEmptyString_GQuO10_1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setResult(null);
    tradeConfigJSF.setResult("");
    assertNull(tradeConfigJSF.getResult());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetResultWithInvalidAndEmptyString_pcho11_1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setResult("invalid");
    tradeConfigJSF.setResult("");
    assertEquals("invalid", tradeConfigJSF.getResult());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetResultWithValidAndEmptyString_SomR12_1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setResult("success");
    tradeConfigJSF.setResult("");
    assertEquals("success", tradeConfigJSF.getResult());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMaxUsersWithNegativeValue_xwDL1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setMaxUsers(-1);
    assertEquals(0, tradeConfig.getMaxUsers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterface_lPSV0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String webInterface = tradeConfigJSF.getWebInterface();
    assertEquals("webInterface", webInterface);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceWithNull_zhXf1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String webInterface = tradeConfigJSF.getWebInterface();
    assertNull(webInterface);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceWithEmptyString_pWuB2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String webInterface = tradeConfigJSF.getWebInterface();
    assertEquals("", webInterface);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceWithValidString_zGMj5() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String webInterface = tradeConfigJSF.getWebInterface();
    assertEquals("valid", webInterface);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTrade_Ctkh0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String result = tradeConfigJSF.resetTrade();
    assertEquals("stats", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeWithException_Yhyk1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    try {
      tradeConfigJSF.resetTrade();
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertEquals("Trade Reset Error  - see log for details", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfig_RunTimeMode_aOKl0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.updateConfig();
    assertEquals("Trade configuration update. Current config:", tradeConfigJSF.getResult());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfig_OrderProcessingMode_rUfg1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setOrderProcessingMode("ORDER_PROCESSING_MODE_1");
    tradeConfigJSF.updateConfig();
    assertEquals("Trade configuration update. Current config:", tradeConfigJSF.getResult());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfig_WebInterface_fAEw2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setWebInterface("WEB_INTERFACE_1");
    tradeConfigJSF.updateConfig();
    assertEquals("Trade configuration update. Current config:", tradeConfigJSF.getResult());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfig_MarketSummaryInterval_RjMU5() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setMarketSummaryInterval(100);
    tradeConfigJSF.updateConfig();
    assertEquals("Trade configuration update. Current config:", tradeConfigJSF.getResult());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfig_PrimIterations_kpzX6() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setPrimIterations(100);
    tradeConfigJSF.updateConfig();
    assertEquals("Trade configuration update. Current config:", tradeConfigJSF.getResult());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_Ttct0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String orderProcessingMode = tradeConfigJSF.getOrderProcessingMode();
    assertEquals("ASYNC", orderProcessingMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeWithSync_Prym1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String orderProcessingMode = tradeConfigJSF.getOrderProcessingMode();
    assertEquals("SYNC", orderProcessingMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeWithBatch_rGgS2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String orderProcessingMode = tradeConfigJSF.getOrderProcessingMode();
    assertEquals("BATCH", orderProcessingMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeWithInvalidMode_RzNf3() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String orderProcessingMode = tradeConfigJSF.getOrderProcessingMode();
    assertEquals("INVALID", orderProcessingMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeWithNullMode_kkJV4() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String orderProcessingMode = tradeConfigJSF.getOrderProcessingMode();
    assertNull(orderProcessingMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeList_vNpA0() {
    String[] runtimeModeList = new String[]{"mode1", "mode2"};
    tradeConfigJSF.setRuntimeModeList(runtimeModeList);
    assertEquals(runtimeModeList, tradeConfigJSF.getRuntimeModeList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeListWithNull_Nylt1() {
    tradeConfigJSF.setRuntimeModeList(null);
    assertNotNull(tradeConfigJSF.getRuntimeModeList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeListWithEmptyArray_ZcUM2() {
    tradeConfigJSF.setRuntimeModeList(new String[0]);
    assertEquals(0, tradeConfigJSF.getRuntimeModeList().length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeListWithDuplicateValues_oUmu3() {
    String[] runtimeModeList = new String[]{"mode1", "mode1"};
    tradeConfigJSF.setRuntimeModeList(runtimeModeList);
    assertEquals(1, tradeConfigJSF.getRuntimeModeList().length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeListWithInvalidValues_XJRz4() {
    String[] runtimeModeList = new String[]{"invalid_mode"};
    tradeConfigJSF.setRuntimeModeList(runtimeModeList);
    assertEquals(0, tradeConfigJSF.getRuntimeModeList().length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeListWithValidValues_ixRy5() {
    String[] runtimeModeList = new String[]{"mode1", "mode2"};
    tradeConfigJSF.setRuntimeModeList(runtimeModeList);
    assertEquals(2, tradeConfigJSF.getRuntimeModeList().length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsDisplayOrderAlertsNotNull_JFcP3() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setDisplayOrderAlerts(true);
    assertFalse(tradeConfigJSF.isDisplayOrderAlerts());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequency_iHeH0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int listQuotePriceChangeFrequency = tradeConfigJSF.getListQuotePriceChangeFrequency();
    assertEquals(1, listQuotePriceChangeFrequency);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequency_Null_LbgU1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int listQuotePriceChangeFrequency = tradeConfigJSF.getListQuotePriceChangeFrequency();
    assertNull(listQuotePriceChangeFrequency);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequency_Zero_zHkS2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int listQuotePriceChangeFrequency = tradeConfigJSF.getListQuotePriceChangeFrequency();
    assertEquals(0, listQuotePriceChangeFrequency);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequency_Negative_JrPX3() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int listQuotePriceChangeFrequency = tradeConfigJSF.getListQuotePriceChangeFrequency();
    assertEquals(-1, listQuotePriceChangeFrequency);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingModeNull_qFiN1() {
    tradeConfigJSF.setOrderProcessingMode(null);
    assertNull(tradeConfigJSF.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingModeEmpty_wtlr2() {
    tradeConfigJSF.setOrderProcessingMode("");
    assertEquals("", tradeConfigJSF.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingModeInvalid_RAFf4() {
    tradeConfigJSF.setOrderProcessingMode("invalid");
    assertEquals("invalid", tradeConfigJSF.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingModeValid_fqSW5() {
    tradeConfigJSF.setOrderProcessingMode("valid");
    assertEquals("valid", tradeConfigJSF.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingModeUppercase_TPlv6() {
    tradeConfigJSF.setOrderProcessingMode("TEST");
    assertEquals("TEST", tradeConfigJSF.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingModeLowercase_hQOK7() {
    tradeConfigJSF.setOrderProcessingMode("test");
    assertEquals("test", tradeConfigJSF.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingModeMixedcase_UoiY8() {
    tradeConfigJSF.setOrderProcessingMode("TeSt");
    assertEquals("TeSt", tradeConfigJSF.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingModeSpecialChars_nWdJ9() {
    tradeConfigJSF.setOrderProcessingMode("test!");
    assertEquals("test!", tradeConfigJSF.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingModeMultipleWords_YFxE10() {
    tradeConfigJSF.setOrderProcessingMode("test test");
    assertEquals("test test", tradeConfigJSF.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingModeMultipleWordsWithSpecialChars_ExKh11() {
    tradeConfigJSF.setOrderProcessingMode("test! test!");
    assertEquals("test! test!", tradeConfigJSF.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingModeMultipleWordsWithUppercase_YjXp12() {
    tradeConfigJSF.setOrderProcessingMode("TEST TEST");
    assertEquals("TEST TEST", tradeConfigJSF.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingModeMultipleWordsWithMixedcase_trJq14() {
    tradeConfigJSF.setOrderProcessingMode("TeSt TeSt");
    assertEquals("TeSt TeSt", tradeConfigJSF.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterations_qQca1_GgrW0_1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int primIterations = 10;
    tradeConfigJSF.setPrimIterations(primIterations);
    tradeConfigJSF.setPrimIterations(0);
    tradeConfigJSF.setPrimIterations(1);
    tradeConfigJSF.setPrimIterations(-1);
    tradeConfigJSF.setPrimIterations(Integer.MAX_VALUE + 1);
    tradeConfigJSF.setPrimIterations(Integer.MIN_VALUE - 1);
    assertEquals(primIterations, tradeConfigJSF.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterations_qQca1_GgrW0_2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int primIterations = 10;
    tradeConfigJSF.setPrimIterations(primIterations);
    tradeConfigJSF.setPrimIterations(0);
    tradeConfigJSF.setPrimIterations(1);
    tradeConfigJSF.setPrimIterations(-1);
    tradeConfigJSF.setPrimIterations(Integer.MAX_VALUE + 1);
    tradeConfigJSF.setPrimIterations(Integer.MIN_VALUE - 1);
    assertEquals(0, tradeConfigJSF.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterations_qQca1_GgrW0_3() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int primIterations = 10;
    tradeConfigJSF.setPrimIterations(primIterations);
    tradeConfigJSF.setPrimIterations(0);
    tradeConfigJSF.setPrimIterations(1);
    tradeConfigJSF.setPrimIterations(-1);
    tradeConfigJSF.setPrimIterations(Integer.MAX_VALUE + 1);
    tradeConfigJSF.setPrimIterations(Integer.MIN_VALUE - 1);
    assertEquals(1, tradeConfigJSF.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterations_qQca1_GgrW0_4() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int primIterations = 10;
    tradeConfigJSF.setPrimIterations(primIterations);
    tradeConfigJSF.setPrimIterations(0);
    tradeConfigJSF.setPrimIterations(1);
    tradeConfigJSF.setPrimIterations(-1);
    tradeConfigJSF.setPrimIterations(Integer.MAX_VALUE + 1);
    tradeConfigJSF.setPrimIterations(Integer.MIN_VALUE - 1);
    assertEquals(-1, tradeConfigJSF.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterations_qQca1_GgrW0_5() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int primIterations = 10;
    tradeConfigJSF.setPrimIterations(primIterations);
    tradeConfigJSF.setPrimIterations(0);
    tradeConfigJSF.setPrimIterations(1);
    tradeConfigJSF.setPrimIterations(-1);
    tradeConfigJSF.setPrimIterations(Integer.MAX_VALUE + 1);
    tradeConfigJSF.setPrimIterations(Integer.MIN_VALUE - 1);
    assertEquals(Integer.MAX_VALUE + 1, tradeConfigJSF.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxUsersWithPositiveValue_dKhI4_guEH0() {
    int maxUsers = tradeConfigJSF.getMaxUsers();
    assertEquals(10, maxUsers);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsLongRun_Invalid_cvHP3_xuJo0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("invalid");
    assertFalse(tradeConfig.isLongRun());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsLongRun_Empty_EWNV4_BteU0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("");
    assertFalse(tradeConfig.isLongRun());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetResultWithDifferentTypes_BNBn9_Nuom0_1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setResult("success");
    tradeConfigJSF.setResult("123");
    tradeConfigJSF.setResult("true");
    tradeConfigJSF.setResult("false");
    assertEquals("success", tradeConfigJSF.getResult());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetResultWithDifferentTypes_BNBn9_Nuom0_2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setResult("success");
    tradeConfigJSF.setResult("123");
    tradeConfigJSF.setResult("true");
    tradeConfigJSF.setResult("false");
    assertEquals("123", tradeConfigJSF.getResult());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetResultWithDifferentTypes_BNBn9_Nuom0_3() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setResult("success");
    tradeConfigJSF.setResult("123");
    tradeConfigJSF.setResult("true");
    tradeConfigJSF.setResult("false");
    assertEquals("true", tradeConfigJSF.getResult());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfig_MAX_USERS_BOIG3_TkWA0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setOrderProcessingMode("MAX_USERS");
    tradeConfigJSF.updateConfig();
    assertEquals("Trade configuration update. Current config:", tradeConfigJSF.getResult());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfig_MAX_QUOTES_SUEa4_wpTe0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setOrderProcessingMode("MAX_QUOTES");
    tradeConfigJSF.updateConfig();
    assertEquals("Trade configuration update. Current config:", tradeConfigJSF.getResult());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceListWithInvalidValues_WujF5_AfTt0() {
    String[] webInterfaceList = new String[]{"web1", "web2", "web3", "invalid"};
    Mockito.when(tradeConfigJSF.getWebInterfaceList()).thenReturn(webInterfaceList);
    String[] actualWebInterfaceList = tradeConfigJSF.getWebInterfaceList();
    assertArrayEquals(webInterfaceList, actualWebInterfaceList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeList_vNpA0_nGeC0() {
    String[] runtimeModeList = new String[]{"mode1", "mode2"};
    tradeConfigJSF.setRuntimeModeList(runtimeModeList);
    assertEquals(Arrays.asList(runtimeModeList), tradeConfigJSF.getRuntimeModeList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeListWithNull_Nylt1_yaET0() {
    tradeConfigJSF.setOrderProcessingMode(null);
    assertNotNull(tradeConfigJSF.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeListWithDuplicateValues_oUmu3_kKLv0() {
    String[] runtimeModeList = new String[]{"mode1", "mode1"};
    tradeConfigJSF.setRuntimeModeList(runtimeModeList);
    assertEquals(2, tradeConfigJSF.getRuntimeModeList().length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeList_SEOp0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] runtimeModeList = tradeConfigJSF.getRuntimeModeList();
    assertNotNull(runtimeModeList);
    assertEquals(3, runtimeModeList.length);
    assertEquals("DEV", runtimeModeList[0]);
    assertEquals("TEST", runtimeModeList[1]);
    assertEquals("PROD", runtimeModeList[2]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeList_NullRuntimeModeList_MdOv1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setRuntimeModeList(null);
    String[] runtimeModeList = tradeConfigJSF.getRuntimeModeList();
    assertNotNull(runtimeModeList);
    assertEquals(0, runtimeModeList.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeList_kBMK0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] orderProcessingModeList = tradeConfigJSF.getOrderProcessingModeList();
    assertNotNull(orderProcessingModeList);
    assertEquals(3, orderProcessingModeList.length);
    assertEquals("AUTO", orderProcessingModeList[0]);
    assertEquals("MANUAL", orderProcessingModeList[1]);
    assertEquals("HYBRID", orderProcessingModeList[2]);
  }
}