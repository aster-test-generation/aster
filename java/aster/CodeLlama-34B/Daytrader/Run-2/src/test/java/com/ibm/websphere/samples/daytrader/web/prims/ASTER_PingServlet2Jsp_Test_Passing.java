/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Jsp_Test_Passing {
  @Mock
  HttpServletRequest httpservletrequest;
  @Mock
  HttpServletResponse httpservletresponse;
  @InjectMocks
  PingServlet2Jsp pingservlet2jsp;
  private static int hitCount = 0;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_Wvyc0() throws ServletException, IOException {
    PingServlet2Jsp servlet = new PingServlet2Jsp();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doPost(req, res);
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).setContentType("text/html");
    verify(res).getWriter().println("<html><body>PingServlet2Jsp</body></html>");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithInvalidRequest_fbBT1() throws ServletException, IOException {
    PingServlet2Jsp servlet = new PingServlet2Jsp();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getMethod()).thenReturn("POST");
    servlet.doPost(req, res);
    verify(res).setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
    verify(res).setContentType("text/html");
    verify(res).getWriter().println("<html><body>Invalid request method</body></html>");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithInvalidResponse_SmEU2() throws ServletException, IOException {
    PingServlet2Jsp servlet = new PingServlet2Jsp();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(res.getStatus()).thenReturn(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    servlet.doPost(req, res);
    verify(res).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    verify(res).setContentType("text/html");
    verify(res).getWriter().println("<html><body>Internal server error</body></html>");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullRequest_EZbM3() throws ServletException, IOException {
    PingServlet2Jsp servlet = new PingServlet2Jsp();
    HttpServletRequest req = null;
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doPost(req, res);
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).setContentType("text/html");
    verify(res).getWriter().println("<html><body>Bad request</body></html>");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullResponse_KQBu4() throws ServletException, IOException {
    PingServlet2Jsp servlet = new PingServlet2Jsp();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = null;
    servlet.doPost(req, res);
    verify(req).getMethod();
    verify(req).getRequestURI();
    verify(req).getParameterMap();
    verify(req).getParameter("name");
    verify(req).getParameter("age");
    verify(req).getParameter("gender");
    verify(req).getParameter("email");
    verify(req).getParameter("phone");
    verify(req).getParameter("address");
    verify(req).getParameter("city");
    verify(req).getParameter("state");
    verify(req).getParameter("zip");
    verify(req).getParameter("country");
    verify(req).getParameter("comment");
    verify(req).getParameter("submit");
    verify(req).getParameter("reset");
    verify(req).getParameter("cancel");
    verify(req).getParameter("back");
    verify(req).getParameter("next");
    verify(req).getParameter("previous");
    verify(req).getParameter("first");
    verify(req).getParameter("last");
    verify(req).getParameter("page");
    verify(req).getParameter("pages");
    verify(req).getParameter("total");
    verify(req).getParameter("size");
    verify(req).getParameter("sort");
    verify(req).getParameter("order");
    verify(req).getParameter("search");
    verify(req).getParameter("filter");
  }
}