/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.*;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Passing {
  private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
  private static Integer marketSummaryLock = new Integer(0);
  private static long nextMarketSummary = System.currentTimeMillis();
  private static String getAllQuotesSQL = "select * from quoteejb q";
  private boolean inSession = false;
  private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
  private  UserTransaction txn;
  TradeDirect tradedirect;
  DataSource datasource;
  Connection connection;
  PreparedStatement preparedstatement;
  private static final String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
  private static final String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";
  private static final String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";
  private static BigDecimal ZERO = new BigDecimal(0.0);
  private static final String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
  private static final String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
  private static final String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
  private ManagedExecutorService mes;

  public void testGetMarketSummaryInternal_FWUW0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData);
  }

  public void testGetMarketSummaryInternalWithTopGainers_smPt1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getTopGainers());
  }

  public void testGetMarketSummaryInternalWithTopLosers_PHTa2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getTopLosers());
  }

  public void testGetMarketSummaryInternalWithTSIA_hZKk3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getTSIA());
  }

  public void testGetMarketSummaryInternalWithOpenTSIA_biFU4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getOpenTSIA());
  }

  public void testGetMarketSummaryInternalWithVolume_fMaK5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getVolume());
  }

  public void testGetMarketSummaryInternalWithTopGainersAndTopLosers_ZfEp6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getTopGainers());
    assertNotNull(marketSummaryData.getTopLosers());
  }

  public void testGetMarketSummaryInternalWithTSIAAndOpenTSIA_EpTG7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getTSIA());
    assertNotNull(marketSummaryData.getOpenTSIA());
  }

  public void testGetMarketSummaryInternalWithTSIAAndVolume_DGOg8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getTSIA());
    assertNotNull(marketSummaryData.getVolume());
  }

  public void testGetMarketSummaryInternalWithOpenTSIAAndVolume_LttC9() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getOpenTSIA());
    assertNotNull(marketSummaryData.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRecreateDBTables_ConnectionFailure_IKtG2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[]{"DROP TABLE IF EXISTS trade", "CREATE TABLE trade (id INT PRIMARY KEY, name VARCHAR(255))"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    Connection conn = mock(Connection.class);
    when(conn.createStatement()).thenThrow(new SQLException("Connection failure"));
    boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
    assertFalse(success);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRecreateDBTables_success_NdmR0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[]{"DROP TABLE IF EXISTS trade", "CREATE TABLE trade (id INT PRIMARY KEY, name VARCHAR(255))"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
    assertFalse(success);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithException_icwi1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    PreparedStatement stmt = mock(PreparedStatement.class);
    ResultSet rs = mock(ResultSet.class);
    when(conn.prepareStatement(anyString())).thenReturn(stmt);
    when(stmt.executeQuery()).thenReturn(rs);
    when(rs.next()).thenThrow(new SQLException());
    try {
      tradeDirect.getAllQuotes();
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertFalse(e instanceof SQLException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginException_lsnH2() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.login("user1", null);
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertTrue(e instanceof Exception);
      assertEquals("Cannot invoke \"javax.sql.DataSource.getConnection()\" because \"this.datasource\" is null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginNullUserID_IEpz3() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.login(null, "password1");
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertTrue(e instanceof Exception);
      assertEquals("Cannot invoke \"javax.sql.DataSource.getConnection()\" because \"this.datasource\" is null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetConnPublicWithInvalidConnectionAndNullPassword_yudT16() throws Exception {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImpl_gAJE0() {
    TradeDirect tradeDirect = new TradeDirect();
    int result = tradeDirect.getImpl();
    assertEquals(TradeConfig.DIRECT, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImplWithNullInput_rvcx2() {
    TradeDirect tradeDirect = new TradeDirect();
    int result = tradeDirect.getImpl();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_VVeL1_weyE0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(10.0));
    orderData.setOrderFee(new BigDecimal(1.0));
    orderData.setSymbol("ABC");
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setQuote(new QuoteDataBean());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImplWithValidInputAndValidReturnType_ORJQ9_fzCH0_2() {
    TradeDirect tradeDirect = new TradeDirect();
    int result = tradeDirect.getImpl();
    assertTrue(result == TradeConfig.DIRECT);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Exception_kUfX6_ysWj0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.ASYNCH_2PHASE);
      assertNull(orderData);
    } catch (Exception e) {
      assertTrue(e instanceof Exception);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_UKBd0_ubyA0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
      assertNotNull(orderData);
      assertEquals("sold", orderData.getOrderStatus());
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InvalidHoldingID_zhuc2_vBRo0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      OrderDataBean orderData = tradeDirect.sell("userID", 0, TradeConfig.SYNCH);
      assertNull(orderData);
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InvalidOrderProcessingMode_nzQM3_oWTO0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      OrderDataBean orderData = tradeDirect.sell("userID", 1, 0);
      assertNull(orderData);
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch_jVpk5_jqCY0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.ASYNCH);
      assertNotNull(orderData);
      assertEquals("sold", orderData.getOrderStatus());
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch2Phase_nrMi6_Piub0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.ASYNCH_2PHASE);
      assertNotNull(orderData);
      assertEquals("sold", orderData.getOrderStatus());
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginSuccess_fNdN0_ynLv0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      AccountDataBean accountData = tradeDirect.login("user1", "password1");
      assertNotNull(accountData);
      assertEquals("user1", accountData.getProfileID());
      assertEquals("password1", accountData.getProfile().getPassword());
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailure_MSbN1_kAbo0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      AccountDataBean accountData = tradeDirect.login("user1", "wrong_password");
      assertNull(accountData);
    } catch (Exception e) {
    }
  }
}