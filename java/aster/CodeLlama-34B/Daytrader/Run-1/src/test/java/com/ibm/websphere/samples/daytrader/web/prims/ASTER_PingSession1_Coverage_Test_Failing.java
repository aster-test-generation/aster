/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingSession1_Coverage_Test_Failing {
  private ServletConfig config;
  private HttpSession session;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_KdXd0() {
    PingSession1 pingSession1 = new PingSession1();
    String expected = "HTTP Session Key: Tests management of a read only unique id";
    String actual = pingSession1.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_iuwg0() throws ServletException, IOException {
    PingSession1 pingSession1 = new PingSession1();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingSession1.doPost(req, res);
    verify(pingSession1).doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_sessionSetAttribute_oFpc7() throws Exception {
    PingSession1 pingSession1 = new PingSession1();
  }

  @Test
  public void testDoGet_YYwn0() throws ServletException, IOException {
    PingSession1 pingSession1 = new PingSession1();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(request.getSession(true)).thenReturn(session);
    when(session.getAttribute("sessiontest.counter")).thenReturn(1);
    pingSession1.doGet(request, response);
    verify(response).setContentType("text/html");
    verify(response).setHeader("SessionKeyTest-SessionID", "SessionID:1");
    verify(response).getWriter();
    verify(session).setAttribute("sessiontest.counter", 1);
  }
}