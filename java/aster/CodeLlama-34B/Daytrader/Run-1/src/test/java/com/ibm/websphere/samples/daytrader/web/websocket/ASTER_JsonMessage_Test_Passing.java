/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JsonMessage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_Null_XMlE0() {
    JsonMessage jsonMessage = new JsonMessage();
    String value = jsonMessage.getValue();
    assertNull(value);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_EmptyString_MAgs1() {
    JsonMessage jsonMessage = new JsonMessage();
    String value = jsonMessage.getValue();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_NonEmptyString_gYFm2() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("hello");
    String value = jsonMessage.getValue();
    assertEquals("hello", value);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_NullWithNull_LelG4() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue(null);
    String value = jsonMessage.getValue();
    assertNull(value);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_EmptyStringWithNull_jKRr5() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("");
    String value = jsonMessage.getValue();
    assertEquals("", value);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_validKey_ppqD0() {
    JsonMessage jsonMessage = new JsonMessage();
    String key = "key";
    jsonMessage.setKey(key);
    assertEquals(key, jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_nullKey_oYIE1() {
    JsonMessage jsonMessage = new JsonMessage();
    String key = null;
    jsonMessage.setKey(key);
    assertNull(jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_emptyKey_niqG2() {
    JsonMessage jsonMessage = new JsonMessage();
    String key = "";
    jsonMessage.setKey(key);
    assertEquals("", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_nonEmptyKey_vArG3() {
    JsonMessage jsonMessage = new JsonMessage();
    String key = "non-empty-key";
    jsonMessage.setKey(key);
    assertEquals(key, jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetKey_invalidKey_qmAw4() {
    JsonMessage jsonMessage = new JsonMessage();
    String key = "invalid-key";
    jsonMessage.setKey(key);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValue_uHaV0() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("test");
    assertEquals("test", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithNull_LsFX1() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue(null);
    assertNull(jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithEmptyString_xfAV2() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("");
    assertEquals("", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithSpecialCharacters_dnWW4() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("!@#$%^&*()_+");
    assertEquals("!@#$%^&*()_+", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithLongString_YAvr5() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("This is a very long string that exceeds the maximum length of the value field.");
    assertEquals("This is a very long string that exceeds the maximum length of the value field.", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithInvalidJson_taec6() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("{invalid json}");
    assertEquals("{invalid json}", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithValidJson_ICTY7() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("{\"key\":\"value\"}");
    assertEquals("{\"key\":\"value\"}", jsonMessage.getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetKey_Oxfc0() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("key");
    assertEquals("key", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetKeyWithNull_FoNt1() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey(null);
    assertNull(jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetKeyWithEmptyString_azCp2() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("");
    assertEquals("", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetKeyWithInvalidKey_ehjY3() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("invalid_key");
    assertEquals("invalid_key", jsonMessage.getKey());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetValue_NonString_ViAg3_KgzA0() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setValue("123");
    String value = jsonMessage.getValue();
    assertEquals("123", value);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetValueWithJsonObject_uPKz8_ldAT0() {
    JsonMessage jsonMessage = new JsonMessage();
    jsonMessage.setKey("{\"key\":\"value\"}");
    assertEquals("{\"key\":\"value\"}", jsonMessage.getKey());
  }
}