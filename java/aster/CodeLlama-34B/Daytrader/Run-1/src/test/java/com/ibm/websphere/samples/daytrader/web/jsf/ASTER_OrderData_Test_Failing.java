/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderData_Test_Failing {
  public void testSetOrderType_tmGo0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("market");
    assertEquals("market", orderData.getOrderType());
  }

  public void testSetOrderTypeNull_QaIh1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType(null);
    assertEquals(null, orderData.getOrderType());
  }

  public void testSetOrderTypeEmptyString_CIaL2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("");
    assertEquals("", orderData.getOrderType());
  }

  public void testSetOrderTypeInvalid_eulm3() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("invalid");
    assertEquals("invalid", orderData.getOrderType());
  }

  public void testSetOrderTypeDifferentCase_eWLG4() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("mArKeT");
    assertEquals("mArKeT", orderData.getOrderType());
  }

  public void testSetOrderTypeDifferentCase2_YPdc5() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("MaRkEt");
    assertEquals("MaRkEt", orderData.getOrderType());
  }

  public void testSetOrderTypeDifferentCase3_qzVr6() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("MARKET");
    assertEquals("MARKET", orderData.getOrderType());
  }

  public void testSetOrderTypeDifferentCase4_WNqy7() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("market");
    assertEquals("market", orderData.getOrderType());
  }

  public void testSetOrderTypeDifferentCase5_JFPy8() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("Market");
    assertEquals("Market", orderData.getOrderType());
  }

  public void testSetOrderTypeDifferentCase6_FlRk9() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("MARKET");
    assertEquals("MARKET", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithInvalidValue_KkvG2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", -1.0, "AAPL");
    orderData.setPrice(new BigDecimal(-1.0));
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithZeroValue_eHJe4() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 0.0, "AAPL");
    orderData.setPrice(new BigDecimal(0.0));
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithMaxValue_tuyH6() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0, "AAPL");
    orderData.setPrice(new BigDecimal(Double.MAX_VALUE));
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithNaN_CsNZ8() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setPrice(new BigDecimal(Double.NaN));
    assertEquals(new BigDecimal(Double.NaN), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithInfinity_zhbM9() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setPrice(new BigDecimal(Double.POSITIVE_INFINITY));
    assertEquals(new BigDecimal(Double.POSITIVE_INFINITY), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullPrice_ubSm7_1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL", null);
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullPrice_ubSm7_2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL", null);
    Date openDate = orderData.getOpenDate();
    assertEquals(new Date(), openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_1_YLsw0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertNull(new BigDecimal(10.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_2_uEht1() {
    OrderData orderData = new OrderData(2, "closed", new Date(), new Date(), new BigDecimal(20.0), "sell", 20.0, "GOOG");
    assertNull(new BigDecimal(20.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_4_Yaoo3() {
    OrderData orderData = new OrderData(4, "closed", new Date(), new Date(), new BigDecimal(40.0), "sell", 40.0, "FB");
    assertNull(new BigDecimal(40.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_8_CnUg7() {
    OrderData orderData = new OrderData(8, "closed", new Date(), new Date(), new BigDecimal(80.0), "sell", 80.0, "AMZN");
    assertNull(new BigDecimal(80.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_9_loXU8() {
    OrderData orderData = new OrderData(9, "open", new Date(), new Date(), new BigDecimal(90.0), "buy", 90.0, "FB");
    assertNull(new BigDecimal(90.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_10_JQAM9() {
    OrderData orderData = new OrderData(10, "closed", new Date(), new Date(), new BigDecimal(100.0), "sell", 100.0, "TSLA");
    assertNull(new BigDecimal(100.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_1_jKaF0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    BigDecimal total = orderData.getTotal();
    assertNull(new BigDecimal(10.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_5_PhQB4() {
    OrderData orderData = new OrderData(5, "open", new Date(), new Date(), new BigDecimal(50.0), "buy", 50.0, "TSLA");
    BigDecimal total = orderData.getTotal();
    assertNull(new BigDecimal(50.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_6_pbVf5() {
    OrderData orderData = new OrderData(6, "open", new Date(), new Date(), new BigDecimal(60.0), "sell", 60.0, "AAPL");
    BigDecimal total = orderData.getTotal();
    assertNull(new BigDecimal(60.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_8_XZhe7() {
    OrderData orderData = new OrderData(8, "open", new Date(), new Date(), new BigDecimal(80.0), "sell", 80.0, "AMZN");
    BigDecimal total = orderData.getTotal();
    assertNull(new BigDecimal(80.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_9_tqBi8() {
    OrderData orderData = new OrderData(9, "open", new Date(), new Date(), new BigDecimal(90.0), "buy", 90.0, "FB");
    BigDecimal total = orderData.getTotal();
    assertNull(new BigDecimal(90.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_10_qofY9() {
    OrderData orderData = new OrderData(10, "open", new Date(), new Date(), new BigDecimal(100.0), "sell", 100.0, "TSLA");
    BigDecimal total = orderData.getTotal();
    assertNull(new BigDecimal(100.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithInvalidValue_KkvG2_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setPrice(new BigDecimal(-1.0));
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithZeroValue_eHJe4_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setPrice(new BigDecimal(0.0));
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithMaxValue_tuyH6_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setPrice(new BigDecimal(Double.MAX_VALUE));
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithMinValue_QRpE7() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setPrice(new BigDecimal(Double.MIN_VALUE));
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithNaN_CsNZ8_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setPrice(new BigDecimal(Double.NaN));
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithInfinity_zhbM9_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setPrice(new BigDecimal(Double.POSITIVE_INFINITY));
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusWithInvalidStatus_MmxZ1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    try {
      orderData.setOrderStatus("invalid");
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid order status: invalid", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullPrice_ubSm7() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL", null);
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
    assertEquals(new Date(), openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_1_YLsw0_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals(new BigDecimal(10.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_2_uEht1_fid1() {
    OrderData orderData = new OrderData(2, "closed", new Date(), new Date(), new BigDecimal(20.0), "sell", 20.0, "GOOG");
    assertEquals(new BigDecimal(20.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_3_QDOu2_fid1() {
    OrderData orderData = new OrderData(3, "open", new Date(), new Date(), new BigDecimal(30.0), "buy", 30.0, "AMZN");
    assertEquals(new BigDecimal(30.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_4_Yaoo3_fid1() {
    OrderData orderData = new OrderData(4, "closed", new Date(), new Date(), new BigDecimal(40.0), "sell", 40.0, "FB");
    assertEquals(new BigDecimal(40.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_5_arIk4_fid1() {
    OrderData orderData = new OrderData(5, "open", new Date(), new Date(), new BigDecimal(50.0), "buy", 50.0, "TSLA");
    assertEquals(new BigDecimal(50.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_6_qDZm5_fid1() {
    OrderData orderData = new OrderData(6, "closed", new Date(), new Date(), new BigDecimal(60.0), "sell", 60.0, "AAPL");
    assertEquals(new BigDecimal(60.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_7_SPYL6_fid1() {
    OrderData orderData = new OrderData(7, "open", new Date(), new Date(), new BigDecimal(70.0), "buy", 70.0, "GOOG");
    assertEquals(new BigDecimal(70.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_8_CnUg7_fid1() {
    OrderData orderData = new OrderData(8, "closed", new Date(), new Date(), new BigDecimal(80.0), "sell", 80.0, "AMZN");
    assertEquals(new BigDecimal(80.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_9_loXU8_fid1() {
    OrderData orderData = new OrderData(9, "open", new Date(), new Date(), new BigDecimal(90.0), "buy", 90.0, "FB");
    assertEquals(new BigDecimal(90.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_10_JQAM9_fid1() {
    OrderData orderData = new OrderData(10, "closed", new Date(), new Date(), new BigDecimal(100.0), "sell", 100.0, "TSLA");
    assertEquals(new BigDecimal(100.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_1_jKaF0_fid1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    BigDecimal total = orderData.getTotal();
    assertEquals(new BigDecimal(10.0), total);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_2_eoNj1_fid1() {
    OrderData orderData = new OrderData(2, "open", new Date(), new Date(), new BigDecimal(20.0), "sell", 20.0, "GOOG");
    BigDecimal total = orderData.getTotal();
    assertEquals(new BigDecimal(20.0), total);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_3_MVeJ2_fid1() {
    OrderData orderData = new OrderData(3, "open", new Date(), new Date(), new BigDecimal(30.0), "buy", 30.0, "AMZN");
    BigDecimal total = orderData.getTotal();
    assertEquals(new BigDecimal(30.0), total);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_4_ALMP3_fid1() {
    OrderData orderData = new OrderData(4, "open", new Date(), new Date(), new BigDecimal(40.0), "sell", 40.0, "FB");
    BigDecimal total = orderData.getTotal();
    assertEquals(new BigDecimal(40.0), total);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_5_PhQB4_fid1() {
    OrderData orderData = new OrderData(5, "open", new Date(), new Date(), new BigDecimal(50.0), "buy", 50.0, "TSLA");
    BigDecimal total = orderData.getTotal();
    assertEquals(new BigDecimal(50.0), total);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_6_pbVf5_fid1() {
    OrderData orderData = new OrderData(6, "open", new Date(), new Date(), new BigDecimal(60.0), "sell", 60.0, "AAPL");
    BigDecimal total = orderData.getTotal();
    assertEquals(new BigDecimal(60.0), total);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_7_bHnp6_fid1() {
    OrderData orderData = new OrderData(7, "open", new Date(), new Date(), new BigDecimal(70.0), "buy", 70.0, "GOOG");
    BigDecimal total = orderData.getTotal();
    assertEquals(new BigDecimal(70.0), total);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_8_XZhe7_fid1() {
    OrderData orderData = new OrderData(8, "open", new Date(), new Date(), new BigDecimal(80.0), "sell", 80.0, "AMZN");
    BigDecimal total = orderData.getTotal();
    assertEquals(new BigDecimal(80.0), total);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_9_tqBi8_fid1() {
    OrderData orderData = new OrderData(9, "open", new Date(), new Date(), new BigDecimal(90.0), "buy", 90.0, "FB");
    BigDecimal total = orderData.getTotal();
    assertEquals(new BigDecimal(90.0), total);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_10_qofY9_fid1() {
    OrderData orderData = new OrderData(10, "open", new Date(), new Date(), new BigDecimal(100.0), "sell", 100.0, "TSLA");
    BigDecimal total = orderData.getTotal();
    assertEquals(new BigDecimal(100.0), total);
  }
}