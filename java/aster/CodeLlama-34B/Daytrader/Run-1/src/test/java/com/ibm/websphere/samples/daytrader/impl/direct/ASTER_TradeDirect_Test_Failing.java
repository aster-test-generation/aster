/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.*;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Failing {
  private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
  private static Integer marketSummaryLock = new Integer(0);
  private static long nextMarketSummary = System.currentTimeMillis();
  private static String getAllQuotesSQL = "select * from quoteejb q";
  private boolean inSession = false;
  private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
  private  UserTransaction txn;
  TradeDirect tradedirect;
  DataSource datasource;
  Connection connection;
  PreparedStatement preparedstatement;
  private static final String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
  private static final String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";
  private static final String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";
  private static BigDecimal ZERO = new BigDecimal(0.0);
  private static final String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
  private static final String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
  private static final String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
  private ManagedExecutorService mes;

  public void testGetMarketSummaryInternal_FWUW0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData);
  }

  public void testGetMarketSummaryInternalWithTopGainers_smPt1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getTopGainers());
  }

  public void testGetMarketSummaryInternalWithTopLosers_PHTa2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getTopLosers());
  }

  public void testGetMarketSummaryInternalWithTSIA_hZKk3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getTSIA());
  }

  public void testGetMarketSummaryInternalWithOpenTSIA_biFU4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getOpenTSIA());
  }

  public void testGetMarketSummaryInternalWithVolume_fMaK5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getVolume());
  }

  public void testGetMarketSummaryInternalWithTopGainersAndTopLosers_ZfEp6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getTopGainers());
    assertNotNull(marketSummaryData.getTopLosers());
  }

  public void testGetMarketSummaryInternalWithTSIAAndOpenTSIA_EpTG7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getTSIA());
    assertNotNull(marketSummaryData.getOpenTSIA());
  }

  public void testGetMarketSummaryInternalWithTSIAAndVolume_DGOg8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getTSIA());
    assertNotNull(marketSummaryData.getVolume());
  }

  public void testGetMarketSummaryInternalWithOpenTSIAAndVolume_LttC9() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getOpenTSIA());
    assertNotNull(marketSummaryData.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRecreateDBTables_Exception_KztG2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[]{"DROP TABLE IF EXISTS trade", "CREATE TABLE trade (id INTEGER PRIMARY KEY, name VARCHAR(255))"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
      tradeDirect.recreateDBTables(sqlBuffer, out);
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertTrue(e instanceof SQLException);
      assertEquals("TradeDirect:recreateDBTables() -- Error dropping and recreating the database tables", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRecreateDBTables_exception_Pinv2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[]{"DROP TABLE IF EXISTS trade", "CREATE TABLE trade (id INT PRIMARY KEY, name VARCHAR(255))"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
      tradeDirect.recreateDBTables(sqlBuffer, out);
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertTrue(e instanceof SQLException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_MarketSummaryIntervalZero_xOSm0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummary = tradeDirect.getMarketSummary();
    assertNotNull(marketSummary);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_EYkd0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    assertNotNull(quotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_EYkd0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    assertNotNull(quotes);
    assertEquals(100, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithEmptyResultSet_qulM1_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    assertNotNull(quotes);
    assertEquals(0, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_null_kKyh0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(null);
      assertNull(orderDataBeans);
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_empty_GzrE1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders("");
      assertNotNull(orderDataBeans);
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_xbXZ0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    assertNotNull(quoteData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_xbXZ0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    assertNotNull(quoteData);
    assertEquals("ABC", quoteData.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_xbXZ0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    assertNotNull(quoteData);
    assertEquals(100, quoteData.getPrice().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_xbXZ0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    assertNotNull(quoteData);
    assertEquals(90, quoteData.getOpen().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_xbXZ0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    assertEquals(80, quoteData.getPrice().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_xbXZ0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    assertEquals(10, quoteData.getChange(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_xbXZ0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    assertEquals(110, quoteData.getHigh().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_xbXZ0_8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    assertNotNull(quoteData);
    assertEquals("ABC", quoteData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_xbXZ0_9() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    assertEquals(1000, quoteData.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_IzFf0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_IzFf0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData);
    assertEquals(0, accountData.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_IzFf0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData);
    assertNotNull(accountData.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_IzFf0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData);
    assertEquals(new BigDecimal(0), accountData.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_IzFf0_8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData);
    assertEquals(new BigDecimal(0), accountData.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_TeoX0_1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertNotNull(quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_TeoX0_2() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_TeoX0_3() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertEquals(100.0, quoteDataBean.getPrice().doubleValue(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_TeoX0_8() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertEquals(100.0, quoteDataBean.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseWithInvalidSymbol_wwnq1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("INVALID");
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseWithNullSymbol_Rqdg2() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase(null);
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Synch_JGav0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Synch_JGav0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(orderData);
    assertEquals("sold", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch_tFvJ1_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch_tFvJ1_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(orderData);
    assertEquals("sold", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch2Phase_fDWM2_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch2Phase_fDWM2_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(orderData);
    assertEquals("sold", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InvalidHoldingID_hIBv4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    Integer holdingID = -1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_NullUserID_qien6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = null;
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNull(orderData);
    // Fix the assertion
    assertNotNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_NullHoldingID_Kwrz7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    Integer holdingID = null;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithInvalidHoldingID_iEFO1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = tradeDirect.getHolding(0);
    assertNull(holdingData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithNullHoldingID_aaMs2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = tradeDirect.getHolding(null);
    assertNull(holdingData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithNonExistentHoldingID_aFfz4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = tradeDirect.getHolding(1000);
    assertNull(holdingData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_validInputs_LnMy0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(changeFactor.multiply(new BigDecimal("100")).setScale(2, BigDecimal.ROUND_HALF_UP), quoteData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_validInputs_LnMy0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(new BigDecimal("150").setScale(2, BigDecimal.ROUND_HALF_UP), quoteData.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_validInputs_LnMy0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(new BigDecimal("100").setScale(2, BigDecimal.ROUND_HALF_UP), quoteData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_validInputs_LnMy0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(new BigDecimal("100").setScale(2, BigDecimal.ROUND_HALF_UP), quoteData.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_validInputs_LnMy0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(new BigDecimal("150").setScale(2, BigDecimal.ROUND_HALF_UP), quoteData.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_invalidSymbol_kkTO1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "INVALID_SYMBOL";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertNull(quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_invalidChangeFactor_eBGM2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("0");
    double sharesTraded = 100;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertNull(quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_invalidSharesTraded_amQD3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = -100;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertNull(quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetConnPublic_efFt0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = tradeDirect.getConnPublic();
    assertNotNull(conn);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_msFs0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(0.1);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getPrice().multiply(changeFactor), updatedQuoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_msFs0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(0.1);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getOpen().multiply(changeFactor), updatedQuoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_msFs0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(0.1);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getLow().multiply(changeFactor), updatedQuoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_msFs0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(0.1);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getHigh().multiply(changeFactor), updatedQuoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_msFs0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(0.1);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getVolume() + sharesTraded, updatedQuoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_msFs0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(0.1);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertNotNull(updatedQuoteDataBean);
    assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_invalidOrderID_nqEe1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = null;
    boolean twoPhase = true;
    try {
      tradeDirect.cancelOrder(orderID, twoPhase);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid order ID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_cYnE0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNotNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_cYnE0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("fullName1", accountProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_cYnE0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("address1", accountProfileData.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_cYnE0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNotNull(accountProfileData);
    assertEquals("email1", accountProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_cYnE0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNotNull(accountProfileData);
    assertEquals("creditCard1", accountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_hRcQ0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Main St");
    accountProfileData.setEmail("test@example.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getUserID(), updatedAccountProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_hRcQ0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Main St");
    accountProfileData.setEmail("test@example.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertNotNull(updatedAccountProfileData);
    assertEquals(accountProfileData.getPassword(), updatedAccountProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_hRcQ0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Main St");
    accountProfileData.setEmail("test@example.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getFullName(), updatedAccountProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_hRcQ0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Main St");
    accountProfileData.setEmail("test@example.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertNotNull(updatedAccountProfileData);
    assertEquals(accountProfileData.getAddress(), updatedAccountProfileData.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_hRcQ0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Main St");
    accountProfileData.setEmail("test@example.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getEmail(), updatedAccountProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_hRcQ0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Main St");
    accountProfileData.setEmail("test@example.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getCreditCard(), updatedAccountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_vmyU0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("testUserID");
    assertNotNull(accountProfileData);
    assertEquals("testUserID", accountProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_vmyU0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("testUserID");
    assertNotNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_vmyU0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("testUserID");
    assertNotNull(accountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInvalidUserID_KuQD1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("invalidUserID");
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullUserID_vaEK2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData(null);
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithEmptyUserID_hytW3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("");
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInvalidAccountProfileDataBean_ymMA7_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("testUserID");
    assertNotNull(accountProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInvalidAccountProfileDataBean_ymMA7_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("testUserID");
    assertNotNull(accountProfileData.getAddress());
    assertNotNull(accountProfileData.getEmail());
    assertNotNull(accountProfileData.getPassword());
    assertNotNull(accountProfileData.getFullName());
    assertNotNull(accountProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_utTl0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders("user1");
    for (OrderDataBean orderDataBean : orderDataBeans) {
    }
    assertEquals(10, orderDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_dukJ0_Ketq0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    for (QuoteDataBean quoteData : quotes) {
    }
    assertNotNull(quotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_dukJ0_Ketq0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    for (QuoteDataBean quoteData : quotes) {
    }
    assertEquals(10, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRecreateDBTables_success_NdmR0_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[]{"DROP TABLE IF EXISTS trade", "CREATE TABLE trade (id INT PRIMARY KEY, name VARCHAR(255))"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
    assertTrue(success);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_EYkd0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    assertEquals(100, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithEmptyResultSet_qulM1_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    assertEquals(0, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_AYpe0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    assertTrue(quotes.size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithException_icwi1_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    PreparedStatement stmt = mock(PreparedStatement.class);
    ResultSet rs = mock(ResultSet.class);
    when(conn.prepareStatement(anyString())).thenReturn(stmt);
    when(stmt.executeQuery()).thenReturn(rs);
    when(rs.next()).thenThrow(new SQLException());
    try {
      tradeDirect.getAllQuotes();
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertTrue(e instanceof SQLException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_null_kKyh0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(null);
      assertTrue(orderDataBeans.isEmpty());
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_empty_GzrE1_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders("");
      assertTrue(orderDataBeans.isEmpty());
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_xbXZ0_1_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    assertNotNull(quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_xbXZ0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    assertEquals("ABC", quoteData.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_xbXZ0_3_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    assertEquals(100, quoteData.getPrice().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_xbXZ0_4_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    assertEquals(90, quoteData.getOpen().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_xbXZ0_5_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    assertEquals(80, quoteData.getLow().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_xbXZ0_8_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    assertEquals("ABC", quoteData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_IzFf0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertEquals(1, accountData.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_IzFf0_3_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertEquals(0, accountData.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_IzFf0_4_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertEquals(0, accountData.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_IzFf0_5_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_IzFf0_6_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_IzFf0_7_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertEquals(new BigDecimal(0), accountData.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_IzFf0_8_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertEquals(new BigDecimal(0), accountData.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_IzFf0_9_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_TeoX0_1_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_TeoX0_2_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_TeoX0_4_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertEquals(100.0, quoteDataBean.getOpen().doubleValue(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_TeoX0_5_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertEquals(100.0, quoteDataBean.getLow().doubleValue(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_TeoX0_6_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertEquals(100.0, quoteDataBean.getHigh().doubleValue(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_TeoX0_7() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertEquals(0.0, quoteDataBean.getChange(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Synch_JGav0_1_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Synch_JGav0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertEquals("sold", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch_tFvJ1_1_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch_tFvJ1_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertEquals("sold", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch2Phase_fDWM2_1_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Asynch2Phase_fDWM2_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertEquals("sold", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InvalidUserID_GoEX3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "invalid_user";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InvalidOrderProcessingMode_oDPZ5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    Integer holdingID = 1;
    int orderProcessingMode = -1;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_NullUserID_qien6_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = null;
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithInvalidHoldingID_iEFO1_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = tradeDirect.getHolding(-1);
    assertNull(holdingData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_validInputs_LnMy0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertNotNull(quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_validInputs_LnMy0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(symbol, quoteData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_validInputs_LnMy0_4_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(new BigDecimal("100").setScale(2, BigDecimal.ROUND_HALF_UP), quoteData.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_validInputs_LnMy0_5_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(new BigDecimal("100").setScale(2, BigDecimal.ROUND_HALF_UP), quoteData.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_validInputs_LnMy0_7_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(new BigDecimal("100").setScale(2, BigDecimal.ROUND_HALF_UP), quoteData.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginException_lsnH2_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.login("user1", null);
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertTrue(e instanceof Exception);
      assertEquals("TradeDirect:Login failure for user: user1\n\tIncorrect password-->user1:null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginNullUserID_IEpz3_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.login(null, "password1");
      fail("Expected exception not thrown");
    } catch (Exception e) {
      assertTrue(e instanceof Exception);
      assertEquals("TradeDirect:Login failure for user: null\n\tIncorrect password-->null:password1", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetConnPublic_efFt0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = tradeDirect.getConnPublic();
    assertEquals(conn.getClass(), Connection.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_msFs0_6_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(0.1);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_cYnE0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("user1", accountProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_cYnE0_3_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("password1", accountProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_cYnE0_6_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("email1", accountProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_cYnE0_7_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals("creditCard1", accountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_hRcQ0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Main St");
    accountProfileData.setEmail("test@example.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getPassword(), updatedAccountProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_hRcQ0_4_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Main St");
    accountProfileData.setEmail("test@example.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getAddress(), updatedAccountProfileData.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_vmyU0_2_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("testUserID");
    assertEquals("testUserID", accountProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_vmyU0_3_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("testUserID");
    assertNotNull(accountProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_vmyU0_4_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("testUserID");
    assertNotNull(accountProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_vmyU0_6_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("testUserID");
    assertNotNull(accountProfileData.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_vmyU0_8_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("testUserID");
    assertNotNull(accountProfileData.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullAccountProfileDataBean_HtgX8_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("testUserID");
    assertNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_VVeL1_weyE0_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setQuantity(100.0);
    orderData.setPrice(new BigDecimal(10.0));
    orderData.setOrderFee(new BigDecimal(1.0));
    orderData.setSymbol("ABC");
    orderData.setOrderID(1);
    orderData.setOpenDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
    orderData.setAccount(new AccountDataBean());
    orderData.setQuote(new QuoteDataBean());
    orderData.setHolding(new HoldingDataBean());
    OrderDataBean result = tradeDirect.completeOrder(1, true);
    assertEquals(orderData, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_NullOrderProcessingMode_HsRb8_EIJH0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    Integer holdingID = 1;
    int orderProcessingMode = 0;
    OrderDataBean orderData = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNull(orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_slgS0_bamH0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = tradeDirect.getHolding(1);
    assertNotNull(holdingData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_slgS0_bamH0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = tradeDirect.getHolding(1);
    assertEquals(1, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_slgS0_bamH0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = tradeDirect.getHolding(1);
    assertEquals(100.0, holdingData.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_slgS0_bamH0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = tradeDirect.getHolding(1);
    assertEquals("QUOTE1", holdingData.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_slgS0_bamH0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = tradeDirect.getHolding(1);
    assertEquals(new java.util.Date(), holdingData.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_slgS0_bamH0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    HoldingDataBean holdingData = tradeDirect.getHolding(1);
    assertEquals(BigDecimal.valueOf(100.0), holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testregister_wIkP0_1() throws Exception {
    datasource = mock(DataSource.class);
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    tradedirect = new TradeDirect();
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(datasource.getConnection()).thenReturn(connection);
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountDataBean accountData = tradedirect.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testregister_wIkP0_2() throws Exception {
    datasource = mock(DataSource.class);
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    tradedirect = new TradeDirect();
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(datasource.getConnection()).thenReturn(connection);
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountDataBean accountData = tradedirect.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(userID, accountData.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testregister_wIkP0_3() throws Exception {
    datasource = mock(DataSource.class);
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    tradedirect = new TradeDirect();
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(datasource.getConnection()).thenReturn(connection);
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountDataBean accountData = tradedirect.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(openBalance, accountData.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testregister_wIkP0_4() throws Exception {
    datasource = mock(DataSource.class);
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    tradedirect = new TradeDirect();
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(datasource.getConnection()).thenReturn(connection);
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountDataBean accountData = tradedirect.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(openBalance, accountData.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testregister_wIkP0_5() throws Exception {
    datasource = mock(DataSource.class);
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    tradedirect = new TradeDirect();
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(datasource.getConnection()).thenReturn(connection);
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountDataBean accountData = tradedirect.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(1, accountData.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testregister_wIkP0_6() throws Exception {
    datasource = mock(DataSource.class);
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    tradedirect = new TradeDirect();
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(datasource.getConnection()).thenReturn(connection);
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountDataBean accountData = tradedirect.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(0, accountData.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testregister_wIkP0_7() throws Exception {
    datasource = mock(DataSource.class);
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    tradedirect = new TradeDirect();
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(datasource.getConnection()).thenReturn(connection);
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountDataBean accountData = tradedirect.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(accountData.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testregister_wIkP0_8() throws Exception {
    datasource = mock(DataSource.class);
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    tradedirect = new TradeDirect();
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(datasource.getConnection()).thenReturn(connection);
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountDataBean accountData = tradedirect.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(accountData.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_cNov0_qFCj0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      QuoteDataBean quoteData = tradeDirect.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
      assertNotNull(quoteData);
      assertEquals("ABC", quoteData.getSymbol());
      assertEquals("Company ABC", quoteData.getCompanyName());
      assertEquals(new BigDecimal(10.0), quoteData.getPrice());
      assertEquals(new BigDecimal(10.0), quoteData.getOpen());
      assertEquals(new BigDecimal(10.0), quoteData.getLow());
      assertEquals(new BigDecimal(10.0), quoteData.getHigh());
      assertEquals(0.0, quoteData.getChange(), 0.0);
      assertEquals(0.0, quoteData.getVolume(), 0.0);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InvalidUserID_NELE1_qBLa0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      OrderDataBean orderData = tradeDirect.sell("invalidUserID", 1, TradeConfig.SYNCH);
      assertNull(orderData);
    } catch (Exception e) {
      assertTrue(e instanceof IllegalArgumentException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InSession_JulN4_Ccmd0() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    try {
      OrderDataBean orderData = tradeDirect.sell("userID", 1, TradeConfig.SYNCH);
      assertNotNull(orderData);
      assertEquals("sold", orderData.getOrderStatus());
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_IMyU0_VFRa0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@email.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountData = null;
    try {
      accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
    } catch (Exception e) {
      e.printStackTrace();
    }
    assertNotNull(accountData);
    assertEquals(userID, accountData.getProfileID());
    assertEquals(openBalance, accountData.getOpenBalance());
    assertEquals(0, accountData.getLoginCount());
    assertEquals(0, accountData.getLogoutCount());
    assertNotNull(accountData.getCreationDate());
    assertNotNull(accountData.getLastLogin());
    assertEquals(openBalance, accountData.getBalance());
    assertNotNull(accountData.getProfile());
    assertEquals(userID, accountData.getProfile().getUserID());
    assertEquals(password, accountData.getProfile().getPassword());
    assertEquals(fullname, accountData.getProfile().getFullName());
    assertEquals(address, accountData.getProfile().getAddress());
    assertEquals(email, accountData.getProfile().getEmail());
    assertEquals(creditcard, accountData.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_TaOS1_hIbJ0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("invalid_user_id");
      assertNotNull(holdingDataBeans);
      assertEquals(0, holdingDataBeans.size());
    } catch (Exception e) {
      Log.error("TradeDirect:getHoldings -- error getting holdings for invalid user", e);
      fail("Failed to get holdings for invalid user");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_AYpe0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
    assertNotNull(quotes);
    assertTrue(quotes.size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_xbXZ0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteData = tradeDirect.getQuote("ABC");
    assertNotNull(quoteData);
    assertEquals("ABC", quoteData.getCompanyName());
    assertEquals(100, quoteData.getPrice().intValue());
    assertEquals(90, quoteData.getOpen().intValue());
    assertEquals(80, quoteData.getLow().intValue());
    assertEquals(10, quoteData.getChange(), 0.001);
    assertEquals(110, quoteData.getHigh().intValue());
    assertEquals("ABC", quoteData.getSymbol());
    assertEquals(1000, quoteData.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_IzFf0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = tradeDirect.getAccountData(1);
    assertNotNull(accountData);
    assertEquals(1, accountData.getAccountID());
    assertEquals(0, accountData.getLoginCount());
    assertEquals(0, accountData.getLogoutCount());
    assertNotNull(accountData.getCreationDate());
    assertNotNull(accountData.getLastLogin());
    assertEquals(new BigDecimal(0), accountData.getBalance());
    assertEquals(new BigDecimal(0), accountData.getOpenBalance());
    assertNotNull(accountData.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_TeoX0() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals("AAPL", quoteDataBean.getSymbol());
    assertEquals(100.0, quoteDataBean.getPrice().doubleValue(), 0.001);
    assertEquals(100.0, quoteDataBean.getOpen().doubleValue(), 0.001);
    assertEquals(100.0, quoteDataBean.getLow().doubleValue(), 0.001);
    assertEquals(100.0, quoteDataBean.getHigh().doubleValue(), 0.001);
    assertEquals(0.0, quoteDataBean.getChange(), 0.001);
    assertEquals(100.0, quoteDataBean.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_validInputs_LnMy0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    boolean publishQuotePriceChange = true;
    QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertNotNull(quoteData);
    assertEquals(symbol, quoteData.getSymbol());
    assertEquals(changeFactor.multiply(new BigDecimal("100")).setScale(2, BigDecimal.ROUND_HALF_UP), quoteData.getPrice());
    assertEquals(new BigDecimal("100").setScale(2, BigDecimal.ROUND_HALF_UP), quoteData.getOpen());
    assertEquals(new BigDecimal("100").setScale(2, BigDecimal.ROUND_HALF_UP), quoteData.getLow());
    assertEquals(new BigDecimal("100").setScale(2, BigDecimal.ROUND_HALF_UP), quoteData.getHigh());
    assertEquals(new BigDecimal("100").setScale(2, BigDecimal.ROUND_HALF_UP), quoteData.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_invalidPublishQuotePriceChange_SHgu4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100;
    boolean publishQuotePriceChange = false;
    QuoteDataBean quoteData = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertNull(quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetConnPublic_efFt0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = tradeDirect.getConnPublic();
    assertNotNull(conn);
    assertEquals(conn.getClass(), Connection.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_msFs0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal(0.1);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
    assertEquals(quoteDataBean.getPrice().multiply(changeFactor), updatedQuoteDataBean.getPrice());
    assertEquals(quoteDataBean.getOpen().multiply(changeFactor), updatedQuoteDataBean.getOpen());
    assertEquals(quoteDataBean.getLow().multiply(changeFactor), updatedQuoteDataBean.getLow());
    assertEquals(quoteDataBean.getHigh().multiply(changeFactor), updatedQuoteDataBean.getHigh());
    assertEquals(quoteDataBean.getVolume() + sharesTraded, updatedQuoteDataBean.getVolume());
    assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_cYnE0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertNotNull(accountProfileData);
    assertEquals("user1", accountProfileData.getUserID());
    assertEquals("password1", accountProfileData.getPassword());
    assertEquals("fullName1", accountProfileData.getFullName());
    assertEquals("address1", accountProfileData.getAddress());
    assertEquals("email1", accountProfileData.getEmail());
    assertEquals("creditCard1", accountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_hRcQ0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setUserID("testUser");
    accountProfileData.setPassword("testPassword");
    accountProfileData.setFullName("Test User");
    accountProfileData.setAddress("123 Main St");
    accountProfileData.setEmail("test@example.com");
    accountProfileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedAccountProfileData = tradeDirect.updateAccountProfile(accountProfileData);
    assertEquals(accountProfileData.getUserID(), updatedAccountProfileData.getUserID());
    assertEquals(accountProfileData.getPassword(), updatedAccountProfileData.getPassword());
    assertEquals(accountProfileData.getFullName(), updatedAccountProfileData.getFullName());
    assertEquals(accountProfileData.getAddress(), updatedAccountProfileData.getAddress());
    assertEquals(accountProfileData.getEmail(), updatedAccountProfileData.getEmail());
    assertEquals(accountProfileData.getCreditCard(), updatedAccountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_vmyU0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("testUserID");
    assertNotNull(accountProfileData);
    assertEquals("testUserID", accountProfileData.getUserID());
    assertNotNull(accountProfileData.getEmail());
    assertNotNull(accountProfileData.getPassword());
    assertNotNull(accountProfileData.getFullName());
    assertNotNull(accountProfileData.getAddress());
    assertNotNull(accountProfileData.getCreditCard());
    assertNotNull(accountProfileData.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_utTl0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<OrderDataBean> orderDataBeans = tradeDirect.getClosedOrders("user1");
    assertEquals(10, orderDataBeans.size());
    for (OrderDataBean orderDataBean : orderDataBeans) {
      assertEquals("completed", orderDataBean.getOrderStatus());
    }
  }
}