/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Passing {
  private HoldingData holdingData;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_1_BXCD0() {
    HoldingData holdingData = new HoldingData();
    double quantity = holdingData.getQuantity();
    assertEquals(0.0, quantity, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_2_HmlW1() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(10.0);
    double quantity = holdingData.getQuantity();
    assertEquals(10.0, quantity, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_3_acpg2() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(-10.0);
    double quantity = holdingData.getQuantity();
    assertEquals(-10.0, quantity, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_4_nFUE3() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(Double.MAX_VALUE);
    double quantity = holdingData.getQuantity();
    assertEquals(Double.MAX_VALUE, quantity, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_5_aLdY4() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(Double.MIN_VALUE);
    double quantity = holdingData.getQuantity();
    assertEquals(Double.MIN_VALUE, quantity, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_6_HQCz5() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(Double.NaN);
    double quantity = holdingData.getQuantity();
    assertEquals(Double.NaN, quantity, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_7_iaqJ6() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(Double.POSITIVE_INFINITY);
    double quantity = holdingData.getQuantity();
    assertEquals(Double.POSITIVE_INFINITY, quantity, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_8_xxrv7() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(Double.NEGATIVE_INFINITY);
    double quantity = holdingData.getQuantity();
    assertEquals(Double.NEGATIVE_INFINITY, quantity, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_9_Fglu8() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(Double.MIN_NORMAL);
    double quantity = holdingData.getQuantity();
    assertEquals(Double.MIN_NORMAL, quantity, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_Rdfh0() {
    HoldingData holdingData = new HoldingData();
    String quoteID = holdingData.getQuoteID();
    assertNull(quoteID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePrice_yjuE0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = new BigDecimal(100.00);
    holdingData.setPurchasePrice(purchasePrice);
    assertEquals(purchasePrice, holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePriceNull_RCuZ1() {
    HoldingData holdingData = new HoldingData();
    holdingData.setPurchasePrice(null);
    assertNull(holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePriceNegative_yaja2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = new BigDecimal(-100.00);
    holdingData.setPurchasePrice(purchasePrice);
    assertEquals(purchasePrice, holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_KTdC0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal price = new BigDecimal(10.5);
    holdingData.setPrice(price);
    assertEquals(price, holdingData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchaseDate_MkoJ0() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = holdingData.getPurchaseDate();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchaseDate_null_EhBz1() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = holdingData.getPurchaseDate();
    assertNull(purchaseDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasis_RygC0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = new BigDecimal(100);
    holdingData.setBasis(basis);
    assertEquals(basis, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDate_YQpu0() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = new Date();
    holdingData.setPurchaseDate(purchaseDate);
    Assertions.assertEquals(purchaseDate, holdingData.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGain_FpoT0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = new BigDecimal(100.0);
    holdingData.setGain(gain);
    assertEquals(gain, holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGain_differentValue_EkMJ1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = new BigDecimal(50.0);
    holdingData.setGain(gain);
    assertEquals(gain, holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValueWithDifferentValues_KKHm1_3() {
    HoldingData holdingData = new HoldingData();
    holdingData.setMarketValue(BigDecimal.ONE);
    BigDecimal marketValue = holdingData.getMarketValue();
    holdingData.setMarketValue(BigDecimal.TEN);
    marketValue = holdingData.getMarketValue();
    holdingData.setMarketValue(BigDecimal.ZERO);
    marketValue = holdingData.getMarketValue();
    assertEquals(marketValue, BigDecimal.ZERO);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGain_WbOz1_1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = holdingData.getGain();
    holdingData.setGain(new BigDecimal(10));
    gain = holdingData.getGain();
    holdingData.setGain(new BigDecimal(-10));
    gain = holdingData.getGain();
    holdingData.setGain(new BigDecimal(0));
    gain = holdingData.getGain();
    assertEquals(new BigDecimal(0), gain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_otGj0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(10.0);
    assertEquals(10.0, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithZero_LaPq1() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(0.0);
    assertEquals(0.0, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithNegativeValue_TTCq2() {
    HoldingData holdingData = new HoldingData();
    holdingData.setQuantity(-10.0);
    assertEquals(-10.0, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValue_jLSp0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(100.0);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithNull_HpOS1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = null;
    holdingData.setMarketValue(marketValue);
    assertNull(holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithZero_yijm2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(0.0);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithNegative_sbMi3() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(-100.0);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithMaxValue_Cslb4() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(Double.MAX_VALUE);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithMinValue_VJwW5() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(Double.MIN_VALUE);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_HGwa0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(1);
    assertEquals(1, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingIDWithNull_aEwd1() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(null);
    assertNull(holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingIDWithInvalidValue_kBeH2() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(-1);
    assertEquals(-1, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingIDWithValidValue_zGTq3() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(100);
    assertEquals(100, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingIDWithMaxValue_NamV4() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingIDWithMinValue_DZBE5() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingIDWithZero_QMvn6() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(0);
    assertEquals(0, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingIDWithNegativeValue_pVdm7() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(-100);
    assertEquals(-100, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingIDWithLargeValue_ojOx9() {
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(1000000);
    assertEquals(1000000, holdingData.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchasePriceWithNonBigDecimalValue_Okgi5_SEMi0_2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = holdingData.getPurchasePrice();
    assertFalse(purchasePrice instanceof BigDecimal);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_EzYw0() {
    holdingData = new HoldingData();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValueWithDifferentValues_KKHm1() {
    HoldingData holdingData = new HoldingData();
    holdingData.setMarketValue(BigDecimal.ONE);
    BigDecimal marketValue = holdingData.getMarketValue();
    assertEquals(marketValue, BigDecimal.ONE);
    holdingData.setMarketValue(BigDecimal.TEN);
    marketValue = holdingData.getMarketValue();
    assertEquals(marketValue, BigDecimal.TEN);
    holdingData.setMarketValue(BigDecimal.ZERO);
    marketValue = holdingData.getMarketValue();
    assertEquals(marketValue, BigDecimal.ZERO);
  }
}