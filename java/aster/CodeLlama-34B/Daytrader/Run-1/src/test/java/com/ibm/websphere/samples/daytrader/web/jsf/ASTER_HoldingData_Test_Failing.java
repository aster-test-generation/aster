/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Failing {
  private HoldingData holdingData;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchaseDate_invalidDate_iQDf2_1() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = holdingData.getPurchaseDate();
    assertNotNull(purchaseDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchaseDate_invalidDate_iQDf2_2() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = holdingData.getPurchaseDate();
    assertNull(new Date(0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_Rdfh0_fid1() {
    HoldingData holdingData = new HoldingData();
    String quoteID = holdingData.getQuoteID();
    assertEquals("12345", quoteID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteIDWithEmptyString_qjKh2_fid1() {
    HoldingData holdingData = new HoldingData();
    String quoteID = holdingData.getQuoteID();
    assertEquals("", quoteID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchaseDate_invalidDate_iQDf2_2_fid1() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = holdingData.getPurchaseDate();
    assertEquals(new Date(0), purchaseDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_FfhR0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal price = holdingData.getPrice();
    assertEquals(new BigDecimal(100), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValue_WOxx0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = holdingData.getMarketValue();
    assertEquals(marketValue, BigDecimal.ZERO);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValueWithDifferentValues_KKHm1_1() {
    HoldingData holdingData = new HoldingData();
    holdingData.setMarketValue(BigDecimal.ONE);
    BigDecimal marketValue = holdingData.getMarketValue();
    holdingData.setMarketValue(BigDecimal.TEN);
    marketValue = holdingData.getMarketValue();
    holdingData.setMarketValue(BigDecimal.ZERO);
    marketValue = holdingData.getMarketValue();
    assertEquals(marketValue, BigDecimal.ONE);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValueWithDifferentValues_KKHm1_2() {
    HoldingData holdingData = new HoldingData();
    holdingData.setMarketValue(BigDecimal.ONE);
    BigDecimal marketValue = holdingData.getMarketValue();
    holdingData.setMarketValue(BigDecimal.TEN);
    marketValue = holdingData.getMarketValue();
    holdingData.setMarketValue(BigDecimal.ZERO);
    marketValue = holdingData.getMarketValue();
    assertEquals(marketValue, BigDecimal.TEN);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_1_bINp0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = holdingData.getBasis();
    assertEquals(BigDecimal.ZERO, basis);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_2_zOaV1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = holdingData.getBasis();
    assertEquals(BigDecimal.ONE, basis);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_3_kMUQ2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = holdingData.getBasis();
    assertEquals(BigDecimal.TEN, basis);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_4_IeOf3() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = holdingData.getBasis();
    assertEquals(BigDecimal.valueOf(100), basis);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_5_TJgZ4() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = holdingData.getBasis();
    assertEquals(BigDecimal.valueOf(1000), basis);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_6_sthE5() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = holdingData.getBasis();
    assertEquals(BigDecimal.valueOf(10000), basis);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_7_YfnC6() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = holdingData.getBasis();
    assertEquals(BigDecimal.valueOf(100000), basis);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_8_FmSy7() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = holdingData.getBasis();
    assertEquals(BigDecimal.valueOf(1000000), basis);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_9_bsjU8() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = holdingData.getBasis();
    assertEquals(BigDecimal.valueOf(10000000), basis);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_10_aGmU9() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = holdingData.getBasis();
    assertEquals(BigDecimal.valueOf(100000000), basis);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_11_tlpQ10() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = holdingData.getBasis();
    assertEquals(BigDecimal.valueOf(1000000000), basis);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_12_qqrO11() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = holdingData.getBasis();
    assertEquals(BigDecimal.valueOf(10000000000L), basis);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_13_AzIB12() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = holdingData.getBasis();
    assertEquals(BigDecimal.valueOf(100000000000L), basis);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_14_BcNg13() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = holdingData.getBasis();
    assertEquals(BigDecimal.valueOf(1000000000000L), basis);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_15_BpXc14() {
    HoldingData holdingData = new HoldingData();
    BigDecimal basis = holdingData.getBasis();
    assertEquals(BigDecimal.valueOf(10000000000000L), basis);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGain_VOQU0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = holdingData.getGain();
    assertEquals(new BigDecimal(0), gain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGain_WbOz1_2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = holdingData.getGain();
    holdingData.setGain(new BigDecimal(10));
    gain = holdingData.getGain();
    holdingData.setGain(new BigDecimal(-10));
    gain = holdingData.getGain();
    holdingData.setGain(new BigDecimal(0));
    gain = holdingData.getGain();
    assertEquals(new BigDecimal(10), gain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGain_WbOz1_3() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = holdingData.getGain();
    holdingData.setGain(new BigDecimal(10));
    gain = holdingData.getGain();
    holdingData.setGain(new BigDecimal(-10));
    gain = holdingData.getGain();
    holdingData.setGain(new BigDecimal(0));
    gain = holdingData.getGain();
    assertEquals(new BigDecimal(-10), gain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithNaN_YgKk6() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(Double.NaN);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithInfinity_NTnq7() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(Double.POSITIVE_INFINITY);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValueWithNegativeInfinity_BoxU8() {
    HoldingData holdingData = new HoldingData();
    BigDecimal marketValue = new BigDecimal(Double.NEGATIVE_INFINITY);
    holdingData.setMarketValue(marketValue);
    assertEquals(marketValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchasePrice_KOMG0_1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = holdingData.getPurchasePrice();
    assertNotNull(purchasePrice);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchasePrice_KOMG0_2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = holdingData.getPurchasePrice();
    assertEquals(BigDecimal.ZERO, purchasePrice);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchasePriceWithNonZeroValue_Zctt1_2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = holdingData.getPurchasePrice();
    assertEquals(BigDecimal.valueOf(100), purchasePrice);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchasePriceWithNegativeValue_FaLY2_2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = holdingData.getPurchasePrice();
    assertEquals(BigDecimal.valueOf(-100), purchasePrice);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainHTMLPositiveGain_yoGh0_vdvj0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setGain(new BigDecimal(100.0));
    String actual = holdingData.getGainHTML();
    String expected = "<span class=\"gain\">100.00</span>";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainHTMLNegativeGain_axuW1_ZhvQ0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setGain(new BigDecimal(-100.0));
    String actual = holdingData.getGainHTML();
    String expected = "<span class=\"loss\">-100.00</span>";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainHTMLZeroGain_aKey2_BplU0() {
    HoldingData holdingData = new HoldingData();
    holdingData.setGain(BigDecimal.ZERO);
    String actual = holdingData.getGainHTML();
    String expected = "<span class=\"neutral\">0.00</span>";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithInvalidPrice_WNoU1_PZlV0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal price = holdingData.getPurchasePrice();
    assertEquals(new BigDecimal(0), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchasePriceWithInvalidValue_zTNE4_Qnth0_2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = holdingData.getPurchasePrice();
    assertFalse(purchasePrice.equals(BigDecimal.ZERO));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchaseDate_invalidDate_iQDf2() {
    HoldingData holdingData = new HoldingData();
    Date purchaseDate = holdingData.getPurchaseDate();
    assertNotNull(purchaseDate);
    assertEquals(new Date(0), purchaseDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuoteID_wrFy1() {
    String quoteID = "12345";
    holdingData.setQuoteID(quoteID);
    assertEquals(quoteID, holdingData.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuoteIDWithNull_ZoBW2() {
    String quoteID = null;
    holdingData.setQuoteID(quoteID);
    assertNull(holdingData.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuoteIDWithEmptyString_Poxq3() {
    String quoteID = "";
    holdingData.setQuoteID(quoteID);
    assertEquals(quoteID, holdingData.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuoteIDWithInvalidQuoteID_deKg4() {
    String quoteID = "invalidQuoteID";
    holdingData.setQuoteID(quoteID);
    assertNotEquals(quoteID, holdingData.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuoteIDWithDifferentQuoteID_QJzU6() {
    String quoteID = "67890";
    holdingData.setQuoteID(quoteID);
    assertNotEquals(quoteID, holdingData.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGain_WbOz1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = holdingData.getGain();
    assertEquals(new BigDecimal(0), gain);
    holdingData.setGain(new BigDecimal(10));
    gain = holdingData.getGain();
    assertEquals(new BigDecimal(10), gain);
    holdingData.setGain(new BigDecimal(-10));
    gain = holdingData.getGain();
    assertEquals(new BigDecimal(-10), gain);
    holdingData.setGain(new BigDecimal(0));
    gain = holdingData.getGain();
    assertEquals(new BigDecimal(0), gain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingID_JRnK1() {
    Integer holdingID = holdingData.getHoldingID();
    assertNotNull(holdingID);
    assertEquals(holdingID, 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingIDWithNull_ffLJ2() {
    holdingData.setHoldingID(null);
    Integer holdingID = holdingData.getHoldingID();
    assertNull(holdingID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingIDWithInvalidValue_IrrK3() {
    holdingData.setHoldingID(0);
    Integer holdingID = holdingData.getHoldingID();
    assertNotEquals(holdingID, 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchasePrice_KOMG0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = holdingData.getPurchasePrice();
    assertNotNull(purchasePrice);
    assertEquals(BigDecimal.ZERO, purchasePrice);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchasePriceWithNonZeroValue_Zctt1() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = holdingData.getPurchasePrice();
    assertNotNull(purchasePrice);
    assertEquals(BigDecimal.valueOf(100), purchasePrice);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchasePriceWithNegativeValue_FaLY2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal purchasePrice = holdingData.getPurchasePrice();
    assertNotNull(purchasePrice);
    assertEquals(BigDecimal.valueOf(-100), purchasePrice);
  }
}