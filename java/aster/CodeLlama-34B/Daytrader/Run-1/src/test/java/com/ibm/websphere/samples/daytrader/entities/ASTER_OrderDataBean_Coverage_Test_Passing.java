/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderDataBean_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbolWithQuote_YMom0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    QuoteDataBean quote = new QuoteDataBean("ABC");
    orderDataBean.setQuote(quote);
    String symbol = orderDataBean.getSymbol();
    assertEquals("ABC", symbol);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbolWithoutQuote_uIDb1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setSymbol("XYZ");
    String symbol = orderDataBean.getSymbol();
    assertEquals("XYZ", symbol);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentOrderID_elzs0() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    OrderDataBean orderDataBean2 = new OrderDataBean(2, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    assertFalse(orderDataBean1.equals(orderDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullOrderID_buCj1() {
    OrderDataBean orderDataBean1 = new OrderDataBean(null, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    OrderDataBean orderDataBean2 = new OrderDataBean(2, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    assertFalse(orderDataBean1.equals(orderDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameOrderID_GHQi2() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    assertTrue(orderDataBean1.equals(orderDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSell_sell_Yhus0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderType("sell");
    assertTrue(orderDataBean.isSell());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSell_notSell_OmOo1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderType("buy");
    assertFalse(orderDataBean.isSell());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_completed_UdLh0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("completed");
    assertTrue(orderDataBean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_alertcompleted_iXuE1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("alertcompleted");
    assertTrue(orderDataBean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_cancelled_usMw2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("cancelled");
    assertTrue(orderDataBean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_otherStatus_enJD3() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("otherStatus");
    assertFalse(orderDataBean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuy_buy_VZHO0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderType("buy");
    assertTrue(orderDataBean.isBuy());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuy_notBuy_beWe1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderType("sell");
    assertFalse(orderDataBean.isBuy());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuy_empty_MDms3() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderType("");
    assertFalse(orderDataBean.isBuy());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCancelled_orderStatusIsCancelled_SUqm0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("cancelled");
    assertTrue(orderDataBean.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCancelled_orderStatusIsNotCancelled_nRZK1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("open");
    assertFalse(orderDataBean.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCancelled_orderStatusIsEmpty_UjfK3() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderStatus("");
    assertFalse(orderDataBean.isCancelled());
  }
}