/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletLargeContentLength_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_LargeContentLength_WHsZ0() throws ServletException, IOException {
    PingServletLargeContentLength servlet = new PingServletLargeContentLength();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getContentLengthLong()).thenReturn(1000L);
    servlet.doPost(req, res);
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).setContentType("text/plain");
    verify(res).getWriter().print("Length: 1000");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_SmallContentLength_bqZl1() throws ServletException, IOException {
    PingServletLargeContentLength servlet = new PingServletLargeContentLength();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getContentLengthLong()).thenReturn(10L);
    servlet.doPost(req, res);
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).setContentType("text/plain");
    verify(res).getWriter().print("Length: 10");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_ZeroContentLength_mGeF2() throws ServletException, IOException {
    PingServletLargeContentLength servlet = new PingServletLargeContentLength();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getContentLengthLong()).thenReturn(0L);
    servlet.doPost(req, res);
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).setContentType("text/plain");
    verify(res).getWriter().print("Length: 0");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_NegativeContentLength_mifi3() throws ServletException, IOException {
    PingServletLargeContentLength servlet = new PingServletLargeContentLength();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getContentLengthLong()).thenReturn(-1L);
    servlet.doPost(req, res);
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).setContentType("text/plain");
    verify(res).getWriter().print("Length: -1");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_NullContentLength_hmCT4() throws ServletException, IOException {
    PingServletLargeContentLength servlet = new PingServletLargeContentLength();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getContentLengthLong()).thenReturn(null);
    servlet.doPost(req, res);
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).setContentType("text/plain");
    verify(res).getWriter().print("Length: null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_FbWH0() {
    PingServletLargeContentLength servlet = new PingServletLargeContentLength();
    String expected = "Basic dynamic HTML generation through a servlet, with " + "contentLength set by contentLength parameter.";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullConfig_xlqp1_DzgT0() {
    PingServletLargeContentLength servlet = new PingServletLargeContentLength();
    try {
      servlet.init(null);
    } catch (ServletException e) {
      e.printStackTrace();
    }
    assertNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullServletContext_wQLY6_GMdZ0() {
    PingServletLargeContentLength servlet = new PingServletLargeContentLength();
    try {
      servlet.init(null);
      assertNull(servlet.getServletContext());
    } catch (ServletException e) {
      e.printStackTrace();
    }
  }
}