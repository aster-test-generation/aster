/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MDBStats_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetInstance_null_KCjb0() {
    MDBStats mdbStats = MDBStats.getInstance();
    assertNull(mdbStats);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_typeNull_WnQm0_NpmR0() {
    MDBStats mdbStats = MDBStats.getInstance();
    TimerStat stats = mdbStats.addTiming(null, 1000, 2000);
    assertNull(stats);
  }

  @Test
  @Timeout(value = 2, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_sendTimeEqualToRecvTime_yjxP2_paOn0_2() {
    MDBStats mdbStats = MDBStats.getInstance();
    TimerStat stats = mdbStats.addTiming("type", 2000, 2000);
    assertEquals(1, stats.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_sendTimeEqualToRecvTime_yjxP2_paOn0_3() {
    MDBStats mdbStats = MDBStats.getInstance();
    TimerStat stats = mdbStats.addTiming("type", 1000, 1000);
    assertEquals(1000, stats.getTotalTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_sendTimeEqualToRecvTime_yjxP2_paOn0_4() {
    MDBStats mdbStats = MDBStats.getInstance();
    TimerStat stats = mdbStats.addTiming("type", 1000, 1000);
    assertEquals(1000, stats.getMin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_sendTimeEqualToRecvTime_yjxP2_paOn0_5() {
    MDBStats mdbStats = MDBStats.getInstance();
    TimerStat stats = mdbStats.addTiming("type", 1000, 1000);
    assertEquals(1000, stats.getMax());
  }

  @Test
  @Timeout(value = 7, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_sendTimeLessThanRecvTime_ACwI3_xXNH0_2() {
    MDBStats mdbStats = MDBStats.getInstance();
    TimerStat stats = mdbStats.addTiming("type", 7000, 2000);
    assertEquals(1, stats.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_sendTimeLessThanRecvTime_ACwI3_xXNH0_3() {
    MDBStats mdbStats = MDBStats.getInstance();
    TimerStat stats = mdbStats.addTiming("type", 1000, 2000);
    assertEquals(1000, stats.getTotalTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_sendTimeLessThanRecvTime_ACwI3_xXNH0_4() {
    MDBStats mdbStats = MDBStats.getInstance();
    TimerStat stats = mdbStats.addTiming("type", 1000, 2000);
    assertEquals(1000, stats.getMin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_sendTimeGreaterThanRecvTime_MBqB1_SlVg0_fid3() {
    MDBStats mdbStats = MDBStats.getInstance();
    TimerStat stats = mdbStats.addTiming("type", 2000, 1000);
    assertNull(stats);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_sendTimeEqualToRecvTime_yjxP2_paOn0_2_fid3() {
    MDBStats mdbStats = MDBStats.getInstance();
    TimerStat stats = mdbStats.addTiming("type", 1000, 1000);
    assertEquals(1, stats.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_sendTimeLessThanRecvTime_ACwI3_xXNH0_2_fid3() {
    MDBStats mdbStats = MDBStats.getInstance();
    TimerStat stats = mdbStats.addTiming("type", 1000, 2000);
    assertEquals(1, stats.getCount());
  }
}