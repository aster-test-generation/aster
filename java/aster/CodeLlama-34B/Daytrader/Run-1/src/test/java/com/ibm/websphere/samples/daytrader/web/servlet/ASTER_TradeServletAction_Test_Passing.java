/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeServletAction_Test_Passing {
  private TradeServices tAction;
  TradeServletAction tradeservletaction;
  HttpServletRequest httpservletrequest;
  HttpServletResponse httpservletresponse;
  ServletContext servletcontext;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout_Exception_NRPu1() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    when(req.getAttribute("TSS-RecreateSessionInLogout")).thenReturn(Boolean.TRUE);
    when(req.getSession()).thenReturn(mock(HttpSession.class));
    when(req.getSession(true)).thenReturn(mock(HttpSession.class));
    try {
      tradeServletAction.doLogout(ctx, req, resp, userID);
      fail("Expected Exception");
    } catch (Exception e) {
      assertEquals("TradeServletAction.doLogout(...)exception logging out user testUser", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoSell_Exception_YcsD1() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "test_user";
    Integer holdingID = 1;
    try {
      tradeServletAction.doSell(ctx, req, resp, userID, holdingID);
      fail("Expected Exception");
    } catch (Exception e) {
      assertEquals("TradeServletAction.doSell(...) exception selling holding 1 for user =test_user", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoRegister_Exception_KzMe2() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String passwd = "testPass";
    String cpasswd = "testPass";
    String fullname = "Test User";
    String ccn = "1234567890";
    String openBalanceString = "1000.00";
    String email = "test@example.com";
    String address = "123 Main St";
    try {
      tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    } catch (Exception e) {
      assertEquals("TradeServletAction.doRegister(...)" + " exception user =testUser", e.getMessage());
    }
  }
}