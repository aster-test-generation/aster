/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteData_Test_Passing {
  public void testSetRange_JUQu0() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setRange("1d");
    assertEquals("1d", quoteData.getRange());
  }

  public void testSetRangeWithDifferentRange_yIFC1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setRange("1w");
    assertEquals("1w", quoteData.getRange());
  }

  public void testSetRangeWithInvalidRange_TEgQ2() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setRange("invalid");
    assertEquals("invalid", quoteData.getRange());
  }

  public void testSetRangeWithNullRange_NnSw3() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setRange(null);
    assertNull(quoteData.getRange());
  }

  public void testSetRangeWithEmptyRange_AgdO4() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setRange("");
    assertEquals("", quoteData.getRange());
  }

  public void testSetRangeWithBlankRange_QqjR5() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setRange(" ");
    assertEquals(" ", quoteData.getRange());
  }

  public void testSetRangeWithMultipleRanges_LByi6() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setRange("1d, 1w");
    assertEquals("1d, 1w", quoteData.getRange());
  }

  public void testSetRangeWithMultipleRangesAndInvalidRange_EXqR7() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setRange("1d, invalid");
    assertEquals("1d, invalid", quoteData.getRange());
  }

  public void testSetRangeWithMultipleRangesAndNullRange_YTSF8() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setRange("1d, null");
    assertEquals("1d, null", quoteData.getRange());
  }

  public void testSetRangeWithMultipleRangesAndEmptyRange_jhmD9() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setRange("1d, ");
    assertEquals("1d, ", quoteData.getRange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbol_SWqe0() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setSymbol("DEF");
    assertEquals("DEF", quoteData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithNull_XOFA1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setSymbol(null);
    assertNull(quoteData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithEmptyString_UjHC2() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setSymbol("");
    assertEquals("", quoteData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithSameSymbol_GoRu5() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setSymbol("ABC");
    assertEquals("ABC", quoteData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHigh_vZZy0() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setHigh(new BigDecimal(15.0));
    assertEquals(new BigDecimal(15.0), quoteData.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHighWithNull_cZMq1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setHigh(null);
    assertNull(quoteData.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetChangeHTML_PositiveChange_Czyp1() {
    QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "TEST");
    String htmlString = quoteData.getChangeHTML();
    assertEquals("<FONT color=\"#009900\">0.00</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", htmlString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyName2_kqcl1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(12.0), "ABC", new BigDecimal(15.0), new BigDecimal(8.0), "XYZ", 100.0, 2.0);
    assertEquals("XYZ", quoteData.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyName3_iUeG2() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(12.0), "ABC", new BigDecimal(15.0), new BigDecimal(8.0), "XYZ", 100.0, 2.0);
    assertNotEquals("ABC", quoteData.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGain_MHSV0() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(12.0), "ABC");
    quoteData.setGain(new BigDecimal(2.0));
    assertEquals(new BigDecimal(2.0), quoteData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainWithDifferentValues_oSmt1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(12.0), "ABC", new BigDecimal(15.0), new BigDecimal(10.0), "XYZ", 100.0, 20.0);
    quoteData.setGain(new BigDecimal(3.0));
    assertEquals(new BigDecimal(3.0), quoteData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolume_TPqz0() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "ABC");
    quoteData.setVolume(100.0);
    assertEquals(100.0, quoteData.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolumeWithNegativeValue_wSew1() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "ABC");
    quoteData.setVolume(-100.0);
    assertEquals(-100.0, quoteData.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_pkoo0() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.5), new BigDecimal(10.0), "ABC");
    BigDecimal price = quoteData.getPrice();
    assertEquals(new BigDecimal(10.5), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpen_PuXU0() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setOpen(new BigDecimal(5.0));
    assertEquals(new BigDecimal(5.0), quoteData.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenWithHighLowAndCompanyName_JXIR1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC", new BigDecimal(15.0), new BigDecimal(5.0), "XYZ", 100.0, 0.0);
    quoteData.setOpen(new BigDecimal(5.0));
    assertEquals(new BigDecimal(5.0), quoteData.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetChange_hOkf0() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setChange(1.0);
    assertEquals(1.0, quoteData.getChange(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetChangeWithDifferentValue_GKPg1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setChange(2.0);
    assertEquals(2.0, quoteData.getChange(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpen_withValidInputs_NAmj0() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    BigDecimal open = quoteData.getOpen();
    assertEquals(new BigDecimal(10.0), open);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpen_withInvalidInputs_TPga1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    BigDecimal open = quoteData.getOpen();
    assertNotEquals(new BigDecimal(11.0), open);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpen_withZeroInputs_aqsb3() {
    QuoteData quoteData = new QuoteData(new BigDecimal(0.0), new BigDecimal(0.0), "ABC");
    BigDecimal open = quoteData.getOpen();
    assertEquals(new BigDecimal(0.0), open);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpen_withNegativeInputs_jRFA4() {
    QuoteData quoteData = new QuoteData(new BigDecimal(-10.0), new BigDecimal(-10.0), "ABC");
    BigDecimal open = quoteData.getOpen();
    assertEquals(new BigDecimal(-10.0), open);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpen_withMaxValueInputs_zQwX5() {
    QuoteData quoteData = new QuoteData(new BigDecimal(Double.MAX_VALUE), new BigDecimal(Double.MAX_VALUE), "ABC");
    BigDecimal open = quoteData.getOpen();
    assertEquals(new BigDecimal(Double.MAX_VALUE), open);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpen_withMinValueInputs_UcMT6() {
    QuoteData quoteData = new QuoteData(new BigDecimal(Double.MIN_VALUE), new BigDecimal(Double.MIN_VALUE), "ABC");
    BigDecimal open = quoteData.getOpen();
    assertEquals(new BigDecimal(Double.MIN_VALUE), open);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLowWithHighAndLow_zalq1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(12.0), "ABC", new BigDecimal(15.0), new BigDecimal(10.0), "XYZ", 100.0, 1.0);
    BigDecimal low = quoteData.getLow();
    assertEquals(new BigDecimal(10.0), low);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetChangeWithHighAndLow_WEBP1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(12.0), "ABC", new BigDecimal(15.0), new BigDecimal(8.0), "Company Inc.", 1000.0, 2.0);
    assertEquals(2.0, quoteData.getChange(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHighWithHighValue_ENRi1() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100), BigDecimal.valueOf(100), "ABC", BigDecimal.valueOf(110), BigDecimal.valueOf(100), "Company Name", 1000.0, 10.0);
    assertEquals(BigDecimal.valueOf(110), quoteData.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHighWithLowValue_IPJQ2() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100), BigDecimal.valueOf(100), "ABC", BigDecimal.valueOf(90), BigDecimal.valueOf(100), "Company Name", 1000.0, 10.0);
    assertEquals(BigDecimal.valueOf(90), quoteData.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_ValidPrice_KpiP0() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setPrice(new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quoteData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_NullPrice_cDQD1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setPrice(null);
    assertNull(quoteData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_NegativePrice_ujcc2() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setPrice(new BigDecimal(-10.0));
    assertEquals(new BigDecimal(-10.0), quoteData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_ZeroPrice_NYek3() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setPrice(new BigDecimal(0.0));
    assertEquals(new BigDecimal(0.0), quoteData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_MaxPrice_ZewW4() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setPrice(new BigDecimal(Double.MAX_VALUE));
    assertEquals(new BigDecimal(Double.MAX_VALUE), quoteData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_MinPrice_JYhY5() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setPrice(new BigDecimal(Double.MIN_VALUE));
    assertEquals(new BigDecimal(Double.MIN_VALUE), quoteData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_WithValidSymbol_xiOb0() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "ABC");
    assertEquals("ABC", quoteData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_WithInvalidSymbol_QmQm1() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), "");
    assertEquals("", quoteData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_WithNullSymbol_BxsF2() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), null);
    assertNull(quoteData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLow_NZIW0() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(12.0), "ABC");
    quoteData.setLow(new BigDecimal(11.0));
    assertEquals(new BigDecimal(11.0), quoteData.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLowWithHigh_TCqA1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(12.0), "ABC", new BigDecimal(15.0), new BigDecimal(11.0), "Company", 100.0, 1.0);
    quoteData.setLow(new BigDecimal(11.0));
    assertEquals(new BigDecimal(11.0), quoteData.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompanyName_LWlq0() {
    QuoteData quoteData = new QuoteData(BigDecimal.ONE, BigDecimal.ONE, "ABC");
    quoteData.setCompanyName("XYZ");
    assertEquals("XYZ", quoteData.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompanyNameWithNull_FHVN1() {
    QuoteData quoteData = new QuoteData(BigDecimal.ONE, BigDecimal.ONE, "ABC");
    quoteData.setCompanyName(null);
    assertNull(quoteData.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompanyNameWithEmptyString_jRrk2() {
    QuoteData quoteData = new QuoteData(BigDecimal.ONE, BigDecimal.ONE, "ABC");
    quoteData.setCompanyName("");
    assertEquals("", quoteData.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompanyNameWithInvalidString_FfEi4() {
    QuoteData quoteData = new QuoteData(BigDecimal.ONE, BigDecimal.ONE, "ABC");
    quoteData.setCompanyName("XYZ123");
    assertEquals("XYZ123", quoteData.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompanyNameWithDifferentCase_MRUL6() {
    QuoteData quoteData = new QuoteData(BigDecimal.ONE, BigDecimal.ONE, "ABC");
    quoteData.setCompanyName("xyz");
    assertEquals("xyz", quoteData.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompanyNameWithDifferentCaseAndWhitespaceAndInvalidCharactersAndSpecialCharacters_FeEf9() {
    QuoteData quoteData = new QuoteData(BigDecimal.ONE, BigDecimal.ONE, "ABC");
    quoteData.setCompanyName(" XYZ123!@#$%^&*()_+-=[]{}|;':\"<>,./?");
    assertEquals(" XYZ123!@#$%^&*()_+-=[]{}|;':\"<>,./?", quoteData.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompanyNameWithDifferentCaseAndWhitespaceAndInvalidCharactersAndSpecialCharactersAndNumbers_Jell10() {
    QuoteData quoteData = new QuoteData(BigDecimal.ONE, BigDecimal.ONE, "ABC");
    quoteData.setCompanyName(" XYZ123!@#$%^&*()_+-=[]{}|;':\"<>,./?456");
    assertEquals(" XYZ123!@#$%^&*()_+-=[]{}|;':\"<>,./?456", quoteData.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVolumeWithHighAndLow_tEvI1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.5), new BigDecimal(10.0), "ABC", new BigDecimal(11.0), new BigDecimal(9.0), "Company", 100.0, 1.0);
    assertEquals(100.0, quoteData.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithInvalidSymbol_gnSv3_fid1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    quoteData.setSymbol("INVALID");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainPercent_2_DwTO1_fid1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "TEST", new BigDecimal(10.0), new BigDecimal(10.0), "TEST", 10.0, 10.0);
    quoteData.setGainPercent(new BigDecimal(10.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyName1_gjvk0_fid1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(12.0), "ABC");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRange_1_aCLy0_fid1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC");
    String range = quoteData.getRange();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRange_2_gxMu1_fid1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "ABC", new BigDecimal(10.0), new BigDecimal(10.0), "Company Name", 100.0, 0.0);
    String range = quoteData.getRange();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithHighAndLow_tnyx1_fid1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.5), new BigDecimal(10.0), "ABC", new BigDecimal(11.0), new BigDecimal(9.0), "Company Name", 1000.0, 0.5);
    BigDecimal price = quoteData.getPrice();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpen_withNullInputs_ZNSA2_fid1() {
    QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "");
    BigDecimal open = quoteData.getOpen();
    assertEquals(BigDecimal.ZERO, open);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpen_withNullSymbol_xRAv10_fid1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), null);
    BigDecimal open = quoteData.getOpen();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpen_withEmptySymbol_Hzla11_fid1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.0), new BigDecimal(10.0), "");
    BigDecimal open = quoteData.getOpen();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHigh_DdkS0_fid1() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100), BigDecimal.valueOf(100), "ABC");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHighWithNullLowValue_eBwq4_fid1() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100), BigDecimal.valueOf(100), "ABC", BigDecimal.valueOf(110), BigDecimal.ZERO, "Company Name", 1000.0, 10.0);
    assertEquals(BigDecimal.valueOf(110), quoteData.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHighWithNullCompanyName_psjB5_fid1() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100), BigDecimal.valueOf(100), "ABC", BigDecimal.valueOf(110), BigDecimal.valueOf(100), null, 1000.0, 10.0);
    assertEquals(BigDecimal.valueOf(110), quoteData.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVolume_FDSz0_fid1() {
    QuoteData quoteData = new QuoteData(new BigDecimal(10.5), new BigDecimal(10.0), "ABC");
    assertEquals(0.0, quoteData.getVolume(), 0.0);
  }
}