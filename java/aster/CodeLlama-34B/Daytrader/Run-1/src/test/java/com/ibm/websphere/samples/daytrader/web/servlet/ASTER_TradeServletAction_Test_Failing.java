/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeServletAction_Test_Failing {
  private TradeServices tAction;
  TradeServletAction tradeservletaction;
  HttpServletRequest httpservletrequest;
  HttpServletResponse httpservletresponse;
  ServletContext servletcontext;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_EmptyHoldings_CTHN0_1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(results, req.getAttribute("portfolio"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_EmptyHoldings_CTHN0_2() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(holdingDataBeans, req.getAttribute("holdingDataBeans"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_NonEmptyHoldings_uMqp1_1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    holdingDataBeans.add(mock(HoldingDataBean.class));
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(results, req.getAttribute("portfolio"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_NonEmptyHoldings_uMqp1_2() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    holdingDataBeans.add(mock(HoldingDataBean.class));
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(holdingDataBeans, req.getAttribute("holdingDataBeans"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcomeWithNullStatus_VkvU1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String status = null;
    tradeServletAction.doWelcome(ctx, req, resp, status);
    verify(req).setAttribute("results", status);
    verify(req).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp).setStatus(HttpServletResponse.SC_OK);
    verify(resp).setContentType("text/html");
    verify(resp).getWriter();
    verify(resp).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcomeWithInvalidStatus_HLYR3() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String status = "invalid";
    tradeServletAction.doWelcome(ctx, req, resp, status);
    verify(req).setAttribute("results", status);
    verify(req).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp).setStatus(HttpServletResponse.SC_OK);
    verify(resp).setContentType("text/html");
    verify(resp).getWriter();
    verify(resp).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_EmptyHoldings_CTHN0_1_fid1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(results, req.getAttribute("results"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_EmptyHoldings_CTHN0_3_fid1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(quoteDataBeans, req.getAttribute("quoteDataBeans"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_NonEmptyHoldings_uMqp1_1_fid1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    holdingDataBeans.add(mock(HoldingDataBean.class));
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(results, req.getAttribute("results"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_NonEmptyHoldings_uMqp1_3_fid1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    holdingDataBeans.add(mock(HoldingDataBean.class));
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(quoteDataBeans, req.getAttribute("quoteDataBeans"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout_Exception_NRPu1_fid1() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    when(req.getAttribute("TSS-RecreateSessionInLogout")).thenReturn(Boolean.TRUE);
    when(req.getSession()).thenReturn(mock(HttpSession.class));
    when(req.getSession(true)).thenReturn(mock(HttpSession.class));
    try {
      tradeServletAction.doLogout(ctx, req, resp, userID);
      fail("Expected Exception");
    } catch (Exception e) {
      assertEquals("Error logging out" + userID, e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcome_ILeo0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String status = "success";
    tradeServletAction.doWelcome(ctx, req, resp, status);
    verify(req).setAttribute("results", status);
    verify(req).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp).setStatus(HttpServletResponse.SC_OK);
    verify(resp).setContentType("text/html");
    verify(resp).getWriter();
    verify(resp).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcomeWithEmptyStatus_fSFl2() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String status = "";
    tradeServletAction.doWelcome(ctx, req, resp, status);
    verify(req).setAttribute("results", status);
    verify(req).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(resp).setStatus(HttpServletResponse.SC_OK);
    verify(resp).setContentType("text/html");
    verify(resp).getWriter();
    verify(resp).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoMarketSummary_NullServletContext_vXTW1_oois0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    tradeServletAction.doMarketSummary(null, req, resp, userID);
    verify(req).setAttribute("results", "test");
    verify(req).getRequestDispatcher(TradeConfig.getPage(TradeConfig.MARKET_SUMMARY_PAGE));
    req.getRequestDispatcher(TradeConfig.getPage(TradeConfig.MARKET_SUMMARY_PAGE)).forward(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_EmptyHoldings_CTHN0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(results, req.getAttribute("results"));
    assertEquals(holdingDataBeans, req.getAttribute("holdingDataBeans"));
    assertEquals(quoteDataBeans, req.getAttribute("quoteDataBeans"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPortfolio_NonEmptyHoldings_uMqp1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    String results = "testResults";
    Collection<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
    holdingDataBeans.add(mock(HoldingDataBean.class));
    tradeServletAction.doPortfolio(ctx, req, resp, userID, results);
    assertEquals(results, req.getAttribute("results"));
    assertEquals(holdingDataBeans, req.getAttribute("holdingDataBeans"));
    assertEquals(quoteDataBeans, req.getAttribute("quoteDataBeans"));
  }
}