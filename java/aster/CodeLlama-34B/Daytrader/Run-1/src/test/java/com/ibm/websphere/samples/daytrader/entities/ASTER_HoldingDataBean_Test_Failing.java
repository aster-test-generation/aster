/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_bGcN0_7() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_bGcN0_8() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDateWithNullQuantity_NRcr7() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    Date purchaseDate = new Date();
    holdingDataBean.setPurchaseDate(purchaseDate);
    assertNull(holdingDataBean.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_bGcN0() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean);
    assertNotNull(holdingDataBean.getHoldingID());
    assertNotNull(holdingDataBean.getQuantity());
    assertNotNull(holdingDataBean.getPurchasePrice());
    assertNotNull(holdingDataBean.getPurchaseDate());
    assertNotNull(holdingDataBean.getQuoteID());
    assertNotNull(holdingDataBean.getQuote());
    assertNotNull(holdingDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuote_ALJr1_2_fid3() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    holdingDataBean.setQuote(null);
    holdingDataBean.setQuote(quoteDataBean);
    holdingDataBean.setQuote(null);
    assertEquals(quoteDataBean, holdingDataBean.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithNullValues_ZbvX1_oWlx0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.print();
    assertEquals("HoldingDataBean[holdingID=null, quantity=null, purchasePrice=null, purchaseDate=null, account=null, quote=null]", holdingDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithEmptyValues_zgDV2_SwnX0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.print();
    assertEquals("HoldingDataBean[holdingID=, quantity=, purchasePrice=, purchaseDate=, account=, quote=]", holdingDataBean.toString());
  }
}