/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteIDWithoutQuote_lRUU1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(null, 100, BigDecimal.valueOf(100), new Date(), "AAPL");
    assertEquals("AAPL", holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteIDWithNullQuoteID_VxWz5() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(null, 100, BigDecimal.valueOf(100), new Date(), null);
    assertEquals(null, holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_FbiD0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(1, 10.0, BigDecimal.valueOf(100.0), new Date(), "AAPL");
    assertTrue(holdingDataBean.equals(holdingDataBean));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObjectSameValues_DZOu1() {
    HoldingDataBean holdingDataBean1 = new HoldingDataBean(1, 10.0, BigDecimal.valueOf(100.0), new Date(), "AAPL");
    HoldingDataBean holdingDataBean2 = new HoldingDataBean(1, 10.0, BigDecimal.valueOf(100.0), new Date(), "AAPL");
    assertTrue(holdingDataBean1.equals(holdingDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObjectDifferentValues_uzns2() {
    HoldingDataBean holdingDataBean1 = new HoldingDataBean(1, 10.0, BigDecimal.valueOf(100.0), new Date(), "AAPL");
    HoldingDataBean holdingDataBean2 = new HoldingDataBean(2, 20.0, BigDecimal.valueOf(200.0), new Date(), "GOOG");
    assertFalse(holdingDataBean1.equals(holdingDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_Uafu3() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(1, 10.0, BigDecimal.valueOf(100.0), new Date(), "AAPL");
    assertFalse(holdingDataBean.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccount_twTd0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    AccountDataBean accountDataBean = new AccountDataBean();
    holdingDataBean.setAccount(accountDataBean);
    assertEquals(accountDataBean, holdingDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_bGcN0_1() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_bGcN0_2() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_bGcN0_3() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_bGcN0_4() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_bGcN0_5() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_bGcN0_6() {
    HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
    assertNotNull(holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithNullQuoteID_oUVD5() {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDate_frsN0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    Date purchaseDate = new Date();
    holdingDataBean.setPurchaseDate(purchaseDate);
    assertEquals(purchaseDate, holdingDataBean.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDateWithNull_qopQ1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    Date purchaseDate = null;
    holdingDataBean.setPurchaseDate(purchaseDate);
    assertNull(holdingDataBean.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDateWithDifferentDate_uUkB2() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    Date purchaseDate = new Date();
    holdingDataBean.setPurchaseDate(purchaseDate);
    Date differentPurchaseDate = new Date(purchaseDate.getTime() + 1000);
    holdingDataBean.setPurchaseDate(differentPurchaseDate);
    assertNotEquals(purchaseDate, holdingDataBean.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDateWithSameDate_ueNJ3() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    Date purchaseDate = new Date();
    holdingDataBean.setPurchaseDate(purchaseDate);
    Date samePurchaseDate = new Date(purchaseDate.getTime());
    holdingDataBean.setPurchaseDate(samePurchaseDate);
    assertEquals(purchaseDate, holdingDataBean.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDateWithInvalidDate_mBWt4() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    Date purchaseDate = new Date();
    holdingDataBean.setPurchaseDate(purchaseDate);
    Date invalidPurchaseDate = new Date(purchaseDate.getTime() - 1000);
    holdingDataBean.setPurchaseDate(invalidPurchaseDate);
    assertNotEquals(purchaseDate, holdingDataBean.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDateWithNullAccount_Okla5() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    Date purchaseDate = new Date();
    holdingDataBean.setPurchaseDate(purchaseDate);
    assertNull(holdingDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDateWithNullQuote_mzmG6() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    Date purchaseDate = new Date();
    holdingDataBean.setPurchaseDate(purchaseDate);
    assertNull(holdingDataBean.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDateWithNullPurchasePrice_ixLN8() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    Date purchaseDate = new Date();
    holdingDataBean.setPurchaseDate(purchaseDate);
    assertNull(holdingDataBean.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDateWithNullHoldingID_wtNE9() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    Date purchaseDate = new Date();
    holdingDataBean.setPurchaseDate(purchaseDate);
    assertNull(holdingDataBean.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_vpZk0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(1, 10.0, BigDecimal.valueOf(10.0), new Date(), "AAPL");
    int expectedHashCode = 1;
    int actualHashCode = holdingDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuote_KotX0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    holdingDataBean.setQuote(quoteDataBean);
    assertEquals(quoteDataBean, holdingDataBean.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuote_ALJr1_1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    holdingDataBean.setQuote(null);
    holdingDataBean.setQuote(quoteDataBean);
    holdingDataBean.setQuote(null);
    assertNull(holdingDataBean.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuote_ALJr1_2() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    holdingDataBean.setQuote(null);
    holdingDataBean.setQuote(quoteDataBean);
    holdingDataBean.setQuote(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuote_ALJr1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    holdingDataBean.setQuote(null);
    assertNull(holdingDataBean.getQuote());
    holdingDataBean.setQuote(quoteDataBean);
    assertEquals(quoteDataBean, holdingDataBean.getQuote());
    holdingDataBean.setQuote(null);
    assertNull(holdingDataBean.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullQuote_VJhJ1() {
    AccountDataBean account = new AccountDataBean(1, 10, 5, new Date(), new Date(), BigDecimal.valueOf(10000.00), BigDecimal.valueOf(9000.00), "profile1");
    HoldingDataBean holding = new HoldingDataBean(100, BigDecimal.valueOf(100.00), new Date(), account, null);
    String result = holding.toHTML();
    assertNotNull(result);
    assertTrue(result.contains("<BR>Holding Data for holding: " + holding.getHoldingID()));
    assertTrue(result.contains("<LI>      quantity:" + holding.getQuantity()));
    assertTrue(result.contains("<LI> purchasePrice:" + holding.getPurchasePrice()));
    assertTrue(result.contains("<LI>  purchaseDate:" + holding.getPurchaseDate()));
    assertTrue(result.contains("<LI>       quoteID:null"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullQuote_VJhJ1_1() {
    AccountDataBean account = new AccountDataBean(1, 10, 5, new Date(), new Date(), BigDecimal.valueOf(10000.00), BigDecimal.valueOf(9000.00), "profile1");
    HoldingDataBean holding = new HoldingDataBean(100, BigDecimal.valueOf(100.00), new Date(), account, null);
    String result = holding.toHTML();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullQuote_VJhJ1_2() {
    AccountDataBean account = new AccountDataBean(1, 10, 5, new Date(), new Date(), BigDecimal.valueOf(10000.00), BigDecimal.valueOf(9000.00), "profile1");
    HoldingDataBean holding = new HoldingDataBean(100, BigDecimal.valueOf(100.00), new Date(), account, null);
    String result = holding.toHTML();
    assertTrue(result.contains("<BR>Holding Data for holding: " + holding.getHoldingID()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullQuote_VJhJ1_3() {
    AccountDataBean account = new AccountDataBean(1, 10, 5, new Date(), new Date(), BigDecimal.valueOf(10000.00), BigDecimal.valueOf(9000.00), "profile1");
    HoldingDataBean holding = new HoldingDataBean(100, BigDecimal.valueOf(100.00), new Date(), account, null);
    String result = holding.toHTML();
    assertTrue(result.contains("<LI>      quantity:" + holding.getQuantity()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullQuote_VJhJ1_4() {
    AccountDataBean account = new AccountDataBean(1, 10, 5, new Date(), new Date(), BigDecimal.valueOf(10000.00), BigDecimal.valueOf(9000.00), "profile1");
    HoldingDataBean holding = new HoldingDataBean(100, BigDecimal.valueOf(100.00), new Date(), account, null);
    String result = holding.toHTML();
    assertTrue(result.contains("<LI> purchasePrice:" + holding.getPurchasePrice()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullQuote_VJhJ1_5() {
    AccountDataBean account = new AccountDataBean(1, 10, 5, new Date(), new Date(), BigDecimal.valueOf(10000.00), BigDecimal.valueOf(9000.00), "profile1");
    HoldingDataBean holding = new HoldingDataBean(100, BigDecimal.valueOf(100.00), new Date(), account, null);
    String result = holding.toHTML();
    assertTrue(result.contains("<LI>  purchaseDate:" + holding.getPurchaseDate()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullQuote_VJhJ1_6() {
    AccountDataBean account = new AccountDataBean(1, 10, 5, new Date(), new Date(), BigDecimal.valueOf(10000.00), BigDecimal.valueOf(9000.00), "profile1");
    HoldingDataBean holding = new HoldingDataBean(100, BigDecimal.valueOf(100.00), new Date(), account, null);
    String result = holding.toHTML();
    assertTrue(result.contains("<LI>       quoteID:null"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_mMIN0_NrUP0_1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setQuote(new QuoteDataBean("AAPL"));
    QuoteDataBean quote = holdingDataBean.getQuote();
    assertNotNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_mMIN0_NrUP0_2() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setQuote(new QuoteDataBean("AAPL"));
    QuoteDataBean quote = holdingDataBean.getQuote();
    assertEquals("AAPL", quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithNullQuote_xUbT1_eWgM0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    QuoteDataBean quote = holdingDataBean.getQuote();
    assertNull(quote);
  }
}