/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Failing {
  private TradeConfig config;
  private TradeConfig tradeConfig;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeModeNames_GvwQ0() {
    String[] expected = new String[]{"Full EJB3", "mode2", "mode3"};
    String[] actual = TradeConfig.getRunTimeModeNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeModeNamesWithEmptyArray_JPjE1() {
    String[] expected = new String[]{"", "", ""};
    String[] actual = TradeConfig.getRunTimeModeNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterations_defaultValue_PHVb0() {
    int expected = 0;
    int actual = TradeConfig.getPrimIterations();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 9, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_tVJW0() {
    TradeConfig.incrementScenarioCount();
    assertEquals(1, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_multiple_VFcP1() {
    TradeConfig.incrementScenarioCount();
    TradeConfig.incrementScenarioCount();
    assertEquals(10, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_negative_THzz2() {
    TradeConfig.incrementScenarioCount();
    TradeConfig.incrementScenarioCount();
    assertEquals(5, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_zero_StcD3() {
    TradeConfig.incrementScenarioCount();
    assertEquals(7, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_null_BVsl4() {
    TradeConfig.incrementScenarioCount();
    assertNull(TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_invalid_SdQh5() {
    TradeConfig.incrementScenarioCount();
    assertEquals(2, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_overflow_JTji6() {
    TradeConfig.incrementScenarioCount();
    assertEquals(Integer.MAX_VALUE, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_underflow_jTps7() {
    TradeConfig.incrementScenarioCount();
    assertEquals(Integer.MIN_VALUE, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_edgeCase4_OWmm9() {
    TradeConfig.incrementScenarioCount();
    assertEquals(4, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_edgeCase3_hUqh10() {
    TradeConfig.incrementScenarioCount();
    assertEquals(3, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_edgeCase6_gfoL12() {
    TradeConfig.incrementScenarioCount();
    assertEquals(6, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_edgeCase8_fWuH13() {
    TradeConfig.incrementScenarioCount();
    assertEquals(8, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_edgeCase10_qcbp14() {
    TradeConfig.incrementScenarioCount();
    assertEquals(10, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_edgeCase5_cJar17() {
    TradeConfig.incrementScenarioCount();
    assertEquals(5, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_1_vFzU0() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:214 last:3736", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_2_qEmz1() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:417 last:1847", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_3_vqhs2() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:184 last:4687", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_4_rTAK3() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:129 last:354", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_5_KUrZ4() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:411 last:3941", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_6_Mbiz5() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:812 last:2452", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_7_ssBE6() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:817 last:3767", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_8_oluA7() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:359 last:2509", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_9_FzmQ8() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:909 last:487", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_10_uHWr9() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:269 last:4820", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_11_BeBA10() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:945 last:3238", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_12_OkmS11() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:29 last:4445", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_13_vaEt12() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:764 last:1038", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_14_xuuP13() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:981 last:4743", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_15_TiiR14() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:132 last:1172", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_16_NAju15() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:949 last:3796", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_17_pgcQ16() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:52 last:1148", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_18_bGXT17() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:880 last:1998", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_19_QqHJ18() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:164 last:1815", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixesWithInvalidInput_ykkS1_2() {
    TradeConfig tradeConfig = new TradeConfig();
    int[][] scenarioMixes = tradeConfig.getScenarioMixes();
    for (int i = 0; i < scenarioMixes.length; i++) {
      for (int j = 0; j < scenarioMixes[i].length; j++) {
      }
    }
    assertEquals(10, scenarioMixes.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixesWithInvalidInput_ykkS1_3() {
    TradeConfig tradeConfig = new TradeConfig();
    int[][] scenarioMixes = tradeConfig.getScenarioMixes();
    for (int i = 0; i < scenarioMixes.length; i++) {
      for (int j = 0; j < scenarioMixes[i].length; j++) {
      }
    }
    assertEquals(2, scenarioMixes[0].length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixesWithInvalidScenario_UuKG4_2() {
    TradeConfig tradeConfig = new TradeConfig();
    int[][] scenarioMixes = tradeConfig.getScenarioMixes();
    for (int i = 10; i < scenarioMixes.length; i++) {
      for (int j = 10; j < scenarioMixes[i].length; j++) {
      }
    }
    assertEquals(10, scenarioMixes.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERS_AiDU0() {
    int expected = 100;
    int actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERS_UOBx1_1() {
    int expected = 100;
    int actual = TradeConfig.getMAX_USERS();
    expected = 50;
    actual = TradeConfig.getMAX_USERS();
    expected = 25;
    actual = TradeConfig.getMAX_USERS();
    expected = 10;
    actual = TradeConfig.getMAX_USERS();
    expected = 5;
    actual = TradeConfig.getMAX_USERS();
    expected = 1;
    actual = TradeConfig.getMAX_USERS();
    expected = 0;
    actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessMode_IJnK0() {
    TradeConfig config = new TradeConfig();
    int accessMode = config.getAccessMode();
    assertEquals(0, accessMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInterval_eVNU0_fid1() {
    int expected = 10;
    int actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalWithDifferentValues_wQoa1() {
    int expected = 5;
    int actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
    expected = 15;
    actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
    expected = 30;
    actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeModeNames_GvwQ0_fid1() {
    String[] expected = new String[]{"mode1", "mode2", "mode3"};
    String[] actual = TradeConfig.getRunTimeModeNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeModeNamesWithEmptyArray_JPjE1_fid1() {
    String[] expected = new String[]{};
    String[] actual = TradeConfig.getRunTimeModeNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_multiple_VFcP1_fid1() {
    TradeConfig.incrementScenarioCount();
    TradeConfig.incrementScenarioCount();
    assertEquals(2, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_negative_THzz2_fid1() {
    TradeConfig.incrementScenarioCount();
    TradeConfig.incrementScenarioCount();
    assertEquals(-1, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_zero_StcD3_fid1() {
    TradeConfig.incrementScenarioCount();
    assertEquals(0, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_edgeCase9_yVrT16() {
    TradeConfig.incrementScenarioCount();
    assertEquals(9, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_edgeCase11_CJUJ18() {
    TradeConfig.incrementScenarioCount();
    assertEquals(11, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_1_vFzU0_fid1() {
    String result = TradeConfig.rndFullName();
    assertEquals("first:1000 last:5000", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixes_EhKe0() {
    TradeConfig tradeConfig = new TradeConfig();
    int[][] scenarioMixes = tradeConfig.getScenarioMixes();
    assertNotNull(scenarioMixes);
    assertEquals(10, scenarioMixes.length);
    assertEquals(10, scenarioMixes[0].length);
    for (int i = 0; i < scenarioMixes.length; i++) {
      for (int j = 0; j < scenarioMixes[i].length; j++) {
        assertTrue(scenarioMixes[i][j] >= 0);
        assertTrue(scenarioMixes[i][j] <= 100);
      }
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERS_UOBx1() {
    int expected = 100;
    int actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
    expected = 50;
    actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
    expected = 25;
    actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
    expected = 10;
    actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
    expected = 5;
    actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
    expected = 1;
    actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
    expected = 0;
    actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_HOLDINGSWithNegativeValue_AsmX1() {
    int maxHoldings = -10;
    TradeConfig.setMAX_HOLDINGS(maxHoldings);
    assertEquals(0, TradeConfig.getMAX_HOLDINGS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_QUOTES_MkHT0() {
    int expected = 10;
    int actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongRun_OOqu0() {
    TradeConfig config = new TradeConfig();
    assertTrue(config.getLongRun());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequency_bEQj0() {
    TradeConfig config = new TradeConfig();
    int frequency = config.getListQuotePriceChangeFrequency();
    assertEquals(10, frequency);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetJDBCDriverNeedsGlobalTransation_True_vIwh0() {
    boolean result = TradeConfig.getJDBCDriverNeedsGlobalTransation();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetJDBCDriverNeedsGlobalTransation_Null_manM2() {
    boolean result = TradeConfig.getJDBCDriverNeedsGlobalTransation();
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserID_Goao0() {
    String hostname = "localhost";
    long currentTime = System.currentTimeMillis();
    int count = 0;
    String expected = "newUserPrefix" + hostname + currentTime + count;
    String actual = TradeConfig.rndNewUserID();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserIDWithDifferentHostname_hZcN1() {
    String hostname = "example.com";
    long currentTime = System.currentTimeMillis();
    int count = 0;
    String expected = "newUserPrefix" + hostname + currentTime + count;
    String actual = TradeConfig.rndNewUserID();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserIDWithDifferentCount_EmdA2() {
    String hostname = "localhost";
    long currentTime = System.currentTimeMillis();
    int count = 1;
    String expected = "newUserPrefix" + hostname + currentTime + count;
    String actual = TradeConfig.rndNewUserID();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_HOLDINGS_ebiS1() {
    int expected = 100;
    int actual = config.getMAX_HOLDINGS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_Buy_PQYr0() {
    BigDecimal orderFee = TradeConfig.getOrderFee("BUY");
    assertEquals(orderFee, BigDecimal.valueOf(0.01));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_Sell_ZlhG1() {
    BigDecimal orderFee = TradeConfig.getOrderFee("SELL");
    assertEquals(orderFee, BigDecimal.valueOf(0.01));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_Other_OmmD2() {
    BigDecimal orderFee = TradeConfig.getOrderFee("OTHER");
    assertEquals(orderFee, BigDecimal.valueOf(0.01));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_Null_oBAg3() {
    BigDecimal orderFee = TradeConfig.getOrderFee(null);
    assertEquals(orderFee, BigDecimal.valueOf(0.01));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_EmptyString_FsuP4() {
    BigDecimal orderFee = TradeConfig.getOrderFee("");
    assertEquals(orderFee, BigDecimal.valueOf(0.01));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_InvalidString_BzCC5() {
    BigDecimal orderFee = TradeConfig.getOrderFee("INVALID");
    assertEquals(orderFee, BigDecimal.valueOf(0.01));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioActionNewUser_ZYlW0() {
    boolean newUser = true;
    char action = TradeConfig.getScenarioAction(newUser);
    assertEquals('a', action);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioActionExistingUser_Rdjc1() {
    boolean newUser = false;
    char action = TradeConfig.getScenarioAction(newUser);
    assertEquals('b', action);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterations_invalidInput_EMpp1() {
    int iter = -1;
    TradeConfig.setPrimIterations(iter);
    assertEquals(0, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterations_negativeInput_Poeq7() {
    int iter = -10;
    TradeConfig.setPrimIterations(iter);
    assertEquals(0, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_ValidInput_jrLm0() {
    String userID = TradeConfig.nextUserID();
    assertEquals("uid:0", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_ValidPageNumber_Sfbs0() {
    int pageNumber = 1;
    String expectedPage = "webUI[webInterface][pageNumber]";
    String actualPage = TradeConfig.getPage(pageNumber);
    assertEquals(expectedPage, actualPage);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_InvalidPageNumber_vRlT1() {
    int pageNumber = -1;
    String expectedPage = null;
    String actualPage = TradeConfig.getPage(pageNumber);
    assertEquals(expectedPage, actualPage);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_QUOTESWithNegativeValue_jlKl1() {
    int maxQuotes = -1;
    TradeConfig.setMAX_QUOTES(maxQuotes);
    assertEquals(0, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_QUOTESWithInvalidValue_FdkX4() {
    int maxQuotes = -10;
    TradeConfig.setMAX_QUOTES(maxQuotes);
    assertEquals(0, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_Empty_qYKJ0() {
    String[] expected = new String[0];
    String[] actual = TradeConfig.getWebInterfaceNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_SingleElement_LptR1() {
    String[] expected = new String[]{"WebInterface1"};
    String[] actual = TradeConfig.getWebInterfaceNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_MultipleElements_ViVC2() {
    String[] expected = new String[]{"WebInterface1", "WebInterface2", "WebInterface3"};
    String[] actual = TradeConfig.getWebInterfaceNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_Null_zMwU3() {
    String[] expected = null;
    String[] actual = TradeConfig.getWebInterfaceNames();
    assertNull(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_EmptyString_yYag4() {
    String[] expected = new String[]{""};
    String[] actual = TradeConfig.getWebInterfaceNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_DuplicateElements_QMno5() {
    String[] expected = new String[]{"WebInterface1", "WebInterface1"};
    String[] actual = TradeConfig.getWebInterfaceNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_InvalidElements_rePg6() {
    String[] expected = new String[]{"InvalidInterface1", "InvalidInterface2"};
    String[] actual = TradeConfig.getWebInterfaceNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_MixedElements_RJbD7() {
    String[] expected = new String[]{"WebInterface1", "InvalidInterface1", "WebInterface2"};
    String[] actual = TradeConfig.getWebInterfaceNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_NullElement_DaHG8() {
    String[] expected = new String[]{"WebInterface1", null, "WebInterface2"};
    String[] actual = TradeConfig.getWebInterfaceNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_EmptyElement_sQyp9() {
    String[] expected = new String[]{"WebInterface1", "", "WebInterface2"};
    String[] actual = TradeConfig.getWebInterfaceNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_DuplicateElementsWithDifferentCases_KHsQ10() {
    String[] expected = new String[]{"WebInterface1", "WEBINTERFACE1", "WebInterface2"};
    String[] actual = TradeConfig.getWebInterfaceNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_DuplicateElementsWithDifferentSpaces_qGyM11() {
    String[] expected = new String[]{"WebInterface1", " WebInterface1 ", "WebInterface2"};
    String[] actual = TradeConfig.getWebInterfaceNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_DuplicateElementsWithDifferentSpecialCharacters_CRHZ12() {
    String[] expected = new String[]{"WebInterface1", "WebInterface1!", "WebInterface2"};
    String[] actual = TradeConfig.getWebInterfaceNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_DuplicateElementsWithDifferentLength_LirT13() {
    String[] expected = new String[]{"WebInterface1", "WebInterface11", "WebInterface2"};
    String[] actual = TradeConfig.getWebInterfaceNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBoolean_Bwgm0() {
    TradeConfig config = new TradeConfig();
    boolean result = config.rndBoolean();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPublishQuotePriceChangeWithInvalidValue_okQh4() {
    boolean expected = true;
    boolean actual = tradeConfig.getPublishQuotePriceChange();
    assertNotEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeNames_fyDP0() {
    String[] expected = new String[]{"Mode1", "Mode2", "Mode3"};
    String[] actual = TradeConfig.getOrderProcessingModeNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeNamesWithEmptyArray_vUUu1() {
    String[] expected = new String[]{};
    String[] actual = TradeConfig.getOrderProcessingModeNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeNamesWithNull_yANV2() {
    String[] expected = null;
    String[] actual = TradeConfig.getOrderProcessingModeNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndIntWithNegativeInput_ENEb1() {
    int i = -10;
    int result = TradeConfig.rndInt(i);
    assertTrue(result >= 0 && result < i);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndIntWithInvalidInput_shyA4() {
    int i = -1;
    int result = TradeConfig.rndInt(i);
    assertEquals(-1, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_GfvQ0() {
    int expected = 1;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_2_VYcL1() {
    int expected = 2;
    int actual = TradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbols_empty_YtrY0() {
    String symbols = TradeConfig.rndSymbols();
    assertEquals("", symbols);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbols_singleSymbol_RuUq1() {
    String symbols = TradeConfig.rndSymbols();
    assertEquals("s:0", symbols);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbols_multipleSymbols_Xdho2() {
    String symbols = TradeConfig.rndSymbols();
    assertEquals("s:0,s:1,s:2", symbols);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Negative_LhMl1() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertTrue(result.doubleValue() < 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Zero_azRh2() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(BigDecimal.ZERO, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Positive_RoundUp_qGhB3() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertTrue(result.doubleValue() > 0.0);
    assertEquals(BigDecimal.ONE, result.setScale(2, BigDecimal.ROUND_HALF_UP));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Negative_RoundDown_nzLL4() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertTrue(result.doubleValue() < 0.0);
    assertEquals(BigDecimal.ONE.negate(), result.setScale(2, BigDecimal.ROUND_HALF_DOWN));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Zero_RoundHalfEven_yVvW5() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(BigDecimal.ZERO, result);
    assertEquals(BigDecimal.ZERO, result.setScale(2, BigDecimal.ROUND_HALF_EVEN));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_RND_USER_hKdI0() {
    TradeConfig.RND_USER = true;
    String userID = TradeConfig.getUserID();
    assertEquals("rndUserID", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_RND_USER_nextUserID_cpAv2() {
    TradeConfig.RND_USER = true;
    String userID = TradeConfig.getUserID();
    assertEquals("rndUserID", userID);
    TradeConfig.RND_USER = false;
    userID = TradeConfig.getUserID();
    assertEquals("nextUserID", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_2_fFjW1() {
    String symbol = TradeConfig.rndSymbol();
    assertNotNull(symbol);
    assertTrue(symbol.startsWith("s:"));
    assertTrue(symbol.length() > 2);
    assertTrue(symbol.endsWith("0"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_3_pNIv2() {
    String symbol = TradeConfig.rndSymbol();
    assertNotNull(symbol);
    assertTrue(symbol.startsWith("s:"));
    assertTrue(symbol.length() > 2);
    assertTrue(symbol.endsWith("1"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_4_rNzq3() {
    String symbol = TradeConfig.rndSymbol();
    assertNotNull(symbol);
    assertTrue(symbol.startsWith("s:"));
    assertTrue(symbol.length() > 2);
    assertTrue(symbol.endsWith("2"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_6_TzYO5() {
    String symbol = TradeConfig.rndSymbol();
    assertNotNull(symbol);
    assertTrue(symbol.startsWith("s:"));
    assertTrue(symbol.length() > 2);
    assertTrue(symbol.endsWith("4"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_7_qIau6() {
    String symbol = TradeConfig.rndSymbol();
    assertNotNull(symbol);
    assertTrue(symbol.startsWith("s:"));
    assertTrue(symbol.length() > 2);
    assertTrue(symbol.endsWith("5"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_8_FyoT7() {
    String symbol = TradeConfig.rndSymbol();
    assertNotNull(symbol);
    assertTrue(symbol.startsWith("s:"));
    assertTrue(symbol.length() > 2);
    assertTrue(symbol.endsWith("6"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_9_fAIc8() {
    String symbol = TradeConfig.rndSymbol();
    assertNotNull(symbol);
    assertTrue(symbol.startsWith("s:"));
    assertTrue(symbol.length() > 2);
    assertTrue(symbol.endsWith("7"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_10_XtCB9() {
    String symbol = TradeConfig.rndSymbol();
    assertNotNull(symbol);
    assertTrue(symbol.startsWith("s:"));
    assertTrue(symbol.length() > 2);
    assertTrue(symbol.endsWith("8"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_11_LcUe10() {
    String symbol = TradeConfig.rndSymbol();
    assertNotNull(symbol);
    assertTrue(symbol.startsWith("s:"));
    assertTrue(symbol.length() > 2);
    assertTrue(symbol.endsWith("9"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_12_cGBT11() {
    String symbol = TradeConfig.rndSymbol();
    assertNotNull(symbol);
    assertTrue(symbol.startsWith("s:"));
    assertTrue(symbol.length() > 2);
    assertTrue(symbol.endsWith("10"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmailWithMultipleDigits_YLOw1() {
    String userID = "user123";
    String email = TradeConfig.rndEmail(userID);
    assertEquals("user123@123.com", email);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmailWithSpecialCharacters_vucY2() {
    String userID = "user!@#$%^&*()_+";
    String email = TradeConfig.rndEmail(userID);
    assertEquals("user!@#$%^&*()_+@1.com", email);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmailWithEmptyUserID_GAqN3() {
    String userID = "";
    String email = TradeConfig.rndEmail(userID);
    assertEquals("", email);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmailWithNullUserID_dywn4() {
    String userID = null;
    String email = TradeConfig.rndEmail(userID);
    assertNull(email);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioCount_Ivss0() {
    int expected = 0;
    int actual = TradeConfig.getScenarioCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard_xylw0() {
    String creditCard = TradeConfig.rndCreditCard();
    assertNotNull(creditCard);
    assertEquals(16, creditCard.length());
    assertTrue(creditCard.matches("^\\d{4}-\\d{4}-\\d{4}-\\d{4}$"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_NonDefault_LtMq1() {
    int actual = TradeConfig.getRunTimeMode();
    int expected = 1;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_Invalid_eqrl2() {
    int actual = TradeConfig.getRunTimeMode();
    int expected = -1;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_1_srWW0() {
    float f = 1.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("1.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_2_ieSO1() {
    float f = 2.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("2.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_3_LhRu2() {
    float f = 3.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("3.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_4_VaSB3() {
    float f = 4.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("4.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_5_wuFj4() {
    float f = 5.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("5.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_6_gLEi5() {
    float f = 6.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("6.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_7_hWiy6() {
    float f = 7.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("7.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_8_sQUv7() {
    float f = 8.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("8.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_9_dOCd8() {
    float f = 9.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("9.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_10_ugBp9() {
    float f = 10.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("10.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_11_YhIG10() {
    float f = 11.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("11.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_12_qQjq11() {
    float f = 12.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("12.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_13_JelJ12() {
    float f = 13.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("13.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_14_MzDV13() {
    float f = 14.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("14.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_15_gvui14() {
    float f = 15.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("15.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_16_dKQg15() {
    float f = 16.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    assertEquals(new BigDecimal("16.00"), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterfaceWithInvalidValue_aucR2() {
    int value = -1;
    TradeConfig.setWebInterface(value);
    assertEquals(0, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_vGss0() {
    TradeConfig config = new TradeConfig();
    String nextUser = config.rndUserID();
    assertNotNull(nextUser);
    assertEquals("uid:0", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalWithDifferentValues_wQoa1_1_fid3() {
    int expected = 5;
    int actual = TradeConfig.getMarketSummaryInterval();
    expected = 15;
    actual = TradeConfig.getMarketSummaryInterval();
    expected = 30;
    actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUpdateQuotePrices_JUHj0_1() {
    TradeConfig config = new TradeConfig();
    config.setUpdateQuotePrices(true);
    config.setUpdateQuotePrices(false);
    assertTrue(config.getUpdateQuotePrices());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Positive_RoundUp_qGhB3_2() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(BigDecimal.ONE, result.setScale(2, BigDecimal.ROUND_HALF_UP));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Negative_RoundDown_nzLL4_2() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(BigDecimal.ONE.negate(), result.setScale(2, BigDecimal.ROUND_HALF_DOWN));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_Zero_RoundHalfEven_yVvW5_2() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(BigDecimal.ZERO, result.setScale(2, BigDecimal.ROUND_HALF_EVEN));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_RND_USER_nextUserID_cpAv2_1() {
    TradeConfig.RND_USER = true;
    String userID = TradeConfig.getUserID();
    TradeConfig.RND_USER = false;
    userID = TradeConfig.getUserID();
    assertEquals("rndUserID", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_RND_USER_nextUserID_cpAv2_2() {
    TradeConfig.RND_USER = true;
    String userID = TradeConfig.getUserID();
    TradeConfig.RND_USER = false;
    userID = TradeConfig.getUserID();
    assertEquals("nextUserID", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_2_fFjW1_4() {
    String symbol = TradeConfig.rndSymbol();
    assertTrue(symbol.endsWith("0"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_4_rNzq3_4() {
    String symbol = TradeConfig.rndSymbol();
    assertTrue(symbol.endsWith("2"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_5_hFWj4_4() {
    String symbol = TradeConfig.rndSymbol();
    assertTrue(symbol.endsWith("3"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_6_TzYO5_4() {
    String symbol = TradeConfig.rndSymbol();
    assertTrue(symbol.endsWith("4"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_7_qIau6_4() {
    String symbol = TradeConfig.rndSymbol();
    assertTrue(symbol.endsWith("5"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_8_FyoT7_4() {
    String symbol = TradeConfig.rndSymbol();
    assertTrue(symbol.endsWith("6"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_9_fAIc8_4() {
    String symbol = TradeConfig.rndSymbol();
    assertTrue(symbol.endsWith("7"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_10_XtCB9_4() {
    String symbol = TradeConfig.rndSymbol();
    assertTrue(symbol.endsWith("8"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_11_LcUe10_4() {
    String symbol = TradeConfig.rndSymbol();
    assertTrue(symbol.endsWith("9"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_12_cGBT11_4() {
    String symbol = TradeConfig.rndSymbol();
    assertTrue(symbol.endsWith("10"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard_xylw0_2() {
    String creditCard = TradeConfig.rndCreditCard();
    assertEquals(16, creditCard.length());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard_xylw0_3() {
    String creditCard = TradeConfig.rndCreditCard();
    assertTrue(creditCard.matches("^\\d{4}-\\d{4}-\\d{4}-\\d{4}$"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_vGss0_2() {
    TradeConfig config = new TradeConfig();
    String nextUser = config.rndUserID();
    assertEquals("uid:0", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetJDBCDriverNeedsGlobalTransationNull_vhBi2_mvxi0() {
    TradeConfig.setJDBCDriverNeedsGlobalTransation(false);
    assertNull(TradeConfig.JDBCDriverNeedsGlobalTransation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPage_NullPageNumber_CJOi2_IYcx0() {
    int pageNumber = 0;
    String expectedPage = null;
    String actualPage = TradeConfig.getPage(pageNumber);
    assertEquals(expectedPage, actualPage);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUpdateQuotePrices_True_False_WLkS3_IudN0() {
    TradeConfig.setUpdateQuotePrices(true);
    assertFalse(TradeConfig.getUpdateQuotePrices());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLongRun_IllegalArgumentException_dBnM8_UrFJ0() {
    try {
      TradeConfig.setLongRun(false);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertTrue(true);
    }
  }
}