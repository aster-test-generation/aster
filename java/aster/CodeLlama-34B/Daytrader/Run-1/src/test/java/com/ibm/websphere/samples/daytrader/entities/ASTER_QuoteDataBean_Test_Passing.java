/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_MYyf0_1() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_MYyf0_2() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_MYyf0_3() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_MYyf0_4() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_MYyf0_5() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_MYyf0_6() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_MYyf0_7() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_MYyf0_8() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_MYyf0_9() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbol_SFEX0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("AAPL");
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithNull_HYvz1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol(null);
    assertNull(quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithEmptyString_zLSz2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("");
    assertEquals("", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithInvalidSymbol_qElR3() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("INVALID");
    assertEquals("INVALID", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithDifferentSymbol_YFcQ5() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("GOOG");
    assertEquals("GOOG", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithDifferentCaseSymbol_MQKp7() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("aapl");
    assertEquals("aapl", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHigh_OuFr0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(95.00), 5.0);
    BigDecimal high = BigDecimal.valueOf(105.00);
    quoteDataBean.setHigh(high);
    assertEquals(high, quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHighNull_QFUd1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(95.00), 5.0);
    quoteDataBean.setHigh(null);
    assertNull(quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyNameWithNullHigh_pWOH10() {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_symbol_dcCT0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    int expectedHashCode = "AAPL".hashCode();
    int actualHashCode = quoteDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_umHv2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    String expectedSymbol = "AAPL";
    String actualSymbol = quoteDataBean.getSymbol();
    assertEquals(expectedSymbol, actualSymbol);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nullSymbol_OVJv4() {
    QuoteDataBean quoteDataBean = new QuoteDataBean(null);
    int expectedHashCode = 0;
    int actualHashCode = quoteDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithValidInput_aOTY0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100), BigDecimal.valueOf(90), BigDecimal.valueOf(80), BigDecimal.valueOf(95), 5);
    quoteDataBean.print();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithInvalidInput_teQa1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100), BigDecimal.valueOf(90), BigDecimal.valueOf(80), BigDecimal.valueOf(95), 5);
    quoteDataBean.print();
    assertNotEquals("QuoteDataBean{symbol='AAPL', companyName='Apple Inc.', volume=1000000, price=100, open=90, low=80, high=95, change=5}", quoteDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithNullInput_UbKm2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean(null, null, 0, null, null, null, null, 0);
    quoteDataBean.print();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpen_COQE0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(95.00), 5.00);
    quoteDataBean.setOpen(BigDecimal.valueOf(105.00));
    assertEquals(BigDecimal.valueOf(105.00), quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenWithNull_cHFx1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(95.00), 5.00);
    quoteDataBean.setOpen(null);
    assertNull(quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetChange_lQKI0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(110.00), 10.0);
    quoteDataBean.setChange(10.0);
    assertEquals(10.0, quoteDataBean.getChange(), 0.00001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLow_ValidInput_bJfs0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(80.00), 10.0);
    BigDecimal low = quoteDataBean.getLow();
    assertEquals(BigDecimal.valueOf(80.00), low);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLow_InvalidInput_nlRK1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(70.00), 10.0);
    BigDecimal low = quoteDataBean.getLow();
    assertNotEquals(BigDecimal.valueOf(60.00), low);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLow_NullInput_QWFJ2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(70.00), 10.0);
    BigDecimal low = quoteDataBean.getLow();
    assertEquals(BigDecimal.valueOf(80.0), low);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetChange_bVic0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(95.00), 5.0);
    double change = quoteDataBean.getChange();
    assertEquals(5.0, change, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetChangeNegative_OJlG2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(95.00), -5.0);
    double change = quoteDataBean.getChange();
    assertEquals(-5.0, change, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetChangeZero_hOfz3() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(95.00), 0.0);
    double change = quoteDataBean.getChange();
    assertEquals(0.0, change, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetChangeSmall_GZIl4() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(95.00), 0.000001);
    double change = quoteDataBean.getChange();
    assertEquals(0.000001, change, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_okMn0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(110.00), 10.0);
    quoteDataBean.setPrice(BigDecimal.valueOf(105.00));
    assertEquals(BigDecimal.valueOf(105.00), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithNull_zxVj1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(110.00), 10.0);
    quoteDataBean.setPrice(null);
    assertNull(quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithInvalidValue_jItA2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(-10.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(110.00), 10.0);
    quoteDataBean.setPrice(BigDecimal.valueOf(-10.00));
    assertEquals(BigDecimal.valueOf(-10.00), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_cYlG0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbolWithNullSymbol_FHZN1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean(null);
    assertNull(quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVolume_nMUU0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal(100.00), new BigDecimal(90.00), new BigDecimal(80.00), new BigDecimal(110.00), 10.00);
    assertEquals(1000000, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVolumeWithZeroVolume_gXbc1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 0, new BigDecimal(100.00), new BigDecimal(90.00), new BigDecimal(80.00), new BigDecimal(110.00), 10.00);
    assertEquals(0, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVolumeWithNegativeVolume_aIgC2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", -1000000, new BigDecimal(100.00), new BigDecimal(90.00), new BigDecimal(80.00), new BigDecimal(110.00), 10.00);
    assertEquals(-1000000, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyNameWithNullSymbol_lCsw1_rLWb0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean(null, "Apple Inc.", 1000000, new BigDecimal(100.0), new BigDecimal(90.0), new BigDecimal(80.0), new BigDecimal(100.0), 10.0);
    assertEquals("Apple Inc.", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyNameWithEmptySymbol_VNyI2_CVbM0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("", "Apple Inc.", 1000000, BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), BigDecimal.valueOf(80.0), BigDecimal.valueOf(100.0), 10.0);
    assertEquals("Apple Inc.", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyNameWithNullCompanyName_lCXa3_xPNV0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", null, 1000000, new BigDecimal(100.0), new BigDecimal(90.0), new BigDecimal(80.0), new BigDecimal(100.0), 10.0);
    assertEquals(null, quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyNameWithInvalidCompanyName_pcZo6_BXCy0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "INVALID", 1000000, BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), BigDecimal.valueOf(80.0), BigDecimal.valueOf(100.0), 10.0);
    assertEquals("INVALID", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyNameWithNullOpen_YkMi8_fHCV0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.0), null, BigDecimal.valueOf(80.0), BigDecimal.valueOf(100.0), 10.0);
    assertEquals("Apple Inc.", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithZeroOpen_Zyqj5_UnmQ0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal(100.0), new BigDecimal(0.0), new BigDecimal(80.0), new BigDecimal(110.0), 10.0);
    BigDecimal price = quoteDataBean.getPrice();
    assertEquals(100.0, price.doubleValue(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithZeroLow_pSzd7_wrkQ0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal(100.0), new BigDecimal(90.0), new BigDecimal(0.0), new BigDecimal(110.0), 10.0);
    BigDecimal price = quoteDataBean.getPrice();
    assertEquals(100.0, price.doubleValue(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHighWithNullSymbol_Kpvi3_jJzM0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean(null, "Apple Inc.", 1000000, new BigDecimal(100.0), new BigDecimal(90.0), new BigDecimal(80.0), new BigDecimal(100.0), 10.0);
    BigDecimal high = quoteDataBean.getHigh();
    assertEquals(100.0, high.doubleValue(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHighWithEmptySymbol_BVEv4_zqbd0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("", "Apple Inc.", 1000000, BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), BigDecimal.valueOf(80.0), BigDecimal.valueOf(100.0), 10.0);
    BigDecimal high = quoteDataBean.getHigh();
    assertEquals(100.0, high.doubleValue(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testConstructorWithSymbolAndCompanyName_DWYi4_dLdF0_1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 0, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, 0);
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testConstructorWithSymbolAndCompanyName_DWYi4_dLdF0_2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 0, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, 0);
    assertEquals("Apple Inc.", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_MYyf0() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean);
    assertNotNull(quoteDataBean.getSymbol());
    assertNotNull(quoteDataBean.getCompanyName());
    assertNotNull(quoteDataBean.getVolume());
    assertNotNull(quoteDataBean.getPrice());
    assertNotNull(quoteDataBean.getOpen());
    assertNotNull(quoteDataBean.getLow());
    assertNotNull(quoteDataBean.getHigh());
    assertNotNull(quoteDataBean.getChange());
  }
}