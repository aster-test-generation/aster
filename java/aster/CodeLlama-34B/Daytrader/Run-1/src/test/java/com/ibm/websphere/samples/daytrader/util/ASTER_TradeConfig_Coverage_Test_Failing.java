/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Coverage_Test_Failing {
  private Log mockLog;
  private TradeConfig tradeConfig;
  private TradeConfig config;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_MaxUsers_xGTz0_1() {
    int maxUsers = 10;
    int userIDCount = maxUsers - 1;
    String userID = TradeConfig.nextUserID();
    assertEquals("uid:" + userIDCount, userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_MaxUsers_xGTz0_2() {
    int maxUsers = 10;
    int userIDCount = maxUsers - 1;
    String userID = TradeConfig.nextUserID();
    assertEquals(0, userIDCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_NotMaxUsers_gjIn1_1() {
    int maxUsers = 10;
    int userIDCount = maxUsers - 2;
    String userID = TradeConfig.nextUserID();
    assertEquals("uid:" + userIDCount, userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_NotMaxUsers_gjIn1_2() {
    int maxUsers = 10;
    int userIDCount = maxUsers - 2;
    String userID = TradeConfig.nextUserID();
    assertEquals(userIDCount + 1, userIDCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_newUser_kdnb0() {
    boolean newUser = true;
    char action = TradeConfig.getScenarioAction(newUser);
    assertEquals('a', action);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_existingUser_VVIZ1() {
    boolean newUser = false;
    char action = TradeConfig.getScenarioAction(newUser);
    assertEquals('a', action);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_EqualsZero_GHvu1() {
    BigDecimal percentGainBD = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(1.0, percentGainBD.doubleValue(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_MaxUsers_xGTz0() {
    int maxUsers = 10;
    int userIDCount = maxUsers - 1;
    String userID = TradeConfig.nextUserID();
    assertEquals("uid:" + userIDCount, userID);
    assertEquals(0, userIDCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_NotMaxUsers_gjIn1() {
    int maxUsers = 10;
    int userIDCount = maxUsers - 2;
    String userID = TradeConfig.nextUserID();
    assertEquals("uid:" + userIDCount, userID);
    assertEquals(userIDCount + 1, userIDCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserID_fFbS4() {
    String expectedUserID = "newUserPrefixlocalhost123456789";
    String actualUserID = tradeConfig.rndNewUserID();
    Assertions.assertEquals(expectedUserID, actualUserID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_MaxUsers_xGTz9_2() {
    int maxUsers = 19;
    int userIDCount = maxUsers - 1;
    String userID = TradeConfig.nextUserID();
    assertEquals(9, userIDCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_newUser_kdnb0_fid2() {
    boolean newUser = true;
    char action = TradeConfig.getScenarioAction(newUser);
    assertEquals('q', action);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_existingUser_VVIZ1_fid2() {
    boolean newUser = false;
    char action = TradeConfig.getScenarioAction(newUser);
    assertEquals('s', action);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_EqualsZero_GHvu1_fid2() {
    BigDecimal percentGainBD = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(0.92, percentGainBD.doubleValue(), 0.0);
  }
}