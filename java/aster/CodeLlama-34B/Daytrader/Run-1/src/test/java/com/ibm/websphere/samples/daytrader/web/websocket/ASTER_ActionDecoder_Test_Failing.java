/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.TimeUnit;
import javax.websocket.DecodeException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ActionDecoder_Test_Failing {
  private ActionDecoder actionDecoder;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullConfig_DzWu2() {
    actionDecoder.init(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWillDecode_emptyString_hJSU0() {
    ActionDecoder decoder = new ActionDecoder();
    assertFalse(decoder.willDecode(""));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWillDecode_nullString_oXyY1() {
    ActionDecoder decoder = new ActionDecoder();
    assertFalse(decoder.willDecode(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWillDecode_invalidString_ryKC3() {
    ActionDecoder decoder = new ActionDecoder();
    assertFalse(decoder.willDecode("123"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWillDecode_nonAlphabeticString_fEKM10() {
    ActionDecoder decoder = new ActionDecoder();
    assertFalse(decoder.willDecode("12345"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWillDecode_nonNumericString_aUbA11() {
    ActionDecoder decoder = new ActionDecoder();
    assertFalse(decoder.willDecode("abcdef"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWillDecode_nonAlphanumericString_fWMJ12() {
    ActionDecoder decoder = new ActionDecoder();
    assertFalse(decoder.willDecode("!@#$%^&*()_+"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecode_MGuZ0_TTUN0() {
    ActionDecoder decoder = new ActionDecoder();
    String jsonText = "{\"action\":\"test\"}";
    try {
      ActionMessage actionMessage = decoder.decode(jsonText);
      assertEquals("test", actionMessage.getDecodedAction());
    } catch (DecodeException e) {
      fail("DecodeException thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithExtraData_weaH7_zlCy0() {
    ActionDecoder decoder = new ActionDecoder();
    String jsonText = "{\"action\":\"test\",\"extra\":\"data\"}";
    try {
      ActionMessage actionMessage = decoder.decode(jsonText);
      assertEquals("test", actionMessage.getDecodedAction());
    } catch (DecodeException e) {
      fail("DecodeException should not be thrown");
    }
  }
}