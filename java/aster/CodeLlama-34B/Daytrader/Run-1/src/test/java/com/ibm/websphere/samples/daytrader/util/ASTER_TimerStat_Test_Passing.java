/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TimerStat_Test_Passing {
  private TimerStat timerStat;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMin_1_xTYl0() {
    TimerStat timerStat = new TimerStat();
    double min = timerStat.getMin();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMin_2_nLHN1() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(10.0);
    double min = timerStat.getMin();
    assertEquals(10.0, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMin_3_DqjO2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(10.0);
    timerStat.setMax(20.0);
    double min = timerStat.getMin();
    assertEquals(10.0, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMax_kqQk0() {
    TimerStat timerStat = new TimerStat();
    double max = timerStat.getMax();
    assertEquals(0.0, max, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxWithAllZeroValues_vwSV11() {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMax_QBMU0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(10.0);
    assertEquals(10.0, timerStat.getMax(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMaxWithNegativeValue_dinp1() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(-10.0);
    assertEquals(-10.0, timerStat.getMax(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMaxWithZeroValue_Vhzv2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(0.0);
    assertEquals(0.0, timerStat.getMax(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMaxWithLargeValue_PjwM3() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(1000000.0);
    assertEquals(1000000.0, timerStat.getMax(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMaxWithInvalidValue_aQBA4() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(Double.NaN);
    assertEquals(Double.NaN, timerStat.getMax(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMin_TmUK0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(10.0);
    assertEquals(10.0, timerStat.getMin(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMinNegative_pqAr1() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(-10.0);
    assertEquals(-10.0, timerStat.getMin(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalTime_mwRC0() {
    TimerStat timerStat = new TimerStat();
    double totalTime = timerStat.getTotalTime();
    assertEquals(0.0, totalTime, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalTime_tqed0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setTotalTime(10.0);
    assertEquals(10.0, timerStat.getTotalTime(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalTimeWithNegativeValue_Hbfe1() {
    TimerStat timerStat = new TimerStat();
    timerStat.setTotalTime(-10.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCount_1_jRDi0() {
    TimerStat timerStat = new TimerStat();
    int count = timerStat.getCount();
    assertEquals(0, count);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_1_edIM0() {
    TimerStat timerStat = new TimerStat();
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(0.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_2_cAFj1() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(1000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(1.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_3_XqWe2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(10000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(10.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_4_Vgqw3() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(100000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(100.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_5_KTCu4() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(1000000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(1000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_6_KGfW5() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(10000000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(10000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_7_gtWn6() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(100000000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(100000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_8_gheW7() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(1000000000);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(1000000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_9_zWXt8() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(10000000000L);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(10000000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_10_kzHb9() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(100000000000L);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(100000000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_11_GRER10() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(1000000000000L);
    double maxSecs = timerStat.getMaxSecs();
    assertEquals(1000000000.0, maxSecs, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_tXaT0() {
    timerStat = new TimerStat();
  }
}