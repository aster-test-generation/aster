/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.websocket.EndpointConfig;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PingWebSocketTextSync_Coverage_Test_Failing {
  private EndpointConfig ec;
  private PingWebSocketTextSync pingWebSocketTextSync;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingWithNullSession_VVNg2() {
    PingWebSocketTextSync ping = new PingWebSocketTextSync();
    try {
      ping.ping(null);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertTrue(e.getMessage().contains("NullPointerException"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingWithInvalidSession_sLVt3() {
    PingWebSocketTextSync ping = new PingWebSocketTextSync();
    try {
      ping.ping("invalidSession");
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertTrue(e.getMessage().contains("Invalid session"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingWithClosedSession_TCzV4() {
    PingWebSocketTextSync ping = new PingWebSocketTextSync();
    try {
      ping.ping("closedSession");
      fail("Expected IllegalStateException");
    } catch (IllegalStateException e) {
      assertTrue(e.getMessage().contains("Session is closed"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingWithMaxHitCount_ebMC5() {
    PingWebSocketTextSync ping = new PingWebSocketTextSync();
    try {
      ping.ping("test");
      fail("Expected IllegalStateException");
    } catch (IllegalStateException e) {
      assertTrue(e.getMessage().contains("Max hit count exceeded"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingWithInvalidText_kVuu6() {
    PingWebSocketTextSync ping = new PingWebSocketTextSync();
    try {
      ping.ping("invalidText");
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertTrue(e.getMessage().contains("Invalid text"));
    }
  }
}