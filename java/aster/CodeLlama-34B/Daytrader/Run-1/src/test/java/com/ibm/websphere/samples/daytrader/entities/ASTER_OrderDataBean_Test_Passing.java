/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Passing {
  private String symbol;
  private Integer orderID;
  private BigDecimal price;
  private HoldingDataBean holding;
  private BigDecimal orderFee;
  private String orderType;
  private QuoteDataBean quote;
  private String orderStatus;
  private AccountDataBean account;
  private Date openDate;
  private Date completionDate;
  private double quantity;

  public void testSetOrderID_rmkg0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(1);
    assertEquals(1, orderDataBean.getOrderID());
  }

  public void testSetOrderIDWithNull_PjDs1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(null);
    assertEquals(null, orderDataBean.getOrderID());
  }

  public void testSetOrderIDWithInvalidValue_znxy2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(-1);
    assertEquals(null, orderDataBean.getOrderID());
  }

  public void testSetOrderIDWithValidValue_TQNM3() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(1);
    assertEquals(1, orderDataBean.getOrderID());
  }

  public void testSetOrderIDWithDifferentValue_uOqC4() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(2);
    assertEquals(2, orderDataBean.getOrderID());
  }

  public void testSetOrderIDWithSameValue_YvYm5() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(1);
    assertEquals(1, orderDataBean.getOrderID());
  }

  public void testSetOrderIDWithDifferentObject_VOZe6() {
    OrderDataBean orderDataBean1 = new OrderDataBean();
    OrderDataBean orderDataBean2 = new OrderDataBean();
    orderDataBean1.setOrderID(1);
    orderDataBean2.setOrderID(2);
    assertEquals(1, orderDataBean1.getOrderID());
    assertEquals(2, orderDataBean2.getOrderID());
  }

  public void testSetOrderIDWithSameObject_TcEo7() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(1);
    assertEquals(1, orderDataBean.getOrderID());
  }

  public void testSetOrderIDWithDifferentClass_Mgeg8() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(1);
    assertEquals(1, orderDataBean.getOrderID());
  }

  public void testSetOrderIDWithSameClass_NBFX9() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(1);
    assertEquals(1, orderDataBean.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance1_SjKv0_2() {
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    assertEquals("sell", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance1_SjKv0_3() {
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    assertEquals("open", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance1_SjKv0_4() {
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    assertNotNull(orderDataBean.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance1_SjKv0_5() {
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    assertNotNull(orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance1_SjKv0_6() {
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    assertTrue(orderDataBean.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance1_SjKv0_7() {
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    assertTrue(orderDataBean.getPrice().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance1_SjKv0_8() {
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    assertTrue(orderDataBean.getOrderFee().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance1_SjKv0_9() {
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    assertNotNull(orderDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbol_Gwis0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setSymbol("GOOG");
    assertEquals("GOOG", orderDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithNull_XrmN1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setSymbol(null);
    assertNull(orderDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithEmptyString_gBEH2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setSymbol("");
    assertEquals("", orderDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_YdDT0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(0.0), "GOOG");
    int expectedHashCode = 1;
    int actualHashCode = orderDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullOrderID_gStF1() {
    OrderDataBean orderDataBean = new OrderDataBean(null, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(0.0), "GOOG");
    int expectedHashCode = 0;
    int actualHashCode = orderDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullOrderType_TeKp2() {
    OrderDataBean orderDataBean = new OrderDataBean(1, null, "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(0.0), "GOOG");
    int expectedHashCode = 1;
    int actualHashCode = orderDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullOrderStatus_LQbP3() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", null, new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(0.0), "GOOG");
    int expectedHashCode = 1;
    int actualHashCode = orderDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullOpenDate_PROK4() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", null, new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(0.0), "GOOG");
    int expectedHashCode = 1;
    int actualHashCode = orderDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullCompletionDate_vKZV5() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(0.0), "GOOG");
    int expectedHashCode = 1;
    int actualHashCode = orderDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullPrice_BPIg7() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, null, new BigDecimal(0.0), "GOOG");
    int expectedHashCode = 1;
    int actualHashCode = orderDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_pjjz0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    assertEquals(new BigDecimal(10.0), orderDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithZeroPrice_sqIE3() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(0.0), new BigDecimal(1.0), "AAPL");
    assertEquals(new BigDecimal(0.0), orderDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNegativePrice_UjWw4() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(-10.0), new BigDecimal(1.0), "AAPL");
    assertEquals(new BigDecimal(-10.0), orderDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithZeroFee_xmAe5() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    assertEquals(new BigDecimal(10.0), orderDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithNegativeFee_xTYr6() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(-1.0), "AAPL");
    assertEquals(new BigDecimal(10.0), orderDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPriceWithZeroQuantityAndPrice_yHUO7() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 0.0, new BigDecimal(0.0), new BigDecimal(1.0), "AAPL");
    assertEquals(new BigDecimal(0.0), orderDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_wkXk0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    orderDataBean.print();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancel_miyh0() {
    OrderDataBean order = new OrderDataBean(1, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    order.cancel();
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_VfUC0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "AAPL");
    String expectedHTML = "<BR>Order <B>1</B><LI>      orderType: BUY</LI><LI>    orderStatus: OPEN</LI><LI>       openDate: " + new Date() + "</LI><LI> completionDate: " + new Date() + "</LI><LI>       quantity: 100.0</LI><LI>          price: 10.0</LI><LI>       orderFee: 1.0</LI><LI>         symbol: AAPL</LI>";
    String actualHTML = orderDataBean.toHTML();
    assertEquals(expectedHTML, actualHTML);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_HLnu0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    assertEquals(100.0, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantityWithNegativeQuantity_DPIc1() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), -100.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    assertEquals(-100.0, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantityWithZeroQuantity_mVQb2() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 0.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    assertEquals(0.0, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeWithNonZeroOrderFee_YhOp1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderFee(BigDecimal.TEN);
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertEquals(BigDecimal.TEN, orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeWithNullOrderFee_HPIW2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderFee(null);
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNull(orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeWithNegativeOrderFee_WAun3() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderFee(BigDecimal.valueOf(-10));
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertEquals(BigDecimal.valueOf(-10), orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeWithZeroOrderFee_tNJK4() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderFee(BigDecimal.ZERO);
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertEquals(BigDecimal.ZERO, orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeWithPositiveOrderFee_zMFA5() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderFee(BigDecimal.valueOf(10));
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertEquals(BigDecimal.valueOf(10), orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeWithNonNullOrderFeeAndNullOrderDataBean_ixnp8() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderFee(BigDecimal.TEN);
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
    assertEquals(BigDecimal.TEN, orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_DBdF0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    assertTrue(orderDataBean.equals(orderDataBean));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObject_IvSd1() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    OrderDataBean orderDataBean2 = new OrderDataBean(2, "SELL", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "GOOG");
    assertFalse(orderDataBean1.equals(orderDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_XRVL2() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    assertFalse(orderDataBean.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_iTCI3() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    assertFalse(orderDataBean.equals("AAPL"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameValues_lGaX4() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    assertTrue(orderDataBean1.equals(orderDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentOrderID_ZXzV5() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    OrderDataBean orderDataBean2 = new OrderDataBean(2, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    assertFalse(orderDataBean1.equals(orderDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentOrderType_zYak6() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "SELL", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    assertTrue(orderDataBean1.equals(orderDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusOpen_eBUr0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "buy", "open", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "GOOG");
    orderDataBean.setOrderStatus("open");
    assertEquals("open", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusClosed_Alhc1() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "buy", "open", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "GOOG");
    orderDataBean.setOrderStatus("closed");
    assertEquals("closed", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatusCancelled_KkcZ2() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "buy", "open", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "GOOG");
    orderDataBean.setOrderStatus("cancelled");
    assertEquals("cancelled", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_REnO0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    assertEquals(1, orderDataBean.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderIDWithNullOrderID_nymi1() {
    OrderDataBean orderDataBean = new OrderDataBean(null, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    assertNull(orderDataBean.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderIDWithInvalidOrderID_cAGC2() {
    OrderDataBean orderDataBean = new OrderDataBean(-1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "AAPL");
    assertEquals(-1, orderDataBean.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsOpen_Open_gBok0() {
    OrderDataBean order = new OrderDataBean(1, "buy", "open", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(1.0), "AAPL");
    assertTrue(order.isOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsOpen_Processing_BrZB1() {
    OrderDataBean order = new OrderDataBean(1, "buy", "processing", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(1.0), "AAPL");
    assertTrue(order.isOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsOpen_Closed_ybQN2() {
    OrderDataBean order = new OrderDataBean(1, "buy", "closed", new Date(), new Date(), 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(1.0), "AAPL");
    assertFalse(order.isOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccount_GWll0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    AccountDataBean accountDataBean = new AccountDataBean();
    orderDataBean.setAccount(accountDataBean);
    assertEquals(accountDataBean, orderDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountWithNull_EuNK1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setAccount(null);
    assertNull(orderDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountWithDifferentAccountID_fEhG4() {
    OrderDataBean orderDataBean = new OrderDataBean();
    AccountDataBean accountDataBean1 = new AccountDataBean();
    AccountDataBean accountDataBean2 = new AccountDataBean();
    accountDataBean1.setAccountID(1);
    accountDataBean2.setAccountID(2);
    orderDataBean.setAccount(accountDataBean1);
    assertNotEquals(accountDataBean2, orderDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountWithSameAccountID_jZCU5() {
    OrderDataBean orderDataBean = new OrderDataBean();
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setAccountID(1);
    orderDataBean.setAccount(accountDataBean);
    assertEquals(accountDataBean, orderDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountWithDifferentLoginCount_qJzu6() {
    OrderDataBean orderDataBean = new OrderDataBean();
    AccountDataBean accountDataBean1 = new AccountDataBean();
    AccountDataBean accountDataBean2 = new AccountDataBean();
    accountDataBean1.setLoginCount(1);
    accountDataBean2.setLoginCount(2);
    orderDataBean.setAccount(accountDataBean1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountWithSameLoginCount_dPle7() {
    OrderDataBean orderDataBean = new OrderDataBean();
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setLoginCount(1);
    orderDataBean.setAccount(accountDataBean);
    assertEquals(accountDataBean, orderDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountWithDifferentLogoutCount_MpJg8() {
    OrderDataBean orderDataBean = new OrderDataBean();
    AccountDataBean accountDataBean1 = new AccountDataBean();
    AccountDataBean accountDataBean2 = new AccountDataBean();
    accountDataBean1.setLogoutCount(1);
    accountDataBean2.setLogoutCount(2);
    orderDataBean.setAccount(accountDataBean1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee_PkRa0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = new BigDecimal(10.0);
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFeeWithNegativeValue_jZCw1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = new BigDecimal(-10.0);
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate_CtVA0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "AAPL");
    Date openDate = orderDataBean.getOpenDate();
    assertEquals(new Date(), openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullOpenDate_HFhS1() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", null, new Date(), 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(1.0), "AAPL");
    Date openDate = orderDataBean.getOpenDate();
    assertNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDate_Qpiu0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    Date openDate = new Date();
    orderDataBean.setOpenDate(openDate);
    assertEquals(openDate, orderDataBean.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDateNull_TNzy1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOpenDate(null);
    assertNull(orderDataBean.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingWithNullHolding_FwgP1() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(1.0), "GOOG");
    orderDataBean.setHolding(null);
    assertNull(orderDataBean.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDate_hlHK0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), "AAPL");
    Date completionDate = orderDataBean.getCompletionDate();
    assertEquals(new Date(), completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSell_SellOrderType_FjAQ0() {
    OrderDataBean orderDataBean = new OrderDataBean("sell", "open", new Date(), new Date(), 10.0, new BigDecimal(10.0), new BigDecimal(0.0), new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "profileID"), new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 10.0), new HoldingDataBean(10.0, new BigDecimal(10.0), new Date(), new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "profileID"), new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 10.0)));
    assertTrue(orderDataBean.isSell());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuoteNull_CNvv1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setQuote(null);
    assertNull(orderDataBean.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_cJMD0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setQuantity(10.0);
    assertEquals(10.0, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithNegativeValue_XQDN1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setQuantity(-10.0);
    assertEquals(-10.0, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithZeroValue_JuHl2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setQuantity(0.0);
    assertEquals(0.0, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithMaxValue_xmit3() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setQuantity(Double.MAX_VALUE);
    assertEquals(Double.MAX_VALUE, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithMinValue_qYVl4() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setQuantity(Double.MIN_VALUE);
    assertEquals(Double.MIN_VALUE, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithNaNValue_hhnv5() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setQuantity(Double.NaN);
    assertEquals(Double.NaN, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithInfinityValue_CzPx6() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setQuantity(Double.POSITIVE_INFINITY);
    assertEquals(Double.POSITIVE_INFINITY, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithNegativeInfinityValue_LyXQ7() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setQuantity(Double.NEGATIVE_INFINITY);
    assertEquals(Double.NEGATIVE_INFINITY, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance1_SjKv0_QUNd0_1() {
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeWithNullOrderDataBean_LiLB6_gTvy0() {
    OrderDataBean orderDataBean = null;
    BigDecimal orderFee = null;
    assertNull(orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFeeWithZeroValue_gdPi2_IBnO0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = new BigDecimal(0.0);
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDate_FacM0_N_pLGD0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    Date completionDate = new Date();
    orderDataBean.setCompletionDate(completionDate);
    assertEquals(completionDate, orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDateWithNull_CaTU1_OKig1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setCompletionDate(null);
    assertNull(orderDataBean.getCompletionDate());
  }
}