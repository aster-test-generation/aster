/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingManagedExecutor_Coverage_Test_Failing {
  private PingManagedExecutor executor;
  private ServletConfig config;
  private HttpServletResponse response;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_viPp0() throws javax.servlet.ServletException, java.io.IOException {
    PingManagedExecutor executor = new PingManagedExecutor();
    executor.doGet(null, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithRequest_PTFe1() throws javax.servlet.ServletException, java.io.IOException {
    PingManagedExecutor executor = new PingManagedExecutor();
    HttpServletRequest req = mock(HttpServletRequest.class);
    executor.doGet(req, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithResponse_WICr2() throws javax.servlet.ServletException, java.io.IOException {
    PingManagedExecutor executor = new PingManagedExecutor();
    HttpServletResponse res = mock(HttpServletResponse.class);
    executor.doGet(null, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithRequestAndResponse_OIks3() throws javax.servlet.ServletException, java.io.IOException {
    PingManagedExecutor executor = new PingManagedExecutor();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    executor.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithRequestAndResponseAndException_NpCz4() throws javax.servlet.ServletException, java.io.IOException {
    PingManagedExecutor executor = new PingManagedExecutor();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    doThrow(new IOException()).when(res).getOutputStream();
    executor.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithRequestAndResponseAndException2_BBHR5() throws javax.servlet.ServletException, java.io.IOException {
    PingManagedExecutor executor = new PingManagedExecutor();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    doThrow(new ServletException()).when(res).setContentType("text/html");
    executor.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_UWTh0() {
    PingManagedExecutor executor = new PingManagedExecutor();
    String result = executor.getServletInfo();
    assertEquals("Tests a ManagedExecutor", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_lYLg0() throws javax.servlet.ServletException {
    executor = new PingManagedExecutor();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_superInit_gFgg1() throws ServletException {
    executor.init(config);
    verify(config).getServletContext();
  }
}