/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class Aster_DirectSLSBBean_Coverage_Test_Failing {
  private TradeDirect tradeDirect;

  private Collection<QuoteDataBean> getMockTopGainers() {
    List<QuoteDataBean> topGainers = new ArrayList<>();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("GOOG");
    quoteDataBean.setCompanyName("Google Inc.");
    topGainers.add(quoteDataBean);
    return topGainers;
  }

  private Collection<QuoteDataBean> getMockTopLosers() {
    List<QuoteDataBean> topLosers = new ArrayList<>();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("AAPL");
    quoteDataBean.setCompanyName("Apple Inc.");
    topLosers.add(quoteDataBean);
    return topLosers;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_BvGH0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> allQuotes = directSLSBBean.getAllQuotes();
    assertNotNull(allQuotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_BvGH0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> allQuotes = directSLSBBean.getAllQuotes();
    assertTrue(allQuotes.size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithSession_UNfB1_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    Collection<?> allQuotes = directSLSBBean.getAllQuotes();
    assertNotNull(allQuotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithSession_UNfB1_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    Collection<?> allQuotes = directSLSBBean.getAllQuotes();
    assertTrue(allQuotes.size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_kuQg0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = true;
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertEquals(orderDataBean, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithInSession_indJ1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = true;
    directSLSBBean.setInSession(true);
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertEquals(orderDataBean, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_setInSession_EeMp0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.cancelOrder(1, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_SvML0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user1";
    Collection<HoldingDataBean> expectedHoldings = new ArrayList<>();
    when(tradeDirect.getHoldings(userID)).thenReturn(expectedHoldings);
    Collection<HoldingDataBean> actualHoldings = directSLSBBean.getHoldings(userID);
    assertEquals(expectedHoldings, actualHoldings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInSession_mTnl1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user1";
    Collection<HoldingDataBean> expectedHoldings = new ArrayList<>();
    when(tradeDirect.getHoldings(userID)).thenReturn(expectedHoldings);
    tradeDirect.setInSession(true);
    Collection<HoldingDataBean> actualHoldings = directSLSBBean.getHoldings(userID);
    assertEquals(expectedHoldings, actualHoldings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_kjnU0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@email.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    Assertions.assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_kjnU0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@email.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    Assertions.assertEquals(userID, accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_kjnU0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@email.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    Assertions.assertEquals(fullname, accountDataBean.getProfile().getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_kjnU0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@email.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    Assertions.assertEquals(address, accountDataBean.getProfile().getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_kjnU0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@email.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    Assertions.assertEquals(email, accountDataBean.getProfile().getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_kjnU0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@email.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    Assertions.assertEquals(creditcard, accountDataBean.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_kjnU0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@email.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    Assertions.assertEquals(openBalance, accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_gnFh0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    String symbol = "GOOG";
    BigDecimal newPrice = new BigDecimal(123.45);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_gnFh0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    String symbol = "GOOG";
    BigDecimal newPrice = new BigDecimal(123.45);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertEquals(newPrice, updatedQuoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_gnFh0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    String symbol = "GOOG";
    BigDecimal newPrice = new BigDecimal(123.45);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertEquals(sharesTraded, updatedQuoteDataBean.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_setInSession_rEbc0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.queueOrder(1, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_KKWC0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "ABC";
    String companyName = "ABC Company";
    BigDecimal price = new BigDecimal(10.0);
    QuoteDataBean quote = directSLSBBean.createQuote(symbol, companyName, price);
    assertNotNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_KKWC0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "ABC";
    String companyName = "ABC Company";
    BigDecimal price = new BigDecimal(10.0);
    QuoteDataBean quote = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(symbol, quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_KKWC0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "ABC";
    String companyName = "ABC Company";
    BigDecimal price = new BigDecimal(10.0);
    QuoteDataBean quote = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(companyName, quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_KKWC0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "ABC";
    String companyName = "ABC Company";
    BigDecimal price = new BigDecimal(10.0);
    QuoteDataBean quote = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(price, quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_mIPH1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "INVALID";
    String companyName = "ABC Company";
    BigDecimal price = new BigDecimal(10.0);
    try {
      directSLSBBean.createQuote(symbol, companyName, price);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid symbol", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_updateAccountProfile_JAMz1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("testFullName");
    profileData.setAddress("testAddress");
    profileData.setEmail("testEmail");
    profileData.setCreditCard("testCreditCard");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    Assertions.assertEquals(profileData, updatedProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_RUiN0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_RUiN0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(orderType, order.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_RUiN0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quantity, order.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_RUiN0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(account, order.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_RUiN0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quote, order.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_RUiN0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(holding, order.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrderWithInvalidAccount_vTgb1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = null;
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    try {
      directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Account must not be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrderWithInvalidQuote_RVJQ2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = null;
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    try {
      directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Quote must not be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrderWithInvalidHolding_igUm3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = null;
    String orderType = "BUY";
    double quantity = 100.0;
    try {
      directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Holding must not be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInSessionTrue_QNVE0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("testUserID");
    assertTrue(accountProfileDataBean.getCreditCard().equals("testCreditCard"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInSessionTrue_QNVE0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("testUserID");
    assertTrue(accountProfileDataBean.getEmail().equals("testEmail"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInSessionTrue_QNVE0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("testUserID");
    assertTrue(accountProfileDataBean.getUserID().equals("testUserID"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInSessionTrue_QNVE0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("testUserID");
    assertTrue(accountProfileDataBean.getAddress().equals("testAddress"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInSessionTrue_QNVE0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("testUserID");
    assertTrue(accountProfileDataBean.getPassword().equals("testPassword"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInSessionTrue_QNVE0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("testUserID");
    assertTrue(accountProfileDataBean.getFullName().equals("testFullName"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInSessionTrue_QNVE0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("testUserID");
    assertTrue(accountProfileDataBean.getAccount().getAccountID().equals("testAccountID"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_lvAH0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = 1;
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(holdingID);
    Assertions.assertNotNull(holdingDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_lvAH0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = 1;
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(holdingID);
    Assertions.assertEquals(holdingID, holdingDataBean.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_setInSession_iYVw0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.getClosedOrders("userID");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_getClosedOrders_uVYE1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("userID");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompleted_WxEl0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.orderCompleted("user1", 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithNullUserID_YYRX1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.orderCompleted(null, 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithNullOrderID_BEsy2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.orderCompleted("user1", null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithInvalidUserID_nEwi3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.orderCompleted("invalidUserID", 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithInvalidOrderID_Irmx4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.orderCompleted("user1", -1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_OrderDataBean_MDEZ1() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean orderdata = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertNotNull(orderdata);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_Async_VEpj2() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean orderdata = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertEquals(orderdata.getOrderStatus(), "ASYNCH");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_ReturnOrderDataBean_gSbY4() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean orderdata = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertEquals(orderdata, directSLSBBean.sell(userID, holdingID, orderProcessingMode));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CompleteOrderAsync_uiTS3_XuHc0() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean orderdata = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderdata.getOrderID(), false);
    Assertions.assertNotNull(future.get());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInSession_mTnl1_HynM0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user1";
    Collection<HoldingDataBean> expectedHoldings = new ArrayList<>();
    when(tradeDirect.getHoldings(userID)).thenReturn(expectedHoldings);
    directSLSBBean.setInSession(true);
    Collection<HoldingDataBean> actualHoldings = directSLSBBean.getHoldings(userID);
    assertEquals(expectedHoldings, actualHoldings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_BHOM0_WWir0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user1";
    directSLSBBean.logout(userID);
    verify(tradeDirect).setInSession(false);
    verify(tradeDirect).logout(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_BvGH0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> allQuotes = directSLSBBean.getAllQuotes();
    assertNotNull(allQuotes);
    assertTrue(allQuotes.size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesWithSession_UNfB1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    Collection<?> allQuotes = directSLSBBean.getAllQuotes();
    assertNotNull(allQuotes);
    assertTrue(allQuotes.size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_kjnU0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@email.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    Assertions.assertNotNull(accountDataBean);
    Assertions.assertEquals(userID, accountDataBean.getProfileID());
    Assertions.assertEquals(fullname, accountDataBean.getProfile().getFullName());
    Assertions.assertEquals(address, accountDataBean.getProfile().getAddress());
    Assertions.assertEquals(email, accountDataBean.getProfile().getEmail());
    Assertions.assertEquals(creditcard, accountDataBean.getProfile().getCreditCard());
    Assertions.assertEquals(openBalance, accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithInvalidInput_mJyK1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@email.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000);
    try {
      AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
      Assertions.fail("Expected exception not thrown");
    } catch (Exception e) {
      Assertions.assertTrue(e instanceof IllegalArgumentException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_gnFh0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    String symbol = "GOOG";
    BigDecimal newPrice = new BigDecimal(123.45);
    double sharesTraded = 1000;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
    assertEquals(newPrice, updatedQuoteDataBean.getPrice());
    assertEquals(sharesTraded, updatedQuoteDataBean.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_KKWC0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "ABC";
    String companyName = "ABC Company";
    BigDecimal price = new BigDecimal(10.0);
    QuoteDataBean quote = directSLSBBean.createQuote(symbol, companyName, price);
    assertNotNull(quote);
    assertEquals(symbol, quote.getSymbol());
    assertEquals(companyName, quote.getCompanyName());
    assertEquals(price, quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_RUiN0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(order);
    assertEquals(orderType, order.getOrderType());
    assertEquals(quantity, order.getQuantity(), 0.0);
    assertEquals(account, order.getAccount());
    assertEquals(quote, order.getQuote());
    assertEquals(holding, order.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrderWithInvalidOrderType_tVtw4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "INVALID_ORDER_TYPE";
    double quantity = 100.0;
    try {
      directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid order type: " + orderType, e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInSessionTrue_QNVE0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("testUserID");
    assertTrue(accountProfileDataBean.getCreditCard().equals("testCreditCard"));
    assertTrue(accountProfileDataBean.getEmail().equals("testEmail"));
    assertTrue(accountProfileDataBean.getUserID().equals("testUserID"));
    assertTrue(accountProfileDataBean.getAddress().equals("testAddress"));
    assertTrue(accountProfileDataBean.getPassword().equals("testPassword"));
    assertTrue(accountProfileDataBean.getFullName().equals("testFullName"));
    assertTrue(accountProfileDataBean.getAccount().getAccountID().equals("testAccountID"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_lvAH0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = 1;
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(holdingID);
    Assertions.assertNotNull(holdingDataBean);
    Assertions.assertEquals(holdingID, holdingDataBean.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_returnNull_jyVR1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = true;
    Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNull(future);
    assertTrue(future == null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CompleteOrderAsync_uiTS3_XuHc0_fid3() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean orderdata = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderdata.getOrderID(), false);
    Assertions.assertTrue(future.get().getOrderID() == orderdata.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_BHOM0_WWir0_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user1";
    directSLSBBean.logout(userID);
    verify(tradeDirect).setInSession(true);
    verify(tradeDirect).logout(userID);
  }
}