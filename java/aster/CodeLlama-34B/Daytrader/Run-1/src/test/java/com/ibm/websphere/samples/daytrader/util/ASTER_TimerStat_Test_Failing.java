/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TimerStat_Test_Failing {
  private TimerStat timerStat;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMin_1_xTYl0_fid2() {
    TimerStat timerStat = new TimerStat();
    double min = timerStat.getMin();
    assertEquals(0.0, min, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCount_sRhW1() {
    int count = 10;
    timerStat.setCount(count);
    assertEquals(count, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCountWithNegativeValue_iwEU2() {
    int count = -10;
    timerStat.setCount(count);
    assertEquals(0, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCountWithZeroValue_ROty3() {
    int count = 0;
    timerStat.setCount(count);
    assertEquals(0, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCountWithLargeValue_knlx4() {
    int count = 1000;
    timerStat.setCount(count);
    assertEquals(count, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCountWithInvalidValue_sJSO5() {
    int count = -1;
    timerStat.setCount(count);
    assertEquals(0, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalTimeWithNegativeValue_Hbfe1_fid2() {
    TimerStat timerStat = new TimerStat();
    timerStat.setTotalTime(-10.0);
    assertEquals(0.0, timerStat.getTotalTime(), 0.0);
  }
}