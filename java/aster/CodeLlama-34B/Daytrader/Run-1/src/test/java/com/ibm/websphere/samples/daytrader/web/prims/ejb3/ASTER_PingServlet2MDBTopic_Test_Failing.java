/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.jms.ConnectionFactory;
import javax.jms.Topic;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2MDBTopic_Test_Failing {
  private static String initTime;
  private static int hitCount;
  private ConnectionFactory topicConnectionFactory;
  private Topic tradeStreamerTopic;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_grba0() {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    String result = servlet.getServletInfo();
    assertEquals("web primitive, configured with trade runtime configs, tests Servlet to Session EJB path", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithNullServlet_erfC5() {
    PingServlet2MDBTopic servlet = null;
    String result = servlet.getServletInfo();
    assertEquals("web primitive, configured with trade runtime configs, tests Servlet to Session EJB path", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_VgVA0_SkIw0() throws ServletException, IOException {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doPost(req, res);
    verify(req).getParameter("param1");
    verify(req).getParameter("param2");
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).getWriter();
    verify(res).flushBuffer();
    verify(res).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_withParam1_rUaE1_vqwH0() throws ServletException, IOException {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("param1")).thenReturn("value1");
    servlet.doPost(req, res);
    verify(req).getParameter("param1");
    verify(req).getParameter("param2");
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).getWriter();
    verify(res).flushBuffer();
    verify(res).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_withParam2_Wzjm2_OKqR0() throws ServletException, IOException {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("param2")).thenReturn("value2");
    servlet.doPost(req, res);
    verify(req).getParameter("param1");
    verify(req).getParameter("param2");
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).getWriter();
    verify(res).flushBuffer();
    verify(res).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_withParam1AndParam2_mNgw3_ClDg1() throws ServletException, IOException {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("param1")).thenReturn("value1");
    when(req.getParameter("param2")).thenReturn("value2");
    servlet.doPost(req, res);
    verify(req).getParameter("param1");
    verify(req).getParameter("param2");
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).getWriter();
    verify(res).flushBuffer();
    verify(res).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_withInvalidParam1_UfuX4_zfgO0() throws ServletException, IOException {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("param1")).thenReturn("invalid_value");
    servlet.doPost(req, res);
    verify(req).getParameter("param1");
    verify(req).getParameter("param2");
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).getWriter();
    verify(res).flushBuffer();
    verify(res).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_DwQR0_jNJh0() throws IOException, ServletException {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
    verify(res).sendError(500, "PingServlet2MDBTopic.doGet(...): error, " + "e.toString()");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithException_OKjG1_khAc0() throws IOException, ServletException {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("command")).thenReturn("ping");
    when(req.getParameter("publishTime")).thenReturn(String.valueOf(System.currentTimeMillis()));
    when(req.getParameter("text")).thenReturn("Ping message for topic java:comp/env/jms/TradeStreamerTopic sent from PingServlet2MDBTopic at " + new java.util.Date());
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
    verify(res).sendError(500, "PingServlet2MDBTopic.doGet(...): error, " + "Exception");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithException3_UJOd3_qBsd0() throws IOException, ServletException {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("command")).thenReturn("ping");
    when(req.getParameter("publishTime")).thenReturn(String.valueOf(System.currentTimeMillis()));
    when(req.getParameter("text")).thenReturn("Ping message for topic java:comp/env/jms/TradeStreamerTopic sent from PingServlet2MDBTopic at " + new java.util.Date());
    when(req.getParameter("initTime")).thenReturn(String.valueOf(System.currentTimeMillis()));
    when(req.getParameter("hitCount")).thenReturn(String.valueOf(1));
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
    verify(res).sendError(500, "PingServlet2MDBTopic.doGet(...): error, " + "Exception");
  }
}