/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Coverage_Test_Passing {
  @Test
  @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_Lpbv0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    int actual = accountDataBean.hashCode();
    int expected = 0;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_nullProfile_jmGA0() {
    AccountDataBean account = new AccountDataBean();
    account.setProfile(null);
    try {
      account.login("password");
      Assertions.fail("Expected EJBException");
    } catch (EJBException e) {
      Assertions.assertTrue(e.getMessage().contains("null AccountProfile"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_incorrectPassword_TUQP1() {
    AccountDataBean account = new AccountDataBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setPassword("wrongPassword");
    account.setProfile(profile);
    try {
      account.login("password");
      Assertions.fail("Expected EJBException");
    } catch (EJBException e) {
      Assertions.assertTrue(e.getMessage().contains("Incorrect password"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_correctPassword_uzPh2_1() {
    AccountDataBean account = new AccountDataBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setPassword("password");
    account.setProfile(profile);
    account.login("password");
    Assertions.assertEquals(1, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_correctPassword_uzPh2_2() {
    AccountDataBean account = new AccountDataBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setPassword("password");
    account.setProfile(profile);
    account.login("password");
    Assertions.assertNotNull(account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_nullPassword_UODt3() {
    AccountDataBean account = new AccountDataBean();
    try {
      account.login(null);
      Assertions.fail("Expected EJBException");
    } catch (EJBException e) {
      Assertions.assertFalse(e.getMessage().contains("null password"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_emptyPassword_YVZv4() {
    AccountDataBean account = new AccountDataBean();
    try {
      account.login("");
      Assertions.fail("Expected EJBException");
    } catch (EJBException e) {
      Assertions.assertFalse(e.getMessage().contains("empty password"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentAccountID_PTSe0() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
    AccountDataBean accountDataBean2 = new AccountDataBean(2, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
    assertFalse(accountDataBean1.equals(accountDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullAccountID_EnAY1() {
    AccountDataBean accountDataBean1 = new AccountDataBean(null, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
    AccountDataBean accountDataBean2 = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
    assertFalse(accountDataBean1.equals(accountDataBean2));
  }
}