/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.util.concurrent.TimeUnit;
import javax.faces.application.FacesMessage;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.validator.ValidatorException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_LoginValidator_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testValidateWithValidInput_sgII0() throws javax.faces.validator.ValidatorException {
    LoginValidator validator = new LoginValidator();
    FacesContext context = mock(FacesContext.class);
    UIComponent component = mock(UIComponent.class);
    Object value = "uid:1234";
    validator.validate(context, component, value);
    verify(context, never()).addMessage(anyString(), any(FacesMessage.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testValidateWithNullInput_aBwa2() throws javax.faces.validator.ValidatorException {
    LoginValidator validator = new LoginValidator();
    FacesContext context = mock(FacesContext.class);
    UIComponent component = mock(UIComponent.class);
    Object value = null;
    try {
      validator.validate(context, component, value);
      fail("Expected ValidatorException");
    } catch (ValidatorException e) {
      assertEquals(FacesMessage.SEVERITY_ERROR, e.getFacesMessage().getSeverity());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testValidateWithEmptyInput_bVoJ3() throws javax.faces.validator.ValidatorException {
    LoginValidator validator = new LoginValidator();
    FacesContext context = mock(FacesContext.class);
    UIComponent component = mock(UIComponent.class);
    Object value = "";
    try {
      validator.validate(context, component, value);
      fail("Expected ValidatorException");
    } catch (ValidatorException e) {
      assertEquals(FacesMessage.SEVERITY_ERROR, e.getFacesMessage().getSeverity());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testValidateWithInvalidFormatInput_mRqU4() throws javax.faces.validator.ValidatorException {
    LoginValidator validator = new LoginValidator();
    FacesContext context = mock(FacesContext.class);
    UIComponent component = mock(UIComponent.class);
    Object value = "uid:";
    try {
      validator.validate(context, component, value);
      fail("Expected ValidatorException");
    } catch (ValidatorException e) {
      assertEquals(FacesMessage.SEVERITY_ERROR, e.getFacesMessage().getSeverity());
    }
  }
}