/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletBeanValCDI_Test_Failing {
  private static LocalDateTime initTime;
  private HttpServletRequest request;
  @Mock
  private HttpServletResponse response;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_WsVH0() throws ServletException, IOException {
    PingServletBeanValCDI servlet = new PingServletBeanValCDI();
    servlet.doPost(request, response);
    Mockito.verify(request).getMethod();
    Mockito.verify(response).setStatus(HttpServletResponse.SC_OK);
    Mockito.verify(response).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithInvalidMethod_pxrn1() throws ServletException, IOException {
    PingServletBeanValCDI servlet = new PingServletBeanValCDI();
    Mockito.when(request.getMethod()).thenReturn("INVALID");
    servlet.doPost(request, response);
    Mockito.verify(request).getMethod();
    Mockito.verify(response).setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
    Mockito.verify(response).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithException_vRLU2() throws ServletException, IOException {
    PingServletBeanValCDI servlet = new PingServletBeanValCDI();
    Mockito.when(request.getMethod()).thenThrow(new ServletException());
    servlet.doPost(request, response);
    Mockito.verify(request).getMethod();
    Mockito.verify(response).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    Mockito.verify(response).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_hHSX0() {
    PingServletBeanValCDI servlet = new PingServletBeanValCDI();
    String expected = "Basic dynamic HTML generation through a servlet";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithNullServlet_DvBg1() {
    PingServletBeanValCDI servlet = null;
    String expected = null;
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithNullServlet_DvBg1_fid2() {
    PingServletBeanValCDI servlet = null;
    String expected = "Ping Servlet Bean Validation CDI";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }
}