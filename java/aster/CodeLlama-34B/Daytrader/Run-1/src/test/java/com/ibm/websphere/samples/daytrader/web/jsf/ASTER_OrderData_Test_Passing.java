/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderData_Test_Passing {
  public void testSetOrderType_tmGo0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("market");
    assertEquals("market", orderData.getOrderType());
  }

  public void testSetOrderTypeNull_QaIh1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType(null);
    assertEquals(null, orderData.getOrderType());
  }

  public void testSetOrderTypeEmptyString_CIaL2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("");
    assertEquals("", orderData.getOrderType());
  }

  public void testSetOrderTypeInvalid_eulm3() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("invalid");
    assertEquals("invalid", orderData.getOrderType());
  }

  public void testSetOrderTypeDifferentCase_eWLG4() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("mArKeT");
    assertEquals("mArKeT", orderData.getOrderType());
  }

  public void testSetOrderTypeDifferentCase2_YPdc5() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("MaRkEt");
    assertEquals("MaRkEt", orderData.getOrderType());
  }

  public void testSetOrderTypeDifferentCase3_qzVr6() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("MARKET");
    assertEquals("MARKET", orderData.getOrderType());
  }

  public void testSetOrderTypeDifferentCase4_WNqy7() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("market");
    assertEquals("market", orderData.getOrderType());
  }

  public void testSetOrderTypeDifferentCase5_JFPy8() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("Market");
    assertEquals("Market", orderData.getOrderType());
  }

  public void testSetOrderTypeDifferentCase6_FlRk9() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setOrderType("MARKET");
    assertEquals("MARKET", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_1_LTYb0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    BigDecimal orderFee = orderData.getOrderFee();
    assertEquals(new BigDecimal(10.0), orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_2_CLEN1() {
    OrderData orderData = new OrderData(2, "open", new Date(), new Date(), new BigDecimal(20.0), "limit", 20.0, "GOOG");
    BigDecimal orderFee = orderData.getOrderFee();
    assertEquals(new BigDecimal(20.0), orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_3_Zttx2() {
    OrderData orderData = new OrderData(3, "open", new Date(), new Date(), new BigDecimal(30.0), "limit", 30.0, "AMZN");
    BigDecimal orderFee = orderData.getOrderFee();
    assertEquals(new BigDecimal(30.0), orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_4_JXYe3() {
    OrderData orderData = new OrderData(4, "open", new Date(), new Date(), new BigDecimal(40.0), "limit", 40.0, "FB");
    BigDecimal orderFee = orderData.getOrderFee();
    assertEquals(new BigDecimal(40.0), orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_5_leFf4() {
    OrderData orderData = new OrderData(5, "open", new Date(), new Date(), new BigDecimal(50.0), "limit", 50.0, "TSLA");
    BigDecimal orderFee = orderData.getOrderFee();
    assertEquals(new BigDecimal(50.0), orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_6_sbva5() {
    OrderData orderData = new OrderData(6, "open", new Date(), new Date(), new BigDecimal(60.0), "limit", 60.0, "AAPL");
    BigDecimal orderFee = orderData.getOrderFee();
    assertEquals(new BigDecimal(60.0), orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_7_PEwy6() {
    OrderData orderData = new OrderData(7, "open", new Date(), new Date(), new BigDecimal(70.0), "limit", 70.0, "GOOG");
    BigDecimal orderFee = orderData.getOrderFee();
    assertEquals(new BigDecimal(70.0), orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_8_mCih7() {
    OrderData orderData = new OrderData(8, "open", new Date(), new Date(), new BigDecimal(80.0), "limit", 80.0, "AMZN");
    BigDecimal orderFee = orderData.getOrderFee();
    assertEquals(new BigDecimal(80.0), orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_9_sVVS8() {
    OrderData orderData = new OrderData(9, "open", new Date(), new Date(), new BigDecimal(90.0), "limit", 90.0, "FB");
    BigDecimal orderFee = orderData.getOrderFee();
    assertEquals(new BigDecimal(90.0), orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_10_CACn9() {
    OrderData orderData = new OrderData(10, "open", new Date(), new Date(), new BigDecimal(100.0), "limit", 100.0, "TSLA");
    BigDecimal orderFee = orderData.getOrderFee();
    assertEquals(new BigDecimal(100.0), orderFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_1_QYiX0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10), "buy", 100, "AAPL");
    assertEquals(100, orderData.getQuantity(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_2_zogs1() {
    OrderData orderData = new OrderData(2, "open", new Date(), new Date(), new BigDecimal(10), "sell", 50, "GOOG");
    assertEquals(50, orderData.getQuantity(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_3_npxj2() {
    OrderData orderData = new OrderData(3, "open", new Date(), new Date(), new BigDecimal(10), "buy", 200, "TSLA");
    assertEquals(200, orderData.getQuantity(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_4_hUvl3() {
    OrderData orderData = new OrderData(4, "open", new Date(), new Date(), new BigDecimal(10), "sell", 100, "AMZN");
    assertEquals(100, orderData.getQuantity(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_5_GxtE4() {
    OrderData orderData = new OrderData(5, "open", new Date(), new Date(), new BigDecimal(10), "buy", 50, "FB");
    assertEquals(50, orderData.getQuantity(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_6_nBkE5() {
    OrderData orderData = new OrderData(6, "open", new Date(), new Date(), new BigDecimal(10), "sell", 200, "NFLX");
    assertEquals(200, orderData.getQuantity(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_7_pVGW6() {
    OrderData orderData = new OrderData(7, "open", new Date(), new Date(), new BigDecimal(10), "buy", 100, "GOOG");
    assertEquals(100, orderData.getQuantity(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_8_Jswu7() {
    OrderData orderData = new OrderData(8, "open", new Date(), new Date(), new BigDecimal(10), "sell", 50, "AAPL");
    assertEquals(50, orderData.getQuantity(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_9_SFIn8() {
    OrderData orderData = new OrderData(9, "open", new Date(), new Date(), new BigDecimal(10), "buy", 200, "TSLA");
    assertEquals(200, orderData.getQuantity(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_10_KFGC9() {
    OrderData orderData = new OrderData(10, "open", new Date(), new Date(), new BigDecimal(10), "sell", 100, "AMZN");
    assertEquals(100, orderData.getQuantity(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_11_xZuu10() {
    OrderData orderData = new OrderData(11, "open", new Date(), new Date(), new BigDecimal(10), "buy", 50, "FB");
    assertEquals(50, orderData.getQuantity(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_12_inTv11() {
    OrderData orderData = new OrderData(12, "open", new Date(), new Date(), new BigDecimal(10), "sell", 200, "NFLX");
    assertEquals(200, orderData.getQuantity(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_Hsqv0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setPrice(new BigDecimal(15.0));
    assertEquals(new BigDecimal(15.0), orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithNull_Tolb1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setPrice(null);
    assertNull(orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatus_uyKu0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOrderStatus("filled");
    assertEquals("filled", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderStatus_zEpf0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals("open", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderStatusWithNullOrderStatus_PlJW1() {
    OrderData orderData = new OrderData(1, null, new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertNull(orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_htgf0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    assertEquals("AAPL", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbolWithNullSymbol_AoEI1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, null);
    assertNull(orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_1_jrSA0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals(1, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_2_SkmW1() {
    OrderData orderData = new OrderData(2, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "GOOG");
    assertEquals(2, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_3_YShE2() {
    OrderData orderData = new OrderData(3, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "TSLA");
    assertEquals(3, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_4_mSas3() {
    OrderData orderData = new OrderData(4, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "AMZN");
    assertEquals(4, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_5_eLre4() {
    OrderData orderData = new OrderData(5, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "FB");
    assertEquals(5, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_6_WGMj5() {
    OrderData orderData = new OrderData(6, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "NFLX");
    assertEquals(6, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_7_stsc6() {
    OrderData orderData = new OrderData(7, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "DIS");
    assertEquals(7, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_8_PqsB7() {
    OrderData orderData = new OrderData(8, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "ADBE");
    assertEquals(8, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_9_WQYB8() {
    OrderData orderData = new OrderData(9, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "CRM");
    assertEquals(9, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_10_PdEW9() {
    OrderData orderData = new OrderData(10, "open", new Date(), new Date(), new BigDecimal(10.0), "sell", 10.0, "PYPL");
    assertEquals(10, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbol_lsqa0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setSymbol("GOOG");
    assertEquals("GOOG", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithNull_wFbr1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    orderData.setSymbol(null);
    assertNull(orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee_hrLK0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOrderFee(new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), orderData.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFeeWithNull_pyzR1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOrderFee(null);
    assertEquals(null, orderData.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate_AGCI0_1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate_AGCI0_2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertEquals(new Date(), openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullOpenDate_Tjbx1() {
    OrderData orderData = new OrderData(1, "open", null, new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullCompleteDate_OjXK2_1() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullCompleteDate_OjXK2_2() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertEquals(new Date(), openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullOrderFee_Uqxh3_1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), null, "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullOrderFee_Uqxh3_2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), null, "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertEquals(new Date(), openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullOrderType_pgGz4_1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), null, 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullOrderType_pgGz4_2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), null, 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertEquals(new Date(), openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullSymbol_gGRo6_1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, null);
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullSymbol_gGRo6_2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, null);
    Date openDate = orderData.getOpenDate();
    assertEquals(new Date(), openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDate_fURr0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOpenDate(new Date());
    assertEquals(new Date(), orderData.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDateWithNull_IoOa1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOpenDate(null);
    assertNull(orderData.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDateWithInvalidDate_gIWU2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOpenDate(new Date(0));
    assertEquals(new Date(0), orderData.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDateWithFutureDate_pzAs3() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOpenDate(new Date(System.currentTimeMillis() + 1000));
    assertEquals(new Date(System.currentTimeMillis() + 1000), orderData.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDateWithPastDate_juVd4() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOpenDate(new Date(System.currentTimeMillis() - 1000));
    assertEquals(new Date(System.currentTimeMillis() - 1000), orderData.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDate_cEuo0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "limit", 10.0, "AAPL");
    Date completionDate = orderData.getCompletionDate();
    assertEquals(new Date(), completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDateWithNull_CZuS1() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(10.0), "limit", 10.0, "AAPL");
    Date completionDate = orderData.getCompletionDate();
    assertNull(completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_3_QDOu2() {
    OrderData orderData = new OrderData(3, "open", new Date(), new Date(), new BigDecimal(30.0), "buy", 30.0, "AMZN");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_5_arIk4() {
    OrderData orderData = new OrderData(5, "open", new Date(), new Date(), new BigDecimal(50.0), "buy", 50.0, "TSLA");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_6_qDZm5() {
    OrderData orderData = new OrderData(6, "closed", new Date(), new Date(), new BigDecimal(60.0), "sell", 60.0, "AAPL");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_7_SPYL6() {
    OrderData orderData = new OrderData(7, "open", new Date(), new Date(), new BigDecimal(70.0), "buy", 70.0, "GOOG");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_gxbM0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    assertEquals("buy", orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderTypeWithNullOrderType_Oxwz1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), null, 10.0, "AAPL");
    assertNull(orderData.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderID_JLHL0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOrderID(2);
    assertEquals(2, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderIDWithNull_fLaf1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setOrderID(null);
    assertNull(orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_bYCS0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10), "buy", 10.0, "AAPL");
    orderData.setQuantity(20.0);
    assertEquals(20.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithNegativeValue_WxZu1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10), "buy", 10.0, "AAPL");
    orderData.setQuantity(-20.0);
    assertEquals(-20.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_2_eoNj1() {
    OrderData orderData = new OrderData(2, "open", new Date(), new Date(), new BigDecimal(20.0), "sell", 20.0, "GOOG");
    BigDecimal total = orderData.getTotal();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_3_MVeJ2() {
    OrderData orderData = new OrderData(3, "open", new Date(), new Date(), new BigDecimal(30.0), "buy", 30.0, "AMZN");
    BigDecimal total = orderData.getTotal();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_4_ALMP3() {
    OrderData orderData = new OrderData(4, "open", new Date(), new Date(), new BigDecimal(40.0), "sell", 40.0, "FB");
    BigDecimal total = orderData.getTotal();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_7_bHnp6() {
    OrderData orderData = new OrderData(7, "open", new Date(), new Date(), new BigDecimal(70.0), "buy", 70.0, "GOOG");
    BigDecimal total = orderData.getTotal();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotal_YYPY0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setTotal(new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), orderData.getTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalNull_xvGK1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setTotal(null);
    assertNull(orderData.getTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalZero_KKZq2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    orderData.setTotal(new BigDecimal(0.0));
    assertEquals(new BigDecimal(0.0), orderData.getTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDate_ObYX0() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, BigDecimal.ZERO, "buy", 100.0, "AAPL");
    orderData.setCompletionDate(new Date());
    assertEquals(new Date(), orderData.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDateWithNull_Mrzn1() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, BigDecimal.ZERO, "buy", 100.0, "AAPL");
    orderData.setCompletionDate(null);
    assertNull(orderData.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDateWithDifferentDate_AZZD2() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, BigDecimal.ZERO, "buy", 100.0, "AAPL");
    Date newDate = new Date();
    newDate.setTime(newDate.getTime() + 1000);
    orderData.setCompletionDate(newDate);
    assertEquals(newDate, orderData.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullQuantity_NXQg5_UsWn0_1() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 0.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullQuantity_NXQg5_UsWn0_2() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 0.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertEquals(new Date(), openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate_AGCI0() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
    assertEquals(new Date(), openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullCompleteDate_OjXK2() {
    OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(10.0), "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
    assertEquals(new Date(), openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullOrderFee_Uqxh3() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), null, "buy", 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
    assertEquals(new Date(), openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullOrderType_pgGz4() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), null, 10.0, "AAPL");
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
    assertEquals(new Date(), openDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDateWithNullSymbol_gGRo6() {
    OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "buy", 10.0, null);
    Date openDate = orderData.getOpenDate();
    assertNotNull(openDate);
    assertEquals(new Date(), openDate);
  }
}