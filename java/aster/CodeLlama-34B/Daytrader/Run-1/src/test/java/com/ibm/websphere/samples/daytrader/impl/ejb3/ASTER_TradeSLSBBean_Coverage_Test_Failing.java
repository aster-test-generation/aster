/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.jms.TextMessage;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.transaction.RollbackException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_TradeSLSBBean_Coverage_Test_Failing {
  private AccountDataBean accountDataBean;
  private TextMessage message;
  private EntityManager entityManager;
  private TypedQuery<QuoteDataBean> q;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_withNullUserID_xSrd2() {
    String userID = null;
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean result = tradeSLSBBean.getAccountData(userID);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_withEmptyUserID_tWMV3() {
    String userID = "";
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean result = tradeSLSBBean.getAccountData(userID);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_returnNull_WSOA1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = true;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell1_TgeI0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell2_PjzF1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell3_PIFl2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell4_wiPC3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell5_pZqq4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell6_SrSk5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell7_KrsJ6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals(0, order.getOrderFee().compareTo(BigDecimal.ZERO));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell8_obPk7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals(0, order.getOrderFee().compareTo(BigDecimal.ZERO));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell9_GXRK8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals(0, order.getOrderFee().compareTo(BigDecimal.ZERO));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy1_rhoE0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "1234";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_AXgI1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "1234";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy3_fHIV2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "1234";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy4_aQJp3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "1234";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getOrderStatus(), "open");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy5_MGfM4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "1234";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getOrderStatus(), "open");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy6_IcJf5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "1234";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getOrderStatus(), "open");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy7_CCxA6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "1234";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getSymbol(), symbol);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy8_Iuew7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "1234";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getSymbol(), symbol);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullProfile_NeZD1() {
    String userID = "user1";
    Collection<OrderDataBean> expectedOrders = new ArrayList<>();
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(null);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> actualOrders = tradeSLSBBean.getOrders(userID);
    assertEquals(expectedOrders, actualOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_KVnz0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    holdingDataBean.setPurchasePrice(BigDecimal.valueOf(100));
    holdingDataBean.setPurchaseDate(new Date());
    holdingDataBean.setQuoteID("AAPL");
    holdingDataBean.setQuantity(100);
    when(entityManager.find(HoldingDataBean.class, 1)).thenReturn(holdingDataBean);
    HoldingDataBean result = tradeSLSBBean.getHolding(1);
    assertEquals(holdingDataBean, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_withInvalidUserID_zHjU1() {
    String userID = "invalidUser";
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(null);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean result = tradeSLSBBean.getAccountData(userID);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_uxYt0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100.0;
    when(entityManager.createNamedQuery("quoteejb.quoteForUpdate", QuoteDataBean.class)).thenReturn(q);
    when(q.getSingleResult()).thenReturn(new QuoteDataBean());
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertNotNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_PennyStock_xPVE1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("0.01");
    double sharesTraded = 100.0;
    when(entityManager.createNamedQuery("quoteejb.quoteForUpdate", QuoteDataBean.class)).thenReturn(q);
    when(q.getSingleResult()).thenReturn(new QuoteDataBean());
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertNotNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_PennyStock_xPVE1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("0.01");
    double sharesTraded = 100.0;
    when(entityManager.createNamedQuery("quoteejb.quoteForUpdate", QuoteDataBean.class)).thenReturn(q);
    when(q.getSingleResult()).thenReturn(new QuoteDataBean());
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(new BigDecimal("0.01"), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_PennyStock_xPVE1_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("0.01");
    double sharesTraded = 100.0;
    when(entityManager.createNamedQuery("quoteejb.quoteForUpdate", QuoteDataBean.class)).thenReturn(q);
    when(q.getSingleResult()).thenReturn(new QuoteDataBean());
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(new BigDecimal("0.01"), quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_PennyStock_xPVE1_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("0.01");
    double sharesTraded = 100.0;
    when(entityManager.createNamedQuery("quoteejb.quoteForUpdate", QuoteDataBean.class)).thenReturn(q);
    when(q.getSingleResult()).thenReturn(new QuoteDataBean());
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(new BigDecimal("0.01"), quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_PennyStock_xPVE1_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("0.01");
    double sharesTraded = 100.0;
    when(entityManager.createNamedQuery("quoteejb.quoteForUpdate", QuoteDataBean.class)).thenReturn(q);
    when(q.getSingleResult()).thenReturn(new QuoteDataBean());
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(new BigDecimal("0.01"), quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_PennyStock_xPVE1_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("0.01");
    double sharesTraded = 100.0;
    when(entityManager.createNamedQuery("quoteejb.quoteForUpdate", QuoteDataBean.class)).thenReturn(q);
    when(q.getSingleResult()).thenReturn(new QuoteDataBean());
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(100.0, quote.getVolume());
  }

  @Test
  public void testGetClosedOrders_Lzcq0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("userID");
    assertEquals(0, closedOrders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_orderFound_AVSL1_NHLR0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    OrderDataBean order = new OrderDataBean();
    when(entityManager.find(OrderDataBean.class, orderID)).thenReturn(order);
    tradeSLSBBean.cancelOrder(orderID, twoPhase);
    verify(entityManager, times(1)).find(OrderDataBean.class, orderID);
    verify(order, times(1)).cancel();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_password_empty_jXqk5_LMdS1() throws javax.transaction.RollbackException {
    String userID = "userID";
    String password = "";
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      tradeSLSBBean.login(userID, password);
    } catch (EJBException e) {
      assertEquals("No such user: " + userID, e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_nullUserID_tkcG2_ZFhN0() {
    String userID = null;
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountProfileDataBean profile = null;
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_existingUserID_Lrij0_UyJC0_1() {
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountProfileDataBean profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_existingUserID_Lrij0_UyJC0_2() {
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountProfileDataBean profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(0, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_existingUserID_Lrij0_UyJC0_3() {
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountProfileDataBean profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(0, account.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_existingUserID_Lrij0_UyJC0_4() {
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountProfileDataBean profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_existingUserID_Lrij0_UyJC0_5() {
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountProfileDataBean profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(openBalance, account.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_existingUserID_Lrij0_UyJC0_6() {
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountProfileDataBean profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(openBalance, account.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_existingUserID_Lrij0_UyJC0_7() {
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountProfileDataBean profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(userID, account.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_existingUserID_Lrij0_UyJC0_8() {
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "testFullname";
    String address = "testAddress";
    String email = "testEmail";
    String creditcard = "testCreditcard";
    BigDecimal openBalance = new BigDecimal(1000);
    AccountProfileDataBean profile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(profile, account.getProfile());
  }
}