/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirectDBUtils;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigServlet_Test_Failing {
  private TradeDirectDBUtils dbUtils;
  private HttpServletRequest request;
  @Mock
  private HttpServletResponse response;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_RuntimeMode_FevV0() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("RuntimeMode")).thenReturn("DEV");
    servlet.doConfigUpdate(request, response);
    assertEquals(TradeConfig.getRunTimeModeNames()[TradeConfig.getRunTimeMode()], "DEV");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_OrderProcessingMode_ZZrg1() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("OrderProcessingMode")).thenReturn("1");
    servlet.doConfigUpdate(request, response);
    assertEquals(TradeConfig.getOrderProcessingModeNames()[TradeConfig.getOrderProcessingMode()], "1");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_WebInterface_EgMO2() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("WebInterface")).thenReturn("1");
    servlet.doConfigUpdate(request, response);
    assertEquals(TradeConfig.getWebInterfaceNames()[TradeConfig.getWebInterface()], "1");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_MaxUsers_OEKt3() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("MaxUsers")).thenReturn("100");
    servlet.doConfigUpdate(request, response);
    assertEquals(TradeConfig.getMAX_USERS(), 100);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_MaxQuotes_YxCa4() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("MaxQuotes")).thenReturn("100");
    servlet.doConfigUpdate(request, response);
    assertEquals(TradeConfig.getMAX_QUOTES(), 100);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_MarketSummaryInterval_jYNK5() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("marketSummaryInterval")).thenReturn("100");
    servlet.doConfigUpdate(request, response);
    assertEquals(TradeConfig.getMarketSummaryInterval(), 100);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_PrimIterations_uhJD6() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("primIterations")).thenReturn("100");
    servlet.doConfigUpdate(request, response);
    assertEquals(TradeConfig.getPrimIterations(), 100);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_PublishQuotePriceChange_biLz7() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    servlet.doConfigUpdate(request, response);
    assertEquals(TradeConfig.getPublishQuotePriceChange(), true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_ListQuotePriceChangeFrequency_QKmw8() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    when(request.getParameter("ListQuotePriceChangeFrequency")).thenReturn("100");
    servlet.doConfigUpdate(request, response);
    assertEquals(TradeConfig.getListQuotePriceChangeFrequency(), 100);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testService_actionNull_nxfn0_Ovrh0() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
    verify(resp).getWriter();
    verify(resp).sendError(500, "TradeConfigServlet.service(...)" + "Exception trying to perform action=null" + "\nException details: " + null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testService_actionResetTrade_ctTW2_zHIN0() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("resetTrade");
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
    verify(resp).getWriter();
    verify(resp).sendError(500, "TradeConfigServlet.service(...)" + "Exception trying to perform action=resetTrade" + "\nException details: " + null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testService_actionBuildDB_oOSP3_EyQZ0() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("buildDB");
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
    verify(resp).getWriter();
    verify(resp).sendError(500, "TradeConfigServlet.service(...)" + "Exception trying to perform action=buildDB" + "\nException details: " + null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testService_actionBuildDBTables_VgrN4_tiRx0() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("buildDBTables");
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
    verify(resp).getWriter();
    verify(resp).sendError(500, "TradeConfigServlet.service(...)" + "Exception trying to perform action=buildDBTables" + "\nException details: " + null);
  }
}