/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeScenarioServlet_Test_Passing {
  @Mock
  private HttpServlet servlet;
  private static final String tasPathPrefix = "/app?action=";

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_hHDe0() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doGet(request, response);
    verify(request).getParameter("task");
    verify(response).setContentType("text/html");
    verify(response).setStatus(HttpServletResponse.SC_OK);
    verify(response).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithTaskParameter_sZMy1() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("task")).thenReturn("performTask");
    servlet.doGet(request, response);
    verify(request).getParameter("task");
    verify(response).setContentType("text/html");
    verify(response).setStatus(HttpServletResponse.SC_OK);
    verify(response).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithInvalidTaskParameter_evpn2() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("task")).thenReturn("invalidTask");
    servlet.doGet(request, response);
    verify(request).getParameter("task");
    verify(response).setContentType("text/html");
    verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(response).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithException_uSjw3() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("task")).thenThrow(new ServletException());
    servlet.doGet(request, response);
    verify(request).getParameter("task");
    verify(response).setContentType("text/html");
    verify(response).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    verify(response).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_kHmF0() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doPost(request, response);
    verify(request).getParameter("task");
    verify(response).setStatus(HttpServletResponse.SC_OK);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithInvalidTask_pQRk1() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("task")).thenReturn("invalid");
    servlet.doPost(request, response);
    verify(response).sendError(HttpServletResponse.SC_BAD_REQUEST);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithValidTask_WjcO2() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("task")).thenReturn("valid");
    servlet.doPost(request, response);
    verify(response).setStatus(HttpServletResponse.SC_OK);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_OPGq0() {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    when(servlet.getServletInfo()).thenReturn("TradeScenarioServlet emulates a population of web users");
    assertEquals("TradeScenarioServlet emulates a population of web users", tradeScenarioServlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask_login_vJGf0() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("l");
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(resp).getOutputStream();
    verify(resp).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask_logout_MKCL1() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("o");
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(resp).getOutputStream();
    verify(resp).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask_register_IGtd2() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("r");
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(resp).getOutputStream();
    verify(resp).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask_home_cijq3() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("h");
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(resp).getOutputStream();
    verify(resp).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask_portfolio_BnMM4() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("p");
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(resp).getOutputStream();
    verify(resp).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask_quotes_NEXz5() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("q");
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(resp).getOutputStream();
    verify(resp).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask_account_BTtS6() throws ServletException, IOException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("a");
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(resp).getOutputStream();
    verify(resp).flushBuffer();
  }
}