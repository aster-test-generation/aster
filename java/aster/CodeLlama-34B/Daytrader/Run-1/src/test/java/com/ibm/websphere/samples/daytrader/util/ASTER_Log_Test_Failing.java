/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Log_Test_Failing {
  private Log log;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintObject_IllegalArgumentException_RzrM13() {
    try {
      Log.printObject(new Object());
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Object must be a string, number, boolean, or character", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_msg1_null_msg3_e_LsRJ4() {
    String msg1 = "Message 1";
    String msg2 = null;
    String msg3 = "Message 3";
    Throwable e = new Throwable("Message 1Message 3	");
    Log.error(msg1, msg2, msg3, e);
    assertEquals(msg1 + "\n" + msg3 + "\n\t", e.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_msg1_null_msg3_null_RzxI5() {
    String msg1 = "Message 1";
    String msg2 = null;
    String msg3 = "Message 3";
    Throwable e = null;
    Log.error(msg1, msg2, msg3, e);
    assertEquals(msg1 + "\n" + msg3 + "\n\t", e.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_msg1_null_null_e_eNDV6() {
    String msg1 = "Message 1";
    String msg2 = null;
    String msg3 = null;
    Throwable e = new Throwable("Message 1	");
    Log.error(msg1, msg2, msg3, e);
    assertEquals(msg1 + "\n\t", e.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_msg1_null_null_null_TMjv7() {
    String msg1 = "Message 1";
    String msg2 = null;
    String msg3 = null;
    Throwable e = null;
    Log.error(msg1, msg2, msg3, e);
    assertEquals(msg1 + "\n\t", "");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_null_msg2_msg3_e_wIkj8() {
    String msg1 = null;
    String msg2 = "Message 2";
    String msg3 = "Message 3";
    Throwable e = new Throwable("Message 2Message 3	");
    Log.error(msg1, msg2, msg3, e);
    assertEquals(msg2 + "\n" + msg3 + "\n\t", e.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintCollection_nullCollection_pmXW2() {
    Collection<Object> c = null;
    Log.printCollection("Null collection", c);
    assertNull(c);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintObject_NullPointerException_OefL12_fid1() {
    try {
      Log.printObject(null);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("Object cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintCollection_emptyString_QfiL3() {
    Collection<Object> c = new ArrayList<>();
    Log.printCollection(c);
    assertEquals("", c.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintCollection_nonEmptyString_emVK4() {
    Collection<Object> c = new ArrayList<>();
    c.add("apple");
    c.add("banana");
    c.add("orange");
    Log.printCollection(c);
    assertEquals("apple, banana, orange", c.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_msg1_msg2_e_DUIV0() {
    String msg1 = "Test message 1";
    String msg2 = "Test message 2";
    Throwable e = new Throwable("Test exception");
    Log.error(msg1, msg2, e);
    assertEquals(msg1 + "\n" + msg2 + "\n\t", e.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_msg1_msg2_null_ReJG1() {
    String msg1 = "Test message 1";
    String msg2 = "Test message 2";
    Throwable e = null;
    Log.error(msg1, msg2, e);
    assertEquals(msg1 + "\n" + msg2 + "\n\t", e.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoDebug_False_tfQW1() {
    assertFalse(Log.doDebug());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_msg1_msg2_msg3_e_xfbi0() {
    String msg1 = "Message 1";
    String msg2 = "Message 2";
    String msg3 = "Message 3";
    Throwable e = new Throwable("Exception message");
    Log.error(msg1, msg2, msg3, e);
    assertEquals(msg1 + "\n" + msg2 + "\n" + msg3 + "\n\t", e.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_msg1_msg2_msg3_null_VVpl1() {
    String msg1 = "Message 1";
    String msg2 = "Message 2";
    String msg3 = "Message 3";
    Throwable e = null;
    Log.error(msg1, msg2, msg3, e);
    assertEquals(msg1 + "\n" + msg2 + "\n" + msg3 + "\n\t", e.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_msg1_msg2_null_e_dhtv2() {
    String msg1 = "Message 1";
    String msg2 = "Message 2";
    String msg3 = null;
    Throwable e = new Throwable("Exception message");
    Log.error(msg1, msg2, msg3, e);
    assertEquals(msg1 + "\n" + msg2 + "\n\t", e.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_msg1_msg2_null_null_fpqS3() {
    String msg1 = "Message 1";
    String msg2 = "Message 2";
    String msg3 = null;
    Throwable e = null;
    Log.error(msg1, msg2, msg3, e);
    assertEquals(msg1 + "\n" + msg2 + "\n\t", e.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_msg1_null_msg3_e_LsRJ4_fid1() {
    String msg1 = "Message 1";
    String msg2 = null;
    String msg3 = "Message 3";
    Throwable e = new Throwable("Exception message");
    Log.error(msg1, msg2, msg3, e);
    assertEquals(msg1 + "\n" + msg3 + "\n\t", e.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_msg1_null_null_e_eNDV6_fid1() {
    String msg1 = "Message 1";
    String msg2 = null;
    String msg3 = null;
    Throwable e = new Throwable("Exception message");
    Log.error(msg1, msg2, msg3, e);
    assertEquals(msg1 + "\n\t", e.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_msg1_null_null_null_TMjv7_fid1() {
    String msg1 = "Message 1";
    String msg2 = null;
    String msg3 = null;
    Throwable e = null;
    Log.error(msg1, msg2, msg3, e);
    assertEquals(msg1 + "\n\t", e.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_null_msg2_msg3_e_wIkj8_fid1() {
    String msg1 = null;
    String msg2 = "Message 2";
    String msg3 = "Message 3";
    Throwable e = new Throwable("Exception message");
    Log.error(msg1, msg2, msg3, e);
    assertEquals(msg2 + "\n" + msg3 + "\n\t", e.getMessage());
  }
}