/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.TimeUnit;
import javax.websocket.EndpointConfig;
import javax.websocket.Session;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_MarketSummaryWebSocket_Test_Passing {
  private EndpointConfig ec;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSendMarketSummary_updateMarketSummary_tZxK0() {
    MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
    ActionMessage message = new ActionMessage();
    Session currentSession = mock(Session.class);
    message.doDecoding("{\"action\":\"updateMarketSummary\"}");
    marketSummaryWebSocket.sendMarketSummary(message, currentSession);
    verify(currentSession).getAsyncRemote();
    verify(currentSession.getAsyncRemote()).sendText(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSendMarketSummary_updateRecentQuotePriceChange_lNMK1() {
    MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
    ActionMessage message = new ActionMessage();
    Session currentSession = mock(Session.class);
    message.doDecoding("{\"action\":\"updateRecentQuotePriceChange\"}");
    marketSummaryWebSocket.sendMarketSummary(message, currentSession);
    verify(currentSession).getAsyncRemote();
    verify(currentSession.getAsyncRemote()).sendObject(anyList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSendMarketSummary_invalidAction_NTzG2() {
    MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
    ActionMessage message = new ActionMessage();
    Session currentSession = mock(Session.class);
    message.doDecoding("{\"action\":\"invalidAction\"}");
    marketSummaryWebSocket.sendMarketSummary(message, currentSession);
    verify(currentSession, never()).getAsyncRemote();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSendMarketSummary_nullAction_XCCC3() {
    MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
    ActionMessage message = new ActionMessage();
    Session currentSession = mock(Session.class);
    message.doDecoding("{\"action\":null}");
    marketSummaryWebSocket.sendMarketSummary(message, currentSession);
    verify(currentSession, never()).getAsyncRemote();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSendMarketSummary_nullMessage_vXnh4() {
    MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
    Session currentSession = mock(Session.class);
    marketSummaryWebSocket.sendMarketSummary(null, currentSession);
    verify(currentSession, never()).getAsyncRemote();
  }
}