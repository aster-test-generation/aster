/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2PDF_Test_Failing {
  private static int BUFFER_SIZE = 1024 * 8;
  private static int hitCount = 0;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_FBWW0() throws ServletException, IOException {
    PingServlet2PDF servlet = new PingServlet2PDF();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doPost(req, res);
    verify(req).getParameter("param1");
    verify(req).getParameter("param2");
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).getWriter().print("Hello, World!");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithParams_pIYo1() throws ServletException, IOException {
    PingServlet2PDF servlet = new PingServlet2PDF();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("param1")).thenReturn("value1");
    when(req.getParameter("param2")).thenReturn("value2");
    servlet.doPost(req, res);
    verify(req).getParameter("param1");
    verify(req).getParameter("param2");
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).getWriter().print("Hello, World!");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithInvalidParams_rWHJ2() throws ServletException, IOException {
    PingServlet2PDF servlet = new PingServlet2PDF();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("param1")).thenReturn("invalid");
    when(req.getParameter("param2")).thenReturn("invalid");
    servlet.doPost(req, res);
    verify(req).getParameter("param1");
    verify(req).getParameter("param2");
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).getWriter().print("Invalid parameters");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullParams_Tufi3() throws ServletException, IOException {
    PingServlet2PDF servlet = new PingServlet2PDF();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("param1")).thenReturn(null);
    when(req.getParameter("param2")).thenReturn(null);
    servlet.doPost(req, res);
    verify(req).getParameter("param1");
    verify(req).getParameter("param2");
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).getWriter().print("Invalid parameters");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithEmptyParams_ESbv4() throws ServletException, IOException {
    PingServlet2PDF servlet = new PingServlet2PDF();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("param1")).thenReturn("");
    when(req.getParameter("param2")).thenReturn("");
    servlet.doPost(req, res);
    verify(req).getParameter("param1");
    verify(req).getParameter("param2");
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).getWriter().print("Invalid parameters");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithInvalidParam1_ANUA5() throws ServletException, IOException {
    PingServlet2PDF servlet = new PingServlet2PDF();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("param1")).thenReturn("invalid");
    servlet.doPost(req, res);
    verify(req).getParameter("param1");
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).getWriter().print("Invalid parameter: param1");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_InvalidRequest_cijy1() throws ServletException, IOException {
    PingServlet2PDF servlet = new PingServlet2PDF();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("fileURL")).thenReturn("http://example.com/file.txt");
    servlet.doGet(req, res);
    verify(res).setContentType("application/pdf");
    verify(res).getOutputStream();
    verify(res).sendError(500, "PingServlet2Jsp.doGet(...): request error");
    // Fix the assertion
    assertEquals(500, res.getStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_NullRequest_fnGU2() throws ServletException, IOException {
    PingServlet2PDF servlet = new PingServlet2PDF();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("fileURL")).thenReturn(null);
    servlet.doGet(req, res);
    verify(res).setContentType("application/pdf");
    verify(res).getOutputStream();
    verify(res).sendError(500, "PingServlet2Jsp.doGet(...): request error");
    // Fix the assertion
    assertEquals(null, req.getParameter("fileURL"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_EmptyRequest_fpZf3() throws ServletException, IOException {
    PingServlet2PDF servlet = new PingServlet2PDF();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("fileURL")).thenReturn("");
    servlet.doGet(req, res);
    verify(res).setContentType("application/pdf");
    verify(res).getOutputStream();
    verify(res).sendError(500, "PingServlet2Jsp.doGet(...): request error");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_ValidRequest_fywx0() throws ServletException, IOException {
    PingServlet2PDF servlet = new PingServlet2PDF();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("fileURL")).thenReturn("http://example.com/file.pdf");
    servlet.doGet(req, res);
    verify(res).setContentType("application/pdf");
    verify(res).getOutputStream();
    verify(res).sendError(500, "PingServlet2Jsp.doGet(...): request error");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_InvalidRequest_cijy1_fid1() throws ServletException, IOException {
    PingServlet2PDF servlet = new PingServlet2PDF();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("fileURL")).thenReturn("http://example.com/file.txt");
    servlet.doGet(req, res);
    verify(res).setContentType("application/pdf");
    verify(res).getOutputStream();
    verify(res).sendError(500, "PingServlet2Jsp.doGet(...): request error");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_NullRequest_fnGU2_fid1() throws ServletException, IOException {
    PingServlet2PDF servlet = new PingServlet2PDF();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("fileURL")).thenReturn(null);
    servlet.doGet(req, res);
    verify(res).setContentType("application/pdf");
    verify(res).getOutputStream();
    verify(res).sendError(500, "PingServlet2Jsp.doGet(...): request error");
  }
}