/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

public class Aster_DirectSLSBBean_Coverage_Test_Passing {
  private TradeDirect tradeDirect;

  private Collection<QuoteDataBean> getMockTopGainers() {
    List<QuoteDataBean> topGainers = new ArrayList<>();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("GOOG");
    quoteDataBean.setCompanyName("Google Inc.");
    topGainers.add(quoteDataBean);
    return topGainers;
  }

  private Collection<QuoteDataBean> getMockTopLosers() {
    List<QuoteDataBean> topLosers = new ArrayList<>();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("AAPL");
    quoteDataBean.setCompanyName("Apple Inc.");
    topLosers.add(quoteDataBean);
    return topLosers;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithInvalidInput_mJyK1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@email.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000);
    try {
      AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
      Assertions.fail("Expected exception not thrown");
    } catch (Exception e) {
      Assertions.assertFalse(e instanceof IllegalArgumentException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_exception_Iitz2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.queueOrder(null, true);
      fail("Expected exception");
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithException_uKoK5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.orderCompleted("user1", 1);
      fail("Expected exception not thrown");
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_OblN0() {
    tradeDirect = mock(TradeDirect.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void tearDown_Xcxy1_AWKU0() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_exception_PSsN2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.cancelOrder(null, true);
      fail("Expected exception not thrown");
    } catch (Exception e) {
    }
  }
}