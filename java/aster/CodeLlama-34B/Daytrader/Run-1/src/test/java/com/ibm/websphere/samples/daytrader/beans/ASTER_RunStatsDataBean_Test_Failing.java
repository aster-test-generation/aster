/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RunStatsDataBean_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBuyOrderCount_invalidInput_LXmM1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int buyOrderCount = -1;
    runStatsDataBean.setBuyOrderCount(buyOrderCount);
    assertEquals(0, runStatsDataBean.getBuyOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBuyOrderCount_invalidInput_negative_xdGU7() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int buyOrderCount = -10;
    runStatsDataBean.setBuyOrderCount(buyOrderCount);
    assertEquals(0, runStatsDataBean.getBuyOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDeletedOrderCountWithNegativeValue_YHOZ1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(-10);
    assertEquals(0, runStatsDataBean.getDeletedOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenOrderCount_invalidInput_bTUT1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int openOrderCount = -1;
    runStatsDataBean.setOpenOrderCount(openOrderCount);
    assertEquals(0, runStatsDataBean.getOpenOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_InvalidInput_XKiB1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = -1;
    runStatsDataBean.setSumLoginCount(sumLoginCount);
    assertEquals(0, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_NegativeValue_phQb6() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = -10;
    runStatsDataBean.setSumLoginCount(sumLoginCount);
    assertEquals(0, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingCountNegative_Uhvu1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int holdingCount = -10;
    runStatsDataBean.setHoldingCount(holdingCount);
    assertEquals(0, runStatsDataBean.getHoldingCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNewUserCountWithNegativeValue_WaSi1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int newUserCount = -10;
    runStatsDataBean.setNewUserCount(newUserCount);
    assertEquals(0, runStatsDataBean.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNewUserCountWithInvalidValue_KmYk4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int newUserCount = -1;
    runStatsDataBean.setNewUserCount(newUserCount);
    assertEquals(0, runStatsDataBean.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumLoginCount_withPositiveCount_tGCY1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = runStatsDataBean.getSumLoginCount();
    assertEquals(1, sumLoginCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumLoginCount_withNegativeCount_sxic2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = runStatsDataBean.getSumLoginCount();
    assertEquals(-1, sumLoginCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDeletedOrderCountWithNegativeValue_YHOZ1_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(-1 - 10);
    assertEquals(-10, runStatsDataBean.getDeletedOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeStockCountWithNullValue_FNuQ5_FEyz0_fid3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeStockCount(0);
    assertNull(runStatsDataBean.getTradeStockCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCountWithNull_GDeX5_XKGn0_fid3() {
    RunStatsDataBean bean = new RunStatsDataBean();
    bean.setSellOrderCount(0);
    assertNull(bean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeStockCountWithDifferentParameters_Cfkh1_Jzhm0_1_fid3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeStockCount = runStatsDataBean.getSellOrderCount();
    tradeStockCount = runStatsDataBean.getSellOrderCount();
    tradeStockCount = runStatsDataBean.getSellOrderCount();
    assertEquals(10, tradeStockCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeStockCountWithDifferentParameters_Cfkh1_Jzhm0_2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeStockCount = runStatsDataBean.getSellOrderCount();
    tradeStockCount = runStatsDataBean.getSellOrderCount();
    tradeStockCount = runStatsDataBean.getSellOrderCount();
    assertEquals(5, tradeStockCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumLogoutCountWithPositiveCount_HBDA1_rXPY0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(10);
    int sumLogoutCount = runStatsDataBean.getSumLogoutCount();
    assertEquals(10, sumLogoutCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLogoutCountWithNull_sUPm5_UiAQ0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    Integer sumLogoutCount = null;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    assertEquals(sumLogoutCount, runStatsDataBean.getSumLogoutCount());
  }
}