/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import java.util.Date;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RunStatsDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeUserCount_eHlJ0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeUserCount = runStatsDataBean.getTradeUserCount();
    assertEquals(0, tradeUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeUserCountWithPositiveValue_sKLY1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(10);
    int tradeUserCount = runStatsDataBean.getTradeUserCount();
    assertEquals(10, tradeUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeUserCountWithNegativeValue_BqMx2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(-10);
    int tradeUserCount = runStatsDataBean.getTradeUserCount();
    assertEquals(-10, tradeUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBuyOrderCount_validInput_nfwj0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int buyOrderCount = 10;
    runStatsDataBean.setBuyOrderCount(buyOrderCount);
    assertEquals(buyOrderCount, runStatsDataBean.getBuyOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBuyOrderCount_zeroInput_kNkC3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int buyOrderCount = 0;
    runStatsDataBean.setBuyOrderCount(buyOrderCount);
    assertEquals(0, runStatsDataBean.getBuyOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBuyOrderCount_maxValueInput_navL4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int buyOrderCount = Integer.MAX_VALUE;
    runStatsDataBean.setBuyOrderCount(buyOrderCount);
    assertEquals(buyOrderCount, runStatsDataBean.getBuyOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBuyOrderCount_minValueInput_UlsY5() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int buyOrderCount = Integer.MIN_VALUE;
    runStatsDataBean.setBuyOrderCount(buyOrderCount);
    assertEquals(buyOrderCount, runStatsDataBean.getBuyOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBuyOrderCount_randomInput_zSuf6() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int buyOrderCount = new Random().nextInt();
    runStatsDataBean.setBuyOrderCount(buyOrderCount);
    assertEquals(buyOrderCount, runStatsDataBean.getBuyOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBuyOrderCount_invalidInput_random_KdwN11() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDeletedOrderCount_Feam0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(10);
    assertEquals(10, runStatsDataBean.getDeletedOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDeletedOrderCountWithZeroValue_JQEV2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(0);
    assertEquals(0, runStatsDataBean.getDeletedOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDeletedOrderCountWithLargeValue_Gzzx3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(1000);
    assertEquals(1000, runStatsDataBean.getDeletedOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeUserCount_dMTj0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeUserCount = 10;
    runStatsDataBean.setTradeUserCount(tradeUserCount);
    assertEquals(tradeUserCount, runStatsDataBean.getTradeUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBuyOrderCount_awrX0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int buyOrderCount = runStatsDataBean.getBuyOrderCount();
    assertEquals(0, buyOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBuyOrderCountWithPositiveCount_NmNI1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setBuyOrderCount(10);
    int buyOrderCount = runStatsDataBean.getBuyOrderCount();
    assertEquals(10, buyOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBuyOrderCountWithNegativeCount_ZSiQ2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setBuyOrderCount(-10);
    int buyOrderCount = runStatsDataBean.getBuyOrderCount();
    assertEquals(-10, buyOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderCount_SPdd0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int orderCount = runStatsDataBean.getOrderCount();
    assertEquals(0, orderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderCountWithPositiveCount_AgYR1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(10);
    int orderCount = runStatsDataBean.getOrderCount();
    assertEquals(10, orderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderCountWithNegativeCount_xFwM2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(-10);
    int orderCount = runStatsDataBean.getOrderCount();
    assertEquals(-10, orderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderCountWithZeroCount_inbw3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(0);
    int orderCount = runStatsDataBean.getOrderCount();
    assertEquals(0, orderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenOrderCount_yTMb0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int openOrderCount = runStatsDataBean.getOpenOrderCount();
    assertEquals(0, openOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNewUserCount_XyBa0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int newUserCount = runStatsDataBean.getNewUserCount();
    assertEquals(0, newUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNewUserCountWithPositiveCount_wEPO1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setNewUserCount(10);
    int newUserCount = runStatsDataBean.getNewUserCount();
    assertEquals(10, newUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNewUserCountWithNegativeCount_twnV2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setNewUserCount(-10);
    int newUserCount = runStatsDataBean.getNewUserCount();
    assertEquals(-10, newUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNewUserCountWithZeroCount_leAO3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setNewUserCount(0);
    int newUserCount = runStatsDataBean.getNewUserCount();
    assertEquals(0, newUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenOrderCount_validInput_ZgWB0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int openOrderCount = 10;
    runStatsDataBean.setOpenOrderCount(openOrderCount);
    assertEquals(openOrderCount, runStatsDataBean.getOpenOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeStockCount_nJfX0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeStockCount(10);
    assertEquals(10, runStatsDataBean.getTradeStockCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeStockCountWithNegativeValue_OPfS1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeStockCount(-10);
    assertEquals(-10, runStatsDataBean.getTradeStockCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeStockCountWithZeroValue_fdtB2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeStockCount(0);
    assertEquals(0, runStatsDataBean.getTradeStockCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeStockCountWithMaxValue_Gbot3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeStockCount(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, runStatsDataBean.getTradeStockCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeStockCountWithMinValue_fUBn4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeStockCount(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, runStatsDataBean.getTradeStockCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_ValidInput_NWdq0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = 10;
    runStatsDataBean.setSumLoginCount(sumLoginCount);
    assertEquals(sumLoginCount, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_MaxValue_xcyR3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = Integer.MAX_VALUE;
    runStatsDataBean.setSumLoginCount(sumLoginCount);
    assertEquals(sumLoginCount, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_MinValue_qrBz4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = Integer.MIN_VALUE;
    runStatsDataBean.setSumLoginCount(sumLoginCount);
    assertEquals(sumLoginCount, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_Zero_NHDf5() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = 0;
    runStatsDataBean.setSumLoginCount(sumLoginCount);
    assertEquals(sumLoginCount, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_LargeValue_Gbbq8() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = 1000000;
    runStatsDataBean.setSumLoginCount(sumLoginCount);
    assertEquals(sumLoginCount, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_SmallValue_HhPR9() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = 1;
    runStatsDataBean.setSumLoginCount(sumLoginCount);
    assertEquals(sumLoginCount, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingCount_UURo0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int holdingCount = 10;
    runStatsDataBean.setHoldingCount(holdingCount);
    assertEquals(holdingCount, runStatsDataBean.getHoldingCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCancelledOrderCount_fWEE0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int cancelledOrderCount = runStatsDataBean.getCancelledOrderCount();
    assertEquals(0, cancelledOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCount_ciKa0() {
    RunStatsDataBean bean = new RunStatsDataBean();
    int sellOrderCount = 10;
    bean.setSellOrderCount(sellOrderCount);
    assertEquals(sellOrderCount, bean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCountWithZero_Rvof1() {
    RunStatsDataBean bean = new RunStatsDataBean();
    int sellOrderCount = 0;
    bean.setSellOrderCount(sellOrderCount);
    assertEquals(sellOrderCount, bean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCountWithNegative_LuYJ2() {
    RunStatsDataBean bean = new RunStatsDataBean();
    int sellOrderCount = -1;
    bean.setSellOrderCount(sellOrderCount);
    assertEquals(sellOrderCount, bean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCountWithMaxValue_DQqk3() {
    RunStatsDataBean bean = new RunStatsDataBean();
    int sellOrderCount = Integer.MAX_VALUE;
    bean.setSellOrderCount(sellOrderCount);
    assertEquals(sellOrderCount, bean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCountWithMinValue_YSNE4() {
    RunStatsDataBean bean = new RunStatsDataBean();
    int sellOrderCount = Integer.MIN_VALUE;
    bean.setSellOrderCount(sellOrderCount);
    assertEquals(sellOrderCount, bean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCountWithInvalidValue_xTHs6() {
    RunStatsDataBean bean = new RunStatsDataBean();
    int sellOrderCount = -10;
    bean.setSellOrderCount(sellOrderCount);
    assertEquals(sellOrderCount, bean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_QREc0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    String expected = "\n\tRunStatsData for reset at " + new java.util.Date() + "\n\t\t      tradeUserCount: " + runStatsDataBean.getTradeUserCount() + "\n\t\t        newUserCount: " + runStatsDataBean.getNewUserCount() + "\n\t\t       sumLoginCount: " + runStatsDataBean.getSumLoginCount() + "\n\t\t      sumLogoutCount: " + runStatsDataBean.getSumLogoutCount() + "\n\t\t        holdingCount: " + runStatsDataBean.getHoldingCount() + "\n\t\t          orderCount: " + runStatsDataBean.getOrderCount() + "\n\t\t       buyOrderCount: " + runStatsDataBean.getBuyOrderCount() + "\n\t\t      sellOrderCount: " + runStatsDataBean.getSellOrderCount() + "\n\t\t cancelledOrderCount: " + runStatsDataBean.getCancelledOrderCount() + "\n\t\t      openOrderCount: " + runStatsDataBean.getOpenOrderCount() + "\n\t\t   deletedOrderCount: " + runStatsDataBean.getDeletedOrderCount();
    String actual = runStatsDataBean.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithTradeUserCount_CjQM1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(10);
    String expected = "\n\tRunStatsData for reset at " + new java.util.Date() + "\n\t\t      tradeUserCount: 10\n\t\t        newUserCount: " + runStatsDataBean.getNewUserCount() + "\n\t\t       sumLoginCount: " + runStatsDataBean.getSumLoginCount() + "\n\t\t      sumLogoutCount: " + runStatsDataBean.getSumLogoutCount() + "\n\t\t        holdingCount: " + runStatsDataBean.getHoldingCount() + "\n\t\t          orderCount: " + runStatsDataBean.getOrderCount() + "\n\t\t       buyOrderCount: " + runStatsDataBean.getBuyOrderCount() + "\n\t\t      sellOrderCount: " + runStatsDataBean.getSellOrderCount() + "\n\t\t cancelledOrderCount: " + runStatsDataBean.getCancelledOrderCount() + "\n\t\t      openOrderCount: " + runStatsDataBean.getOpenOrderCount() + "\n\t\t   deletedOrderCount: " + runStatsDataBean.getDeletedOrderCount();
    String actual = runStatsDataBean.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeStockCount_uons0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeStockCount = runStatsDataBean.getTradeStockCount();
    assertEquals(0, tradeStockCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDeletedOrderCount_LQkL0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int deletedOrderCount = runStatsDataBean.getDeletedOrderCount();
    assertEquals(0, deletedOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumLogoutCount_KCbZ0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLogoutCount = runStatsDataBean.getSumLogoutCount();
    assertEquals(0, sumLogoutCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNewUserCount_tYNs0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int newUserCount = 10;
    runStatsDataBean.setNewUserCount(newUserCount);
    assertEquals(newUserCount, runStatsDataBean.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNewUserCountWithZeroValue_jPpH2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int newUserCount = 0;
    runStatsDataBean.setNewUserCount(newUserCount);
    assertEquals(0, runStatsDataBean.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNewUserCountWithLargeValue_tMUF3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int newUserCount = 1000;
    runStatsDataBean.setNewUserCount(newUserCount);
    assertEquals(1000, runStatsDataBean.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderCount_CEht0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(10);
    assertEquals(10, runStatsDataBean.getOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderCountWithNegativeValue_qfOC1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(-10);
    assertEquals(-10, runStatsDataBean.getOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderCountWithZeroValue_TKHM2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(0);
    assertEquals(0, runStatsDataBean.getOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderCountWithLargeValue_mbIA3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(10000);
    assertEquals(10000, runStatsDataBean.getOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumLoginCount_ekQn0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = runStatsDataBean.getSumLoginCount();
    assertEquals(0, sumLoginCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_1_uSHL0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(1);
    assertEquals(1, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_2_gBJe1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(2);
    assertEquals(2, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_3_gvdh2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(3);
    assertEquals(3, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_4_IZUH3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(4);
    assertEquals(4, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_5_HKmH4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(5);
    assertEquals(5, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_6_FUof5() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(6);
    assertEquals(6, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_7_Orwb6() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(7);
    assertEquals(7, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_8_Fqes7() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(8);
    assertEquals(8, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_9_chTU8() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(9);
    assertEquals(9, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_10_MWMX9() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(10);
    assertEquals(10, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_11_zeiS10() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(11);
    assertEquals(11, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_12_VZJw11() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(12);
    assertEquals(12, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_13_GDNq12() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(13);
    assertEquals(13, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_14_Cmpy13() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(14);
    assertEquals(14, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLogoutCount_DJzC0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLogoutCount = 10;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    assertEquals(sumLogoutCount, runStatsDataBean.getSumLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLogoutCountWithZero_vami1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLogoutCount = 0;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    assertEquals(sumLogoutCount, runStatsDataBean.getSumLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLogoutCountWithNegative_pzRZ2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLogoutCount = -1;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    assertEquals(sumLogoutCount, runStatsDataBean.getSumLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLogoutCountWithMaxValue_MwlA3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLogoutCount = Integer.MAX_VALUE;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    assertEquals(sumLogoutCount, runStatsDataBean.getSumLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLogoutCountWithMinValue_TnSx4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLogoutCount = Integer.MIN_VALUE;
    runStatsDataBean.setSumLogoutCount(sumLogoutCount);
    assertEquals(sumLogoutCount, runStatsDataBean.getSumLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingCount_hFDu0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int holdingCount = runStatsDataBean.getHoldingCount();
    assertEquals(0, holdingCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingCountWithPositiveValue_SDWQ1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setHoldingCount(10);
    int holdingCount = runStatsDataBean.getHoldingCount();
    assertEquals(10, holdingCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingCountWithNegativeValue_rIlr2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setHoldingCount(-10);
    int holdingCount = runStatsDataBean.getHoldingCount();
    assertEquals(-10, holdingCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingCountWithZeroValue_bqHv3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setHoldingCount(0);
    int holdingCount = runStatsDataBean.getHoldingCount();
    assertEquals(0, holdingCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingCountWithMaxValue_BMiJ4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setHoldingCount(Integer.MAX_VALUE);
    int holdingCount = runStatsDataBean.getHoldingCount();
    assertEquals(Integer.MAX_VALUE, holdingCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingCountWithMinValue_XSxx5() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setHoldingCount(Integer.MIN_VALUE);
    int holdingCount = runStatsDataBean.getHoldingCount();
    assertEquals(Integer.MIN_VALUE, holdingCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSellOrderCount_xhte0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sellOrderCount = runStatsDataBean.getSellOrderCount();
    assertEquals(0, sellOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSellOrderCountWithPositiveCount_qctI1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(10);
    int sellOrderCount = runStatsDataBean.getSellOrderCount();
    assertEquals(10, sellOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSellOrderCountWithNegativeCount_rzXq2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(-10);
    int sellOrderCount = runStatsDataBean.getSellOrderCount();
    assertEquals(-10, sellOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSellOrderCountWithZeroCount_ZVaF3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(0);
    int sellOrderCount = runStatsDataBean.getSellOrderCount();
    assertEquals(0, sellOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBuyOrderCount_invalidInput_LXmM1_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int buyOrderCount = -1;
    runStatsDataBean.setBuyOrderCount(buyOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBuyOrderCount_invalidInput_negative_xdGU7_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int buyOrderCount = -10;
    runStatsDataBean.setBuyOrderCount(buyOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenOrderCount_invalidInput_bTUT1_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int openOrderCount = -1;
    runStatsDataBean.setOpenOrderCount(openOrderCount);
    assertEquals(-1, runStatsDataBean.getOpenOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_InvalidInput_XKiB1_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = -1;
    runStatsDataBean.setSumLoginCount(sumLoginCount);
    assertEquals(-1, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_NegativeValue_phQb6_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = -10;
    runStatsDataBean.setSumLoginCount(sumLoginCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingCountNegative_Uhvu1_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int holdingCount = -10;
    runStatsDataBean.setHoldingCount(holdingCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNewUserCountWithNegativeValue_WaSi1_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int newUserCount = -10;
    runStatsDataBean.setNewUserCount(newUserCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNewUserCountWithInvalidValue_KmYk4_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int newUserCount = -1;
    runStatsDataBean.setNewUserCount(newUserCount);
    assertEquals(-1, runStatsDataBean.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumLoginCount_withPositiveCount_tGCY1_fid1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = runStatsDataBean.getSumLoginCount();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenOrderCountWithNullCount_kUwQ3_RenG0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOpenOrderCount(0);
    int openOrderCount = runStatsDataBean.getOpenOrderCount();
    assertEquals(0, openOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenOrderCountWithNonIntegerCount_Mygn4_FYRW0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOpenOrderCount(10);
    int openOrderCount = runStatsDataBean.getOpenOrderCount();
    assertEquals(10, openOrderCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeStockCountWithNullValue_FNuQ5_FEyz0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeStockCount(0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_NullInput_QOSE2_LDdL0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = 0;
    runStatsDataBean.setSumLoginCount(sumLoginCount);
    assertEquals(0, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_InvalidType_CpIZ10_QfJe0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int sumLoginCount = 10;
    runStatsDataBean.setSumLoginCount(sumLoginCount);
    assertEquals(10, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_Null_MRCI11_ZSle0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSumLoginCount(0);
    assertEquals(0, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCountWithNull_GDeX5_XKGn0() {
    RunStatsDataBean bean = new RunStatsDataBean();
    bean.setSellOrderCount(0);
    assertEquals(0, bean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeStockCountWithDifferentParameters_Cfkh1_Jzhm0_1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeStockCount = runStatsDataBean.getSellOrderCount();
    tradeStockCount = runStatsDataBean.getSellOrderCount();
    tradeStockCount = runStatsDataBean.getSellOrderCount();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeStockCountWithDifferentParameters_Cfkh1_Jzhm0_3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int tradeStockCount = runStatsDataBean.getSellOrderCount();
    tradeStockCount = runStatsDataBean.getSellOrderCount();
    tradeStockCount = runStatsDataBean.getSellOrderCount();
    assertEquals(0, tradeStockCount);
  }
}