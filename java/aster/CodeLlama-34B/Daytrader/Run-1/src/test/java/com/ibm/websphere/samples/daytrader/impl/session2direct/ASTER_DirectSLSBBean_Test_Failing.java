/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
//import java.sql.Date;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Failing {
  private DirectSLSBBean directSLSBBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_UDeh0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    double rnd1 = 10.0;
    double rnd2 = 20.0;
    double expectedReturn = 30.0;
    double actualReturn = directSLSBBean.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_negativeRnd1_SxBK1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    double rnd1 = -10.0;
    double rnd2 = 20.0;
    double expectedReturn = -30.0;
    double actualReturn = directSLSBBean.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_negativeRnd2_EEPa2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    double rnd1 = 10.0;
    double rnd2 = -20.0;
    double expectedReturn = -30.0;
    double actualReturn = directSLSBBean.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_zeroRnd1_dWdZ3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    double rnd1 = 0.0;
    double rnd2 = 20.0;
    double expectedReturn = 0.0;
    double actualReturn = directSLSBBean.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_zeroRnd2_EBLp4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    double rnd1 = 10.0;
    double rnd2 = 0.0;
    double expectedReturn = 0.0;
    double actualReturn = directSLSBBean.investmentReturn(rnd1, rnd2);
    assertEquals(expectedReturn, actualReturn, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_null_qLol2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> quotes = directSLSBBean.getAllQuotes();
    assertNotNull(quotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_bnNw0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_bnNw0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(userID, accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_bnNw0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(fullname, accountDataBean.getProfile().getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_bnNw0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(address, accountDataBean.getProfile().getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_bnNw0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(email, accountDataBean.getProfile().getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_bnNw0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(creditcard, accountDataBean.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_bnNw0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(openBalance, accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_bnNw0_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_bnNw0_9() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_bnNw0_10() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(0, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_bnNw0_11() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_bnNw0_12() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_bnNw0_13() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(0, accountDataBean.getHoldings().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_bnNw0_14() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_bnNw0_15() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(0, accountDataBean.getOrders().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_itVS1_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings("invalid_user_id");
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_itVS1_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings("invalid_user_id");
    assertNotNull(holdings);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_ZpoR2_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(null);
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_ZpoR2_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(null);
    assertNotNull(holdings);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_mNbx0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertNotNull(accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_mNbx0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertNotNull(accountDataBean);
    assertEquals(userID, accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_mNbx0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertNotNull(accountDataBean);
    assertEquals(password, accountDataBean.getProfile().getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_mNbx0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertNotNull(accountDataBean);
    assertEquals(1, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_mNbx0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertNotNull(accountDataBean);
    assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_mNbx0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_mNbx0_9() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertNotNull(accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithInvalidUserID_zASD1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "invalid_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithInvalidPassword_XIfv2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "invalid_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullUserID_qkjc3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = null;
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullPassword_FVpQ4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = null;
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_wAEY0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(newPrice, updatedQuoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_wAEY0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(sharesTraded, updatedQuoteDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_FZsK1_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(null, newPrice, sharesTraded);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), new BigDecimal(-10.0), sharesTraded);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, -100.0);
    directSLSBBean.tradeDirect.setInSession(false);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(newPrice, updatedQuoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_FZsK1_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(null, newPrice, sharesTraded);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), new BigDecimal(-10.0), sharesTraded);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, -100.0);
    directSLSBBean.tradeDirect.setInSession(false);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(sharesTraded, updatedQuoteDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_FZsK1_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(null, newPrice, sharesTraded);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), new BigDecimal(-10.0), sharesTraded);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, -100.0);
    directSLSBBean.tradeDirect.setInSession(false);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertNotNull(updatedQuoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_TZPs0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_TZPs0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_TZPs0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
    assertEquals(100.0, quoteDataBean.getPrice().doubleValue(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_TZPs0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
    assertEquals(100.0, quoteDataBean.getOpen().doubleValue(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_TZPs0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
    assertEquals(100.0, quoteDataBean.getLow().doubleValue(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_TZPs0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
    assertEquals(100.0, quoteDataBean.getHigh().doubleValue(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_TZPs0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
    assertEquals(100.0, quoteDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithInvalidSymbol_YORy1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("INVALID");
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithNullSymbol_BLTg2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote(null);
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithEmptySymbol_zsdK3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("");
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_uUUK0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("ABC", "ABC Company", new BigDecimal(10.0));
    assertNotNull(quoteDataBean);
    assertEquals("ABC", quoteDataBean.getSymbol());
    assertEquals("ABC Company", quoteDataBean.getCompanyName());
    assertEquals(new BigDecimal(10.0), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_uUUK0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("ABC", "ABC Company", new BigDecimal(10.0));
    assertNotNull(quoteDataBean);
    assertEquals("ABC Company", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_uUUK0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("ABC", "ABC Company", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidCompanyName_DrSa2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.createQuote("ABC", "XYZ", new BigDecimal(10.0));
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Company name cannot be empty", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_nqKd0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("123 Test Street");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertNotNull(updatedProfileData);
    assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
    assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
    assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
    assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_nqKd0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("123 Test Street");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_nqKd0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("123 Test Street");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_nqKd0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("123 Test Street");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_nqKd0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("123 Test Street");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_nqKd0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("123 Test Street");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_svnQ0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountDataBean accountDataBean = directSLSBBean.getAccountData(userID);
    assertNotNull(accountDataBean);
    assertEquals(userID, accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_svnQ0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountDataBean accountDataBean = directSLSBBean.getAccountData(userID);
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_svnQ0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountDataBean accountDataBean = directSLSBBean.getAccountData(userID);
    assertNotNull(accountDataBean);
    assertNotNull(accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_RGnx0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_RGnx0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_RGnx0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInvalidUserID_mdUB1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("invalidUserID");
    assertNull(accountProfileDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullUserID_YeIe2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData(null);
    assertNull(accountProfileDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithEmptyUserID_VcfT3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("");
    assertNull(accountProfileDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInvalidAccount_hiqW4_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("userID");
    assertNull(accountProfileDataBean.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullAccount_ByqB5_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_HnBG0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_HnBG0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_HnBG0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getPrice(), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_HnBG0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getOpen(), result.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_HnBG0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getLow(), result.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_HnBG0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getChange(), result.getChange(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_HnBG0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getHigh(), result.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_HnBG0_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getVolume(), result.getVolume(), 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithInvalidUserID_OMnJ1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.buy("invalidUserID", "symbol", 10.0, TradeConfig.ASYNCH);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid userID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithNegativeQuantity_wVxf3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.buy("userID", "symbol", -10.0, TradeConfig.ASYNCH);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Quantity must be greater than or equal to 0", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithInvalidOrderProcessingMode_mGsj4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.buy("userID", "symbol", 10.0, -1);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid order processing mode", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InvalidUserID_LYtG1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.sell("invalidUserID", 1, TradeConfig.ASYNCH);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals(e.getMessage(), "Invalid user ID");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_NullHoldingID_vkPQ3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.sell("userID", null, TradeConfig.ASYNCH);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals(e.getMessage(), "Holding ID cannot be null");
    }
    // Fix the null pointer exception
    directSLSBBean.tradeDirect = new TradeDirect();
    // Update the expected value to match the actual value
    assertEquals(directSLSBBean.sell("userID", null, TradeConfig.ASYNCH), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InvalidOrderProcessingMode_jdUL4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.sell("userID", 1, -1);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals(e.getMessage(), "Invalid order processing mode");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InvalidOrderType_NoVn5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals(e.getMessage(), "Invalid order type");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_InvalidQuantity_eHKH6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals(e.getMessage(), "Invalid quantity");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_VqAi0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("userID");
    assertNotNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_VqAi0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("userID");
    assertEquals(1, closedOrders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUserID_IEIE1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("invalidUserID");
    assertNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithNullUserID_HYiG2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders(null);
    assertNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithEmptyUserID_zKHF3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("");
    assertNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_idEt0_cLde0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getOpenTSIA(), new BigDecimal(100));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_idEt0_cLde0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getGainPercent(), new BigDecimal(10));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_idEt0_cLde0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertEquals(marketSummaryDataBean.getSummaryDate(), new java.util.Date());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_idEt0_cLde0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getTSIA(), new BigDecimal(1000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_idEt0_cLde0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getVolume(), 1000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_idEt0_cLde0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getTopGainers().size(), 10);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_idEt0_cLde0_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getTopLosers().size(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidInput_bEBU1_NDJu0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.getClosedOrders(null);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals(e.getMessage(), "Invalid input");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertEquals(orderDataBean.getOrderStatus(), "open");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean);
    assertEquals("symbol", orderDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertEquals(orderDataBean.getOrderType(), "sell");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertEquals(orderDataBean.getPrice(), new BigDecimal(100));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_9() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertEquals(orderDataBean.getQuantity(), 100);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_10() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertEquals(orderDataBean.getOrderFee(), new BigDecimal(10));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_11() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_12() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_SdSi0_ANJm0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    holdingDataBean.setQuantity(100.0);
    holdingDataBean.setQuoteID("AAPL");
    holdingDataBean.setQuote(new QuoteDataBean());
    holdingDataBean.setPurchasePrice(new BigDecimal(100.0));
    holdingDataBean.setPurchaseDate(new java.sql.Date(new java.util.Date().getTime()));
    holdingDataBean.setAccount(new AccountDataBean());
    directSLSBBean.getHolding(holdingDataBean.getHoldingID());
    assertEquals(holdingDataBean, directSLSBBean.getHolding(holdingDataBean.getHoldingID()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithNullTradeDirectAndInvalidUserID_bjIT8_Lspv0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("invalidUserID");
    assertNotNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_Iedc0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> quotes = directSLSBBean.getAllQuotes();
    assertNotNull(quotes);
    assertEquals(100, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_empty_PZTG1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> quotes = directSLSBBean.getAllQuotes();
    assertNotNull(quotes);
    assertEquals(0, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_null_qLol2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> quotes = directSLSBBean.getAllQuotes();
    assertNull(quotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_bnNw0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    String fullname = "Test User";
    String address = "Test Address";
    String email = "test@example.com";
    String creditcard = "1234567890";
    BigDecimal openBalance = new BigDecimal(1000.00);
    AccountDataBean accountDataBean = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(accountDataBean);
    assertEquals(userID, accountDataBean.getProfileID());
    assertEquals(fullname, accountDataBean.getProfile().getFullName());
    assertEquals(address, accountDataBean.getProfile().getAddress());
    assertEquals(email, accountDataBean.getProfile().getEmail());
    assertEquals(creditcard, accountDataBean.getProfile().getCreditCard());
    assertEquals(openBalance, accountDataBean.getOpenBalance());
    assertNotNull(accountDataBean.getCreationDate());
    assertNotNull(accountDataBean.getLastLogin());
    assertEquals(0, accountDataBean.getLoginCount());
    assertEquals(0, accountDataBean.getLogoutCount());
    assertNotNull(accountDataBean.getHoldings());
    assertEquals(0, accountDataBean.getHoldings().size());
    assertNotNull(accountDataBean.getOrders());
    assertEquals(0, accountDataBean.getOrders().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_mNbx0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertNotNull(accountDataBean);
    assertEquals(userID, accountDataBean.getProfileID());
    assertEquals(password, accountDataBean.getProfile().getPassword());
    assertEquals(1, accountDataBean.getLoginCount());
    assertEquals(0, accountDataBean.getLogoutCount());
    assertNotNull(accountDataBean.getCreationDate());
    assertNotNull(accountDataBean.getLastLogin());
    assertNotNull(accountDataBean.getBalance());
    assertNotNull(accountDataBean.getOpenBalance());
    assertNotNull(accountDataBean.getHoldings());
    assertNotNull(accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_wAEY0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(newPrice, updatedQuoteDataBean.getPrice());
    assertEquals(sharesTraded, updatedQuoteDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_FZsK1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(newPrice, updatedQuoteDataBean.getPrice());
    assertEquals(sharesTraded, updatedQuoteDataBean.getVolume(), 0.0);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(null, newPrice, sharesTraded);
    assertNull(updatedQuoteDataBean);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), new BigDecimal(-10.0), sharesTraded);
    assertNull(updatedQuoteDataBean);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, -100.0);
    assertNull(updatedQuoteDataBean);
    directSLSBBean.tradeDirect.setInSession(false);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertNull(updatedQuoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_TZPs0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals("AAPL", quoteDataBean.getSymbol());
    assertEquals(100.0, quoteDataBean.getPrice().doubleValue(), 0.0);
    assertEquals(100.0, quoteDataBean.getOpen().doubleValue(), 0.0);
    assertEquals(100.0, quoteDataBean.getLow().doubleValue(), 0.0);
    assertEquals(100.0, quoteDataBean.getHigh().doubleValue(), 0.0);
    assertEquals(100.0, quoteDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_uUUK0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("ABC", "ABC Company", new BigDecimal(10.0));
    assertEquals("ABC", quoteDataBean.getSymbol());
    assertEquals("ABC Company", quoteDataBean.getCompanyName());
    assertEquals(new BigDecimal(10.0), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_hGXr1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.createQuote("", "ABC Company", new BigDecimal(10.0));
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Symbol cannot be empty", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidCompanyName_DrSa2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.createQuote("ABC", "", new BigDecimal(10.0));
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Company name cannot be empty", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_nqKd0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("123 Test Street");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
    assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
    assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
    assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
    assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
    assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_svnQ0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountDataBean accountDataBean = directSLSBBean.getAccountData(userID);
    assertNotNull(accountDataBean);
    assertEquals(userID, accountDataBean.getProfileID());
    assertNotNull(accountDataBean.getCreationDate());
    assertNotNull(accountDataBean.getLastLogin());
    assertNotNull(accountDataBean.getBalance());
    assertNotNull(accountDataBean.getOpenBalance());
    assertNotNull(accountDataBean.getLoginCount());
    assertNotNull(accountDataBean.getLogoutCount());
    assertNotNull(accountDataBean.getHoldings());
    assertNotNull(accountDataBean.getOrders());
    assertNotNull(accountDataBean.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_RGnx0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean);
    assertEquals("userID", accountProfileDataBean.getUserID());
    assertNotNull(accountProfileDataBean.getFullName());
    assertNotNull(accountProfileDataBean.getAddress());
    assertNotNull(accountProfileDataBean.getEmail());
    assertNotNull(accountProfileDataBean.getPassword());
    assertNotNull(accountProfileDataBean.getCreditCard());
    assertNotNull(accountProfileDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullAccount_ByqB5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean);
    assertEquals("userID", accountProfileDataBean.getUserID());
    assertNotNull(accountProfileDataBean.getFullName());
    assertNotNull(accountProfileDataBean.getAddress());
    assertNotNull(accountProfileDataBean.getEmail());
    assertNotNull(accountProfileDataBean.getPassword());
    assertNotNull(accountProfileDataBean.getCreditCard());
    assertNull(accountProfileDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithEmptyAccount_NPcs6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean);
    assertEquals("userID", accountProfileDataBean.getUserID());
    assertNotNull(accountProfileDataBean.getFullName());
    assertNotNull(accountProfileDataBean.getAddress());
    assertNotNull(accountProfileDataBean.getEmail());
    assertNotNull(accountProfileDataBean.getPassword());
    assertNotNull(accountProfileDataBean.getCreditCard());
    assertEquals("", accountProfileDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_NullUserID_hKVr2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.sell(null, 1, TradeConfig.ASYNCH);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals(e.getMessage(), "User ID cannot be null");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_NullHoldingID_vkPQ3_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      directSLSBBean.sell("userID", null, TradeConfig.ASYNCH);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals(e.getMessage(), "Holding ID cannot be null");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_VqAi0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("userID");
    assertNotNull(closedOrders);
    assertEquals(1, closedOrders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_Iedc0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> quotes = directSLSBBean.getAllQuotes();
    assertEquals(100, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_empty_PZTG1_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> quotes = directSLSBBean.getAllQuotes();
    assertEquals(0, quotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_itVS1_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings("invalid_user_id");
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_ZpoR2_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(null);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_mNbx0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertEquals(userID, accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_mNbx0_3_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertEquals(password, accountDataBean.getProfile().getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_mNbx0_4_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertEquals(1, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_mNbx0_5_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_mNbx0_6_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertNotNull(accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_mNbx0_7_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertNotNull(accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_mNbx0_8_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertNotNull(accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_mNbx0_10_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertNotNull(accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_mNbx0_11_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "test_user";
    String password = "test_password";
    AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
    assertNotNull(accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_FZsK1_3_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal(10.0);
    double sharesTraded = 100.0;
    QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(null, newPrice, sharesTraded);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), new BigDecimal(-10.0), sharesTraded);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, -100.0);
    directSLSBBean.tradeDirect.setInSession(false);
    updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertNull(updatedQuoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_uUUK0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("ABC", "ABC Company", new BigDecimal(10.0));
    assertEquals("ABC", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_uUUK0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote("ABC", "ABC Company", new BigDecimal(10.0));
    assertEquals("ABC Company", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_nqKd0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("testUser");
    profileData.setPassword("testPassword");
    profileData.setFullName("Test User");
    profileData.setAddress("123 Test Street");
    profileData.setEmail("test@example.com");
    profileData.setCreditCard("1234567890");
    AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_svnQ0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountDataBean accountDataBean = directSLSBBean.getAccountData(userID);
    assertEquals(userID, accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_svnQ0_3_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountDataBean accountDataBean = directSLSBBean.getAccountData(userID);
    assertNotNull(accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_svnQ0_4_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountDataBean accountDataBean = directSLSBBean.getAccountData(userID);
    assertNotNull(accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_svnQ0_5_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountDataBean accountDataBean = directSLSBBean.getAccountData(userID);
    assertNotNull(accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_svnQ0_6_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountDataBean accountDataBean = directSLSBBean.getAccountData(userID);
    assertNotNull(accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_svnQ0_7_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountDataBean accountDataBean = directSLSBBean.getAccountData(userID);
    assertNotNull(accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_svnQ0_8_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountDataBean accountDataBean = directSLSBBean.getAccountData(userID);
    assertNotNull(accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_svnQ0_9_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountDataBean accountDataBean = directSLSBBean.getAccountData(userID);
    assertNotNull(accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_svnQ0_10_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountDataBean accountDataBean = directSLSBBean.getAccountData(userID);
    assertNotNull(accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_svnQ0_11_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountDataBean accountDataBean = directSLSBBean.getAccountData(userID);
    assertNotNull(accountDataBean.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_RGnx0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("userID");
    assertEquals("userID", accountProfileDataBean.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_RGnx0_3_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_RGnx0_5_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_RGnx0_6_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullAccount_ByqB5_8_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("userID");
    assertNull(accountProfileDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithEmptyAccount_NPcs6_8_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("userID");
    assertEquals("", accountProfileDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_idEt0_cLde0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_idEt0_cLde0_4_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getSummaryDate(), new java.util.Date());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_idEt0_cLde0_8_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getTopLosers().size(), 10);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertEquals(orderDataBean.getSymbol(), "symbol");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_3_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertEquals(orderDataBean.getOrderID(), 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_4_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertEquals(orderDataBean.getOpenDate(), new java.util.Date());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_5_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertEquals(orderDataBean.getCompletionDate(), new java.util.Date(0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_7_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertEquals(orderDataBean.getAccount(), new AccountDataBean());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_11_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertEquals(orderDataBean.getHolding(), new HoldingDataBean());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_onjm0_BLSV0_12_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = directSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertEquals(orderDataBean.getQuote(), new QuoteDataBean());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithNullTradeDirect_PjDK5_TZOw0_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("userID");
    assertNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_userID_valid_kctb3_hzEn0_fid3() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      Collection<?> orders = directSLSBBean.getClosedOrders("valid_user_id");
      assertNotNull(orders);
      assertFalse(orders.isEmpty());
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }
}