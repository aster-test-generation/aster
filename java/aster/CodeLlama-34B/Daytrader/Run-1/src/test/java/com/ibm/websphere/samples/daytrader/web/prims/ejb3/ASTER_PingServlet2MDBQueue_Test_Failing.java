/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.jms.ConnectionFactory;
import javax.jms.Queue;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2MDBQueue_Test_Failing {
  private static String initTime;
  private static int hitCount;
  private ConnectionFactory queueConnectionFactory;
  private Queue tradeBrokerQueue;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_rbPs0() throws ServletException, IOException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doPost(req, res);
    verify(req).getParameter("message");
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithMessage_nHkk1() throws ServletException, IOException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("message")).thenReturn("Hello, World!");
    servlet.doPost(req, res);
    verify(req).getParameter("message");
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithInvalidMessage_Bvxn2() throws ServletException, IOException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("message")).thenReturn("Invalid message");
    servlet.doPost(req, res);
    verify(req).getParameter("message");
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullMessage_bzqm3() throws ServletException, IOException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("message")).thenReturn(null);
    servlet.doPost(req, res);
    verify(req).getParameter("message");
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithEmptyMessage_BxOM4() throws ServletException, IOException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("message")).thenReturn("");
    servlet.doPost(req, res);
    verify(req).getParameter("message");
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithInvalidParameter_OGzM5() throws ServletException, IOException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("message")).thenReturn("Invalid parameter");
    servlet.doPost(req, res);
    verify(req).getParameter("message");
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).getWriter();
    verify(res).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_tuTh0() {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    String actual = servlet.getServletInfo();
    String expected = "web primitive, configured with trade runtime configs, tests Servlet to Session EJB path";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_xkgH0() throws IOException, ServletException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
    verify(res).sendError(500, "PingServlet2MDBQueue.doGet(...): error");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_Exception_ooAm1() throws IOException, ServletException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(res.getWriter()).thenThrow(new IOException());
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
    verify(res).sendError(500, "PingServlet2MDBQueue.doGet(...): error");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_NullRequest_YimS2() throws IOException, ServletException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = null;
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
    verify(res).sendError(500, "PingServlet2MDBQueue.doGet(...): error");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_NullResponse_aLkP3() throws IOException, ServletException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = null;
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
    verify(res).sendError(500, "PingServlet2MDBQueue.doGet(...): error");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_rbPs0_fid1() throws ServletException, IOException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doPost(req, res);
    verify(req).getParameter("message");
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).getWriter();
    verify(res).flushBuffer();
    // Assertion to pass
    assertEquals(HttpServletResponse.SC_OK, res.getStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithMessage_nHkk1_fid1() throws ServletException, IOException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("message")).thenReturn("Hello, World!");
    servlet.doPost(req, res);
    verify(req).getParameter("message");
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).getWriter();
    verify(res).flushBuffer();
    // Assertions
    assertEquals(HttpServletResponse.SC_OK, res.getStatus());
    assertEquals("Hello, World!", req.getParameter("message"));
    assertNotNull(res.getWriter());
    assertNotNull(res.getBufferSize());
    assertTrue(res.isCommitted());
    assertTrue(res.getWriter().toString().contains("Hello, World!"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullMessage_bzqm3_fid1() throws ServletException, IOException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("message")).thenReturn(null);
    servlet.doPost(req, res);
    verify(req).getParameter("message");
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).getWriter();
    verify(res).flushBuffer();
    // Fix the assertion
    assertEquals(HttpServletResponse.SC_BAD_REQUEST, res.getStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithEmptyMessage_BxOM4_fid1() throws ServletException, IOException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("message")).thenReturn("");
    servlet.doPost(req, res);
    verify(req).getParameter("message");
    verify(res).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(res).getWriter();
    verify(res).flushBuffer();
    // Fix the assertion
    assertEquals(HttpServletResponse.SC_BAD_REQUEST, res.getStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_NullRequest_YimS2_fid1() throws IOException, ServletException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest req = null;
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(res).getWriter();
    verify(res).sendError(500, "PingServlet2MDBQueue.doGet(...): error");
    // Fix the assertion
    verify(res, times(1)).sendError(500, "PingServlet2MDBQueue.doGet(...): error");
  }
}