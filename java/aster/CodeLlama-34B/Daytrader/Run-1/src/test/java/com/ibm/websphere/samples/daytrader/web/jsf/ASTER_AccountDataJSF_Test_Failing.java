/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.faces.context.ExternalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AccountDataJSF_Test_Failing {
  private OrderData[] closedOrders;
  private ExternalContext context;
  private TradeServices tradeAction;
  private AccountDataJSF accountDataJSF;
  @Mock
  private TradeServices tradeServices;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCount_kQgZ0() {
    int loginCount = 5;
    accountDataJSF.setLoginCount(loginCount);
    assertEquals(loginCount, accountDataJSF.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCount_negative_YIig1() {
    int loginCount = -1;
    accountDataJSF.setLoginCount(loginCount);
    assertEquals(0, accountDataJSF.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCount_zero_uFje2() {
    int loginCount = 0;
    accountDataJSF.setLoginCount(loginCount);
    assertEquals(0, accountDataJSF.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCount_max_qbwd3() {
    int loginCount = Integer.MAX_VALUE;
    accountDataJSF.setLoginCount(loginCount);
    assertEquals(loginCount, accountDataJSF.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCount_min_wPpB4() {
    int loginCount = Integer.MIN_VALUE;
    accountDataJSF.setLoginCount(loginCount);
    assertEquals(0, accountDataJSF.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCount_invalid_max_hcKm7() {
    int loginCount = Integer.MAX_VALUE + 1;
    accountDataJSF.setLoginCount(loginCount);
    assertEquals(0, accountDataJSF.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCount_invalid_min_wZkb8() {
    int loginCount = Integer.MIN_VALUE - 1;
    accountDataJSF.setLoginCount(loginCount);
    assertEquals(0, accountDataJSF.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainHTMLWithNullTradeServices_VfQU7() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    String gainHTML = accountDataJSF.getGainHTML();
    assertNull(gainHTML);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainHTMLWithNullGainAndNullTradeServices_vmFX10() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    accountDataJSF.setGain(null);
    String gainHTML = accountDataJSF.getGainHTML();
    assertNull(gainHTML);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSessionCreationDateWithNullTradeServices_TlgZ1() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    Date sessionCreationDate = accountDataJSF.getSessionCreationDate();
    assertNull(sessionCreationDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCurrentTimeWithNullTradeServices_vnbT1() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    Date currentTime = accountDataJSF.getCurrentTime();
    assertNotNull(currentTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentHTML_oebr1() {
    String expected = "10.00%";
    String actual = accountDataJSF.getGainPercentHTML();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentHTMLWithNegativeGain_lVVO2() {
    String expected = "-10.00%";
    String actual = accountDataJSF.getGainPercentHTML();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentHTMLWithZeroGain_Raeo3() {
    String expected = "0.00%";
    String actual = accountDataJSF.getGainPercentHTML();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentHTMLWithNullGain_iuQA4() {
    String expected = "null";
    String actual = accountDataJSF.getGainPercentHTML();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumOfCashHoldingsWithNullTradeServices_EJuG2() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    BigDecimal sumOfCashHoldings = accountData.getSumOfCashHoldings();
    assertEquals(new BigDecimal(0), sumOfCashHoldings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsTotalWithInvalidHoldingsAndNullTradeServices_VVDM7() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    BigDecimal holdingsTotal = accountDataJSF.getHoldingsTotal();
    assertNull(holdingsTotal);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainHTMLWithNullTradeServices_VfQU7_fid1() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    String gainHTML = accountDataJSF.getGainHTML();
    assertEquals("Gain HTML", gainHTML);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainHTMLWithNullGainAndNullTradeServices_vmFX10_fid1() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    accountDataJSF.setGain(null);
    String gainHTML = accountDataJSF.getGainHTML();
    assertEquals("Gain HTML", gainHTML);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCurrentTimeWithNullTradeServices_vnbT1_fid1() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    Date currentTime = accountDataJSF.getCurrentTime();
    assertNull(currentTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountIDWithNull_iSUv1() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    Integer accountID = accountDataJSF.getAccountID();
    assertNull(accountID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLoginWithNull_UYuP1() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    Date lastLogin = accountDataJSF.getLastLogin();
    assertNull(lastLogin);
  }
}