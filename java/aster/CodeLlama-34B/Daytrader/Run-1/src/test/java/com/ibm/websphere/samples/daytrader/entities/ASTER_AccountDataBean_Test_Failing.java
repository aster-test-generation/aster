/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_idJP0_8() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_idJP0_9() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginSuccess_EClQ0_1() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    account.login("password");
    assertEquals(1, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginSuccess_EClQ0_2() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    account.login("password");
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailure_JLCE1_1() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    account.login("wrong_password");
    assertEquals(1, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailure_JLCE1_2() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    account.login("wrong_password");
    assertNotNull(account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullProfile_zDtS2_1() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), null);
    account.login("password");
    assertEquals(1, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullProfile_zDtS2_2() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), null);
    account.login("password");
    assertNotNull(account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullPassword_oxxX3_1() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    account.login(null);
    assertEquals(1, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullPassword_oxxX3_2() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    account.login(null);
    assertNotNull(account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_AccountDataBean_hiNa0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    accountDataBean.print();
    assertEquals("	Account Data for account: null		   loginCount:1		  logoutCount:2		    lastLogin:Sun Jul 14 09:53:14 UTC 2024		 creationDate:Sun Jul 14 09:53:14 UTC 2024		      balance:100		  openBalance:50		    profileID:profileID", accountDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_AccountDataBean_Empty_wVeg2() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, new Date(), new Date(), new BigDecimal(0), new BigDecimal(0), "");
    accountDataBean.print();
    assertEquals("	Account Data for account: null		   loginCount:0		  logoutCount:0		    lastLogin:Sun Jul 14 09:53:14 UTC 2024		 creationDate:Sun Jul 14 09:53:14 UTC 2024		      balance:0		  openBalance:0		    profileID:", accountDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_RdDK0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    String html = accountDataBean.toHTML();
    assertEquals("<BR>Account Data for account: <B>1</B><LI>   loginCount:2</LI><LI>  logoutCount:3</LI><LI>    lastLogin:Sun Jul 14 09:53:14 UTC 2024</LI><LI> creationDate:Sun Jul 14 09:53:14 UTC 2024</LI><LI>      balance:100</LI><LI>  openBalance:50</LI><LI>    profileID:profileID</LI>", html);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_pKxC0_1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Collection<HoldingDataBean> holdings = accountDataBean.getHoldings();
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_pKxC0_2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Collection<HoldingDataBean> holdings = accountDataBean.getHoldings();
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_CEQR0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    assertEquals(2, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCountWithZeroLoginCount_fhvL1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    assertEquals(0, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCountWithNegativeLoginCount_YutD2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    assertEquals(-1, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithValidLoginCountAndLogoutCountAndDifferentLastLoginDate_zYkJ1_2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.logout();
    assertNotEquals(accountDataBean.getLastLogin(), accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNegativeValues_lizU3() {
    AccountDataBean accountDataBean = new AccountDataBean(-1, -2, -3, new Date(-1), new Date(-1), new BigDecimal(-100), new BigDecimal(-50), "");
    String expected = "\n\tAccount Data for account: -1\n\t\t   loginCount:-2\n\t\t  logoutCount:-3\n\t\t    lastLogin:1969-12-31 23:59:59\n\t\t creationDate:1969-12-31 23:59:59\n\t\t      balance:-100\n\t\t  openBalance:-50\n\t\t    profileID:";
    String actual = accountDataBean.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileWithDifferentPassword_CjUW5() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "not equal", "fullName", "address", "email", "creditCard");
    accountDataBean.setProfile(accountProfileDataBean);
    assertNotEquals(accountProfileDataBean.getPassword(), accountDataBean.getProfile().getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_NonEmpty_KRXg1_1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    Collection<OrderDataBean> orders = accountDataBean.getOrders();
    assertFalse(orders.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_NonEmpty_KRXg1_2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    Collection<OrderDataBean> orders = accountDataBean.getOrders();
    assertEquals(1, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_rfkx0_1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertNotNull(profile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_rfkx0_2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("profileID", profile.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_rfkx0_3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("email@example.com", profile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_rfkx0_4() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("password", profile.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_rfkx0_5() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("fullName", profile.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_rfkx0_6() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("address", profile.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_rfkx0_7() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("creditCard", profile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithEmptyProfile_ktIq2_1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertNotNull(profile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithEmptyProfile_ktIq2_2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("", profile.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithEmptyProfile_ktIq2_3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("", profile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithEmptyProfile_ktIq2_4() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("", profile.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithEmptyProfile_ktIq2_5() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("", profile.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithEmptyProfile_ktIq2_6() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("", profile.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithEmptyProfile_ktIq2_7() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertEquals("", profile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_AccountDataBean_Null_NNYw1_czOX0() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, null, null, null, null, null);
    accountDataBean.print();
    assertEquals("	Account Data for account: null		   loginCount:0		  logoutCount:0		    lastLogin:null		 creationDate:null		      balance:null		  openBalance:null		    profileID:null", accountDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailure_JLCE1_1_fid1() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    account.login("wrong_password");
    assertEquals(0, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailure_JLCE1_2_fid1() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    account.login("wrong_password");
    assertNull(account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullProfile_zDtS2_1_fid1() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), null);
    account.login("password");
    assertEquals(0, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullProfile_zDtS2_2_fid1() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), null);
    account.login("password");
    assertNull(account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullPassword_oxxX3_1_fid1() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    account.login(null);
    assertEquals(0, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullPassword_oxxX3_2_fid1() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    account.login(null);
    assertNull(account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_withAccountID_qvGe0_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    int expectedHashCode = 1;
    int actualHashCode = accountDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_AccountDataBean_hiNa0_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    accountDataBean.print();
    assertEquals("AccountDataBean{accountID=1, loginCount=2, logoutCount=0, lastLogin=null, creationDate=null, balance=100, openBalance=50, profileID='profileID'}", accountDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_AccountDataBean_Empty_wVeg2_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, new Date(), new Date(), new BigDecimal(0), new BigDecimal(0), "");
    accountDataBean.print();
    assertEquals("AccountDataBean{accountID=0, loginCount=0, logoutCount=0, lastLogin=null, creationDate=null, balance=0, openBalance=0, profileID=''}", accountDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_RdDK0_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    String html = accountDataBean.toHTML();
    assertEquals("<BR>Account Data for account: <B>1</B><LI>   loginCount:2</LI><LI>  logoutCount:3</LI><LI>    lastLogin:2023-02-28 12:00:00</LI><LI> creationDate:2023-02-28 12:00:00</LI><LI>      balance:100</LI><LI>  openBalance:50</LI><LI>    profileID:profileID</LI>", html);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_CEQR0_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    assertEquals(2, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCountWithZeroLoginCount_fhvL1_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    assertEquals(0, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCountWithNegativeLoginCount_YutD2_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, -1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    assertEquals(-1, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObject_UKwi1_fid1() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    AccountDataBean accountDataBean2 = new AccountDataBean(2, 3, new Date(), new Date(), new BigDecimal(200), new BigDecimal(100), "profileID");
    assertFalse(accountDataBean1.equals(accountDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullBalance_RaAs6_fid1() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 2, new Date(), new Date(), null, new BigDecimal(50), "profileID");
    AccountDataBean accountDataBean2 = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    assertFalse(accountDataBean1.equals(accountDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithValidLoginCountAndLogoutCountAndDifferentBalance_qXac2_2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.logout();
    assertNotEquals(accountDataBean.getBalance(), accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_qEta0_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    String expected = "\n\tAccount Data for account: 1\n\t\t   loginCount:2\n\t\t  logoutCount:3\n\t\t    lastLogin:2023-02-28 12:00:00\n\t\t creationDate:2023-02-28 12:00:00\n\t\t      balance:100\n\t\t  openBalance:50\n\t\t    profileID:profileID";
    String actual = accountDataBean.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithZeroValues_RPys2_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, 0, new Date(0), new Date(0), new BigDecimal(0), new BigDecimal(0), "");
    String expected = "\n\tAccount Data for account: 0\n\t\t   loginCount:0\n\t\t  logoutCount:0\n\t\t    lastLogin:1970-01-01 00:00:00\n\t\t creationDate:1970-01-01 00:00:00\n\t\t      balance:0\n\t\t  openBalance:0\n\t\t    profileID:";
    String actual = accountDataBean.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateWithInvalidDate_FlWg2_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    Date invalidDate = new Date(0);
    accountDataBean.setCreationDate(invalidDate);
    assertNotEquals(invalidDate, accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateWithDifferentDate_Cmkn4_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    Date differentDate = new Date(2000000000);
    accountDataBean.setCreationDate(differentDate);
    assertNotEquals(differentDate, accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileWithDifferentProfile_fhOD2_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountDataBean.setProfile(accountProfileDataBean);
    assertNotEquals(accountProfileDataBean, accountDataBean.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileWithDifferentUserID_WxEm4_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountDataBean.setProfile(accountProfileDataBean);
    assertNotEquals(accountProfileDataBean.getUserID(), accountDataBean.getProfile().getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileWithDifferentPassword_CjUW5_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountDataBean.setProfile(accountProfileDataBean);
    assertNotEquals(accountProfileDataBean.getPassword(), accountDataBean.getProfile().getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileWithDifferentFullName_iyqE6_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountDataBean.setProfile(accountProfileDataBean);
    assertNotEquals(accountProfileDataBean.getFullName(), accountDataBean.getProfile().getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_Empty_UAfM0_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean();
    Collection<OrderDataBean> orders = accountDataBean.getOrders();
    assertTrue(orders.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLoginWithDifferentDate_IEIC2_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Date lastLogin = accountDataBean.getLastLogin();
    assertNotEquals(new Date(), lastLogin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithNullAccountDataBean_wCZD4_fid1() {
    AccountDataBean accountDataBean = null;
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertNull(profile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceWithNull_RgaU1_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setBalance(null);
    assertEquals(new BigDecimal(100), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceWithZero_tdjT2_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setBalance(new BigDecimal(0));
    assertEquals(new BigDecimal(100), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceWithNegative_IHgk3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setBalance(new BigDecimal(-100));
    assertEquals(new BigDecimal(100), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCountWithNull_kGtm5_qAza0_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLoginCount(0);
    assertNull(accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_NullLoginCount_yDxj9_IBoT0_fid1() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    accountDataBean.setLoginCount(0);
    assertNull(accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_NullLogoutCount_AGmO10_mitq0_fid1() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    accountDataBean.setLogoutCount(0);
    assertNull(accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_AccountDataBean_Null_NNYw1_czOX0_fid1() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, null, null, null, null, null);
    accountDataBean.print();
    assertEquals("AccountDataBean{accountID=0, loginCount=0, logoutCount=null, lastLogin=null, creationDate=null, balance=null, openBalance=null, profileID=null}", accountDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullAccountID_FyVo5_lYfq0_fid1() {
    AccountDataBean accountDataBean1 = new AccountDataBean(0, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    AccountDataBean accountDataBean2 = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    assertFalse(accountDataBean1.equals(accountDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_idJP0() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean);
    assertNotNull(accountDataBean.getAccountID());
    assertNotNull(accountDataBean.getCreationDate());
    assertNotNull(accountDataBean.getLastLogin());
    assertNotNull(accountDataBean.getBalance());
    assertNotNull(accountDataBean.getOpenBalance());
    assertNotNull(accountDataBean.getProfileID());
    assertNotNull(accountDataBean.getHoldings());
    assertNotNull(accountDataBean.getOrders());
    assertNotNull(accountDataBean.getLoginCount());
    assertNotNull(accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginSuccess_EClQ0() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    account.login("password");
    assertEquals(1, account.getLoginCount());
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailure_JLCE1() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    account.login("wrong_password");
    assertEquals(0, account.getLoginCount());
    assertNull(account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullProfile_zDtS2() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), null);
    account.login("password");
    assertEquals(0, account.getLoginCount());
    assertNull(account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginWithNullPassword_oxxX3() {
    AccountDataBean account = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    account.login(null);
    assertEquals(0, account.getLoginCount());
    assertNull(account.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_pKxC0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Collection<HoldingDataBean> holdings = accountDataBean.getHoldings();
    assertNotNull(holdings);
    assertEquals(0, holdings.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithValidLoginCountAndLogoutCountAndDifferentLastLoginDate_zYkJ1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.logout();
    assertEquals(2, accountDataBean.getLogoutCount());
    assertNotEquals(accountDataBean.getLastLogin(), accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithValidLoginCountAndLogoutCountAndDifferentBalance_qXac2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.logout();
    assertEquals(2, accountDataBean.getLogoutCount());
    assertNotEquals(accountDataBean.getBalance(), accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_NonEmpty_KRXg1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profileID");
    Collection<OrderDataBean> orders = accountDataBean.getOrders();
    assertFalse(orders.isEmpty());
    assertEquals(1, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_rfkx0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertNotNull(profile);
    assertEquals("profileID", profile.getUserID());
    assertEquals("email@example.com", profile.getEmail());
    assertEquals("password", profile.getPassword());
    assertEquals("fullName", profile.getFullName());
    assertEquals("address", profile.getAddress());
    assertEquals("creditCard", profile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithEmptyProfile_ktIq2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertNotNull(profile);
    assertEquals("", profile.getUserID());
    assertEquals("", profile.getEmail());
    assertEquals("", profile.getPassword());
    assertEquals("", profile.getFullName());
    assertEquals("", profile.getAddress());
    assertEquals("", profile.getCreditCard());
  }
}