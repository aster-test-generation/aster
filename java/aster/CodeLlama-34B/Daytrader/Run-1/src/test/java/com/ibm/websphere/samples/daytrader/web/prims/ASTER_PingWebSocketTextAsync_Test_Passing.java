/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.websocket.CloseReason;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PingWebSocketTextAsync_Test_Passing {
  private CloseReason reason;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnCloseWithBothNull_TFAG3() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    pingWebSocketTextAsync.onClose(null, null);
    assertNotNull(pingWebSocketTextAsync);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithNonThrowable_JahZ2() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception");
    pingWebSocketTextAsync.onError(t);
    assertNotNull(t);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowable_GkxF3() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception");
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getMessage(), "Test exception");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCause_FbcL4_1() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getMessage(), "Test exception");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCause_FbcL4_2() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getCause().getMessage(), "Cause");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCauseAndSuppressed_lVQV5_1() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    t.addSuppressed(new Throwable("Suppressed"));
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getMessage(), "Test exception");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCauseAndSuppressed_lVQV5_2() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    t.addSuppressed(new Throwable("Suppressed"));
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getCause().getMessage(), "Cause");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCauseAndSuppressed_lVQV5_3() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    t.addSuppressed(new Throwable("Suppressed"));
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getSuppressed().length, 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCauseAndSuppressed_lVQV5_4() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    t.addSuppressed(new Throwable("Suppressed"));
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getSuppressed()[0].getMessage(), "Suppressed");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCauseAndSuppressedAndStackTrace_JoJu6_1() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    t.addSuppressed(new Throwable("Suppressed"));
    t.setStackTrace(new StackTraceElement[]{new StackTraceElement("TestClass", "testMethod", "TestFile.java", 10)});
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getMessage(), "Test exception");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCauseAndSuppressedAndStackTrace_JoJu6_2() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    t.addSuppressed(new Throwable("Suppressed"));
    t.setStackTrace(new StackTraceElement[]{new StackTraceElement("TestClass", "testMethod", "TestFile.java", 10)});
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getCause().getMessage(), "Cause");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCauseAndSuppressedAndStackTrace_JoJu6_3() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    t.addSuppressed(new Throwable("Suppressed"));
    t.setStackTrace(new StackTraceElement[]{new StackTraceElement("TestClass", "testMethod", "TestFile.java", 10)});
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getSuppressed().length, 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCauseAndSuppressedAndStackTrace_JoJu6_4() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    t.addSuppressed(new Throwable("Suppressed"));
    t.setStackTrace(new StackTraceElement[]{new StackTraceElement("TestClass", "testMethod", "TestFile.java", 10)});
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getSuppressed()[0].getMessage(), "Suppressed");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCauseAndSuppressedAndStackTrace_JoJu6_5() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    t.addSuppressed(new Throwable("Suppressed"));
    t.setStackTrace(new StackTraceElement[]{new StackTraceElement("TestClass", "testMethod", "TestFile.java", 10)});
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getStackTrace().length, 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCauseAndSuppressedAndStackTrace_JoJu6_6() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    t.addSuppressed(new Throwable("Suppressed"));
    t.setStackTrace(new StackTraceElement[]{new StackTraceElement("TestClass", "testMethod", "TestFile.java", 10)});
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getStackTrace()[0].getClassName(), "TestClass");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCauseAndSuppressedAndStackTrace_JoJu6_7() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    t.addSuppressed(new Throwable("Suppressed"));
    t.setStackTrace(new StackTraceElement[]{new StackTraceElement("TestClass", "testMethod", "TestFile.java", 10)});
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getStackTrace()[0].getMethodName(), "testMethod");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCauseAndSuppressedAndStackTrace_JoJu6_8() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    t.addSuppressed(new Throwable("Suppressed"));
    t.setStackTrace(new StackTraceElement[]{new StackTraceElement("TestClass", "testMethod", "TestFile.java", 10)});
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getStackTrace()[0].getFileName(), "TestFile.java");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCauseAndSuppressedAndStackTrace_JoJu6_9() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    t.addSuppressed(new Throwable("Suppressed"));
    t.setStackTrace(new StackTraceElement[]{new StackTraceElement("TestClass", "testMethod", "TestFile.java", 10)});
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getStackTrace()[0].getLineNumber(), 10);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnError_ZKyy0_vwIo0() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception");
    pingWebSocketTextAsync.onError(t);
    assertTrue(t.getMessage().equals("Test exception"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnCloseWithNullSession_HVxx1() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    pingWebSocketTextAsync.onClose(null, reason);
    assertNotNull(pingWebSocketTextAsync);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCause_FbcL4() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getMessage(), "Test exception");
    assertEquals(t.getCause().getMessage(), "Cause");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCauseAndSuppressed_lVQV5() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    t.addSuppressed(new Throwable("Suppressed"));
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getMessage(), "Test exception");
    assertEquals(t.getCause().getMessage(), "Cause");
    assertEquals(t.getSuppressed().length, 1);
    assertEquals(t.getSuppressed()[0].getMessage(), "Suppressed");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithThrowableAndCauseAndSuppressedAndStackTrace_JoJu6() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable t = new Throwable("Test exception", new Throwable("Cause"));
    t.addSuppressed(new Throwable("Suppressed"));
    t.setStackTrace(new StackTraceElement[]{new StackTraceElement("TestClass", "testMethod", "TestFile.java", 10)});
    pingWebSocketTextAsync.onError(t);
    assertEquals(t.getMessage(), "Test exception");
    assertEquals(t.getCause().getMessage(), "Cause");
    assertEquals(t.getSuppressed().length, 1);
    assertEquals(t.getSuppressed()[0].getMessage(), "Suppressed");
    assertEquals(t.getStackTrace().length, 1);
    assertEquals(t.getStackTrace()[0].getClassName(), "TestClass");
    assertEquals(t.getStackTrace()[0].getMethodName(), "testMethod");
    assertEquals(t.getStackTrace()[0].getFileName(), "TestFile.java");
    assertEquals(t.getStackTrace()[0].getLineNumber(), 10);
  }
}