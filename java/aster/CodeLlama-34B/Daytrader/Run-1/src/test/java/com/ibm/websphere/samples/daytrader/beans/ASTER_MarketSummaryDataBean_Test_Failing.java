/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentWithNonZeroTSIA_FJYh1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    BigDecimal gainPercent = marketSummaryDataBean.getGainPercent();
    assertEquals(0, gainPercent.compareTo(new BigDecimal(100)));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentWithNullTSIA_ilKW2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, new BigDecimal(100), 100, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    BigDecimal gainPercent = marketSummaryDataBean.getGainPercent();
    assertEquals(0, gainPercent.compareTo(new BigDecimal(0)));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentWithNullOpenTSIA_rTji3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), null, 100, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    BigDecimal gainPercent = marketSummaryDataBean.getGainPercent();
    assertEquals(0, gainPercent.compareTo(new BigDecimal(0)));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryDate_NNaO0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1000), new BigDecimal(500), 1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    Date summaryDate = marketSummaryDataBean.getSummaryDate();
    assertNotNull(summaryDate);
    assertEquals(summaryDate, new Date());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithEmptyTopGainersAndLosers_NxDZ1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(50), 1000, Collections.emptyList(), Collections.emptyList());
    marketSummaryDataBean.print();
    assertEquals("Market Summary: TSIA: 100, openTSIA: 50, volume: 1000, topGainers: [], topLosers: []", marketSummaryDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML1_OlYF0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    String expected = "<BR>Market Summary at: " + marketSummaryDataBean.getSummaryDate() + "<LI>        TSIA:" + marketSummaryDataBean.getTSIA() + "</LI>" + "<LI>    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "</LI>" + "<LI>      volume:" + marketSummaryDataBean.getVolume() + "</LI>";
    assertEquals(expected, marketSummaryDataBean.toHTML());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenTSIAWithDifferentInputs_mxzy1_1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1000), new BigDecimal(1000), 1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    BigDecimal openTSIA = marketSummaryDataBean.getOpenTSIA();
    marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1000), new BigDecimal(500), 1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    openTSIA = marketSummaryDataBean.getOpenTSIA();
    marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1000), new BigDecimal(1500), 1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    openTSIA = marketSummaryDataBean.getOpenTSIA();
    assertEquals(new BigDecimal(1000), openTSIA);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenTSIAWithDifferentInputs_mxzy1_2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1000), new BigDecimal(1000), 1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    BigDecimal openTSIA = marketSummaryDataBean.getOpenTSIA();
    marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1000), new BigDecimal(500), 1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    openTSIA = marketSummaryDataBean.getOpenTSIA();
    marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1000), new BigDecimal(1500), 1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    openTSIA = marketSummaryDataBean.getOpenTSIA();
    assertEquals(new BigDecimal(500), openTSIA);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVolumeWithNullVolume_TwKY3_NHhW0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 0.0, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    assertNull(marketSummaryDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVolumeWithDifferentVolume_mwfQ6_HRbl0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
    assertNotEquals(100, marketSummaryDataBean.getVolume());
  }
}