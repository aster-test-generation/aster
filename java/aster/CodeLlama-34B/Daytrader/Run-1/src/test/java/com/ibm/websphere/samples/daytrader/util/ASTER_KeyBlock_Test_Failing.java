/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_KeyBlock_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSize_minMax_zero_EWTZ2() {
    KeyBlock keyBlock = new KeyBlock(0, 11);
    assertEquals(10, keyBlock.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSize_minMax_invalid_QfZs4() {
    KeyBlock keyBlock = new KeyBlock(1 - 4, 5);
    assertEquals(-4, keyBlock.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSize_minMax_negative_ZDtI1_fid1() {
    KeyBlock keyBlock = new KeyBlock(-10, 10);
    assertEquals(20, keyBlock.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSize_minMax_zero_EWTZ2_fid1() {
    KeyBlock keyBlock = new KeyBlock(0, 10);
    assertEquals(10, keyBlock.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSize_minMax_same_bcWM3_fid1() {
    KeyBlock keyBlock = new KeyBlock(10, 10);
    assertEquals(0, keyBlock.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSize_minMax_invalid_QfZs4_fid1() {
    KeyBlock keyBlock = new KeyBlock(10, 5);
    assertEquals(0, keyBlock.size());
  }
}