/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.transaction.RollbackException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Failing {
  private EntityManager entityManager;
  TradeSLSBBean tradeslsbbean;
  private TypedQuery<QuoteDataBean> query;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals(0, account.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new BigDecimal(1000), account.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals(new BigDecimal(1000), account.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0_9() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals("fullname", account.getProfile().getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0_10() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("address", account.getProfile().getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0_11() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals("email", account.getProfile().getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0_12() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("creditcard", account.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithInvalidUserID_hOPf1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("invalidUserID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertNotNull(account);
    assertEquals(1, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertNotNull(account);
    assertEquals(1, account.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertNotNull(account.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertNotNull(account);
    assertEquals(new BigDecimal(2000), account.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertNotNull(account);
    assertEquals(new BigDecimal(2000), account.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertEquals("differentUserID", account.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertNotNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2_10() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertEquals("differentAddress", account.getProfile().getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2_11() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertEquals("differentEmail", account.getProfile().getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2_12() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertEquals("differentCreditcard", account.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_RVkN0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "test_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    HoldingDataBean holdingDataBean = holdings.iterator().next();
    assertNotNull(holdingDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_RVkN0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "test_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    HoldingDataBean holdingDataBean = holdings.iterator().next();
    assertEquals(holdingDataBean.getAccount().getProfile().getUserID(), userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_ULNf1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalid_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_ULNf1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalid_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
    assertEquals(holdings.size(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_JvWo2_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_symbolNull_tvDu0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 100;
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume(null, changeFactor, sharesTraded);
    assertNull(updatedQuote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_sharesTradedNegative_GkAO2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = -100;
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertNull(updatedQuote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_updateQuotePricesDisabled_ljNv3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 100;
    TradeConfig.setUpdateQuotePrices(false);
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertEquals(updatedQuote, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_updateQuotePricesEnabled_JFcB4_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 100;
    TradeConfig.setUpdateQuotePrices(true);
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertNotNull(updatedQuote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_updateQuotePricesEnabled_JFcB4_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 100;
    TradeConfig.setUpdateQuotePrices(true);
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertEquals(new BigDecimal(1.5), updatedQuote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_updateQuotePricesEnabled_JFcB4_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 100;
    TradeConfig.setUpdateQuotePrices(true);
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertEquals(new BigDecimal(1.5), updatedQuote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_updateQuotePricesEnabled_JFcB4_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 100;
    TradeConfig.setUpdateQuotePrices(true);
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertEquals(100, updatedQuote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithInvalidUserID_Oror1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalid_user_id";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithInvalidUserID_Oror1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalid_user_id";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullUserID_NJKT2_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullUserID_NJKT2_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithEmptyUserID_jDaZ3_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithEmptyUserID_jDaZ3_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNonExistentUserID_SqOu5_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "non_existent_user_id";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNonExistentUserID_SqOu5_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "non_existent_user_id";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithDifferentUserID_EjeB6_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "different_user_id";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithDifferentUserID_EjeB6_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "different_user_id";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullAccount_Ecey7_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123456";
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setUserID(userID);
    AccountDataBean account = null;
    profile.setAccount(account);
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullAccount_Ecey7_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123456";
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setUserID(userID);
    AccountDataBean account = null;
    profile.setAccount(account);
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullOrders_jyiL8_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123456";
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setUserID(userID);
    AccountDataBean account = new AccountDataBean();
    profile.setAccount(account);
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullOrders_jyiL8_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123456";
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setUserID(userID);
    AccountDataBean account = new AccountDataBean();
    profile.setAccount(account);
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OJSm0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OJSm0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OJSm0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OJSm0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OJSm0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OJSm0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals(123.45, quoteDataBean.getChange(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OJSm0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OJSm0_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals(123.45, quoteDataBean.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithInvalidSymbol_hism1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("INVALID");
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithNullSymbol_lHSh2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote(null);
    assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_LbBg0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertNotNull(quote);
    assertEquals("ABC", quote.getSymbol());
    assertEquals("Company ABC", quote.getCompanyName());
    assertEquals(new BigDecimal(10.0), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_LbBg0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertNotNull(quote);
    assertEquals("Company ABC", quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_LbBg0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertNotNull(quote);
    assertEquals("ABC", quote.getSymbol());
    assertEquals("Company ABC", quote.getCompanyName());
    assertEquals(new BigDecimal(10.0), quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_LbBg0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_LbBg0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_LbBg0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertNotNull(quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_KVuQ1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertNotNull(quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_KVuQ1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("null", "Company ABC", new BigDecimal(10.0));
    assertEquals("Company ABC", quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_KVuQ1_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertNotNull(quote);
    assertEquals("Company ABC", quote.getSymbol());
    assertEquals(new BigDecimal(10.0), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_KVuQ1_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("null", "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_KVuQ1_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertNotNull(quote);
    assertEquals("Company ABC", quote.getCompanyName());
    assertEquals(new BigDecimal(10.0), quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_KVuQ1_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertNotNull(quote);
    assertEquals("Company ABC", quote.getCompanyName());
    assertEquals(new BigDecimal(10.0), quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_KVuQ1_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertNotNull(quote);
    assertEquals("Company ABC", quote.getCompanyName());
    assertEquals(new BigDecimal(10.0), quote.getPrice());
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_zHMn2_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "XYZ", new BigDecimal(10.0));
    assertEquals("ABC", quote.getSymbol());
    assertEquals("XYZ", quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_zHMn2_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "XYZ", new BigDecimal(10.0));
    assertNotNull(quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_zHMn2_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_zHMn2_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "XYZ", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_zHMn2_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_zHMn2_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_BOLR3_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertNotNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_BOLR3_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertEquals("Company ABC", quote.getCompanyName());
    assertNull(quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_BOLR3_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_BOLR3_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertNotNull(quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_BOLR3_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertNotNull(quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_BOLR3_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_bMKs4_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("", "Company ABC", new BigDecimal(10.0));
    assertNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_bMKs4_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("", "Company ABC", new BigDecimal(10.0));
    assertNotNull(quote);
    assertEquals("Company ABC", quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_bMKs4_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("", "Company ABC", new BigDecimal(10.0));
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertNotNull(accountDataBean);
    assertEquals(accountProfileDataBean.getUserID(), accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertNotNull(accountDataBean);
    assertEquals(accountProfileDataBean.getAccount().getAccountID(), accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertNotNull(accountDataBean);
    assertEquals(accountProfileDataBean.getAccount().getBalance(), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertNotNull(accountDataBean);
    assertEquals(accountProfileDataBean.getAccount().getOpenBalance(), accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertNotNull(accountDataBean);
    assertEquals(accountProfileDataBean.getAccount().getCreationDate(), accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertNotNull(accountDataBean);
    assertEquals(accountProfileDataBean.getAccount().getLastLogin(), accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertNotNull(accountDataBean);
    assertEquals(accountProfileDataBean.getAccount().getLoginCount(), accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_9() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertNotNull(accountDataBean);
    assertEquals(accountProfileDataBean.getAccount().getLogoutCount(), accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_10() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertEquals(accountProfileDataBean.getAccount().getHoldings(), accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_11() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertNotNull(accountDataBean);
    assertEquals(accountProfileDataBean.getAccount().getOrders(), accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_rPTQ0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_rPTQ0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean);
    assertEquals("email", accountProfileDataBean.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_rPTQ0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertEquals("password", accountProfileDataBean.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_rPTQ0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithInvalidUserID_yQIR1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("invalidUserID");
    assertNull(accountProfileDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithNullUserID_JBbN2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData(null);
    assertNull(accountProfileDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_InvalidUserID_vDKG1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalid_user";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid user ID", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_InvalidSymbol_UJdP2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user1";
    String symbol = "INVALID_SYMBOL";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid symbol", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_InvalidQuantity_dxtE3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user1";
    String symbol = "GOOG";
    double quantity = -100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid quantity", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_tdOj0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_tdOj0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals(order.getOrderStatus(), "open");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_tdOj0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
    assertEquals(order.getOrderType(), "sell");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_tdOj0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals(order.getQuantity(), 100.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_tdOj0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals(order.getPrice(), new BigDecimal(100.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_tdOj0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals(order.getOrderFee(), new BigDecimal(0.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_tdOj0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals(order.getAccount().getBalance(), new BigDecimal(900.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellInvalidHoldingID_uwnQ1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = 100;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellInvalidOrderProcessingMode_rHEF2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = 100;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellInvalidUserID_XTsM3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalidUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellInvalidQuantity_qFyB4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithInvalidHoldingID_nUTB1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(0);
    assertNull(holdingDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithNullHoldingID_kuLg2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(null);
    assertNull(holdingDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_userID_wRzS0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("user1");
    assertEquals(10, closedOrders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_userID_longRun_qKLy1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("user1");
    assertEquals(5, closedOrders.size());
    // Fix the assertion
    assertTrue(closedOrders.size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_userID_noOrders_rYQA2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("user1");
    assertEquals(0, closedOrders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_userID_null_GlGP3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders(null);
    assertNotNull(closedOrders);
    assertEquals(0, closedOrders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_userID_empty_BiDj4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("");
    assertEquals(0, closedOrders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_userID_longRun_true_gkze6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("user1");
    assertEquals(5, closedOrders.size());
    // Fix the assertion
    assertEquals(5, closedOrders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DONM0_cgDV0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DONM0_cgDV0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertEquals(marketSummaryDataBean.getOpenTSIA(), new BigDecimal(1000000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DONM0_cgDV0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getGainPercent(), new BigDecimal(10));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DONM0_cgDV0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertEquals(marketSummaryDataBean.getSummaryDate(), new java.util.Date());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DONM0_cgDV0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getTSIA(), new BigDecimal(1000000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DONM0_cgDV0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getVolume(), 1000000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DONM0_cgDV0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertEquals(10, marketSummaryDataBean.getTopGainers().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DONM0_cgDV0_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertEquals(10, marketSummaryDataBean.getTopLosers().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(0, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(0, account.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new BigDecimal(1000), account.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("userID", account.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0_8_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0_9_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("fullname", account.getProfile().getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0_11_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("email", account.getProfile().getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertEquals(0, account.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertEquals(0, account.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2_5_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertEquals(new BigDecimal(2000), account.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertEquals(new BigDecimal(2000), account.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2_8_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertNotNull(account.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2_9() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertEquals("differentFullname", account.getProfile().getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_RVkN0_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "test_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    HoldingDataBean holdingDataBean = holdings.iterator().next();
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_RVkN0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "test_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    HoldingDataBean holdingDataBean = holdings.iterator().next();
    assertEquals(holdings.size(), 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUserID_ULNf1_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalid_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertEquals(holdings.size(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_JvWo2_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertEquals(holdings.size(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_changeFactorNull_VRfL1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal changeFactor = null;
    double sharesTraded = 100;
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertNull(updatedQuote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_updateQuotePricesDisabled_ljNv3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 100;
    TradeConfig.setUpdateQuotePrices(false);
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertNull(updatedQuote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_updateQuotePricesEnabled_JFcB4_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 100;
    TradeConfig.setUpdateQuotePrices(true);
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertEquals(new BigDecimal(1.5), updatedQuote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_updateQuotePricesEnabled_JFcB4_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 100;
    TradeConfig.setUpdateQuotePrices(true);
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertEquals(new BigDecimal(1.5), updatedQuote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OJSm0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OJSm0_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OJSm0_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OJSm0_5_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OJSm0_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals(123.45, quoteDataBean.getChange(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OJSm0_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OJSm0_8_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertEquals(123.45, quoteDataBean.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_LbBg0_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals("ABC", quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_LbBg0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals("Company ABC", quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_LbBg0_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_LbBg0_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_LbBg0_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_KVuQ1_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertNull(quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_KVuQ1_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertEquals("Company ABC", quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_KVuQ1_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_KVuQ1_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_KVuQ1_5_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_KVuQ1_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_KVuQ1_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_zHMn2_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertEquals("ABC", quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_zHMn2_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertNull(quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_zHMn2_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_zHMn2_5_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_zHMn2_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_BOLR3_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertEquals("ABC", quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_BOLR3_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertEquals("Company ABC", quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_BOLR3_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertNull(quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_BOLR3_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertNull(quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_BOLR3_5_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertNull(quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_BOLR3_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertNull(quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_bMKs4_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("", "Company ABC", new BigDecimal(10.0));
    assertEquals("", quote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_bMKs4_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("", "Company ABC", new BigDecimal(10.0));
    assertEquals("Company ABC", quote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_bMKs4_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("", "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_bMKs4_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("", "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_bMKs4_5_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("", "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_bMKs4_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("", "Company ABC", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertEquals(accountProfileDataBean.getUserID(), accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertEquals(accountProfileDataBean.getAccount().getAccountID(), accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertEquals(accountProfileDataBean.getAccount().getBalance(), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_5_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertEquals(accountProfileDataBean.getAccount().getOpenBalance(), accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertEquals(accountProfileDataBean.getAccount().getCreationDate(), accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertEquals(accountProfileDataBean.getAccount().getLastLogin(), accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_8_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertEquals(accountProfileDataBean.getAccount().getLoginCount(), accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_9_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertEquals(accountProfileDataBean.getAccount().getLogoutCount(), accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0_11_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertEquals(accountProfileDataBean.getAccount().getOrders(), accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_rPTQ0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertEquals("userID", accountProfileDataBean.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_rPTQ0_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertEquals("email", accountProfileDataBean.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_rPTQ0_5_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertEquals("fullName", accountProfileDataBean.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_rPTQ0_6_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertEquals("address", accountProfileDataBean.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_rPTQ0_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertEquals("creditCard", accountProfileDataBean.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_rPTQ0_8_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertEquals("account", accountProfileDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_tdOj0_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_tdOj0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals(order.getOrderStatus(), "completed");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_tdOj0_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals(order.getOrderType(), "sell");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_tdOj0_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals(order.getAccount().getBalance(), new BigDecimal(1000.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_userID_longRun_qKLy1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("user1");
    assertEquals(5, closedOrders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_userID_null_GlGP3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders(null);
    assertEquals(0, closedOrders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DONM0_cgDV0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getOpenTSIA(), new BigDecimal(1000000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DONM0_cgDV0_4_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getSummaryDate(), new java.util.Date());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DONM0_cgDV0_7_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getTopGainers().size(), 10);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_DONM0_cgDV0_8_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean.getTopLosers().size(), 10);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryWithInvalidMarketSummaryDataBean_gCBH2_zGle0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    assertEquals(marketSummaryDataBean.getOpenTSIA(), new BigDecimal(0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryWithInvalidMarketSummaryDataBean_gCBH2_zGle0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    assertEquals(marketSummaryDataBean.getGainPercent(), new BigDecimal(0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryWithInvalidMarketSummaryDataBean_gCBH2_zGle0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    assertEquals(marketSummaryDataBean.getSummaryDate(), new java.util.Date(0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryWithInvalidMarketSummaryDataBean_gCBH2_zGle0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    assertEquals(marketSummaryDataBean.getTSIA(), new BigDecimal(0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryWithInvalidMarketSummaryDataBean_gCBH2_zGle0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    assertEquals(marketSummaryDataBean.getTopGainers().size(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryWithInvalidMarketSummaryDataBean_gCBH2_zGle0_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    assertEquals(marketSummaryDataBean.getTopLosers().size(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_ijsn0_jFFC0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Mockito.when(entityManager.createNamedQuery("quoteejb.allQuotes", QuoteDataBean.class)).thenReturn(query);
    Mockito.when(query.getResultList()).thenReturn(Arrays.asList(new QuoteDataBean()));
    Collection<QuoteDataBean> allQuotes = tradeSLSBBean.getAllQuotes();
    assertNotNull(allQuotes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_ijsn0_jFFC0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Mockito.when(entityManager.createNamedQuery("quoteejb.allQuotes", QuoteDataBean.class)).thenReturn(query);
    Mockito.when(query.getResultList()).thenReturn(Arrays.asList(new QuoteDataBean()));
    Collection<QuoteDataBean> allQuotes = tradeSLSBBean.getAllQuotes();
    assertEquals(1, allQuotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_ijsn0_jFFC0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Mockito.when(entityManager.createNamedQuery("quoteejb.allQuotes", QuoteDataBean.class)).thenReturn(query);
    Mockito.when(query.getResultList()).thenReturn(Arrays.asList(new QuoteDataBean()));
    Collection<QuoteDataBean> allQuotes = tradeSLSBBean.getAllQuotes();
    assertTrue(allQuotes.contains(new QuoteDataBean()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_OHLA1_QKvc1_1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderType("sell");
    order.setPrice(BigDecimal.valueOf(100.0));
    order.setQuantity(10.0);
    order.setOrderStatus("open");
    order.setCompletionDate(null);
    order.setHolding(null);
    AccountDataBean account = new AccountDataBean();
    account.setAccountID(1);
    order.setAccount(account);
    QuoteDataBean quote = new QuoteDataBean();
    quote.setSymbol("ABC");
    quote.setPrice(BigDecimal.valueOf(100.0));
    order.setQuote(quote);
    tradeSLSBBean.completeOrder(order.getOrderID(), false);
    assertEquals("closed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_OHLA1_QKvc1_2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderType("sell");
    order.setPrice(BigDecimal.valueOf(100.0));
    order.setQuantity(10.0);
    order.setOrderStatus("open");
    order.setCompletionDate(null);
    order.setHolding(null);
    AccountDataBean account = new AccountDataBean();
    account.setAccountID(1);
    order.setAccount(account);
    QuoteDataBean quote = new QuoteDataBean();
    quote.setSymbol("ABC");
    quote.setPrice(BigDecimal.valueOf(100.0));
    order.setQuote(quote);
    tradeSLSBBean.completeOrder(order.getOrderID(), false);
    assertNotNull(order.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_sell_OHLA1_QKvc1_3() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderType("sell");
    order.setPrice(BigDecimal.valueOf(100.0));
    order.setQuantity(10.0);
    order.setOrderStatus("open");
    order.setCompletionDate(null);
    order.setHolding(null);
    AccountDataBean account = new AccountDataBean();
    account.setAccountID(1);
    order.setAccount(account);
    QuoteDataBean quote = new QuoteDataBean();
    quote.setSymbol("ABC");
    quote.setPrice(BigDecimal.valueOf(100.0));
    order.setQuote(quote);
    tradeSLSBBean.completeOrder(order.getOrderID(), false);
    assertNull(order.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_HJFc0_ukPo0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderID(1);
    tradeSLSBBean.cancelOrder(order.getOrderID(), true);
    assertEquals(order.getOrderStatus(), "CANCELLED");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_HMDv0_pIer0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123456";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    OrderDataBean order = orders.iterator().next();
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_HMDv0_pIer0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123456";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    OrderDataBean order = orders.iterator().next();
    assertEquals(1, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_HMDv0_pIer0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123456";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    OrderDataBean order = orders.iterator().next();
    assertEquals(userID, order.getAccount().getProfile().getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_qyFa0_Cgbz0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertNotNull(holdingDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_qyFa0_Cgbz0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertEquals(1, holdingDataBean.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_qyFa0_Cgbz0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertEquals(100.0, holdingDataBean.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_qyFa0_Cgbz0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertEquals("QUOTE1", holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_qyFa0_Cgbz0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertEquals(new java.util.Date(), holdingDataBean.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_qyFa0_Cgbz0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertEquals(BigDecimal.valueOf(100.0), holdingDataBean.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_qyFa0_Cgbz0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertEquals(new AccountDataBean(), holdingDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithDifferentHoldingID_bsnd3_zBFM0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(2);
    assertNotNull(holdingDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithDifferentHoldingID_bsnd3_zBFM0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(2);
    assertEquals(2, holdingDataBean.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithDifferentHoldingID_bsnd3_zBFM0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(2);
    assertEquals(200.0, holdingDataBean.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithDifferentHoldingID_bsnd3_zBFM0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(2);
    assertEquals("QUOTE2", holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithDifferentHoldingID_bsnd3_zBFM0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(2);
    assertEquals(new java.util.Date(), holdingDataBean.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithDifferentHoldingID_bsnd3_zBFM0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(2);
    assertEquals(BigDecimal.valueOf(200.0), holdingDataBean.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithDifferentHoldingID_bsnd3_zBFM0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(2);
    assertEquals(new AccountDataBean(), holdingDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithDifferentQuantity_DFpk4_cNwO0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertEquals(50.0, holdingDataBean.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithDifferentQuantity_DFpk4_cNwO0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertEquals(BigDecimal.valueOf(50.0), holdingDataBean.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithDifferentQuoteID_iKPj5_FofF0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertEquals("QUOTE2", holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailure_zNvx1_Rdef0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user1";
    String password = "wrong_password";
    try {
      tradeSLSBBean.login(userID, password);
      fail("Expected EJBException");
    } catch (EJBException e) {
      assertEquals("No such user: " + userID, e.getMessage());
    } catch (RollbackException e) {
      fail("Expected EJBException");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_ValidSymbol_pTxQ0_xyIT0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      QuoteDataBean quoteData = tradeSLSBBean.pingTwoPhase("GOOG");
      assertNotNull(quoteData);
      assertEquals("GOOG", quoteData.getSymbol());
      assertTrue(quoteData.getPrice().compareTo(BigDecimal.ZERO) > 0);
      assertTrue(quoteData.getOpen().compareTo(BigDecimal.ZERO) > 0);
      assertTrue(quoteData.getLow().compareTo(BigDecimal.ZERO) > 0);
      assertTrue(quoteData.getHigh().compareTo(BigDecimal.ZERO) > 0);
      assertTrue(quoteData.getVolume() > 0);
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_xmuY0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(account);
    assertEquals(0, account.getLoginCount());
    assertEquals(0, account.getLogoutCount());
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getCreationDate());
    assertEquals(new BigDecimal(1000), account.getBalance());
    assertEquals(new BigDecimal(1000), account.getOpenBalance());
    assertEquals("userID", account.getProfileID());
    assertNotNull(account.getProfile());
    assertEquals("fullname", account.getProfile().getFullName());
    assertEquals("address", account.getProfile().getAddress());
    assertEquals("email", account.getProfile().getEmail());
    assertEquals("creditcard", account.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithDifferentValues_Goej2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("differentUserID", "differentPassword", "differentFullname", "differentAddress", "differentEmail", "differentCreditcard", new BigDecimal(2000));
    assertNotNull(account);
    assertEquals(0, account.getLoginCount());
    assertEquals(0, account.getLogoutCount());
    assertEquals(new Timestamp(System.currentTimeMillis()), account.getCreationDate());
    assertEquals(new BigDecimal(2000), account.getBalance());
    assertEquals(new BigDecimal(2000), account.getOpenBalance());
    assertEquals("differentUserID", account.getProfileID());
    assertNotNull(account.getProfile());
    assertEquals("differentFullname", account.getProfile().getFullName());
    assertEquals("differentAddress", account.getProfile().getAddress());
    assertEquals("differentEmail", account.getProfile().getEmail());
    assertEquals("differentCreditcard", account.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_RVkN0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "test_user";
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
    assertEquals(holdings.size(), 1);
    HoldingDataBean holdingDataBean = holdings.iterator().next();
    assertEquals(holdingDataBean.getAccount().getProfile().getUserID(), userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_JvWo2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
    assertEquals(holdings.size(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_updateQuotePricesEnabled_JFcB4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal changeFactor = new BigDecimal(1.5);
    double sharesTraded = 100;
    TradeConfig.setUpdateQuotePrices(true);
    QuoteDataBean updatedQuote = tradeSLSBBean.updateQuotePriceVolume("ABC", changeFactor, sharesTraded);
    assertNotNull(updatedQuote);
    assertEquals(new BigDecimal(1.5), updatedQuote.getPrice());
    assertEquals(new BigDecimal(1.5), updatedQuote.getOpen());
    assertEquals(new BigDecimal(1.5), updatedQuote.getLow());
    assertEquals(new BigDecimal(1.5), updatedQuote.getHigh());
    assertEquals(100, updatedQuote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithInvalidUserID_Oror1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalid_user_id";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullUserID_NJKT2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithEmptyUserID_jDaZ3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNonExistentUserID_SqOu5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "non_existent_user_id";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithDifferentUserID_EjeB6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "different_user_id";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullAccount_Ecey7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123456";
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setUserID(userID);
    AccountDataBean account = null;
    profile.setAccount(account);
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullOrders_jyiL8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "123456";
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setUserID(userID);
    AccountDataBean account = new AccountDataBean();
    profile.setAccount(account);
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OJSm0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("AAPL");
    assertNotNull(quoteDataBean);
    assertEquals("AAPL", quoteDataBean.getSymbol());
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getPrice());
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getOpen());
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getLow());
    assertEquals(123.45, quoteDataBean.getChange(), 0.001);
    assertEquals(BigDecimal.valueOf(123.45), quoteDataBean.getHigh());
    assertEquals(123.45, quoteDataBean.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_LbBg0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", new BigDecimal(10.0));
    assertEquals("ABC", quote.getSymbol());
    assertEquals("Company ABC", quote.getCompanyName());
    assertEquals(new BigDecimal(10.0), quote.getPrice());
    assertEquals(new BigDecimal(10.0), quote.getOpen());
    assertEquals(new BigDecimal(10.0), quote.getLow());
    assertEquals(new BigDecimal(10.0), quote.getHigh());
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_KVuQ1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote(null, "Company ABC", new BigDecimal(10.0));
    assertNull(quote.getSymbol());
    assertEquals("Company ABC", quote.getCompanyName());
    assertEquals(new BigDecimal(10.0), quote.getPrice());
    assertEquals(new BigDecimal(10.0), quote.getOpen());
    assertEquals(new BigDecimal(10.0), quote.getLow());
    assertEquals(new BigDecimal(10.0), quote.getHigh());
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_zHMn2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", null, new BigDecimal(10.0));
    assertEquals("ABC", quote.getSymbol());
    assertNull(quote.getCompanyName());
    assertEquals(new BigDecimal(10.0), quote.getPrice());
    assertEquals(new BigDecimal(10.0), quote.getOpen());
    assertEquals(new BigDecimal(10.0), quote.getLow());
    assertEquals(new BigDecimal(10.0), quote.getHigh());
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_BOLR3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("ABC", "Company ABC", null);
    assertEquals("ABC", quote.getSymbol());
    assertEquals("Company ABC", quote.getCompanyName());
    assertNull(quote.getPrice());
    assertNull(quote.getOpen());
    assertNull(quote.getLow());
    assertNull(quote.getHigh());
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithInvalidSymbol_bMKs4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeSLSBBean.createQuote("", "Company ABC", new BigDecimal(10.0));
    assertEquals("", quote.getSymbol());
    assertEquals("Company ABC", quote.getCompanyName());
    assertEquals(new BigDecimal(10.0), quote.getPrice());
    assertEquals(new BigDecimal(10.0), quote.getOpen());
    assertEquals(new BigDecimal(10.0), quote.getLow());
    assertEquals(new BigDecimal(10.0), quote.getHigh());
    assertEquals(0, quote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_kMmU0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(accountProfileDataBean.getUserID());
    assertNotNull(accountDataBean);
    assertEquals(accountProfileDataBean.getUserID(), accountDataBean.getProfileID());
    assertEquals(accountProfileDataBean.getAccount().getAccountID(), accountDataBean.getAccountID());
    assertEquals(accountProfileDataBean.getAccount().getBalance(), accountDataBean.getBalance());
    assertEquals(accountProfileDataBean.getAccount().getOpenBalance(), accountDataBean.getOpenBalance());
    assertEquals(accountProfileDataBean.getAccount().getCreationDate(), accountDataBean.getCreationDate());
    assertEquals(accountProfileDataBean.getAccount().getLastLogin(), accountDataBean.getLastLogin());
    assertEquals(accountProfileDataBean.getAccount().getLoginCount(), accountDataBean.getLoginCount());
    assertEquals(accountProfileDataBean.getAccount().getLogoutCount(), accountDataBean.getLogoutCount());
    assertEquals(accountProfileDataBean.getAccount().getHoldings(), accountDataBean.getHoldings());
    assertEquals(accountProfileDataBean.getAccount().getOrders(), accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_rPTQ0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean);
    assertEquals("userID", accountProfileDataBean.getUserID());
    assertEquals("email", accountProfileDataBean.getEmail());
    assertEquals("password", accountProfileDataBean.getPassword());
    assertEquals("fullName", accountProfileDataBean.getFullName());
    assertEquals("address", accountProfileDataBean.getAddress());
    assertEquals("creditCard", accountProfileDataBean.getCreditCard());
    assertEquals("account", accountProfileDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_tdOj0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
    assertEquals(order.getOrderStatus(), "completed");
    assertEquals(order.getOrderType(), "sell");
    assertEquals(order.getQuantity(), 100.0);
    assertEquals(order.getPrice(), new BigDecimal(100.0));
    assertEquals(order.getOrderFee(), new BigDecimal(0.0));
    assertEquals(order.getAccount().getBalance(), new BigDecimal(1000.0));
  }
}