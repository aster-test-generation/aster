/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.TimeUnit;
import javax.websocket.DecodeException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ActionDecoder_Test_Passing {
  private ActionDecoder actionDecoder;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_Naii0() {
    actionDecoder = new ActionDecoder();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWillDecode_validString_VlPT2() {
    ActionDecoder decoder = new ActionDecoder();
    assertTrue(decoder.willDecode("abc"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWillDecode_specialCharacters_qrxr4() {
    ActionDecoder decoder = new ActionDecoder();
    assertTrue(decoder.willDecode("!@#$%^&*()_+"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWillDecode_longString_pDRq5() {
    ActionDecoder decoder = new ActionDecoder();
    assertTrue(decoder.willDecode("abcdefghijklmnopqrstuvwxyz"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWillDecode_unicodeString_CLDQ6() {
    ActionDecoder decoder = new ActionDecoder();
    assertTrue(decoder.willDecode(""));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_zRZQ0() {
    ActionDecoder decoder = new ActionDecoder();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithEmptyJson_dPrC1_rpPw0() {
    ActionDecoder decoder = new ActionDecoder();
    String jsonText = "";
    try {
      ActionMessage actionMessage = decoder.decode(jsonText);
      assertNull(actionMessage.getDecodedAction());
    } catch (DecodeException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithNullJson_NUrK3_rbYV0() {
    ActionDecoder decoder = new ActionDecoder();
    String jsonText = null;
    try {
      ActionMessage actionMessage = decoder.decode(jsonText);
      assertNull(actionMessage.getDecodedAction());
    } catch (DecodeException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithEmptyAction_gCag4_xDJG0() {
    ActionDecoder decoder = new ActionDecoder();
    String jsonText = "{\"action\":\"\"}";
    try {
      ActionMessage actionMessage = decoder.decode(jsonText);
      assertNull(actionMessage.getDecodedAction());
    } catch (DecodeException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithInvalidAction_iYEK5_fbjW0() {
    ActionDecoder decoder = new ActionDecoder();
    String jsonText = "{\"action\":\"test\"}";
    try {
      ActionMessage actionMessage = decoder.decode(jsonText);
      assertNull(actionMessage.getDecodedAction());
    } catch (DecodeException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithNullAction_qmyz6_lKAF0() {
    ActionDecoder decoder = new ActionDecoder();
    String jsonText = "{\"action\":null}";
    try {
      ActionMessage actionMessage = decoder.decode(jsonText);
      assertNull(actionMessage.getDecodedAction());
    } catch (DecodeException e) {
      fail("DecodeException should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWillDecode_nullString_oXyY1_fid2() {
    ActionDecoder decoder = new ActionDecoder();
    assertTrue(decoder.willDecode(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWillDecode_nonAlphabeticString_fEKM10_fid2() {
    ActionDecoder decoder = new ActionDecoder();
    assertTrue(decoder.willDecode("12345"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWillDecode_nonNumericString_aUbA11_fid2() {
    ActionDecoder decoder = new ActionDecoder();
    assertTrue(decoder.willDecode("abcdef"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecode_MGuZ0_TTUN0_fid2() {
    ActionDecoder decoder = new ActionDecoder();
    String jsonText = "{\"action\":\"test\"}";
    try {
      ActionMessage actionMessage = decoder.decode(jsonText);
      assertNull(actionMessage.getDecodedAction());
    } catch (DecodeException e) {
      fail("DecodeException thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDecodeWithExtraData_weaH7_zlCy0_fid2() {
    ActionDecoder decoder = new ActionDecoder();
    String jsonText = "{\"action\":\"test\",\"extra\":\"data\"}";
    try {
      ActionMessage actionMessage = decoder.decode(jsonText);
      assertNull(actionMessage.getDecodedAction());
    } catch (DecodeException e) {
      fail("DecodeException should not be thrown");
    }
  }
}