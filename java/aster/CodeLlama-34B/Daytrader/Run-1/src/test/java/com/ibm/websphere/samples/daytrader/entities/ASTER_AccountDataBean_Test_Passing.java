/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCount_Eqpz0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLoginCount(10);
    assertEquals(10, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCountWithZero_HAND1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLoginCount(0);
    assertEquals(0, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCountWithNegative_oaRJ2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLoginCount(-1);
    assertEquals(-1, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCountWithMaxValue_EfdS3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLoginCount(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCountWithMinValue_NVkn4() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLoginCount(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_idJP0_1() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_idJP0_2() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_idJP0_3() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_idJP0_4() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_idJP0_5() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_idJP0_6() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_idJP0_7() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_idJP0_10() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_idJP0_11() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    assertNotNull(accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_NullAccountID_NuPS1() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    accountDataBean.setAccountID(null);
    assertNull(accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_NullCreationDate_JiNV2() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    accountDataBean.setCreationDate(null);
    assertNull(accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_NullLastLogin_WnEP3() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    accountDataBean.setLastLogin(null);
    assertNull(accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_NullBalance_IZJl4() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    accountDataBean.setBalance(null);
    assertNull(accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_NullOpenBalance_sDwY5() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    accountDataBean.setOpenBalance(null);
    assertNull(accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_NullProfileID_QUsX6() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    accountDataBean.setProfileID(null);
    assertNull(accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_NullHoldings_wAwL7() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    accountDataBean.setHoldings(null);
    assertNull(accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_NullOrders_dQsf8() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    accountDataBean.setOrders(null);
    assertNull(accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_qUVN0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLogoutCount(3);
    assertEquals(3, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCountWithZero_gCbg1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLogoutCount(0);
    assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCountWithNegative_Jmvy2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setLogoutCount(-1);
    assertEquals(-1, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastLogin_qfOO0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Date lastLogin = new Date();
    accountDataBean.setLastLogin(lastLogin);
    Assertions.assertEquals(lastLogin, accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_withAccountID_qvGe0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    int expectedHashCode = 0;
    int actualHashCode = accountDataBean.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreationDate_sMsv0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(1000000000), new Date(1000000000), new BigDecimal(100.00), new BigDecimal(100.00), "1234567890");
    Date creationDate = accountDataBean.getCreationDate();
    Assertions.assertEquals(new Date(1000000000), creationDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCount_fyFL0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    int logoutCount = accountDataBean.getLogoutCount();
    assertEquals(2, logoutCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCountWithZeroLoginCount_amcQ1() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    int logoutCount = accountDataBean.getLogoutCount();
    assertEquals(0, logoutCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCountWithNegativeLoginCount_kfUC2() {
    AccountDataBean accountDataBean = new AccountDataBean(-1, -1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    int logoutCount = accountDataBean.getLogoutCount();
    assertEquals(-1, logoutCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountID_VpXh0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "profileID");
    accountDataBean.setAccountID(2);
    Assertions.assertEquals(2, accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountID_WithAccountID_OESP0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
    assertEquals(1, accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountID_WithoutAccountID_vWBr1() {
    AccountDataBean accountDataBean = new AccountDataBean(2, 3, new Date(), new Date(), BigDecimal.valueOf(100), BigDecimal.valueOf(100), "profileID");
    assertEquals(null, accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_BLKD0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    assertTrue(accountDataBean.equals(accountDataBean));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObject_UKwi1() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    AccountDataBean accountDataBean2 = new AccountDataBean(2, 3, new Date(), new Date(), new BigDecimal(200), new BigDecimal(100), "profileID");
    assertTrue(accountDataBean1.equals(accountDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_elIM2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    assertFalse(accountDataBean.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_Jcpg3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    String string = "string";
    assertFalse(accountDataBean.equals(string));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullBalance_RaAs6() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 2, new Date(), new Date(), null, new BigDecimal(50), "profileID");
    AccountDataBean accountDataBean2 = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    assertTrue(accountDataBean1.equals(accountDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithValidLoginCountAndLogoutCount_KHSC0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.logout();
    assertEquals(2, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_qEta0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    String expected = "\n\tAccount Data for account: 1\n\t\t   loginCount:2\n\t\t  logoutCount:3\n\t\t    lastLogin:2023-02-28 12:00:00\n\t\t creationDate:2023-02-28 12:00:00\n\t\t      balance:100\n\t\t  openBalance:50\n\t\t    profileID:profileID";
    String actual = accountDataBean.toString();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithZeroValues_RPys2() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, 0, new Date(0), new Date(0), new BigDecimal(0), new BigDecimal(0), "");
    String expected = "\n\tAccount Data for account: 0\n\t\t   loginCount:0\n\t\t  logoutCount:0\n\t\t    lastLogin:1970-01-01 00:00:00\n\t\t creationDate:1970-01-01 00:00:00\n\t\t      balance:0\n\t\t  openBalance:0\n\t\t    profileID:";
    String actual = accountDataBean.toString();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenBalance_UQis0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    accountDataBean.setOpenBalance(new BigDecimal(100));
    assertEquals(new BigDecimal(100), accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileID_maXS0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    String profileID = accountDataBean.getProfileID();
    Assertions.assertEquals("profileID", profileID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDate_uSTM0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    Date creationDate = new Date();
    accountDataBean.setCreationDate(creationDate);
    assertEquals(creationDate, accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateWithNull_qUUu1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    accountDataBean.setCreationDate(null);
    assertNull(accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateWithInvalidDate_FlWg2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    Date invalidDate = new Date(0);
    accountDataBean.setCreationDate(invalidDate);
    assertEquals(new Date(0), accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateWithValidDate_GcQC3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    Date validDate = new Date(1000000000);
    accountDataBean.setCreationDate(validDate);
    assertEquals(validDate, accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateWithDifferentDate_Cmkn4() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    Date differentDate = new Date(2000000000);
    accountDataBean.setCreationDate(differentDate);
    assertEquals(differentDate, accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateWithSameDate_cCCZ5() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    Date sameDate = new Date(1000000000);
    accountDataBean.setCreationDate(sameDate);
    assertEquals(sameDate, accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileID_mdQw0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setProfileID("newProfileID");
    Assertions.assertEquals("newProfileID", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfile_iaqR0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountDataBean.setProfile(accountProfileDataBean);
    assertEquals(accountProfileDataBean, accountDataBean.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileWithNullProfile_YoGc1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setProfile(null);
    assertNull(accountDataBean.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileWithDifferentProfile_fhOD2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    accountDataBean.setProfile(accountProfileDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileWithDifferentAddress_hgBH7() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_Empty_UAfM0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    Collection<OrderDataBean> orders = accountDataBean.getOrders();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_Null_tqsT2() {
    AccountDataBean accountDataBean = new AccountDataBean();
    Collection<OrderDataBean> orders = accountDataBean.getOrders();
    assertNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLogin_KgGy0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Date lastLogin = accountDataBean.getLastLogin();
    assertEquals(new Date(), lastLogin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLoginWithNull_GLyZ1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, null, new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Date lastLogin = accountDataBean.getLastLogin();
    assertNull(lastLogin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLoginWithDifferentDate_IEIC2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Date lastLogin = accountDataBean.getLastLogin();
    assertNotEquals(new Date(1234567890), lastLogin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLoginWithDifferentDateAndTime_lETo3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Date lastLogin = accountDataBean.getLastLogin();
    assertNotEquals(new Date(1000000000), lastLogin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalance_ETFo0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    BigDecimal balance = accountDataBean.getBalance();
    assertEquals(new BigDecimal(100), balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalanceWithZeroBalance_gvPR1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(0), new BigDecimal(50), "profileID");
    BigDecimal balance = accountDataBean.getBalance();
    assertEquals(new BigDecimal(0), balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalanceWithNegativeBalance_RHpN2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(-100), new BigDecimal(50), "profileID");
    BigDecimal balance = accountDataBean.getBalance();
    assertEquals(new BigDecimal(-100), balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithNullProfile_KgEU1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), null);
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertNull(profile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithInvalidProfile_EaZZ3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "invalidProfileID");
    AccountProfileDataBean profile = accountDataBean.getProfile();
    assertNull(profile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileWithNullAccountDataBean_wCZD4() {
    AccountDataBean accountDataBean = null;
    AccountProfileDataBean profile = null;
    try {
      profile = accountDataBean.getProfile();
    } catch (NullPointerException e) {
      // Expected exception
    }
    assertNull(profile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalance_OUtg0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    BigDecimal openBalance = accountDataBean.getOpenBalance();
    assertEquals(new BigDecimal(100), openBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalanceWithZeroBalance_Urgv1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(0), new BigDecimal(0), "profileID");
    BigDecimal openBalance = accountDataBean.getOpenBalance();
    assertEquals(new BigDecimal(0), openBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalanceWithNegativeBalance_CxfX2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(-100), new BigDecimal(-100), "profileID");
    BigDecimal openBalance = accountDataBean.getOpenBalance();
    assertEquals(new BigDecimal(-100), openBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalanceWithNullBalance_QQDD3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), null, null, "profileID");
    BigDecimal openBalance = accountDataBean.getOpenBalance();
    assertNull(openBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalanceWithInvalidBalance_Ammq4() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    BigDecimal openBalance = accountDataBean.getOpenBalance();
    assertNotEquals(new BigDecimal(101), openBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalanceWithInvalidBalance2_HzOH5() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    BigDecimal openBalance = accountDataBean.getOpenBalance();
    assertNotEquals(new BigDecimal(99), openBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalanceWithInvalidBalance3_ZgUg6() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    BigDecimal openBalance = accountDataBean.getOpenBalance();
    assertNotEquals(new BigDecimal(50), openBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalanceWithInvalidBalance4_JzWh7() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    BigDecimal openBalance = accountDataBean.getOpenBalance();
    assertNotEquals(new BigDecimal(150), openBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalanceWithInvalidBalance5_TrGO8() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    BigDecimal openBalance = accountDataBean.getOpenBalance();
    assertNotEquals(new BigDecimal(200), openBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalanceWithInvalidBalance6_YTpY9() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    BigDecimal openBalance = accountDataBean.getOpenBalance();
    assertNotEquals(new BigDecimal(250), openBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalanceWithInvalidBalance7_HGDp10() {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalance_MXZI0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setBalance(new BigDecimal(200));
    assertEquals(new BigDecimal(200), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceWithNull_RgaU1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setBalance(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceWithZero_tdjT2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setBalance(new BigDecimal(0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceWithDifferentScale_ZqEK4() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setBalance(new BigDecimal(200.50));
    assertEquals(new BigDecimal(200.50), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceWithDifferentPrecision_gQWK5() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setBalance(new BigDecimal(200.500));
    assertEquals(new BigDecimal(200.500), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalanceWithDifferentScaleAndPrecision_Cddy6() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setBalance(new BigDecimal(200.5000));
    assertEquals(new BigDecimal(200.5000), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_NullLoginCount_yDxj9_IBoT0() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    accountDataBean.setLoginCount(0);
    assertEquals(0, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_NullLogoutCount_AGmO10_mitq0() {
    AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
    accountDataBean.setLogoutCount(0);
    assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullAccountID_FyVo5_lYfq0() {
    AccountDataBean accountDataBean1 = new AccountDataBean(0, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
    AccountDataBean accountDataBean2 = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profileID");
  }
}