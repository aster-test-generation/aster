/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.TimeUnit;
import javax.websocket.EncodeException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JsonEncoder_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncode_cQyp0() throws EncodeException {
    JsonEncoder encoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    message.setKey("key");
    message.setValue("value");
    String expected = "{\"key\":\"key\",\"value\":\"value\"}";
    String actual = encoder.encode(message);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithNullKey_utTT1() throws EncodeException {
    JsonEncoder encoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    message.setValue("value");
    String expected = "{\"value\":\"value\"}";
    String actual = encoder.encode(message);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithNullValue_CBaZ2() throws EncodeException {
    JsonEncoder encoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    message.setKey("key");
    String expected = "{\"key\":\"key\"}";
    String actual = encoder.encode(message);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithEmptyKey_vAvv3() throws EncodeException {
    JsonEncoder encoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    message.setKey("");
    message.setValue("value");
    String expected = "{\"\":\"value\"}";
    String actual = encoder.encode(message);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithEmptyValue_eXmh4() throws EncodeException {
    JsonEncoder encoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    message.setKey("key");
    message.setValue("");
    String expected = "{\"key\":\"key\"}";
    String actual = encoder.encode(message);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithNullMessage_Mrfn5() throws EncodeException {
    JsonEncoder encoder = new JsonEncoder();
    JsonMessage message = null;
    String expected = "{}";
    String actual = encoder.encode(message);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithEmptyMessage_jqAC6() throws EncodeException {
    JsonEncoder encoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    String expected = "{}";
    String actual = encoder.encode(message);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithEmptyKey_vAvv3_fid2() throws EncodeException {
    JsonEncoder encoder = new JsonEncoder();
    JsonMessage message = new JsonMessage();
    message.setKey("");
    message.setValue("value");
    String expected = "{\"value\":\"value\"}";
    String actual = encoder.encode(message);
    assertEquals(expected, actual);
  }
}