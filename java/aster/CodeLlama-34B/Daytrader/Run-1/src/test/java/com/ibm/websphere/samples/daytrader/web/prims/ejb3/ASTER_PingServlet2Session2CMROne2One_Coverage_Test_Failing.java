/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingServlet2Session2CMROne2One_Coverage_Test_Failing {
  HttpServletRequest request;
  HttpServletResponse response;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_zIsa0() {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    String expected = "web primitive, tests Servlet to Entity EJB path";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_rLEi0() throws ServletException, IOException {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doPost(req, res);
    verify(req).getParameter("param1");
    verify(req).getParameter("param2");
    verify(res).sendRedirect("http://www.example.com");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithInvalidParameters_YIuW1() throws ServletException, IOException {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("param1")).thenReturn("invalid");
    when(req.getParameter("param2")).thenReturn("invalid");
    servlet.doPost(req, res);
    verify(req).getParameter("param1");
    verify(req).getParameter("param2");
    verify(res).sendError(HttpServletResponse.SC_BAD_REQUEST);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_CyFi0() throws IOException, ServletException {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    servlet.doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithContentType_lTAb1() throws IOException, ServletException {
    when(response.getContentType()).thenReturn("text/html");
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    servlet.doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithUserID_WYSs3() throws IOException, ServletException {
    when(request.getParameter("userID")).thenReturn("testUserID");
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    servlet.doGet(request, response);
  }
}