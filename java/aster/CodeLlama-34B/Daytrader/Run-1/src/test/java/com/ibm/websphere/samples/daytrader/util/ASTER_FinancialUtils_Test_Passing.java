/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_FinancialUtils_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainHTMLPositive_aQOw0() {
    BigDecimal gain = new BigDecimal("10.50");
    String expected = "<FONT color=\"#009900\">10.50</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainHTMLZero_IHGO2() {
    BigDecimal gain = new BigDecimal("0.00");
    String expected = "<FONT color=\"#009900\">0.00</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLink_astw0() {
    String symbol = "AAPL";
    String expected = "<A href=\"app?action=quotes&symbols=" + symbol + "\">" + symbol + "</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLinkWithInvalidSymbol_zCID2() {
    String symbol = "INVALID";
    String expected = "<A href=\"app?action=quotes&symbols=" + symbol + "\">" + symbol + "</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLinkWithEmptySymbol_JbBp3() {
    String symbol = "";
    String expected = "<A href=\"app?action=quotes&symbols=" + symbol + "\">" + symbol + "</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLinkWithNullSymbol_UDbx4() {
    String symbol = null;
    String expected = "<A href=\"app?action=quotes&symbols=" + symbol + "\">" + symbol + "</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGain_vICj0() {
    BigDecimal currentBalance = new BigDecimal("100.00");
    BigDecimal openBalance = new BigDecimal("50.00");
    BigDecimal expectedGain = new BigDecimal("50.00");
    BigDecimal actualGain = FinancialUtils.computeGain(currentBalance, openBalance);
    assertEquals(expectedGain, actualGain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainWithNegativeBalance_yVCW1() {
    BigDecimal currentBalance = new BigDecimal("-100.00");
    BigDecimal openBalance = new BigDecimal("50.00");
    BigDecimal expectedGain = new BigDecimal("-150.00");
    BigDecimal actualGain = FinancialUtils.computeGain(currentBalance, openBalance);
    assertEquals(expectedGain, actualGain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_PositiveGain_CmFx0() {
    BigDecimal gain = new BigDecimal("10.50");
    String expected = "(<B><FONT color=\"#009900\">+10.50%</FONT></B>)<IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printGainPercentHTML(gain);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintChangeHTMLPositive_EYVj0() {
    String expected = "<FONT color=\"#009900\">10.0</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printChangeHTML(10.0);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintChangeHTMLNegative_pTUg1() {
    String expected = "<FONT color=\"#ff0000\">-10.0</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printChangeHTML(-10.0);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintChangeHTMLPositiveDifferentValue_enuc2() {
    String expected = "<FONT color=\"#009900\">20.0</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printChangeHTML(20.0);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintChangeHTMLNegativeDifferentValue_bXSi3() {
    String expected = "<FONT color=\"#ff0000\">-20.0</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printChangeHTML(-20.0);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintChangeHTMLZeroChange_RQUt4() {
    String expected = "<FONT color=\"#009900\">0.0</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    String actual = FinancialUtils.printChangeHTML(0.0);
    assertEquals(expected, actual);
  }
}