/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeAppServlet_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_puWB0() throws ServletException, IOException {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doGet(request, response);
    verify(request).getParameter("task");
    verify(response).setContentType("text/html");
    verify(response).setStatus(HttpServletResponse.SC_OK);
    verify(response).getWriter();
    verify(response).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithInvalidTask_QDpS1() throws ServletException, IOException {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("task")).thenReturn("invalid_task");
    servlet.doGet(request, response);
    verify(request).getParameter("task");
    verify(response).setContentType("text/html");
    verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(response).getWriter();
    verify(response).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithValidTask_RplD2() throws ServletException, IOException {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("task")).thenReturn("valid_task");
    servlet.doGet(request, response);
    verify(request).getParameter("task");
    verify(response).setContentType("text/html");
    verify(response).setStatus(HttpServletResponse.SC_OK);
    verify(response).getWriter();
    verify(response).flushBuffer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_FXKq0() throws ServletException, IOException {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doPost(request, response);
    verify(request).getParameter("param1");
    verify(request).getParameter("param2");
    verify(response).setStatus(HttpServletResponse.SC_OK);
    verify(response).getWriter().print("Hello, World!");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithInvalidParameters_SOLO1() throws ServletException, IOException {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("param1")).thenReturn(null);
    when(request.getParameter("param2")).thenReturn(null);
    servlet.doPost(request, response);
    verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    verify(response).getWriter().print("Invalid parameters");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithException_HSIY2() throws ServletException, IOException {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("param1")).thenThrow(new ServletException("Test exception"));
    servlet.doPost(request, response);
    verify(response).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    verify(response).getWriter().print("Error processing request");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_ZMYf0() {
    TradeAppServlet servlet = new TradeAppServlet();
    String expected = "TradeAppServlet provides the standard web interface to Trade";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithNull_gtGd1() {
    TradeAppServlet servlet = new TradeAppServlet();
    String expected = null;
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithEmptyString_Uqlr2() {
    TradeAppServlet servlet = new TradeAppServlet();
    String expected = "";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask_sell_McmS4() {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithNull_gtGd1_fid2() {
    TradeAppServlet servlet = new TradeAppServlet();
    String expected = "TradeAppServlet";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }
}