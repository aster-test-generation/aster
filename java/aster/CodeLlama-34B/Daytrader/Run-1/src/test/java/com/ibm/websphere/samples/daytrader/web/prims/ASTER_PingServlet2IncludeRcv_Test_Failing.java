/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2IncludeRcv_Test_Failing {
  @Mock
  private HttpServletRequest request;
  @Mock
  private HttpServletResponse response;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_KrHP0() throws ServletException, IOException {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doPost(req, res);
    verify(req).getParameter("param1");
    verify(req).getParameter("param2");
    verify(res).setContentType("text/html");
    verify(res).setCharacterEncoding("UTF-8");
    verify(res).getWriter();
    verify(res).getOutputStream();
    verify(res).flushBuffer();
    verify(res).setStatus(HttpServletResponse.SC_OK);
    verify(res).sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    verify(res).sendRedirect("http://localhost:8080/error");
    verify(res).setHeader("Location", "http://localhost:8080/error");
    verify(res).setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
    verify(res).setHeader("Pragma", "no-cache");
    verify(res).setHeader("Expires", "0");
    verify(res).setHeader("Content-Type", "text/html; charset=UTF-8");
    verify(res).setHeader("Content-Length", "100");
    verify(res).setHeader("Connection", "close");
    verify(res).setHeader("Server", "Apache-Coyote/1.1");
    verify(res).setHeader("Date", "Sun, 20 Mar 2022 12:00:00 GMT");
    verify(res).setHeader("Last-Modified", "Sun, 20 Mar 2022 12:00:00 GMT");
    verify(res).setHeader("ETag", "\"1234567890\"");
    verify(res).setHeader("Accept-Ranges", "bytes");
    verify(res).setHeader("Content-Range", "bytes 0-99/100");
    verify(res).setHeader("Content-Encoding", "gzip");
    verify(res).setHeader("Vary", "Accept-Encoding");
    verify(res).setHeader("Transfer-Encoding", "chunked");
    verify(res).setHeader("Keep-Alive", "timeout=5, max=100");
    verify(res).setHeader("Connection", "Keep-Alive");
    verify(res).setHeader("Keep-Alive", "timeout=5, max=100");
    verify(res).setHeader("Connection", "Keep-Alive");
    verify(res).setHeader("Keep-Alive", "timeout=5, max=100");
    verify(res).setHeader("Connection", "Keep-Alive");
    verify(res).setHeader("Keep-Alive", "timeout=5, max=100");
    verify(res).setHeader("Connection", "Keep-Alive");
    verify(res).setHeader("Keep-Alive", "timeout=5, max=100");
    verify(res).setHeader("Connection", "Keep-Alive");
    verify(res).setHeader("Keep-Alive", "timeout=5, max=100");
    verify(res).setHeader("Connection", "Keep-Alive");
    verify(res).setHeader("Keep-Alive", "timeout=5, max=100");
    verify(res).setHeader("Connection", "Keep-Alive");
    verify(res).setHeader("Keep-Alive", "timeout=5, max=100");
    verify(res).setHeader("Connection", "Keep-Alive");
    verify(res).setHeader("Keep-Alive", "timeout=5, max=100");
    verify(res).setHeader("Connection", "Keep-Alive");
    verify(res).setHeader("Keep-Alive", "timeout=5, max=100");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_hYlq0_1() throws Exception {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    when(request.getMethod()).thenReturn("GET");
    when(request.getRequestURI()).thenReturn("/ping");
    when(request.getParameter("name")).thenReturn("John");
    when(request.getParameter("age")).thenReturn("30");
    when(request.getParameter("gender")).thenReturn("male");
    when(request.getParameter("country")).thenReturn("USA");
    when(request.getParameter("city")).thenReturn("New York");
    when(request.getParameter("state")).thenReturn("New York");
    when(request.getParameter("zip")).thenReturn("10001");
    when(request.getParameter("phone")).thenReturn("1234567890");
    when(request.getParameter("email")).thenReturn("john@example.com");
    when(request.getParameter("message")).thenReturn("Hello, world!");
    when(request.getParameter("submit")).thenReturn("Submit");
    servlet.doGet(request, response);
    assertEquals("John", request.getParameter("name"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_hYlq0_2() throws Exception {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    when(request.getMethod()).thenReturn("GET");
    when(request.getRequestURI()).thenReturn("/ping");
    when(request.getParameter("name")).thenReturn("John");
    when(request.getParameter("age")).thenReturn("30");
    when(request.getParameter("gender")).thenReturn("male");
    when(request.getParameter("country")).thenReturn("USA");
    when(request.getParameter("city")).thenReturn("New York");
    when(request.getParameter("state")).thenReturn("New York");
    when(request.getParameter("zip")).thenReturn("10001");
    when(request.getParameter("phone")).thenReturn("1234567890");
    when(request.getParameter("email")).thenReturn("john@example.com");
    when(request.getParameter("message")).thenReturn("Hello, world!");
    when(request.getParameter("submit")).thenReturn("Submit");
    servlet.doGet(request, response);
    assertEquals("30", request.getParameter("age"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_hYlq0_3() throws Exception {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    when(request.getMethod()).thenReturn("GET");
    when(request.getRequestURI()).thenReturn("/ping");
    when(request.getParameter("name")).thenReturn("John");
    when(request.getParameter("age")).thenReturn("30");
    when(request.getParameter("gender")).thenReturn("male");
    when(request.getParameter("country")).thenReturn("USA");
    when(request.getParameter("city")).thenReturn("New York");
    when(request.getParameter("state")).thenReturn("New York");
    when(request.getParameter("zip")).thenReturn("10001");
    when(request.getParameter("phone")).thenReturn("1234567890");
    when(request.getParameter("email")).thenReturn("john@example.com");
    when(request.getParameter("message")).thenReturn("Hello, world!");
    when(request.getParameter("submit")).thenReturn("Submit");
    servlet.doGet(request, response);
    assertEquals("male", request.getParameter("gender"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_hYlq0_4() throws Exception {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    when(request.getMethod()).thenReturn("GET");
    when(request.getRequestURI()).thenReturn("/ping");
    when(request.getParameter("name")).thenReturn("John");
    when(request.getParameter("age")).thenReturn("30");
    when(request.getParameter("gender")).thenReturn("male");
    when(request.getParameter("country")).thenReturn("USA");
    when(request.getParameter("city")).thenReturn("New York");
    when(request.getParameter("state")).thenReturn("New York");
    when(request.getParameter("zip")).thenReturn("10001");
    when(request.getParameter("phone")).thenReturn("1234567890");
    when(request.getParameter("email")).thenReturn("john@example.com");
    when(request.getParameter("message")).thenReturn("Hello, world!");
    when(request.getParameter("submit")).thenReturn("Submit");
    servlet.doGet(request, response);
    assertEquals("USA", request.getParameter("country"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_hYlq0_5() throws Exception {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    when(request.getMethod()).thenReturn("GET");
    when(request.getRequestURI()).thenReturn("/ping");
    when(request.getParameter("name")).thenReturn("John");
    when(request.getParameter("age")).thenReturn("30");
    when(request.getParameter("gender")).thenReturn("male");
    when(request.getParameter("country")).thenReturn("USA");
    when(request.getParameter("city")).thenReturn("New York");
    when(request.getParameter("state")).thenReturn("New York");
    when(request.getParameter("zip")).thenReturn("10001");
    when(request.getParameter("phone")).thenReturn("1234567890");
    when(request.getParameter("email")).thenReturn("john@example.com");
    when(request.getParameter("message")).thenReturn("Hello, world!");
    when(request.getParameter("submit")).thenReturn("Submit");
    servlet.doGet(request, response);
    assertEquals("New York", request.getParameter("city"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_hYlq0_6() throws Exception {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    when(request.getMethod()).thenReturn("GET");
    when(request.getRequestURI()).thenReturn("/ping");
    when(request.getParameter("name")).thenReturn("John");
    when(request.getParameter("age")).thenReturn("30");
    when(request.getParameter("gender")).thenReturn("male");
    when(request.getParameter("country")).thenReturn("USA");
    when(request.getParameter("city")).thenReturn("New York");
    when(request.getParameter("state")).thenReturn("New York");
    when(request.getParameter("zip")).thenReturn("10001");
    when(request.getParameter("phone")).thenReturn("1234567890");
    when(request.getParameter("email")).thenReturn("john@example.com");
    when(request.getParameter("message")).thenReturn("Hello, world!");
    when(request.getParameter("submit")).thenReturn("Submit");
    servlet.doGet(request, response);
    assertEquals("New York", request.getParameter("state"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_hYlq0_7() throws Exception {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    when(request.getMethod()).thenReturn("GET");
    when(request.getRequestURI()).thenReturn("/ping");
    when(request.getParameter("name")).thenReturn("John");
    when(request.getParameter("age")).thenReturn("30");
    when(request.getParameter("gender")).thenReturn("male");
    when(request.getParameter("country")).thenReturn("USA");
    when(request.getParameter("city")).thenReturn("New York");
    when(request.getParameter("state")).thenReturn("New York");
    when(request.getParameter("zip")).thenReturn("10001");
    when(request.getParameter("phone")).thenReturn("1234567890");
    when(request.getParameter("email")).thenReturn("john@example.com");
    when(request.getParameter("message")).thenReturn("Hello, world!");
    when(request.getParameter("submit")).thenReturn("Submit");
    servlet.doGet(request, response);
    assertEquals("10001", request.getParameter("zip"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_hYlq0_8() throws Exception {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    when(request.getMethod()).thenReturn("GET");
    when(request.getRequestURI()).thenReturn("/ping");
    when(request.getParameter("name")).thenReturn("John");
    when(request.getParameter("age")).thenReturn("30");
    when(request.getParameter("gender")).thenReturn("male");
    when(request.getParameter("country")).thenReturn("USA");
    when(request.getParameter("city")).thenReturn("New York");
    when(request.getParameter("state")).thenReturn("New York");
    when(request.getParameter("zip")).thenReturn("10001");
    when(request.getParameter("phone")).thenReturn("1234567890");
    when(request.getParameter("email")).thenReturn("john@example.com");
    when(request.getParameter("message")).thenReturn("Hello, world!");
    when(request.getParameter("submit")).thenReturn("Submit");
    servlet.doGet(request, response);
    assertEquals("1234567890", request.getParameter("phone"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_hYlq0_9() throws Exception {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    when(request.getMethod()).thenReturn("GET");
    when(request.getRequestURI()).thenReturn("/ping");
    when(request.getParameter("name")).thenReturn("John");
    when(request.getParameter("age")).thenReturn("30");
    when(request.getParameter("gender")).thenReturn("male");
    when(request.getParameter("country")).thenReturn("USA");
    when(request.getParameter("city")).thenReturn("New York");
    when(request.getParameter("state")).thenReturn("New York");
    when(request.getParameter("zip")).thenReturn("10001");
    when(request.getParameter("phone")).thenReturn("1234567890");
    when(request.getParameter("email")).thenReturn("john@example.com");
    when(request.getParameter("message")).thenReturn("Hello, world!");
    when(request.getParameter("submit")).thenReturn("Submit");
    servlet.doGet(request, response);
    assertEquals("john@example.com", request.getParameter("email"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_hYlq0_10() throws Exception {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    when(request.getMethod()).thenReturn("GET");
    when(request.getRequestURI()).thenReturn("/ping");
    when(request.getParameter("name")).thenReturn("John");
    when(request.getParameter("age")).thenReturn("30");
    when(request.getParameter("gender")).thenReturn("male");
    when(request.getParameter("country")).thenReturn("USA");
    when(request.getParameter("city")).thenReturn("New York");
    when(request.getParameter("state")).thenReturn("New York");
    when(request.getParameter("zip")).thenReturn("10001");
    when(request.getParameter("phone")).thenReturn("1234567890");
    when(request.getParameter("email")).thenReturn("john@example.com");
    when(request.getParameter("message")).thenReturn("Hello, world!");
    when(request.getParameter("submit")).thenReturn("Submit");
    servlet.doGet(request, response);
    assertEquals("Hello, world!", request.getParameter("message"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_hYlq0_11() throws Exception {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    when(request.getMethod()).thenReturn("GET");
    when(request.getRequestURI()).thenReturn("/ping");
    when(request.getParameter("name")).thenReturn("John");
    when(request.getParameter("age")).thenReturn("30");
    when(request.getParameter("gender")).thenReturn("male");
    when(request.getParameter("country")).thenReturn("USA");
    when(request.getParameter("city")).thenReturn("New York");
    when(request.getParameter("state")).thenReturn("New York");
    when(request.getParameter("zip")).thenReturn("10001");
    when(request.getParameter("phone")).thenReturn("1234567890");
    when(request.getParameter("email")).thenReturn("john@example.com");
    when(request.getParameter("message")).thenReturn("Hello, world!");
    when(request.getParameter("submit")).thenReturn("Submit");
    servlet.doGet(request, response);
    assertEquals("Submit", request.getParameter("submit"));
  }
}