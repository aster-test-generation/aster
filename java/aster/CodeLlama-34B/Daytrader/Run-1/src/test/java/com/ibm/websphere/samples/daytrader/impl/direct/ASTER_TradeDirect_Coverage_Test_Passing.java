/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.concurrent.TimeUnit;
import javax.jms.TextMessage;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

public class Aster_TradeDirect_Coverage_Test_Passing {
  private TradeConfig tradeConfig;
  private TextMessage textMessage;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_NullOrderID_sUEi5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.queueOrder(null, true);
      assertTrue(false);
    } catch (Exception e) {
      assertNull(e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_InvalidOrderID_bKIK7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.queueOrder(0, true);
      assertTrue(false);
    } catch (Exception e) {
      assertNull(e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_InvalidTwoPhase_iieu8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithInvalidUserID_xXOJ1() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "invalid_user";
    try {
      tradeDirect.logout(userID);
      Assertions.fail("logout should have failed");
    } catch (Exception e) {
      Assertions.assertTrue(e instanceof Exception);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithNullUserID_ctiH2() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = null;
    try {
      tradeDirect.logout(userID);
      Assertions.fail("logout should have failed");
    } catch (Exception e) {
      Assertions.assertTrue(e instanceof Exception);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithEmptyUserID_hUjM3() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "";
    try {
      tradeDirect.logout(userID);
      Assertions.fail("logout should have failed");
    } catch (Exception e) {
      Assertions.assertTrue(e instanceof Exception);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithInvalidConnection_COKj4() throws java.lang.Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "test_user";
    try {
      tradeDirect.logout(userID);
      Assertions.fail("logout should have failed");
    } catch (Exception e) {
      Assertions.assertTrue(e instanceof Exception);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder3_kcik2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = new AccountDataBean();
    QuoteDataBean quoteData = new QuoteDataBean();
    HoldingDataBean holdingData = new HoldingDataBean();
    String orderType = "test";
    double quantity = 10.0;
    Timestamp currentDate = new Timestamp(System.currentTimeMillis());
    assertNotNull(currentDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void tearDown_CDEs1() throws Exception {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_Uzzp0_BIIM0() throws Exception {
    String symbol = "ABC";
    BigDecimal changeFactor = new BigDecimal("1.5");
    double sharesTraded = 100.0;
    boolean publishQuotePriceChange = true;
    QuoteDataBean expectedQuoteDataBean = new QuoteDataBean();
    expectedQuoteDataBean.setSymbol(symbol);
    expectedQuoteDataBean.setPrice(new BigDecimal("100.0"));
    expectedQuoteDataBean.setOpen(new BigDecimal("90.0"));
    expectedQuoteDataBean.setLow(new BigDecimal("80.0"));
    expectedQuoteDataBean.setChange(10.0);
    expectedQuoteDataBean.setHigh(new BigDecimal("110.0"));
    expectedQuoteDataBean.setVolume(1000.0);
    TradeDirect tradeDirect = new TradeDirect();
    when(tradeConfig.getPublishQuotePriceChange()).thenReturn(publishQuotePriceChange);
    QuoteDataBean actualQuoteDataBean = tradeDirect.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(expectedQuoteDataBean, actualQuoteDataBean);
  }
}