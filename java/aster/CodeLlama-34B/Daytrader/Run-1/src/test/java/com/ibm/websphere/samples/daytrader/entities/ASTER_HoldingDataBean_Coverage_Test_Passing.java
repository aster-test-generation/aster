/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteIDWithQuoteNotNull_rLcL0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    holdingDataBean.setQuote(quote);
    String actualQuoteID = holdingDataBean.getQuoteID();
    Assertions.assertEquals("AAPL", actualQuoteID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteIDWithQuoteNull_bwVF1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setQuoteID("AAPL");
    String actualQuoteID = holdingDataBean.getQuoteID();
    Assertions.assertEquals("AAPL", actualQuoteID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_CfiP0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    int actual = holdingDataBean.hashCode();
    int expected = 1;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentHoldingID_HuDh0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    HoldingDataBean other = new HoldingDataBean();
    other.setHoldingID(2);
    assertFalse(holdingDataBean.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullHoldingID_jtsk1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(null);
    HoldingDataBean other = new HoldingDataBean();
    other.setHoldingID(1);
    assertFalse(holdingDataBean.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameHoldingID_EbtI2() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    HoldingDataBean other = new HoldingDataBean();
    other.setHoldingID(1);
    assertTrue(holdingDataBean.equals(other));
  }
}