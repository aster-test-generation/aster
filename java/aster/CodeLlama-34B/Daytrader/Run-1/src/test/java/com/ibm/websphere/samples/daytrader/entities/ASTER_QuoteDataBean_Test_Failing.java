/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithValidInput_aOTY0_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100), BigDecimal.valueOf(90), BigDecimal.valueOf(80), BigDecimal.valueOf(95), 5);
    quoteDataBean.print();
    assertEquals("QuoteDataBean{symbol='AAPL', companyName='Apple Inc.', volume=1000000, price=100, open=90, low=80, high=95, change=5}", quoteDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithNullInput_UbKm2_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean(null, null, 0, null, null, null, null, 0);
    quoteDataBean.print();
    assertEquals("QuoteDataBean{symbol='null', companyName='null', volume=0, price=null, open=null, low=null, high=null, change=0}", quoteDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLow_ValidInput_bJfs0_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(70.00), 10.0);
    BigDecimal low = quoteDataBean.getLow();
    assertEquals(BigDecimal.valueOf(70.00), low);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLow_NullInput_QWFJ2_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(70.00), 10.0);
    BigDecimal low = quoteDataBean.getLow();
    assertNull(low);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPriceWithInvalidValue_jItA2_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, BigDecimal.valueOf(100.00), BigDecimal.valueOf(90.00), BigDecimal.valueOf(80.00), BigDecimal.valueOf(110.00), 10.0);
    quoteDataBean.setPrice(BigDecimal.valueOf(-10.00));
    assertEquals(BigDecimal.valueOf(100.00), quoteDataBean.getPrice());
  }
}