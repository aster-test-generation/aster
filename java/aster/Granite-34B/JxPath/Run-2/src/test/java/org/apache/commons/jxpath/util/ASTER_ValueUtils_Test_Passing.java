/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Method;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_nullCollection_returnsNull_xIUN0() {
        Object collection = null;
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_emptyArray_returnsNull_kpdt1() {
        Object collection = new int[0];
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_arrayWithOneElement_returnsCorrectValue_Kjdu2() {
        Object collection = new int[]{1};
        int index = 0;
        Object expected = 1;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_negativeIndex_returnsNull_eCYP3() {
        Object collection = new int[]{1, 2, 3};
        int index = -1;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_indexGreaterThanSize_returnsNull_hhOf4() {
        Object collection = new int[]{1, 2, 3};
        int index = 3;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_listWithOneElement_returnsCorrectValue_AymK5() {
        Object collection = new ArrayList<>(Arrays.asList(1));
        int index = 0;
        Object expected = 1;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_collectionWithOneElement_returnsCorrectValue_hgUy6() {
        Object collection = Arrays.asList(1);
        int index = 0;
        Object expected = 1;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_collectionWithMultipleElements_returnsCorrectValue_IPZu7() {
        Object collection = Arrays.asList(1, 2, 3);
        int index = 1;
        Object expected = 2;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_collectionWithOneElement_returnsNullWhenIndexIsOne_hRVE8() {
        Object collection = Arrays.asList(1);
        int index = 1;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_collectionWithMultipleElements_returnsNullWhenIndexIsGreaterThanSize_PYdk9() {
        Object collection = Arrays.asList(1, 2, 3);
        int index = 3;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithCollection_iqYM2() {
        Object value = new ArrayList<>();
        boolean actual = ValueUtils.isCollection(value);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray_KdvR0() {
        Class clazz = new int[0].getClass();
        assertEquals(1, ValueUtils.getCollectionHint(clazz));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollection_wQnh1() {
        Class clazz = new ArrayList().getClass();
        assertEquals(1, ValueUtils.getCollectionHint(clazz));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrimitive_RzON2() {
        Class clazz = int.class;
        assertEquals(-1, ValueUtils.getCollectionHint(clazz));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInterface_tgKn3() {
        Class clazz = Cloneable.class;
        assertEquals(0, ValueUtils.getCollectionHint(clazz));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinalClass_gDmL4() {
        Class clazz = String.class;
        assertEquals(-1, ValueUtils.getCollectionHint(clazz));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_withArray_WVfD1() {
        Object[] array = new Object[5];
        ValueUtils.setValue(array, 2, "value");
        assertEquals("value", array[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_withList_VAqU2() {
        List<String> list = new ArrayList<>();
        list.add("a");
        list.add("b");
        list.add("c");
        ValueUtils.setValue(list, 1, "value");
        assertEquals("value", list.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_withUnsupportedCollection_aZTt3() {
        Set<String> set = new HashSet<>();
        set.add("a");
        set.add("b");
        set.add("c");
        try {
            ValueUtils.setValue(set, 1, "value");
        } catch (UnsupportedOperationException e) {
            assertEquals("Cannot set value of an element of a java.util.HashSet", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_withNullCollection_vlzC4() {
        ValueUtils.setValue(null, 1, "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_MGyo0() {
        Method method = null;
        Method result = ValueUtils.getAccessibleMethod(method);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullCollection_Olct0() {
        Object collection = null;
        int expected = 0;
        int actual = ValueUtils.getLength(collection);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayCollection_FAmL1() {
        Object[] collection = new Object[5];
        int expected = 5;
        int actual = ValueUtils.getLength(collection);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectionCollection_SRwv2() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        collection.add(new Object());
        int expected = 2;
        int actual = ValueUtils.getLength(collection);
        assertEquals(expected, actual);
    }
}