/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.container;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Container;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ContainerPointerFactory_Test_Failing {
    ContainerPointerFactory containerpointerfactory;
    NodePointer parent;
    Container container;
    QName name;
    Object bean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOrderTest_coverage_zUgZ2() {
        ContainerPointerFactory containerPointerFactory = new ContainerPointerFactory();
        int actual = containerPointerFactory.getOrder();
        int expected = 0;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOrderTest_coverage_azMr3() {
        ContainerPointerFactory containerPointerFactory = new ContainerPointerFactory();
        int actual = containerPointerFactory.getOrder();
        int expected = 1;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOrderTest_coverage_eyIt4() {
        ContainerPointerFactory containerPointerFactory = new ContainerPointerFactory();
        int actual = containerPointerFactory.getOrder();
        int expected = -1;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOrderTest_coverage_FPCl5() {
        ContainerPointerFactory containerPointerFactory = new ContainerPointerFactory();
        int actual = containerPointerFactory.getOrder();
        int expected = Integer.MAX_VALUE;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOrderTest_coverage_MFAK6() {
        ContainerPointerFactory containerPointerFactory = new ContainerPointerFactory();
        int actual = containerPointerFactory.getOrder();
        int expected = Integer.MIN_VALUE;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer_Bgly0() throws Exception {
        parent = mock(NodePointer.class);
        container = mock(Container.class);
        name = mock(QName.class);
        bean = mock(Object.class);
        containerpointerfactory = new ContainerPointerFactory();
        when(bean instanceof Container).thenReturn(true);
        NodePointer result = containerpointerfactory.createNodePointer(parent, name, bean);
        verify(bean, times(1)).getClass();
        assertEquals(new ContainerPointer(parent, container), result);
    }
}