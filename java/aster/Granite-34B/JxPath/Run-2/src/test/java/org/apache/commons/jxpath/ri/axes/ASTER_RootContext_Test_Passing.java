/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RootContext_Test_Passing {
    RootContext rootcontext;
    JXPathContextReferenceImpl jxpathContext;
    DOMNodePointer pointer;
    JXPathContextReferenceImpl parentContext;
    Object contextBean;
    Locale locale;
    String id;
    VariablePointer parent;
    NodePointer parentNode;
    QName name;
    Object root;
    NodePointer contextPointer;
    private Function function;
    private Object[] parameters;
    private static int MAX_REGISTER = 4;
    private int availableRegister = 0;
    private Object[] registers;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetJXPathContext() throws Exception {
        jxpathContext = mock(JXPathContextReferenceImpl.class);
        rootcontext = new RootContext(jxpathContext, null);
        JXPathContext actual = rootcontext.getJXPathContext();
        assertEquals(jxpathContext, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetFunction() throws Exception {
        jxpathContext = mock(JXPathContextReferenceImpl.class);
        pointer = mock(DOMNodePointer.class);
        function = mock(Function.class);
        parameters = new Object[0];
        rootcontext = new RootContext(jxpathContext, pointer);
        when(jxpathContext.getFunction(any(QName.class), any(Object[].class))).thenReturn(function);
        Function result = rootcontext.getFunction(new QName("functionName"), parameters);
        assertEquals(function, result);
    }
}