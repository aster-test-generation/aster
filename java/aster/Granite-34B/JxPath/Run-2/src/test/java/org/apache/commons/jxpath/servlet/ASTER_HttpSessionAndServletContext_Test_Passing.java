/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_HttpSessionAndServletContext_Test_Passing {
    private HttpSession session;
    private ServletContext context;
    private HttpSessionAndServletContext httpsessionandservletcontext;
    @Mock
    private HttpSession mockSession;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSessionTest_NullSessionAndContext_noMJ3() {
        HttpSession session = null;
        ServletContext context = null;
        HttpSessionAndServletContext httpSessionAndServletContext = new HttpSessionAndServletContext(session, context);
        HttpSession result = httpSessionAndServletContext.getSession();
        assertEquals(session, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletContext() throws Exception {
        context = mock(ServletContext.class);
        httpsessionandservletcontext = new HttpSessionAndServletContext(null, context);
        when(context.getAttribute("key")).thenReturn("value");
        assertEquals("value", httpsessionandservletcontext.getServletContext().getAttribute("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSessionTest_VxHS0_ShKL0() {
        HttpSession session = mock(HttpSession.class);
        ServletContext context = mock(ServletContext.class);
        HttpSessionAndServletContext httpSessionAndServletContext = new HttpSessionAndServletContext(session, context);
        HttpSession result = httpSessionAndServletContext.getSession();
        assertEquals(session, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSessionTest_NullSession_rHCh1_XrHJ0() {
        HttpSession session = null;
        ServletContext context = mock(ServletContext.class);
        HttpSessionAndServletContext httpSessionAndServletContext = new HttpSessionAndServletContext(session, context);
        HttpSession result = httpSessionAndServletContext.getSession();
        assertEquals(session, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSessionTest_NullContext_yqgz2_vQeB0() {
        HttpSession session = mock(HttpSession.class);
        ServletContext context = null;
        HttpSessionAndServletContext httpSessionAndServletContext = new HttpSessionAndServletContext(session, context);
        HttpSession result = httpSessionAndServletContext.getSession();
        assertEquals(session, result);
    }
}