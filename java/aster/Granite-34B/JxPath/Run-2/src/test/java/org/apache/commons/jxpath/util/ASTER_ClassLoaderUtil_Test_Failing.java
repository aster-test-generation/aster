/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ClassLoaderUtil_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithClassLoader_jJvz0() throws Exception {
        ClassLoader classLoader = new ClassLoader() {
        };
        String className = "example.ClassName";
        boolean initialize = true;
        Class expected = Object.class;
        Class actual = ClassLoaderUtil.getClass(classLoader, className, initialize);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithoutClassLoader_fnix1() throws Exception {
        ClassLoader classLoader = null;
        String className = "example.ClassName";
        boolean initialize = true;
        Class expected = Object.class;
        Class actual = ClassLoaderUtil.getClass(classLoader, className, initialize);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithClassLoaderAndClassName_munk0() throws Exception {
        ClassLoader classLoader = new ClassLoader() {
        };
        String className = "example.ClassName";
        Class expectedClass = Class.forName(className);
        Class actualClass = ClassLoaderUtil.getClass(classLoader, className);
        assertEquals(expectedClass, actualClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithNullClassName_diWI2() throws Exception {
        String className = null;
        try {
            ClassLoaderUtil.getClass(className);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
}