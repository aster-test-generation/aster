/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceContext_Test_Failing {
    NamespaceContext namespacecontext;
    @Mock
    SelfContext selfContext;
    @Mock
    NodeTypeTest nodeTypeTest;
    private NodeIterator iterator;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    private NodeTest nodeTest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        namespacecontext = new NamespaceContext(selfContext, nodeTypeTest);
        when(selfContext.getCurrentPosition()).thenReturn(1);
        when(selfContext.nextNode()).thenReturn(true);
        boolean result = namespacecontext.setPosition(2);
        assertFalse(result);
        verify(selfContext, times(1)).getCurrentPosition();
        verify(selfContext, times(1)).nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ValidInput_ReturnsTrue_GAQJ0() {
        NamespaceContext context = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(2)), new NodeTypeTest(3));
        int position = 5;
        boolean result = context.setPosition(position);
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_InvalidInput_ReturnsFalse_dcxV1() {
        NamespaceContext context = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(2)), new NodeTypeTest(3));
        int position = -1;
        boolean result = context.setPosition(position);
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ResetPosition_ReturnsTrue_Yvmt2() {
        NamespaceContext context = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(2)), new NodeTypeTest(3));
        int position = 5;
        context.setPosition(position);
        position = 2;
        boolean result = context.setPosition(position);
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_fid2() throws Exception {
        namespacecontext = new NamespaceContext(selfContext, nodeTypeTest);
        when(selfContext.getCurrentPosition()).thenReturn(1);
        when(selfContext.nextNode()).thenReturn(true);
        boolean result = namespacecontext.setPosition(2);
        assertTrue(result);
        verify(selfContext, times(1)).getCurrentPosition();
        verify(selfContext, times(1)).nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode1_janx0_fid2() {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(2)), new NodeTypeTest(3));
        boolean actual = namespaceContext.nextNode();
        boolean expected = true;
        assertEquals(expected, actual);
    }
}