/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CollectionPointer_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void namespacePointerTest3_CVKo2() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        NodePointer nodePointer = collectionPointer.namespacePointer("namespace");
        Assertions.assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_Jssb0_fid1() {
        final Object value = new CollectionPointer(new Object(), new Locale("")).getNode();
        Assertions.assertTrue(JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void namespacePointerTest2_bkbL1() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        NodePointer nodePointer = collectionPointer.namespacePointer("namespace");
        Assertions.assertNotEquals(null, nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath1_xTLc0_fid1() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        assertEquals("Result is not as expected", "/", collectionPointer.asPath());
    }
}