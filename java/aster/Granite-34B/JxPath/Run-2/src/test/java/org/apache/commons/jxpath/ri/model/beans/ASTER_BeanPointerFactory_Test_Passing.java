/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointerFactory_Test_Passing {
    BeanPointerFactory beanpointerfactory;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer_INuJ0() {
        BeanPointerFactory factory = new BeanPointerFactory();
        Object bean = new Object();
        Locale locale = Locale.getDefault();
        NodePointer nodePointer = factory.createNodePointer(new QName("name"), bean, locale);
        assertNotNull(nodePointer);
        assertEquals("name", nodePointer.getName().getName());
        assertEquals(bean, nodePointer.getBaseValue());
        assertEquals(locale, nodePointer.getLocale());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOrderTest_lineCoverage_IVpw1() {
        BeanPointerFactory beanPointerFactory = new BeanPointerFactory();
        beanPointerFactory.getOrder();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOrderTest_branchCoverage_case2_FWzR3() {
        BeanPointerFactory beanPointerFactory = new BeanPointerFactory();
        int actual = beanPointerFactory.getOrder();
        org.junit.jupiter.api.Assertions.assertNotEquals(0, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer() throws Exception {
        beanpointerfactory = new BeanPointerFactory();
        NodePointer parent = mock(NodePointer.class);
        QName name = mock(QName.class);
        Object bean = new Object();
        NodePointer result = beanpointerfactory.createNodePointer(parent, name, bean);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer_INuJ0_1() {
        BeanPointerFactory factory = new BeanPointerFactory();
        Object bean = new Object();
        Locale locale = Locale.getDefault();
        NodePointer nodePointer = factory.createNodePointer(new QName("name"), bean, locale);
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer_INuJ0_2() {
        BeanPointerFactory factory = new BeanPointerFactory();
        Object bean = new Object();
        Locale locale = Locale.getDefault();
        NodePointer nodePointer = factory.createNodePointer(new QName("name"), bean, locale);
        assertEquals("name", nodePointer.getName().getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer_INuJ0_3() {
        BeanPointerFactory factory = new BeanPointerFactory();
        Object bean = new Object();
        Locale locale = Locale.getDefault();
        NodePointer nodePointer = factory.createNodePointer(new QName("name"), bean, locale);
        assertEquals(bean, nodePointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer_INuJ0_4() {
        BeanPointerFactory factory = new BeanPointerFactory();
        Object bean = new Object();
        Locale locale = Locale.getDefault();
        NodePointer nodePointer = factory.createNodePointer(new QName("name"), bean, locale);
        assertEquals(locale, nodePointer.getLocale());
    }
}