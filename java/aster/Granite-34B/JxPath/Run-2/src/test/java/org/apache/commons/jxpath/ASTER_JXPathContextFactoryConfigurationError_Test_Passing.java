/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathContextFactoryConfigurationError_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExceptionWithCause_oyfk2_1() {
        Exception cause = new Exception("This is a test cause");
        JXPathContextFactoryConfigurationError error = new JXPathContextFactoryConfigurationError(cause);
        Exception exception = error.getException();
        assertNotNull(exception);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExceptionWithCause_oyfk2_2() {
        Exception cause = new Exception("This is a test cause");
        JXPathContextFactoryConfigurationError error = new JXPathContextFactoryConfigurationError(cause);
        Exception exception = error.getException();
        assertEquals(cause, exception);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExceptionWithMessageAndCause_YuHs3_1() {
        String message = "This is a test message";
        Exception cause = new Exception("This is a test cause");
        JXPathContextFactoryConfigurationError error = new JXPathContextFactoryConfigurationError(cause, message);
        Exception exception = error.getException();
        assertNotNull(exception);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExceptionWithMessageAndCause_YuHs3_2() {
        String message = "This is a test cause";
        Exception cause = new Exception("This is a test cause");
        JXPathContextFactoryConfigurationError error = new JXPathContextFactoryConfigurationError(cause, message);
        Exception exception = error.getException();
        assertEquals(message, exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExceptionWithMessageAndCause_YuHs3_3() {
        String message = "This is a test message";
        Exception cause = new Exception("This is a test cause");
        JXPathContextFactoryConfigurationError error = new JXPathContextFactoryConfigurationError(cause, message);
        Exception exception = error.getException();
        assertEquals(cause, exception);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMessage_withNoMessageAndNoException_returnsNull_SwDu0() {
        JXPathContextFactoryConfigurationError error = new JXPathContextFactoryConfigurationError();
        String message = error.getMessage();
        Assertions.assertNull(message);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMessage_withNoMessageAndExceptionWithMessage_returnsExceptionMessage_MpjI1() {
        Exception exception = new Exception("exception message");
        JXPathContextFactoryConfigurationError error = new JXPathContextFactoryConfigurationError(exception);
        String message = error.getMessage();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMessage_withMessageAndNoException_returnsMessage_KpCg2() {
        String message = "error message";
        JXPathContextFactoryConfigurationError error = new JXPathContextFactoryConfigurationError(message);
        String actualMessage = error.getMessage();
        Assertions.assertEquals(message, actualMessage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMessage_withMessageAndExceptionWithMessage_returnsMessage_HWdL3() {
        String message = "error message";
        Exception exception = new Exception("exception message");
        JXPathContextFactoryConfigurationError error = new JXPathContextFactoryConfigurationError(exception, message);
        String actualMessage = error.getMessage();
        Assertions.assertEquals(message, actualMessage);
    }
}