/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ParentContext_Test_Failing {
    ParentContext parentcontext;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    private NodeTest nodeTest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        parentcontext = new ParentContext(namespaceContext, nodeTest);
        when(parentcontext.setPosition(anyInt())).thenCallRealMethod();
        assertTrue(parentcontext.setPosition(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset() throws Exception {
        SelfContext selfContext = mock(SelfContext.class);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(0));
        parentcontext = new ParentContext(namespaceContext, new NodeTypeTest(0));
        parentcontext.reset();
        verify(selfContext, times(1)).reset();
        assertEquals(false, setStarted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCurrentPositionTest2_QNRw1() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(2));
        SelfContext selfContext = new SelfContext(namespaceContext, new NodeTypeTest(2));
        ParentContext parentContext = new ParentContext(selfContext, new NodeTypeTest(2));
        int result = parentContext.getCurrentPosition();
        assertEquals(2, result);
    }
}