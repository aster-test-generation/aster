/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_InitialContext_Test_Failing {
    private NodePointer nodePointer;
    private boolean collection;
    InitialContext initialcontext;
    NamespaceContext namespacecontext;
    SelfContext selfcontext;
    NodeTypeTest nodetypetest;
    private boolean started = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWhenCollectionAndPositionIsBetweenOneAndNodePointerLength_SbBD0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), null));
        int position = 5;
        boolean expected = true;
        boolean actual = initialContext.setPosition(position);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWhenCollectionAndPositionIsBelowOne_trPR1() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), null));
        int position = 0;
        boolean expected = false;
        boolean actual = initialContext.setPosition(position);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWhenCollectionAndPositionIsAboveNodePointerLength_YGUq2() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), null));
        int position = 10;
        boolean expected = false;
        boolean actual = initialContext.setPosition(position);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWhenNotCollectionAndPositionIsOne_ZBIc3() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), null));
        int position = 1;
        boolean expected = true;
        boolean actual = initialContext.setPosition(position);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWhenNotCollectionAndPositionIsNotOne_ViMC4() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), null));
        int position = 5;
        boolean expected = false;
        boolean actual = initialContext.setPosition(position);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSingleNodePointer_Vrcx0() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        InitialContext initialContext = new InitialContext(parentContext);
        Pointer result = initialContext.getSingleNodePointer();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSingleNodePointer_coverage_kGbe1_2() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        InitialContext initialContext = new InitialContext(parentContext);
        Pointer result = initialContext.getSingleNodePointer();
        assertEquals(result, initialContext.getSingleNodePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCurrentNodePointerTest_knQF0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)));
        NodePointer nodePointer = initialContext.getCurrentNodePointer();
        assertEquals(nodePointer, initialContext.getCurrentNodePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode() throws Exception {
        namespacecontext = mock(NamespaceContext.class);
        selfcontext = mock(SelfContext.class);
        nodetypetest = mock(NodeTypeTest.class);
        initialcontext = new InitialContext(namespacecontext);
        when(namespacecontext.nextNode()).thenReturn(true);
        assertTrue(initialcontext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest_cgxE0() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        InitialContext initialContext = new InitialContext(namespaceContext);
        Object value = initialContext.getValue();
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest_DYla1() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(2));
        InitialContext initialContext = new InitialContext(namespaceContext);
        Object value = initialContext.getValue();
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest_iMED2() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(3));
        InitialContext initialContext = new InitialContext(namespaceContext);
        Object value = initialContext.getValue();
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest_hfnY3() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(4));
        InitialContext initialContext = new InitialContext(namespaceContext);
        Object value = initialContext.getValue();
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest_OxMk4() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(5));
        InitialContext initialContext = new InitialContext(namespaceContext);
        Object value = initialContext.getValue();
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest_DPJM5() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(6));
        InitialContext initialContext = new InitialContext(namespaceContext);
        Object value = initialContext.getValue();
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest_oYOe6() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(7));
        InitialContext initialContext = new InitialContext(namespaceContext);
        Object value = initialContext.getValue();
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest_AYRQ7() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(8));
        InitialContext initialContext = new InitialContext(namespaceContext);
        Object value = initialContext.getValue();
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest_bCLX8() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(9));
        InitialContext initialContext = new InitialContext(namespaceContext);
        Object value = initialContext.getValue();
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest_WxDu9() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(10));
        InitialContext initialContext = new InitialContext(namespaceContext);
        Object value = initialContext.getValue();
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextSet() throws Exception {
        SelfContext selfContext = mock(SelfContext.class);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
        initialcontext = new InitialContext(namespaceContext);
        boolean result = initialcontext.nextSet();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_kznW0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)));
        boolean result = initialContext.nextSet();
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSingleNodePointer_SyXT0() throws Exception {
        nodePointer = mock(NodePointer.class);
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
        initialcontext = new InitialContext(namespaceContext);
        when(initialcontext.getSingleNodePointer()).thenReturn(nodePointer);
        Pointer pointer = initialcontext.getSingleNodePointer();
        assertEquals(nodePointer, pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSingleNodePointer_coverage_kGbe1() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        InitialContext initialContext = new InitialContext(parentContext);
        Pointer result = initialContext.getSingleNodePointer();
        assertNotNull(result);
        assertEquals(result, initialContext.getSingleNodePointer());
    }
}