/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Step_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependentWithPredicatesNull_zApv0() {
        Step step = new Step(0, new NodeTypeTest(0), null);
        boolean actual = step.isContextDependent();
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_eceO0() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
        assertEquals("", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_DFtj1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[0]);
        assertEquals("", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_kIFb3_fid1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString5_gple4_fid1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString8_PftM7_fid1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[6]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString9_nDkm8_fid1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[7]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString10_Egxh9_fid1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[8]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString11_TyQc10_fid1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[9]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString14_BTQs13_fid1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[12]);
    }
}