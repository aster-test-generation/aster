/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMPointerFactory_Test_Passing {
    DOMPointerFactory dompointerfactory;
    NodePointer parent;
    QName name;
    Object bean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerForNonNodeBean_IhAE1() {
        DOMPointerFactory factory = new DOMPointerFactory();
        Object bean = new Object(); // initialize non-node object
        Locale locale = Locale.getDefault(); // initialize locale
        NodePointer pointer = factory.createNodePointer(new QName("name"), bean, locale);
        assertNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer_1() throws Exception {
        dompointerfactory = new DOMPointerFactory();
        parent = mock(NodePointer.class);
        name = mock(QName.class);
        bean = mock(Node.class);
        NodePointer nodePointer = dompointerfactory.createNodePointer(parent, name, bean);
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer_2() throws Exception {
        dompointerfactory = new DOMPointerFactory();
        parent = mock(NodePointer.class);
        name = mock(QName.class);
        bean = mock(Node.class);
        NodePointer nodePointer = dompointerfactory.createNodePointer(parent, name, bean);
        assertEquals(parent, nodePointer.getParent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer_3() throws Exception {
        dompointerfactory = new DOMPointerFactory();
        parent = mock(NodePointer.class);
        name = mock(QName.class);
        bean = mock(Node.class);
        NodePointer nodePointer = dompointerfactory.createNodePointer(parent, name, bean);
        assertEquals(bean, nodePointer.getNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrder_PKFr0_BlFA0() {
        DOMPointerFactory factory = new DOMPointerFactory();
        int actual = factory.getOrder();
        int expected = DOMPointerFactory.DOM_POINTER_FACTORY_ORDER;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderWithCoverage_TEVZ1_Jptk0_1() {
        DOMPointerFactory factory = new DOMPointerFactory();
        int actual = factory.getOrder();
        int expected = DOMPointerFactory.DOM_POINTER_FACTORY_ORDER;
        DOMPointerFactory factory1 = new DOMPointerFactory();
        int actual1 = factory1.getOrder();
        DOMPointerFactory factory2 = new DOMPointerFactory();
        int actual2 = factory2.getOrder();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderWithCoverage_TEVZ1_Jptk0_2() {
        DOMPointerFactory factory = new DOMPointerFactory();
        int actual = factory.getOrder();
        int expected = DOMPointerFactory.DOM_POINTER_FACTORY_ORDER;
        DOMPointerFactory factory1 = new DOMPointerFactory();
        int actual1 = factory1.getOrder();
        DOMPointerFactory factory2 = new DOMPointerFactory();
        int actual2 = factory2.getOrder();
        assertEquals(expected, actual1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderWithCoverage_TEVZ1_Jptk0_3() {
        DOMPointerFactory factory = new DOMPointerFactory();
        int actual = factory.getOrder();
        int expected = DOMPointerFactory.DOM_POINTER_FACTORY_ORDER;
        DOMPointerFactory factory1 = new DOMPointerFactory();
        int actual1 = factory1.getOrder();
        DOMPointerFactory factory2 = new DOMPointerFactory();
        int actual2 = factory2.getOrder();
        assertEquals(expected, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer() throws Exception {
        dompointerfactory = new DOMPointerFactory();
        parent = mock(NodePointer.class);
        name = mock(QName.class);
        bean = mock(Node.class);
        NodePointer nodePointer = dompointerfactory.createNodePointer(parent, name, bean);
        assertNotNull(nodePointer);
        assertEquals(parent, nodePointer.getParent());
        assertEquals(bean, nodePointer.getNode());
    }
}