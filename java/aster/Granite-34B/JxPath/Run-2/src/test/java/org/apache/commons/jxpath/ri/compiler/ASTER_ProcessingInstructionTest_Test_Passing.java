/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ProcessingInstructionTest_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getTargetNullTest_anJd1() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest(null);
        String target = processingInstructionTest.getTarget();
        assert target == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getTargetEmptyTest_dCep2() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("");
        String target = processingInstructionTest.getTarget();
        assert target.equals("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getTargetLengthTest_tPUJ3() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target");
        String target = processingInstructionTest.getTarget();
        assert target.length() == 6;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getTargetCaseTest_BUTs4() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("TARGET");
        String target = processingInstructionTest.getTarget();
        assert target.equals("TARGET");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getTargetSpecialCharTest_HyvR5() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("!@#$%^&*()_+");
        String target = processingInstructionTest.getTarget();
        assert target.equals("!@#$%^&*()_+");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_VrMD0_yKfk0() {
        ProcessingInstructionTest testObject = new ProcessingInstructionTest("target");
        String expected = "processing-instruction('" + testObject.getTarget() + "')";
        String actual = testObject.toString();
        assertEquals(expected, actual);
    }
}