/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationLessThan_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompareWithCompareAs0_ONal0() {
        CoreOperationLessThan coreOperationLessThan = new CoreOperationLessThan(new Constant("string"), new Constant(1));
        boolean actual = coreOperationLessThan.evaluateCompare(0);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompareWithCompareAs1_xtcf1() {
        CoreOperationLessThan coreOperationLessThan = new CoreOperationLessThan(new Constant("string"), new Constant(1));
        boolean actual = coreOperationLessThan.evaluateCompare(1);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompareWithCompareAsminus1_MtnB2() {
        CoreOperationLessThan coreOperationLessThan = new CoreOperationLessThan(new Constant("string"), new Constant(1));
        boolean actual = coreOperationLessThan.evaluateCompare(-1);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_kYGw0() {
        Constant constant1 = new Constant("string");
        Constant constant2 = new Constant(1);
        CoreOperationLessThan coreOperationLessThan = new CoreOperationLessThan(constant1, constant2);
        String symbol = coreOperationLessThan.getSymbol();
        assertEquals("<", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_dBZm1() {
        Constant constant1 = new Constant("string");
        Constant constant2 = new Constant(1);
        CoreOperationLessThan coreOperationLessThan = new CoreOperationLessThan(constant1, constant2);
        String symbol = coreOperationLessThan.getSymbol();
        assertNotEquals(">", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_wCfs2() {
        Constant constant1 = new Constant("string");
        Constant constant2 = new Constant(1);
        CoreOperationLessThan coreOperationLessThan = new CoreOperationLessThan(constant1, constant2);
        String symbol = coreOperationLessThan.getSymbol();
        assertNotNull(symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_Whhw3() {
        Constant constant1 = new Constant("string");
        Constant constant2 = new Constant(1);
        CoreOperationLessThan coreOperationLessThan = new CoreOperationLessThan(constant1, constant2);
        String symbol = coreOperationLessThan.getSymbol();
        assertTrue(symbol.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_pQNk4() {
        Constant constant1 = new Constant("string");
        Constant constant2 = new Constant(1);
        CoreOperationLessThan coreOperationLessThan = new CoreOperationLessThan(constant1, constant2);
        String symbol = coreOperationLessThan.getSymbol();
        CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(constant1, constant2);
        String symbol2 = coreOperationLessThan2.getSymbol();
        assertEquals(symbol, symbol2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_hJdY5() {
        Constant constant1 = new Constant("string");
        Constant constant2 = new Constant(1);
        CoreOperationLessThan coreOperationLessThan = new CoreOperationLessThan(constant1, constant2);
        String symbol = coreOperationLessThan.getSymbol();
        CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(constant1, constant2);
        String symbol2 = coreOperationLessThan2.getSymbol();
        assertEquals(symbol.hashCode(), symbol2.hashCode());
    }
}