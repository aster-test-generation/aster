/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMod_KkhZ0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.mod(left, right);
        assertEquals(new CoreOperationMod((Expression) left, (Expression) right), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_TSeT0() {
        Object qName = new Object();
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.variableReference(qName);
        assertEquals(new VariableReference((QName) qName), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDivide_mviF0() {
        Object left = new Object();
        Object right = new Object();
        Object expected = new CoreOperationDivide((Expression) left, (Expression) right);
        Object actual = new TreeCompiler().divide(left, right);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_eGez0() {
        Object name = new Object();
        Object[] args = new Object[0];
        Object expected = null;
        Object actual = new TreeCompiler().function(name, args);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test0_vKUa0() {
        TreeCompiler treeCompiler0 = new TreeCompiler();
        Object object0 = new Object();
        Object object1 = new Object();
        Object object2 = treeCompiler0.notEqual(object0, object1);
        assertEquals(null, object2);
    }
}