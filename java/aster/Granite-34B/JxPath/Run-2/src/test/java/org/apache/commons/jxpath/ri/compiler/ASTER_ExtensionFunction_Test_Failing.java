/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExtensionFunction_Test_Failing {
    private EvalContext context;
    private ExtensionFunction extensionfunction;
    private Function function;
    private Object[] parameters;
    private Expression[] args;
    private Object result;
    private QName functionName;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetFunctionName_PalM0() {
        ExtensionFunction extensionFunction = new ExtensionFunction(new QName(" qualifiedName"), new Expression[]{});
        assertEquals(new QName("qualifiedName"), extensionFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        context = mock(EvalContext.class);
        extensionfunction = new ExtensionFunction(functionName, args);
        function = mock(Function.class);
        parameters = new Object[0];
        when(context.getRootContext().getFunction(functionName, parameters)).thenReturn(function);
        result = new Object();
        when(function.invoke(context, parameters)).thenReturn(result);
        Object actual = extensionfunction.computeValue(context);
        assertEquals(result, actual);
    }
}