/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_NullPointer_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashcode2_JnOq1_Dizz0() {
        NullPointer np = new NullPointer(new Locale("en"), "id");
        int actual = np.hashCode();
        int expected = np.getName().hashCode();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_czos0_tONs0() {
        NullPointer nullPointer = new NullPointer(new Locale("en"), "id");
        JXPathContext context = JXPathContext.newContext(new Object());
        Object value = new Object();
        NodePointer nodePointer = nullPointer.createChild(context, new QName("name"), 1, value);
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createChildTest2_qjJk1_uBvZ0_1() {
        NullPointer np = new NullPointer(new Locale("en"), "id");
        JXPathContext context = JXPathContext.newContext(np);
        NodePointer result = np.createChild(context, new QName("name"), 2);
        assertEquals(result.getName(), new QName("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createChildTest2_qjJk1_uBvZ0_2() {
        NullPointer np = new NullPointer(new Locale("en"), "id");
        JXPathContext context = JXPathContext.newContext(np);
        NodePointer result = np.createChild(context, new QName("name"), 2);
        assertEquals(result.getIndex(), 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createChildTest1_Trxp0_XSMe0_1() {
        NullPointer np = new NullPointer(new Locale("en"), "id");
        JXPathContext context = JXPathContext.newContext(np);
        NodePointer result = np.createChild(context, new QName("name"), 1);
        assertEquals(result.getName(), new QName("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createChildTest1_Trxp0_XSMe0_2() {
        NullPointer np = new NullPointer(new Locale("en"), "id");
        JXPathContext context = JXPathContext.newContext(np);
        NodePointer result = np.createChild(context, new QName("name"), 1);
        assertEquals(result.getIndex(), 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createChildTest3_KzAQ2_RmCm0_1() {
        NullPointer np = new NullPointer(new Locale("en"), "id");
        JXPathContext context = JXPathContext.newContext(np);
        NodePointer result = np.createChild(context, new QName("name"), 3);
        assertEquals(result.getName(), new QName("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createChildTest3_KzAQ2_RmCm0_2() {
        NullPointer np = new NullPointer(new Locale("en"), "id");
        JXPathContext context = JXPathContext.newContext(np);
        NodePointer result = np.createChild(context, new QName("name"), 3);
        assertEquals(result.getIndex(), 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashcode2_JnOq1_Dizz0_fid2() {
        NullPointer np = new NullPointer(new Locale("en"), "id");
        int actual = np.getName().hashCode();
        int expected = np.getName().hashCode();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createChildTest3_KzAQ2_RmCm0_2_fid2() {
        NullPointer np = new NullPointer(new Locale("en"), "id");
        JXPathContext context = JXPathContext.newContext(np);
        NodePointer result = np.createChild(context, new QName("name"), 3);
        assertEquals(result.getIndex(), 3);
        result.setValue("value");
    }
}