/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathCompiledExpression_Test_Failing {
    private Expression expression;
    private String xpath;
    JXPathCompiledExpression jxpathcompiledexpression;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremovePath() throws Exception {
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
        JXPathContext context = mock(JXPathContext.class);
        jxpathcompiledexpression.removePath(context);
        verify(context, times(1)).removePath(xpath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetValue_NQhP0() throws Exception {
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
        JXPathContext context = mock(JXPathContext.class);
        Class requiredType = mock(Class.class);
        Object expectedValue = mock(Object.class);
        when(context.getValue(xpath, requiredType)).thenReturn(expectedValue);
        Object actualValue = jxpathcompiledexpression.getValue(context, requiredType);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePathAndSetValue_HknF0() throws Exception {
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
        JXPathContext context = mock(JXPathContext.class);
        Object value = new Object();
        Pointer pointer = mock(Pointer.class);
        when(context.createPathAndSetValue(xpath, value)).thenReturn(pointer);
        Pointer result = jxpathcompiledexpression.createPathAndSetValue(context, value);
        assertEquals(pointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAll_dHTD0() throws Exception {
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
        JXPathContext context = mock(JXPathContext.class);
        jxpathcompiledexpression.removeAll(context);
        verify(context, times(1)).removeAll(xpath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAll_MWjS0_PdxE0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", new Constant("expression"));
        expression.removeAll(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetValue_M_EgWy0() throws Exception {
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
        JXPathContext context = mock(JXPathContext.class);
        when(context.getValue(xpath, expression.getClass())).thenReturn("test");
        assertEquals("test", jxpathcompiledexpression.getValue(context));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getPointerTest_PWbZ0_MndV0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        String xpath = "'example'";
        Pointer pointer = new JXPathCompiledExpression("'example'", new Constant("'example'")).getPointer(context, xpath);
        assertEquals("'example'", pointer.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getPointerTest_PWbZ0_MndV0_fid1() {
        JXPathContext context = JXPathContext.newContext(new Object());
        String xpath = "example";
        Pointer pointer = new JXPathCompiledExpression("example", new Constant("example")).getPointer(context, xpath);
        assertEquals("example", pointer.toString());
    }
}