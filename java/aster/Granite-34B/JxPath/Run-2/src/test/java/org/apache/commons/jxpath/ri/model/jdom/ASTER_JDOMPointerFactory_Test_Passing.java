/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.jdom.Document;
import org.jdom.Element;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMPointerFactory_Test_Passing {
    JDOMPointerFactory jdompointerfactory;
    NodePointer parent;
    QName name;
    Object bean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerForDocument_smYo0_1() {
        JDOMPointerFactory factory = new JDOMPointerFactory();
        Document document = new Document();
        NodePointer pointer = factory.createNodePointer(new QName("name"), document, Locale.getDefault());
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerForDocument_smYo0_2() {
        JDOMPointerFactory factory = new JDOMPointerFactory();
        Document document = new Document();
        NodePointer pointer = factory.createNodePointer(new QName("name"), document, Locale.getDefault());
        assertTrue(pointer instanceof JDOMNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerForElement_obNM1_1() {
        JDOMPointerFactory factory = new JDOMPointerFactory();
        Element element = new Element("name");
        NodePointer pointer = factory.createNodePointer(new QName("name"), element, Locale.getDefault());
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerForElement_obNM1_2() {
        JDOMPointerFactory factory = new JDOMPointerFactory();
        Element element = new Element("name");
        NodePointer pointer = factory.createNodePointer(new QName("name"), element, Locale.getDefault());
        assertTrue(pointer instanceof JDOMNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerForOtherObject_pTUT2() {
        JDOMPointerFactory factory = new JDOMPointerFactory();
        Object object = new Object();
        NodePointer pointer = factory.createNodePointer(new QName("name"), object, Locale.getDefault());
        assertNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrder_TcRH0() {
        JDOMPointerFactory jdomPointerFactory = new JDOMPointerFactory();
        int actual = jdomPointerFactory.getOrder();
        int expected = JDOMPointerFactory.JDOM_POINTER_FACTORY_ORDER;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderWithMockData_YCQy1() {
        JDOMPointerFactory jdomPointerFactory = new JDOMPointerFactory();
        int actual = jdomPointerFactory.getOrder();
        int expected = 110; // Replace with the expected value based on the mock data
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderWithNegativeData_uYGr3() {
        JDOMPointerFactory jdomPointerFactory = new JDOMPointerFactory();
        int actual = jdomPointerFactory.getOrder();
        int expected = 110; // Replace with the expected value based on the negative data
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderWithZeroData_zVyT4() {
        JDOMPointerFactory jdomPointerFactory = new JDOMPointerFactory();
        int actual = jdomPointerFactory.getOrder();
        int expected = 110; // Replace with the expected value based on the zero data
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderWithEmptyData_oHzi5() {
        JDOMPointerFactory jdomPointerFactory = new JDOMPointerFactory();
        int actual = jdomPointerFactory.getOrder();
        int expected = 110; // Replace with the expected value based on the empty data
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderWithNullData_rIqJ6() {
        JDOMPointerFactory jdomPointerFactory = new JDOMPointerFactory();
        int actual = jdomPointerFactory.getOrder();
        int expected = 110; // Replace with the expected value based on the null data
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderWithSpecialCharData_uqjh7() {
        JDOMPointerFactory jdomPointerFactory = new JDOMPointerFactory();
        int actual = jdomPointerFactory.getOrder();
        int expected = 110; // Replace with the expected value based on the special character data
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerForDocument_smYo0() {
        JDOMPointerFactory factory = new JDOMPointerFactory();
        Document document = new Document();
        NodePointer pointer = factory.createNodePointer(new QName("name"), document, Locale.getDefault());
        assertNotNull(pointer);
        assertTrue(pointer instanceof JDOMNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerForElement_obNM1() {
        JDOMPointerFactory factory = new JDOMPointerFactory();
        Element element = new Element("name");
        NodePointer pointer = factory.createNodePointer(new QName("name"), element, Locale.getDefault());
        assertNotNull(pointer);
        assertTrue(pointer instanceof JDOMNodePointer);
    }
}