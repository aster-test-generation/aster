/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationMod_Test_Passing {
    CoreOperationMod coreoperationmod;
    EvalContext context;
    Constant arg1;
    Constant arg2;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_Iaao2() {
        Constant constant1 = new Constant("test1");
        Constant constant2 = new Constant("test2");
        CoreOperationMod coreOperationMod = new CoreOperationMod(constant1, constant2);
        assertEquals("mod", coreOperationMod.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_Iepu0() {
        Constant constant1 = new Constant("string");
        Constant constant2 = new Constant(1);
        CoreOperationMod coreOperationMod = new CoreOperationMod(constant1, constant2);
        boolean result = coreOperationMod.isSymmetric();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetricWithNullConstant1_ZBDn2() {
        Constant constant1 = null;
        Constant constant2 = new Constant(1);
        CoreOperationMod coreOperationMod = new CoreOperationMod(constant1, constant2);
        boolean result = coreOperationMod.isSymmetric();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetricWithNullConstant2_Kkem3() {
        Constant constant1 = new Constant("string");
        Constant constant2 = null;
        CoreOperationMod coreOperationMod = new CoreOperationMod(constant1, constant2);
        boolean result = coreOperationMod.isSymmetric();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetricWithNullBothConstants_jFOe4() {
        Constant constant1 = null;
        Constant constant2 = null;
        CoreOperationMod coreOperationMod = new CoreOperationMod(constant1, constant2);
        boolean result = coreOperationMod.isSymmetric();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_hSHn2() {
        Constant constant1 = new Constant(5);
        Constant constant2 = new Constant(3);
        CoreOperationMod coreOperationMod = new CoreOperationMod(constant1, constant2);
        assertEquals(CoreOperationMod.MULTIPLY_PRECEDENCE, coreOperationMod.getPrecedence());
    }
}