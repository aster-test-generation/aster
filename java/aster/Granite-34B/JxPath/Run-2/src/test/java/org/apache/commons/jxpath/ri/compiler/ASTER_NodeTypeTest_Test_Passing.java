/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_NodeTypeTest_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringNode_aDlN0() {
        assertEquals("node", NodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_NODE));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringText_ozbG1() {
        assertEquals("text", NodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_TEXT));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringComment_iBWb2() {
        assertEquals("comment", NodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_COMMENT));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringProcessingInstruction_Qzua3() {
        assertEquals("processing-instruction", NodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_PI));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType_XhCs0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        assertEquals(1, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType2_OLso1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(2);
        assertEquals(2, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType3_nDvH2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(3);
        assertEquals(3, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType4_ZfLb3() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(4);
        assertEquals(4, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType5_LgiG4() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(5);
        assertEquals(5, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType6_bAwT5() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(6);
        assertEquals(6, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType7_HSSz6() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(7);
        assertEquals(7, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType8_nlqz7() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(8);
        assertEquals(8, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType9_FWeA8() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(9);
        assertEquals(9, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType10_jZqY9() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(10);
        assertEquals(10, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_tWzD0_VXfj0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        String expected = "1";
        String actual = String.valueOf(nodeTypeTest.getNodeType());
        Assertions.assertEquals(expected, actual);
    }
}