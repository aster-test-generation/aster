/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreFunction_Test_Failing {
    CoreFunction corefunction;
    private int functionCode;
    private EvalContext context;
    Expression expression;
    NamespaceContext namespaceContext;
    SelfContext selfContext;
    NodeTypeTest nodeTypeTest;
    Expression[] args;
    NamespaceContext parentContext;
    NodeTypeTest nodeTest;
    JXPathContext jxpathContext;
    NodePointer nodePointer;
    Pointer contextNodePointer;
    RootContext rootContext;
    List contextNodeList;
    Object value;
    String lang;
    boolean isLanguage;
    @Mock
    private CoreFunction coreFunction;
    @Mock
    Expression arg1;
    @Mock
    Expression arg2;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg2WithNullArgs_vawV1() {
        Expression[] expressions = null;
        CoreFunction coreFunction = new CoreFunction(1, expressions);
        Expression result = coreFunction.getArg2();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg2WithEmptyArgs_vfbt2() {
        Expression[] expressions = new Expression[0];
        CoreFunction coreFunction = new CoreFunction(1, expressions);
        Expression result = coreFunction.getArg2();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg1_IKWn0() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
        Expression result = coreFunction.getArg1();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg1_lineCoverage_zpsy1() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
        Expression result = coreFunction.getArg1();
        result = coreFunction.getArg1();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg1_branchCoverage_VXMi2() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
        Expression result = coreFunction.getArg1();
        if (result != null) {
            result = coreFunction.getArg1();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        functionCode = 1; // set the function code
        context = mock(EvalContext.class); // create a mock context
        corefunction = new CoreFunction(functionCode, new Expression[0]); // create a CoreFunction object with the mock context
        when(context.getValue()).thenReturn("test value"); // set the return value of the context's getValue() method
        Object result = corefunction.computeValue(context); // call the computeValue method
        assertEquals("test value", result); // assert that the result is equal to the expected value
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg3WithNullArgs_Edwt1() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Expression arg3 = coreFunction.getArg3();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLangWithNullContext_tvQa1() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[1]);
        Object result = coreFunction.functionLang(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionEndsWith() throws Exception {
        corefunction = new CoreFunction(0, new Expression[]{});
        EvalContext context = mock(EvalContext.class);
        when(context.getValue()).thenReturn("value");
        Object result = corefunction.functionEndsWith(context);
        assertEquals(Boolean.TRUE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoArguments_XfoS0() {
        CoreFunction function = new CoreFunction(1, new Expression[0]);
        assertEquals("functionName()", function.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionCeiling() throws Exception {
        corefunction = new CoreFunction(0, new Expression[0]);
        EvalContext context = mock(EvalContext.class);
        when(context.getValue()).thenReturn(10.0);
        Object result = corefunction.functionCeiling(context);
        assertEquals(11.0, result);
    }
}