/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Array;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_GTpa0() {
        Object collection = new Object();
        int index = 0;
        Object value = new Object();
        ValueUtils.setValue(collection, index, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCollectionHint_array_returnsOne_SGkz0() {
        Class clazz = new String[0].getClass();
        int result = ValueUtils.getCollectionHint(clazz);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCollectionHint_collection_returnsOne_hFxs1() {
        Class clazz = new ArrayList().getClass();
        int result = ValueUtils.getCollectionHint(clazz);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCollectionHint_primitive_returnsMinusOne_wJlE2() {
        Class clazz = int.class;
        int result = ValueUtils.getCollectionHint(clazz);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCollectionHint_interface_returnsZero_BhtT3() {
        Class clazz = Cloneable.class;
        int result = ValueUtils.getCollectionHint(clazz);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCollectionHint_finalClass_returnsMinusOne_wIjk4() {
        Class clazz = String.class;
        int result = ValueUtils.getCollectionHint(clazz);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullCollection_eBwN0() {
        Object collection = null;
        Iterator result = ValueUtils.iterate(collection);
        assertTrue(result.equals(Collections.EMPTY_LIST.iterator()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyArray_BNWl1() {
        Object[] collection = new Object[0];
        Iterator result = ValueUtils.iterate(collection);
        assertTrue(result.equals(Collections.EMPTY_LIST.iterator()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithArray_VCxn2_1() {
        Object[] collection = new Object[]{"a", "b", "c"};
        Iterator result = ValueUtils.iterate(collection);
        assertTrue(result.next().equals("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithArray_VCxn2_2() {
        Object[] collection = new Object[]{"a", "b", "c"};
        Iterator result = ValueUtils.iterate(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithArray_VCxn2() {
        Object[] collection = new Object[]{"a", "b", "c"};
        Iterator result = ValueUtils.iterate(collection);
        assertTrue(result.next().equals("a"));
        assertTrue(result.next().equals("b"));
        assertTrue(result.next().equals("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithCollection_ECQI4() {
        Collection collection = new ArrayList();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Iterator result = ValueUtils.iterate(collection);
        assertTrue(result.next().equals("a"));
        assertTrue(result.next().equals("b"));
        assertTrue(result.next().equals("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingletonCollection_VPTf5() {
        Collection collection = Collections.singleton("a");
        Iterator result = ValueUtils.iterate(collection);
        assertTrue(result.next().equals("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithNullCollection_FyWW0() {
        Object collection = null;
        int index = 0;
        Object result = ValueUtils.remove(collection, index);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithIndexGreaterThanLength_lVst1() {
        Object collection = new Object();
        int index = 1;
        try {
            Object result = ValueUtils.remove(collection, index);
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromArray_PudR2() {
        Object[] array = new Object[2];
        int index = 0;
        Object result = ValueUtils.remove(array, index);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromIterator_ckqV5() {
        Collection<Object> collection = new HashSet<>();
        Iterator<Object> iterator = collection.iterator();
        int index = 0;
        while (index < 2) {
            if (iterator.hasNext()) {
                iterator.next();
                index++;
            }
        }
        Object result = ValueUtils.remove(iterator, index);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithNullCollection_pAjL0() {
        Object collection = null;
        int size = 10;
        Object result = ValueUtils.expandCollection(collection, size);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithSmallerSize_IRtT1() {
        Object collection = new Object[5];
        int size = 3;
        try {
            Object result = ValueUtils.expandCollection(collection, size);
        } catch (JXPathException e) {
            assert e.getMessage().equals("adjustment of " + collection + " to size " + size + " is not an expansion");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithArray_OJiT2() {
        Object collection = new Object[5];
        int size = 10;
        Object result = ValueUtils.expandCollection(collection, size);
        assert result.getClass().isArray();
        assert result.getClass().getComponentType() == Object.class;
        assert Array.getLength(result) == size;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithCollection_gdCw3() {
        Object collection = new ArrayList<>();
        for (int i = 0;i < 5;i++) {
            ((Collection) collection).add(null);
        }
        int size = 10;
        Object result = ValueUtils.expandCollection(collection, size);
        assert result instanceof Collection;
        assert ((Collection) result).size() == size;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithArray_fYNq0() {
        Integer[] array = new Integer[]{1, 2, 3};
        Object value = ValueUtils.getValue(array, 1);
        assertEquals(2, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithList_yCSh1() {
        List<String> list = Arrays.asList("a", "b", "c");
        Object value = ValueUtils.getValue(list, 2);
        assertEquals("c", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithCollection_GwPm2() {
        Collection<Double> collection = new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0));
        Object value = ValueUtils.getValue(collection, 0);
        assertEquals(1.0, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNegativeIndex_YJpo3() {
        Integer[] array = new Integer[]{1, 2, 3};
        Object value = ValueUtils.getValue(array, -1);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithIndexGreaterThanSize_Gewc4() {
        List<String> list = Arrays.asList("a", "b", "c");
        Object value = ValueUtils.getValue(list, 3);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullCollection_gagN5() {
        Object value = ValueUtils.getValue(null, 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithArrayAndIndexZero_tynQ7() {
        Integer[] array = new Integer[]{1, 2, 3};
        Object value = ValueUtils.getValue(array, 0);
        assertEquals(1, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithListAndIndexZero_ttyQ8() {
        List<String> list = Arrays.asList("a", "b", "c");
        Object value = ValueUtils.getValue(list, 0);
        assertEquals("a", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithCollection_ECQI4_1() {
        Collection collection = new ArrayList();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Iterator result = ValueUtils.iterate(collection);
        assertTrue(result.next().equals("a"));
    }
}