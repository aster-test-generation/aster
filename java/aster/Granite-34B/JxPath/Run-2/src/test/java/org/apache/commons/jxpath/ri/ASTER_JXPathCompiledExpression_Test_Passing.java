/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathCompiledExpression_Test_Passing {
    private Expression expression;
    private String xpath;
    JXPathCompiledExpression jxpathcompiledexpression;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPATHCompiledExpression_NyhZ0() {
        JXPathCompiledExpression jxPathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant("expression"));
        String actual = jxPathCompiledExpression.getXPath();
        String expected = "xpath";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPATHCompiledExpression2_jCkS1() {
        JXPathCompiledExpression jxPathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant(1));
        String actual = jxPathCompiledExpression.getXPath();
        String expected = "xpath";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPATHCompiledExpression3_Bwdr2() {
        JXPathCompiledExpression jxPathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant(1.1));
        String actual = jxPathCompiledExpression.getXPath();
        String expected = "xpath";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_WXMs0() {
        JXPathCompiledExpression jxpe = new JXPathCompiledExpression("xpath", new Constant("expression"));
        String result = jxpe.toString();
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_INlL1() {
        JXPathCompiledExpression jxpe = new JXPathCompiledExpression("xpath", new Constant(123));
        String result = jxpe.toString();
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_FLMk2() {
        JXPathCompiledExpression jxpe = new JXPathCompiledExpression("xpath", new Constant(123.456));
        String result = jxpe.toString();
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_cJpg7() {
        JXPathCompiledExpression jxpe = new JXPathCompiledExpression("xpath", new Constant(new String()));
        String result = jxpe.toString();
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression_ctQx0() {
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant("string"));
        Expression expression = jXPathCompiledExpression.getExpression();
        Assertions.assertNotNull(expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression1_MzTs1() {
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant(1));
        Expression expression = jXPathCompiledExpression.getExpression();
        Assertions.assertNotNull(expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression2_JjKB2() {
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant(1.0));
        Expression expression = jXPathCompiledExpression.getExpression();
        Assertions.assertNotNull(expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPATHCompiledExpression6_BSzA5_vSxg0() {
        JXPathCompiledExpression jxPathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant(""));
        String actual = jxPathCompiledExpression.getXPath();
        String expected = "xpath";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_BHOA6_pvSI0() {
        JXPathCompiledExpression jxpe = new JXPathCompiledExpression("xpath", new Constant("string"));
        String result = jxpe.toString();
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ULMi8_qRcW0() {
        JXPathCompiledExpression jxpe = new JXPathCompiledExpression("xpath", new Constant(new Integer(1)));
        String result = jxpe.toString();
        System.out.println(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression8_KWxR8_LoKR0() {
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant(new Byte("0")));
        Expression expression = jXPathCompiledExpression.getExpression();
        Assertions.assertNotNull(expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterate_DAWQ0_rlPL0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", new Constant("expression"));
        Iterator result = expression.iterate(context);
    }
}