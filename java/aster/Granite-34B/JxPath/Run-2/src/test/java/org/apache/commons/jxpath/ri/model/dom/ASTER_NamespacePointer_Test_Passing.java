/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespacePointer_Test_Passing {
    NamespacePointer namespacepointer;
    private String prefix;
    private String namespaceURI;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() throws Exception {
        prefix = "prefix";
        namespacepointer = new NamespacePointer(null, prefix);
        final StringBuilder buffer = new StringBuilder();
        buffer.append("namespace::");
        buffer.append(prefix);
        assertEquals(buffer.toString(), namespacepointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithoutParent_FykC1() {
        NamespacePointer namespacePointer = new NamespacePointer(null, "prefix");
        assertEquals("namespace::prefix", namespacePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithoutParentAndNamespaceURI_vvTI3() {
        NamespacePointer namespacePointer = new NamespacePointer(null, "prefix", "namespaceURI");
        assertEquals("namespace::prefix", namespacePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_yvIe0_FBEH0() {
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        int result = pointer1.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result);
    }
}