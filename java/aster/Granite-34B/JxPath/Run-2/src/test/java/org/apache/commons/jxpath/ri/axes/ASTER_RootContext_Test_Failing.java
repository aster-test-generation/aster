/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RootContext_Test_Failing {
    RootContext rootcontext;
    JXPathContextReferenceImpl jxpathContext;
    DOMNodePointer pointer;
    JXPathContextReferenceImpl parentContext;
    Object contextBean;
    Locale locale;
    String id;
    VariablePointer parent;
    NodePointer parentNode;
    QName name;
    Object root;
    NodePointer contextPointer;
    private Function function;
    private Object[] parameters;
    private static int MAX_REGISTER = 4;
    private int availableRegister = 0;
    private Object[] registers;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVariableContext_1() throws Exception {
        jxpathContext = mock(JXPathContextReferenceImpl.class);
        rootcontext = new RootContext(jxpathContext, jxpathContext.getVariablePointer(new QName("variableName")));
        EvalContext evalContext = rootcontext.getVariableContext(new QName("variableName"));
        assertNotNull(evalContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVariableContext_2() throws Exception {
        jxpathContext = mock(JXPathContextReferenceImpl.class);
        rootcontext = new RootContext(jxpathContext, jxpathContext.getVariablePointer(new QName("variableName")));
        EvalContext evalContext = rootcontext.getVariableContext(new QName("variableName"));
        assertEquals(InitialContext.class, evalContext.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVariableContext_3() throws Exception {
        jxpathContext = mock(JXPathContextReferenceImpl.class);
        rootcontext = new RootContext(jxpathContext, jxpathContext.getVariablePointer(new QName("variableName")));
        EvalContext evalContext = rootcontext.getVariableContext(new QName("variableName"));
        assertEquals(rootcontext, evalContext.getRootContext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ROXR0_oVDz0() {
        JXPathContextReferenceImpl jxpathContext = new JXPathContextReferenceImpl(null, null, null);
        DOMNodePointer pointer = new DOMNodePointer(null, null, null);
        RootContext rootContext = new RootContext(jxpathContext, pointer);
        assertEquals("super.toString() + \":\" + pointer.asPath()", rootContext.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVariableContext() throws Exception {
        jxpathContext = mock(JXPathContextReferenceImpl.class);
        rootcontext = new RootContext(jxpathContext, jxpathContext.getVariablePointer(new QName("variableName")));
        EvalContext evalContext = rootcontext.getVariableContext(new QName("variableName"));
        assertNotNull(evalContext);
        assertEquals(InitialContext.class, evalContext.getClass());
        assertEquals(rootcontext, evalContext.getRootContext());
    }
}