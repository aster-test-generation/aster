/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ParentContext_Test_Passing {
    ParentContext parentcontext;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    private NodeTest nodeTest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_kkFd0() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        SelfContext selfContext = new SelfContext(namespaceContext, new NodeTypeTest(1));
        ParentContext parentContext = new ParentContext(selfContext, new NodeTypeTest(1));
        boolean result = parentContext.setPosition(1);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithZeroPosition_uGxD1() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        SelfContext selfContext = new SelfContext(namespaceContext, new NodeTypeTest(1));
        ParentContext parentContext = new ParentContext(selfContext, new NodeTypeTest(1));
        boolean result = parentContext.setPosition(0);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder() throws Exception {
        SelfContext selfContext = new SelfContext(Mockito.mock(NamespaceContext.class), Mockito.mock(NodeTypeTest.class));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, Mockito.mock(NodeTypeTest.class));
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        parentcontext = new ParentContext(namespaceContext, nodeTypeTest);
        assertEquals(-1, parentcontext.getDocumentOrder());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrder_JZlK0() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        SelfContext selfContext = new SelfContext(namespaceContext, new NodeTypeTest(1));
        ParentContext parentContext = new ParentContext(selfContext, new NodeTypeTest(1));
        int result = parentContext.getDocumentOrder();
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrderWithNullNamespaceContext_kmui1() {
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(1));
        ParentContext parentContext = new ParentContext(selfContext, new NodeTypeTest(1));
        int result = parentContext.getDocumentOrder();
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrderWithNullSelfContext_Abro2() {
        ParentContext parentContext = new ParentContext(null, new NodeTypeTest(1));
        int result = parentContext.getDocumentOrder();
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrderWithNullNodeTypeTest_nMoc3() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        SelfContext selfContext = new SelfContext(namespaceContext, new NodeTypeTest(1));
        ParentContext parentContext = new ParentContext(selfContext, null);
        int result = parentContext.getDocumentOrder();
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCurrentNodePointerTest_oxzY0() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        ParentContext parentContext = new ParentContext(namespaceContext, nodeTypeTest);
        NodePointer result = parentContext.getCurrentNodePointer();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCurrentPosition() throws Exception {
        SelfContext selfContext = new SelfContext(Mockito.mock(NamespaceContext.class), Mockito.mock(NodeTypeTest.class));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, Mockito.mock(NodeTypeTest.class));
        parentcontext = new ParentContext(namespaceContext, Mockito.mock(NodeTypeTest.class));
        assertEquals(1, parentcontext.getCurrentPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCurrentPositionTest_bmzs0() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        SelfContext selfContext = new SelfContext(namespaceContext, new NodeTypeTest(1));
        ParentContext parentContext = new ParentContext(selfContext, new NodeTypeTest(1));
        int result = parentContext.getCurrentPosition();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCurrentPositionTest2_QNRw1_fid2() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(2));
        SelfContext selfContext = new SelfContext(namespaceContext, new NodeTypeTest(2));
        ParentContext parentContext = new ParentContext(selfContext, new NodeTypeTest(2));
        int result = parentContext.getCurrentPosition();
    }
}