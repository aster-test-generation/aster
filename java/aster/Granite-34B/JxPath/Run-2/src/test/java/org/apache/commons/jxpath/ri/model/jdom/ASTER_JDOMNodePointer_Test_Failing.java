/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.jdom.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodePointer_Test_Failing {
    private Object node;
    JDOMNodePointer jdomnodepointer;
    private NamespaceResolver localNamespaceResolver;
    private JDOMNodePointer pointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJDOMNodePointer_LmGh0() {
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(new Object(), new Locale(""));
        assertEquals(new Object(), jDOMNodePointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJDOMNodePointer2_mwMB1() {
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(new Object(), new Locale(""), "");
        assertEquals(new Object(), jDOMNodePointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        node = mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, null);
        when(node.hashCode()).thenReturn(123);
        assertEquals(123, jdomnodepointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameForElementNode_oodO0_fid1() {
        Element element = new Element("element");
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        assertEquals(new QName(element.getNamespacePrefix(), element.getName()), pointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameForDocumentNode_txfx2() {
        Document document = new Document(new Element("root"));
        JDOMNodePointer pointer = new JDOMNodePointer(document, Locale.getDefault());
        assertEquals(new QName(null, document.getRootElement().getName()), pointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameForAttributeNode_NREE3_fid1() {
        Element element = new Element("root");
        Attribute attribute = new Attribute("name", "value");
        element.setAttribute(attribute);
        JDOMNodePointer pointer = new JDOMNodePointer(attribute, Locale.getDefault());
        assertEquals(new QName(attribute.getName()), pointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameForTextNode_oZTR4_fid1() {
        Element element = new Element("root");
        Text text = new Text("text");
        element.addContent(text);
        JDOMNodePointer pointer = new JDOMNodePointer(text, Locale.getDefault());
        assertEquals(new QName("#text"), pointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenNodeIsDocumentAndContentIsEmpty_cCze1_fid1() {
        Document document = new Document(new Element("test"));
        JDOMNodePointer pointer = new JDOMNodePointer(document, Locale.getDefault());
        assertTrue(pointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNode_Xypt1_fid1() {
        Element element = new Element("test");
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        assertEquals("/", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithTextNode_hcif2_fid1() {
        Text text = new Text("test");
        JDOMNodePointer pointer = new JDOMNodePointer(text, Locale.getDefault());
        assertEquals("/text()", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithComment_MpAg4_fid1() {
        Comment comment = new Comment("test");
        JDOMNodePointer pointer = new JDOMNodePointer(comment, Locale.getDefault());
        assertEquals("/comment()", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithDocument_oCLv6_fid1() {
        Document document = new Document(new Element("test"));
        JDOMNodePointer pointer = new JDOMNodePointer(document, Locale.getDefault());
        assertEquals("/", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithAttribute_zUjy7_fid1() {
        Element element = new Element("test");
        element.setAttribute("test", "value");
        JDOMNodePointer pointer = new JDOMNodePointer(element.getAttribute("test"), Locale.getDefault());
        assertEquals("/@test", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNamespace_BjKT8_fid1() {
        Element element = new Element("test", Namespace.getNamespace("test"));
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        assertEquals("/test", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithParent_KeGU9_fid1() {
        Element parent = new Element("parent");
        Element child = new Element("child");
        parent.addContent(child);
        JDOMNodePointer pointer = new JDOMNodePointer(child, Locale.getDefault());
        assertEquals("/parent/child", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithLocale_SeXR10_fid1() {
        Element element = new Element("test");
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.FRANCE);
        assertEquals("/", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithElement_FfmS2_WyFF0() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Element("test"), new Locale("en"));
        jdomNodePointer.setValue(new Element("test"));
        assertEquals(new Element("test"), jdomNodePointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithProcessingInstruction_kqHp3_YOtV0_fid1() {
        ProcessingInstruction pi = new ProcessingInstruction("test", "");
        JDOMNodePointer pointer = new JDOMNodePointer(pi, Locale.getDefault());
        assertEquals("/processing-instruction('test')", pointer.asPath());
    }
}