/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Test_Passing {
    private Step[] toStepArray(final Object[] array) {
        Step[] stepArray = null;
        if (array != null) {
            stepArray = new Step[array.length];
            for (int i = 0;i < stepArray.length;i++) {
                stepArray[i] = (Step) array[i];
            }
        }
        return stepArray;
    }

    private Expression[] toExpressionArray(final Object[] array) {
        Expression[] expressionArray = null;
        if (array != null) {
            expressionArray = new Expression[array.length];
            for (int i = 0;i < expressionArray.length;i++) {
                expressionArray[i] = (Expression) array[i];
            }
        }
        return expressionArray;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeNameTest_Null_hXhz1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object qname = null;
        Object result = treeCompiler.nodeNameTest(qname);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinus_NullArgument_JFyq1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object argument = null;
        Object result = treeCompiler.minus(argument);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiplyWithNullBoth_eRsk4() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = null;
        Object right = null;
        Object result = treeCompiler.multiply(left, right);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_VSHE0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.nodeTypeTest(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest2_WFmF1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.nodeTypeTest(2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest3_igjW2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.nodeTypeTest(3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQname_sgma0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String prefix = "prefix";
        String name = "name";
        Object qname = treeCompiler.qname(prefix, name);
        assertEquals(new QName(prefix, name), qname);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnion_fheo0() {
        Object[] arguments = new Object[0]; // Initialize the arguments array
        TreeCompiler treeCompiler = new TreeCompiler(); // Create an object of TreeCompiler
        Object result = treeCompiler.union(arguments); // Call the union method
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnionWithNullArguments_wgno3() {
        Object[] arguments = null; // Initialize the arguments array with null
        TreeCompiler treeCompiler = new TreeCompiler(); // Create an object of TreeCompiler
        Object result = treeCompiler.union(arguments); // Call the union method
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnionWithEmptyArguments_ZpuJ4() {
        Object[] arguments = new Object[0]; // Initialize the arguments array with an empty array
        TreeCompiler treeCompiler = new TreeCompiler(); // Create an object of TreeCompiler
        Object result = treeCompiler.union(arguments); // Call the union method
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThanOrEqual_bothNull_RWaN3() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = null;
        Object right = null;
        Object result = treeCompiler.lessThanOrEqual(left, right);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinusWithNullLeftAndRight_PAYg4() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = null;
        Object right = null;
        Object result = treeCompiler.minus(left, right);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_XXmP0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[0]; // Initialize the arguments
        Object result = treeCompiler.sum(arguments);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPath_qYKr0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        boolean absolute = true;
        Object[] steps = {new Object(), new Object()};
        Object expected = new LocationPath(absolute, toStepArray(steps));
        Object actual = treeCompiler.locationPath(absolute, steps);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThanWithNullBoth_nnpJ3() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = null;
        Object right = null;
        Object result = treeCompiler.lessThan(left, right);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThanWithNullBoth_IsSC4() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = null;
        Object right = null;
        Object result = treeCompiler.greaterThan(left, right);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_xxKf0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.number("10.5");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberCoverage_kUgA2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result1 = treeCompiler.number("10.5");
        Object result2 = treeCompiler.number("10");
        Object result3 = treeCompiler.number("100");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTest_dsrv0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = "test";
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertNotNull(result);
        assertTrue(result instanceof ProcessingInstructionTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestNullInstruction_LziS1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = null;
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertNotNull(result);
        assertTrue(result instanceof ProcessingInstructionTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestEmptyInstruction_GrLu2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = "";
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertNotNull(result);
        assertTrue(result instanceof ProcessingInstructionTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestInvalidInstruction_RTdJ3() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = "invalid";
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertNotNull(result);
        assertTrue(result instanceof ProcessingInstructionTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestValidInstruction_ksNh4() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = "valid";
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertNotNull(result);
        assertTrue(result instanceof ProcessingInstructionTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestInstructionWithNumbers_ETVZ6() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = "1234567890";
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertNotNull(result);
        assertTrue(result instanceof ProcessingInstructionTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOr_DgWR0_fid1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[2];
        Object result = treeCompiler.or(arguments);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void literalTest_sNJg0_fid1() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.literal("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void literalTest2_SAuo1_fid1() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.literal("value2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void literalTest4_aqju3_fid1() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.literal("value4");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void literalTest6_PUfT5_fid1() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.literal("value6");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void literalTest8_Uznv7_fid1() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.literal("value8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTest_dsrv0_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = "test";
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTest_dsrv0_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = "test";
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertTrue(result instanceof ProcessingInstructionTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestNullInstruction_LziS1_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = null;
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestNullInstruction_LziS1_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = null;
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertTrue(result instanceof ProcessingInstructionTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestEmptyInstruction_GrLu2_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = "";
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestEmptyInstruction_GrLu2_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = "";
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertTrue(result instanceof ProcessingInstructionTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestInvalidInstruction_RTdJ3_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = "invalid";
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestInvalidInstruction_RTdJ3_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = "invalid";
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertTrue(result instanceof ProcessingInstructionTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestValidInstruction_ksNh4_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = "valid";
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestValidInstruction_ksNh4_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = "valid";
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertTrue(result instanceof ProcessingInstructionTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestInstructionWithNumbers_ETVZ6_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = "1234567890";
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestInstructionWithNumbers_ETVZ6_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = "1234567890";
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertTrue(result instanceof ProcessingInstructionTest);
    }
}