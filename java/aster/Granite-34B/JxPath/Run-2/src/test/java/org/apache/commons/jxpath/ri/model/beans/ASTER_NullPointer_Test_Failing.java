/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPointer_Test_Failing {
    private QName name;
    NullPointer nullpointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath() throws Exception {
        nullpointer = new NullPointer(Locale.ROOT, "id");
        JXPathContext context = mock(JXPathContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(context.getPointer(anyString())).thenReturn(nodePointer);
        when(nodePointer.getValuePointer()).thenReturn(nodePointer);
        when(nodePointer.createPath(context)).thenReturn(nodePointer);
        NodePointer result = nullpointer.createPath(context);
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        name = new QName("name");
        nullpointer = new NullPointer(Locale.getDefault(), "id");
        assertEquals(name == null ? 3373707 : name.hashCode(), nullpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyPointer_5() throws Exception {
        nullpointer = new NullPointer(Locale.getDefault(), "id");
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        assertNull(propertyPointer.getImmediateValuePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyPointer_6() throws Exception {
        nullpointer = new NullPointer(Locale.getDefault(), "id");
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        assertNull(propertyPointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithPointerOfDifferentName_aZPB3_fid1() {
        NullPointer pointer1 = new NullPointer(Locale.US, "id1");
        NullPointer pointer2 = new NullPointer(Locale.US, "id2");
        assertFalse(pointer1.equals(pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithPointerOfNullName_pSuC5_fid1() {
        NullPointer pointer1 = new NullPointer(Locale.US, "id");
        NullPointer pointer2 = new NullPointer(Locale.US, null);
        assertFalse(pointer1.equals(pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode_fid1() throws Exception {
        name = new QName("name");
        nullpointer = new NullPointer(Locale.getDefault(), "id");
        assertEquals(name == null ? 0 : name.hashCode(), nullpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyPointer_3_fid1() throws Exception {
        nullpointer = new NullPointer(Locale.getDefault(), "id");
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        assertEquals(0, propertyPointer.getPropertyIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyPointer_7() throws Exception {
        nullpointer = new NullPointer(Locale.getDefault(), "id");
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        assertNotEquals(0, propertyPointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyPointer_8() throws Exception {
        nullpointer = new NullPointer(Locale.getDefault(), "id");
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        assertNotEquals(0, propertyPointer.getPropertyCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyPointer_10() throws Exception {
        nullpointer = new NullPointer(Locale.getDefault(), "id");
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        assertNotEquals(0, propertyPointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointerCoverage_uZQy1() {
        NullPointer nullPointer = new NullPointer(Locale.getDefault(), "id");
        PropertyPointer propertyPointer = nullPointer.getPropertyPointer();
        assertEquals(0, propertyPointer.getPropertyIndex());
        assertEquals(0, propertyPointer.getLength());
        assertEquals(0, propertyPointer.getPropertyCount());
        assertNotEquals(0, propertyPointer.hashCode());
        assertNotNull(propertyPointer.getName());
        assertNotNull(propertyPointer.getImmediateValuePointer());
        assertNotNull(propertyPointer.getImmediateNode());
        assertNotNull(propertyPointer.getPropertyNames());
        assertNotNull(propertyPointer.getBean());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateChild() throws Exception {
        nullpointer = new NullPointer(Locale.getDefault(), "id");
        name = new QName("name");
        JXPathContext context = mock(JXPathContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(context.getPointer(name.toString())).thenReturn(nodePointer);
        when(nodePointer.createChild(context, name, 0, null)).thenReturn(nodePointer);
        NodePointer result = nullpointer.createChild(context, name, 0, null);
        assertEquals(nodePointer, result);
    }
}