/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationNegate_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_Bqdq0() {
        Constant constant = new Constant("string");
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
        assertEquals("-", coreOperationNegate.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_yfaZ1() {
        Constant constant = new Constant(1);
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
        assertEquals("-", coreOperationNegate.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_isSymmetric_0_spwb0() {
        Constant constant = new Constant("string");
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
        boolean actual = coreOperationNegate.isSymmetric();
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_isSymmetric_1_Hjqi1() {
        Constant constant = new Constant(1);
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
        boolean actual = coreOperationNegate.isSymmetric();
        boolean expected = false;
        assertEquals(expected, actual);
    }
}