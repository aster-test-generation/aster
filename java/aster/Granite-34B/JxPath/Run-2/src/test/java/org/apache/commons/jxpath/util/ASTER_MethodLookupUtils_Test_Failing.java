/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNoParameters_DkTV1() {
        Object[] parameters = {};
        Method method = MethodLookupUtils.lookupMethod(String.class, "length", parameters);
        assertEquals("length", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithInvalidType_uEJS2() {
        Object[] parameters = {123};
        Method method = MethodLookupUtils.lookupMethod(String.class, "length", parameters);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithAmbiguousCall_mhNy4() {
        Object[] parameters = {new Object(), "test"};
        assertThrows(JXPathException.class, () -> MethodLookupUtils.lookupMethod(String.class, "length", parameters));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithStaticMethod_OrmS5() {
        Object[] parameters = {String.class, "length"};
        Method method = MethodLookupUtils.lookupMethod(null, "lookupMethod", parameters);
        assertEquals("lookupMethod", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNoMatch_PRFQ6() {
        Object[] parameters = {String.class, "test"};
        Method method = MethodLookupUtils.lookupMethod(null, "lookupMethod", parameters);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithParameters_LbWo1_Bwuc0() throws NoSuchMethodException {
        Class targetClass = String.class;
        String name = "valueOf";
        Object[] parameters = {123};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals(String.class.getMethod(name, int.class), method);
    }
}