/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodePointer_Test_Passing {
    Node node;
    DOMNodePointer domnodepointer;
    NodePointer nodepointer;
    NamedNodeMap namednodemap;
    Attr attr;
    NodeList nodelist;
    Document document;
    @Mock
    Locale locale;
    @Mock
    VariablePointer parent;
    Element element;
    NodeIterator nodeIterator;
    QName qName;
    NodeIterator nodeiterator;
    @Mock
    private Object object;
    private String defaultNamespace;
    private Node parentNode;
    private String id;
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer2_mmlL2() {
        QName name = new QName("qualifiedName");
        VariablePointer variablePointer = new VariablePointer(name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_KssL3() {
        String qualifiedName = "qualifiedName";
        QName qName = new QName(qualifiedName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName2_QoIw4() {
        String prefix = "prefix";
        String localName = "localName";
        QName qName = new QName(prefix, localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_esqa2() {
        String qualifiedName = "qualifiedName";
        QName name = new QName(qualifiedName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameWithPrefix_yjRV3() {
        String prefix = "prefix";
        String localName = "localName";
        QName name = new QName(prefix, localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, null, null);
        assertEquals(node, domnodepointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActual() throws Exception {
        domnodepointer = new DOMNodePointer(Mockito.mock(Node.class), Mockito.mock(Locale.class), "id");
        assertTrue(domnodepointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_hCLt0() throws Exception {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        DOMNodePointer domnodepointer = new DOMNodePointer(node, null, null);
        when(node.getParentNode()).thenReturn(node);
        assertTrue(DOMNodePointer.testNode(node, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getImmediateNodeTest_hGHP0_LMuX0() {
        Locale locale = new Locale("en", "US");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_Raxb0_Iqhu0() {
        Locale locale = new Locale("en", "US");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale, "id");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafFalse_OFRg1_cKBd0() {
        Node node = mock(Node.class);
        when(node.hasChildNodes()).thenReturn(false);
        DOMNodePointer pointer = new DOMNodePointer(node, Locale.ROOT, "id");
        assertTrue(pointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBaseValueTest_Eogd2_Lelo0() {
        Node node = mock(Node.class);
        Locale locale = Locale.getDefault();
        DOMNodePointer pointer = new DOMNodePointer(node, locale);
        Object result = pointer.getBaseValue();
        assertEquals(node, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, null, null);
        assertEquals(node, domnodepointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testchildIterator() throws Exception {
        domnodepointer = new DOMNodePointer(Mockito.mock(Node.class), Mockito.mock(Locale.class), "id");
        NodeIterator iterator = domnodepointer.childIterator(Mockito.mock(NodeTest.class), true, Mockito.mock(NodePointer.class));
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        domnodepointer = new DOMNodePointer(Mockito.mock(Node.class), Mockito.mock(Locale.class), "id");
        assertEquals(1, domnodepointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, null, null);
        when(node.hasChildNodes()).thenReturn(false);
        assertTrue(domnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, new Locale("en"), "id");
        when(node.getLocalName()).thenReturn("localName");
        assertEquals("localName", DOMNodePointer.getLocalName(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremove() throws Exception {
        node = mock(Node.class);
        parentNode = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, null, null);
        when(node.getParentNode()).thenReturn(parentNode);
        domnodepointer.remove();
        verify(parentNode, times(1)).removeChild(node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, null, null);
        when(node.getPrefix()).thenReturn("prefix");
        assertEquals("prefix", DOMNodePointer.getPrefix(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer2_mGmR2() {
        QName name = new QName("name");
        VariablePointer pointer = new VariablePointer(name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_sbpO3() {
        String qualifiedName = "name";
        QName name = new QName(qualifiedName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer2_HhbU2() {
        final QName name = new QName("name");
        new VariablePointer(name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer2_ODQp2() {
        QName name = new QName("qualifiedName");
        VariablePointer pointer = new VariablePointer(name);
    }
}