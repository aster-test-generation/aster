/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_SimpleCharStream_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeginTokenWithReader_yUOj0() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"));
        char result = stream.BeginToken();
        assertEquals('t', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testReInitWithReader_VhLs0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        stream.ReInit(new java.io.StringReader(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeginTokenWithInputStream_CVSt1_IeaZ0() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test".getBytes()));
        char result = stream.BeginToken();
        assertEquals('t', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDone_jmJX0_wGgm0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.Done();
        assertNull(stream.buffer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDone_jmJX0_wGgm0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.Done();
        assertNull(stream.bufline);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDone_jmJX0_wGgm0_3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.Done();
        assertNull(stream.bufcolumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoneWithInputStream_HNCo1_TLDM0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 1024);
        stream.Done();
        assertNull(stream.buffer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoneWithInputStream_HNCo1_TLDM0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 1024);
        stream.Done();
        assertNull(stream.bufline);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoneWithInputStream_HNCo1_TLDM0_3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 1024);
        stream.Done();
        assertNull(stream.bufcolumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoneWithReader_FknN2_SZeU0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024);
        stream.Done();
        assertNull(stream.buffer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoneWithReader_FknN2_SZeU0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024);
        stream.Done();
        assertNull(stream.bufline);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoneWithReader_FknN2_SZeU0_3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024);
        stream.Done();
        assertNull(stream.bufcolumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoneWithInputStreamNoBuffersize_OgYh3_esVD0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
        stream.Done();
        assertNull(stream.buffer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoneWithInputStreamNoBuffersize_OgYh3_esVD0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
        stream.Done();
        assertNull(stream.bufline);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoneWithInputStreamNoBuffersize_OgYh3_esVD0_3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
        stream.Done();
        assertNull(stream.bufcolumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoneWithReaderNoStartColumn_torX6_yezB0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        stream.Done();
        assertNull(stream.buffer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoneWithReaderNoStartColumn_torX6_yezB0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        stream.Done();
        assertNull(stream.bufline);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoneWithReaderNoStartColumn_torX6_yezB0_3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        stream.Done();
        assertNull(stream.bufcolumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadChar_0_RPyT0_XdBQ0() throws java.io.IOException {
        final java.io.Reader reader = new java.io.StringReader("Simple test");
        final int startLine = 4;
        final int startColumn = 5;
        final SimpleCharStream stream = new SimpleCharStream(reader, startLine, startColumn);
        final char result = stream.readChar();
        final char expected = 'S';
        org.junit.jupiter.api.Assertions.assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadChar_1_JVeW1_vMiY0() throws java.io.IOException {
        final java.io.InputStream dstream = new java.io.ByteArrayInputStream("Simple test".getBytes());
        final int startLine = 4;
        final int startColumn = 5;
        final int buffersize = 6;
        final SimpleCharStream stream = new SimpleCharStream(dstream, startLine, startColumn, buffersize);
        final char result = stream.readChar();
        final char expected = 'S';
        org.junit.jupiter.api.Assertions.assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadChar_2_xriP2_zAIN0() throws java.io.IOException {
        final java.io.InputStream dstream = new java.io.ByteArrayInputStream("Simple test".getBytes());
        final int startLine = 4;
        final int startColumn = 5;
        final SimpleCharStream stream = new SimpleCharStream(dstream, startLine, startColumn);
        final char result = stream.readChar();
        final char expected = 'S';
        org.junit.jupiter.api.Assertions.assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadChar_3_NDXC3_voNZ0() throws java.io.IOException {
        final java.io.InputStream dstream = new java.io.ByteArrayInputStream("Simple test".getBytes());
        final SimpleCharStream stream = new SimpleCharStream(dstream);
        final char result = stream.readChar();
        final char expected = 'S';
        org.junit.jupiter.api.Assertions.assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadChar_4_ggbO4_kMBO0() throws java.io.IOException {
        final java.io.Reader reader = new java.io.StringReader("Simple test");
        final int startLine = 4;
        final int startColumn = 5;
        final int buffersize = 6;
        final SimpleCharStream stream = new SimpleCharStream(reader, startLine, startColumn, buffersize);
        final char result = stream.readChar();
        final char expected = 'S';
        org.junit.jupiter.api.Assertions.assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadChar_5_HlwE5_fcds0() throws java.io.IOException {
        final java.io.Reader reader = new java.io.StringReader("Simple test");
        final SimpleCharStream stream = new SimpleCharStream(reader);
        final char result = stream.readChar();
        final char expected = 'S';
        org.junit.jupiter.api.Assertions.assertEquals(expected, result);
    }
}