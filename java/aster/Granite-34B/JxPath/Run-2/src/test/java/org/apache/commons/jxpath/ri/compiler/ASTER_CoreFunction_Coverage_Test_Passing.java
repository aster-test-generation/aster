/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreFunction_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent1_qtSQ0() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent2_TfzL1() {
        CoreFunction coreFunction = new CoreFunction(2, new Expression[0]);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent5_JDta4() {
        CoreFunction coreFunction = new CoreFunction(5, new Expression[0]);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue_FlcH1() throws Exception {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_lIzi0() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NORMALIZE_SPACE, null);
        String functionName = coreFunction.getFunctionName();
        assert "normalize-space".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_alcZ1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_TRANSLATE, null);
        String functionName = coreFunction.getFunctionName();
        assert "translate".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_ZBjP2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, null);
        String functionName = coreFunction.getFunctionName();
        assert "boolean".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_QmBG3() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NOT, null);
        String functionName = coreFunction.getFunctionName();
        assert "not".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_kjLY4() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_TRUE, null);
        String functionName = coreFunction.getFunctionName();
        assert "true".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_YODx5() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FALSE, null);
        String functionName = coreFunction.getFunctionName();
        assert "false".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_vCVV6() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LANG, null);
        String functionName = coreFunction.getFunctionName();
        assert "lang".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_COqv7() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NUMBER, null);
        String functionName = coreFunction.getFunctionName();
        assert "number".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test9_coey8() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_SUM, null);
        String functionName = coreFunction.getFunctionName();
        assert "sum".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test10_GUIK9() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FLOOR, null);
        String functionName = coreFunction.getFunctionName();
        assert "floor".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test11_QEkE10() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_CEILING, null);
        String functionName = coreFunction.getFunctionName();
        assert "ceiling".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test12_YqOQ11() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ROUND, null);
        String functionName = coreFunction.getFunctionName();
        assert "round".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test13_qFak12() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, null);
        String functionName = coreFunction.getFunctionName();
        assert "last".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test14_ZTTK13() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_POSITION, null);
        String functionName = coreFunction.getFunctionName();
        assert "position".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test15_IwBM14() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, null);
        String functionName = coreFunction.getFunctionName();
        assert "count".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test16_vVcY15() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ID, null);
        String functionName = coreFunction.getFunctionName();
        assert "id".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test17_KvYg16() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LOCAL_NAME, null);
        String functionName = coreFunction.getFunctionName();
        assert "local-name".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test18_JLCY17() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAMESPACE_URI, null);
        String functionName = coreFunction.getFunctionName();
        assert "namespace-uri".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test19_GIbP18() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAME, null);
        String functionName = coreFunction.getFunctionName();
        assert "name".equals(functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_hwFE0_fid1() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
        String expected = "getFunctionName()";
        String actual = coreFunction.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_Wqdj2_fid1() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
        String expected = "last()";
        String actual = coreFunction.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent3_TQtg2_fid1() {
        CoreFunction coreFunction = new CoreFunction(3, new Expression[0]);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent4_UAxA3_fid1() {
        CoreFunction coreFunction = new CoreFunction(4, new Expression[0]);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(false, result);
    }
}