/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor11_PONC10() {
        Object[] params = new Object[1];
        params[0] = new Object();
        Constructor result = MethodLookupUtils.lookupConstructor(MethodLookupUtils.class, params);
        Assertions.assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithNoMatch_zGEV4() {
        Class targetClass = Object.class;
        String name = "foo";
        Object[] parameters = {};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNullTargetClass_kkSY0() {
        Object[] parameters = {null};
        Method method = MethodLookupUtils.lookupMethod(null, "test", parameters);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithValidTypeAndParameters_xnvq3() {
        Object[] parameters = {"test"};
        Method method = MethodLookupUtils.lookupMethod(String.class, "length", parameters);
        assertEquals("length", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithAmbiguousMatch_XVkP3_XyGF0() {
        Class targetClass = Object.class;
        String name = "cast";
        Object[] parameters = {new Object(), Object.class};
        try {
            MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        } catch (JXPathException e) {
            assertEquals("Ambiguous method call: cast", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithNullParameters_Dhor2_PRbP0() throws NoSuchMethodException {
        Class targetClass = Integer.class;
        String name = "parseInt";
        Object[] parameters = {null};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals(Integer.class.getMethod(name, String.class), method);
    }
}