/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationAnd_Test_Passing {
    @Mock
    private EvalContext context;
    @Mock
    private Expression[] args;
    private CoreOperationAnd coreoperationand;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_Ptek0() {
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(new Expression[0]);
        assertEquals("and", coreOperationAnd.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        coreoperationand = new CoreOperationAnd(args);
        when(args[0].computeValue(context)).thenReturn(Boolean.TRUE);
        when(args[1].computeValue(context)).thenReturn(Boolean.FALSE);
        when(args[2].computeValue(context)).thenReturn(Boolean.TRUE);
        Object result = coreoperationand.computeValue(context);
        Assertions.assertEquals(Boolean.FALSE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_YeuO0() {
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(new Expression[0]);
        boolean result = coreOperationAnd.isSymmetric();
        org.junit.jupiter.api.Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_RSkI1() {
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(new Expression[0]);
        boolean result = coreOperationAnd.isSymmetric();
        org.junit.jupiter.api.Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_aVwK2() {
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(new Expression[0]);
        boolean result = coreOperationAnd.isSymmetric();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_GvgX0() {
        CoreOperationAnd object = new CoreOperationAnd(new Expression[0]);
        int result = object.getPrecedence();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_RZYF1() {
        CoreOperationAnd object = new CoreOperationAnd(new Expression[1]);
        int result = object.getPrecedence();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_LVYG2() {
        CoreOperationAnd object = new CoreOperationAnd(new Expression[2]);
        int result = object.getPrecedence();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_XJuO3() {
        CoreOperationAnd object = new CoreOperationAnd(new Expression[3]);
        int result = object.getPrecedence();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_bqmM4() {
        CoreOperationAnd object = new CoreOperationAnd(new Expression[4]);
        int result = object.getPrecedence();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_iCGm5() {
        CoreOperationAnd object = new CoreOperationAnd(new Expression[5]);
        int result = object.getPrecedence();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_uijD6() {
        CoreOperationAnd object = new CoreOperationAnd(new Expression[6]);
        int result = object.getPrecedence();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_qFCX7() {
        CoreOperationAnd object = new CoreOperationAnd(new Expression[7]);
        int result = object.getPrecedence();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test9_wUZw8() {
        CoreOperationAnd object = new CoreOperationAnd(new Expression[8]);
        int result = object.getPrecedence();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test10_Wrwy9() {
        CoreOperationAnd object = new CoreOperationAnd(new Expression[9]);
        int result = object.getPrecedence();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test11_pnWO10() {
        CoreOperationAnd object = new CoreOperationAnd(new Expression[10]);
        int result = object.getPrecedence();
        assertEquals(1, result);
    }
}