/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariableReference_Test_Passing {
    private QName varName;
    VariableReference variablereference;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getVariableNameTest2_EJXI1() {
        VariableReference variableReference = new VariableReference(new QName("prefix", "localName"));
        QName actual = variableReference.getVariableName();
        assertEquals(new QName("prefix", "localName"), actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getVariableNameTest3_sIRM2() {
        VariableReference variableReference = new VariableReference(new QName(" qualifiedName"));
        QName actual = variableReference.getVariableName();
        assertNotEquals(new QName(" qualifiedName2"), actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getVariableNameTest4_mpzK3() {
        VariableReference variableReference = new VariableReference(new QName("prefix", "localName"));
        QName actual = variableReference.getVariableName();
        assertNotEquals(new QName("prefix2", "localName"), actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_QVVa0() {
        VariableReference variableReference = new VariableReference(new QName(" qualifiedName"));
        boolean result = variableReference.isContextDependent();
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent1_CzJT1() {
        VariableReference variableReference = new VariableReference(new QName("prefix", "localName"));
        boolean result = variableReference.isContextDependent();
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_QvBC0() {
        VariableReference varRef = new VariableReference(new QName("name"));
        assertEquals("$name", varRef.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_YakQ0() {
        VariableReference variableReference = new VariableReference(new QName(" qualifiedName"));
        boolean actual = variableReference.computeContextDependent();
        boolean expected = false;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent2_SDhZ1() {
        VariableReference variableReference = new VariableReference(new QName("prefix", "localName"));
        boolean actual = variableReference.computeContextDependent();
        boolean expected = false;
        assert actual == expected;
    }
}