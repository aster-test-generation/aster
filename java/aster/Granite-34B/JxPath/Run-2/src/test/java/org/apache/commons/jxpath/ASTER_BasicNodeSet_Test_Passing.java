/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicNodeSet_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointers_OYNb0() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List pointers = basicNodeSet.getPointers();
        assertEquals(Collections.emptyList(), pointers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenValuesAreNull_regQ0_1() {
        final BasicNodeSet basicNodeSet = new BasicNodeSet();
        final List actual = basicNodeSet.getValues();
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenValuesAreNull_regQ0_2() {
        final BasicNodeSet basicNodeSet = new BasicNodeSet();
        final List actual = basicNodeSet.getValues();
        assertTrue(actual.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_fcaP0() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        assertEquals("[]", basicNodeSet.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodes_ReturnNotNull_usOJ0() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List result = basicNodeSet.getNodes();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodes_ReturnUnmodifiableList_AuGJ1() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List result = basicNodeSet.getNodes();
        try {
            result.add(new Object());
            fail("List should be unmodifiable");
        } catch (UnsupportedOperationException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_jVbO0_SFNN0() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        BasicNodeSet nodeSet = new BasicNodeSet();
        basicNodeSet.add(nodeSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenValuesAreNull_regQ0() {
        final BasicNodeSet basicNodeSet = new BasicNodeSet();
        final List actual = basicNodeSet.getValues();
        assertNotNull(actual);
        assertTrue(actual.isEmpty());
    }
}