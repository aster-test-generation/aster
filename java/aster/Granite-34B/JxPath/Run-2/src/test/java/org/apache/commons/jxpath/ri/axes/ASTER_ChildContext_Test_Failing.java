/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ChildContext_Test_Failing {
    private NodeIterator iterator;
    ChildContext childcontext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private SelfContext selfContext;
    @Mock
    private Pointer pointer;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    NamespaceContext parentContext;
    @Mock
    NodeTypeTest nodeTest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSingleNodePointer_1_BTNH0() {
        ChildContext childContext0 = new ChildContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0), true, false);
        Pointer pointer1 = childContext0.getSingleNodePointer();
        Assertions.assertNull(pointer1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode() throws Exception {
        childcontext = new ChildContext(parentContext, nodeTest, true, false);
        when(childcontext.getCurrentPosition()).thenReturn(0);
        assertTrue(childcontext.nextNode());
        verify(childcontext, times(1)).setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_TYkC0() throws Exception {
        iterator = mock(NodeIterator.class);
        childcontext = new ChildContext(null, null, false, false);
        final int position = 10;
        final int oldPosition = childcontext.getCurrentPosition();
        childcontext.setPosition(position);
        verify(iterator, times(1)).setPosition(position);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_whenPositionIsOne_thenReturnsTrue_YVyc0_fid1() {
        ChildContext childContext = new ChildContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1), true, true);
        int position = 1;
        boolean result = childContext.setPosition(position);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_whenPositionIsThree_thenReturnsTrue_NSgp2_fid1() {
        ChildContext childContext = new ChildContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1), true, true);
        int position = 3;
        boolean result = childContext.setPosition(position);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_OeeP0_GZAC0_fid2() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        ChildContext childContext = new ChildContext(parentContext, nodeTest, true, false);
        boolean result = childContext.nextNode();
        org.junit.jupiter.api.Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeWithCoverage_UUIT1_wnBZ0_1_fid2() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        ChildContext childContext = new ChildContext(parentContext, nodeTest, true, false);
        boolean result = childContext.nextNode();
        result = childContext.nextNode();
        org.junit.jupiter.api.Assertions.assertTrue(result);
    }
}