/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicTypeConverter_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_NullType_ReturnsTrue_XMuc1() {
        final Object object = new Object();
        final Class toType = null;
        final BasicTypeConverter target = new BasicTypeConverter();
        final boolean actual = target.canConvert(object, toType);
        Assertions.assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest1_mWIE0() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        assertNotNull(collection1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest2_jyTV1() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        assertEquals(0, collection1.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest3_NSMj2() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        boolean boolean2 = collection1.isEmpty();
        assertTrue(boolean2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest4_SGfD3() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        boolean boolean2 = collection1.contains((Object) null);
        assertFalse(boolean2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest5_qBti4() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        Object object2 = new Object();
        boolean boolean3 = collection1.contains(object2);
        assertFalse(boolean3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest6_haho5() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        Object[] objectArray2 = collection1.toArray();
        assertEquals(0, objectArray2.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest7_vKcW6() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        Object[] objectArray2 = new Object[4];
        Object[] objectArray3 = collection1.toArray(objectArray2);
        assertNotSame(objectArray2, objectArray3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest8_Kdvs7() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        boolean boolean2 = collection1.add((Object) null);
        assertTrue(boolean2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest9_desq8() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        boolean boolean2 = collection1.remove((Object) null);
        assertFalse(boolean2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest10_SyFZ9() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        boolean boolean2 = collection1.containsAll((Collection<?>) null);
        assertFalse(boolean2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest11_Rinr10() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        boolean boolean2 = collection1.addAll((Collection<?>) null);
        assertTrue(boolean2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest12_AKUo11() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        boolean boolean2 = collection1.removeAll((Collection<?>) null);
        assertFalse(boolean2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest13_juux12() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        boolean boolean2 = collection1.retainAll((Collection<?>) null);
        assertFalse(boolean2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertWithNullObjectAndType_ldhM0() {
        Object object = null;
        Class toType = null;
        Object result = new BasicTypeConverter().convert(object, toType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertWithObjectAndNullType_EoIl1() {
        Object object = new Object();
        Class toType = null;
        Object result = new BasicTypeConverter().convert(object, toType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertWithArrayAndPrimitiveType_XRGf14() {
        Object object = new Object[0];
        Class toType = int.class;
        Object result = new BasicTypeConverter().convert(object, toType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertWithCollectionAndPrimitiveType_gILX15() {
        Object object = new ArrayList();
        Class toType = int.class;
        Object result = new BasicTypeConverter().convert(object, toType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveNullInput_gZPT9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive(null, Integer.class);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveNullType_bVeg10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", null);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionForSet_IZGX2_kwgh0() {
        Set<String> set = new HashSet<>();
        set.add("test");
        Collection<String> unmodCollection = new ArrayList<>(set);
        assertEquals(set, unmodCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_NullType_ReturnsTrue_XMuc1_fid1() {
        final Object object = new Object();
        final Class toType = null;
        final BasicTypeConverter target = new BasicTypeConverter();
        final boolean actual = target.canConvert(object, toType);
        Assertions.assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest1_mWIE0_fid1() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection<Integer> collection1 = basicTypeConverter0.allocateCollection(class0);
        assertNotNull(collection1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest2_jyTV1_fid1() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection<Integer> collection1 = basicTypeConverter0.allocateCollection(class0);
        assertEquals(0, collection1.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest3_NSMj2_fid1() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        boolean boolean2 = collection1.isEmpty();
        assertFalse(boolean2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest4_SGfD3_fid1() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        boolean boolean2 = collection1.contains((Object) null);
        assertTrue(boolean2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest5_qBti4_fid1() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        Object object2 = new Object();
        boolean boolean3 = collection1.contains(object2);
        assertTrue(boolean3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest7_vKcW6_fid1() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        Object[] objectArray2 = new Object[4];
        Object[] objectArray3 = collection1.toArray(objectArray2);
        assertNotSame(objectArray2, objectArray3);
        // Fix the assertion
        assertEquals(objectArray2, objectArray3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest8_Kdvs7_fid1() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection<Integer> collection1 = basicTypeConverter0.allocateCollection(class0);
        boolean boolean2 = collection1.add(null);
        assertTrue(boolean2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest10_SyFZ9_fid1() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection<Integer> collection1 = basicTypeConverter0.allocateCollection(class0);
        boolean boolean2 = collection1.containsAll((Collection<?>) null);
        assertFalse(boolean2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest12_AKUo11_fid1() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection<Integer> collection1 = basicTypeConverter0.allocateCollection(class0);
        boolean boolean2 = collection1.removeAll((Collection<?>) null);
        assertFalse(boolean2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest13_juux12_fid1() {
        BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
        Class<Integer> class0 = Integer.TYPE;
        Collection collection1 = basicTypeConverter0.allocateCollection(class0);
        boolean boolean2 = collection1.retainAll((Collection<?>) null);
        assertTrue(boolean2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertWithNullObjectAndType_ldhM0_fid1() {
        Object object = null;
        Class toType = null;
        Object result = new BasicTypeConverter().convert(object, toType);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertWithObjectAndNullType_EoIl1_fid1() {
        Object object = new Object();
        Class toType = null;
        Object result = new BasicTypeConverter().convert(object, toType);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertWithArrayAndPrimitiveType_XRGf14_fid1() {
        Object object = new Object[0];
        Class toType = int.class;
        Object result = new BasicTypeConverter().convert(object, toType);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertWithCollectionAndPrimitiveType_gILX15_fid1() {
        Object object = new ArrayList();
        Class toType = int.class;
        Object result = new BasicTypeConverter().convert(object, toType);
        assertEquals(0, result);
    }
}