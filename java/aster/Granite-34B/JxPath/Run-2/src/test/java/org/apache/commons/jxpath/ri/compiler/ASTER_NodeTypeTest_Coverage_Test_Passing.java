/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_NodeTypeTest_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToString_case1_fLFU0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        String result = nodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_NODE);
        assertEquals("node", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToString_case2_gWOh1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_TEXT);
        String result = nodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_TEXT);
        assertEquals("text", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToString_case3_lvdr2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
        String result = nodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_COMMENT);
        assertEquals("comment", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToString_case4_oKxq3() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_PI);
        String result = nodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_PI);
        assertEquals("processing-instruction", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToString_case5_pXFb4() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(100);
        String result = nodeTypeTest.nodeTypeToString(100);
        assertEquals("UNKNOWN", result);
    }
}