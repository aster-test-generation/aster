/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointer_Test_Failing {
    CollectionPointer collectionpointer;
    private Object collection;
    private DOMNodePointer parent;
    private int index;
    private Object value;
    private Locale locale;
    private ValueUtils valueUtils;
    NodeIterator nodeIterator;
    NodeIterator nodeIterator2;
    NodeIterator nodeIterator3;
    NodeIterator nodeIterator4;
    NodeIterator nodeIterator5;
    NodeIterator nodeIterator6;
    NodeIterator nodeIterator7;
    NodeIterator nodeIterator8;
    NodeIterator nodeIterator9;
    NodeIterator nodeIterator10;
    NodeIterator nodeIterator11;
    NodeIterator nodeIterator12;
    NodeIterator nodeIterator13;
    NodeIterator nodeIterator14;
    NodeIterator nodeIterator15;
    NodeIterator nodeIterator16;
    NodeIterator nodeIterator17;
    NodeIterator nodeIterator18;
    NodeIterator nodeIterator19;
    NodeIterator nodeIterator20;
    NodeIterator nodeIterator21;
    NodeIterator nodeIterator22;
    NodeIterator nodeIterator23;
    NodeIterator nodeIterator24;
    NodeIterator nodeIterator25;
    NodeIterator nodeIterator26;
    NodeIterator nodeIterator27;
    NodeIterator nodeIterator28;
    NodeIterator nodeIterator29;
    NodeIterator nodeIterator30;
    NodeIterator nodeIterator31;
    NodeIterator nodeIterator32;
    NodeIterator nodeIterator33;
    NodeIterator nodeIterator34;
    NodeIterator nodeIterator35;
    NodeIterator nodeIterator36;
    NodeIterator nodeIterator37;
    NodeIterator nodeIterator38;
    NodeIterator nodeIterator39;
    NodeIterator nodeIterator40;
    NodeIterator nodeIterator41;
    NodeIterator nodeIterator42;
    NodeIterator nodeIterator43;
    NodeIterator nodeIterator44;
    NodeIterator nodeIterator45;
    NodeIterator nodeIterator46;
    NodeIterator nodeIterator47;
    NodeIterator nodeIterator48;
    NodeIterator nodeIterator49;
    NodeIterator nodeIterator50;
    NodeIterator nodeIterator51;
    NodeIterator nodeIterator52;
    NodeIterator nodeIterator53;
    NodeIterator nodeIterator54;
    NodeIterator nodeIterator55;
    NodeIterator nodeIterator56;
    NodeIterator nodeIterator57;
    NodeIterator nodeIterator58;
    NodeIterator nodeIterator59;
    NodeIterator nodeIterator60;
    NodeIterator nodeIterator61;
    NodeIterator nodeIterator62;
    NodeIterator nodeIterator63;
    NodeIterator nodeIterator64;
    NodeIterator nodeIterator65;
    NodeIterator nodeIterator66;
    NodeIterator nodeIterator67;
    NodeIterator nodeIterator68;
    NodeIterator nodeIterator69;
    NodeIterator nodeIterator70;
    NodeIterator nodeIterator71;
    NodeIterator nodeIterator72;
    NodeIterator nodeIterator73;
    NodeIterator nodeIterator74;
    NodeIterator nodeIterator75;
    NodeIterator nodeIterator76;
    NodeIterator nodeIterator77;
    NodeIterator nodeIterator78;
    NodeIterator nodeIterator79;
    NodeIterator nodeIterator80;
    NodeIterator nodeIterator81;
    NodeIterator nodeIterator82;
    NodeIterator nodeIterator83;
    NodeIterator nodeIterator84;
    NodeIterator nodeIterator85;
    NodeIterator nodeIterator86;
    NodeIterator nodeIterator87;
    NodeIterator nodeIterator88;
    NodeIterator nodeIterator89;
    NodeIterator nodeIterator90;
    NodeIterator nodeIterator91;
    NodeIterator nodeIterator92;
    NodeIterator nodeIterator93;
    NodeIterator nodeIterator94;
    NodeIterator nodeIterator95;
    NodeIterator nodeIterator96;
    NodeIterator nodeIterator97;
    NodeIterator nodeIterator98;
    NodeIterator nodeIterator99;
    NodeIterator nodeIterator100;
    NodeIterator nodeIterator101;
    NodeIterator nodeIterator102;
    NodeIterator nodeIterator103;
    NodeIterator nodeIterator104;
    NodeIterator nodeIterator105;
    NodeIterator nodeIterator106;
    NodeIterator nodeIterator107;
    NodeIterator nodeIterator108;
    NodeIterator nodeIterator109;
    NodeIterator nodeIterator110;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        collection = new Object();
        collectionpointer = new CollectionPointer(collection, Locale.getDefault());
        int expected = System.identityHashCode(collection);
        int actual = collectionpointer.hashCode();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_Unyh0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        NodeIterator nodeIterator = collectionPointer.attributeIterator(new QName(""));
        assertEquals(new CollectionAttributeNodeIterator(collectionPointer, new QName("")), nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndexWithNegativeIndex_oQwV1() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        collectionPointer.setIndex(-1);
        assertEquals(0, collectionPointer.getIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndexWithIndexGreaterThanSize_ZiJQ2() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        collectionPointer.setIndex(10);
        assertEquals(0, collectionPointer.getIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        collectionpointer = new CollectionPointer(new Object(), new Locale(""));
        assertNotNull(collectionpointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_AUpm0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        assertTrue(collectionPointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator() throws Exception {
        collectionpointer = new CollectionPointer(new Object(), new Locale(""));
        nodeIterator = mock(NodeIterator.class);
        when(collectionpointer.namespaceIterator()).thenReturn(nodeIterator);
        assertEquals(nodeIterator, collectionpointer.namespaceIterator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_Oxlk0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        NodeIterator iterator = collectionPointer.namespaceIterator();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisContainer() throws Exception {
        collectionpointer = new CollectionPointer(new Object(), new Locale("en"));
        when(collectionpointer.isContainer()).thenReturn(true);
        assertTrue(collectionpointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_0_KiCG0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        boolean result = collectionPointer.isContainer();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_cHVB0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        collectionPointer.setValue(new Object());
    }
}