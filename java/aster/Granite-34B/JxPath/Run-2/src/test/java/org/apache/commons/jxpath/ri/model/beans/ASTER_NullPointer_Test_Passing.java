/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPointer_Test_Passing {
    private QName name;
    NullPointer nullpointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals() throws Exception {
        name = new QName(" qualifiedName");
        nullpointer = new NullPointer(name, Locale.getDefault());
        Object object = new Object();
        boolean expected = false;
        boolean actual = nullpointer.equals(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_EnoH0() {
        NullPointer pointer = new NullPointer(Locale.US, "id");
        assertTrue(pointer.equals(pointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_Kylt1() {
        NullPointer pointer = new NullPointer(Locale.US, "id");
        assertFalse(pointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNonPointerObject_gMrM2() {
        NullPointer pointer = new NullPointer(Locale.US, "id");
        assertFalse(pointer.equals(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithPointerOfDifferentName_aZPB3() {
        NullPointer pointer1 = new NullPointer(Locale.US, "id1");
        NullPointer pointer2 = new NullPointer(Locale.US, "id2");
        assertTrue(pointer1.equals(pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithPointerOfSameName_HMyS4() {
        NullPointer pointer1 = new NullPointer(Locale.US, "id");
        NullPointer pointer2 = new NullPointer(Locale.US, "id");
        assertTrue(pointer1.equals(pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithPointerOfNullName_pSuC5() {
        NullPointer pointer1 = new NullPointer(Locale.US, "id");
        NullPointer pointer2 = new NullPointer(Locale.US, null);
        assertTrue(pointer1.equals(pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        nullpointer = new NullPointer(Locale.getDefault(), "id");
        boolean result = nullpointer.isCollection();
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_TfMB0() {
        NullPointer nullPointer = new NullPointer(new Locale("en"), "id");
        assertEquals(0, nullPointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        name = new QName("name");
        nullpointer = new NullPointer(name, Locale.getDefault());
        assertEquals(name, nullpointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameTest_YJeT0() {
        NullPointer nullPointer = new NullPointer(new Locale("en"), "id");
        assertEquals(nullPointer.getName(), null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyPointer_1() throws Exception {
        nullpointer = new NullPointer(Locale.getDefault(), "id");
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        assertNotNull(propertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyPointer_2() throws Exception {
        nullpointer = new NullPointer(Locale.getDefault(), "id");
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        assertEquals(0, propertyPointer.getPropertyCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyPointer_3() throws Exception {
        nullpointer = new NullPointer(Locale.getDefault(), "id");
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        assertEquals(-2147483648, propertyPointer.getPropertyIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyPointer_4() throws Exception {
        nullpointer = new NullPointer(Locale.getDefault(), "id");
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        assertNull(propertyPointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyPointer_9() throws Exception {
        nullpointer = new NullPointer(Locale.getDefault(), "id");
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        assertNotEquals(0, propertyPointer.getPropertyIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_JguB0() {
        NullPointer nullPointer = new NullPointer(Locale.getDefault(), "id");
        PropertyPointer propertyPointer = nullPointer.getPropertyPointer();
        assertNotNull(propertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        nullpointer = new NullPointer(Locale.getDefault(), "id");
        Object baseValue = nullpointer.getBaseValue();
        assertEquals(null, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_NullPointer_1_nzdH0() {
        Locale locale = Locale.getDefault();
        String id = "id";
        NullPointer nullPointer = new NullPointer(locale, id);
        Object baseValue = nullPointer.getBaseValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_eeXO0() {
        NullPointer nullPointer = new NullPointer(new Locale("en"), "id");
        boolean actual = nullPointer.isActual();
        assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        nullpointer = new NullPointer(Locale.getDefault(), "id");
        assertTrue(nullpointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_WAbH0() {
        NullPointer nullPointer = new NullPointer(new Locale("en"), "id");
        boolean actual = nullPointer.isLeaf();
        boolean expected = true;
        assert actual == expected;
    }
}