/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodePointer_Test_Failing {
    Node node;
    DOMNodePointer domnodepointer;
    NodePointer nodepointer;
    NamedNodeMap namednodemap;
    Attr attr;
    NodeList nodelist;
    Document document;
    @Mock
    Locale locale;
    @Mock
    VariablePointer parent;
    Element element;
    NodeIterator nodeIterator;
    QName qName;
    NodeIterator nodeiterator;
    @Mock
    private Object object;
    private String defaultNamespace;
    private Node parentNode;
    private String id;
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, null, null);
        when(node.getChildNodes()).thenReturn(nodelist);
        when(node.appendChild(any(Node.class))).thenReturn(node);
        when(node.getParentNode()).thenReturn(node);
        when(nodelist.item(any())).thenReturn(node);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.removeChild(any(Node.class))).thenReturn(node);
        when(node.cloneNode(any())).thenReturn(node);
        domnodepointer.setValue("test");
        verify(node, times(1)).getNodeType();
        verify(node, times(1)).getNodeValue();
        verify(node, times(1)).setNodeValue(anyString());
        verify(node, times(1)).removeChild(any(Node.class));
        verify(node, times(1)).appendChild(any(Node.class));
        verify(node, times(1)).getParentNode();
        verify(node, times(1)).getOwnerDocument();
        verify(node, times(1)).cloneNode(anyBoolean());
        verify(nodelist, times(1)).item(anyInt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_OiXy0() throws Exception {
        element = mock(Element.class);
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, locale, "id");
        when(node.getParentNode()).thenReturn(node);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getNamespaceURI()).thenReturn("test");
        when(element.getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("test");
        String uri = DOMNodePointer.getNamespaceURI(node);
        assertEquals("test", uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_qZHG0() throws Exception {
        Node node = mock(Node.class);
        NodePointer nodepointer = mock(NodePointer.class);
        NodePointer nodepointer1 = mock(NodePointer.class);
        NamedNodeMap namednodemap = mock(NamedNodeMap.class);
        DOMNodePointer domnodepointer = new DOMNodePointer(node, null, null);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(namednodemap.item(anyInt())).thenReturn(node);
        when(nodepointer1.getNode()).thenReturn(node);
        when(node.getFirstChild()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        assertEquals(0, domnodepointer.compareChildNodePointers(nodepointer, nodepointer1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue_gKTg0() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, null, null);
        when(node.getChildNodes()).thenReturn(nodelist);
        when(node.appendChild(any(Node.class))).thenReturn(node);
        when(node.getParentNode()).thenReturn(document);
        when(nodelist.item(anyInt())).thenReturn(node);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.removeChild(any(Node.class))).thenReturn(node);
        when(node.cloneNode(anyBoolean())).thenReturn(node);
        domnodepointer.setValue("test");
        verify(node, times(1)).getNodeType();
        verify(node, times(1)).getNodeValue();
        verify(node, times(1)).setNodeValue("test");
        verify(node, times(1)).removeChild(any(Node.class));
        verify(node, times(1)).appendChild(any(Node.class));
        verify(document, times(1)).getParentNode();
        verify(node, times(1)).getOwnerDocument();
        verify(node, times(1)).cloneNode(anyBoolean());
        verify(nodelist, times(1)).item(anyInt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfindEnclosingAttribute_JasX0() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        domnodepointer = new DOMNodePointer(node, locale, id);
        when(node.getParentNode()).thenReturn(node);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getAttribute(anyString())).thenReturn("value");
        assertEquals("value", DOMNodePointer.findEnclosingAttribute(node, "attrName"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceResolver_OTCy0() throws Exception {
        localNamespaceResolver = mock(NamespaceResolver.class);
        domnodepointer = new DOMNodePointer(mock(Node.class), mock(Locale.class), "id");
        domnodepointer.getNamespaceResolver();
        verify(localNamespaceResolver, times(1)).setNamespaceContextPointer(domnodepointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForNullNode_vmLd3_SYIy0() {
        DOMNodePointer pointer = new DOMNodePointer(null, new Locale("en", "US"), "id");
        assertNull(pointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetValue_xcua0() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        element = mock(Element.class);
        domnodepointer = new DOMNodePointer(node, null, null);
        when(node.getChildNodes()).thenReturn(nodelist);
        when(nodelist.item(any())).thenReturn(node);
        when(node.getParentNode()).thenReturn(node);
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        when(node.getNodeValue()).thenReturn("test");
        assertEquals("test", domnodepointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, null, null);
        when(node.getParentNode()).thenReturn(node);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getNamespaceURI()).thenReturn("namespaceURI");
        assertEquals("namespaceURI", domnodepointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        domnodepointer = new DOMNodePointer(node, locale, "id");
        when(node.hasChildNodes()).thenReturn(true);
        assertTrue(domnodepointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, null, null);
        when(node.hashCode()).thenReturn(123);
        assertEquals(123, domnodepointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, null, null);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("localName");
        when(node.getNamespaceURI()).thenReturn("namespaceURI");
        assertEquals("namespaceURI", domnodepointer.getName().getPrefix());
        assertEquals("localName", domnodepointer.getName().getName());
    }
}