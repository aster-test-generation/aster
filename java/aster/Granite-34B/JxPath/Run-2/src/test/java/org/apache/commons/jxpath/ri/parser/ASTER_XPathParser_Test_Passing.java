/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.Vector;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_XPathParser_Test_Passing {
    private XPathParser xpathParser;
    private XPathParser parser;
    private int[] jj_la1 = new int[39];
    private Compiler compiler;
    private int jj_gen;
    XPathParser xpathparser;
    private int jj_endpos;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    private int jj_kind = -1;
    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    static private int[] jj_la1_0;
    @Mock
    SimpleCharStream stream;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFilterExpr_JTxo0() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        try {
            Object result = parser.FilterExpr();
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException20_QxNa19() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNCName_Without_CoreFunctions() throws Exception {
        xpathparser = mock(XPathParser.class);
        doReturn("").when(xpathparser).NCName_Without_CoreFunctions();
        assertEquals("", xpathparser.NCName_Without_CoreFunctions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrimaryExpr() throws Exception {
        xpathparser = mock(XPathParser.class);
        compiler = mock(Compiler.class);
        doReturn(new Object()).when(compiler).literal(anyString());
        doReturn(new Object()).when(compiler).number(anyString());
        when(xpathparser.PrimaryExpr()).thenReturn(new Object());
        Object result = xpathparser.PrimaryExpr();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnaryExpr() throws Exception {
        xpathparser = mock(XPathParser.class);
        compiler = mock(Compiler.class);
        doReturn(new Object()).when(compiler).minus(any());
        Object ex = new Object();
        when(xpathparser.UnaryExpr()).thenReturn(ex);
        Object actual = xpathparser.UnaryExpr();
        assertEquals(ex, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPredicate() throws Exception {
        xpathparser = mock(XPathParser.class);
        Object ex = new Object();
        when(xpathparser.Predicate()).thenReturn(ex);
        Object result = xpathparser.Predicate();
        assertEquals(ex, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdditiveExpr_sxbr0() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        try {
            Object result = parser.AdditiveExpr();
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetCompiler() throws Exception {
        xpathparser = mock(XPathParser.class);
        compiler = mock(Compiler.class);
        xpathparser.setCompiler(compiler);
        verify(xpathparser, times(1)).setCompiler(compiler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseExpression() throws Exception {
        xpathparser = mock(XPathParser.class);
        Object ex = new Object();
        when(xpathparser.parseExpression()).thenReturn(ex);
        Object result = xpathparser.parseExpression();
        assertEquals(ex, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNextToken() throws Exception {
        xpathparser = mock(XPathParser.class);
        Token token = mock(Token.class);
        when(xpathparser.getNextToken()).thenReturn(token);
        Token actual = xpathparser.getNextToken();
        assertEquals(token, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCoreFunctionName() throws Exception {
        xpathparser = mock(XPathParser.class);
        when(xpathparser.CoreFunctionName()).thenReturn(1);
        assertEquals(1, xpathparser.CoreFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNCName() throws Exception {
        xpathparser = mock(XPathParser.class);
        when(xpathparser.NCName()).thenReturn("NCName");
        assertEquals("NCName", xpathparser.NCName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNCName_ecJR0() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        try {
            assertEquals("NCName", parser.NCName());
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDisableTracing_fecp0() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        parser.disable_tracing();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType() throws Exception {
        xpathparser = mock(XPathParser.class);
        doReturn(0).when(xpathparser).NodeType();
        int type = xpathparser.NodeType();
        assertEquals(0, type);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeText_Sgav0() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        try {
            assertEquals(Compiler.NODE_TYPE_TEXT, parser.NodeType());
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeNode_lWJJ1() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        try {
            assertEquals(Compiler.NODE_TYPE_NODE, parser.NodeType());
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeComment_GrNa2() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        try {
            assertEquals(Compiler.NODE_TYPE_COMMENT, parser.NodeType());
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypePI_EcFd3() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        try {
            assertEquals(Compiler.NODE_TYPE_PI, parser.NodeType());
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAbbreviatedAxisSpecifier_uCvu0() throws ParseException {
        XPathParser xpathParser = new XPathParser(new java.io.StringReader(""));
        int axis = xpathParser.AbbreviatedAxisSpecifier();
        assertEquals(Compiler.AXIS_CHILD, axis);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRelativeLocationPath_UnAM0() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        try {
            Object result = parser.RelativeLocationPath();
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpression() throws Exception {
        xpathparser = mock(XPathParser.class);
        Object ex = new Object();
        when(xpathparser.Expression()).thenReturn(ex);
        Object result = xpathparser.Expression();
        assertEquals(ex, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithReader_rOUY0() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        parser.ReInit(new java.io.StringReader(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithInputStream_MjtF1() {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        parser.ReInit(new java.io.ByteArrayInputStream(new byte[0]));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithTokenManager_RcHY2() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tokenManager);
        parser.ReInit(tokenManager);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisName() throws Exception {
        xpathparser = mock(XPathParser.class);
        when(xpathparser.AxisName()).thenReturn(1);
        assertEquals(1, xpathparser.AxisName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisNameSelf_EowL0() throws Exception {
        XPathParser parser = new XPathParser(new java.io.StringReader("self::node()"));
        assertEquals(Compiler.AXIS_SELF, parser.AxisName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisNameChild_zGAM1() throws Exception {
        XPathParser parser = new XPathParser(new java.io.StringReader("child::node()"));
        assertEquals(Compiler.AXIS_CHILD, parser.AxisName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException_lIYn0_ohyc0() {
        XPathParser xpathParser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        xpathParser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseExceptionWithReader_KJDe1_lLLn0() {
        XPathParser xpathParser = new XPathParser(new java.io.StringReader(""));
        xpathParser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseExceptionWithTokenManager_DHUD2_gvqX0() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0])));
        XPathParser xpathParser = new XPathParser(tokenManager);
        xpathParser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException_qDvf0_letf0() {
        XPathParser xpathParser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        ParseException exception = xpathParser.generateParseException();
        assertTrue(exception.getMessage() != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseExceptionWithReader_EHEi1_MxLk0() {
        XPathParser xpathParser = new XPathParser(new java.io.StringReader(""));
        ParseException exception = xpathParser.generateParseException();
        assertTrue(exception.getMessage() != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAbbreviatedAxisSpecifierWithAxisAttribute_NGQJ1_fid2() throws ParseException {
        XPathParser xpathParser = new XPathParser(new java.io.StringReader(""));
        int axis = xpathParser.AbbreviatedAxisSpecifier();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisSpecifier_tTGa2() throws Exception {
        XPathParser xpathParser = new XPathParser(new java.io.StringReader(""));
        int axis = xpathParser.AxisSpecifier();
        assertEquals(2, axis);
    }
}