/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Stack;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.lenient;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DescendantContext_Test_Passing {
    DescendantContext descendantcontext;
    SelfContext selfcontext;
    NamespaceContext namespacecontext;
    NodeTypeTest nodetypetest;
    private boolean setStarted = false;
    private NodePointer currentNodePointer = null;
    private NodeTest nodeTest;
    private boolean includeSelf;
    private Stack stack = null;
    @Mock
    NamespaceContext namespaceContext;
    @Mock
    NodeTypeTest nodeTypeTest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisChildOrderingRequired() throws Exception {
        lenient().when(namespaceContext.isChildOrderingRequired()).thenReturn(true);
        descendantcontext = new DescendantContext(namespaceContext, true, nodeTypeTest);
        assertTrue(descendantcontext.isChildOrderingRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset_QgTL0() throws Exception {
        SelfContext selfcontext = new SelfContext(Mockito.mock(NamespaceContext.class), Mockito.mock(NodeTypeTest.class));
        NamespaceContext namespacecontext = new NamespaceContext(selfcontext, Mockito.mock(NodeTypeTest.class));
        NodeTypeTest nodetypetest = new NodeTypeTest(1);
        descendantcontext = new DescendantContext(namespacecontext, true, nodetypetest);
        descendantcontext.reset();
        assertTrue(descendantcontext.isChildOrderingRequired());
    }
}