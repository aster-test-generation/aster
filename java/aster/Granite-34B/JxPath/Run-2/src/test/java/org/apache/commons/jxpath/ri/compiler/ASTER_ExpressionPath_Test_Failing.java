/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExpressionPath_Test_Failing {
    ExpressionPath expressionpath;
    EvalContext context;
    Constant constant;
    Expression[] predicates;
    Step[] steps;
    NamespaceContext namespaceContext;
    SelfContext selfContext;
    NodeTypeTest nodeTypeTest;
    private Expression expression;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ConstantExpression_NoPredicateOrSteps_UxJR0() {
        final Constant constant = new Constant("expression");
        final ExpressionPath expressionPath = new ExpressionPath(constant, null, null);
        assertEquals("expression", expressionPath.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ExpressionPathExpression_NoPredicateOrSteps_cSeN3() {
        final ExpressionPath expressionPathExpression = new ExpressionPath(new Constant("expression"), null, null);
        final ExpressionPath expressionPath = new ExpressionPath(expressionPathExpression, null, null);
        assertEquals("(expression)", expressionPath.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ConstantExpression_WithPredicates_jLav5() {
        final Constant constant = new Constant("expression");
        final ExpressionPath expressionPath = new ExpressionPath(constant,
            new Expression[]{new Constant("predicate1"), new Constant("predicate2")}, null);
        assertEquals("expression[predicate1][predicate2]", expressionPath.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ExpressionPathExpression_WithPredicates_QshR8() {
        final ExpressionPath expressionPathExpression = new ExpressionPath(new Constant("expression"), null, null);
        final ExpressionPath expressionPath = new ExpressionPath(expressionPathExpression,
            new Expression[]{new Constant("predicate1"), new Constant("predicate2")}, null);
        assertEquals("(expression)[predicate1][predicate2]", expressionPath.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_Withpredicates_ubLw2() {
        Constant constant = new Constant("string");
        ExpressionPath expressionPath = new ExpressionPath(constant, new Expression[]{new Constant("predicate1"), new Constant("predicate2")}, null);
        boolean result = expressionPath.computeContextDependent();
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath_0_YmiO0() {
        Constant constant0 = new Constant("a");
        ExpressionPath expressionPath0 = new ExpressionPath(constant0, new Expression[0], new Step[0]);
        boolean result = expressionPath0.isSimpleExpressionPath();
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath_1_rKsw1() {
        Number number0 = new Integer(0);
        Constant constant0 = new Constant(number0);
        ExpressionPath expressionPath0 = new ExpressionPath(constant0, new Expression[0], new Step[0]);
        boolean result = expressionPath0.isSimpleExpressionPath();
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_CoreOperationExpression_NoPredicateOrSteps_aiBU2_NBbS0() {
        final CoreOperation coreOperation = mock(CoreOperation.class);
        final ExpressionPath expressionPath = new ExpressionPath(coreOperation, null, null);
        assertEquals("(coreOperation)", expressionPath.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_CoreOperationExpression_NoPredicateOrSteps_aiBU2_NBbS0_fid1() {
        final CoreOperation coreOperation = mock(CoreOperation.class);
        final ExpressionPath expressionPath = new ExpressionPath(coreOperation, null, null);
        assertEquals("(Mock for CoreOperation, hashCode: 758845685)", expressionPath.toString());
    }
}