/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.beans.PropertyDescriptor;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyCollection_kmCJ3() {
        Collection collection = new ArrayList();
        Iterator result = ValueUtils.iterate(collection);
        assertTrue(result.equals(Collections.EMPTY_LIST.iterator()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromList_LObr3() {
        List<Object> list = new ArrayList<>();
        int index = 0;
        Object result = ValueUtils.remove(list, index);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromCollection_TNnb4() {
        Collection<Object> collection = new HashSet<>();
        int index = 0;
        Object result = ValueUtils.remove(collection, index);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonArrayNonListNonCollectionObject_IxQY6() {
        Object value = ValueUtils.getValue(new Object(), 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithArray_VCxn2_2_fid3() {
        Object[] collection = new Object[]{"a", "b", "c"};
        Iterator result = ValueUtils.iterate(collection);
        assertTrue(result.next().equals("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithArray_VCxn2_3() {
        Object[] collection = new Object[]{"a", "b", "c"};
        Iterator result = ValueUtils.iterate(collection);
        assertTrue(result.next().equals("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithCollection_ECQI4_2() {
        Collection collection = new ArrayList();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Iterator result = ValueUtils.iterate(collection);
        assertTrue(result.next().equals("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithCollection_ECQI4_3() {
        Collection collection = new ArrayList();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Iterator result = ValueUtils.iterate(collection);
        assertTrue(result.next().equals("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue2_DCcv1_uueD0() {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = null;
        int index = 5;
        try {
            ValueUtils.getValue(bean, propertyDescriptor, index);
        } catch (JXPathException e) {
        }
    }
}