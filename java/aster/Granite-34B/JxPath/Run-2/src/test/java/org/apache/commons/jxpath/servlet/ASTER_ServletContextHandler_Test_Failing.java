/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ServletContextHandler_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_tvkH0_1() {
        ServletContextHandler handler = new ServletContextHandler();
        Object context = new Object(); // Initialize the context object
        String[] propertyNames = handler.getPropertyNames(context);
        assertNotNull(propertyNames);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_tvkH0_2() {
        ServletContextHandler handler = new ServletContextHandler();
        Object context = new Object(); // Initialize the context object
        String[] propertyNames = handler.getPropertyNames(context);
        assertTrue(propertyNames.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesWithEmptyContext_eTsn1_1() {
        ServletContextHandler handler = new ServletContextHandler();
        Object context = new Object(); // Initialize the context object with empty properties
        String[] propertyNames = handler.getPropertyNames(context);
        assertNotNull(propertyNames);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesWithEmptyContext_eTsn1_2() {
        ServletContextHandler handler = new ServletContextHandler();
        Object context = new Object(); // Initialize the context object with empty properties
        String[] propertyNames = handler.getPropertyNames(context);
        assertEquals(0, propertyNames.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesWithNullContext_pUik2_1() {
        ServletContextHandler handler = new ServletContextHandler();
        String[] propertyNames = handler.getPropertyNames(null);
        assertNotNull(propertyNames);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesWithNullContext_pUik2_2() {
        ServletContextHandler handler = new ServletContextHandler();
        String[] propertyNames = handler.getPropertyNames(null);
        assertEquals(0, propertyNames.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCoverage_KgPP1() {
        ServletContextHandler servletContextHandler = new ServletContextHandler();
        Object context = new Object();
        String property = "test";
        Object result = servletContextHandler.getProperty(context, property);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperty_XyrI0() {
        ServletContextHandler handler = new ServletContextHandler();
        Object context = new Object();
        String property = "property";
        Object value = new Object();
        handler.setProperty(context, property, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperty_nullProperty_odGt2() {
        ServletContextHandler handler = new ServletContextHandler();
        Object context = new Object();
        String property = null;
        Object value = new Object();
        try {
            handler.setProperty(context, property, value);
            fail("Expected NPE");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperty_nullValue_ZWcH3() {
        ServletContextHandler handler = new ServletContextHandler();
        Object context = new Object();
        String property = "property";
        Object value = null;
        handler.setProperty(context, property, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperty_nullProperty_nullValue_XBkJ6() {
        ServletContextHandler handler = new ServletContextHandler();
        Object context = new Object();
        String property = null;
        Object value = null;
        try {
            handler.setProperty(context, property, value);
            fail("Expected NPE");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_tvkH0() {
        ServletContextHandler handler = new ServletContextHandler();
        Object context = new Object(); // Initialize the context object
        String[] propertyNames = handler.getPropertyNames(context);
        assertNotNull(propertyNames);
        assertTrue(propertyNames.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesWithEmptyContext_eTsn1() {
        ServletContextHandler handler = new ServletContextHandler();
        Object context = new Object(); // Initialize the context object with empty properties
        String[] propertyNames = handler.getPropertyNames(context);
        assertNotNull(propertyNames);
        assertEquals(0, propertyNames.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesWithNullContext_pUik2() {
        ServletContextHandler handler = new ServletContextHandler();
        String[] propertyNames = handler.getPropertyNames(null);
        assertNotNull(propertyNames);
        assertEquals(0, propertyNames.length);
    }
}