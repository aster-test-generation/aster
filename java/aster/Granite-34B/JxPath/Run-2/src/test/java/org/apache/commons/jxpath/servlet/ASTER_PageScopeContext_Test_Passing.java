/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.Arrays;
import java.util.Collections;
import java.util.Enumeration;
import java.util.concurrent.TimeUnit;
import javax.servlet.jsp.PageContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PageScopeContext_Test_Passing {
    private PageContext pageContext;
    PageScopeContext pagescopecontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttribute() throws Exception {
        pageContext = mock(PageContext.class);
        pagescopecontext = new PageScopeContext(pageContext);
        String attribute = "test";
        Object expectedValue = new Object();
        when(pageContext.getAttribute(attribute, PageContext.PAGE_SCOPE)).thenReturn(expectedValue);
        Object actualValue = pagescopecontext.getAttribute(attribute);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeNames_1() throws Exception {
        pageContext = mock(PageContext.class);
        pagescopecontext = new PageScopeContext(pageContext);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(Collections.enumeration(Arrays.asList("attribute1", "attribute2")));
        Enumeration<String> attributeNames = pagescopecontext.getAttributeNames();
        assertTrue(attributeNames.hasMoreElements());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeNames_2() throws Exception {
        pageContext = mock(PageContext.class);
        pagescopecontext = new PageScopeContext(pageContext);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(Collections.enumeration(Arrays.asList("attribute1", "attribute2")));
        Enumeration<String> attributeNames = pagescopecontext.getAttributeNames();
        assertEquals("attribute1", attributeNames.nextElement());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeNames_4() throws Exception {
        pageContext = mock(PageContext.class);
        pagescopecontext = new PageScopeContext(pageContext);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(Collections.enumeration(Arrays.asList("attribute1", "attribute1")));
        Enumeration<String> attributeNames = pagescopecontext.getAttributeNames();
        assertEquals("attribute1", attributeNames.nextElement());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAttribute() throws Exception {
        pageContext = mock(PageContext.class);
        pagescopecontext = new PageScopeContext(pageContext);
        final String attribute = "attribute";
        final Object value = new Object();
        pagescopecontext.setAttribute(attribute, value);
        verify(pageContext, times(1)).setAttribute(eq(attribute), eq(value), eq(PageContext.PAGE_SCOPE));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttribute_iYsh0_iQMR0() {
        PageContext pageContext = mock(PageContext.class);
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        Object result = pageScopeContext.getAttribute("attribute");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeWithNullAttribute_Akew1_IrFJ0() {
        PageContext pageContext = mock(PageContext.class);
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        Object result = pageScopeContext.getAttribute(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeWithEmptyAttribute_gCOj2_FPxQ0() {
        PageContext pageContext = mock(PageContext.class);
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        Object result = pageScopeContext.getAttribute("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeWithTabAttribute_EIhz4_GYkg0() {
        PageContext pageContext = mock(PageContext.class);
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        Object result = pageScopeContext.getAttribute("\t");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeWithNewlineAttribute_UFtU5_dmGs0() {
        PageContext pageContext = mock(PageContext.class);
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        Object result = pageScopeContext.getAttribute("\n");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeWithFormfeedAttribute_TCKw6_kWOs0() {
        PageContext pageContext = mock(PageContext.class);
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        Object result = pageScopeContext.getAttribute("\f");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeWithCarriagereturnAttribute_vvFj7_VLUk0() {
        PageContext pageContext = mock(PageContext.class);
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        Object result = pageScopeContext.getAttribute("\r");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeNamesCoverage_vwhU1_CYIV0() {
        PageScopeContext pageScopeContext = new PageScopeContext(mock(PageContext.class));
        pageScopeContext.getAttributeNames();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAttribute_xUkO0_vjOu0() {
        PageScopeContext pageScopeContext = new PageScopeContext(Mockito.mock(PageContext.class));
        pageScopeContext.setAttribute("attribute", new Object());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAttributeCoverage_yVsL1_PjrV0() {
        PageScopeContext pageScopeContext = new PageScopeContext(Mockito.mock(PageContext.class));
        pageScopeContext.setAttribute(null, null);
        pageScopeContext.setAttribute("attribute", null);
        pageScopeContext.setAttribute(null, new Object());
        pageScopeContext.setAttribute("attribute", new Object());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeNames() throws Exception {
        pageContext = mock(PageContext.class);
        pagescopecontext = new PageScopeContext(pageContext);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(Collections.enumeration(Arrays.asList("attribute1", "attribute2")));
        Enumeration<String> attributeNames = pagescopecontext.getAttributeNames();
        assertTrue(attributeNames.hasMoreElements());
        assertEquals("attribute1", attributeNames.nextElement());
        assertTrue(attributeNames.hasMoreElements());
        assertEquals("attribute2", attributeNames.nextElement());
        assertFalse(attributeNames.hasMoreElements());
    }
}