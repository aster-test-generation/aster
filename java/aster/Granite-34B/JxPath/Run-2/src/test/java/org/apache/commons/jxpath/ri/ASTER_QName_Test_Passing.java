/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QName_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_EhBe0() {
        final String qualifiedName = "test";
        final QName qName = new QName(qualifiedName);
        final boolean result = qName.equals(qName);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_Viwb1() {
        final String qualifiedName = "test";
        final QName qName = new QName(qualifiedName);
        final boolean result = qName.equals(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentObject_FthT2() {
        final String qualifiedName1 = "test1";
        final String qualifiedName2 = "test2";
        final QName qName1 = new QName(qualifiedName1);
        final QName qName2 = new QName(qualifiedName2);
        final boolean result = qName1.equals(qName2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithCorrectObjectForBranchCoverage_TLAt4() {
        final String qualifiedName = "test";
        final String prefix = "prefix";
        final String localName = "localName";
        final QName qName1 = new QName(qualifiedName);
        final QName qName2 = new QName(prefix, localName);
        final boolean result = qName1.equals(qName2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrefix_withQualifiedName_YfKo0() {
        String qualifiedName = "prefix:localName";
        QName qName = new QName(qualifiedName);
        String prefix = qName.getPrefix();
        assert "prefix".equals(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrefix_withPrefixAndLocalName_KtRB1() {
        String prefix = "prefix";
        String localName = "localName";
        QName qName = new QName(prefix, localName);
        String actualPrefix = qName.getPrefix();
        assert prefix.equals(actualPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_DfQb0_wuqQ0() {
        String qualifiedName = " qualifiedName";
        QName qName = new QName(qualifiedName);
        assertEquals(qualifiedName, qName.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_YFhs1_xsBo0() {
        String prefix = "prefix";
        String localName = "localName";
        QName qName = new QName(prefix, localName);
        assertEquals(prefix + ":" + localName, qName.toString());
    }
}