/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.jdom.Attribute;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_JDOMNodePointer_Coverage_Test_Passing {
    private Object node;
    JDOMNodePointer jdomnodepointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_VKUA0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale(""));
        NodeIterator iterator = pointer.attributeIterator(new QName(""));
        Assertions.assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMethod1_vZLW0() {
        JDOMNodePointer node = new JDOMNodePointer(new Object(), new Locale(""));
        int actual = node.getLength();
        assertEquals(1, actual);
    }

    @BeforeEach
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafForElementNode_oHMO0() {
        Element element = new Element("test");
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        assertTrue(pointer.isLeaf());
    }

    @BeforeEach
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_iLcL00() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, new Locale("en"), "id");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue_Rtmv1() throws Exception {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_oebh0() {
        Element node = mock(Element.class);
        JDOMNodePointer pointer = new JDOMNodePointer(node, null);
        Element parent = mock(Element.class);
        when(node.getParent()).thenReturn(parent);
        pointer.remove();
        verify(parent).getContent().remove(node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_NaVS0() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale(""));
        NamespaceResolver namespaceResolver = jdomNodePointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_nHmh1() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale(""), "id");
        NamespaceResolver namespaceResolver = jdomNodePointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath2_clQY1() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en"), "id");
        String actual = jdomNodePointer.asPath();
        assertEquals("id('id')", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_SMRp0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale(""));
        NodeIterator iterator = pointer.namespaceIterator();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafForOtherNode_VylO2() {
        Object node = new Object();
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        assertTrue(pointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafForDocumentNode_gIos1_fid2() {
        Document document = new Document(new Element("test"));
        JDOMNodePointer pointer = new JDOMNodePointer(document, Locale.getDefault());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_kLVQ0_fid2() {
        Element element = new Element("test", "test");
        String prefix = JDOMNodePointer.getPrefix(element);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_ZTci1_fid2() {
        Attribute attribute = new Attribute("test", "test");
        String prefix = JDOMNodePointer.getPrefix(attribute);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_VLaW2_fid2() {
        Element element = new Element("test", "test");
        String prefix = JDOMNodePointer.getPrefix(element);
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_MmxW3_fid2() {
        Attribute attribute = new Attribute("test", "test");
        String prefix = JDOMNodePointer.getPrefix(attribute);
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue1_ZzMt0_fid2() {
        JDOMNodePointer node = new JDOMNodePointer(new Object(), new Locale("en"));
        String result = (String) node.getValue();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue2_gjnZ1_fid2() {
        JDOMNodePointer node = new JDOMNodePointer(new Object(), new Locale("en"), "id");
        String result = (String) node.getValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue5_TjwK4_fid2() {
        JDOMNodePointer node = new JDOMNodePointer(new Object(), new Locale("en"), "id");
        String result = (String) node.getValue();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_WWhv0_fid2() {
        JDOMNodePointer node = new JDOMNodePointer(new Document(), new Locale("en"), "id");
        assertEquals("http://www.w3.org/XML/1998/namespace", Namespace.XML_NAMESPACE.getURI(), node.getNamespaceURI("xml"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_eVgp4_fid2() {
        JDOMNodePointer node = new JDOMNodePointer(new Document(), new Locale("en"), "id");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath1_pzkg0_fid2() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        String actual = jdomNodePointer.asPath();
        assertEquals("", actual);
    }
}