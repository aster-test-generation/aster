/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import org.apache.commons.jxpath.Variables;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathServletContexts_Test_Failing {
    private static JXPathContextFactory factory;
    JXPathServletContexts jxpathservletcontexts;
    ServletContext servletcontext;
    HttpSession httpsession;
    PageContext pagecontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequestContextWithSession_NZXT1_2() {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpSession session = mock(HttpSession.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext context = JXPathServletContexts.getRequestContext(request, servletContext);
        assertSame(JXPathServletContexts.getSessionContext(session, servletContext), context.getParentContext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequestContextWithApplication_xUmz2_2() {
        HttpServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext context = JXPathServletContexts.getRequestContext(request, servletContext);
        assertSame(JXPathServletContexts.getApplicationContext(servletContext), context.getParentContext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApplicationContext_iDBI0() throws Exception {
        servletcontext = mock(ServletContext.class);
        JXPathServletContexts jxpathservletcontexts = new JXPathServletContexts();
        JXPathContext context = (JXPathContext) servletcontext.getAttribute(Constants.JXPATH_CONTEXT);
        if (context == null) {
            context = factory.newContext(null, servletcontext);
            context.setVariables(new KeywordVariables(Constants.APPLICATION_SCOPE, servletcontext));
            servletcontext.setAttribute(Constants.JXPATH_CONTEXT, context);
        }
        assertEquals(context, jxpathservletcontexts.getApplicationContext(servletcontext));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSessionContext_uoSp0() throws Exception {
        httpsession = mock(HttpSession.class);
        servletcontext = mock(ServletContext.class);
        JXPathServletContexts jxpathservletcontexts = null;
        when(httpsession.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        when(factory.newContext(any(), any())).thenReturn(mock(JXPathContext.class));
        JXPathContext context = JXPathServletContexts.getSessionContext(httpsession, servletcontext);
        verify(httpsession).setAttribute(eq(Constants.JXPATH_CONTEXT), any());
        Assertions.assertNotNull(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPageContext_eRoD0() throws Exception {
        servletcontext = mock(ServletContext.class);
        httpsession = mock(HttpSession.class);
        pagecontext = mock(PageContext.class);
        JXPathServletContexts jxpathservletcontexts = null;
        when(pagecontext.getServletContext()).thenReturn(servletcontext);
        JXPathContext context = JXPathServletContexts.getPageContext(pagecontext);
        assertNotNull(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVariables_YEuu0_AxEb0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        Variables variables = context.getVariables();
        assertEquals(Variables.class, variables.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFactory_jZbi1_URPr0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        AbstractFactory factory = context.getFactory();
        assertEquals(AbstractFactory.class, factory.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequestContextWithSession_NZXT1() {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpSession session = mock(HttpSession.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext context = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotNull(context);
        assertSame(JXPathServletContexts.getSessionContext(session, servletContext), context.getParentContext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequestContextWithApplication_xUmz2() {
        HttpServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext context = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotNull(context);
        assertSame(JXPathServletContexts.getApplicationContext(servletContext), context.getParentContext());
    }
}