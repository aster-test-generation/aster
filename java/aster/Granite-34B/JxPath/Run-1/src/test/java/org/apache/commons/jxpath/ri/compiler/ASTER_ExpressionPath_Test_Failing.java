/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExpressionPath_Test_Failing {
    @Mock
    EvalContext context;
    ExpressionPath expressionpath;
    Constant constant;
    Expression[] predicates;
    Step[] steps;
    NamespaceContext namespaceContext;
    SelfContext selfContext;
    NodeTypeTest nodeTypeTest;
    private Expression expression;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpressionWithNullExpressionPath_EPeh7() {
        ExpressionPath expressionPath = null;
        Expression expression = expressionPath.getExpression();
        assertNull(expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath_0_FpHv0_fid2() {
        Constant constant0 = new Constant("someString");
        ExpressionPath expressionPath0 = new ExpressionPath(constant0, new Expression[0], new Step[0]);
        boolean result = expressionPath0.isSimpleExpressionPath();
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath_1_mUyi1_fid2() {
        Number number0 = new Integer(1);
        Constant constant0 = new Constant(number0);
        ExpressionPath expressionPath0 = new ExpressionPath(constant0, new Expression[0], new Step[0]);
        boolean result = expressionPath0.isSimpleExpressionPath();
        assertEquals(false, result);
    }
}