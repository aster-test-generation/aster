/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Step_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependentWithNullPredicates_JJUl0() {
        Step step = new Step(1, new NodeTypeTest(1), null);
        assertTrue(!step.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_LAQg0() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
        assertEquals("", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_RMUS1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[0]);
        assertEquals("", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_cuTV2_fid1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString5_WXeJ4_fid1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString6_JeCV5_fid1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString7_emYm6_fid1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString8_MquQ7_fid1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[6]);
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString9_VfiX8_fid1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[7]);
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString10_dlsU9_fid1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[8]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString11_FcPf10_fid1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[9]);
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString12_Xfqj11_fid1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[10]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString13_Cfra12_fid1() {
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[11]);
        assertNull(null);
    }
}