/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationMultiply_Test_Passing {
    CoreOperationMultiply coreoperationmultiply;
    EvalContext context;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_ezRf0() {
        Constant constant1 = new Constant("1");
        Constant constant2 = new Constant("2");
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(constant1, constant2);
        assertEquals("*", coreOperationMultiply.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_EwXX0() {
        Constant constant1 = new Constant("1");
        Constant constant2 = new Constant("2");
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(constant1, constant2);
        int precedence = coreOperationMultiply.getPrecedence();
        assert precedence == CoreOperationMultiply.MULTIPLY_PRECEDENCE;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedenceWithZeroAsArgument_ttBI1() {
        Constant constant1 = new Constant(0);
        Constant constant2 = new Constant(0);
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(constant1, constant2);
        int precedence = coreOperationMultiply.getPrecedence();
        assert precedence == CoreOperationMultiply.MULTIPLY_PRECEDENCE;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedenceWithNegativeNumberAsArgument_uUNp2() {
        Constant constant1 = new Constant(-1);
        Constant constant2 = new Constant(-1);
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(constant1, constant2);
        int precedence = coreOperationMultiply.getPrecedence();
        assert precedence == CoreOperationMultiply.MULTIPLY_PRECEDENCE;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedenceWithFloatNumberAsArgument_fjHL3() {
        Constant constant1 = new Constant(1.2);
        Constant constant2 = new Constant(1.2);
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(constant1, constant2);
        int precedence = coreOperationMultiply.getPrecedence();
        assert precedence == CoreOperationMultiply.MULTIPLY_PRECEDENCE;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedenceWithStringAsArgument_xsqC4() {
        Constant constant1 = new Constant("1");
        Constant constant2 = new Constant("1");
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(constant1, constant2);
        int precedence = coreOperationMultiply.getPrecedence();
        assert precedence == CoreOperationMultiply.MULTIPLY_PRECEDENCE;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedenceWithEmptyArgument_GYTp6() {
        Constant constant1 = new Constant("");
        Constant constant2 = new Constant("");
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(constant1, constant2);
        int precedence = coreOperationMultiply.getPrecedence();
        assert precedence == CoreOperationMultiply.MULTIPLY_PRECEDENCE;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedenceWithTwoArguments_IhNx8() {
        Constant constant1 = new Constant(1);
        Constant constant2 = new Constant(1);
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(constant1, constant2);
        int precedence = coreOperationMultiply.getPrecedence();
        assert precedence == CoreOperationMultiply.MULTIPLY_PRECEDENCE;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedenceWithOneArgument_TlbR7_uQKv0() {
        Constant constant1 = new Constant(1);
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(constant1, null);
        int precedence = coreOperationMultiply.getPrecedence();
        assert precedence == CoreOperationMultiply.MULTIPLY_PRECEDENCE;
    }
}