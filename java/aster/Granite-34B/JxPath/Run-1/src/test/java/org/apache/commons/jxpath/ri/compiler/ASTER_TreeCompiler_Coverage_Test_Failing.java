/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMod_EiRa0() {
        Object left = new Object();
        Object right = new Object();
        Object expected = new CoreOperationMod((Expression) left, (Expression) right);
        Object actual = new TreeCompiler().mod(left, right);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiply_eGfE0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object expected = new CoreOperationMultiply((Expression) left, (Expression) right);
        Object actual = treeCompiler.multiply(left, right);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThanOrEqual_GSAh0() {
        Object left = new Object();
        Object right = new Object();
        Object expected = new CoreOperationLessThanOrEqual((Expression) left, (Expression) right);
        Object actual = new TreeCompiler().lessThanOrEqual(left, right);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinus_zEpr0() {
        TreeCompiler tc = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object actual = tc.minus(left, right);
        Object expected = new CoreOperationSubtract((Expression) left, (Expression) right);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_iIQT0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[2];
        arguments[0] = 1;
        arguments[1] = 2;
        Object result = treeCompiler.sum(arguments);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_JNhu0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.number("1.0");
        assertEquals(new Constant(Double.valueOf("1.0")), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThanOrEqual_BeGV0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.greaterThanOrEqual(left, right);
        assertTrue(result instanceof CoreOperationGreaterThanOrEqual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test0_tYTc0() {
        TreeCompiler treeCompiler0 = new TreeCompiler();
        Object object0 = new Object();
        Object object1 = new Object();
        Object object2 = treeCompiler0.notEqual(object0, object1);
        assertEquals(object2, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_jOWz1() {
        TreeCompiler treeCompiler0 = new TreeCompiler();
        Object object0 = new Object();
        Object object1 = treeCompiler0.notEqual(object0, object0);
        assertEquals(object1, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_gBuP2() {
        TreeCompiler treeCompiler0 = new TreeCompiler();
        Object object0 = treeCompiler0.notEqual(null, null);
        assertNull(object0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void greaterThan_test1_YoQa0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.greaterThan(left, right);
        assertEquals(new CoreOperationGreaterThan((Expression) left, (Expression) right), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_gBuP2_fid2() {
        TreeCompiler treeCompiler0 = new TreeCompiler();
        Object object0 = treeCompiler0.notEqual(null, null);
        assertEquals(object0, null);
    }
}