/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Stack;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PrecedingOrFollowingContext_Test_Passing {
    @Mock
    NamespaceContext namespacecontext;
    @Mock
    NodeTypeTest nodetypetest;
    @Mock
    SelfContext selfcontext;
    PrecedingOrFollowingContext precedingorfollowingcontext;
    private boolean reverse;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    private NodeTest nodeTest;
    private NodePointer currentRootLocation;
    private Stack stack = null;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder() throws Exception {
        reverse = false;
        precedingorfollowingcontext = new PrecedingOrFollowingContext(null, null, reverse);
        int actual = precedingorfollowingcontext.getDocumentOrder();
        int expected = 1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrderWhenReverseIsFalse_xbJr0() {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(2));
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(3), false);
        int result = context.getDocumentOrder();
        assert result == 1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrderWhenReverseIsTrue_dcKs1() {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(2));
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(3), true);
        int result = context.getDocumentOrder();
        assert result == -1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_iUOf0() {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(2));
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(3), true);
        context.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset_HASq0() throws Exception {
        NamespaceContext namespacecontext = new NamespaceContext(null, new NodeTypeTest(0));
        SelfContext selfcontext = new SelfContext(namespacecontext, new NodeTypeTest(0));
        precedingorfollowingcontext = new PrecedingOrFollowingContext(selfcontext, new NodeTypeTest(0), false);
        precedingorfollowingcontext.reset();
        assertEquals(false, setStarted);
    }
}