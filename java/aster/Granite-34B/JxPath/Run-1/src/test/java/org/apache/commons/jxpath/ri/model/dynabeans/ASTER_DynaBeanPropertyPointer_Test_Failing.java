/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;

import java.util.concurrent.TimeUnit;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.beanutils.DynaClass;
import org.apache.commons.beanutils.DynaProperty;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPropertyPointer_Test_Failing {
    DynaBeanPropertyPointer dynabeanpropertypointer;
    private String[] names;
    private String name;
    private DynaBean dynaBean;
    private static String CLASS = "class";
    @Mock
    DOMNodePointer parent;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        dynaBean = mock(DynaBean.class);
        name = "name";
        dynabeanpropertypointer = new DynaBeanPropertyPointer(null, dynaBean);
        when(dynaBean.get(name)).thenReturn("value");
        Object value = dynabeanpropertypointer.getImmediateNode();
        assertEquals("value", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        dynaBean = mock(DynaBean.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(null, dynaBean);
        when(dynaBean.get(dynabeanpropertypointer.getPropertyName())).thenReturn("test");
        assertEquals("test", dynabeanpropertypointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActualProperty_NQJB0() throws Exception {
        dynaBean = mock(DynaBean.class);
        dynabeanpropertypointer = new DynaBeanPropertyPointer(null, dynaBean);
        DynaClass dynaClass = mock(DynaClass.class);
        when(dynaBean.getDynaClass()).thenReturn(dynaClass);
        when(dynaClass.getDynaProperty(anyString())).thenReturn(new DynaProperty("name"));
        assertTrue(dynabeanpropertypointer.isActualProperty());
    }
}