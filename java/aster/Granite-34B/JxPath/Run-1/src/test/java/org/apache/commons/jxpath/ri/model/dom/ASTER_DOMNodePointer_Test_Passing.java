/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodePointer_Test_Passing {
    Node node;
    DOMNodePointer domnodepointer;
    NodePointer nodepointer;
    NamedNodeMap namednodemap;
    Attr attr;
    NodeList nodelist;
    Document document;
    VariablePointer variablePointer;
    KeywordVariables keywordVariables;
    Locale locale;
    QName qName;
    Element element;
    NodeIterator nodeiterator;
    QName qname;
    String id;
    VariablePointer parent;
    KeywordVariables variables;
    QName name;
    NodeIterator nodeIterator;
    private DOMNodePointer other;
    private Object object;
    private String defaultNamespace;
    String prefix;
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        qName = new QName("qualifiedName");
        variablePointer = new VariablePointer(qName);
        keywordVariables = new KeywordVariables("keyword", new Object());
        node = mock(Node.class);
        locale = Locale.getDefault();
        domnodepointer = new DOMNodePointer(node, locale, "id");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        assertFalse(domnodepointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, null, null);
        assertEquals(node, domnodepointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testchildIterator() throws Exception {
        domnodepointer = new DOMNodePointer(Mockito.mock(Node.class), Mockito.mock(Locale.class), "id");
        NodeIterator nodeIterator = domnodepointer.childIterator(Mockito.mock(NodeTest.class), true, Mockito.mock(NodePointer.class));
        assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, new Locale("en"), "id");
        when(node.hasChildNodes()).thenReturn(false);
        assertTrue(domnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        other = new DOMNodePointer(node, Locale.getDefault(), "id");
        object = new Object();
        assertTrue(domnodepointer.equals(domnodepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_2() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        other = new DOMNodePointer(node, Locale.getDefault(), "id");
        object = new Object();
        assertTrue(domnodepointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_3() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        other = new DOMNodePointer(node, Locale.getDefault(), "id");
        object = new Object();
        assertFalse(domnodepointer.equals(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_4() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        other = new DOMNodePointer(node, Locale.getDefault(), "id");
        object = new Object();
        assertFalse(domnodepointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getNamespaceURI_Element_GLkJ1() {
        Element element = mock(Element.class);
        when(element.getNamespaceURI()).thenReturn("namespaceURI");
        String namespaceURI = DOMNodePointer.getNamespaceURI(element);
        assertEquals("namespaceURI", namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, null, null);
        when(node.getLocalName()).thenReturn("localName");
        assertEquals("localName", DOMNodePointer.getLocalName(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremove() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, null, null);
        when(node.getParentNode()).thenReturn(node);
        when(node.removeChild(any(Node.class))).thenReturn(node);
        domnodepointer.remove();
        verify(node, times(1)).getParentNode();
        verify(node, times(1)).removeChild(any(Node.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, null, null);
        when(node.getPrefix()).thenReturn("prefix");
        assertEquals("prefix", DOMNodePointer.getPrefix(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixWithNullNode_uaYQ0() {
        Node node = null;
        try {
            DOMNodePointer.getPrefix(node);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_umVT0() throws Exception {
        Node node = mock(Node.class);
        DOMNodePointer domnodepointer = new DOMNodePointer(node, new Locale("en"), "id");
        when(node.hasChildNodes()).thenReturn(false);
        assertTrue(domnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremove_aVUr0() throws Exception {
        Node node = mock(Node.class);
        DOMNodePointer domnodepointer = new DOMNodePointer(node, null, null);
        when(node.getParentNode()).thenReturn(node);
        when(node.removeChild(any(Node.class))).thenReturn(node);
        domnodepointer.remove();
        verify(node, times(1)).getParentNode();
        verify(node, times(1)).removeChild(any(Node.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPointerByID_xuvq0() throws Exception {
        id = "id";
        document = mock(Document.class);
        element = mock(Element.class);
        domnodepointer = new DOMNodePointer(document, Locale.getDefault(), id);
        when(document.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        when(document.getOwnerDocument()).thenReturn(document);
        when(document.getElementById(id)).thenReturn(element);
        Pointer pointer = domnodepointer.getPointerByID(JXPathContext.newContext(domnodepointer), id);
        assertEquals(element, ((DOMNodePointer) pointer).getNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithId_kNoY0_Ohtk0() {
        DOMNodePointer pointer = new DOMNodePointer(null, null, "id");
        assertEquals("id('id')", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer1_USlJ0() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer2_zBmR1() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("qualifiedName"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        Object baseValue = domnodepointer.getBaseValue();
        assertEquals(node, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActual() throws Exception {
        domnodepointer = new DOMNodePointer(Mockito.mock(Node.class), Mockito.mock(Locale.class), "id");
        assertTrue(domnodepointer.isActual());
    }
}