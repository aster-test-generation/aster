/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AncestorContext_Test_Passing {
    @Mock
    NamespaceContext namespacecontext;
    @Mock
    SelfContext selfcontext;
    @Mock
    NodeTypeTest nodetypetest;
    private AncestorContext ancestorcontext;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    private boolean includeSelf;
    private NodeTest nodeTest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithInvalidPosition_iRpl1() {
        AncestorContext context = new AncestorContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        context.setPosition(-1);
        assertEquals(0, context.getCurrentPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithZeroPosition_rhYM2() {
        AncestorContext context = new AncestorContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        context.setPosition(0);
        assertEquals(0, context.getCurrentPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithNegativePosition_VsTj3() {
        AncestorContext context = new AncestorContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        context.setPosition(-10);
        assertEquals(0, context.getCurrentPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder() throws Exception {
        NamespaceContext namespacecontext = new NamespaceContext(null, new NodeTypeTest(0));
        SelfContext selfcontext = new SelfContext(namespacecontext, new NodeTypeTest(0));
        ancestorcontext = new AncestorContext(selfcontext, true, new NodeTypeTest(0));
        assertEquals(-1, ancestorcontext.getDocumentOrder());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrder_BOgg0() {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        AncestorContext ancestorsContext = new AncestorContext(namespaceContext, true, new NodeTypeTest(1));
        assertEquals(-1, ancestorsContext.getDocumentOrder());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCurrentNodePointerWithIncludeSelfTest_tQwA1() {
        AncestorContext context = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), false, null);
        NodePointer nodePointer = context.getCurrentNodePointer();
        assertNull(nodePointer);
    }
}