/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationAnd_Test_Passing {
    CoreOperationAnd coreoperationand;
    @Mock
    EvalContext context;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSymbolTest_oRtI0() {
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(new Expression[0]);
        String symbol = coreOperationAnd.getSymbol();
        assertEquals("and", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_Qfwk0() {
        Expression[] args = new Expression[0];
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(args);
        boolean result = coreOperationAnd.isSymmetric();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_YWLo2() {
        Expression[] args = new Expression[2];
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(args);
        boolean result = coreOperationAnd.isSymmetric();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_UqBi4() {
        Expression[] args = new Expression[4];
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(args);
        boolean result = coreOperationAnd.isSymmetric();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_sZbL6() {
        Expression[] args = new Expression[6];
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(args);
        boolean result = coreOperationAnd.isSymmetric();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_ZSPY8() {
        Expression[] args = new Expression[8];
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(args);
        boolean result = coreOperationAnd.isSymmetric();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_OlFP10() {
        Expression[] args = new Expression[10];
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(args);
        boolean result = coreOperationAnd.isSymmetric();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_pMOJ0() {
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(new Expression[0]);
        assertEquals(CoreOperationAnd.AND_PRECEDENCE, coreOperationAnd.getPrecedence());
    }
}