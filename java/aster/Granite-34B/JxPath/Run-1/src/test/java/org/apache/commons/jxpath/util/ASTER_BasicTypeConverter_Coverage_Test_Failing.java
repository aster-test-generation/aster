/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Modifier;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathTypeConversionException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_BasicTypeConverter_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWhenTypeIsAbstractClass_eNMn1() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        boolean actual = basicTypeConverter.canCreateCollection(AbstractList.class);
        boolean expected = true;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest4_GCLs3_QDEA0() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Class type = null;
        Collection collection = basicTypeConverter.allocateCollection(type);
        assertEquals(ArrayList.class, collection.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest1_cJTb0_Njhs0() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Class type = mock(Class.class);
        when(type.isInterface()).thenReturn(true);
        Collection collection = basicTypeConverter.allocateCollection(type);
        assertEquals(ArrayList.class, collection.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollectionTest2_bMeP1_tbvv0() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Class type = null;
        when(type.isInterface()).thenReturn(false);
        when(type.getModifiers()).thenReturn(Modifier.ABSTRACT);
        Collection collection = basicTypeConverter.allocateCollection(type);
        assertEquals(ArrayList.class, collection.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testallocateNumber_jkLJ0_EzTh0_fid1() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Number result = basicTypeConverter.allocateNumber(Byte.class, 1.0);
        assertEquals(Byte.valueOf((byte) 1.0), result);
        result = basicTypeConverter.allocateNumber(Short.class, 1.0);
        assertEquals(Short.valueOf((short) 1.0), result);
        result = basicTypeConverter.allocateNumber(Integer.class, 1.0);
        assertEquals(Integer.valueOf((int) 1.0), result);
        result = basicTypeConverter.allocateNumber(Long.class, 1.0);
        assertEquals(Long.valueOf((long) 1.0), result);
        result = basicTypeConverter.allocateNumber(Float.class, 1.0);
        assertEquals(Float.valueOf((float) 1.0), result);
        result = basicTypeConverter.allocateNumber(Double.class, 1.0);
        assertEquals(Double.valueOf(1.0), result);
        result = basicTypeConverter.allocateNumber(BigInteger.class, 1.0);
        assertEquals(BigInteger.valueOf((long) 1.0), result);
        result = basicTypeConverter.allocateNumber(BigDecimal.class, 1.0);
        assertEquals(new BigDecimal(1.0), result);
        String className = "java.util.concurrent.atomic.AtomicInteger";
        Class initialValueType = null;
        if ("java.util.concurrent.atomic.AtomicInteger".equals(className)) {
            initialValueType = int.class;
        }
        if ("java.util.concurrent.atomic.AtomicLong".equals(className)) {
            initialValueType = long.class;
        }
        if (initialValueType != null) {
            try {
                result = (Number) Class.forName(className).getConstructor(new Class[]{initialValueType}).newInstance(basicTypeConverter.allocateNumber(initialValueType, 1.0));
            } catch (final Exception e) {
                throw new JXPathTypeConversionException(className, e);
            }
        }
        assertEquals(null, result);
    }
}