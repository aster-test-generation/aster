/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationGreaterThanOrEqual_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompareWithBothConstants_NLGG0() {
        Constant constant1 = new Constant("10");
        Constant constant2 = new Constant("5");
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual = new CoreOperationGreaterThanOrEqual(constant1, constant2);
        boolean actual = coreOperationGreaterThanOrEqual.evaluateCompare(10);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompareWithOneConstantAndOneNumber_poXh1() {
        Constant constant = new Constant("10");
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual = new CoreOperationGreaterThanOrEqual(constant, new Constant(5));
        boolean actual = coreOperationGreaterThanOrEqual.evaluateCompare(10);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_uPbJ2() {
        Constant constant1 = new Constant(10);
        Constant constant2 = new Constant(20);
        CoreOperationGreaterThanOrEqual operation = new CoreOperationGreaterThanOrEqual(constant1, constant2);
        assertEquals(">=", operation.getSymbol());
    }
}