/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointer_Test_Failing {
    CollectionPointer collectionpointer;
    private NodePointer valuePointer;
    @Mock
    JXPathContext context;
    @Mock
    NodePointer parent;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithIndex_DsdX0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        Object value = new Object();
        collectionPointer.setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateChild() throws Exception {
        collectionpointer = new CollectionPointer(new Object(), new Locale("en"));
        final JXPathContext context = mock(JXPathContext.class);
        final NodePointer ptr = collectionpointer.createChild(context, new QName("name"), 1);
        assertEquals(1, ptr.getIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_KjeZ0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        NodeIterator iterator = collectionPointer.attributeIterator(new QName("name"));
        assertEquals(new CollectionAttributeNodeIterator(collectionPointer, new QName("name")), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        collectionpointer = new CollectionPointer(Mockito.mock(Object.class), Mockito.mock(Locale.class));
        Mockito.when(collectionpointer.getName()).thenReturn(Mockito.mock(QName.class));
        assertNotNull(collectionpointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_pvLd0_2() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        assertNotNull(collectionPointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        collectionpointer = new CollectionPointer(new Object(), new Locale(""));
        when(ValueUtils.getLength(any())).thenReturn(10);
        assertEquals(10, collectionpointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getLength_0_mAEl0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        int result = collectionPointer.getLength();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenNodeIsAtomic_FjoS0() {
        Object value = new Object();
        boolean result = JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenNodeIsNull_FugG2() {
        Object value = null;
        boolean result = JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();
        assertTrue(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator() throws Exception {
        collectionpointer = new CollectionPointer(new Object(), new Locale(""));
        NodeIterator nodeIterator = mock(NodeIterator.class);
        when(collectionpointer.getValuePointer().namespaceIterator()).thenReturn(nodeIterator);
        NodeIterator actual = collectionpointer.namespaceIterator();
        assertEquals(nodeIterator, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_OUOi0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        boolean result = collectionPointer.isContainer();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createChildTest_rFLQ0_aasR0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        NodePointer nodePointer = collectionPointer.createChild(new JXPathContextReferenceImpl(new JXPathContextReferenceImpl(new JXPathContextReferenceImpl(null, null, null), null, null), null, null), new QName("name"), 1);
        assertEquals(nodePointer.getIndex(), 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetIndex_oglo0() throws Exception {
        collectionpointer = new CollectionPointer(new Object(), Locale.getDefault());
        valuePointer = mock(NodePointer.class);
        collectionpointer.setIndex(1);
        verify(collectionpointer, times(1)).setIndex(1);
        verifyNoMoreInteractions(collectionpointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_pvLd0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        assertNotNull(collectionPointer);
        assertNotNull(collectionPointer.getName());
    }
}