/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullElementPointer_Test_Passing {
    NullElementPointer nullelementpointer;
    DOMNodePointer domNodePointer;
    VariablePointer variablePointer;
    QName qName;
    KeywordVariables keywordVariables;
    @Mock
    DOMNodePointer parent;
    @Mock
    Locale locale;
    @Mock
    String id;
    @Mock
    VariablePointer variablepointer;
    @Mock
    QName qname;
    int index;
    JXPathContext context;
    NodePointer nodePointer;
    QName name;
    KeywordVariables variables;
    DOMNodePointer parentNode;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        nullelementpointer = new NullElementPointer(parent, 0);
        assertThrows(UnsupportedOperationException.class, () -> nullelementpointer.setValue("value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath() throws Exception {
        parent = mock(DOMNodePointer.class);
        index = 1;
        context = mock(JXPathContext.class);
        nodePointer = mock(NodePointer.class);
        nullelementpointer = new NullElementPointer(parent, index);
        when(parent.createChild(context, null, index, null)).thenReturn(nodePointer);
        NodePointer result = nullelementpointer.createPath(context, null);
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyPointer_1() throws Exception {
        parent = mock(DOMNodePointer.class);
        index = 1;
        nullelementpointer = new NullElementPointer(parent, index);
        PropertyPointer propertyPointer = nullelementpointer.getPropertyPointer();
        assertNotNull(propertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyPointer_2() throws Exception {
        parent = mock(DOMNodePointer.class);
        index = 1;
        nullelementpointer = new NullElementPointer(parent, index);
        PropertyPointer propertyPointer = nullelementpointer.getPropertyPointer();
        assertTrue(propertyPointer instanceof NullPropertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyPointer_3() throws Exception {
        parent = mock(DOMNodePointer.class);
        index = 1;
        nullelementpointer = new NullElementPointer(parent, index);
        PropertyPointer propertyPointer = nullelementpointer.getPropertyPointer();
        assertEquals(nullelementpointer, ((NullPropertyPointer) propertyPointer).getParent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        VariablePointer variablePointer = mock(VariablePointer.class);
        KeywordVariables keywordVariables = mock(KeywordVariables.class);
        QName qName = mock(QName.class);
        nullelementpointer = new NullElementPointer(domNodePointer, 1);
        Object result = nullelementpointer.getBaseValue();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActual() throws Exception {
        parent = mock(DOMNodePointer.class);
        index = 1;
        nullelementpointer = new NullElementPointer(parent, index);
        when(parent.isActual()).thenReturn(true);
        assertTrue(nullelementpointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        when(parent.isLeaf()).thenReturn(true);
        nullelementpointer = new NullElementPointer(parent, 0);
        assertTrue(nullelementpointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_N_EShb0() throws Exception {
        parent = mock(DOMNodePointer.class);
        index = 1;
        nullelementpointer = new NullElementPointer(parent, index);
        JXPathContext context = mock(JXPathContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(parent.createChild(context, null, index)).thenReturn(nodePointer);
        NodePointer result = nullelementpointer.createPath(context);
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLengthTest_vrlQ0_xwOp0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("qualifiedName"));
        NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
        int actual = nullElementPointer.getLength();
        int expected = 0;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyPointer() throws Exception {
        parent = mock(DOMNodePointer.class);
        index = 1;
        nullelementpointer = new NullElementPointer(parent, index);
        PropertyPointer propertyPointer = nullelementpointer.getPropertyPointer();
        assertNotNull(propertyPointer);
        assertTrue(propertyPointer instanceof NullPropertyPointer);
        assertEquals(nullelementpointer, ((NullPropertyPointer) propertyPointer).getParent());
    }
}