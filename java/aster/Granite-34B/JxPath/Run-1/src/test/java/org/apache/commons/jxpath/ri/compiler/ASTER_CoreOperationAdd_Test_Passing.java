/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationAdd_Test_Passing {
    @Mock
    private EvalContext context;
    @Mock
    private Expression[] args;
    private CoreOperationAdd coreoperationadd;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        MockitoAnnotations.initMocks(this);
        coreoperationadd = new CoreOperationAdd(args);
        Mockito.when(args[0].computeValue(context)).thenReturn(1.0);
        Mockito.when(args[1].computeValue(context)).thenReturn(2.0);
        Mockito.when(args[2].computeValue(context)).thenReturn(3.0);
        double result = (Double) coreoperationadd.computeValue(context);
        Assertions.assertEquals(6.0, result, 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_WWhq0() {
        Expression[] args = new Expression[0];
        CoreOperationAdd coreOperationAdd = new CoreOperationAdd(args);
        boolean result = coreOperationAdd.isSymmetric();
        org.junit.jupiter.api.Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_TeBQ0_VvFX0() {
        String symbol = new CoreOperationAdd(new Expression[0]).getSymbol();
        org.junit.jupiter.api.Assertions.assertEquals("+", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_Obvk0_xCzb0() {
        CoreOperationAdd coreOperationAdd = new CoreOperationAdd(new Expression[0]);
        int actual = coreOperationAdd.getPrecedence();
        int expected = CoreOperationAdd.ADD_PRECEDENCE;
        assertEquals(expected, actual);
    }
}