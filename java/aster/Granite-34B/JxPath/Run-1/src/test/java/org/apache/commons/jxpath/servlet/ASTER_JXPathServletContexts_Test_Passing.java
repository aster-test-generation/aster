/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathServletContexts_Test_Passing {
    private static JXPathContextFactory factory;
    JXPathServletContexts jxpathservletcontexts;
    ServletContext servletcontext;
    HttpSession httpsession;
    PageContext pagecontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getApplicationContext_WhenServletContextAttributeIsExisting_ThenReturnExistingJXPathContext_DLXg1() {
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext expectedContext = mock(JXPathContext.class);
        JXPathContext actualContext;
        when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(expectedContext);
        actualContext = JXPathServletContexts.getApplicationContext(servletContext);
        assertEquals(expectedContext, actualContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequestContextWithSession_NZXT1_1() {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpSession session = mock(HttpSession.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext context = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotNull(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequestContextWithApplication_xUmz2_1() {
        HttpServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext context = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotNull(context);
    }
}