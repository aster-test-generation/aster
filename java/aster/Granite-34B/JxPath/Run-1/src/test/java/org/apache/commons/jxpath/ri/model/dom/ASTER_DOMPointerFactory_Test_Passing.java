/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMPointerFactory_Test_Passing {
    DOMPointerFactory dompointerfactory;
    NodePointer parent;
    Node node;
    Object bean;
    QName name;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNullBean_rqdD1() {
        DOMPointerFactory factory = new DOMPointerFactory();
        NodePointer pointer = factory.createNodePointer(new QName("name"), null, new Locale("en"));
        assertEquals(null, pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNonNodeBean_wOMd2() {
        DOMPointerFactory factory = new DOMPointerFactory();
        NodePointer pointer = factory.createNodePointer(new QName("name"), new Object(), new Locale("en"));
        assertEquals(null, pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer() throws Exception {
        dompointerfactory = new DOMPointerFactory();
        parent = mock(NodePointer.class);
        node = mock(Node.class);
        bean = node;
        name = mock(QName.class);
        NodePointer result = dompointerfactory.createNodePointer(parent, name, bean);
        assertEquals(result.getClass(), DOMNodePointer.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrder_GSNN0_Tlwc0() {
        DOMPointerFactory factory = new DOMPointerFactory();
        int actual = factory.getOrder();
        int expected = 100;
        assertEquals(expected, actual);
    }
}