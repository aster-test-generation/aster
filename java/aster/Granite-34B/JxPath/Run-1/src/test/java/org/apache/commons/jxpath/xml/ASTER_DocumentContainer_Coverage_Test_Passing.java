/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.xml;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DocumentContainer_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithStreamNull_MfZk1_xVxq0() throws IOException {
        DocumentContainer documentContainer = new DocumentContainer(new URL("http://example.com"));
        InputStream stream = mock(InputStream.class);
        doThrow(new IOException("Stream closed")).when(stream).close();
        documentContainer.parseXML(stream);
        Object value = documentContainer.getValue();
        assertNotNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithIOException_pkNO2_VdpP0() throws IOException {
        DocumentContainer documentContainer = new DocumentContainer(new URL("http://example.com"));
        InputStream stream = mock(InputStream.class);
        doThrow(new IOException("Error reading XML")).when(stream).read(any());
        documentContainer.parseXML(stream);
        Object value = documentContainer.getValue();
        assertNotNull(value);
    }
}