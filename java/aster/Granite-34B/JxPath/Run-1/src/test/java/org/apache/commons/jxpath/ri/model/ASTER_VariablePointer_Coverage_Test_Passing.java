/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

public class Aster_VariablePointer_Coverage_Test_Passing {
    VariablePointer variablepointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithValidValue_OZgE0() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        when(pointer.getBaseValue()).thenReturn(new Object());
        assertTrue(pointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf1_FbRF0() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        boolean actual = pointer.isLeaf();
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLengthTest1_hPji0() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        int actual = variablePointer.getLength();
        int expected = 1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_XZfM0() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer pointer = new VariablePointer(variables, new QName("name"));
        Object value = pointer.getBaseValue();
        assertEquals(value, variables.getVariable("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_setValue_6_QDcT6() throws Exception {
        final KeywordVariables variables = new KeywordVariables("keyword", new Object());
        final VariablePointer variablePointer = new VariablePointer(variables, new QName("prefix", "localName"));
        Assertions.assertThrows(UnsupportedOperationException.class, () -> variablePointer.setValue(new Object()));
    }

    @BeforeEach
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_equals_0_DLiV0() throws Exception {
        VariablePointer fixture = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        Object object = new Object();
        boolean result = fixture.equals(object);
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_equals_1_KvRZ1() throws Exception {
        VariablePointer fixture = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        VariablePointer other = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        boolean result = fixture.equals(other);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_equals_2_hEYC2() throws Exception {
        VariablePointer fixture = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        VariablePointer other = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        boolean result = fixture.equals(other);
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_equals_11_eGgc11() throws Exception {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_OCjO0_HXcg0() {
        VariablePointer pointer1 = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("qualifiedName"));
        VariablePointer pointer2 = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        assertEquals(0, pointer1.compareChildNodePointers(pointer1, pointer2));
    }
}