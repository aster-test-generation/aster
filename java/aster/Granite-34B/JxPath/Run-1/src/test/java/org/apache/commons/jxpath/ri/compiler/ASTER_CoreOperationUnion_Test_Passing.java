/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationUnion_Test_Passing {
    @Mock
    private EvalContext context;
    @Mock
    private Expression[] args;
    private CoreOperationUnion coreoperationunion;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_VQXi0() {
        CoreOperationUnion coreOperationUnion = new CoreOperationUnion(new Expression[0]);
        String symbol = coreOperationUnion.getSymbol();
        assertEquals("|", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithNullArguments_mtxG4() {
        CoreOperationUnion coreOperationUnion = new CoreOperationUnion(null);
        String symbol = coreOperationUnion.getSymbol();
        assertEquals("|", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        coreoperationunion = new CoreOperationUnion(args);
        // given
        final EvalContext[] argCtxs = new EvalContext[args.length];
        for (int i = 0;i < args.length;i++) {
            final Object value = args[i].compute(context);
            if (value instanceof EvalContext) {
                argCtxs[i] = (EvalContext) value;
            }
            else {
                argCtxs[i] = context.getRootContext().getConstantContext(value);
            }
        }
        // when
        Object result = coreoperationunion.computeValue(context);
        // then
        Assertions.assertEquals(new UnionContext(context.getRootContext(), argCtxs), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_uZat0() {
        Expression[] args = new Expression[0];
        CoreOperationUnion coreOperationUnion = new CoreOperationUnion(args);
        boolean result = coreOperationUnion.isSymmetric();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetricWithOneParameter_TiVW1() {
        Expression[] args = new Expression[1];
        CoreOperationUnion coreOperationUnion = new CoreOperationUnion(args);
        boolean result = coreOperationUnion.isSymmetric();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetricWithTwoParameters_MwOD2() {
        Expression[] args = new Expression[2];
        CoreOperationUnion coreOperationUnion = new CoreOperationUnion(args);
        boolean result = coreOperationUnion.isSymmetric();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetricWithInvalidInput_FaOG6() {
        Expression[] args = new Expression[0];
        CoreOperationUnion coreOperationUnion = new CoreOperationUnion(args);
        boolean result = coreOperationUnion.isSymmetric();
        assertTrue(!result);
    }
}