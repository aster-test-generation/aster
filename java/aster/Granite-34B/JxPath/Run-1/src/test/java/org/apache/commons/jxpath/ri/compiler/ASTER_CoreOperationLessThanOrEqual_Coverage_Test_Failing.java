/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationLessThanOrEqual_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompare1_Lvhj0_fid2() {
        Constant constant1 = new Constant("string");
        Constant constant2 = new Constant(1);
        CoreOperationLessThanOrEqual coreOperationLessThanOrEqual = new CoreOperationLessThanOrEqual(constant1, constant2);
        boolean actual = coreOperationLessThanOrEqual.evaluateCompare(1);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompare3_LFyF2_fid2() {
        Constant constant1 = new Constant("string");
        Constant constant2 = new Constant(1);
        CoreOperationLessThanOrEqual coreOperationLessThanOrEqual = new CoreOperationLessThanOrEqual(constant1, constant2);
        boolean actual = coreOperationLessThanOrEqual.evaluateCompare(-1);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompare4_gKRT3_fid2() {
        Constant constant1 = new Constant(1);
        Constant constant2 = new Constant("string");
        CoreOperationLessThanOrEqual coreOperationLessThanOrEqual = new CoreOperationLessThanOrEqual(constant1, constant2);
        boolean actual = coreOperationLessThanOrEqual.evaluateCompare(1);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompare6_yrmZ5_fid2() {
        Constant constant1 = new Constant(1);
        Constant constant2 = new Constant("string");
        CoreOperationLessThanOrEqual coreOperationLessThanOrEqual = new CoreOperationLessThanOrEqual(constant1, constant2);
        boolean actual = coreOperationLessThanOrEqual.evaluateCompare(-1);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompare7_nXtP6_fid2() {
        Constant constant1 = new Constant(1);
        Constant constant2 = new Constant(1);
        CoreOperationLessThanOrEqual coreOperationLessThanOrEqual = new CoreOperationLessThanOrEqual(constant1, constant2);
        boolean actual = coreOperationLessThanOrEqual.evaluateCompare(1);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompare9_RccB8_fid2() {
        Constant constant1 = new Constant(1);
        Constant constant2 = new Constant(1);
        CoreOperationLessThanOrEqual coreOperationLessThanOrEqual = new CoreOperationLessThanOrEqual(constant1, constant2);
        boolean actual = coreOperationLessThanOrEqual.evaluateCompare(-1);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompare10_IhXa9_fid2() {
        Constant constant1 = new Constant(1);
        Constant constant2 = new Constant(2);
        CoreOperationLessThanOrEqual coreOperationLessThanOrEqual = new CoreOperationLessThanOrEqual(constant1, constant2);
        boolean actual = coreOperationLessThanOrEqual.evaluateCompare(1);
        boolean expected = true;
        assertEquals(expected, actual);
    }
}