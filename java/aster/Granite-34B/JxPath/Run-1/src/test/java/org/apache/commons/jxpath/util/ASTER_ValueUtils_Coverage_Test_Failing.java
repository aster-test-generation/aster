/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullCollection_KuXS0() {
        Object collection = null;
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());
        assertEquals(Collections.EMPTY_LIST.iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyArray_meQS1() {
        Object[] array = {};
        Iterator iterator = ValueUtils.iterate(array);
        assertTrue(iterator.hasNext());
        assertEquals(Collections.EMPTY_LIST.iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_tuKK2() {
        Object[] array = {1, 2, 3};
        Iterator iterator = ValueUtils.iterate(array);
        assertTrue(iterator.hasNext());
        assertEquals(Arrays.asList(1, 2, 3).iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyCollection_KMGT3() {
        Collection collection = new ArrayList();
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());
        assertEquals(Collections.EMPTY_LIST.iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_OrcM4() {
        Collection collection = Arrays.asList(1, 2, 3);
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());
        assertEquals(Arrays.asList(1, 2, 3).iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingletonCollection_Bzcs5() {
        Collection collection = Collections.singletonList(1);
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());
        assertEquals(Collections.singletonList(1).iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertValueToListType_Edaq1() {
        Object collection = new ArrayList<Integer>();
        int index = 5;
        Object value = 100;
        ValueUtils.setValue(collection, index, value);
        assertEquals(100, ((List<Integer>) collection).get(index).intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullIndex_mUNF4() {
        Object collection = new Integer[10];
        int index = -1;
        Object value = 100;
        try {
            ValueUtils.setValue(collection, index, value);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            assertEquals("Index: -1, Size: 10", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithEmptyArray_yGSi1() {
        Object[] collection = new Object[0];
        int index = 0;
        Object result = ValueUtils.remove(collection, index);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullCollection_KuXS0_1_fid3() {
        Object collection = null;
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyArray_meQS1_1_fid3() {
        Object[] array = {};
        Iterator iterator = ValueUtils.iterate(array);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_tuKK2_2() {
        Object[] array = {1, 2, 3};
        Iterator iterator = ValueUtils.iterate(array);
        assertEquals(Arrays.asList(1, 2, 3).iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyCollection_KMGT3_1() {
        Collection collection = new ArrayList();
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyCollection_KMGT3_2() {
        Collection collection = new ArrayList();
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(Collections.EMPTY_LIST.iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_OrcM4_2() {
        Collection collection = Arrays.asList(1, 2, 3);
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(Arrays.asList(1, 2, 3).iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingletonCollection_Bzcs5_2() {
        Collection collection = Collections.singletonList(1);
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(Collections.singletonList(1).iterator(), iterator);
    }
}