/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.JXPathBeanInfo;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointer_Test_Passing {
    private Object bean;
    private QName name;
    BeanPointer beanpointer;
    private JXPathBeanInfo beanInfo;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithThisObject_Hfyt0() {
        final Object object = new Object();
        final boolean actual = object.equals(this);
        final boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        name = new QName("name");
        beanpointer = new BeanPointer(name, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        assertEquals(name, beanpointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ylwJ0() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), new Locale("en"));
        assertEquals(beanPointer.getName(), new QName("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanPropertyPointer_aLet0() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), new Locale("en"));
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        assertEquals(true, propertyPointer != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanPropertyPointerCoverage_xBki1_1() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), new Locale("en"));
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        Object bean = propertyPointer.getBean();
        String propertyName = propertyPointer.getPropertyName();
        NodePointer immediateValuePointer = propertyPointer.getImmediateValuePointer();
        Object immediateNode = propertyPointer.getImmediateNode();
        int hashCode = propertyPointer.hashCode();
        int propertyIndex = propertyPointer.getPropertyIndex();
        QName name = propertyPointer.getName();
        int length = propertyPointer.getLength();
        String[] propertyNames = propertyPointer.getPropertyNames();
        int propertyCount = propertyPointer.getPropertyCount();
        assertEquals(true, propertyPointer != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanPropertyPointerCoverage_xBki1_2() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), new Locale("en"));
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        Object bean = propertyPointer.getBean();
        String propertyName = propertyPointer.getPropertyName();
        NodePointer immediateValuePointer = propertyPointer.getImmediateValuePointer();
        Object immediateNode = propertyPointer.getImmediateNode();
        int hashCode = propertyPointer.hashCode();
        int propertyIndex = propertyPointer.getPropertyIndex();
        QName name = propertyPointer.getName();
        int length = propertyPointer.getLength();
        String[] propertyNames = propertyPointer.getPropertyNames();
        int propertyCount = propertyPointer.getPropertyCount();
        assertEquals(true, bean != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanPropertyPointerCoverage_xBki1_3() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), new Locale("en"));
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        Object bean = propertyPointer.getBean();
        String propertyName = propertyPointer.getPropertyName();
        NodePointer immediateValuePointer = propertyPointer.getImmediateValuePointer();
        Object immediateNode = propertyPointer.getImmediateNode();
        int hashCode = propertyPointer.hashCode();
        int propertyIndex = propertyPointer.getPropertyIndex();
        QName name = propertyPointer.getName();
        int length = propertyPointer.getLength();
        String[] propertyNames = propertyPointer.getPropertyNames();
        int propertyCount = propertyPointer.getPropertyCount();
        assertEquals(true, propertyName != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanPropertyPointerCoverage_xBki1_4() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), new Locale("en"));
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        Object bean = propertyPointer.getBean();
        String propertyName = propertyPointer.getPropertyName();
        NodePointer immediateValuePointer = propertyPointer.getImmediateValuePointer();
        Object immediateNode = propertyPointer.getImmediateNode();
        int hashCode = propertyPointer.hashCode();
        int propertyIndex = propertyPointer.getPropertyIndex();
        QName name = propertyPointer.getName();
        int length = propertyPointer.getLength();
        String[] propertyNames = propertyPointer.getPropertyNames();
        int propertyCount = propertyPointer.getPropertyCount();
        assertEquals(true, immediateValuePointer != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanPropertyPointerCoverage_xBki1_5() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), new Locale("en"));
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        Object bean = propertyPointer.getBean();
        String propertyName = propertyPointer.getPropertyName();
        NodePointer immediateValuePointer = propertyPointer.getImmediateValuePointer();
        Object immediateNode = propertyPointer.getImmediateNode();
        int hashCode = propertyPointer.hashCode();
        int propertyIndex = propertyPointer.getPropertyIndex();
        QName name = propertyPointer.getName();
        int length = propertyPointer.getLength();
        String[] propertyNames = propertyPointer.getPropertyNames();
        int propertyCount = propertyPointer.getPropertyCount();
        assertEquals(false, immediateNode != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanPropertyPointerCoverage_xBki1_6() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), new Locale("en"));
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        Object bean = propertyPointer.getBean();
        String propertyName = propertyPointer.getPropertyName();
        NodePointer immediateValuePointer = propertyPointer.getImmediateValuePointer();
        Object immediateNode = propertyPointer.getImmediateNode();
        int hashCode = propertyPointer.hashCode();
        int propertyIndex = propertyPointer.getPropertyIndex();
        QName name = propertyPointer.getName();
        int length = propertyPointer.getLength();
        String[] propertyNames = propertyPointer.getPropertyNames();
        int propertyCount = propertyPointer.getPropertyCount();
        assertEquals(true, hashCode != 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanPropertyPointerCoverage_xBki1_7() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), new Locale("en"));
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        Object bean = propertyPointer.getBean();
        String propertyName = propertyPointer.getPropertyName();
        NodePointer immediateValuePointer = propertyPointer.getImmediateValuePointer();
        Object immediateNode = propertyPointer.getImmediateNode();
        int hashCode = propertyPointer.hashCode();
        int propertyIndex = propertyPointer.getPropertyIndex();
        QName name = propertyPointer.getName();
        int length = propertyPointer.getLength();
        String[] propertyNames = propertyPointer.getPropertyNames();
        int propertyCount = propertyPointer.getPropertyCount();
        assertEquals(true, propertyIndex != 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanPropertyPointerCoverage_xBki1_8() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), new Locale("en"));
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        Object bean = propertyPointer.getBean();
        String propertyName = propertyPointer.getPropertyName();
        NodePointer immediateValuePointer = propertyPointer.getImmediateValuePointer();
        Object immediateNode = propertyPointer.getImmediateNode();
        int hashCode = propertyPointer.hashCode();
        int propertyIndex = propertyPointer.getPropertyIndex();
        QName name = propertyPointer.getName();
        int length = propertyPointer.getLength();
        String[] propertyNames = propertyPointer.getPropertyNames();
        int propertyCount = propertyPointer.getPropertyCount();
        assertEquals(true, name != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanPropertyPointerCoverage_xBki1_9() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), new Locale("en"));
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        Object bean = propertyPointer.getBean();
        String propertyName = propertyPointer.getPropertyName();
        NodePointer immediateValuePointer = propertyPointer.getImmediateValuePointer();
        Object immediateNode = propertyPointer.getImmediateNode();
        int hashCode = propertyPointer.hashCode();
        int propertyIndex = propertyPointer.getPropertyIndex();
        QName name = propertyPointer.getName();
        int length = propertyPointer.getLength();
        String[] propertyNames = propertyPointer.getPropertyNames();
        int propertyCount = propertyPointer.getPropertyCount();
        assertEquals(true, length != 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanPropertyPointerCoverage_xBki1_10() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), new Locale("en"));
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        Object bean = propertyPointer.getBean();
        String propertyName = propertyPointer.getPropertyName();
        NodePointer immediateValuePointer = propertyPointer.getImmediateValuePointer();
        Object immediateNode = propertyPointer.getImmediateNode();
        int hashCode = propertyPointer.hashCode();
        int propertyIndex = propertyPointer.getPropertyIndex();
        QName name = propertyPointer.getName();
        int length = propertyPointer.getLength();
        String[] propertyNames = propertyPointer.getPropertyNames();
        int propertyCount = propertyPointer.getPropertyCount();
        assertEquals(true, propertyNames != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanPropertyPointerCoverage_xBki1_11() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), new Locale("en"));
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        Object bean = propertyPointer.getBean();
        String propertyName = propertyPointer.getPropertyName();
        NodePointer immediateValuePointer = propertyPointer.getImmediateValuePointer();
        Object immediateNode = propertyPointer.getImmediateNode();
        int hashCode = propertyPointer.hashCode();
        int propertyIndex = propertyPointer.getPropertyIndex();
        QName name = propertyPointer.getName();
        int length = propertyPointer.getLength();
        String[] propertyNames = propertyPointer.getPropertyNames();
        int propertyCount = propertyPointer.getPropertyCount();
        assertEquals(true, propertyCount != 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNumberBean_TZnB1() {
        BeanPointer pointer = new BeanPointer(null, 123, null, null);
        assertEquals("123", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithBooleanBean_UiyF2() {
        BeanPointer pointer = new BeanPointer(null, true, null, null);
        assertEquals("true()", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithStringBean_xfLX3() {
        BeanPointer pointer = new BeanPointer(null, "abc", null, null);
        assertEquals("'abc'", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithBean_NYyb4() {
        BeanPointer pointer = new BeanPointer(null, new Object(), null, null);
        assertEquals("/", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        beanpointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), new Locale("en"));
        assertEquals(1, beanpointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLength_dpLa0() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(BeanPointer.class), Locale.getDefault());
        int actual = beanPointer.getLength();
        int expected = 1;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        bean = mock(Object.class);
        beanpointer = new BeanPointer(null, null, bean, null);
        Object result = beanpointer.getBaseValue();
        assertEquals(bean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBaseValue_JIHc0() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        Object baseValue = beanPointer.getBaseValue();
        assertNotNull(baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBaseValueWithNullBean_kCNc1() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), null, new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        Object baseValue = beanPointer.getBaseValue();
        assertNull(baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBaseValueWithNoBeanInfo_uogT2() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), null, Locale.getDefault());
        Object baseValue = beanPointer.getBaseValue();
        assertNotNull(baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBaseValueWithNoLocale_jAYG3() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), null);
        Object baseValue = beanPointer.getBaseValue();
        assertNotNull(baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBaseValueWithNoName_pjjc4() {
        BeanPointer beanPointer = new BeanPointer(null, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        Object baseValue = beanPointer.getBaseValue();
        assertNotNull(baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        beanpointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), new Locale(""));
        boolean actual = beanpointer.isCollection();
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_dNgO0() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(BeanPointer.class), Locale.getDefault());
        boolean result = beanPointer.isCollection();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        name = new QName("name");
        beanpointer = new BeanPointer(name, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        assertEquals(name.hashCode(), beanpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_WhenNameIsNullOrEmpty_ThenZero_jghn0() {
        BeanPointer pointer = new BeanPointer(null, new Object(), new JXPathBasicBeanInfo(Object.class), null);
        int actual = pointer.hashCode();
        int expected = 0;
        assert actual == expected;
    }
}