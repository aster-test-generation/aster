/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithNoParameters_QAEg0() {
        Class targetClass = Object.class;
        String name = "toString";
        Object[] parameters = {};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals("toString", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithParameters_NtlW1() {
        Class targetClass = String.class;
        String name = "valueOf";
        Object[] parameters = {123};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals("valueOf", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithNullParameters_PDAd2() {
        Class targetClass = Integer.class;
        String name = "parseInt";
        Object[] parameters = {null};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals("parseInt", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_gadb10_nLbm0() {
        Object[] parameters = new Object[3];
        parameters[0] = null;
        parameters[1] = new Object();
        parameters[2] = new Object();
        Constructor result = MethodLookupUtils.lookupConstructor(new Object().getClass(), parameters);
        assertEquals(null, result);
    }
}