/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationNotEqual_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_vnTN0() {
        Constant constant1 = new Constant("string1");
        Constant constant2 = new Constant("string2");
        CoreOperationNotEqual coreOperationNotEqual = new CoreOperationNotEqual(constant1, constant2);
        assertEquals("!=", coreOperationNotEqual.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithNumberConstants_FUIl1() {
        Constant constant1 = new Constant(10);
        Constant constant2 = new Constant(20);
        CoreOperationNotEqual coreOperationNotEqual = new CoreOperationNotEqual(constant1, constant2);
        assertEquals("!=", coreOperationNotEqual.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithBothConstantsEmpty_zEAL5() {
        Constant constant1 = new Constant("");
        Constant constant2 = new Constant("");
        CoreOperationNotEqual coreOperationNotEqual = new CoreOperationNotEqual(constant1, constant2);
        assertEquals("!=", coreOperationNotEqual.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithOneConstantEmpty_WIgW6() {
        Constant constant1 = new Constant("");
        Constant constant2 = new Constant("string");
        CoreOperationNotEqual coreOperationNotEqual = new CoreOperationNotEqual(constant1, constant2);
        assertEquals("!=", coreOperationNotEqual.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithBothConstantsZero_vTZI7() {
        Constant constant1 = new Constant(0);
        Constant constant2 = new Constant(0);
        CoreOperationNotEqual coreOperationNotEqual = new CoreOperationNotEqual(constant1, constant2);
        assertEquals("!=", coreOperationNotEqual.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithOneConstantZero_ALwZ8() {
        Constant constant1 = new Constant(0);
        Constant constant2 = new Constant(10);
        CoreOperationNotEqual coreOperationNotEqual = new CoreOperationNotEqual(constant1, constant2);
        assertEquals("!=", coreOperationNotEqual.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithBothConstantsOne_JhpP9() {
        Constant constant1 = new Constant(1);
        Constant constant2 = new Constant(1);
        CoreOperationNotEqual coreOperationNotEqual = new CoreOperationNotEqual(constant1, constant2);
        assertEquals("!=", coreOperationNotEqual.getSymbol());
    }
}