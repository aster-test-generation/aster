/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointer_Test_Passing {
    VariablePointer variablepointer;
    private Variables variables;
    private boolean actual;
    private QName name;
    private NodePointer valuePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindVariablesWhenContextIsNULL_uYcm1() {
        JXPathContext context = null;
        VariablePointer pointer = new VariablePointer(new QName("name"));
        pointer.findVariables(context);
        assertEquals(false, pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_qagA0() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        NodeIterator iterator = pointer.attributeIterator(new QName("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_QxOy0() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        pointer.setIndex(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndexWithNegativeIndex_tUSM1() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        pointer.setIndex(-1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndexWithZeroIndex_GhTO2() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        pointer.setIndex(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_VORN0() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        QName qName = new QName(" qualifiedName");
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        assertEquals(qName, variablePointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMethod1_jZbM0() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        int actual = pointer.getLength();
        int expected = 1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenNodeIsNull_mhtg0() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        boolean result = variablePointer.isLeaf();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_PzLP0() {
        final VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        assertTrue(pointer.equals(pointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_qPxy1() {
        final VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        assertFalse(pointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentObjectType_GUxs2() {
        final VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        assertFalse(pointer.equals(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentVariables_RwSq3() {
        final VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        final VariablePointer other = new VariablePointer(new KeywordVariables("otherKeyword", new Object()), new QName("prefix", "localName"));
        assertFalse(pointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentNames_Eqsz4() {
        final VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        final VariablePointer other = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("otherPrefix", "otherLocalName"));
        assertFalse(pointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithAllFieldsEqual_EGEa6() {
        final VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        final VariablePointer other = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        assertFalse(pointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_amlh0() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        assertTrue(pointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ePdP0() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        String path = pointer.asPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithIndex_NiFB1() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        pointer.setIndex(1);
        String path = pointer.asPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullName_bgIg5() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), null);
        String path = pointer.asPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBaseValue_whenActualIsfalse_thenThrowJXPathException_Tvur0() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        try {
            variablePointer.getBaseValue();
        } catch (JXPathException e) {
            assertEquals("Undefined variable: name", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_bPny0_FVQg0() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        NodeTest nodeTest = new NodeTest() {
        };
        boolean result = variablePointer.testNode(nodeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateChild_Xkru0() throws Exception {
        variablepointer = mock(VariablePointer.class);
        JXPathContext context = mock(JXPathContext.class);
        QName name = mock(QName.class);
        int index = 0;
        when(variablepointer.createChild(context, name, index)).thenReturn(mock(NodePointer.class));
        NodePointer result = variablepointer.createChild(context, name, index);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindVariables_YfuN0_ozqI0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        VariablePointer pointer = new VariablePointer(new QName("name"));
        pointer.findVariables(context);
        assertEquals(false, pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindVariablesWhenContextHasNoVariables_gXPs2_HaMo0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        pointer.findVariables(context);
        assertEquals(true, pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getImmediateNode_withWholeCollectionIndex_MsRZ0_BXiU0() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("qualifiedName"));
        Object result = pointer.getImmediateNode();
        assertEquals(ValueUtils.getValue(pointer.getBaseValue()), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getImmediateNode_withValidIndex_klif1_teMU0() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        int index = 1;
        Object result = pointer.getImmediateNode();
        assertEquals(ValueUtils.getValue(pointer.getBaseValue(), index), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWhenActual_HPmE1_wpJR0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        NodePointer nodePointer = pointer.createPath(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_DRMp0_DWeM0_1() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        boolean actual = pointer.isActual();
        boolean expected = true; // Replace with the expected value
        VariablePointer pointer2 = new VariablePointer(new KeywordVariables("keyword2", new Object()), new QName("name2"));
        boolean actual2 = pointer2.isActual();
        boolean expected2 = false; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_DRMp0_DWeM0_2() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        boolean actual = pointer.isActual();
        boolean expected = true; // Replace with the expected value
        VariablePointer pointer2 = new VariablePointer(new KeywordVariables("keyword2", new Object()), new QName("name2"));
        boolean actual2 = pointer2.isActual();
        boolean expected2 = true; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected2, actual2);
    }
}