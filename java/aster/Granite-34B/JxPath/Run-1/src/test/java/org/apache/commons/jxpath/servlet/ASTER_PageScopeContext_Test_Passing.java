/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.Collections;
import java.util.Enumeration;
import java.util.concurrent.TimeUnit;
import javax.servlet.jsp.PageContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PageScopeContext_Test_Passing {
    @Mock
    private PageContext pageContext;
    PageScopeContext pagescopecontext;
    PageContext pagecontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttribute() throws Exception {
        pagecontext = mock(PageContext.class);
        pagescopecontext = new PageScopeContext(pagecontext);
        Field field_pageContext = PageScopeContext.class.getDeclaredField("pageContext");
        field_pageContext.setAccessible(true);
        field_pageContext.set(pagescopecontext, pageContext);
        String attribute = "attribute";
        Object value = new Object();
        when(pageContext.getAttribute(attribute, PageContext.PAGE_SCOPE)).thenReturn(value);
        Object actual = pagescopecontext.getAttribute(attribute);
        assertEquals(value, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeNames_1() throws Exception {
        pagecontext = mock(PageContext.class);
        pagescopecontext = new PageScopeContext(pagecontext);
        Field field_pageContext = PageScopeContext.class.getDeclaredField("pageContext");
        field_pageContext.setAccessible(true);
        field_pageContext.set(pagescopecontext, pageContext);
        when(pageContext.getAttributeNamesInScope(anyInt())).thenReturn(Collections.enumeration(Arrays.asList("attribute1", "attribute2")));
        Enumeration<String> attributeNames = pagescopecontext.getAttributeNames();
        assertEquals(2, Collections.list(attributeNames).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeNames_2() throws Exception {
        pagecontext = mock(PageContext.class);
        pagescopecontext = new PageScopeContext(pagecontext);
        Field field_pageContext = PageScopeContext.class.getDeclaredField("pageContext");
        field_pageContext.setAccessible(true);
        field_pageContext.set(pagescopecontext, pageContext);
        when(pageContext.getAttributeNamesInScope(anyInt())).thenReturn(Collections.enumeration(Arrays.asList("attribute1", "attribute2")));
        Enumeration<String> attributeNames = pagescopecontext.getAttributeNames();
        assertTrue(attributeNames.hasMoreElements());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeNames_4() throws Exception {
        pagecontext = mock(PageContext.class);
        pagescopecontext = new PageScopeContext(pagecontext);
        Field field_pageContext = PageScopeContext.class.getDeclaredField("pageContext");
        field_pageContext.setAccessible(true);
        field_pageContext.set(pagescopecontext, pageContext);
        when(pageContext.getAttributeNamesInScope(anyInt())).thenReturn(Collections.enumeration(Arrays.asList("attribute1", "attribute2")));
        Enumeration<String> attributeNames = pagescopecontext.getAttributeNames();
        assertEquals("attribute1", attributeNames.nextElement());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeNames_5() throws Exception {
        pagecontext = mock(PageContext.class);
        pagescopecontext = new PageScopeContext(pagecontext);
        Field field_pageContext = PageScopeContext.class.getDeclaredField("pageContext");
        field_pageContext.setAccessible(true);
        field_pageContext.set(pagescopecontext, pageContext);
        when(pageContext.getAttributeNamesInScope(anyInt())).thenReturn(Collections.enumeration(Arrays.asList("attribute1", "attribute1")));
        Enumeration<String> attributeNames = pagescopecontext.getAttributeNames();
        assertEquals("attribute1", attributeNames.nextElement());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttribute_oAXv0_nCfG0() {
        PageContext pageContext = mock(PageContext.class);
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        Object result = pageScopeContext.getAttribute("attribute");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeWithNullAttribute_aSyq1_fpGi0() {
        PageContext pageContext = mock(PageContext.class);
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        Object result = pageScopeContext.getAttribute(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeWithEmptyAttribute_JSeg2_RLKn0() {
        PageContext pageContext = mock(PageContext.class);
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        Object result = pageScopeContext.getAttribute("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeWithInvalidAttribute_TKxB4_QbjF0() {
        PageContext pageContext = mock(PageContext.class);
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        Object result = pageScopeContext.getAttribute("invalid");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeNames_coverage_PmzR1_TLxM0() {
        PageContext pageContext = mock(PageContext.class);
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        pageScopeContext.getAttributeNames();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeNames_coverage_ojqU2_DMaA0() {
        PageContext pageContext = mock(PageContext.class);
        PageScopeContext pageScopeContext = new PageScopeContext(pageContext);
        pageScopeContext.getAttributeNames();
        pageScopeContext.getAttributeNames();
        pageScopeContext.getAttributeNames();
        pageScopeContext.getAttributeNames();
        pageScopeContext.getAttributeNames();
        pageScopeContext.getAttributeNames();
        pageScopeContext.getAttributeNames();
        pageScopeContext.getAttributeNames();
        pageScopeContext.getAttributeNames();
        pageScopeContext.getAttributeNames();
    }
}