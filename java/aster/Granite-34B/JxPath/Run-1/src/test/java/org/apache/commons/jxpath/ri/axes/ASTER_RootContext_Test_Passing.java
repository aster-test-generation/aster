/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RootContext_Test_Passing {
    @Mock
    JXPathContextReferenceImpl jxpathContext;
    @Mock
    DOMNodePointer pointer;
    RootContext rootcontext;
    private JXPathContextReferenceImpl parentContext;
    private Object contextBean;
    private String id;
    private VariablePointer variablePointer;
    private KeywordVariables keywordVariables;
    private Object object;
    private String keyword;
    private Function function;
    private Object[] parameters;
    private static int MAX_REGISTER = 4;
    private int availableRegister = 0;
    private Object[] registers;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetJXPathContext() throws Exception {
        jxpathContext = mock(JXPathContextReferenceImpl.class);
        pointer = mock(DOMNodePointer.class);
        rootcontext = new RootContext(jxpathContext, pointer);
        assertEquals(jxpathContext, rootcontext.getJXPathContext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_mOAz0_fFms0() {
        JXPathContextReferenceImpl jxpathContext = new JXPathContextReferenceImpl(null, null, null);
        DOMNodePointer pointer = new DOMNodePointer(null, null, null);
        RootContext rootContext = new RootContext(jxpathContext, pointer);
        Object result = rootContext.getValue();
        assertEquals(pointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCurrentNodePointerTest_uHEi0_WHew0() {
        JXPathContextReferenceImpl jxpathContext = new JXPathContextReferenceImpl(null, null, null);
        DOMNodePointer pointer = new DOMNodePointer(null, null, null);
        RootContext rootContext = new RootContext(jxpathContext, pointer);
        NodePointer result = rootContext.getCurrentNodePointer();
        assertEquals(pointer, result);
    }
}