/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathCompiledExpression_Test_Passing {
    private Expression expression;
    private String xpath;
    JXPathCompiledExpression jxpathcompiledexpression;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getXPathTest_uqSk0() {
        JXPathCompiledExpression jxPathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant("expression"));
        String actual = jxPathCompiledExpression.getXPath();
        String expected = "xpath";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getXPathTest_MZFi1() {
        JXPathCompiledExpression jxPathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant(100));
        String actual = jxPathCompiledExpression.getXPath();
        String expected = "xpath";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getXPathTest_UluC2() {
        JXPathCompiledExpression jxPathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant(100.0));
        String actual = jxPathCompiledExpression.getXPath();
        String expected = "xpath";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_cbso0() {
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant("expression"));
        assertEquals("xpath", jXPathCompiledExpression.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression_MrEE0() {
        JXPathCompiledExpression jxpath = new JXPathCompiledExpression("xpath", new Constant("string"));
        Expression expression = jxpath.getExpression();
        assertNotNull(expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratePointers_VErk0() {
        JXPathContext context = new JXPathContextReferenceImpl(null, null);
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", new Constant("expression"));
        Iterator iterator = expression.iteratePointers(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_drOu0_MylX0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", new Constant("value"));
        Object result = expression.getValue(context);
        assertEquals("value", result);
    }
}