/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPointer_Test_Passing {
    DynamicPointer dynamicpointer;
    private Object bean;
    private QName name;
    private DynamicPropertyHandler handler;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisDynamicPropertyDeclarationSupported() throws Exception {
        dynamicpointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.getDefault());
        assertTrue(dynamicpointer.isDynamicPropertyDeclarationSupported());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicPropertyDeclarationSupported_ABqh0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        boolean result = dynamicPointer.isDynamicPropertyDeclarationSupported();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals() throws Exception {
        bean = new Object();
        name = new QName("name");
        dynamicpointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.getDefault());
        Object sameObject = new Object();
        sameObject = dynamicpointer;
        assertTrue(dynamicpointer.equals(sameObject));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_vnGL0() {
        DynamicPointer pointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        assertTrue(pointer.equals(pointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_ybjd1() {
        DynamicPointer pointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        assertTrue(!pointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClassObject_jYIz2() {
        DynamicPointer pointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        assertTrue(!pointer.equals(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentBeanObject_gFxh3() {
        DynamicPointer pointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        DynamicPointer other = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        assertTrue(!pointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentNameObject_bPqw4() {
        DynamicPointer pointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        DynamicPointer other = new DynamicPointer(new QName("other"), new Object(), new PageContextHandler(), new Locale("en"));
        assertTrue(!pointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        dynamicpointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.getDefault());
        boolean result = dynamicpointer.isCollection();
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_nTCS0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        boolean result = dynamicPointer.isCollection();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        bean = new Object();
        name = new QName("name");
        dynamicpointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.getDefault());
        int expected = System.identityHashCode(bean) + (name == null ? 0 : name.hashCode());
        int actual = dynamicpointer.hashCode();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithBeanAndName_xNdU0() {
        Object bean = new Object();
        QName name = new QName("name");
        DynamicPointer pointer = new DynamicPointer(name, bean, new PageContextHandler(), new Locale("en"));
        assertEquals(System.identityHashCode(bean) + name.hashCode(), pointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithOnlyBean_WCGu1() {
        Object bean = new Object();
        DynamicPointer pointer = new DynamicPointer(null, bean, new PageContextHandler(), new Locale("en"));
        assertEquals(System.identityHashCode(bean), pointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_twyM0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        NodeIterator nodeIterator = dynamicPointer.attributeIterator(new QName("name"));
        assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        name = new QName("name");
        dynamicpointer = new DynamicPointer(name, new Object(), new PageContextHandler(), Locale.getDefault());
        assertEquals(name, dynamicpointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Jhld0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        assertEquals(new QName("name"), dynamicPointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() throws Exception {
        dynamicpointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.getDefault());
        String expected = "/";
        String actual = dynamicpointer.asPath();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        dynamicpointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.getDefault());
        assertEquals(1, dynamicpointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_tJKj0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        assertEquals(1, dynamicPointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        bean = new Object();
        dynamicpointer = new DynamicPointer(new QName("name"), bean, new PageContextHandler(), Locale.getDefault());
        assertEquals(bean, dynamicpointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        dynamicpointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.getDefault());
        final Object value = dynamicpointer.getNode();
        final boolean expected = value == null || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();
        final boolean actual = dynamicpointer.isLeaf();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameBeanAndNameObject_zyMs5_fid1() {
        DynamicPointer pointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        DynamicPointer other = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        assertFalse(pointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyPointer_1() throws Exception {
        handler = mock(DynamicPropertyHandler.class);
        dynamicpointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        PropertyPointer propertyPointer = dynamicpointer.getPropertyPointer();
        assertNotNull(propertyPointer);
    }
}