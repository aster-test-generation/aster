/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExtensionFunction_Test_Passing {
    private QName functionName;
    ExtensionFunction extensionfunction;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getFunctionNameTest_VWRg0() {
        ExtensionFunction extensionFunction = new ExtensionFunction(new QName("qualifiedName"), new Expression[0]);
        assertEquals(new QName("qualifiedName"), extensionFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getFunctionNameTest2_KXhF1() {
        ExtensionFunction extensionFunction = new ExtensionFunction(new QName("prefix", "localName"), new Expression[0]);
        assertEquals(new QName("prefix", "localName"), extensionFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getFunctionNameTest3_Caew2() {
        ExtensionFunction extensionFunction = new ExtensionFunction(new QName("name"), new Expression[0]);
        assertEquals(new QName("name"), extensionFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_WHhz0() {
        ExtensionFunction extensionFunction = new ExtensionFunction(new QName("functionName"), new Expression[0]);
        String actual = extensionFunction.toString();
        String expected = "functionName()";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullArguments_IpQe3() {
        ExtensionFunction extensionFunction = new ExtensionFunction(new QName("functionName"), null);
        String actual = extensionFunction.toString();
        String expected = "functionName()";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_eAsr0() {
        ExtensionFunction extensionFunction = new ExtensionFunction(new QName("functionName"), new Expression[0]);
        assertTrue(extensionFunction.computeContextDependent());
    }
}