/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QName_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_hTra0() {
        final String qualifiedName = " qualifiedName";
        final QName qName = new QName(qualifiedName);
        assertTrue(qName.equals(qName));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_jWKz1() {
        final String qualifiedName = " qualifiedName";
        final QName qName = new QName(qualifiedName);
        assertTrue(!qName.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNonQNamesObject_jbVT2() {
        final String qualifiedName = " qualifiedName";
        final Object object = new Object();
        final QName qName = new QName(qualifiedName);
        assertTrue(!qName.equals(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithEqualObjects_lvqR3() {
        final String qualifiedName = " qualifiedName";
        final Object object = new Object();
        final QName qName1 = new QName(qualifiedName);
        final QName qName2 = new QName(qualifiedName);
        assertTrue(qName1.equals(qName2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameTest1_DUPI0() {
        QName qName = new QName(" qualifiedName");
        String name = qName.getName();
        assert name != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameTest2_wdcQ1() {
        QName qName = new QName("prefix", "localName");
        String name = qName.getName();
        assert name != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getPrefixTest1_SqiT0() {
        QName qName = new QName("qualifiedName");
        String prefix = qName.getPrefix();
        assertEquals(null, prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getPrefixTest2_FwgY1() {
        QName qName = new QName("prefix", "localName");
        String prefix = qName.getPrefix();
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_QQAG0() {
        final String qualifiedName = " qualifiedName";
        final QName qName = new QName(qualifiedName);
        assertEquals(qualifiedName, qName.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_OWQQ1() {
        final String prefix = "prefix";
        final String localName = "localName";
        final String qualifiedName = prefix + ":" + localName;
        final QName qName = new QName(prefix, localName);
        assertEquals(qualifiedName, qName.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_DOHO0_lSrJ0() {
        QName qName = new QName("qualifiedName");
        int actual = qName.hashCode();
        int expected = qName.getName().hashCode();
        assertEquals(expected, actual);
    }
}