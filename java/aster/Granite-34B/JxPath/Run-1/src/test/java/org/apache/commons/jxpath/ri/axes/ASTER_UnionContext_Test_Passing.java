/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_UnionContext_Test_Passing {
    private EvalContext[] contexts;
    private boolean prepared;
    UnionContext unioncontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder() throws Exception {
        contexts = new EvalContext[2];
        contexts[0] = mock(EvalContext.class);
        contexts[1] = mock(EvalContext.class);
        unioncontext = new UnionContext(null, contexts);
        when(contexts[0].getDocumentOrder()).thenReturn(1);
        when(contexts[1].getDocumentOrder()).thenReturn(2);
        assertEquals(1, unioncontext.getDocumentOrder());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_fid1() throws Exception {
        contexts = new EvalContext[]{Mockito.mock(EvalContext.class), Mockito.mock(EvalContext.class)};
        prepared = false;
        unioncontext = new UnionContext(Mockito.mock(NamespaceContext.class), contexts);
        // given
        BasicNodeSet nodeSet = new BasicNodeSet();
        ArrayList<NodePointer> pointers = new ArrayList<>();
        for (EvalContext ctx : contexts) {
            while (ctx.nextSet()) {
                while (ctx.nextNode()) {
                    NodePointer ptr = ctx.getCurrentNodePointer();
                    if (!pointers.contains(ptr)) {
                        pointers.add(ptr);
                    }
                }
            }
        }
        pointers.sort(Comparator.comparing(NodePointer::toString));
        for (NodePointer ptr : pointers) {
            nodeSet.add(ptr);
        }
        // when
        boolean result = unioncontext.setPosition(1);
        // then
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_wdWO0_fid1() {
        UnionContext unionContext = new UnionContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(2)), new NodeTypeTest(3)), new EvalContext[0]);
        unionContext.setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_dgoK1_fid1() {
        UnionContext unionContext = new UnionContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(2)), new NodeTypeTest(3)), new EvalContext[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition5_tsVM4_fid1() {
        UnionContext unionContext = new UnionContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(2)), new NodeTypeTest(3)), new EvalContext[0]);
        assertEquals(false, unionContext.setPosition(1));
    }
}