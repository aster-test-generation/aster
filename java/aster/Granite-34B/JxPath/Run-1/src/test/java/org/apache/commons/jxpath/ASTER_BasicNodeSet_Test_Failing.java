/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicNodeSet_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointers_AfterAddingElement_iFva1_1() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List pointers = basicNodeSet.getPointers();
        pointers.add(new Object());
        pointers = basicNodeSet.getPointers();
        assertNotNull(pointers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointers_AfterAddingElement_iFva1_2() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List pointers = basicNodeSet.getPointers();
        pointers.add(new Object());
        pointers = basicNodeSet.getPointers();
        assertTrue(pointers.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointers_AfterAddingElement_iFva1_4() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List pointers = basicNodeSet.getPointers();
        pointers.add(new Object());
        pointers = basicNodeSet.getPointers();
        assertEquals(1, pointers.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointers_AfterAddingElement_iFva1() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List pointers = basicNodeSet.getPointers();
        assertNotNull(pointers);
        assertTrue(pointers.isEmpty());
        pointers.add(new Object());
        pointers = basicNodeSet.getPointers();
        assertNotNull(pointers);
        assertEquals(1, pointers.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_FsXy0_fid1() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        assertEquals("expected", basicNodeSet.toString());
    }
}