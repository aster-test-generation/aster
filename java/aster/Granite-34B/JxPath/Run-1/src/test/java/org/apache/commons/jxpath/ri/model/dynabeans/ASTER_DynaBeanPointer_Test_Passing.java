/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPointer_Test_Passing {
    private DynaBeanPointer dynabeanpointer;
    private DynaBean dynaBean;
    private VariablePointer parent;
    private Locale locale;
    private String id;
    private KeywordVariables variables;
    private String keyword;
    private Object object;
    private String qualifiedName;
    private String prefix;
    private QName name;
    VariablePointer variablePointer;
    KeywordVariables keywordVariables;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(new QName("name"), dynaBean, Locale.getDefault());
        assertEquals(dynaBean, dynabeanpointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(new QName("name"), dynaBean, Locale.getDefault());
        Object expected = dynaBean;
        Object actual = dynabeanpointer.getBaseValue();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_bFCF0_fid2() throws Exception {
        final Locale locale = Locale.getDefault();
        final DynaBean dynaBean = mock(DynaBean.class);
        final DOMNodePointer parent = mock(DOMNodePointer.class);
        final VariablePointer variablePointer = mock(VariablePointer.class);
        final KeywordVariables keywordVariables = mock(KeywordVariables.class);
        final DynaBeanPointer dynabeanpointer = new DynaBeanPointer(name, dynaBean, locale);
        when(parent.asPath()).thenReturn("/");
        assertEquals("/", dynabeanpointer.asPath());
    }
}