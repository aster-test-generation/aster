/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Array;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithIndexedPropertyDescriptor_aQTD0() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullCollection_KuXS0_1() {
        Object collection = null;
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullCollection_KuXS0_2() {
        Object collection = null;
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(Collections.EMPTY_LIST.iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyArray_meQS1_1() {
        Object[] array = {};
        Iterator iterator = ValueUtils.iterate(array);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertValueToArrayType_RxiL0() {
        Object collection = new Integer[10];
        int index = 5;
        Object value = 100;
        ValueUtils.setValue(collection, index, value);
        assertEquals(100, ((Integer[]) collection)[index]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnsupportedCollectionType_USkD2() {
        Object collection = new HashSet<Integer>();
        int index = 5;
        Object value = 100;
        try {
            ValueUtils.setValue(collection, index, value);
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            assertEquals("Cannot set value of an element of a java.util.HashSet", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullCollection_EPdL3() {
        Object collection = null;
        int index = 5;
        Object value = 100;
        ValueUtils.setValue(collection, index, value);
        assertEquals(null, collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullCollectionAndIndex_cEFH5() {
        Object collection = null;
        int index = -1;
        Object value = 100;
        ValueUtils.setValue(collection, index, value);
        assertEquals(null, collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithNullCollection_GNgG0() {
        Object collection = null;
        int index = 0;
        Object result = ValueUtils.remove(collection, index);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithShortArray_KBwJ2() {
        Object[] collection = new Object[5];
        int index = 2;
        Object result = ValueUtils.remove(collection, index);
        Assertions.assertEquals(4, Array.getLength(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithLongArray_AHFZ3() {
        Object[] collection = new Object[10];
        int index = 5;
        Object result = ValueUtils.remove(collection, index);
        Assertions.assertEquals(9, Array.getLength(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithShortList_uEnR4() {
        List<Object> collection = new ArrayList<>();
        for (int i = 0;i < 5;i++) {
            collection.add(new Object());
        }
        int index = 2;
        Object result = ValueUtils.remove(collection, index);
        Assertions.assertEquals(4, ((List) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithLongList_CEIp5() {
        List<Object> collection = new ArrayList<>();
        for (int i = 0;i < 10;i++) {
            collection.add(new Object());
        }
        int index = 5;
        Object result = ValueUtils.remove(collection, index);
        Assertions.assertEquals(9, ((List) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithShortCollection_WXlZ6() {
        Collection<Object> collection = new ArrayList<>();
        for (int i = 0;i < 5;i++) {
            collection.add(new Object());
        }
        int index = 2;
        Object result = ValueUtils.remove(collection, index);
        Assertions.assertEquals(4, ((Collection) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithLongCollection_TPSM7() {
        Collection<Object> collection = new ArrayList<>();
        for (int i = 0;i < 10;i++) {
            collection.add(new Object());
        }
        int index = 5;
        Object result = ValueUtils.remove(collection, index);
        Assertions.assertEquals(9, ((Collection) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_array_validIndex_WJhr0() {
        Object[] array = {1, 2, 3};
        int index = 1;
        Object expected = 2;
        Object actual = ValueUtils.getValue(array, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_array_invalidIndex_DAIy1() {
        Object[] array = {1, 2, 3};
        int index = 3;
        Object expected = null;
        Object actual = ValueUtils.getValue(array, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_list_validIndex_VJFI2() {
        java.util.List<Integer> list = new java.util.ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        int index = 1;
        Object expected = 2;
        Object actual = ValueUtils.getValue(list, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_list_invalidIndex_kOFL3() {
        java.util.List<Integer> list = new java.util.ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        int index = 3;
        Object expected = null;
        Object actual = ValueUtils.getValue(list, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_collection_validIndex_GdFI4() {
        java.util.Collection<Integer> collection = new java.util.ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        int index = 1;
        Object expected = 2;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_collection_invalidIndex_XtsI5() {
        java.util.Collection<Integer> collection = new java.util.ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        int index = 3;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_nullCollection_GEcY6() {
        Object collection = null;
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_nullArray_lEtm7() {
        Object[] array = null;
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(array, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_nullList_fQze8() {
        java.util.List<Integer> list = null;
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(list, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_nullCollection_BKCx9() {
        java.util.Collection<Integer> collection = null;
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_emptyArray_RoHY10() {
        Object[] array = new Object[0];
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(array, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_emptyList_jYoQ11() {
        java.util.List<Integer> list = new java.util.ArrayList<>();
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(list, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_emptyCollection_fpWV12() {
        java.util.Collection<Integer> collection = new java.util.ArrayList<>();
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValue_negativeIndex_ZSVU13() {
        Object[] array = {1, 2, 3};
        int index = -1;
        Object expected = null;
        Object actual = ValueUtils.getValue(array, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyArray_meQS1_2() {
        Object[] array = {};
        Iterator iterator = ValueUtils.iterate(array);
        assertEquals(Collections.EMPTY_LIST.iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_tuKK2_1() {
        Object[] array = {1, 2, 3};
        Iterator iterator = ValueUtils.iterate(array);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_OrcM4_1() {
        Collection collection = Arrays.asList(1, 2, 3);
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingletonCollection_Bzcs5_1() {
        Collection collection = Collections.singletonList(1);
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());
    }
}