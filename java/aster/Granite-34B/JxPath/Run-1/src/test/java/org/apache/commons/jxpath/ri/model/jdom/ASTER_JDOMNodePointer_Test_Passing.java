/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.jdom.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodePointer_Test_Passing {
    private Object node;
    JDOMNodePointer jdomnodepointer;
    @Mock
    Locale locale;
    @Mock
    String id;
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, locale);
        NodePointer pointer1 = mock(NodePointer.class);
        when(pointer1.getBaseValue()).thenReturn(node);
        NodePointer pointer2 = mock(NodePointer.class);
        when(pointer2.getBaseValue()).thenReturn(node);
        int expected = 0;
        int actual = jdomnodepointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueTextNode_YcSX0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Text("text"), Locale.getDefault());
        pointer.setValue("new text");
        assertEquals("new text", ((Text) pointer.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueClearTextNode_ZzvG1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Text("text"), Locale.getDefault());
        pointer.setValue("");
        assertTrue(((Text) pointer.getNode()).getText().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueElementNode_CYuT2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("element"), Locale.getDefault());
        pointer.setValue(new Element("newElement"));
        assertEquals("newElement", ((Element) pointer.getNode()).getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueCommentNode_RkID5() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Comment("comment"), Locale.getDefault());
        pointer.setValue(new Comment("newComment"));
        assertEquals("newComment", ((Comment) pointer.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueOtherNode_gMzu6() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("element"), Locale.getDefault());
        pointer.setValue(new Text("text"));
        assertEquals("text", ((Text) pointer.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ClearTextNode_Null_YYsQ2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Text("text"), Locale.getDefault());
        pointer.setValue(null);
        assertTrue(((Text) pointer.getNode()).getText().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_DocumentNode_mPgT4() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Document(new Element("element")), Locale.getDefault());
        pointer.setValue(new Document(new Element("newElement")));
        assertEquals("newElement", ((Element) ((Document) pointer.getNode()).getRootElement()).getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ProcessingInstructionNode_PDoI5_1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new ProcessingInstruction("target", "data"), Locale.getDefault());
        pointer.setValue(new ProcessingInstruction("newTarget", "newData"));
        assertEquals("newTarget", ((ProcessingInstruction) pointer.getNode()).getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ProcessingInstructionNode_PDoI5_2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new ProcessingInstruction("target", "data"), Locale.getDefault());
        pointer.setValue(new ProcessingInstruction("newTarget", "newData"));
        assertEquals("newData", ((ProcessingInstruction) pointer.getNode()).getData());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Null_Iiyo7() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("element"), Locale.getDefault());
        pointer.setValue(null);
        assertTrue(((Element) pointer.getNode()).getContent().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_MAuH0() {
        JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(new Object(), new Locale("en", "US"));
        assertFalse(jDOMNodePointer0.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_TkZf1() {
        JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer(new Object(), new Locale("en", "US"), "id");
        assertFalse(jDOMNodePointer0.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        node = mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, null);
        assertEquals(node, jdomnodepointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        node = mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, null);
        when(node.hashCode()).thenReturn(123);
        assertEquals(123, jdomnodepointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testattributeIterator() throws Exception {
        jdomnodepointer = new JDOMNodePointer(Mockito.mock(Object.class), Mockito.mock(Locale.class));
        NodeIterator nodeIterator = jdomnodepointer.attributeIterator(Mockito.mock(QName.class));
        assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForElement_rXrL0() {
        Object node = new Element("name");
        Locale locale = Locale.getDefault();
        JDOMNodePointer pointer = new JDOMNodePointer(node, locale);
        QName expected = new QName("name");
        assertEquals(expected, pointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForNullNode_skIT2() {
        Object node = null;
        Locale locale = Locale.getDefault();
        JDOMNodePointer pointer = new JDOMNodePointer(node, locale);
        assertNull(pointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForNodeWithNoNamespace_vYFX4() {
        Object node = new Element("name");
        Locale locale = Locale.getDefault();
        JDOMNodePointer pointer = new JDOMNodePointer(node, locale);
        assertNull(pointer.getName().getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        jdomnodepointer = new JDOMNodePointer(Mockito.mock(Object.class), Mockito.mock(Locale.class));
        assertEquals(1, jdomnodepointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_GKaS0() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale(""));
        int length = jdomNodePointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator_1() throws Exception {
        jdomnodepointer = new JDOMNodePointer(Mockito.mock(Object.class), Mockito.mock(Locale.class));
        NodeIterator nodeIterator = jdomnodepointer.namespaceIterator();
        assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator_2() throws Exception {
        jdomnodepointer = new JDOMNodePointer(Mockito.mock(Object.class), Mockito.mock(Locale.class));
        NodeIterator nodeIterator = jdomnodepointer.namespaceIterator();
        assertTrue(nodeIterator instanceof JDOMNamespaceIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_Ftah0() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        NodeIterator iterator = nodePointer.namespaceIterator();
        assertEquals(true, iterator instanceof JDOMNamespaceIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenNodeIsElementAndContentIsEmpty_GZJZ0() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Element("test"), Locale.getDefault());
        assertTrue(nodePointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenNodeIsDocumentAndContentIsEmpty_RhVj1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Document(new Element("test")), Locale.getDefault());
        assertTrue(nodePointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenNodeIsElementAndContentIsNotEmpty_QusH2() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Element("test").addContent(new Element("child")), Locale.getDefault());
        assertFalse(nodePointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenNodeIsDocumentAndContentIsNotEmpty_hvpQ3() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Document(new Element("test").addContent(new Element("child"))), Locale.getDefault());
        assertFalse(nodePointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenNodeIsOtherType_nEow4() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
        assertTrue(nodePointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals() throws Exception {
        node = mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, null);
        JDOMNodePointer other = new JDOMNodePointer(node, null);
        assertTrue(jdomnodepointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_ruLk0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale(""));
        assertTrue(pointer.equals(pointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_FszW1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale(""));
        assertFalse(pointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClassObject_DwLr2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale(""));
        assertFalse(pointer.equals(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSimilarObject_gUJx3() {
        Object node = new Object();
        JDOMNodePointer pointer = new JDOMNodePointer(node, new Locale(""));
        JDOMNodePointer similarPointer = new JDOMNodePointer(node, new Locale(""));
        assertTrue(pointer.equals(similarPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueForElementNode_CWJp0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("test"), new Locale("en"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueForCommentNode_vkTh1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Comment("This is a comment"), new Locale("en"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueForTextNode_Dmcu2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Text("   Hello World   "), new Locale("en"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueForProcessingInstructionNode_uhGQ3() {
        JDOMNodePointer pointer = new JDOMNodePointer(new ProcessingInstruction("test", "This is a test"), new Locale("en"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLanguage() throws Exception {
        jdomnodepointer = new JDOMNodePointer(Mockito.mock(Object.class), Mockito.mock(Locale.class));
        String lang = "en";
        when(jdomnodepointer.getLanguage()).thenReturn("en_US");
        boolean result = jdomnodepointer.isLanguage(lang);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_1_HPja0() {
        JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null);
        String string0 = "org.dom4j.tree.FlyweightText";
        boolean boolean0 = jDOMNodePointer0.isLanguage(string0);
        assertEquals(false, boolean0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_2_Abhi1() {
        JDOMNodePointer jDOMNodePointer0 = new JDOMNodePointer((Object) null, (Locale) null);
        String string0 = "";
        boolean boolean0 = jDOMNodePointer0.isLanguage(string0);
        assertEquals(false, boolean0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_NCWR0_1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root", Namespace.NO_NAMESPACE), Locale.getDefault());
        NodePointer namespacePointer = pointer.namespacePointer("prefix");
        assertNotNull(namespacePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_NCWR0_2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root", Namespace.NO_NAMESPACE), Locale.getDefault());
        NodePointer namespacePointer = pointer.namespacePointer("prefix");
        assertTrue(namespacePointer instanceof JDOMNamespacePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointerWithNullPrefix_iJEo1_1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root", Namespace.NO_NAMESPACE), Locale.getDefault());
        NodePointer namespacePointer = pointer.namespacePointer(null);
        assertNotNull(namespacePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointerWithNullPrefix_iJEo1_2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root", Namespace.NO_NAMESPACE), Locale.getDefault());
        NodePointer namespacePointer = pointer.namespacePointer(null);
        assertTrue(namespacePointer instanceof JDOMNamespacePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointerWithEmptyPrefix_qKuJ2_1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root", Namespace.NO_NAMESPACE), Locale.getDefault());
        NodePointer namespacePointer = pointer.namespacePointer("");
        assertNotNull(namespacePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointerWithEmptyPrefix_qKuJ2_2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root", Namespace.NO_NAMESPACE), Locale.getDefault());
        NodePointer namespacePointer = pointer.namespacePointer("");
        assertTrue(namespacePointer instanceof JDOMNamespacePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLanguageTest_AHEh0() {
        Object node = new Object();
        Locale locale = new Locale("en", "US");
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(node, locale);
        String expected = "en";
        String actual = jdomNodePointer.getLanguage();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLanguageWithIdTest_pGpF1() {
        Object node = new Object();
        Locale locale = new Locale("en", "US");
        String id = "123";
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(node, locale, id);
        String expected = "en";
        String actual = jdomNodePointer.getLanguage();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator() throws Exception {
        jdomnodepointer = new JDOMNodePointer(Mockito.mock(Object.class), Mockito.mock(Locale.class));
        NodeIterator nodeIterator = jdomnodepointer.namespaceIterator();
        assertNotNull(nodeIterator);
        assertTrue(nodeIterator instanceof JDOMNamespaceIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_NCWR0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root", Namespace.NO_NAMESPACE), Locale.getDefault());
        NodePointer namespacePointer = pointer.namespacePointer("prefix");
        assertNotNull(namespacePointer);
        assertTrue(namespacePointer instanceof JDOMNamespacePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointerWithNullPrefix_iJEo1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root", Namespace.NO_NAMESPACE), Locale.getDefault());
        NodePointer namespacePointer = pointer.namespacePointer(null);
        assertNotNull(namespacePointer);
        assertTrue(namespacePointer instanceof JDOMNamespacePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointerWithEmptyPrefix_qKuJ2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root", Namespace.NO_NAMESPACE), Locale.getDefault());
        NodePointer namespacePointer = pointer.namespacePointer("");
        assertNotNull(namespacePointer);
        assertTrue(namespacePointer instanceof JDOMNamespacePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndParentJDOMNodePointer_kcOW0() {
        final Element element = new Element("element");
        final JDOMNodePointer parent = new JDOMNodePointer(new Element("parent"), Locale.getDefault());
        final JDOMNodePointer nodePointer = new JDOMNodePointer(parent, element);
        assertEquals("parent/element[1]", nodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndParentJDOMNodePointerAndNamespaceURI_uyIt1() {
        final Element element = new Element("element", "namespace");
        final JDOMNodePointer parent = new JDOMNodePointer(new Element("parent"), Locale.getDefault());
        final JDOMNodePointer nodePointer = new JDOMNodePointer(parent, element);
        assertEquals("parent/ns0:element[1]", nodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithID_ToUC7() {
        final Element element = new Element("element");
        final JDOMNodePointer nodePointer = new JDOMNodePointer(element, Locale.getDefault(), "id");
        assertEquals("id('id')", nodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNode_hdmW0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("test"), new Locale("en"));
        assertEquals("/test", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithTextNode_xzsp1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Text("test"), new Locale("en"));
        assertEquals("/text()", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndParent_LVWJ3() {
        JDOMNodePointer parent = new JDOMNodePointer(new Element("parent"), new Locale("en"));
        JDOMNodePointer pointer = new JDOMNodePointer(parent, new Element("test"));
        assertEquals("/parent/test", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndParentAndNamespace_NMyK4() {
        JDOMNodePointer parent = new JDOMNodePointer(new Element("parent", "http://example.com"), new Locale("en"));
        JDOMNodePointer pointer = new JDOMNodePointer(parent, new Element("test", "http://example.com"));
        assertEquals("/parent:test", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNode_hZUA0() {
        JDOMNodePointer parent = new JDOMNodePointer(new Element("parent"), Locale.getDefault());
        Element element = new Element("element");
        JDOMNodePointer nodePointer = new JDOMNodePointer(parent, element);
        assertEquals("parent/element", nodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithTextNode_Chmz1() {
        JDOMNodePointer parent = new JDOMNodePointer(new Element("parent"), Locale.getDefault());
        Text text = new Text("text");
        JDOMNodePointer nodePointer = new JDOMNodePointer(parent, text);
        assertEquals("parent/text()", nodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithProcessingInstructionNode_xwLK2() {
        JDOMNodePointer parent = new JDOMNodePointer(new Element("parent"), Locale.getDefault());
        ProcessingInstruction pi = new ProcessingInstruction("target", "data");
        JDOMNodePointer nodePointer = new JDOMNodePointer(parent, pi);
        assertEquals("parent/processing-instruction('target')", nodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndNamespace_Jmjx3() {
        JDOMNodePointer parent = new JDOMNodePointer(new Element("parent"), Locale.getDefault());
        Element element = new Element("element", "namespace");
        JDOMNodePointer nodePointer = new JDOMNodePointer(parent, element);
        assertEquals("parent/namespace:element", nodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndNamespaceButNoPrefix_fycx5() {
        JDOMNodePointer parent = new JDOMNodePointer(new Element("parent"), Locale.getDefault());
        Element element = new Element("element", "namespace");
        JDOMNodePointer nodePointer = new JDOMNodePointer(parent, element);
        assertEquals("parent/node()", nodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndNamespaceButNoParent_RijQ6() {
        Element element = new Element("element", "namespace");
        JDOMNodePointer nodePointer = new JDOMNodePointer(element, Locale.getDefault());
        assertEquals("element", nodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndNamespaceButNoParentOrLocale_uLJc7() {
        Element element = new Element("element", "namespace");
        JDOMNodePointer nodePointer = new JDOMNodePointer(element, null);
        assertEquals("element", nodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndNamespaceButNoParentOrLocaleOrNamespace_MwMi8() {
        Element element = new Element("element");
        JDOMNodePointer nodePointer = new JDOMNodePointer(element, null);
        assertEquals("element", nodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndNamespaceButNoParentOrLocaleOrNamespaceOrName_JQrP9() {
        Element element = new Element("");
        JDOMNodePointer nodePointer = new JDOMNodePointer(element, null);
        assertEquals("element", nodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNode_VrXc0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("test"), Locale.getDefault());
        assertEquals("/", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithTextNode_Xujw1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Text("test"), Locale.getDefault());
        assertEquals("/text()", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithCDatanode_Nhnn2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new CDATA("test"), Locale.getDefault());
        assertEquals("/text()", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndParent_oaav4() {
        JDOMNodePointer parent = new JDOMNodePointer(new Element("parent"), Locale.getDefault());
        JDOMNodePointer pointer = new JDOMNodePointer(parent, new Element("test"));
        assertEquals("/parent/test", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndParentAndNamespace_cyBe5() {
        JDOMNodePointer parent = new JDOMNodePointer(new Element("parent", "uri"), Locale.getDefault());
        JDOMNodePointer pointer = new JDOMNodePointer(parent, new Element("test", "uri"));
        assertEquals("/parent/test", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndParentAndNamespaceAndNoPrefix_udMF7() {
        JDOMNodePointer parent = new JDOMNodePointer(new Element("parent", "uri"), Locale.getDefault());
        JDOMNodePointer pointer = new JDOMNodePointer(parent, new Element("test", "uri"));
        assertEquals("/parent/node()", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndParentAndNamespaceAndNoPrefixAndPosition_nBgP8() {
        JDOMNodePointer parent = new JDOMNodePointer(new Element("parent", "uri"), Locale.getDefault());
        JDOMNodePointer pointer = new JDOMNodePointer(parent, new Element("test", "uri"));
        assertEquals("/parent/node()[1]", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithTextNodeAndParent_OaUa9() {
        JDOMNodePointer parent = new JDOMNodePointer(new Element("parent"), Locale.getDefault());
        JDOMNodePointer pointer = new JDOMNodePointer(parent, new Text("test"));
        assertEquals("/parent/text()", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithTextNodeAndParentAndPosition_zpYy10() {
        JDOMNodePointer parent = new JDOMNodePointer(new Element("parent"), Locale.getDefault());
        JDOMNodePointer pointer = new JDOMNodePointer(parent, new Text("test"));
        assertEquals("/parent/text()[1]", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithCDatanodeAndParent_PzxE11() {
        JDOMNodePointer parent = new JDOMNodePointer(new Element("parent"), Locale.getDefault());
        JDOMNodePointer pointer = new JDOMNodePointer(parent, new CDATA("test"));
        assertEquals("/parent/text()", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithCDatanodeAndParentAndPosition_loLw12() {
        JDOMNodePointer parent = new JDOMNodePointer(new Element("parent"), Locale.getDefault());
        JDOMNodePointer pointer = new JDOMNodePointer(parent, new CDATA("test"));
        assertEquals("/parent/text()[1]", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNode_sMfI0() {
        JDOMNodePointer parent = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test");
        JDOMNodePointer pointer = new JDOMNodePointer(parent, node);
        assertEquals("/test", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithTextNode_mTeW1() {
        JDOMNodePointer parent = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Text("test");
        JDOMNodePointer pointer = new JDOMNodePointer(parent, node);
        assertEquals("/text()", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndNamespace_ZaEC3() {
        JDOMNodePointer parent = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Element("test", "http://www.example.com");
        JDOMNodePointer pointer = new JDOMNodePointer(parent, node);
        assertEquals("/test", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithTextNodeAndPosition_beae6() {
        JDOMNodePointer parent = new JDOMNodePointer(new Object(), new Locale("en"));
        Object node = new Text("test");
        JDOMNodePointer pointer = new JDOMNodePointer(parent, node);
        assertEquals("/text()[1]", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithId_pdNw8() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"), "test");
        assertEquals("id('test')", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIWithXmlPrefix_mhkt0() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        String namespaceURI = nodePointer.getNamespaceURI("xml");
        assertEquals("http://www.w3.org/XML/1998/namespace", namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIWithNonXmlPrefix_gjvd1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        String namespaceURI = nodePointer.getNamespaceURI("non-xml");
        assertNull(namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIWithNullPrefix_YZnl2() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        String namespaceURI = nodePointer.getNamespaceURI(null);
        assertNull(namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIWithDocumentNode_pYrL3() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Document(), new Locale("en"));
        String namespaceURI = nodePointer.getNamespaceURI("non-xml");
        assertNull(namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIWithElementNode_rUtK4() {
        Element element = new Element("test");
        element.addNamespaceDeclaration(Namespace.XML_NAMESPACE);
        JDOMNodePointer nodePointer = new JDOMNodePointer(element, new Locale("en"));
        String namespaceURI = nodePointer.getNamespaceURI("xml");
        assertEquals("http://www.w3.org/XML/1998/namespace", namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        node = mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, null);
        assertEquals(node, jdomnodepointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBaseValueTest_lIrr0() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale(""));
        Object result = jdomNodePointer.getBaseValue();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceResolver() throws Exception {
        jdomnodepointer = mock(JDOMNodePointer.class);
        localNamespaceResolver = mock(NamespaceResolver.class);
        when(jdomnodepointer.getNamespaceResolver()).thenReturn(localNamespaceResolver);
        NamespaceResolver resolver = jdomnodepointer.getNamespaceResolver();
        assertEquals(localNamespaceResolver, resolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_jYkV0() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        NamespaceResolver namespaceResolver = jdomNodePointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }
}