/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespacePointer_Test_Failing {
    NamespacePointer namespacepointer;
    private String prefix;
    DOMNodePointer parent;
    String namespaceURI;
    Object value;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        String prefix = "prefix";
        String namespaceURI = "namespaceURI";
        namespacepointer = new NamespacePointer(parent, prefix, namespaceURI);
        Object expected = new Object();
        when(parent.getBaseValue()).thenReturn(expected);
        Object actual = namespacepointer.getBaseValue();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue_fid1() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        String prefix = "prefix";
        String namespaceURI = "namespaceURI";
        namespacepointer = new NamespacePointer(parent, prefix, namespaceURI);
        Object expected = new Object();
        when(parent.getBaseValue()).thenReturn(expected);
        Object actual = namespacepointer.getBaseValue();
        assertNull(expected);
    }
}