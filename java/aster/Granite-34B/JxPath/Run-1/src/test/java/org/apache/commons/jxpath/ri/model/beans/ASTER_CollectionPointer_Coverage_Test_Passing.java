/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CollectionPointer_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_uKht0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        boolean actual = collectionPointer.equals(new Object());
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_maVr1() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        boolean actual = collectionPointer.equals(collectionPointer);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_NOKw2() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        boolean actual = collectionPointer.equals(null);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_nAky3() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        boolean actual = collectionPointer.equals(new CollectionPointer(new Object(), new Locale("")));
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath1_eDsw0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        String result = collectionPointer.asPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf1_BQYh0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        boolean actual = collectionPointer.isLeaf();
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator1_Jufv0_EpwN0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.ROOT);
        NodeIterator nodeIterator = collectionPointer.attributeIterator(new QName(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_znMQ0_IILH0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.ROOT);
        NodeIterator nodeIterator = collectionPointer.namespaceIterator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIteratorWithIndexAsWHOLE_COLLECTIONAndStartWithAsNULL_diLg2_eMcy0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        NodeIterator nodeIterator = collectionPointer.childIterator(new NodeTest() {
        }, true, null);
    }
}