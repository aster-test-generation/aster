/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreFunction_Test_Passing {
    CoreFunction corefunction;
    private int functionCode;
    private EvalContext context;
    NamespaceContext namespaceContext;
    SelfContext selfContext;
    NodeTypeTest nodeTypeTest;
    Expression arg1;
    Object value;
    NodePointer nodePointer;
    EvalContext ctx;
    Collection collection;
    JXPathContext jxpathContext;
    Expression[] expressions;
    Expression expression;
    @Mock
    private CoreFunction coreFunction;
    @Mock
    Expression[] args;
    private static Double ZERO = Double.valueOf(0);

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg2WithNullArgs_GCXR1() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Expression result = coreFunction.getArg2();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg2WithArgsLengthOne_xDdQ2() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{null});
        Expression result = coreFunction.getArg2();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg1WithNullArgs_WNak1() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Expression result = coreFunction.getArg1();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg1WithEmptyArgs_TUyR2() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
        Expression result = coreFunction.getArg1();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        functionCode = 1;
        context = mock(EvalContext.class);
        corefunction = new CoreFunction(functionCode, new Expression[0]);
        when(context.getValue()).thenReturn("value");
        Object result = corefunction.computeValue(context);
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg3_vLhz0() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
        Expression result = coreFunction.getArg3();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg3WithCoverage_KYoN1_1() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[3]);
        Expression result = coreFunction.getArg3();
        result = coreFunction.getArg3();
        result = coreFunction.getArg3();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionSubstringBefore() throws Exception {
        corefunction = new CoreFunction(1, new Expression[2]);
        when(context.getValue()).thenReturn("value");
        assertEquals("value", corefunction.functionSubstringBefore(context));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionFalse() throws Exception {
        corefunction = new CoreFunction(0, new Expression[0]);
        EvalContext context = mock(EvalContext.class);
        when(context.getValue()).thenReturn(Boolean.FALSE);
        Object result = corefunction.functionFalse(context);
        assertEquals(Boolean.FALSE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionPosition() throws Exception {
        corefunction = new CoreFunction(0, null);
        context = mock(EvalContext.class);
        when(context.getCurrentPosition()).thenReturn(1);
        Object result = corefunction.functionPosition(context);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgumentCount_withNoArguments_QbuJ0() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        int actual = coreFunction.getArgumentCount();
        int expected = 0;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgumentCount_withArguments_Bymx1() {
        Expression[] expressions = new Expression[3];
        CoreFunction coreFunction = new CoreFunction(1, expressions);
        int actual = coreFunction.getArgumentCount();
        int expected = 3;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionStartsWith() throws Exception {
        corefunction = new CoreFunction(0, new Expression[0]);
        EvalContext context = mock(EvalContext.class);
        when(context.getValue()).thenReturn("value");
        Object result = corefunction.functionStartsWith(context);
        assertEquals(Boolean.TRUE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionCount() throws Exception {
        corefunction = new CoreFunction(0, new Expression[0]);
        context = mock(EvalContext.class);
        arg1 = mock(Expression.class);
        value = new Object();
        nodePointer = mock(NodePointer.class);
        ctx = mock(EvalContext.class);
        collection = mock(Collection.class);
        when(arg1.compute(context)).thenReturn(value);
        when(value instanceof NodePointer).thenReturn(true);
        when(value instanceof EvalContext).thenReturn(true);
        when(ctx.hasNext()).thenReturn(true);
        when(value instanceof Collection).thenReturn(true);
        when(collection.size()).thenReturn(1);
        when(value == null).thenReturn(true);
        Object result = corefunction.functionCount(context);
        assertEquals(1.0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionEndsWith() throws Exception {
        corefunction = new CoreFunction(0, new Expression[]{});
        EvalContext context = mock(EvalContext.class);
        when(context.getValue()).thenReturn("value");
        Object result = corefunction.functionEndsWith(context);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_0_zYSd0() {
        CoreFunction obj = new CoreFunction(0, new Expression[0]);
        assertEquals("CoreFunction(0, [])", obj.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_1_ahsA1() {
        CoreFunction obj = new CoreFunction(1, new Expression[1]);
        assertEquals("CoreFunction(1, [Expression])", obj.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_2_ggTE2() {
        CoreFunction obj = new CoreFunction(2, new Expression[2]);
        assertEquals("CoreFunction(2, [Expression, Expression])", obj.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_3_zaLu3() {
        CoreFunction obj = new CoreFunction(3, new Expression[3]);
        assertEquals("CoreFunction(3, [Expression, Expression, Expression])", obj.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_4_qiWp4() {
        CoreFunction obj = new CoreFunction(4, new Expression[4]);
        assertEquals("CoreFunction(4, [Expression, Expression, Expression, Expression])", obj.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_5_aPug5() {
        CoreFunction obj = new CoreFunction(5, new Expression[5]);
        assertEquals("CoreFunction(5, [Expression, Expression, Expression, Expression, Expression])", obj.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_6_jqvq6() {
        CoreFunction obj = new CoreFunction(6, new Expression[6]);
        assertEquals("CoreFunction(6, [Expression, Expression, Expression, Expression, Expression, Expression])", obj.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_7_BJnd7() {
        CoreFunction obj = new CoreFunction(7, new Expression[7]);
        assertEquals("CoreFunction(7, [Expression, Expression, Expression, Expression, Expression, Expression, Expression])", obj.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_8_mKRJ8() {
        CoreFunction obj = new CoreFunction(8, new Expression[8]);
        assertEquals("CoreFunction(8, [Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression])", obj.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_9_JQrM9() {
        CoreFunction obj = new CoreFunction(9, new Expression[9]);
        assertEquals("CoreFunction(9, [Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression])", obj.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_10_dyjK10() {
        CoreFunction obj = new CoreFunction(10, new Expression[10]);
        assertEquals("CoreFunction(10, [Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression])", obj.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_11_mzJv11() {
        CoreFunction obj = new CoreFunction(11, new Expression[11]);
        assertEquals("CoreFunction(11, [Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression])", obj.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_12_FMMQ12() {
        CoreFunction obj = new CoreFunction(12, new Expression[12]);
        assertEquals("CoreFunction(12, [Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression])", obj.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_13_bCVT13() {
        CoreFunction obj = new CoreFunction(13, new Expression[13]);
        assertEquals("CoreFunction(13, [Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression])", obj.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_14_HhNQ14() {
        CoreFunction obj = new CoreFunction(14, new Expression[14]);
        assertEquals("CoreFunction(14, [Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression])", obj.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_15_REHs15() {
        CoreFunction obj = new CoreFunction(15, new Expression[15]);
        assertEquals("CoreFunction(15, [Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression, Expression])", obj.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionCeiling() throws Exception {
        corefunction = new CoreFunction(1, new Expression[]{expression});
        context = mock(EvalContext.class);
        when(expression.computeValue(context)).thenReturn(1.5);
        Object result = corefunction.functionCeiling(context);
        assertEquals(2.0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNull_NullContext_mWwS2() {
        CoreFunction function = new CoreFunction(0, new Expression[0]);
        Object result = function.functionNull(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_0_fRQo0() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_1_LTia1() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_2_onsJ2() {
        CoreFunction coreFunction = new CoreFunction(2, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_3_GBcg3() {
        CoreFunction coreFunction = new CoreFunction(3, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_4_rALx4() {
        CoreFunction coreFunction = new CoreFunction(4, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_5_cvUu5() {
        CoreFunction coreFunction = new CoreFunction(5, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_6_dIkz6() {
        CoreFunction coreFunction = new CoreFunction(6, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_7_lBfY7() {
        CoreFunction coreFunction = new CoreFunction(7, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_8_ECWU8() {
        CoreFunction coreFunction = new CoreFunction(8, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_9_wtyK9() {
        CoreFunction coreFunction = new CoreFunction(9, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_10_jSNr10() {
        CoreFunction coreFunction = new CoreFunction(10, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_11_jKZm11() {
        CoreFunction coreFunction = new CoreFunction(11, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_12_lVAR12() {
        CoreFunction coreFunction = new CoreFunction(12, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_13_COyR13() {
        CoreFunction coreFunction = new CoreFunction(13, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_14_lJHF14() {
        CoreFunction coreFunction = new CoreFunction(14, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_15_CoIM15() {
        CoreFunction coreFunction = new CoreFunction(15, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_16_vKPE16() {
        CoreFunction coreFunction = new CoreFunction(16, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_17_MQOf17() {
        CoreFunction coreFunction = new CoreFunction(17, null);
        boolean result = coreFunction.computeContextDependent();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCode_wQiM0() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        assertEquals(0, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCode_cgis1() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        assertEquals(1, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCode_RdtX2() {
        CoreFunction coreFunction = new CoreFunction(2, null);
        assertEquals(2, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCode_rool3() {
        CoreFunction coreFunction = new CoreFunction(3, null);
        assertEquals(3, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCode_MNkS4() {
        CoreFunction coreFunction = new CoreFunction(4, null);
        assertEquals(4, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCode_cVOA5() {
        CoreFunction coreFunction = new CoreFunction(5, null);
        assertEquals(5, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCode_tXYR6() {
        CoreFunction coreFunction = new CoreFunction(6, null);
        assertEquals(6, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCode_cMDQ7() {
        CoreFunction coreFunction = new CoreFunction(7, null);
        assertEquals(7, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCode_Elik8() {
        CoreFunction coreFunction = new CoreFunction(8, null);
        assertEquals(8, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCode_CuhE9() {
        CoreFunction coreFunction = new CoreFunction(9, null);
        assertEquals(9, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCode_xYzh10() {
        CoreFunction coreFunction = new CoreFunction(10, null);
        assertEquals(10, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCode_RBWI11() {
        CoreFunction coreFunction = new CoreFunction(11, null);
        assertEquals(11, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCode_mvdC12() {
        CoreFunction coreFunction = new CoreFunction(12, null);
        assertEquals(12, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCode_vXVL13() {
        CoreFunction coreFunction = new CoreFunction(13, null);
        assertEquals(13, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionContains() throws Exception {
        corefunction = new CoreFunction(0, new Expression[2]);
        EvalContext context = mock(EvalContext.class);
        when(context.getValue()).thenReturn("value");
        Object result = corefunction.functionContains(context);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionRound() throws Exception {
        expression = mock(Expression.class);
        context = mock(EvalContext.class);
        namespaceContext = mock(NamespaceContext.class);
        selfContext = mock(SelfContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        corefunction = new CoreFunction(1, new Expression[]{expression});
        when(expression.computeValue(context)).thenReturn(1.0);
        assertEquals(1.0, corefunction.functionRound(context));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionID_uSzH0() throws Exception {
        CoreFunction corefunction = new CoreFunction(0, new Expression[0]);
        EvalContext context = mock(EvalContext.class);
        JXPathContext jxpathContext = mock(JXPathContext.class);
        NodePointer pointer = mock(NodePointer.class);
        when(context.getJXPathContext()).thenReturn(jxpathContext);
        when(jxpathContext.getContextPointer()).thenReturn(pointer);
        when(pointer.getPointerByID(jxpathContext, "id")).thenReturn(pointer);
        Object result = corefunction.functionID(context);
        assertEquals(pointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionBoolean_Ldua0() throws Exception {
        doNothing().when(context).reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionTranslate_zFdu0() throws Exception {
        corefunction = new CoreFunction(0, new Expression[0]);
        EvalContext context = mock(EvalContext.class);
        when(context.getValue()).thenReturn("value");
        Object result = corefunction.functionTranslate(context);
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionNormalizeSpace_UfXJ0() throws Exception {
        CoreFunction corefunction = new CoreFunction(0, new Expression[0]);
        EvalContext context = mock(EvalContext.class);
        when(context.getJXPathContext()).thenReturn(mock(JXPathContext.class));
        when(context.getValue()).thenReturn("test string");
        String result = (String) corefunction.functionNormalizeSpace(context);
        assertEquals("test string", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionNumber_AxfO0() throws Exception {
        when(context.getCurrentNodePointer()).thenReturn(mock(NodePointer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg3WithCoverage_KYoN1() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[3]);
        Expression result = coreFunction.getArg3();
        assertNotNull(result);
        result = coreFunction.getArg3();
        assertNotNull(result);
        result = coreFunction.getArg3();
        assertNotNull(result);
    }
}