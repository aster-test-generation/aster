/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationAnd_Test_Failing {
    CoreOperationAnd coreoperationand;
    @Mock
    EvalContext context;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_WQMe1() {
        Expression[] args = new Expression[1];
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(args);
        boolean result = coreOperationAnd.isSymmetric();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_JWiB3() {
        Expression[] args = new Expression[3];
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(args);
        boolean result = coreOperationAnd.isSymmetric();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_TEYQ5() {
        Expression[] args = new Expression[5];
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(args);
        boolean result = coreOperationAnd.isSymmetric();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_QLfa7() {
        Expression[] args = new Expression[7];
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(args);
        boolean result = coreOperationAnd.isSymmetric();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_DLyS9() {
        Expression[] args = new Expression[9];
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(args);
        boolean result = coreOperationAnd.isSymmetric();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_sVBQ11() {
        Expression[] args = new Expression[11];
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(args);
        boolean result = coreOperationAnd.isSymmetric();
        assert !result;
    }
}