/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithNullParameters_Uwvu0() {
        Object[] parameters = null;
        int count = parameters == null ? 0 : parameters.length;
        assertEquals(0, count);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithNonEmptyParameters_nsjV1() {
        Object[] parameters = new Object[5];
        int count = parameters == null ? 0 : parameters.length;
        assertEquals(5, count);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithMethodFound_NzEV2_1() {
        Class targetClass = String.class;
        String name = "length";
        Object[] parameters = null;
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertTrue(method != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithMethodNotFound_FoDo3() {
        Class targetClass = String.class;
        String name = "nonExistentMethod";
        Object[] parameters = null;
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertTrue(method == null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithAmbiguousMethod_HNbV4() {
        Class targetClass = String.class;
        String name = "concat";
        Object[] parameters = new Object[1];
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertTrue(method == null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_hYYY0() {
        Object[] parameters = null;
        Method method = MethodLookupUtils.lookupMethod(null, "", parameters);
        Assertions.assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithMethodFound_NzEV2_2_fid1() {
        Class targetClass = String.class;
        String name = "length";
        Object[] parameters = null;
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertFalse(Modifier.isStatic(method.getModifiers()));
    }
}