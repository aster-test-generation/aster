/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointer_Test_Failing {
    VariablePointer variablepointer;
    private Variables variables;
    private boolean actual;
    private QName name;
    private NodePointer valuePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_CLzx0() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        pointer.setValue(new Object());
        assertEquals(null, pointer.getValue());
        pointer.setValue(new Object());
        assertEquals(null, pointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue2_LYWT1() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        pointer.setValue(new Object());
        assertEquals(null, pointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createChildTest1_IuGs0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        pointer.createChild(context, new QName("name"), 1);
        Assertions.assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithVariables_vBJv0() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(variables, name);
        int expected = System.identityHashCode(variables) + name.hashCode() + 0;
        assertEquals(expected, variablePointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithoutVariables_ERFg1() {
        KeywordVariables variables = null;
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(variables, name);
        int expected = 0 + name.hashCode() + 0;
        assertEquals(expected, variablePointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenNodeIsComplex_TyTY2() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        boolean result = variablePointer.isLeaf();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_wqjr0() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        NodeIterator iterator = pointer.namespaceIterator();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_VzBp0() throws Exception {
        variablepointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("qualifiedName"));
        JXPathContext context = JXPathContext.newContext(new Object());
        Object value = new Object();
        NodePointer nodePointer = variablepointer.createPath(context, value);
        assertEquals(value, nodePointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_mDIs0_AGsv0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        VariablePointer pointer = new VariablePointer(new QName("name"));
        NodePointer nodePointer = pointer.createPath(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_BSpo0_wgKy0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        Object value = new Object();
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        NodePointer result = pointer.createChild(context, new QName("prefix", "localName"), 1, value);
        assertEquals("Result is not as expected", "NodePointer", result.getClass().getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMethod2_PgqP1_fid1() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        int actual = pointer.getLength();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithAllFieldsEqual_EGEa6_fid1() {
        final VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        final VariablePointer other = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        assertTrue(pointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindVariables_YfuN0_ozqI0_fid1() {
        JXPathContext context = JXPathContext.newContext(new Object());
        VariablePointer pointer = new VariablePointer(new QName("name"));
        pointer.findVariables(context);
        assertEquals(true, pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindVariablesWhenContextHasNoVariables_gXPs2_HaMo0_fid1() {
        JXPathContext context = JXPathContext.newContext(new Object());
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        pointer.findVariables(context);
        assertEquals(false, pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_DRMp0_DWeM0_2_fid1() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        boolean actual = pointer.isActual();
        boolean expected = true; // Replace with the expected value
        VariablePointer pointer2 = new VariablePointer(new KeywordVariables("keyword2", new Object()), new QName("name2"));
        boolean actual2 = pointer2.isActual();
        boolean expected2 = false; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected2, actual2);
    }
}