/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Collections;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.NodePointerFactory;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathContextReferenceImpl_Test_Failing {
    JXPathContextReferenceImpl jxpathcontextreferenceimpl;
    JXPathContext jxpathcontext;
    NodePointer nodepointer;
    Pointer pointer;
    String xpath;
    Object value;
    Expression expression;
    EvalContext evalcontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremoveAll() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        String xpath = "xpath";
        jxpathcontextreferenceimpl.removeAll(xpath);
        verify(jxpathcontextreferenceimpl, times(1)).removeAll(xpath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePathAndSetValue() throws Exception {
        jxpathcontext = mock(JXPathContext.class);
        nodepointer = mock(NodePointer.class);
        pointer = mock(Pointer.class);
        xpath = "xpath";
        value = new Object();
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(jxpathcontext, new Object(), nodepointer);
        when(jxpathcontext.createPath(xpath)).thenReturn(pointer);
        Pointer result = jxpathcontextreferenceimpl.createPathAndSetValue(xpath, value);
        verify(jxpathcontext).createPath(xpath);
        verify(jxpathcontext).setValue(xpath, value);
        assertEquals(pointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testiteratePointers() throws Exception {
        jxpathcontext = mock(JXPathContext.class);
        nodepointer = mock(NodePointer.class);
        expression = mock(Expression.class);
        evalcontext = mock(EvalContext.class);
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(jxpathcontext, null, nodepointer);
        when(jxpathcontext.getPointer(anyString())).thenReturn(nodepointer);
        when(expression.iteratePointers(evalcontext)).thenReturn(Collections.emptyIterator());
        Iterator<Object> iterator = jxpathcontextreferenceimpl.iteratePointers("xpath", expression);
        verify(expression, times(1)).iteratePointers(evalcontext);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremoveNodePointerFactory() throws Exception {
        jxpathcontextreferenceimpl = mock(JXPathContextReferenceImpl.class);
        NodePointerFactory factory = mock(NodePointerFactory.class);
        when(jxpathcontextreferenceimpl.removeNodePointerFactory(factory)).thenReturn(true);
        assertTrue(jxpathcontextreferenceimpl.removeNodePointerFactory(factory));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testallocateConditionally() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        Object result = JXPathContextReferenceImpl.allocateConditionally("class", "existence");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getPointer_WithInvalidXPath_ReturnsNull_sPwU1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "invalid";
        Pointer actualPointer = context.getPointer(xpath);
        assertEquals(null, actualPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        String namespaceURI = "namespaceURI";
        String prefix = "prefix";
        when(jxpathcontextreferenceimpl.getPrefix(namespaceURI)).thenReturn(prefix);
        assertEquals(prefix, jxpathcontextreferenceimpl.getPrefix(namespaceURI));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetFunction() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        QName functionName = new QName("functionName");
        Object[] parameters = new Object[0];
        Function function = jxpathcontextreferenceimpl.getFunction(functionName, parameters);
        assertNotNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        String prefix = "prefix";
        when(jxpathcontextreferenceimpl.getNamespaceURI(prefix)).thenReturn("namespaceURI");
        assertEquals("namespaceURI", jxpathcontextreferenceimpl.getNamespaceURI(prefix));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremoveAll_E_Ggps0() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        String xpath = "xpath";
        Expression expr = mock(Expression.class);
        jxpathcontextreferenceimpl.removeAll(xpath, expr);
        verify(expr, times(1)).iteratePointers(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue_c_Ikyz0() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        String xpath = "xpath";
        Object value = new Object();
        jxpathcontextreferenceimpl.setValue(xpath, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getPrefix_NamespaceURI_ReturnsCorrectPrefix_LfGp0_fid1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String prefix = context.getPrefix("http://www.example.com");
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContextPointer_xoYZ0_fid1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        Pointer result = context.getContextPointer();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNamespaceURI_bEuP0_fid1() {
        JXPathContextReferenceImpl jXPathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String prefix = "prefix";
        String namespaceURI = jXPathContextReferenceImpl.getNamespaceURI(prefix);
        assertEquals("Namespace URI should match", namespaceURI, "expectedNamespaceURI");
    }
}