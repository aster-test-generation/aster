/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExpressionPath_Test_Passing {
    @Mock
    EvalContext context;
    ExpressionPath expressionpath;
    Constant constant;
    Expression[] predicates;
    Step[] steps;
    NamespaceContext namespaceContext;
    SelfContext selfContext;
    NodeTypeTest nodeTypeTest;
    private Expression expression;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_aDJY0() {
        Constant constant = new Constant("string");
        ExpressionPath expressionPath = new ExpressionPath(constant, new Expression[0], new Step[0]);
        Expression[] predicates = expressionPath.getPredicates();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicatesWithNumber_gYXt1() {
        Constant constant = new Constant(123);
        ExpressionPath expressionPath = new ExpressionPath(constant, new Expression[0], new Step[0]);
        Expression[] predicates = expressionPath.getPredicates();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicatesWithNullExpression_TyVV2() {
        Constant constant = new Constant("string");
        ExpressionPath expressionPath = new ExpressionPath(null, new Expression[0], new Step[0]);
        Expression[] predicates = expressionPath.getPredicates();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicatesWithNullPredicates_bhem3() {
        Constant constant = new Constant("string");
        ExpressionPath expressionPath = new ExpressionPath(constant, null, new Step[0]);
        Expression[] predicates = expressionPath.getPredicates();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicatesWithNullSteps_WTyt4() {
        Constant constant = new Constant("string");
        ExpressionPath expressionPath = new ExpressionPath(constant, new Expression[0], null);
        Expression[] predicates = expressionPath.getPredicates();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicatesWithOnePredicate_NBGr7() {
        Constant constant = new Constant("string");
        ExpressionPath expressionPath = new ExpressionPath(constant, new Expression[1], new Step[0]);
        Expression[] predicates = expressionPath.getPredicates();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicatesWithOneStep_gKCB8() {
        Constant constant = new Constant("string");
        ExpressionPath expressionPath = new ExpressionPath(constant, new Expression[0], new Step[1]);
        Expression[] predicates = expressionPath.getPredicates();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicatesWithMultiplePredicates_wXug9() {
        Constant constant = new Constant("string");
        ExpressionPath expressionPath = new ExpressionPath(constant, new Expression[5], new Step[0]);
        Expression[] predicates = expressionPath.getPredicates();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicatesWithMultipleSteps_tBUl10() {
        Constant constant = new Constant("string");
        ExpressionPath expressionPath = new ExpressionPath(constant, new Expression[0], new Step[5]);
        Expression[] predicates = expressionPath.getPredicates();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicatesWithStepsAndPredicates_ryeW11() {
        Constant constant = new Constant("string");
        ExpressionPath expressionPath = new ExpressionPath(constant, new Expression[5], new Step[5]);
        Expression[] predicates = expressionPath.getPredicates();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_1_gWPP0() {
        Constant constant0 = new Constant("string0");
        ExpressionPath expressionPath0 = new ExpressionPath(constant0, null, null);
        boolean result = expressionPath0.computeContextDependent();
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_2_YjxU1() {
        Number number0 = new Integer(0);
        Constant constant0 = new Constant(number0);
        ExpressionPath expressionPath0 = new ExpressionPath(constant0, null, null);
        boolean result = expressionPath0.computeContextDependent();
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression_Qlrd0() {
        Constant constant = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        Expression expression = expressionPath.getExpression();
        assertNotNull(expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpressionWithNumber_wTKQ1() {
        Constant constant = new Constant(123);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        Expression expression = expressionPath.getExpression();
        assertNotNull(expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpressionWithNullConstant_AxTh2() {
        Constant constant = null;
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        Expression expression = expressionPath.getExpression();
        assertNull(expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpressionWithNullPredicates_GHIZ4() {
        Constant constant = new Constant("string");
        Expression[] predicates = null;
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        Expression expression = expressionPath.getExpression();
        assertNotNull(expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpressionWithNullSteps_nwZC6() {
        Constant constant = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = null;
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        Expression expression = expressionPath.getExpression();
        assertNotNull(expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath_0_FpHv0() {
        Constant constant0 = new Constant("someString");
        ExpressionPath expressionPath0 = new ExpressionPath(constant0, new Expression[0], new Step[0]);
        boolean result = expressionPath0.isSimpleExpressionPath();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath_1_mUyi1() {
        Number number0 = new Integer(1);
        Constant constant0 = new Constant(number0);
        ExpressionPath expressionPath0 = new ExpressionPath(constant0, new Expression[0], new Step[0]);
        boolean result = expressionPath0.isSimpleExpressionPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath_3_btRP3() {
        Number number0 = new Integer(1);
        Constant constant0 = new Constant(number0);
        ExpressionPath expressionPath0 = new ExpressionPath(constant0, new Expression[0], new Step[0]);
        boolean result = expressionPath0.isSimpleExpressionPath();
        assertEquals(true, result);
    }
}