/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ClassFunctions_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getFunctionTest1_lZzW0() {
        Object[] parameters = null;
        String name = "new";
        String namespace = null;
        Class functionClass = null;
        ClassFunctions classFunctions = new ClassFunctions(functionClass, namespace);
        Function function = classFunctions.getFunction(namespace, name, parameters);
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getFunctionTest2_Jmtk1() {
        Object[] parameters = null;
        String name = "new";
        String namespace = "namespace";
        Class functionClass = null;
        ClassFunctions classFunctions = new ClassFunctions(functionClass, namespace);
        Function function = classFunctions.getFunction(namespace, name, parameters);
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getFunctionTest3_tJwM2() {
        Object[] parameters = new Object[0];
        String name = "new";
        String namespace = null;
        Class functionClass = null;
        ClassFunctions classFunctions = new ClassFunctions(functionClass, namespace);
        Function function = classFunctions.getFunction(namespace, name, parameters);
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getFunctionTest4_NCwc3() {
        Object[] parameters = new Object[0];
        String name = "new";
        String namespace = "namespace";
        Class functionClass = null;
        ClassFunctions classFunctions = new ClassFunctions(functionClass, namespace);
        Function function = classFunctions.getFunction(namespace, name, parameters);
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getFunctionTest5_QQzK4() {
        Object[] parameters = null;
        String name = "name";
        String namespace = null;
        Class functionClass = null;
        ClassFunctions classFunctions = new ClassFunctions(functionClass, namespace);
        Function function = classFunctions.getFunction(namespace, name, parameters);
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getFunctionTest6_jWLl5() {
        Object[] parameters = null;
        String name = "name";
        String namespace = "namespace";
        Class functionClass = null;
        ClassFunctions classFunctions = new ClassFunctions(functionClass, namespace);
        Function function = classFunctions.getFunction(namespace, name, parameters);
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getFunctionTest7_DhNf6() {
        Object[] parameters = new Object[0];
        String name = "name";
        String namespace = null;
        Class functionClass = null;
        ClassFunctions classFunctions = new ClassFunctions(functionClass, namespace);
        Function function = classFunctions.getFunction(namespace, name, parameters);
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getFunctionTest8_XjPF7() {
        Object[] parameters = new Object[0];
        String name = "name";
        String namespace = "namespace";
        Class functionClass = null;
        ClassFunctions classFunctions = new ClassFunctions(functionClass, namespace);
        Function function = classFunctions.getFunction(namespace, name, parameters);
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespacesWithNullNamespace_MyXw2_fid2() {
        ClassFunctions classFunctions = new ClassFunctions(Class.class, null);
        Set<String> usedNamespaces = classFunctions.getUsedNamespaces();
        assertTrue(usedNamespaces.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespacesWithEmptyNamespace_ekGd3_fid2() {
        ClassFunctions classFunctions = new ClassFunctions(Class.class, "");
        Set<String> usedNamespaces = classFunctions.getUsedNamespaces();
        assertTrue(usedNamespaces.isEmpty());
    }
}