/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationNegate_Test_Passing {
    CoreOperationNegate coreoperationnegate;
    EvalContext context;
    Constant constant;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_NqvN0() {
        Constant constant = new Constant("1");
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
        String symbol = coreOperationNegate.getSymbol();
        assert symbol.equals("-");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_PnFx1() {
        Constant constant = new Constant(1);
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
        String symbol = coreOperationNegate.getSymbol();
        assert symbol.equals("-");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_bEAB0() {
        Constant constant = new Constant("string");
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
        boolean actual = coreOperationNegate.isSymmetric();
        boolean expected = false;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric2_mHId1() {
        Constant constant = new Constant(1);
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
        boolean actual = coreOperationNegate.isSymmetric();
        boolean expected = false;
        assert actual == expected;
    }
}