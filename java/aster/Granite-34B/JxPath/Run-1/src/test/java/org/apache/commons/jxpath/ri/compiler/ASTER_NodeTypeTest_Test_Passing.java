/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_NodeTypeTest_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringNode_Xjqg0() {
        assertEquals("node", NodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_NODE));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringText_nSii1() {
        assertEquals("text", NodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_TEXT));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringComment_BcSC2() {
        assertEquals("comment", NodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_COMMENT));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringPI_Nlnz3() {
        assertEquals("processing-instruction", NodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_PI));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType_bdse0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        int result = nodeTypeTest.getNodeType();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType2_ciKF1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(2);
        int result = nodeTypeTest.getNodeType();
        assertEquals(2, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType3_lHMw2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(3);
        int result = nodeTypeTest.getNodeType();
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType4_bdFf3() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(4);
        int result = nodeTypeTest.getNodeType();
        assertEquals(4, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType5_cdza4() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(5);
        int result = nodeTypeTest.getNodeType();
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType6_gbqC5() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(6);
        int result = nodeTypeTest.getNodeType();
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType7_cWZn6() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(7);
        int result = nodeTypeTest.getNodeType();
        assertEquals(7, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType8_qXLt7() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(8);
        int result = nodeTypeTest.getNodeType();
        assertEquals(8, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType9_nFjG8() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(9);
        int result = nodeTypeTest.getNodeType();
        assertEquals(9, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType10_NAbz9() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(10);
        int result = nodeTypeTest.getNodeType();
        assertEquals(10, result);
    }
}