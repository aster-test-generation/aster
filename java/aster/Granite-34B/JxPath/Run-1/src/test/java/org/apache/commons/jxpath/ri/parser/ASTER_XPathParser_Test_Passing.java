/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.ArrayList;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_XPathParser_Test_Passing {
    XPathParser xpathParser;
    private int[] jj_la1 = new int[39];
    private Compiler compiler;
    private int jj_gen;
    XPathParser xpathparser;
    private int jj_endpos;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    private int jj_kind = -1;
    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    static private int[] jj_la1_0;
    @Mock
    SimpleCharStream stream;
    @Mock
    XPathParserTokenManager tm;
    private XPathParser parser;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException16_EFfp15() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNCName_Without_CoreFunctions() throws Exception {
        xpathparser = mock(XPathParser.class);
        doReturn("").when(xpathparser).NCName_Without_CoreFunctions();
        assertEquals("", xpathparser.NCName_Without_CoreFunctions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNCName_Without_CoreFunctions_XitX0() throws ParseException {
        XPathParser xpathParser = new XPathParser(new java.io.StringReader(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPredicate_yhIJ0() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        try {
            Object result = parser.Predicate();
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArgumentList() throws Exception {
        xpathparser = mock(XPathParser.class);
        doReturn(new ArrayList()).when(xpathparser).ArgumentList();
        ArrayList result = xpathparser.ArgumentList();
        assertEquals(new ArrayList(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetCompiler() throws Exception {
        xpathparser = mock(XPathParser.class);
        compiler = mock(Compiler.class);
        xpathparser.setCompiler(compiler);
        verify(xpathparser, times(1)).setCompiler(compiler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubtractiveExpr_Stle0() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        try {
            Object result = parser.SubtractiveExpr();
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNextToken() throws Exception {
        xpathparser = mock(XPathParser.class);
        Token token = mock(Token.class);
        when(xpathparser.getNextToken()).thenReturn(token);
        assertEquals(token, xpathparser.getNextToken());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCoreFunctionName() throws Exception {
        xpathparser = mock(XPathParser.class);
        when(xpathparser.CoreFunctionName()).thenReturn(1);
        assertEquals(1, xpathparser.CoreFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCoreFunctionName_gWdw0() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        try {
            int code = parser.CoreFunctionName();
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNCName() throws Exception {
        xpathparser = mock(XPathParser.class);
        when(xpathparser.NCName()).thenReturn("NCName");
        assertEquals("NCName", xpathparser.NCName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdisable_tracing() throws Exception {
        xpathparser = mock(XPathParser.class);
        xpathparser.disable_tracing();
        verify(xpathparser, times(1)).disable_tracing();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType() throws Exception {
        xpathparser = mock(XPathParser.class);
        doReturn(0).when(xpathparser).NodeType();
        int type = xpathparser.NodeType();
        assertEquals(0, type);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRelativeLocationPath_xlGF0() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        try {
            Object result = parser.RelativeLocationPath();
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithReader_yJrQ0() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        parser.ReInit(new java.io.StringReader(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithInputStream_LSFY1() {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        parser.ReInit(new java.io.ByteArrayInputStream(new byte[0]));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithTokenManager_ePlA2() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser parser = new XPathParser(tokenManager);
        parser.ReInit(tokenManager);
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisSpecifier_1() throws Exception {
        xpathparser = mock(XPathParser.class);
        when(xpathparser.AxisName()).thenReturn(1);
        when(xpathparser.AbbreviatedAxisSpecifier()).thenReturn(2);
        int axis = xpathparser.AxisSpecifier();
        axis = xpathparser.AxisSpecifier();
        assertEquals(1, axis);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisSpecifier_0() throws Exception {
        xpathparser = mock(XPathParser.class);
        when(xpathparser.AxisName()).thenReturn(1);
        when(xpathparser.AbbreviatedAxisSpecifier()).thenReturn(0);
        int axis = xpathparser.AxisSpecifier();
        axis = xpathparser.AxisSpecifier();
        assertEquals(0, axis);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisName() throws Exception {
        xpathparser = mock(XPathParser.class);
        when(xpathparser.AxisName()).thenReturn(1);
        assertEquals(1, xpathparser.AxisName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisNameSelf_eKFt0() throws Exception {
        XPathParser parser = new XPathParser(new java.io.StringReader("self::node()"));
        assertEquals(Compiler.AXIS_SELF, parser.AxisName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisNameChild_HxCT1() throws Exception {
        XPathParser parser = new XPathParser(new java.io.StringReader("child::node()"));
        assertEquals(Compiler.AXIS_CHILD, parser.AxisName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPath() throws Exception {
        xpathparser = mock(XPathParser.class);
        Object ex = new Object();
        when(xpathparser.LocationPath()).thenReturn(ex);
        Object actual = xpathparser.LocationPath();
        assertEquals(ex, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_LcEx2_PJxt0() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")), 0);
        XPathParser xpathParser = new XPathParser(tokenManager);
        ParseException e = xpathParser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException_EvCO0_CyQd0() {
        XPathParser xpathParser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        assertNotNull(xpathParser.generateParseException());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_PuOj1_krFN0() {
        XPathParser xpathParser = new XPathParser(new java.io.StringReader(""));
        assertNotNull(xpathParser.generateParseException());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException_rqwU0_LVKQ0() {
        XPathParser xpathParser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        assertTrue(xpathParser.generateParseException() instanceof ParseException);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseExceptionWithReader_LGfb1_hTdD0() {
        XPathParser xpathParser = new XPathParser(new java.io.StringReader(""));
        assertTrue(xpathParser.generateParseException() instanceof ParseException);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseExceptionWithTokenManager_wbhT2_rgJP0() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
        XPathParser xpathParser = new XPathParser(tokenManager);
        assertTrue(xpathParser.generateParseException() instanceof ParseException);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException_SAAz0_pMfK0() {
        XPathParser xpathParser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        xpathParser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_oBVC5_MVoT0() {
        XPathParser xpathParser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 0, 0)));
        xpathParser.generateParseException();
    }
}