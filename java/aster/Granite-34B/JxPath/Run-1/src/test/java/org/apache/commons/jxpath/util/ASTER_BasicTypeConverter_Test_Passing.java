/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicTypeConverter_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_NullObject_ReturnsTrue_hkfk0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(null, String.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_ObjectIsOfToType_ReturnsTrue_akoE2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(new Object(), Object.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_UseTypeIsString_ReturnsTrue_YCew3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(new Object(), String.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_ObjectIsNumberAndUseTypeIsNumberOrBoolean_ReturnsTrue_BYAX5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(new Integer(1), Number.class);
        assert result;
        result = converter.canConvert(new Integer(1), Boolean.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_ObjectIsStringAndUseTypeIsBooleanOrCharacterOrNumber_ReturnsTrue_DOKI6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert("true", Boolean.class);
        assert result;
        result = converter.canConvert("a", Character.class);
        assert result;
        result = converter.canConvert("1", Byte.class);
        assert result;
        result = converter.canConvert("1", Short.class);
        assert result;
        result = converter.canConvert("1", Integer.class);
        assert result;
        result = converter.canConvert("1", Long.class);
        assert result;
        result = converter.canConvert("1.0", Float.class);
        assert result;
        result = converter.canConvert("1.0", Double.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_ObjectIsArrayAndUseTypeIsArray_ReturnsTrue_FqTn7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object[] array = new Object[1];
        boolean result = converter.canConvert(array, Object[].class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_ObjectIsArrayAndUseTypeIsCollection_ReturnsTrue_DtPk8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object[] array = new Object[1];
        boolean result = converter.canConvert(array, Collection.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_ObjectIsArrayAndUseTypeIsArrayAndValuesCanBeConverted_ReturnsTrue_IBrm9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Integer[] array = new Integer[1];
        boolean result = converter.canConvert(array, Integer[].class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_ObjectIsCollectionAndUseTypeIsArray_ReturnsTrue_OIcr10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<Integer> list = new ArrayList<>();
        list.add(1);
        boolean result = converter.canConvert(list, Integer[].class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_ObjectIsCollectionAndUseTypeIsCollection_ReturnsTrue_OzDm11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<Integer> list = new ArrayList<>();
        list.add(1);
        boolean result = converter.canConvert(list, Collection.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWhenTypeIsInterface_JXIq0() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        boolean actual = basicTypeConverter.canCreateCollection(List.class);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWhenTypeIsAbstractClass_dVUU1() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        boolean actual = basicTypeConverter.canCreateCollection(AbstractList.class);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWhenTypeHasNoDefaultConstructor_tbmX2() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        boolean actual = basicTypeConverter.canCreateCollection(ArrayList.class);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWhenTypeIsCollection_HzTs4() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        boolean actual = basicTypeConverter.canCreateCollection(Collection.class);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWhenTypeIsSet_ENYq5() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        boolean actual = basicTypeConverter.canCreateCollection(Set.class);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_boolean_CZDP0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(boolean.class);
        assertEquals(Boolean.FALSE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_char_PuFF1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(char.class);
        assertEquals(Character.valueOf('\0'), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_byte_ofAl2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(byte.class);
        assertEquals(Byte.valueOf((byte) 0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_short_OdNr3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(short.class);
        assertEquals(Short.valueOf((short) 0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_int_FHxf4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(int.class);
        assertEquals(Integer.valueOf(0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_long_lEcJ5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(long.class);
        assertEquals(Long.valueOf(0L), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_float_jvpd6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(float.class);
        assertEquals(Float.valueOf(0.0f), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_double_sMSq7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(double.class);
        assertEquals(Double.valueOf(0.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_unknownType_XYUy8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(String.class);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionForList_Zsso0() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        List<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Collection<Integer> unmodifiableCollection = basicTypeConverter.unmodifiableCollection(list);
        assertEquals(list, unmodifiableCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionForSet_FGGo1() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Set<Integer> set = new TreeSet<>();
        set.add(1);
        set.add(2);
        set.add(3);
        Collection<Integer> unmodifiableCollection = basicTypeConverter.unmodifiableCollection(set);
        assertEquals(set, unmodifiableCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionForEmptyList_CnOO2() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        List<Integer> list = new ArrayList<>();
        Collection<Integer> unmodifiableCollection = basicTypeConverter.unmodifiableCollection(list);
        assertEquals(list, unmodifiableCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionForEmptySet_wMtC3() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Set<Integer> set = new TreeSet<>();
        Collection<Integer> unmodifiableCollection = basicTypeConverter.unmodifiableCollection(set);
        assertEquals(set, unmodifiableCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Boolean_QdTI0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("true", Boolean.class);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Character_uPDF1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("a", Character.class);
        assertEquals('a', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Byte_VWSS2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Byte.class);
        assertEquals((byte) 1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Short_bEjn3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Short.class);
        assertEquals((short) 1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Integer_lXwy4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Integer.class);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Long_cBPp5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Long.class);
        assertEquals(1L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Float_YAPA6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1.0", Float.class);
        assertEquals(1.0f, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Double_vvps7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1.0", Double.class);
        assertEquals(1.0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_UnsupportedType_LdZH8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", String.class);
        assertNull(result);
    }
}