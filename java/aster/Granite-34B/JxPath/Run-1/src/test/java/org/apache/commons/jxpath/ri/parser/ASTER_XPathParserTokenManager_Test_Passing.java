/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_XPathParserTokenManager_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchToWithValidLexicalState_hpLI0() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")), 0);
        tokenManager.SwitchTo(0);
        assertEquals(0, tokenManager.curLexState);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchToWithInvalidLexicalState_CXoc1() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")), 0);
        try {
            tokenManager.SwitchTo(1);
        } catch (TokenMgrError e) {
            assertEquals("Error: Ignoring invalid lexical state : 1. State unchanged.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchToWithNegativeLexicalState_HHTt2() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")), 0);
        try {
            tokenManager.SwitchTo(-1);
        } catch (TokenMgrError e) {
            assertEquals("Error: Ignoring invalid lexical state : -1. State unchanged.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToken_nDzv6() {
        new Token();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJjMoveStringLiteralDfa0_0_CTRb9() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDebugStream_mUTC0() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")), 0);
        tokenManager.setDebugStream(System.out);
        assertEquals(System.out, tokenManager.debugStream);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDebugStreamWithNullArgument_wuaS1() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")), 0);
        tokenManager.setDebugStream(null);
        assertNull(tokenManager.debugStream);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextToken2_LnId8_eyGa0() {
        XPathParserTokenManager xPathParserTokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextToken_isxH0_XPCJ0() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")), 0);
        assertEquals(0, tokenManager.getNextToken().kind);
    }
}