/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ProcessingInstructionTest_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTarget_Wibv0() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target");
        String target = processingInstructionTest.getTarget();
        assertEquals("target", target);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTargetWithNullTarget_jMep1() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest(null);
        String target = processingInstructionTest.getTarget();
        assertEquals(null, target);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTargetWithEmptyTarget_yZgH2() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("");
        String target = processingInstructionTest.getTarget();
        assertEquals("", target);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_lCwh0_VcZP0() {
        ProcessingInstructionTest testObject = new ProcessingInstructionTest("target");
        String expected = "processing-instruction('target')";
        String actual = testObject.getTarget();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyTarget_isIl1_TNIa0() {
        ProcessingInstructionTest testObject = new ProcessingInstructionTest("");
        String expected = "processing-instruction('')";
        String actual = testObject.toString();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullTarget_WLJN2_OWNK0() {
        ProcessingInstructionTest testObject = new ProcessingInstructionTest(null);
        String expected = "processing-instruction('null')";
        String actual = testObject.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithTargetLength1_LHIN3_OfnZ0() {
        ProcessingInstructionTest testObject = new ProcessingInstructionTest("a");
        String expected = "processing-instruction('a')";
        String actual = testObject.toString();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithTargetLength2_HKHF4_ZNAC0() {
        ProcessingInstructionTest testObject = new ProcessingInstructionTest("ab");
        String expected = "processing-instruction('ab')";
        String actual = testObject.toString();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithTargetLength3_acRu5_PKjJ0() {
        ProcessingInstructionTest testObject = new ProcessingInstructionTest("abc");
        String expected = "processing-instruction('abc')";
        String actual = testObject.toString();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithTargetLength4_Mzva6_pYfZ0() {
        ProcessingInstructionTest testObject = new ProcessingInstructionTest("abcd");
        String expected = "processing-instruction('abcd')";
        String actual = testObject.toString();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithTargetLength5_eNjD7_NFya0() {
        ProcessingInstructionTest testObject = new ProcessingInstructionTest("abcde");
        String expected = "processing-instruction('abcde')";
        String actual = testObject.getTarget();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithTargetLength6_bLLX8_hcfG0() {
        ProcessingInstructionTest testObject = new ProcessingInstructionTest("abcdef");
        String expected = "processing-instruction('abcdef')";
        String actual = testObject.toString();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithTargetLength7_HaVK9_rdsA0() {
        ProcessingInstructionTest testObject = new ProcessingInstructionTest("abcdefg");
        String expected = "abcdefg";
        String actual = testObject.getTarget();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithTargetLength8_ZysG10_OYcW0() {
        ProcessingInstructionTest testObject = new ProcessingInstructionTest("abcdefgh");
        String expected = "processing-instruction('abcdefgh')";
        String actual = testObject.toString();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithTargetLength9_rkyE11_aadP0() {
        ProcessingInstructionTest testObject = new ProcessingInstructionTest("abcdefghi");
        String expected = "processing-instruction('abcdefghi')";
        String actual = testObject.toString();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
}