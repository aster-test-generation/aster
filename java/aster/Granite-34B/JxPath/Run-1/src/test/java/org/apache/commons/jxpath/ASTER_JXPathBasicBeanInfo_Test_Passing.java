/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.beans.PropertyDescriptor;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathBasicBeanInfo_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomic_ImEV0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, true);
        boolean result = jXPathBasicBeanInfo.isAtomic();
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomic2_xlXf1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class);
        boolean result = jXPathBasicBeanInfo.isAtomic();
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomic3_CKDF2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, Object.class);
        boolean result = jXPathBasicBeanInfo.isAtomic();
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDynamicPropertyHandlerClassTest_paPa0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, false);
        Class result = jXPathBasicBeanInfo.getDynamicPropertyHandlerClass();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDynamicPropertyHandlerClassTest2_ZQRk1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class);
        Class result = jXPathBasicBeanInfo.getDynamicPropertyHandlerClass();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDynamicPropertyHandlerClassTest3_DoEp2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, Object.class);
        Class result = jXPathBasicBeanInfo.getDynamicPropertyHandlerClass();
        assertEquals(Object.class, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors_QDQm0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, true);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithNoArgs_Epwq1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithHandlerClass_Ljua2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, Object.class);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithNoPropertyDescriptors_Lrdk3_1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, true);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithIntrospectionException_griO4_1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Thread.State.class, true);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_fdOn0() {
        final JXPathBasicBeanInfo info = new JXPathBasicBeanInfo(JXPathBasicBeanInfo.class, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_UsiH1() {
        final JXPathBasicBeanInfo info = new JXPathBasicBeanInfo(JXPathBasicBeanInfo.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_cCOy2() {
        final JXPathBasicBeanInfo info = new JXPathBasicBeanInfo(JXPathBasicBeanInfo.class, JXPathBasicBeanInfo.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_pJxE3() {
        final JXPathBasicBeanInfo info = new JXPathBasicBeanInfo(JXPathBasicBeanInfo.class, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicWhenDynamicPropertyHandlerClassisNull_UYka0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, false);
        boolean actual = jXPathBasicBeanInfo.isDynamic();
        boolean expected = false;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithNoPropertyDescriptors_Lrdk3_2_fid2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, true);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertEquals(3, propertyDescriptors.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithIntrospectionException_griO4_2_fid2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Thread.State.class, true);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertEquals(1, propertyDescriptors.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor_zotY0_fid2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class);
        PropertyDescriptor result = jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor3_JneT2_fid2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class, Class.class);
        PropertyDescriptor result = jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor10_Wajg9_fid2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class, boolean.class);
        jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
    }
}