/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceResolver_Test_Failing {
    private boolean sealed;
    NamespaceResolver namespaceresolver;
    NamespaceResolver parent;
    Map<String, String> map;
    String namespaceURI;
    String prefix;
    Pointer pointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetNamespaceContextPointer() throws Exception {
        namespaceresolver = new NamespaceResolver();
        NodePointer pointer = mock(NodePointer.class);
        namespaceresolver.setNamespaceContextPointer(pointer);
        verify(pointer, times(1)).getName();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testregisterNamespace() throws Exception {
        namespaceresolver = new NamespaceResolver();
        String prefix = "prefix";
        String namespaceURI = "namespaceURI";
        namespaceresolver.registerNamespace(prefix, namespaceURI);
        Mockito.verify(namespaceresolver, Mockito.times(1)).registerNamespace(prefix, namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() throws Exception {
        namespaceresolver = new NamespaceResolver();
        String prefix = "prefix";
        String uri = "uri";
        when(namespaceresolver.getExternallyRegisteredNamespaceURI(prefix)).thenReturn(uri);
        when(namespaceresolver.pointer.getNamespaceURI(prefix)).thenReturn(uri);
        String result = namespaceresolver.getNamespaceURI(prefix);
        assertEquals(uri, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisSealed() throws Exception {
        namespaceresolver = new NamespaceResolver();
        sealed = false;
        when(namespaceresolver.isSealed()).thenReturn(sealed);
        assertEquals(sealed, namespaceresolver.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_O_uQDD0() throws Exception {
        namespaceresolver = new NamespaceResolver(parent);
        String namespaceURI = "example.com";
        String prefix = "examplePrefix";
        Mockito.when(parent.getExternallyRegisteredPrefix(namespaceURI)).thenReturn(prefix);
        String result = namespaceresolver.getPrefix(namespaceURI);
        Assertions.assertEquals(prefix, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testseal_fid2() throws Exception {
        namespaceresolver = new NamespaceResolver();
        NamespaceResolver parent = mock(NamespaceResolver.class);
        namespaceresolver = new NamespaceResolver(parent);
        namespaceresolver.seal();
        verify(parent, times(1)).seal();
        assertTrue(sealed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_fgKr0_fid3() throws Exception {
        namespaceresolver = new NamespaceResolver();
        NodePointer pointer = mock(NodePointer.class);
        String namespaceURI = "namespaceURI";
        String prefix = namespaceresolver.getPrefix(pointer, namespaceURI);
        assertEquals(prefix, "");
    }
}