/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Step_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_adPY0() {
        Step step = new Step(1, new NodeTypeTest(1), new Expression[0]);
        int actual = step.getAxis();
        int expected = 1;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxisWithNegativeAxis_VXvG1() {
        Step step = new Step(-1, new NodeTypeTest(1), new Expression[0]);
        int actual = step.getAxis();
        int expected = -1;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxisWithZeroAxis_uolT2() {
        Step step = new Step(0, new NodeTypeTest(1), new Expression[0]);
        int actual = step.getAxis();
        int expected = 0;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependentWithNullPredicates_Jdmy0() {
        Step step = new Step(1, new NodeTypeTest(1), null);
        Assertions.assertFalse(step.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependentWithEmptyPredicates_sxFK1() {
        Step step = new Step(1, new NodeTypeTest(1), new Expression[0]);
        Assertions.assertFalse(step.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_AxisChild_NodeTypeTest_NoPredicates_Piph0() {
        final Step step = new Step(Compiler.AXIS_CHILD, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_AxisAttribute_NodeTypeTest_NoPredicates_FMVc1() {
        final Step step = new Step(Compiler.AXIS_ATTRIBUTE, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
        assertEquals("@node()", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_AxisSelf_NodeTypeTest_NoPredicates_ISIZ2() {
        final Step step = new Step(Compiler.AXIS_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
        assertEquals(".", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_AxisParent_NodeTypeTest_NoPredicates_GJxs3() {
        final Step step = new Step(Compiler.AXIS_PARENT, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
        assertEquals("..", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_AxisDescendantOrSelf_NodeTypeTest_NoPredicates_rTCE4() {
        final Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
        assertEquals("", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_IOyC0() {
        Step step = new Step(1, new NodeTypeTest(1), new Expression[0]);
        Expression[] predicates = step.getPredicates();
        assertEquals(0, predicates.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeTest_LZVU0() {
        Step step = new Step(1, new NodeTypeTest(1), new Expression[0]);
        NodeTest nodeTest = step.getNodeTest();
        assertNotNull(nodeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeTestWithCoverage_NQBS1_2() {
        Step step = new Step(1, new NodeTypeTest(1), new Expression[0]);
        NodeTest nodeTest = step.getNodeTest();
        assertEquals(1, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeTestWithCoverage_NQBS1_3() {
        Step step = new Step(1, new NodeTypeTest(1), new Expression[0]);
        NodeTest nodeTest = step.getNodeTest();
        assertEquals(1, ((NodeTypeTest) step.getNodeTest()).getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringSelf_ydzy0() {
        assertEquals("self", Step.axisToString(Compiler.AXIS_SELF));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringChild_wXFy1() {
        assertEquals("child", Step.axisToString(Compiler.AXIS_CHILD));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringParent_cZWG2() {
        assertEquals("parent", Step.axisToString(Compiler.AXIS_PARENT));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringAncestor_cnlT3() {
        assertEquals("ancestor", Step.axisToString(Compiler.AXIS_ANCESTOR));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringAttribute_lHuX4() {
        assertEquals("attribute", Step.axisToString(Compiler.AXIS_ATTRIBUTE));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringNamespace_oAFs5() {
        assertEquals("namespace", Step.axisToString(Compiler.AXIS_NAMESPACE));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringPreceding_WPtV6() {
        assertEquals("preceding", Step.axisToString(Compiler.AXIS_PRECEDING));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringFollowing_EHdg7() {
        assertEquals("following", Step.axisToString(Compiler.AXIS_FOLLOWING));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringDescendant_FFsH8() {
        assertEquals("descendant", Step.axisToString(Compiler.AXIS_DESCENDANT));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringAncestorOrSelf_lLpP9() {
        assertEquals("ancestor-or-self", Step.axisToString(Compiler.AXIS_ANCESTOR_OR_SELF));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringFollowingSibling_qzuA10() {
        assertEquals("following-sibling", Step.axisToString(Compiler.AXIS_FOLLOWING_SIBLING));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringPrecedingSibling_XhiX11() {
        assertEquals("preceding-sibling", Step.axisToString(Compiler.AXIS_PRECEDING_SIBLING));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringDescendantOrSelf_caQm12() {
        assertEquals("descendant-or-self", Step.axisToString(Compiler.AXIS_DESCENDANT_OR_SELF));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringUnknown_oEik13() {
        assertEquals("UNKNOWN", Step.axisToString(100));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeTestWithCoverage_NQBS1() {
        Step step = new Step(1, new NodeTypeTest(1), new Expression[0]);
        NodeTest nodeTest = step.getNodeTest();
        assertNotNull(nodeTest);
        assertEquals(1, step.getAxis());
        assertEquals(1, ((NodeTypeTest) step.getNodeTest()).getNodeType());
    }
}