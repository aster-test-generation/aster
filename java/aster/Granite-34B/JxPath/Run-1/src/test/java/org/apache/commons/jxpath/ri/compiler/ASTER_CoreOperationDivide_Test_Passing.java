/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationDivide_Test_Passing {
    CoreOperationDivide coreoperationdivide;
    EvalContext context;
    Constant constant1;
    Constant constant2;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_hiEq0() {
        Constant constant1 = new Constant("string");
        Constant constant2 = new Constant(1);
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        boolean result = coreOperationDivide.isSymmetric();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_PlPE0() {
        Constant constant1 = new Constant("1");
        Constant constant2 = new Constant("2");
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        int precedence = coreOperationDivide.getPrecedence();
        assert precedence == CoreOperationDivide.MULTIPLY_PRECEDENCE;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedenceWithNullConstants_eDDT1() {
        Constant constant1 = null;
        Constant constant2 = null;
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        int precedence = coreOperationDivide.getPrecedence();
        assert precedence == CoreOperationDivide.MULTIPLY_PRECEDENCE;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedenceWithOneNullConstant_OCky2() {
        Constant constant1 = new Constant("1");
        Constant constant2 = null;
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        int precedence = coreOperationDivide.getPrecedence();
        assert precedence == CoreOperationDivide.MULTIPLY_PRECEDENCE;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedenceWithZeroConstants_XYXA3() {
        Constant constant1 = new Constant("0");
        Constant constant2 = new Constant("0");
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        int precedence = coreOperationDivide.getPrecedence();
        assert precedence == CoreOperationDivide.MULTIPLY_PRECEDENCE;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedenceWithOneZeroConstant_dBME4() {
        Constant constant1 = new Constant("1");
        Constant constant2 = new Constant("0");
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        int precedence = coreOperationDivide.getPrecedence();
        assert precedence == CoreOperationDivide.MULTIPLY_PRECEDENCE;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedenceWithOneNumberConstant_GlbV5() {
        Constant constant1 = new Constant(1);
        Constant constant2 = new Constant(2);
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        int precedence = coreOperationDivide.getPrecedence();
        assert precedence == CoreOperationDivide.MULTIPLY_PRECEDENCE;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedenceWithOneStringConstant_VGey6() {
        Constant constant1 = new Constant("1");
        Constant constant2 = new Constant(2);
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        int precedence = coreOperationDivide.getPrecedence();
        assert precedence == CoreOperationDivide.MULTIPLY_PRECEDENCE;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_HyEA0_limi0() {
        Constant constant1 = new Constant("1");
        Constant constant2 = new Constant("2");
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        String symbol = coreOperationDivide.getSymbol();
        assertEquals("div", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithNullConstants_dYLi1_vMdG0() {
        Constant constant1 = null;
        Constant constant2 = null;
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        String symbol = coreOperationDivide.getSymbol();
        assertEquals("div", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithZeroDivisor_yLdh2_igLY0() {
        Constant constant1 = new Constant("1");
        Constant constant2 = new Constant("0");
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        String symbol = coreOperationDivide.getSymbol();
        assertEquals("div", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithZeroDividend_Qrkn3_HFvd0() {
        Constant constant1 = new Constant("0");
        Constant constant2 = new Constant("2");
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        String symbol = coreOperationDivide.getSymbol();
        assertEquals("div", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithOnlyDividendNull_hQuv5_jcXn0() {
        Constant constant1 = null;
        Constant constant2 = new Constant("2");
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        String symbol = coreOperationDivide.getSymbol();
        org.junit.jupiter.api.Assertions.assertEquals("div", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithOnlyDivisorNull_HHxQ6_sbNA0() {
        Constant constant1 = new Constant("1");
        Constant constant2 = null;
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        String symbol = coreOperationDivide.getSymbol();
        org.junit.jupiter.api.Assertions.assertEquals("div", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithBothConstantsNumber_OFBf7_HTNI0() {
        Constant constant1 = new Constant(1);
        Constant constant2 = new Constant(2);
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        String symbol = coreOperationDivide.getSymbol();
        assertEquals("div", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithDividendNumberAndDivisorString_HjIh8_gpnm0() {
        Constant constant1 = new Constant(1);
        Constant constant2 = new Constant("2");
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        String symbol = coreOperationDivide.getSymbol();
        assertEquals("div", symbol);
    }
}