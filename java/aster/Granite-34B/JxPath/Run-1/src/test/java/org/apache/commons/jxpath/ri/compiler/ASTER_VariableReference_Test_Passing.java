/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariableReference_Test_Passing {
    private QName varName;
    VariableReference variablereference;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getVariableNameTest2_OoeF1() {
        VariableReference variableReference = new VariableReference(new QName("prefix", "localName"));
        assertEquals(new QName("prefix", "localName"), variableReference.getVariableName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getVariableNameTest4_zimo3() {
        VariableReference variableReference = new VariableReference(new QName("prefix", "localName"));
        assertEquals("prefix", variableReference.getVariableName().getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_mFka0() {
        VariableReference varRef = new VariableReference(new QName("varname"));
        boolean result = varRef.isContextDependent();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_MEGI0_2() {
        VariableReference varRef = new VariableReference(new QName(" qualifiedName"));
        varRef = new VariableReference(new QName("prefix", "localName"));
        assertEquals("$prefix:localName", varRef.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringForNullName_uogI1() {
        VariableReference varRef = new VariableReference(null);
        assertEquals("$null", varRef.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringForEmptyName_XiKT2() {
        VariableReference varRef = new VariableReference(new QName(""));
        assertEquals("$", varRef.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringForNullPrefix_cPBB3() {
        VariableReference varRef = new VariableReference(new QName(null, "localName"));
        assertEquals("$localName", varRef.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringForEmptyLocalName_jEuY6() {
        VariableReference varRef = new VariableReference(new QName("prefix", ""));
        assertEquals("$prefix:", varRef.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_unaA0() {
        VariableReference variableReference = new VariableReference(new QName(" qualifiedName"));
        boolean actual = variableReference.computeContextDependent();
        boolean expected = false;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getVariableNameTest5_dpCi4_fid1() {
        VariableReference variableReference = new VariableReference(new QName(" qualifiedName"));
        assertEquals(429548839, variableReference.getVariableName().hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getVariableNameTest6_YxTu5_fid1() {
        VariableReference variableReference = new VariableReference(new QName("prefix", "localName"));
        assertEquals(-1205395306, variableReference.getVariableName().hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependentWithNullArgument_sPdQ2_fid1() {
        VariableReference varRef = new VariableReference(null);
        boolean result = varRef.isContextDependent();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringForEmptyPrefix_LSYo4_fid1() {
        VariableReference varRef = new VariableReference(new QName("", "localName"));
        assertEquals("$:localName", varRef.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringForNullLocalName_bjON5_fid1() {
        VariableReference varRef = new VariableReference(new QName("prefix", null));
        assertEquals("$prefix:null", varRef.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_MEGI0() {
        VariableReference varRef = new VariableReference(new QName(" qualifiedName"));
        assertEquals("$ qualifiedName", varRef.toString());
        varRef = new VariableReference(new QName("prefix", "localName"));
        assertEquals("$prefix:localName", varRef.toString());
    }
}