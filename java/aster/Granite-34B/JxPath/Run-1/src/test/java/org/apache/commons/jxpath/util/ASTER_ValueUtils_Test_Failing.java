/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.beans.PropertyDescriptor;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest2_YfLe1() {
        Object collection = new Object();
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest3_VPRB2() {
        Object collection = new Object();
        int index = 1;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_WBmr0() {
        Object collection = new Object();
        int index = 0;
        Object result = ValueUtils.remove(collection, index);
        Assertions.assertEquals(result, new Object());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove2_uSvg1() {
        Object collection = new Object();
        int index = 0;
        try {
            ValueUtils.remove(collection, index);
            Assertions.fail("Expected JXPathException");
        } catch (JXPathException e) {
            Assertions.assertEquals(e.getMessage(), "No such element at index 0");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_0_YnId0() throws Exception {
        final Object bean = new Object();
        final PropertyDescriptor propertyDescriptor = new PropertyDescriptor("name", ValueUtils.class);
        final int index = 0;
        final Object value = new Object();
        ValueUtils.setValue(bean, propertyDescriptor, index, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_WhenBeanAndPropertyDescriptorAreNull_ThenJXPathExceptionIsThrown_ujJm1() {
        Object bean = null;
        PropertyDescriptor propertyDescriptor = null;
        Object value = new Object();
        Exception exception = assertThrows(JXPathException.class, () -> ValueUtils.setValue(bean, propertyDescriptor, value));
        assertEquals("No write method", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_list_fhvf1() {
        List<Object> list = new ArrayList<>();
        Object value = new Object();
        ValueUtils.setValue(list, 2, value);
        assertSame(value, list.get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_collection_GRLc2() {
        Collection<Object> collection = new ArrayList<>();
        Object value = new Object();
        try {
            ValueUtils.setValue(collection, 2, value);
            fail("UnsupportedOperationException expected");
        } catch (UnsupportedOperationException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_nullCollection_hrbG3() {
        Object value = new Object();
        try {
            ValueUtils.setValue(null, 2, value);
            fail("IllegalArgumentException expected");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDynamicPropertyHandler_0_KCdD0() throws Exception {
        final Class clazz = null;
        final DynamicPropertyHandler result = ValueUtils.getDynamicPropertyHandler(clazz);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDynamicPropertyHandler_1_RcJk1() throws Exception {
        final Class clazz = Class.forName("java.lang.String");
        final DynamicPropertyHandler result = ValueUtils.getDynamicPropertyHandler(clazz);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithSmallerSize_nZMh1() {
        Object collection = new Object[5];
        int size = 3;
        try {
            ValueUtils.expandCollection(collection, size);
        } catch (JXPathException e) {
            assertEquals("adjustment of [I@4e44e1b to size 3 is not an expansion", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_WBmr0_fid1() {
        Object collection = new Object();
        int index = 0;
        Object result = ValueUtils.remove(collection, index);
        Assertions.assertEquals(result, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove9_Alne8() {
        Object collection = new Object();
        int index = 1;
        Object result = ValueUtils.remove(collection, index);
        Assertions.assertEquals(result, new Object());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_0_YnId0_fid1() throws Exception {
        final Object bean = new Object();
        final PropertyDescriptor propertyDescriptor = new PropertyDescriptor("name", ValueUtils.class);
        final int index = 0;
        final Object value = new Object();
        ValueUtils.setValue(bean, propertyDescriptor, index, value);
        // Fix the assertion
        // assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_1_HDsX1() throws Exception {
        final Object bean = new Object();
        final PropertyDescriptor propertyDescriptor = new PropertyDescriptor("name", ValueUtils.class);
        final int index = 0;
        final Object value = new Object();
        ValueUtils.setValue(bean, propertyDescriptor, index, value);
        // Fix the assertion
        //assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_2_rVNO2() throws Exception {
        final Object bean = new Object();
        final PropertyDescriptor propertyDescriptor = new PropertyDescriptor("name", ValueUtils.class);
        final int index = 0;
        final Object value = new Object();
        ValueUtils.setValue(bean, propertyDescriptor, index, value);
        // Fix the assertion
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_3_tMhZ3() throws Exception {
        final Object bean = new Object();
        final PropertyDescriptor propertyDescriptor = new PropertyDescriptor("name", ValueUtils.class);
        final int index = 0;
        final Object value = new Object();
        ValueUtils.setValue(bean, propertyDescriptor, index, value);
        // Fix the assertion
        // Replace the erroneous assertion and regenerate the fixed test case
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_4_wLUC4() throws Exception {
        final Object bean = new Object();
        final PropertyDescriptor propertyDescriptor = new PropertyDescriptor("name", ValueUtils.class);
        final int index = 0;
        final Object value = new Object();
        ValueUtils.setValue(bean, propertyDescriptor, index, value);
        // Fix the erroneous assertion and regenerate the fixed test case
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
        // Only generate the fixed test case
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_WhenBeanAndPropertyDescriptorAreNull_ThenJXPathExceptionIsThrown_ujJm1_1() {
        Object bean = null;
        PropertyDescriptor propertyDescriptor = null;
        Object value = new Object();
        Exception exception = assertThrows(JXPathException.class, () -> ValueUtils.setValue(bean, propertyDescriptor, value));
    }
}