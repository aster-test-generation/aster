/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ParentContext_Test_Failing {
    ParentContext parentcontext;
    @Mock
    NamespaceContext namespacecontext;
    @Mock
    NodeTypeTest nodetypetest;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    private NodeTest nodeTest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        SelfContext selfContext = mock(SelfContext.class);
        NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        parentcontext = new ParentContext(namespaceContext, nodeTypeTest);
        when(parentcontext.setPosition(anyInt())).thenCallRealMethod();
        assertTrue(parentcontext.setPosition(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder() throws Exception {
        parentcontext = new ParentContext(namespacecontext, nodetypetest);
        when(namespacecontext.getDocumentOrder()).thenReturn(1);
        assertEquals(1, parentcontext.getDocumentOrder());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCurrentNodePointer() throws Exception {
        parentcontext = new ParentContext(Mockito.mock(NamespaceContext.class), Mockito.mock(NodeTypeTest.class));
        currentNodePointer = Mockito.mock(NodePointer.class);
        Mockito.when(parentcontext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        assertEquals(currentNodePointer, parentcontext.getCurrentNodePointer());
    }
}