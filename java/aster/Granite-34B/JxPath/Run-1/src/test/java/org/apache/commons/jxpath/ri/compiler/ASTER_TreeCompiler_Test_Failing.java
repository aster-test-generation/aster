/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Test_Failing {
    private Step[] toStepArray(final Object[] array) {
        Step[] stepArray = null;
        if (array != null) {
            stepArray = new Step[array.length];
            for (int i = 0;i < stepArray.length;i++) {
                stepArray[i] = (Step) array[i];
            }
        }
        return stepArray;
    }

    private Expression[] toExpressionArray(final Object[] array) {
        Expression[] expressionArray = null;
        if (array != null) {
            expressionArray = new Expression[array.length];
            for (int i = 0;i < expressionArray.length;i++) {
                expressionArray[i] = (Expression) array[i];
            }
        }
        return expressionArray;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqual_1_GYyd0() {
        Object left = new Object();
        Object right = new Object();
        Object expected = new NameAttributeTest((Expression) left, (Expression) right);
        Object actual = new TreeCompiler().equal(left, right);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqual_2_WnZf1() {
        Object left = new Object();
        Object right = new Object();
        Object expected = new CoreOperationEqual((Expression) left, (Expression) right);
        Object actual = new TreeCompiler().equal(left, right);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeNameTest_PbuY0() {
        Object qname = new Object();
        Object expected = new NodeNameTest((QName) qname);
        Object actual = new TreeCompiler().nodeNameTest(qname);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMod_wIvN0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.mod(left, right);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinus_hoyN0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object argument = new Object();
        Object result = treeCompiler.minus(argument);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiply_vdAu0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.multiply(left, right);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiply_dHlB1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.multiply(left, right);
        assertEquals(new CoreOperationMultiply((Expression) left, (Expression) right), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiply_RYgx2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.multiply(left, right);
        assertNotEquals(new Object(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiply_gcoZ3() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.multiply(left, right);
        assertTrue(result instanceof CoreOperationMultiply);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiply_Vgfq4() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.multiply(left, right);
        assertFalse(result instanceof Object);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPath_UtGw0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = new Object[0];
        Object[] steps = new Object[0];
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
        assertEquals(new ExpressionPath((Expression) expression, toExpressionArray(predicates), toStepArray(steps)), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStep_MUaF0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object nodeTest = new Object();
        Object[] predicates = new Object[0];
        Object result = treeCompiler.step(1, nodeTest, predicates);
        assertEquals(new Step(1, (NodeTest) nodeTest, toExpressionArray(predicates)), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void literalTest_SmLt0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.literal("value");
        assertEquals(new Constant("value"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test0_HGOp0() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.notEqual(new Object(), new Object());
        assertEquals(new CoreOperationNotEqual((Expression) new Object(), (Expression) new Object()), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThanOrEqual_epaE0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.lessThanOrEqual(left, right);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinus_HhBv0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object expected = new CoreOperationSubtract((Expression) left, (Expression) right);
        assertEquals(expected, treeCompiler.minus(left, right));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDivide_MjeQ0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.divide(left, right);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDivideWithNullLeft_RYJj2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = null;
        Object right = new Object();
        Object result = treeCompiler.divide(left, right);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDivideWithNullRight_Bgyp3() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = null;
        Object result = treeCompiler.divide(left, right);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_qzEq0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object qName = new Object(); // Initialize qName with appropriate value
        Object result = treeCompiler.variableReference(qName);
        assertNotNull(result);
        assertTrue(result instanceof VariableReference);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReferenceNullInput_BqZa1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object qName = null;
        Object result = treeCompiler.variableReference(qName);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReferenceEmptyInput_Mber2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object qName = new Object(); // Initialize qName with empty value
        Object result = treeCompiler.variableReference(qName);
        assertNotNull(result);
        assertTrue(result instanceof VariableReference);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReferenceInvalidInput_HsCV3() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object qName = new Object(); // Initialize qName with invalid value
        Object result = treeCompiler.variableReference(qName);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPath_ojOn0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        boolean absolute = true;
        Object[] steps = new Object[]{"step1", "step2"};
        Object result = treeCompiler.locationPath(absolute, steps);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThan_fxEi0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.lessThan(left, right);
        assertEquals(new CoreOperationLessThan((Expression) left, (Expression) right), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThanWithNullLeft_Cblj1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = null;
        Object right = new Object();
        Object result = treeCompiler.lessThan(left, right);
        assertEquals(new CoreOperationLessThan((Expression) left, (Expression) right), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThanWithNullRight_POty2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = null;
        Object result = treeCompiler.lessThan(left, right);
        assertEquals(new CoreOperationLessThan((Expression) left, (Expression) right), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThanWithNullLeftAndRight_rOIr3() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = null;
        Object right = null;
        Object result = treeCompiler.lessThan(left, right);
        assertEquals(new CoreOperationLessThan((Expression) left, (Expression) right), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThanOrEqual_BjKU0() {
        TreeCompiler compiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = compiler.greaterThanOrEqual(left, right);
        assertEquals(new CoreOperationGreaterThanOrEqual((Expression) left, (Expression) right), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_LlNd0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object name = new Object();
        Object[] args = new Object[0];
        Object expected = new ExtensionFunction((QName) name, toExpressionArray(args));
        Object actual = treeCompiler.function(name, args);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_qzEq0_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object qName = new Object(); // Initialize qName with appropriate value
        Object result = treeCompiler.variableReference(qName);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_qzEq0_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object qName = new Object(); // Initialize qName with appropriate value
        Object result = treeCompiler.variableReference(qName);
        assertTrue(result instanceof VariableReference);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReferenceEmptyInput_Mber2_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object qName = new Object(); // Initialize qName with empty value
        Object result = treeCompiler.variableReference(qName);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReferenceEmptyInput_Mber2_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object qName = new Object(); // Initialize qName with empty value
        Object result = treeCompiler.variableReference(qName);
        assertTrue(result instanceof VariableReference);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_FUPv4_FXoX0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[4];
        arguments[0] = new Object();
        arguments[1] = new Object();
        arguments[2] = new Object();
        arguments[3] = new Object();
        Object result = treeCompiler.sum(arguments);
        Object expected = new Object();
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_LOCE7_rbTg0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[7];
        arguments[0] = new Object();
        arguments[1] = new Object();
        arguments[2] = new Object();
        arguments[3] = new Object();
        arguments[4] = new Object();
        arguments[5] = new Object();
        arguments[6] = new Object();
        Object result = treeCompiler.processingInstructionTest(new String());
        Object expected = new Object();
        assertEquals(expected, result);
    }
}