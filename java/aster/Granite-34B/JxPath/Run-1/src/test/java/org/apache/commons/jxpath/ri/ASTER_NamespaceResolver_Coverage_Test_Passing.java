/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_NamespaceResolver_Coverage_Test_Passing {
    NamespaceResolver resolver;
    NamespaceResolver namespaceResolver = new NamespaceResolver();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_atJX0() {
        NamespaceResolver resolver = new NamespaceResolver();
        String prefix = resolver.getPrefix("namespaceURI");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_SBGe1() {
        NamespaceResolver resolver = new NamespaceResolver(new NamespaceResolver());
        String prefix = resolver.getPrefix("namespaceURI");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithSealedNamespaceResolver_vfBy0() {
        namespaceResolver.seal();
        try {
            namespaceResolver.registerNamespace("prefix", "namespaceURI");
        } catch (IllegalStateException e) {
            assertTrue(true);
            return;
        }
        assertTrue(false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_rvRm1() {
        namespaceResolver.registerNamespace("prefix", "namespaceURI");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_MqFG0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        Pointer pointer = namespaceResolver.getNamespaceContextPointer();
        assertEquals(null, pointer);
    }
}