/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeContext_Test_Failing {
    AttributeContext attributecontext;
    NamespaceContext namespacecontext;
    SelfContext selfcontext;
    NodeTypeTest nodetypetest;
    private NodeIterator iterator;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    private static QName WILDCARD = new QName(null, "*");
    private NodeTest nodeTest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithPositivePosition_jNbW2() {
        AttributeContext attributeContext = new AttributeContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        attributeContext.setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCurrentNodePointer_NXay0() throws Exception {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(0));
        SelfContext selfContext = new SelfContext(parentContext, new NodeTypeTest(0));
        attributecontext = new AttributeContext(selfContext, new NodeTypeTest(0));
        currentNodePointer = mock(NodePointer.class);
        when(currentNodePointer.getName()).thenReturn(new QName(""));
        when(currentNodePointer.getNamespaceURI()).thenReturn("");
        when(currentNodePointer.getValuePointer()).thenReturn(mock(NodePointer.class));
        when(currentNodePointer.getImmediateParentPointer()).thenReturn(mock(NodePointer.class));
        when(currentNodePointer.getBaseValue()).thenReturn(new Object());
        when(currentNodePointer.getIndex()).thenReturn(0);
        when(currentNodePointer.getNamespaceResolver()).thenReturn(new NamespaceResolver());
        when(currentNodePointer.getParent()).thenReturn(mock(NodePointer.class));
        when(currentNodePointer.getValue()).thenReturn(new Object());
        when(currentNodePointer.getImmediateValuePointer()).thenReturn(mock(NodePointer.class));
        when(currentNodePointer.getNodeSetByKey(any(), any(), any())).thenReturn(mock(NodeSet.class));
        when(currentNodePointer.getPointerByID(any(), any())).thenReturn(mock(Pointer.class));
        when(currentNodePointer.getNode()).thenReturn(new Object());
        when(currentNodePointer.getPointerByKey(any(), any(), any())).thenReturn(mock(Pointer.class));
        when(currentNodePointer.getLocale()).thenReturn(new Locale(""));
        when(currentNodePointer.getNamespaceURI(any())).thenReturn("");
        NodePointer returnedNodePointer = attributecontext.getCurrentNodePointer();
        assertEquals(currentNodePointer, returnedNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCurrentNodePointerTest_VNdR0_tvFj0() {
        AttributeContext attributeContext = new AttributeContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        NodePointer expected = mock(NodePointer.class);
        NodePointer actual = attributeContext.getCurrentNodePointer();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCurrentNodePointer_NXay0_fid2() throws Exception {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(0));
        SelfContext selfContext = new SelfContext(parentContext, new NodeTypeTest(0));
        attributecontext = new AttributeContext(selfContext, new NodeTypeTest(0));
        currentNodePointer = mock(NodePointer.class);
        when(currentNodePointer.getName()).thenReturn(new QName(""));
        when(currentNodePointer.getNamespaceURI()).thenReturn("");
        when(currentNodePointer.getValuePointer()).thenReturn(mock(NodePointer.class));
        when(currentNodePointer.getImmediateParentPointer()).thenReturn(mock(NodePointer.class));
        when(currentNodePointer.getBaseValue()).thenReturn(new Object());
        when(currentNodePointer.getIndex()).thenReturn(0);
        when(currentNodePointer.getNamespaceResolver()).thenReturn(new NamespaceResolver());
        when(currentNodePointer.getParent()).thenReturn(mock(NodePointer.class));
        when(currentNodePointer.getValue()).thenReturn(new Object());
        when(currentNodePointer.getImmediateValuePointer()).thenReturn(mock(NodePointer.class));
        when(currentNodePointer.getNodeSetByKey(any(), any(), any())).thenReturn(mock(NodeSet.class));
        when(currentNodePointer.getPointerByID(any(), any())).thenReturn(mock(Pointer.class));
        when(currentNodePointer.getNode()).thenReturn(new Object());
        when(currentNodePointer.getPointerByKey(any(), any(), any())).thenReturn(mock(Pointer.class));
        when(currentNodePointer.getLocale()).thenReturn(new Locale(""));
        when(currentNodePointer.getNamespaceURI(any())).thenReturn("");
        NodePointer returnedNodePointer = attributecontext.getCurrentNodePointer();
        assertNull(currentNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCurrentNodePointerTest_VNdR0_tvFj0_fid2() {
        AttributeContext attributeContext = new AttributeContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        NodePointer expected = mock(NodePointer.class);
        NodePointer actual = attributeContext.getCurrentNodePointer();
        assertNull(expected);
    }
}