/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_InfoSetUtil_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithBooleanObject_hlNv1() {
        Object object = true;
        assertEquals(1, InfoSetUtil.number(object).intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithStringObject_oIXX2() {
        Object object = "1.2";
        assertEquals(1.2, InfoSetUtil.number(object).doubleValue(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithOtherObject_DCVp5() {
        Object object = new Object();
        assertEquals(0, InfoSetUtil.number(object).intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithNumber_OlHs0() {
        Object object = new Double(1.0);
        double expected = 1.0;
        double actual = InfoSetUtil.doubleValue(object);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithBooleanTrue_HNLQ1() {
        Object object = new Boolean(true);
        double expected = 0.0;
        double actual = InfoSetUtil.doubleValue(object);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithBooleanFalse_Llyr2() {
        Object object = new Boolean(false);
        double expected = 1.0;
        double actual = InfoSetUtil.doubleValue(object);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithStringEmpty_KXkW3() {
        Object object = new String("");
        double expected = 0.0;
        double actual = InfoSetUtil.doubleValue(object);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithStringValidNumber_WmFV4() {
        Object object = new String("1.0");
        double expected = 1.0;
        double actual = InfoSetUtil.doubleValue(object);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithStringInvalidNumber_wKPv5() {
        Object object = new String("abc");
        double expected = Double.NaN;
        double actual = InfoSetUtil.doubleValue(object);
        assertTrue(Double.isNaN(actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithNull_bNrh8() {
        Object object = null;
        double expected = 0.0;
        double actual = InfoSetUtil.doubleValue(object);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueForNumber_biXP0() {
        Number number = 10;
        boolean result = InfoSetUtil.booleanValue(number);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueForBoolean_yBSD1() {
        Boolean bool = true;
        boolean result = InfoSetUtil.booleanValue(bool);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueForString_sIwV3() {
        String str = "Hello";
        boolean result = InfoSetUtil.booleanValue(str);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueForNull_HaYo5() {
        Object obj = null;
        boolean result = InfoSetUtil.booleanValue(obj);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueForZero_UQuI6() {
        Number number = 0;
        boolean result = InfoSetUtil.booleanValue(number);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueForNegativeZero_OgcF7() {
        Number number = -0;
        boolean result = InfoSetUtil.booleanValue(number);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueForNaN_zfbB8() {
        Number number = Double.NaN;
        boolean result = InfoSetUtil.booleanValue(number);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueForEmptyString_Hhlh11() {
        String str = "";
        boolean result = InfoSetUtil.booleanValue(str);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithStringObject_ERbd0() {
        Object object = "test";
        String expected = "test";
        String actual = InfoSetUtil.stringValue(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithNumberObject_laIG1() {
        Object object = 123;
        String expected = "123";
        String actual = InfoSetUtil.stringValue(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithBooleanObject_ZViH2() {
        Object object = true;
        String expected = "true";
        String actual = InfoSetUtil.stringValue(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithNullObject_YYFP3() {
        Object object = null;
        String expected = "";
        String actual = InfoSetUtil.stringValue(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithUnsupportedObject2_REXp7() {
        Object object = new Object();
        String expected = "object";
        String actual = InfoSetUtil.stringValue(object);
    }
}