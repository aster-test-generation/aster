/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.beans.PropertyDescriptor;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathBasicBeanInfo_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithNoPropertyDescriptors_Lrdk3_2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, true);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertEquals(0, propertyDescriptors.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithIntrospectionException_griO4_2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Thread.State.class, true);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertEquals(0, propertyDescriptors.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor_zotY0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class);
        PropertyDescriptor result = jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor2_fnNO1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class, boolean.class);
        PropertyDescriptor result = jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor3_JneT2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class, Class.class);
        PropertyDescriptor result = jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor4_VgSY3() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class, boolean.class);
        jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        Assertions.assertNotNull(jXPathBasicBeanInfo.getPropertyDescriptor("propertyName"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor5_sJRr4() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class);
        jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        Assertions.assertNotNull(jXPathBasicBeanInfo.getPropertyDescriptor("propertyName"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor6_fLDL5() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class, Class.class);
        jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        Assertions.assertNotNull(jXPathBasicBeanInfo.getPropertyDescriptor("propertyName"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicWhenDynamicPropertyHandlerClassisNotNull_aOkX1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, true);
        boolean actual = jXPathBasicBeanInfo.isDynamic();
        boolean expected = true;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithNoPropertyDescriptors_Lrdk3() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, true);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
        assertEquals(0, propertyDescriptors.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithIntrospectionException_griO4() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Thread.State.class, true);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
        assertEquals(0, propertyDescriptors.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor7_NQAI6_fid2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class, boolean.class);
        jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        Assertions.assertNotNull(jXPathBasicBeanInfo.getPropertyDescriptor("propertyName"), "ASTER_JXPathBasicBeanInfo_Fixed_Test.testGetPropertyDescriptor7_NQAI6_fid2:364 expected: not <null>");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor8_krQx7_fid2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class);
        Assertions.assertNotNull(jXPathBasicBeanInfo.getPropertyDescriptor("propertyName"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor9_quZt8_fid2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class, Class.class);
        Assertions.assertNotNull(jXPathBasicBeanInfo.getPropertyDescriptor("propertyName"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor11_GvAF10_fid2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class);
        PropertyDescriptor pd = jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        Assertions.assertNotNull(pd);
        Assertions.assertEquals("propertyName", pd.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor13_BjFa12_fid2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class, boolean.class);
        jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        Assertions.assertNotNull(jXPathBasicBeanInfo.getPropertyDescriptor("propertyName"), "ASTER_JXPathBasicBeanInfo_Fixed_Test.testGetPropertyDescriptor13_BjFa12_fid2:406 expected: not <null>");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor7_NQAI6_fid3() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class, boolean.class);
        jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        Assertions.assertNotNull(jXPathBasicBeanInfo.getPropertyDescriptor("propertyName"), "ASTER_JXPathBasicBeanInfo_Fixed_Test.testGetPropertyDescriptor7_NQAI6_fid3:364 expected: not <null>");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor13_BjFa12_fid3() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class, boolean.class);
        jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        Assertions.assertNotNull(jXPathBasicBeanInfo.getPropertyDescriptor("propertyName"), "ASTER_JXPathBasicBeanInfo_Fixed_Test.testGetPropertyDescriptor13_BjFa12_fid3:406 expected: not <null>");
    }
}