/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicVariables_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariableWithEmptyVars_RPQV1() {
        BasicVariables basicVariables = new BasicVariables();
        assertFalse(basicVariables.isDeclaredVariable("x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeclareVariable_UyvE0_1() {
        BasicVariables basicVariables = new BasicVariables();
        basicVariables.declareVariable("name", "John");
        basicVariables.declareVariable("age", 25);
        basicVariables.declareVariable("isStudent", true);
        assertEquals("John", basicVariables.getVariable("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeclareVariable_UyvE0_2() {
        BasicVariables basicVariables = new BasicVariables();
        basicVariables.declareVariable("name", "John");
        basicVariables.declareVariable("age", 25);
        basicVariables.declareVariable("isStudent", true);
        assertEquals(25, basicVariables.getVariable("age"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeclareVariable_UyvE0_3() {
        BasicVariables basicVariables = new BasicVariables();
        basicVariables.declareVariable("name", "John");
        basicVariables.declareVariable("age", 25);
        basicVariables.declareVariable("isStudent", true);
        assertEquals(true, basicVariables.getVariable("isStudent"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUndeclareVariable_SksX0() {
        BasicVariables basicVariables = new BasicVariables();
        basicVariables.undeclareVariable("varName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUndeclareVariableWithCoverage_SJyB1() {
        BasicVariables basicVariables = new BasicVariables();
        basicVariables.undeclareVariable(null);
        basicVariables.undeclareVariable("");
        basicVariables.undeclareVariable(" ");
        basicVariables.undeclareVariable("var1");
        basicVariables.undeclareVariable("var2");
        basicVariables.undeclareVariable("var3");
        basicVariables.undeclareVariable("var4");
        basicVariables.undeclareVariable("var5");
        basicVariables.undeclareVariable("var6");
        basicVariables.undeclareVariable("var7");
        basicVariables.undeclareVariable("var8");
        basicVariables.undeclareVariable("var9");
        basicVariables.undeclareVariable("var10");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_HfKo0_jImR0() {
        BasicVariables basicVariables = new BasicVariables();
        String expected = "{}";
        String actual = basicVariables.toString();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeclareVariable_UyvE0() {
        BasicVariables basicVariables = new BasicVariables();
        basicVariables.declareVariable("name", "John");
        basicVariables.declareVariable("age", 25);
        basicVariables.declareVariable("isStudent", true);
        assertEquals("John", basicVariables.getVariable("name"));
        assertEquals(25, basicVariables.getVariable("age"));
        assertEquals(true, basicVariables.getVariable("isStudent"));
    }
}