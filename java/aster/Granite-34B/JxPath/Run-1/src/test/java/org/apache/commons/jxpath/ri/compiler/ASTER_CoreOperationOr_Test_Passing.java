/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationOr_Test_Passing {
    CoreOperationOr coreoperationor;
    EvalContext context;
    Expression[] args;
    Expression arg1;
    Expression arg2;
    private CoreOperationOr or;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_kmaD0() {
        CoreOperationOr or = new CoreOperationOr(new Expression[0]);
        assertEquals("or", or.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSymmetric_gYOR0() {
        CoreOperationOr coreOperationOr = new CoreOperationOr(new Expression[0]);
        boolean result = coreOperationOr.isSymmetric();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrecedence_3_MXpK3_fid1() {
        final Expression[] args = new Expression[0];
        CoreOperationOr target = new CoreOperationOr(args);
        int actual = target.getPrecedence();
    }
}