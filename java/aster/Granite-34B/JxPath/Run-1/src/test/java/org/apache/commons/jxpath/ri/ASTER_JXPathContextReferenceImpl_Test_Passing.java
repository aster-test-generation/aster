/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.NodePointerFactory;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathContextReferenceImpl_Test_Passing {
    JXPathContextReferenceImpl jxpathcontextreferenceimpl;
    JXPathContext jxpathcontext;
    NodePointer nodepointer;
    Pointer pointer;
    String xpath;
    Object value;
    Expression expression;
    EvalContext evalcontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAll_nbAU0() {
        JXPathContextReferenceImpl jXPathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String xpath = "test";
        jXPathContextReferenceImpl.removeAll(xpath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetValue() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        String xpath = "xpath";
        Expression expr = mock(Expression.class);
        when(expr.computeValue(any())).thenReturn(null);
        Object result = jxpathcontextreferenceimpl.getValue(xpath, expr);
        verify(expr, times(1)).computeValue(any());
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer_SiLp1() {
        final String qualifiedName = "qualifiedName";
        final VariablePointer variablePointer = new VariablePointer(new QName(qualifiedName));
        assertEquals(new QName(qualifiedName), variablePointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getPrefix_NamespaceURI_ReturnsCorrectPrefix_LfGp0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String prefix = context.getPrefix("http://www.example.com");
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getPrefix_NamespaceURIWithNoMatch_ReturnsNull_NJJr1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String prefix = context.getPrefix("http://www.example.com/no-match");
        assertEquals(null, prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddNodePointerFactory() throws Exception {
        jxpathcontextreferenceimpl = mock(JXPathContextReferenceImpl.class);
        NodePointerFactory factory = mock(NodePointerFactory.class);
        jxpathcontextreferenceimpl.addNodePointerFactory(factory);
        verify(jxpathcontextreferenceimpl, times(1)).addNodePointerFactory(factory);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContextPointer_xoYZ0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        Pointer result = context.getContextPointer();
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompiler_kvKi0() {
        JXPathContextReferenceImpl jxPathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        Compiler compiler = jxPathContextReferenceImpl.getCompiler();
        assertNotNull(compiler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_Bavl0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        context.registerNamespace("prefix", "namespaceURI");
        assertEquals("namespaceURI", context.getNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithNullPrefix_kUhw1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        context.registerNamespace(null, "namespaceURI");
        assertEquals("namespaceURI", context.getNamespaceURI(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithEmptyPrefix_LgPr2() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        context.registerNamespace("", "namespaceURI");
        assertEquals("namespaceURI", context.getNamespaceURI(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNamespaceURI_bEuP0() {
        JXPathContextReferenceImpl jXPathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String prefix = "prefix";
        String namespaceURI = jXPathContextReferenceImpl.getNamespaceURI(prefix);
        assertNull(namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceResolver() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        NamespaceResolver resolver = jxpathcontextreferenceimpl.getNamespaceResolver();
        assertNotNull(resolver);
    }
}