/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ServletContextHandler_Test_Failing {
    private static int DEFAULT_PROPERTY_COUNT = 16;
    ServletContextHandler servletcontexthandler;
    @Mock
    ServletContext servletContext;
    ServletContext mockServletContext;
    Object mockContext;
    String mockProperty;
    Object mockValue;
    @Mock
    HttpSessionAndServletContext httpSessionAndServletContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_JEAm0() {
        ServletContextHandler handler = new ServletContextHandler();
        Object context = new Object();
        String property = "property";
        Object result = handler.getProperty(context, property);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCoverage_lZwy2() {
        ServletContextHandler handler = new ServletContextHandler();
        Object context = new Object();
        String property = "property";
        handler.getProperty(context, property);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetProperty() throws Exception {
        servletcontexthandler = new ServletContextHandler();
        mockServletContext = mock(ServletContext.class);
        mockContext = mock(Object.class);
        mockProperty = "mockProperty";
        mockValue = new Object();
        when(mockContext.toString()).thenReturn("mockContext");
        servletcontexthandler.setProperty(mockContext, mockProperty, mockValue);
        verify(mockServletContext).setAttribute(mockProperty, mockValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperty_QaAe0() {
        ServletContextHandler handler = new ServletContextHandler();
        Object context = new Object();
        String property = "property";
        Object value = new Object();
        handler.setProperty(context, property, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyCoverage_hXFg1() {
        ServletContextHandler handler = new ServletContextHandler();
        Object context = new Object();
        String property = "property";
        Object value = new Object();
        handler.setProperty(context, property, value);
        handler.setProperty(null, property, value);
        handler.setProperty(context, null, value);
        handler.setProperty(context, property, null);
        handler.setProperty(null, null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcollectPropertyNames() throws Exception {
        servletcontexthandler = new ServletContextHandler();
        Mockito.when(httpSessionAndServletContext.getServletContext()).thenReturn(servletContext);
        HashSet<String> set = new HashSet<>();
        servletcontexthandler.collectPropertyNames(set, httpSessionAndServletContext);
        Mockito.verify(servletContext).getAttributeNames();
        Mockito.verify(httpSessionAndServletContext).getServletContext();
        Assertions.assertTrue(set.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithNullBean_cIJe2() {
        ServletContextHandler handler = new ServletContextHandler();
        HashSet<String> set = new HashSet<>();
        Object bean = null;
        handler.collectPropertyNames(set, bean);
        assertEquals(true, set.size() == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithEmptySet_SmQR1_wHpP0() {
        ServletContextHandler handler = new ServletContextHandler();
        HashSet<String> set = new HashSet<>();
        ServletContext servletContext = mock(ServletContext.class);
        Object bean = servletContext;
        handler.collectPropertyNames(set, bean);
        assertEquals(true, set.size() == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetProperty_fid1() throws Exception {
        servletcontexthandler = new ServletContextHandler();
        mockServletContext = mock(ServletContext.class);
        mockContext = mock(ServletContext.class);
        mockProperty = "mockProperty";
        mockValue = new Object();
        when(mockContext.toString()).thenReturn("mockContext");
        servletcontexthandler.setProperty(mockContext, mockProperty, mockValue);
        verify(mockServletContext).setAttribute(mockProperty, mockValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcollectPropertyNames_fid1() throws Exception {
        servletcontexthandler = new ServletContextHandler();
        Mockito.when(httpSessionAndServletContext.getServletContext()).thenReturn(servletContext);
        HashSet<String> set = new HashSet<>();
        servletcontexthandler.collectPropertyNames(set, httpSessionAndServletContext);
        Mockito.verify(servletContext).getAttributeNames();
        Mockito.verify(httpSessionAndServletContext).getServletContext();
        Assertions.assertTrue(set.size() > 2);
    }
}