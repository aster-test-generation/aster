/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

public class Aster_VariablePointer_Coverage_Test_Failing {
    VariablePointer variablepointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithValueNull_xSsq1() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        when(pointer.getBaseValue()).thenReturn(null);
        assertFalse(pointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_yiOw0() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        NodePointer nodePointer = pointer.namespacePointer("name");
        Assertions.assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashcode1_OuhE0() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        int actual = variablePointer.hashCode();
        int expected = (true ? System.identityHashCode(new KeywordVariables("keyword", new Object())) : 0) + new QName("prefix", "localName").hashCode() + 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashcode2_Dccu1() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        int actual = variablePointer.hashCode();
        int expected = (false ? System.identityHashCode(new KeywordVariables("keyword", new Object())) : 0) + new QName("prefix", "localName").hashCode() + 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashcode3_Mymi2() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        int actual = variablePointer.hashCode();
        int expected = (true ? System.identityHashCode(new KeywordVariables("keyword", new Object())) : 0) + new QName("prefix", "localName").hashCode() + 1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashcode4_Cstd3() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        int actual = variablePointer.hashCode();
        int expected = (false ? System.identityHashCode(new KeywordVariables("keyword", new Object())) : 0) + new QName("prefix", "localName").hashCode() + 1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_setValue_0_GTip0() throws Exception {
        final KeywordVariables variables = new KeywordVariables("keyword", new Object());
        final VariablePointer variablePointer = new VariablePointer(variables, new QName("prefix", "localName"));
        variablePointer.setValue(new Object());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_setValue_1_XoXc1() throws Exception {
        final KeywordVariables variables = new KeywordVariables("keyword", new Object());
        final VariablePointer variablePointer = new VariablePointer(variables, new QName("prefix", "localName"));
        variablePointer.setValue(new Object());
        assertEquals(null, variablePointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove1_ypEz0() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("prefix", "localName"));
        variablePointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild1_tHXt0_oDkJ0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        Object value = new Object();
        VariablePointer pointer = new VariablePointer(new QName("name"));
        NodePointer result = pointer.createChild(context, new QName("name"), 1, value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild2_scvv1_WMIr0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        Object value = new Object();
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        NodePointer result = pointer.createChild(context, new QName("name"), 1, value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf2_OaLL1_fid1() {
        VariablePointer pointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        boolean actual = pointer.isLeaf();
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLengthTest2_jAbs1_fid1() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        int actual = variablePointer.getLength();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_JTQd1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer pointer = new VariablePointer(variables, new QName("name"));
        Object value = pointer.getBaseValue();
        assertNotEquals(value, variables.getVariable("name1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_equals_1_KvRZ1_fid1() throws Exception {
        VariablePointer fixture = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        VariablePointer other = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        boolean result = fixture.equals(other);
        assertEquals(true, result);
    }
}