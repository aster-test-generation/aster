/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespacePointer_Test_Passing {
    NamespacePointer namespacepointer;
    private String prefix;
    DOMNodePointer parent;
    String namespaceURI;
    Object value;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        parent = mock(DOMNodePointer.class);
        prefix = "prefix";
        namespaceURI = "namespaceURI";
        value = new Object();
        namespacepointer = new NamespacePointer(parent, prefix, namespaceURI);
        Assertions.assertThrows(UnsupportedOperationException.class, () -> {
            namespacepointer.setValue(value);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        String prefix = "prefix";
        String namespaceURI = "namespaceURI";
        namespacepointer = new NamespacePointer(parent, prefix, namespaceURI);
        boolean result = namespacepointer.isCollection();
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        String prefix = "prefix";
        String namespaceURI = "namespaceURI";
        namespacepointer = new NamespacePointer(parent, prefix, namespaceURI);
        assertEquals(namespacepointer.getNamespaceURI(), namespacepointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        prefix = "prefix";
        parent = mock(DOMNodePointer.class);
        namespaceURI = "namespaceURI";
        namespacepointer = new NamespacePointer(parent, prefix, namespaceURI);
        when(parent.getName()).thenReturn(new QName("name"));
        assertEquals(new QName(prefix), namespacepointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() throws Exception {
        prefix = "prefix";
        DOMNodePointer parent = mock(DOMNodePointer.class);
        namespacepointer = new NamespacePointer(parent, prefix);
        when(parent.asPath()).thenReturn("parentPath");
        String expected = "parentPath/namespace::" + prefix;
        String actual = namespacepointer.asPath();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithoutParent_pqqG1() {
        NamespacePointer namespacePointer = new NamespacePointer(null, "prefix");
        assertEquals("namespace::prefix", namespacePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithoutParentAndNamespaceURI_RDWK3() {
        NamespacePointer namespacePointer = new NamespacePointer(null, "prefix", "namespaceURI");
        assertEquals("namespace::prefix", namespacePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        String prefix = "prefix";
        namespacepointer = new NamespacePointer(parent, prefix);
        int length = namespacepointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer_GGDa2() {
        VariablePointer parent = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        NamespacePointer pointer = new NamespacePointer(parent, "prefix");
        assertEquals(1, pointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer2_saXf3() {
        VariablePointer parent = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        NamespacePointer pointer = new NamespacePointer(parent, "prefix", "namespaceURI");
        assertEquals(1, pointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        String prefix = "prefix";
        namespacepointer = new NamespacePointer(parent, prefix);
        assertTrue(namespacepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_MAHN0_dpLw0() {
        NodePointer nodePointer1 = mock(NodePointer.class);
        NodePointer nodePointer2 = mock(NodePointer.class);
        int expected = 0;
        int actual = nodePointer1.compareChildNodePointers(nodePointer1, nodePointer2);
        assertEquals(expected, actual);
    }
}