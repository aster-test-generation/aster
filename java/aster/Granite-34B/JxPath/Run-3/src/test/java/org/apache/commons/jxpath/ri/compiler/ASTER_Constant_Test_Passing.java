/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Constant_Test_Passing {
    private Object value;
    Constant constant;
    private EvalContext context;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_Npuy0_1() throws Exception {
        Constant constantString = new Constant("string");
        Constant constantNumber = new Constant(1);
        boolean actual1 = constantString.isContextDependent();
        boolean expected1 = false;
        boolean actual2 = constantNumber.isContextDependent();
        boolean expected2 = false;
        assertEquals(expected1, actual1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_Npuy0_2() throws Exception {
        Constant constantString = new Constant("string");
        Constant constantNumber = new Constant(1);
        boolean actual1 = constantString.isContextDependent();
        boolean expected1 = false;
        boolean actual2 = constantNumber.isContextDependent();
        boolean expected2 = false;
        assertEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentWithStringParameter_IwuJ0() throws Exception {
        Constant constant = new Constant("test");
        boolean result = constant.computeContextDependent();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentWithNumberParameter_gwad1() throws Exception {
        Constant constant = new Constant(10);
        boolean result = constant.computeContextDependent();
    }
}