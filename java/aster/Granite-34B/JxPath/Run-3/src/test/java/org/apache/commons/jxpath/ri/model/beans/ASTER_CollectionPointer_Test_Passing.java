/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointer_Test_Passing {
    CollectionPointer collectionpointer;
    private Object collection;
    @Mock
    DOMNodePointer parent;
    @Mock
    Locale locale;
    private NodePointer valuePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        collectionpointer = new CollectionPointer(collection, Locale.getDefault());
        Object value = new Object();
        collectionpointer.setValue(value);
        verify(collectionpointer, times(1)).setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        collection = new Object();
        collectionpointer = new CollectionPointer(collection, Locale.getDefault());
        int expected = System.identityHashCode(collection);
        int actual = collectionpointer.hashCode();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_JcCy0() throws Exception {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        boolean actual = collectionPointer.isCollection();
        boolean expected = true;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_MmkP0() throws Exception {
        Object collection = new Object();
        Locale locale = new Locale("en", "US");
        CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        assertEquals(System.identityHashCode(collection) + 0, collectionPointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        collectionpointer = new CollectionPointer(new Object(), new Locale(""));
        assertEquals(null, collectionpointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectionPointer_XjCB0_2() throws Exception {
        Object collection = new Object();
        Locale locale = new Locale("en");
        CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        assertEquals(locale, collectionPointer.getLocale());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_tfqK2() throws Exception {
        Object collection = new Object();
        Locale locale = new Locale("en");
        CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        Object immediateNode = collectionPointer.getImmediateNode();
        assertEquals(ValueUtils.getValue(collection), immediateNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_GqgC0() throws Exception {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        QName qName = collectionPointer.getName();
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        collectionpointer = new CollectionPointer(new Object(), new Locale(""));
        assertEquals(0, collectionpointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        collectionpointer = new CollectionPointer(new Object(), new Locale("en"));
        Object value = collectionpointer.getNode();
        boolean actual = collectionpointer.isLeaf();
        boolean expected = value == null || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator() throws Exception {
        collectionpointer = new CollectionPointer(new Object(), new Locale(""));
        NodeIterator nodeIterator = mock(NodeIterator.class);
        when(collectionpointer.getValuePointer().namespaceIterator()).thenReturn(nodeIterator);
        assertEquals(nodeIterator, collectionpointer.namespaceIterator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLength_without_baseValue_return_0_Qtra1() throws Exception {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        int result = collectionPointer.getLength();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals() throws Exception {
        collectionpointer = new CollectionPointer(collection, new Locale(""));
        Object object = new Object();
        boolean expected = false;
        boolean actual = collectionpointer.equals(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenNodeIsAtomic_kqks1() throws Exception {
        Object atomicValue = new Object();
        CollectionPointer collectionPointer = new CollectionPointer(atomicValue, null);
        assert collectionPointer.isLeaf();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenNodeIsNotAtomic_Foql2() throws Exception {
        Object nonAtomicValue = new Object();
        CollectionPointer collectionPointer = new CollectionPointer(nonAtomicValue, null);
        assert !collectionPointer.isLeaf();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetValuePointer() throws Exception {
        collectionpointer = new CollectionPointer(new Object(), new Locale(""));
        valuePointer = mock(NodePointer.class);
        when(valuePointer.getImmediateNode()).thenReturn(new Object());
        when(valuePointer.getName()).thenReturn(new QName(""));
        when(valuePointer.newChildNodePointer(any(), any(), any())).thenReturn(valuePointer);
        NodePointer result = collectionpointer.getValuePointer();
        assertEquals(valuePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeWithNullTest_JIkb0() throws Exception {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        collectionPointer.testNode(null);
        assertEquals(true, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeWithNodeTypeTest_jUyD1() throws Exception {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        collectionPointer.testNode(nodeTypeTest);
        assertEquals(true, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisContainer() throws Exception {
        collectionpointer = new CollectionPointer(parent, collection);
        when(parent.isContainer()).thenReturn(true);
        assertTrue(collectionpointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer() throws Exception {
        collectionpointer = new CollectionPointer(new Object(), new Locale(""));
        NodePointer nodepointer = collectionpointer.namespacePointer("namespace");
        assertEquals(null, nodepointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_veWF0() throws Exception {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        NodeIterator nodeIterator = collectionPointer.attributeIterator(new QName(""));
        assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_MPGp0() throws Exception {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        boolean result = collectionPointer.isContainer();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        collection = new Object();
        collectionpointer = new CollectionPointer(collection, Locale.getDefault());
        assertEquals(collection, collectionpointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_0_zJtl0() throws Exception {
        CollectionPointer collectionPointer0 = new CollectionPointer(new Object(), new Locale("en"));
        String namespace0 = "namespace0";
        NodePointer nodePointer0 = collectionPointer0.namespacePointer(namespace0);
        assertNull(nodePointer0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_1_Dzvm1() throws Exception {
        CollectionPointer collectionPointer0 = new CollectionPointer(new Object(), new Locale("en"));
        collectionPointer0.setIndex(0);
        String namespace0 = "namespace0";
        NodePointer nodePointer0 = collectionPointer0.namespacePointer(namespace0);
        assertNull(nodePointer0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getBaseValue_KXsT0() throws Exception {
        Object expected = new Object();
        Object actual = new CollectionPointer(new Object(), new Locale("")).getBaseValue();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_EgKZ0() throws Exception {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        String path = collectionPointer.asPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithIndex_OSud1() throws Exception {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        collectionPointer.setIndex(1);
        String path = collectionPointer.asPath();
    }
}