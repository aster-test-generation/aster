/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockServletContext;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ServletRequestAndContext_Test_Passing {
    private ServletRequest request;
    private ServletContext servletContext;
    private HttpServletRequest httpServletRequest;
    private HttpSession httpSession;
    private ServletRequestAndContext servletRequestAndContext;
    private ServletContext context;
    private ServletRequestAndContext servletrequestandcontext;
    @Mock
    private ServletRequest requestMock;
    @Mock
    private ServletContext contextMock;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletRequest() throws Exception {
        request = requestMock;
        context = contextMock;
        servletrequestandcontext = new ServletRequestAndContext(request, context);
        // setup expectations
        when(requestMock.getContentType()).thenReturn("text/html");
        // call the method to test and assert the result
        ServletRequest result = servletrequestandcontext.getServletRequest();
        assertEquals(requestMock, result);
        verify(requestMock, times(1)).getContentType();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSessionTest2_cwKq1() throws Exception {
        ServletRequest request = new MockHttpServletRequest();
        ServletContext context = new MockServletContext();
        ServletRequestAndContext servletRequestAndContext = new ServletRequestAndContext(request, context);
        HttpSession session = servletRequestAndContext.getSession();
        assertEquals(null, session);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getServletRequestTest_NullRequest_YMdN1() throws Exception {
        ServletRequest request = null;
        ServletContext context = new MockServletContext();
        ServletRequestAndContext servletRequestAndContext = new ServletRequestAndContext(request, context);
        ServletRequest result = servletRequestAndContext.getServletRequest();
        Assertions.assertEquals(request, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getServletRequestTest_NullRequestAndContext_KOQa3() throws Exception {
        ServletRequest request = null;
        ServletContext context = null;
        ServletRequestAndContext servletRequestAndContext = new ServletRequestAndContext(request, context);
        ServletRequest result = servletRequestAndContext.getServletRequest();
        Assertions.assertEquals(request, result);
    }
}