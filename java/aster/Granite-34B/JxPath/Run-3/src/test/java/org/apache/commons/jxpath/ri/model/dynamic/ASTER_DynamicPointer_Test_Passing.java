/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPointer_Test_Passing {
    DynamicPointer dynamicpointer;
    @Mock
    DOMNodePointer parent;
    @Mock
    QName name;
    @Mock
    Object bean;
    @Mock
    PageContextHandler handler;
    @Mock
    Locale locale;
    private final String prefix = "prefix";
    private final String localName = "localName";
    private final String qualifiedName = prefix + ":" + localName;
    private final String nameString = "nameString";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        dynamicpointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        boolean expected = false;
        boolean actual = dynamicpointer.isCollection();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        bean = new Object();
        name = new QName("name");
        dynamicpointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.getDefault());
        int expected = System.identityHashCode(bean) + (name == null ? 0 : name.hashCode());
        int actual = dynamicpointer.hashCode();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicPropertyDeclarationSupported_kVkh0() throws Exception {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        assertTrue(dynamicPointer.isDynamicPropertyDeclarationSupported());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_SbWt0() throws Exception {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        boolean result = dynamicPointer.isCollection();
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        name = new QName("name");
        dynamicpointer = new DynamicPointer(name, new Object(), new PageContextHandler(), new Locale("en"));
        assertEquals(name, dynamicpointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_xGmv0() throws Exception {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale(""));
        NodeIterator nodeIterator = dynamicPointer.attributeIterator(new QName("name"));
        assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        dynamicpointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale(""));
        assertEquals(1, dynamicpointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        bean = new Object();
        dynamicpointer = new DynamicPointer(new QName("name"), bean, new PageContextHandler(), new Locale("en"));
        assertEquals(bean, dynamicpointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithThisObject_BWyu0() throws Exception {
        final Object object = new Object();
        final DynamicPointer pointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
        assertEquals(true, pointer.equals(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_URGy1() throws Exception {
        final DynamicPointer pointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
        assertEquals(false, pointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNonDynamicPointerObject_PKNa2() throws Exception {
        final Object object = new Object();
        final DynamicPointer pointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
        assertEquals(false, pointer.equals(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentBean_dStm3() throws Exception {
        final Object object = new Object();
        final DynamicPointer pointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
        final DynamicPointer other = new DynamicPointer(new QName("name"), object, new PageContextHandler(), new Locale("locale"));
        assertEquals(false, pointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameBean_pYII4() throws Exception {
        final Object object = new Object();
        final DynamicPointer pointer = new DynamicPointer(new QName("name"), object, new PageContextHandler(), new Locale("locale"));
        final DynamicPointer other = new DynamicPointer(new QName("name"), object, new PageContextHandler(), new Locale("locale"));
        assertEquals(true, pointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentName_NweS5() throws Exception {
        final Object object = new Object();
        final DynamicPointer pointer = new DynamicPointer(new QName("name"), object, new PageContextHandler(), new Locale("locale"));
        final DynamicPointer other = new DynamicPointer(new QName("other"), object, new PageContextHandler(), new Locale("locale"));
        assertEquals(false, pointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_voBf0() throws Exception {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        assertEquals(1, dynamicPointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        dynamicpointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        when(dynamicpointer.getNode()).thenReturn(new Object());
        boolean actual = dynamicpointer.isLeaf();
        boolean expected = JXPathIntrospector.getBeanInfo(Object.class).isAtomic();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBaseValue_withBeaninitialized_returnsBean_ZsdY0() throws Exception {
        Object expected = new Object();
        Object actual;
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), expected, new PageContextHandler(), new Locale(""));
        actual = dynamicPointer.getBaseValue();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBaseValue_withNoBeaninitialized_returnsNull_XtfM1() throws Exception {
        Object expected = null;
        Object actual;
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), null, new PageContextHandler(), new Locale(""));
        actual = dynamicPointer.getBaseValue();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_JRlx0() throws Exception {
        PageContextHandler handler = new PageContextHandler();
        Object bean = new Object();
        Locale locale = new Locale("en");
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), bean, handler, locale);
        assertEquals(dynamicPointer.getName(), new QName("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullName_TOcl1() throws Exception {
        PageContextHandler handler = new PageContextHandler();
        Object bean = new Object();
        Locale locale = new Locale("en");
        DynamicPointer dynamicPointer = new DynamicPointer(null, bean, handler, locale);
        assertEquals(dynamicPointer.getName(), null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithEmptyName_FCwn2() throws Exception {
        PageContextHandler handler = new PageContextHandler();
        Object bean = new Object();
        Locale locale = new Locale("en");
        DynamicPointer dynamicPointer = new DynamicPointer(new QName(""), bean, handler, locale);
        assertEquals(dynamicPointer.getName(), new QName(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullBean_KbgG3() throws Exception {
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en");
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), null, handler, locale);
        assertEquals(dynamicPointer.getName(), new QName("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullHandler_tBxn4() throws Exception {
        Object bean = new Object();
        Locale locale = new Locale("en");
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), bean, null, locale);
        assertEquals(dynamicPointer.getName(), new QName("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullLocale_eMfA5() throws Exception {
        PageContextHandler handler = new PageContextHandler();
        Object bean = new Object();
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), bean, handler, null);
        assertEquals(dynamicPointer.getName(), new QName("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenNodeisNull_pJej0() throws Exception {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale(""));
        assertTrue(dynamicPointer.isLeaf());
    }
}