/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMod_JKvM0() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.mod(left, right);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOr_ipuN0() throws Exception {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[0]; // provide proper arguments
        Object result = compiler.or(arguments);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiply_oHfI0() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.multiply(left, right);
        assertEquals(new CoreOperationMultiply((Expression) left, (Expression) right), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_Rasp0() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        int nodeType = 1;
        Object result = treeCompiler.nodeTypeTest(nodeType);
        assertEquals(new NodeTypeTest(1), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeNameTest_lfRZ0() throws Exception {
        TreeCompiler compiler = new TreeCompiler();
        Object qname = new Object(); // Initialize qname object with appropriate values
        Object result = compiler.nodeNameTest(qname);
        assertEquals(new NodeNameTest((QName) qname), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeNameTestWithNullArgument_KiTw1() throws Exception {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.nodeNameTest(null);
        assertEquals(new NodeNameTest(null), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeNameTestWithDifferentArguments_KhVk2_1() throws Exception {
        TreeCompiler compiler = new TreeCompiler();
        Object qname1 = new Object(); // Initialize qname1 object with appropriate values
        Object qname2 = new Object(); // Initialize qname2 object with appropriate values
        Object result1 = compiler.nodeNameTest(qname1);
        Object result2 = compiler.nodeNameTest(qname2);
        assertEquals(new NodeNameTest((QName) qname1), result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeNameTestWithDifferentArguments_KhVk2_2() throws Exception {
        TreeCompiler compiler = new TreeCompiler();
        Object qname1 = new Object(); // Initialize qname1 object with appropriate values
        Object qname2 = new Object(); // Initialize qname2 object with appropriate values
        Object result1 = compiler.nodeNameTest(qname1);
        Object result2 = compiler.nodeNameTest(qname2);
        assertEquals(new NodeNameTest((QName) qname2), result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPath_EJqc0() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = new Object[0];
        Object[] steps = new Object[0];
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQname_lfBK0() throws Exception {
        final String prefix = "prefix";
        final String name = "name";
        Object qname = new TreeCompiler().qname(prefix, name);
        assertEquals(new QName(prefix, name), qname);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLiteral_zicd0_1() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.literal("value");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLiteral_zicd0_2() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.literal("value");
        assertTrue(result instanceof Constant);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_OjEa0() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[2];
        arguments[0] = new Object();
        arguments[1] = new Object();
        Object result = treeCompiler.sum(arguments);
        assertEquals(new Object(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThan_NnzS0() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.lessThan(left, right);
        assertEquals(new CoreOperationLessThan((Expression) left, (Expression) right), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_URDX0() throws Exception {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.number("1.0");
        assertEquals(new Constant(Double.valueOf("1.0")), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNotEqual_uTfU0_1() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.notEqual(left, right);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNotEqual_uTfU0_2() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.notEqual(left, right);
        assertTrue(result instanceof CoreOperationNotEqual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNotEqualWithNullLeft_QrLn1_1() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.notEqual(null, new Object());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNotEqualWithNullLeft_QrLn1_2() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.notEqual(null, new Object());
        assertTrue(result instanceof CoreOperationNotEqual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNotEqualWithNullRight_jCcO2_1() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.notEqual(new Object(), null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNotEqualWithNullRight_jCcO2_2() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.notEqual(new Object(), null);
        assertTrue(result instanceof CoreOperationNotEqual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThanOrEqual_veew0() throws Exception {
        TreeCompiler compiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = compiler.greaterThanOrEqual(left, right);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThanOrEqualWithNullLeft_rLZa2() throws Exception {
        TreeCompiler compiler = new TreeCompiler();
        Object left = null;
        Object right = new Object();
        Object result = compiler.greaterThanOrEqual(left, right);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThanOrEqualWithNullRight_STPa3() throws Exception {
        TreeCompiler compiler = new TreeCompiler();
        Object left = new Object();
        Object right = null;
        Object result = compiler.greaterThanOrEqual(left, right);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThanOrEqualWithNullLeftAndRight_HXxa4() throws Exception {
        TreeCompiler compiler = new TreeCompiler();
        Object left = null;
        Object right = null;
        Object result = compiler.greaterThanOrEqual(left, right);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDivide_LNJh0() throws Exception {
        Object left = new Object();
        Object right = new Object();
        Object expected = new CoreOperationDivide((Expression) left, (Expression) right);
        Object actual = new TreeCompiler().divide(left, right);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDivide2_hsTX1() throws Exception {
        Object left = new Object();
        Object right = new Object();
        Object expected = new CoreOperationDivide((Expression) left, (Expression) right);
        Object actual = new TreeCompiler().divide(right, left);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThan_IAyX0() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object(); // Initialize left object
        Object right = new Object(); // Initialize right object
        Object result = treeCompiler.greaterThan(left, right);
        assertEquals(new CoreOperationGreaterThan((Expression) left, (Expression) right), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThanWithNullLeft_RCcv2() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = null;
        Object right = new Object(); // Initialize right object
        Object result = treeCompiler.greaterThan(left, right);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThanWithNullRight_DKsh3() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object(); // Initialize left object
        Object right = null;
        Object result = treeCompiler.greaterThan(left, right);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThanWithNullBoth_yPun4() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = null;
        Object right = null;
        Object result = treeCompiler.greaterThan(left, right);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinus_VjIC0() throws Exception {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.minus(left, right);
        assertEquals(new CoreOperationSubtract((Expression) left, (Expression) right), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_jNHV0() throws Exception {
        Object qName = new Object();
        Object expected = new VariableReference((QName) qName);
        Object actual = new TreeCompiler().variableReference(qName);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference2_hRZl1() throws Exception {
        Object qName = new Object();
        Object expected = new VariableReference((QName) qName);
        Object actual = new TreeCompiler().variableReference(qName);
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTest_HYaE0() throws Exception {
        String instruction = "instruction";
        Object expected = new ProcessingInstructionTest(instruction);
        Object actual = new TreeCompiler().processingInstructionTest(instruction);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTest11_cpAb20() throws Exception {
        String instruction = "instruction";
    }
}