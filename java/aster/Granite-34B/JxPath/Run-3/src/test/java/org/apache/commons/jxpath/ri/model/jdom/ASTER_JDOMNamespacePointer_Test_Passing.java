/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNamespacePointer_Test_Passing {
    JDOMNamespacePointer jdomnamespacepointer;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private String prefix;
    @Mock
    private static final String PREFIX = "prefix";
    private static final String NAMESPACE_URI = "namespaceURI";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        jdomnamespacepointer = mock(JDOMNamespacePointer.class);
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        when(jdomnamespacepointer.compareChildNodePointers(pointer1, pointer2)).thenReturn(0);
        assertEquals(0, jdomnamespacepointer.compareChildNodePointers(pointer1, pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        jdomnamespacepointer = mock(JDOMNamespacePointer.class);
        Object value = new Object();
        jdomnamespacepointer.setValue(value);
        verify(jdomnamespacepointer, times(1)).setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        prefix = "prefix";
        parent = mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix);
        int expected = prefix.hashCode();
        int actual = jdomnamespacepointer.hashCode();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        prefix = "prefix";
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix);
        assertEquals(new QName(prefix), jdomnamespacepointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNoParent_AApw0() throws Exception {
        JDOMNamespacePointer pointer = new JDOMNamespacePointer(null, "prefix", "namespaceURI");
        assertEquals("namespace::prefix", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getImmediateNode_0_oaYm0() throws Exception {
        JDOMNamespacePointer jDOMNamespacePointer0 = new JDOMNamespacePointer((DOMNodePointer) null, (String) null, (String) null);
        Object object0 = jDOMNamespacePointer0.getImmediateNode();
        assertEquals(object0, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getImmediateNode_1_WEoW1() throws Exception {
        JDOMNamespacePointer jDOMNamespacePointer0 = new JDOMNamespacePointer((DOMNodePointer) null, (String) null);
        Object object0 = jDOMNamespacePointer0.getImmediateNode();
        assertEquals(object0, null);
    }
}