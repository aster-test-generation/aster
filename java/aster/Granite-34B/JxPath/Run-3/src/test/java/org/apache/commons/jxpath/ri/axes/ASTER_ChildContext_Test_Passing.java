/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ChildContext_Test_Passing {
    private NodeIterator iterator;
    ChildContext childcontext;
    @Mock
    NamespaceContext namespacecontext;
    @Mock
    SelfContext selfcontext;
    @Mock
    NodeTypeTest nodetypetest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode() throws Exception {
        childcontext = new ChildContext(namespacecontext, nodetypetest, true, false);
        when(childcontext.getCurrentPosition()).thenReturn(0);
        assertTrue(childcontext.nextNode());
        verify(childcontext, times(1)).setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWhenPositionIsZero_LDue0() throws Exception {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        ChildContext childContext = new ChildContext(namespaceContext, new NodeTypeTest(1), true, true);
        assertTrue(childContext.setPosition(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWhenPositionIsOne_WwGm1() throws Exception {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        ChildContext childContext = new ChildContext(namespaceContext, new NodeTypeTest(1), true, true);
        assertTrue(childContext.setPosition(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWhenPositionIsTwo_nqbV2() throws Exception {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        ChildContext childContext = new ChildContext(namespaceContext, new NodeTypeTest(1), true, true);
        assertTrue(childContext.setPosition(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWhenPositionIsThree_byCJ3() throws Exception {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        ChildContext childContext = new ChildContext(namespaceContext, new NodeTypeTest(1), true, true);
        assertTrue(childContext.setPosition(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCurrentNodePointerTest1_SCye0() throws Exception {
        ChildContext childContext = new ChildContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0), true, false);
        NodePointer nodePointer = childContext.getCurrentNodePointer();
        Assertions.assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCurrentNodePointerTest2_kqxf1() throws Exception {
        ChildContext childContext = new ChildContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0), true, false);
        NodePointer nodePointer = childContext.getCurrentNodePointer();
        Assertions.assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCurrentNodePointerTest3_MIVB2_2() throws Exception {
        ChildContext childContext = new ChildContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0), true, false);
        NodePointer nodePointer = childContext.getCurrentNodePointer();
        Assertions.assertEquals(1, nodePointer.getIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void reset_0_BSPw0() throws Exception {
        ChildContext childContext0 = new ChildContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0), false, false);
        childContext0.reset();
        childContext0.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void reset_1_zXtm1() throws Exception {
        ChildContext childContext0 = new ChildContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0), false, false);
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void reset_2_veMY2() throws Exception {
        ChildContext childContext0 = new ChildContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0), false, false);
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void reset_3_DiDM3() throws Exception {
        ChildContext childContext0 = new ChildContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0), false, false);
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void reset_4_Alrm4() throws Exception {
        ChildContext childContext0 = new ChildContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0), false, false);
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void reset_5_Rgbp5() throws Exception {
        ChildContext childContext0 = new ChildContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0), false, false);
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void reset_6_WlkI6() throws Exception {
        ChildContext childContext0 = new ChildContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0), false, false);
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void reset_7_BykC7() throws Exception {
        ChildContext childContext0 = new ChildContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0), false, false);
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void reset_8_zjQK8() throws Exception {
        ChildContext childContext0 = new ChildContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0), false, false);
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
        childContext0.reset();
    }
}