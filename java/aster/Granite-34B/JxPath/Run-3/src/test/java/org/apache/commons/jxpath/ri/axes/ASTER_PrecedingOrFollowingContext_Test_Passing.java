/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Stack;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PrecedingOrFollowingContext_Test_Passing {
    NamespaceContext namespacecontext;
    SelfContext selfcontext;
    NodeTypeTest nodetypetest;
    PrecedingOrFollowingContext precedingorfollowingcontext;
    private boolean reverse;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    private NodeTest nodeTest;
    private NodePointer currentRootLocation;
    private Stack stack = null;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder() throws Exception {
        NamespaceContext namespacecontext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0));
        precedingorfollowingcontext = new PrecedingOrFollowingContext(namespacecontext, new NodeTypeTest(0), reverse);
        int expected = reverse ? -1 : 1;
        int actual = precedingorfollowingcontext.getDocumentOrder();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode() throws Exception {
        precedingorfollowingcontext = mock(PrecedingOrFollowingContext.class);
        nodeTest = mock(NodeTest.class);
        setStarted = false;
        currentRootLocation = mock(NodePointer.class);
        stack = new Stack();
        reverse = false;
        currentNodePointer = mock(NodePointer.class);
        when(precedingorfollowingcontext.nextNode()).thenReturn(true);
        assertTrue(precedingorfollowingcontext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_whenPositionIsLessThanCurrentPosition_OaOe0() throws Exception {
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1), true);
        int position = 1;
        boolean result = context.setPosition(position);
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_whenPositionIsGreaterThanCurrentPositionAndNextNodeReturnsTrue_tCPG1() throws Exception {
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1), true);
        int position = 2;
        boolean result = context.setPosition(position);
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_whenPositionIsGreaterThanCurrentPositionAndNextNodeReturnsFalse_iRsb2() throws Exception {
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1), true);
        int position = 3;
        boolean result = context.setPosition(position);
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_whenPositionIsGreaterThanCurrentPositionAndNextNodeIsNeverCalled_RbBd3() throws Exception {
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1), true);
        int position = 4;
        boolean result = context.setPosition(position);
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCurrentNodePointerTest_rtBZ0() throws Exception {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0));
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(0), false);
        NodePointer expected = null; // Initialize the expected value
        NodePointer actual = context.getCurrentNodePointer();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_KrvO0() throws Exception {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(2));
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(3), true);
        assertTrue(context.nextNode());
    }
}