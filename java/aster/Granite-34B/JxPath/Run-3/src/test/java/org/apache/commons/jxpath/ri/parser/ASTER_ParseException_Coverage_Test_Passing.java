/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ParseException_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMessageTest1_hNgI0() {
        ParseException e = new ParseException();
        String message = e.getMessage();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMessageTest2_Hffd1() {
        ParseException e = new ParseException("message");
        String message = e.getMessage();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_TFJL0() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("test");
        assertEquals(s, "test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_kFVP1() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("");
        assertEquals(s, "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_Npue3() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("a");
        assertEquals(s, "a");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_DwET4() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("b");
        assertEquals(s, "b");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_siAG5() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("c");
        assertEquals(s, "c");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_vROQ6() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("d");
        assertEquals(s, "d");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_MFFh7() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("e");
        assertEquals(s, "e");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test9_ovMk8() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("f");
        assertEquals(s, "f");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test10_TqPl9() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("g");
        assertEquals(s, "g");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test11_qsxZ10() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("h");
        assertEquals(s, "h");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test12_chDN11() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("i");
        assertEquals(s, "i");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test13_DvOp12() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("j");
        assertEquals(s, "j");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test14_UJOn13() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("k");
        assertEquals(s, "k");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test15_bVNZ14() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("l");
        assertEquals(s, "l");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test16_hvPY15() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("m");
        assertEquals(s, "m");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test17_JccB16() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("n");
        assertEquals(s, "n");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test18_KLoI17() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("o");
        assertEquals(s, "o");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test19_fQnZ18() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("p");
        assertEquals(s, "p");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test20_zdOG19() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("q");
        assertEquals(s, "q");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test21_sbnZ20() {
        ParseException parseException = new ParseException();
        String s = parseException.add_escapes("r");
        assertEquals(s, "r");
    }
}