/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariableReference_Test_Passing {
    private EvalContext context;
    private VariableReference variableReference;
    private NamespaceContext namespaceContext;
    private SelfContext selfContext;
    private NodeTypeTest nodeTypeTest;
    private JXPathContext jXPathContext;
    private NodePointer nodePointer;
    private Pointer contextNodePointer;
    private NodeSet nodeSet;
    private List contextNodeList;
    private Pointer singleNodePointer;
    private QName varName;
    VariableReference variablereference;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_QhEz0() throws Exception {
        VariableReference varRef = new VariableReference(new QName("test"));
        assertEquals("$test", varRef.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getVariableNameTest_hPEC0() throws Exception {
        VariableReference variableReference = new VariableReference(new QName(" qualifiedName"));
        assertEquals(new QName("qualifiedName"), variableReference.getVariableName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getVariableNameWithPrefixTest_tdsl1() throws Exception {
        VariableReference variableReference = new VariableReference(new QName("prefix", "localName"));
        assertEquals(new QName("prefix", "localName"), variableReference.getVariableName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getVariableNameWithNullTest_dSYa2() throws Exception {
        VariableReference variableReference = new VariableReference(null);
        assertEquals(null, variableReference.getVariableName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompute() throws Exception {
        varName = new QName(" qualifiedName");
        variablereference = new VariableReference(varName);
        EvalContext context = mock(EvalContext.class);
        when(context.getValue()).thenReturn("value");
        Object result = variablereference.compute(context);
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_scWM0() throws Exception {
        VariableReference variableReference = new VariableReference(new QName(""));
        boolean actual = variableReference.computeContextDependent();
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_kWRY1() throws Exception {
        VariableReference variableReference = new VariableReference(new QName("", ""));
        boolean actual = variableReference.computeContextDependent();
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_xrrM2() throws Exception {
        VariableReference variableReference = new VariableReference(new QName("test"));
        boolean actual = variableReference.computeContextDependent();
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_GMwi3() throws Exception {
        VariableReference variableReference = new VariableReference(new QName("test", "test"));
        boolean actual = variableReference.computeContextDependent();
        boolean expected = false;
        assertEquals(expected, actual);
    }
}