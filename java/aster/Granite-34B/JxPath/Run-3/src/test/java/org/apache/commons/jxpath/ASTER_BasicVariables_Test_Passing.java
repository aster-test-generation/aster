/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicVariables_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeclareVariable_XAWN0_1() throws Exception {
        BasicVariables basicVariables = new BasicVariables();
        basicVariables.declareVariable("name", "John");
        basicVariables.declareVariable("age", 25);
        basicVariables.declareVariable("isStudent", true);
        assertEquals("John", basicVariables.getVariable("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeclareVariable_XAWN0_2() throws Exception {
        BasicVariables basicVariables = new BasicVariables();
        basicVariables.declareVariable("name", "John");
        basicVariables.declareVariable("age", 25);
        basicVariables.declareVariable("isStudent", true);
        assertEquals(25, basicVariables.getVariable("age"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeclareVariable_XAWN0_3() throws Exception {
        BasicVariables basicVariables = new BasicVariables();
        basicVariables.declareVariable("name", "John");
        basicVariables.declareVariable("age", 25);
        basicVariables.declareVariable("isStudent", true);
        assertEquals(true, basicVariables.getVariable("isStudent"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUndeclareVariable_YGkI0() throws Exception {
        BasicVariables basicVariables = new BasicVariables();
        basicVariables.undeclareVariable("varName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUndeclareVariableWithCoverage_xpsd1() throws Exception {
        BasicVariables basicVariables = new BasicVariables();
        basicVariables.undeclareVariable(null);
        basicVariables.undeclareVariable("");
        basicVariables.undeclareVariable(" ");
        basicVariables.undeclareVariable("var1");
        basicVariables.undeclareVariable("var2");
        basicVariables.undeclareVariable("var3");
        basicVariables.undeclareVariable("var4");
        basicVariables.undeclareVariable("var5");
        basicVariables.undeclareVariable("var6");
        basicVariables.undeclareVariable("var7");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariableWithNullNameAndEmptyMap_sLmi4() throws Exception {
        BasicVariables basicVariables = new BasicVariables();
        assertFalse(basicVariables.isDeclaredVariable(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariableWithEmptyNameAndEmptyMap_cclH5() throws Exception {
        BasicVariables basicVariables = new BasicVariables();
        assertFalse(basicVariables.isDeclaredVariable(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariableWithRandomNameAndEmptyMap_aYEa6() throws Exception {
        BasicVariables basicVariables = new BasicVariables();
        assertFalse(basicVariables.isDeclaredVariable("y"));
    }
}