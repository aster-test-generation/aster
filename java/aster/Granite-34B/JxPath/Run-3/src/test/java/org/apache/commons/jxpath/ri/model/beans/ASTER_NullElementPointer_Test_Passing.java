/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullElementPointer_Test_Passing {
    NullElementPointer nullelementpointer;
    DOMNodePointer parent;
    Locale locale;
    int index;
    @Mock
    DOMNodePointer domNodePointer;
    NodePointer nodePointer;
    JXPathContext context;
    AbstractFactory abstractFactory;
    NodePointer nodepointer;
    VariablePointer variablePointer;
    String id;
    @Mock
    Object root;
    @Mock
    QName qName;
    @Mock
    DOMNodePointer mockParent;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath() throws Exception {
        parent = mock(DOMNodePointer.class);
        context = mock(JXPathContext.class);
        nodepointer = mock(NodePointer.class);
        nullelementpointer = new NullElementPointer(parent, 1);
        when(parent.createChild(context, null, 1)).thenReturn(nodepointer);
        NodePointer result = nullelementpointer.createPath(context);
        assertEquals(nodepointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue() throws Exception {
        nullelementpointer = new NullElementPointer(parent, 0);
        Assertions.assertThrows(UnsupportedOperationException.class, () -> {
            nullelementpointer.setValue(new Object());
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        parent = mock(DOMNodePointer.class);
        index = 1;
        nullelementpointer = new NullElementPointer(parent, index);
        Assertions.assertFalse(nullelementpointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        when(parent.hashCode()).thenReturn(10);
        nullelementpointer = new NullElementPointer(parent, 5);
        assertEquals(15, nullelementpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        nullelementpointer = new NullElementPointer(mockParent, 0);
        assertTrue(nullelementpointer.isLeaf());
    }
}