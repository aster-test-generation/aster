/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPropertyPointer_Test_Passing {
    private String propertyName = "*";
    NullPropertyPointer nullpropertypointer;
    @Mock
    DOMNodePointer parent;
    @Mock
    DOMNodePointer mockParent;
    DOMNodePointer domNodePointer;
    private boolean byNameAttribute = false;
    int index;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        lenient().when(mockParent.getIndex()).thenReturn(1);
        nullpropertypointer = new NullPropertyPointer(mockParent);
        assertTrue(nullpropertypointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection2_wwSR1() throws Exception {
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(new VariablePointer(new QName("name")));
        assertEquals(false, nullPropertyPointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisContainer() throws Exception {
        domNodePointer = mock(DOMNodePointer.class);
        nullpropertypointer = new NullPropertyPointer(domNodePointer);
        assertTrue(nullpropertypointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        nullpropertypointer = new NullPropertyPointer(parent);
        Object baseValue = nullpropertypointer.getBaseValue();
        Assertions.assertNull(baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActual() throws Exception {
        nullpropertypointer = new NullPropertyPointer(parent);
        Mockito.when(parent.isActual()).thenReturn(true);
        Assertions.assertFalse(nullpropertypointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        nullpropertypointer = new NullPropertyPointer(mockParent);
        assertTrue(nullpropertypointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf4_AxfG4() throws Exception {
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(new VariablePointer(new QName("qualifiedName")));
        assertTrue(nullPropertyPointer.isLeaf());
    }
}