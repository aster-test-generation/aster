/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceResolver_Test_Passing {
    private boolean sealed;
    NamespaceResolver namespaceresolver;
    NamespaceResolver parent;
    String namespaceURI = "namespaceURI";
    String prefix = "prefix";
    Map<String, String> map;
    Map<String, String> reverseMap;
    @Mock
    private NamespaceResolver parentNamespaceResolver;
    @InjectMocks
    private NamespaceResolver namespaceResolver;
    Map<String, String> namespaceMap;
    Pointer pointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix() throws Exception {
        namespaceresolver = new NamespaceResolver();
        final String namespaceURI = "test";
        final String prefix = "test";
        when(namespaceresolver.getExternallyRegisteredPrefix(namespaceURI)).thenReturn(prefix);
        when(namespaceresolver.getPrefix(namespaceURI)).thenReturn(prefix);
        final String result = namespaceresolver.getPrefix(namespaceURI);
        assertEquals(prefix, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testseal() throws Exception {
        parent = mock(NamespaceResolver.class);
        namespaceresolver = new NamespaceResolver(parent);
        namespaceresolver.seal();
        verify(parent, times(1)).seal();
        assertTrue(sealed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWithNoParent_fXjP0() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.seal();
        assertTrue(resolver.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWithParent_kVhV1_1() throws Exception {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.seal();
        assertTrue(resolver.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWithParent_kVhV1_2() throws Exception {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.seal();
        assertTrue(parent.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace() throws Exception {
        // Set up expected behavior for the parent namespace resolver
        when(parentNamespaceResolver.isSealed()).thenReturn(false);
        // Call the method being tested
        namespaceResolver.registerNamespace("prefix", "namespaceURI");
        // Verify that the method behaves as expected
        verify(namespaceResolver, times(1)).registerNamespace("prefix", "namespaceURI");
        verify(parentNamespaceResolver, times(1)).isSealed();
        verifyNoMoreInteractions(namespaceResolver, parentNamespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_xcBy0_1() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver(null);
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("namespaceURI", resolver.getNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_xcBy0_2() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver(null);
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("prefix", resolver.getPrefix("namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithNoParent_XHCd1_1() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("namespaceURI", resolver.getNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithNoParent_XHCd1_2() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("prefix", resolver.getPrefix("namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() throws Exception {
        parent = mock(NamespaceResolver.class);
        namespaceresolver = new NamespaceResolver(parent);
        when(parent.getNamespaceURI(anyString())).thenReturn("namespaceURI");
        String prefix = "prefix";
        String uri = namespaceresolver.getNamespaceURI(prefix);
        assertEquals("namespaceURI", uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceContextPointer() throws Exception {
        parent = mock(NamespaceResolver.class);
        pointer = mock(Pointer.class);
        namespaceresolver = new NamespaceResolver(parent);
        when(parent.getNamespaceContextPointer()).thenReturn(pointer);
        Pointer result = namespaceresolver.getNamespaceContextPointer();
        verify(parent, times(1)).getNamespaceContextPointer();
        verifyNoMoreInteractions(parent);
        assertEquals(pointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getExternallyRegisteredPrefix_String_uBno0() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.getExternallyRegisteredPrefix("namespaceURI");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getExternallyRegisteredPrefix_String_Null_RwhD1() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.getExternallyRegisteredPrefix(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getExternallyRegisteredPrefix_String_Empty_yPzZ2() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.getExternallyRegisteredPrefix("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getExternallyRegisteredPrefix_String_ParentNotNull_YZUb3() throws Exception {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.getExternallyRegisteredPrefix("namespaceURI");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getExternallyRegisteredPrefix_String_ParentNotNull_Null_bFEo7() throws Exception {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.getExternallyRegisteredPrefix(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getExternallyRegisteredPrefix_String_ParentNotNull_Empty_uRFP8() throws Exception {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.getExternallyRegisteredPrefix("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisSealed() throws Exception {
        namespaceresolver = new NamespaceResolver();
        sealed = false;
        when(namespaceresolver.isSealed()).thenReturn(sealed);
        assertEquals(sealed, namespaceresolver.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNamespaceURI_with_valid_input_WGzI0() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver();
        String prefix = "prefix";
        String expected = "expected";
        assertEquals(expected, resolver.getNamespaceURI(prefix));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNamespaceURI_with_invalid_input_nTrG1() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver();
        String prefix = "prefix";
        String actual = resolver.getNamespaceURI(prefix);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNamespaceURI_with_null_input_cDpw2() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver();
        String actual = resolver.getNamespaceURI(null);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrefix_withNamespaceURI_qjRe0() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.getPrefix("http://example.com");
        Assertions.assertEquals("prefix", resolver.getPrefix("http://example.com"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrefix_withNamespaceURINull_oyOf1() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.getPrefix(null);
        Assertions.assertEquals(null, resolver.getPrefix(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrefix_withNamespaceURINotRegistered_SpfT2() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.getPrefix("http://example.com");
        Assertions.assertEquals(null, resolver.getPrefix("http://example2.com"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrefix_withNamespaceURI_lineCoverage_ubKn3() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.getPrefix("http://example.com");
        resolver.getPrefix("http://example.com");
        Assertions.assertEquals("prefix", resolver.getPrefix("http://example.com"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getExternallyRegisteredNamespaceURINoParent_HVfT0() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver();
        assertEquals(null, resolver.getExternallyRegisteredNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getExternallyRegisteredNamespaceURIWithParentNoMatch_RsAw1() throws Exception {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        assertEquals(null, resolver.getExternallyRegisteredNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getExternallyRegisteredNamespaceURIWithParentMatch_ypwf2() throws Exception {
        NamespaceResolver parent = new NamespaceResolver();
        parent.namespaceMap.put("prefix", "uri");
        NamespaceResolver resolver = new NamespaceResolver(parent);
        assertEquals("uri", resolver.getExternallyRegisteredNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getExternallyRegisteredNamespaceURIWithParentNullPrefix_obpF3() throws Exception {
        NamespaceResolver parent = new NamespaceResolver();
        parent.namespaceMap.put("prefix", "uri");
        NamespaceResolver resolver = new NamespaceResolver(parent);
        assertEquals(null, resolver.getExternallyRegisteredNamespaceURI(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getExternallyRegisteredNamespaceURIWithParentEmptyPrefix_DLPB4() throws Exception {
        NamespaceResolver parent = new NamespaceResolver();
        parent.namespaceMap.put("prefix", "uri");
        NamespaceResolver resolver = new NamespaceResolver(parent);
        assertEquals(null, resolver.getExternallyRegisteredNamespaceURI(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getExternallyRegisteredNamespaceURIWithParentInvalidPrefix_cmIw5() throws Exception {
        NamespaceResolver parent = new NamespaceResolver();
        parent.namespaceMap.put("prefix", "uri");
        NamespaceResolver resolver = new NamespaceResolver(parent);
        assertEquals(null, resolver.getExternallyRegisteredNamespaceURI("invalid"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getExternallyRegisteredNamespaceURIWithParentMultipleMatches_UXuo6() throws Exception {
        NamespaceResolver parent = new NamespaceResolver();
        parent.namespaceMap.put("prefix", "uri");
        parent.namespaceMap.put("prefix2", "uri2");
        NamespaceResolver resolver = new NamespaceResolver(parent);
        assertEquals("uri", resolver.getExternallyRegisteredNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPointerWhenPointerIsNullAndParentIsNull_SZOR0() throws Exception {
        NamespaceResolver parent = new NamespaceResolver(null);
        NamespaceResolver resolver = new NamespaceResolver(parent);
        Pointer pointer = resolver.getNamespaceContextPointer();
        assertEquals(null, pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSealed_WhenNoParent_ReturnsFalse_JlXP2() throws Exception {
        NamespaceResolver resolver = new NamespaceResolver();
        boolean result = resolver.isSealed();
        assert result == false;
    }
}