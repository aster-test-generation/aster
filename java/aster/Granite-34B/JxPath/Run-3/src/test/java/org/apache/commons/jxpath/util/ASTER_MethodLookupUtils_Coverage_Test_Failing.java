/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Constructor;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithNullObject_gDXF0() {
        Object[] parameters = {null};
        Class targetClass = String.class;
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        Assertions.assertEquals(constructor.getParameterTypes()[0], Object.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithConvertibleObjectAndExpected_LsIk2() {
        Object[] parameters = {"1"};
        Class targetClass = Number.class;
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        Assertions.assertEquals(constructor.getParameterTypes()[0], Number.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithNonMatchingExpectedAndActual_gJqf3() {
        Object[] parameters = {1.0};
        Class targetClass = Integer.class;
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        Assertions.assertEquals(constructor.getParameterTypes()[0], Double.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithAmbiguousConstructors_ruXv5() {
        Object[] parameters = {new Object(), new Object()};
        Class targetClass = Object.class;
        try {
            MethodLookupUtils.lookupConstructor(targetClass, parameters);
            Assertions.fail("Expected JXPathException");
        } catch (JXPathException e) {
            Assertions.assertEquals(e.getMessage(), "Ambiguous constructor [java.lang.Object, java.lang.Object]");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithNullParameters_MQUE0() {
        Object[] parameters = null;
        MethodLookupUtils.lookupStaticMethod(null, "", parameters);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithNotNullParameters_qiQB1() {
        Object[] parameters = new Object[1];
        MethodLookupUtils.lookupStaticMethod(null, "", parameters);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithNotNullParam_aNSI2() {
        Object[] parameters = new Object[1];
        parameters[0] = new Object();
        MethodLookupUtils.lookupStaticMethod(null, "", parameters);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithTryExact_LGel3() {
        Object[] parameters = new Object[1];
        parameters[0] = null;
        MethodLookupUtils.lookupStaticMethod(null, "", parameters);
    }
}