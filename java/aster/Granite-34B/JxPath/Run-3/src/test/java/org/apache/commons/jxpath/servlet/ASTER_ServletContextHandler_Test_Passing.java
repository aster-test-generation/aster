/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.Arrays;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ServletContextHandler_Test_Passing {
    private static int DEFAULT_PROPERTY_COUNT = 16;
    ServletContextHandler servletcontexthandler;
    @Mock
    ServletContext servletContext;
    ServletContext mockServletContext;
    @Mock
    HttpSessionAndServletContext httpSessionAndServletContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProperty() throws Exception {
        servletcontexthandler = new ServletContextHandler();
        Mockito.when(servletContext.getAttribute("property")).thenReturn("value");
        Object result = servletcontexthandler.getProperty(servletContext, "property");
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetProperty() throws Exception {
        servletcontexthandler = new ServletContextHandler();
        mockServletContext = mock(ServletContext.class);
        final Object context = mockServletContext;
        final String property = "testProperty";
        final Object value = "testValue";
        servletcontexthandler.setProperty(context, property, value);
        verify(mockServletContext, times(1)).setAttribute(eq(property), eq(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcollectPropertyNames_1() throws Exception {
        MockitoAnnotations.initMocks(this);
        servletcontexthandler = new ServletContextHandler();
        Mockito.when(httpSessionAndServletContext.getServletContext()).thenReturn(servletContext);
        HashSet<String> set = new HashSet<>();
        Enumeration<String> enumeration = Collections.enumeration(Arrays.asList("attribute1", "attribute2"));
        Mockito.when(servletContext.getAttributeNames()).thenReturn(enumeration);
        servletcontexthandler.collectPropertyNames(set, httpSessionAndServletContext);
        Mockito.verify(servletContext, Mockito.times(1)).getAttributeNames();
        Mockito.verify(httpSessionAndServletContext, Mockito.times(1)).getServletContext();
        Assertions.assertEquals(2, set.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcollectPropertyNames_2() throws Exception {
        MockitoAnnotations.initMocks(this);
        servletcontexthandler = new ServletContextHandler();
        Mockito.when(httpSessionAndServletContext.getServletContext()).thenReturn(servletContext);
        HashSet<String> set = new HashSet<>();
        Enumeration<String> enumeration = Collections.enumeration(Arrays.asList("attribute1", "attribute2"));
        Mockito.when(servletContext.getAttributeNames()).thenReturn(enumeration);
        servletcontexthandler.collectPropertyNames(set, httpSessionAndServletContext);
        Mockito.verify(servletContext, Mockito.times(1)).getAttributeNames();
        Mockito.verify(httpSessionAndServletContext, Mockito.times(1)).getServletContext();
        Assertions.assertTrue(set.contains("attribute1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcollectPropertyNames_3() throws Exception {
        MockitoAnnotations.initMocks(this);
        servletcontexthandler = new ServletContextHandler();
        Mockito.when(httpSessionAndServletContext.getServletContext()).thenReturn(servletContext);
        HashSet<String> set = new HashSet<>();
        Enumeration<String> enumeration = Collections.enumeration(Arrays.asList("attribute1", "attribute2"));
        Mockito.when(servletContext.getAttributeNames()).thenReturn(enumeration);
        servletcontexthandler.collectPropertyNames(set, httpSessionAndServletContext);
        Mockito.verify(servletContext, Mockito.times(1)).getAttributeNames();
        Mockito.verify(httpSessionAndServletContext, Mockito.times(1)).getServletContext();
        Assertions.assertTrue(set.contains("attribute2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPropertyName_whJm0_1() throws Exception {
        ServletContextHandler handler = new ServletContextHandler();
        String[] propertyNames = handler.getPropertyNames(new Object());
        Assertions.assertNotNull(propertyNames);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPropertyName_whJm0_2() throws Exception {
        ServletContextHandler handler = new ServletContextHandler();
        String[] propertyNames = handler.getPropertyNames(new Object());
        Assertions.assertTrue(propertyNames.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPropertyName2_nbhZ1_1() throws Exception {
        ServletContextHandler handler = new ServletContextHandler();
        String[] propertyNames = handler.getPropertyNames(null);
        Assertions.assertNotNull(propertyNames);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPropertyName2_nbhZ1_2() throws Exception {
        ServletContextHandler handler = new ServletContextHandler();
        String[] propertyNames = handler.getPropertyNames(null);
        Assertions.assertTrue(propertyNames.length == 0);
    }
}