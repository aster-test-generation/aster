/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicTypeConverter_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithNonAbstractNonInterfaceType_vgQs0() throws Exception {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Class type = Object.class;
        boolean result = basicTypeConverter.canCreateCollection(type);
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithInterfaceType_GnVc2() throws Exception {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Class type = List.class;
        boolean result = basicTypeConverter.canCreateCollection(type);
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithCollectionType_OOaa3() throws Exception {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Class type = Collection.class;
        boolean result = basicTypeConverter.canCreateCollection(type);
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithSetType_zXzG4() throws Exception {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Class type = Set.class;
        boolean result = basicTypeConverter.canCreateCollection(type);
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithNullType_OGkc5() throws Exception {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Class type = null;
        boolean result = basicTypeConverter.canCreateCollection(type);
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionForList_Mkcl0() throws Exception {
        List<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Collection<Integer> unmodList = new BasicTypeConverter().unmodifiableCollection(list);
        assertEquals(list, unmodList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionForSortedSet_SnyQ1() throws Exception {
        SortedSet<String> sortedSet = new TreeSet<>();
        sortedSet.add("a");
        sortedSet.add("b");
        sortedSet.add("c");
        Collection<String> unmodSortedSet = new BasicTypeConverter().unmodifiableCollection(sortedSet);
        assertEquals(sortedSet, unmodSortedSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionForSet_rRqh2() throws Exception {
        Set<Double> set = new HashSet<>();
        set.add(1.0);
        set.add(2.0);
        set.add(3.0);
        Collection<Double> unmodSet = new BasicTypeConverter().unmodifiableCollection(set);
        assertEquals(set, unmodSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionForCollection_STMQ3() throws Exception {
        Collection<Character> collection = new ArrayList<>();
        collection.add('a');
        collection.add('b');
        collection.add('c');
        Collection<Character> unmodCollection = new BasicTypeConverter().unmodifiableCollection(collection);
        assertEquals(collection, unmodCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_boolean_RHeQ0() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(boolean.class);
        assertEquals(Boolean.FALSE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_char_jVen1() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(char.class);
        assertEquals(Character.valueOf('\0'), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_byte_rhUv2() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(byte.class);
        assertEquals(Byte.valueOf((byte) 0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_short_OxhU3() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(short.class);
        assertEquals(Short.valueOf((short) 0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_int_GSXf4() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(int.class);
        assertEquals(Integer.valueOf(0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_long_vsyE5() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(long.class);
        assertEquals(Long.valueOf(0L), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_float_oDIp6() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(float.class);
        assertEquals(Float.valueOf(0.0f), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_double_OTNA7() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(double.class);
        assertEquals(Double.valueOf(0.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void convertNullToPrimitive_unknownType_ykTn8() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(String.class);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Boolean_LGHp0() throws Exception {
        Object object = new Object();
        Class toType = Boolean.class;
        Object result = new BasicTypeConverter().convertStringToPrimitive(object, toType);
        assertEquals(Boolean.valueOf((String) object), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Character_BkHk1() throws Exception {
        Object object = new Object();
        Class toType = Character.class;
        Object result = new BasicTypeConverter().convertStringToPrimitive(object, toType);
        assertEquals(Character.valueOf(((String) object).charAt(0)), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Byte_QbSd2() throws Exception {
        Object object = new Object();
        Class toType = Byte.class;
        Object result = new BasicTypeConverter().convertStringToPrimitive(object, toType);
        assertEquals(Byte.valueOf((String) object), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Short_ByRl3() throws Exception {
        Object object = new Object();
        Class toType = Short.class;
        Object result = new BasicTypeConverter().convertStringToPrimitive(object, toType);
        assertEquals(Short.valueOf((String) object), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Integer_iawS4() throws Exception {
        Object object = new Object();
        Class toType = Integer.class;
        Object result = new BasicTypeConverter().convertStringToPrimitive(object, toType);
        assertEquals(Integer.valueOf((String) object), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Long_WdJm5() throws Exception {
        Object object = new Object();
        Class toType = Long.class;
        Object result = new BasicTypeConverter().convertStringToPrimitive(object, toType);
        assertEquals(Long.valueOf((String) object), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Float_ouNz6() throws Exception {
        Object object = new Object();
        Class toType = Float.class;
        Object result = new BasicTypeConverter().convertStringToPrimitive(object, toType);
        assertEquals(Float.valueOf((String) object), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Double_WMbQ7() throws Exception {
        Object object = new Object();
        Class toType = Double.class;
        Object result = new BasicTypeConverter().convertStringToPrimitive(object, toType);
        assertEquals(Double.valueOf((String) object), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Null_RDeO8() throws Exception {
        Object object = new Object();
        Class toType = null;
        Object result = new BasicTypeConverter().convertStringToPrimitive(object, toType);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_InvalidType_vMyU9() throws Exception {
        Object object = new Object();
        Class toType = String.class;
        Object result = new BasicTypeConverter().convertStringToPrimitive(object, toType);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateNumberTest1_OhAx0() throws Exception {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Number result = basicTypeConverter.allocateNumber(Byte.class, 0.0);
        assertEquals(Byte.valueOf((byte) 0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateNumberTest2_BROA1() throws Exception {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Number result = basicTypeConverter.allocateNumber(Short.class, 0.0);
        assertEquals(Short.valueOf((short) 0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateNumberTest3_lYWl2() throws Exception {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Number result = basicTypeConverter.allocateNumber(Integer.class, 0.0);
        assertEquals(Integer.valueOf((int) 0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateNumberTest4_TvGl3() throws Exception {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Number result = basicTypeConverter.allocateNumber(Long.class, 0.0);
        assertEquals(Long.valueOf((long) 0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateNumberTest5_ylTL4() throws Exception {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Number result = basicTypeConverter.allocateNumber(Float.class, 0.0);
        assertEquals(Float.valueOf((float) 0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateNumberTest6_XFlE5() throws Exception {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Number result = basicTypeConverter.allocateNumber(Double.class, 0.0);
        assertEquals(Double.valueOf(0.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateNumberTest7_tlQx6() throws Exception {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Number result = basicTypeConverter.allocateNumber(BigInteger.class, 0.0);
        assertEquals(BigInteger.valueOf((long) 0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateNumberTest8_MGRI7() throws Exception {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Number result = basicTypeConverter.allocateNumber(BigDecimal.class, 0.0);
        assertEquals(new BigDecimal(0.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateNumberTest9_wpWS8() throws Exception {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Number result = basicTypeConverter.allocateNumber(Class.class, 0.0);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateNumberTest10_xvVe9() throws Exception {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Number result = basicTypeConverter.allocateNumber(Byte.class, 1.0);
        assertEquals(Byte.valueOf((byte) 1), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateNumberTest11_DVcX10() throws Exception {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Number result = basicTypeConverter.allocateNumber(Short.class, 1.0);
        assertEquals(Short.valueOf((short) 1), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateNumberTest12_cypr11() throws Exception {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Number result = basicTypeConverter.allocateNumber(Integer.class, 1.0);
        assertEquals(Integer.valueOf((int) 1), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithNullObjectAndType_eruX0() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert(null, null);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithNonNullObjectAndNullType_kGOw1() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert(new Object(), null);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithNullObjectAndNonNullType_wsmi2() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert(null, String.class);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithNonNullObjectAndNonNullType_mrUe3() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert(new Object(), String.class);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithArrayAndType_FRQL4() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert(new Object[0], Object.class);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithCollectionAndType_Enlu5() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert(new ArrayList<>(), Object.class);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithBooleanAndNumberType_LJAO8() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert(true, Integer.class);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithNumberAndBooleanType_HUin9() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert(1, Boolean.class);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithStringAndBooleanType_NtGr10() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert("true", Boolean.class);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithStringAndCharacterType_vsWI11() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert("a", Character.class);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithStringAndByteType_KlON12() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert("1", Byte.class);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithStringAndShortType_Ccmj13() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert("1", Short.class);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithStringAndIntegerType_KVia14() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert("1", Integer.class);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithStringAndLongType_hnDw15() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert("1", Long.class);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithStringAndFloatType_HDkG16() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert("1.0", Float.class);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithStringAndDoubleType_RtQQ17() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert("1.0", Double.class);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithArrayAndArrayType_CaaK18() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert(new Object[0], String[].class);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithArrayAndCollectionType_CYYN19() throws Exception {
        BasicTypeConverter cut = new BasicTypeConverter();
        boolean result = cut.canConvert(new Object[0], ArrayList.class);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertObjectToObject_qOPh2() throws Exception {
        assertEquals(new Object(), new BasicTypeConverter().convert(new Object(), Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToArray_OyUo3() throws Exception {
        Object[] array = new Object[0];
        assertEquals(array, new BasicTypeConverter().convert(array, array.getClass()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertCollectionToCollection_RsLZ4() throws Exception {
        List<Object> list = new ArrayList<Object>();
        assertEquals(list, new BasicTypeConverter().convert(list, list.getClass()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertObjectToArray_cuHZ7() throws Exception {
        Object[] array = new Object[1];
        assertEquals(array, new BasicTypeConverter().convert(new Object(), array.getClass()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertObjectToCollection_rqpk8() throws Exception {
        List<Object> list = new ArrayList<Object>();
        assertEquals(list, new BasicTypeConverter().convert(new Object(), list.getClass()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToCollection_xItO9() throws Exception {
        Object[] array = new Object[1];
        assertEquals(Arrays.asList(array), new BasicTypeConverter().convert(array, List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertCollectionToArray_bXMr10() throws Exception {
        List<Object> list = new ArrayList<Object>();
        assertEquals(list.toArray(), new BasicTypeConverter().convert(list, Object[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertObjectToString_uNHg13() throws Exception {
        assertEquals("string", new BasicTypeConverter().convert(new Object(), String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToNumber_PoYh14() throws Exception {
        assertEquals(new Integer(1), new BasicTypeConverter().convert(Boolean.TRUE, Integer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNumberToBoolean_UWzj15() throws Exception {
        assertEquals(Boolean.TRUE, new BasicTypeConverter().convert(new Integer(1), Boolean.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNumberToNumber_vlEG16() throws Exception {
        assertEquals(new Double(1.0), new BasicTypeConverter().convert(new Integer(1), Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToNumber_Cycn17() throws Exception {
        assertEquals(new Double(1.0), new BasicTypeConverter().convert("1", Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Epyh18() throws Exception {
        assertEquals(new Double(1.0), new BasicTypeConverter().convert("1", double.class));
    }
}