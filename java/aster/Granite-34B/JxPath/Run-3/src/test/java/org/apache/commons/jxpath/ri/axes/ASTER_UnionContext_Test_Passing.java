/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_UnionContext_Test_Passing {
    private EvalContext[] contexts;
    private boolean prepared;
    UnionContext unioncontext;
    @Mock
    NamespaceContext namespaceContext;
    @Mock
    SelfContext selfContext;
    @Mock
    NodeTypeTest nodeTypeTest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_1() throws Exception {
        contexts = new EvalContext[]{mock(EvalContext.class), mock(EvalContext.class)};
        prepared = false;
        unioncontext = new UnionContext(null, contexts);
        // given
        when(contexts[0].nextSet()).thenReturn(true, true, false);
        when(contexts[0].nextNode()).thenReturn(true, true, false);
        when(contexts[0].getCurrentNodePointer()).thenReturn(mock(NodePointer.class));
        when(contexts[1].nextSet()).thenReturn(true, true, false);
        when(contexts[1].nextNode()).thenReturn(true, true, false);
        when(contexts[1].getCurrentNodePointer()).thenReturn(mock(NodePointer.class));
        // when
        boolean result = unioncontext.setPosition(1);
        // then
        verify(contexts[0], times(2)).nextSet();
        verify(contexts[0], times(2)).nextNode();
        verify(contexts[1], times(2)).nextSet();
        verify(contexts[1], times(2)).nextNode();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_2() throws Exception {
        contexts = new EvalContext[]{mock(EvalContext.class), mock(EvalContext.class)};
        prepared = false;
        unioncontext = new UnionContext(null, contexts);
        // given
        when(contexts[0].nextSet()).thenReturn(true, true, false);
        when(contexts[0].nextNode()).thenReturn(true, true, false);
        when(contexts[0].getCurrentNodePointer()).thenReturn(mock(NodePointer.class));
        when(contexts[1].nextSet()).thenReturn(true, true, false);
        when(contexts[1].nextNode()).thenReturn(true, true, false);
        when(contexts[1].getCurrentNodePointer()).thenReturn(mock(NodePointer.class));
        // when
        boolean result = unioncontext.setPosition(1);
        // then
        verify(contexts[0], times(2)).nextSet();
        verify(contexts[0], times(2)).nextNode();
        verify(contexts[1], times(2)).nextSet();
        verify(contexts[1], times(2)).nextNode();
        assertTrue(prepared);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder() throws Exception {
        contexts = new EvalContext[2];
        contexts[0] = namespaceContext;
        contexts[1] = selfContext;
        when(namespaceContext.getDocumentOrder()).thenReturn(1);
        when(selfContext.getDocumentOrder()).thenReturn(2);
        unioncontext = new UnionContext(namespaceContext, contexts);
        assertEquals(1, unioncontext.getDocumentOrder());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDocumentOrder_withOneContext_shouldReturnSuperDocumentOrder_vFKX0() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        SelfContext selfContext = new SelfContext(parentContext, new NodeTypeTest(1));
        EvalContext[] contexts = new EvalContext[]{selfContext};
        UnionContext unionContext = new UnionContext(parentContext, contexts);
        int result = unionContext.getDocumentOrder();
        assertEquals(selfContext.getDocumentOrder(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDocumentOrder_withMoreThanOneContext_shouldReturnOne_vDeD1() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        SelfContext selfContext1 = new SelfContext(parentContext, new NodeTypeTest(1));
        SelfContext selfContext2 = new SelfContext(parentContext, new NodeTypeTest(1));
        EvalContext[] contexts = new EvalContext[]{selfContext1, selfContext2};
        UnionContext unionContext = new UnionContext(parentContext, contexts);
        int result = unionContext.getDocumentOrder();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_AORd0() {
        UnionContext unionContext = new UnionContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new EvalContext[]{});
        int position = 0;
        boolean result = unionContext.setPosition(position);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_AGFZ1() {
        UnionContext unionContext = new UnionContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new EvalContext[]{});
        int position = 1;
        boolean result = unionContext.setPosition(position);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition3_aWmD2() {
        UnionContext unionContext = new UnionContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new EvalContext[]{});
        int position = 2;
        boolean result = unionContext.setPosition(position);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition4_uxxd3() {
        UnionContext unionContext = new UnionContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new EvalContext[]{});
        int position = 3;
        boolean result = unionContext.setPosition(position);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition5_mRKQ4() {
        UnionContext unionContext = new UnionContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new EvalContext[]{});
        int position = 4;
        boolean result = unionContext.setPosition(position);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition6_KjGX5() {
        UnionContext unionContext = new UnionContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new EvalContext[]{});
        int position = 5;
        boolean result = unionContext.setPosition(position);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition7_sLXZ6() {
        UnionContext unionContext = new UnionContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new EvalContext[]{});
        int position = 6;
        boolean result = unionContext.setPosition(position);
        assertEquals(true, result);
    }
}