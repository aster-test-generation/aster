/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

public class Aster_ExtensionFunction_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoArgs_kToI1() {
        final ExtensionFunction extensionFunction = new ExtensionFunction(new QName("qualifiedName"), null);
        final String actual = extensionFunction.toString();
        final String expected = "qualifiedName()";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOneArg_KsmZ2_heIB0() {
        final Expression[] expressions = new Expression[1];
        expressions[0] = mock(Expression.class);
        final ExtensionFunction extensionFunction = new ExtensionFunction(new QName("qualifiedName"), expressions);
        final String actual = extensionFunction.toString();
        final String expected = "qualifiedName( )";
        assertEquals(expected, actual);
    }
}