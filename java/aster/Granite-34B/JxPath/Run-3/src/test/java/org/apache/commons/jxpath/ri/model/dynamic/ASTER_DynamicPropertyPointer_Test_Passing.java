/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPropertyPointer_Test_Passing {
    private DynamicPropertyHandler handler;
    DynamicPropertyPointer dynamicpropertypointer;
    private String[] names;
    private String name;
    private String requiredPropertyName;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private PageContextHandler pageContextHandler;
    boolean expected;
    @Mock
    VariablePointer variableparent;
    private Object bean;
    private String propertyName;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        handler = mock(DynamicPropertyHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, pageContextHandler);
        // Setup
        Object value = new Object();
        when(pageContextHandler.getProperty(any(), any())).thenReturn(value);
        // Exercise
        Object actual = dynamicpropertypointer.getImmediateNode();
        // Verify
        verify(pageContextHandler, times(1)).getProperty(any(), any());
        assertEquals(value, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisContainer() throws Exception {
        parent = mock(DOMNodePointer.class);
        handler = mock(PageContextHandler.class);
        expected = true;
        dynamicpropertypointer = new DynamicPropertyPointer(parent, handler);
        assertEquals(expected, dynamicpropertypointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPropertyName3_NfPU2() throws Exception {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(new VariablePointer(new QName("name")), new PageContextHandler());
        String[] names = dynamicPropertyPointer.getPropertyNames();
        int propertyIndex = dynamicPropertyPointer.getPropertyIndex();
        String name = null;
        if (propertyIndex >= 0 && propertyIndex < names.length) {
            name = names[propertyIndex];
        }
        else {
            name = "*";
        }
        assertEquals(name, dynamicPropertyPointer.getPropertyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount2_uSQL1() throws Exception {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(new VariablePointer(new QName("")), new PageContextHandler());
        int actual = dynamicPropertyPointer.getPropertyCount();
        int expected = dynamicPropertyPointer.getPropertyNames().length;
        assertEquals(expected, actual);
    }
}