/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.util.ClassLoaderUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathIntrospector_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterAtomicClass_IHZT0() throws Exception {
        Class beanClass = Object.class;
        JXPathIntrospector.registerAtomicClass(beanClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanInfo_RlWu0() throws Exception {
        JXPathBeanInfo beanInfo = JXPathIntrospector.getBeanInfo(JXPathBeanInfo.class);
        assertNotNull(beanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanInfo2_oOYi1() throws Exception {
        JXPathBeanInfo beanInfo = JXPathIntrospector.getBeanInfo(JXPathIntrospector.class);
        assertNotNull(beanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanInfo3_PxMz2() throws Exception {
        JXPathBeanInfo beanInfo = JXPathIntrospector.getBeanInfo(JXPathBasicBeanInfo.class);
        assertNotNull(beanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanInfo4_wKec3() throws Exception {
        JXPathBeanInfo beanInfo = JXPathIntrospector.getBeanInfo(ClassLoaderUtil.class);
        assertNotNull(beanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfo_bFIu0() throws Exception {
        JXPathBeanInfo beanInfo = JXPathIntrospector.getBeanInfo(Class.class);
        assertNotNull(beanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfo_With_Null_Argument_UEOD1() throws Exception {
        try {
            JXPathIntrospector.getBeanInfo(null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfo_With_Existing_BeanInfo_In_Cache_JkCQ5() throws Exception {
        JXPathIntrospector.getBeanInfo(Class.class);
        JXPathBeanInfo beanInfo = JXPathIntrospector.getBeanInfo(Class.class);
        assertNotNull(beanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanInfoClass_iSUl1() throws Exception {
        Class<JXPathBeanInfo> beanClass = JXPathBeanInfo.class;
        JXPathBeanInfo beanInfo = JXPathIntrospector.getBeanInfo(beanClass);
        Assertions.assertNotNull(beanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanInfoClass2_fogp2() throws Exception {
        Class<JXPathIntrospector> beanClass = JXPathIntrospector.class;
        JXPathBeanInfo beanInfo = JXPathIntrospector.getBeanInfo(beanClass);
        Assertions.assertNotNull(beanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanInfoClass3_EzVP3() throws Exception {
        Class<JXPathBasicBeanInfo> beanClass = JXPathBasicBeanInfo.class;
        JXPathBeanInfo beanInfo = JXPathIntrospector.getBeanInfo(beanClass);
        Assertions.assertNotNull(beanInfo);
    }
}