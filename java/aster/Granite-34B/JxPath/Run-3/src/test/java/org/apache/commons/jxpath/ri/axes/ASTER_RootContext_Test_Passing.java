/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RootContext_Test_Passing {
    RootContext rootcontext;
    private JXPathContextReferenceImpl jxpathContext;
    private DOMNodePointer pointer;
    private DOMNodePointer domNodePointer;
    private JXPathContext jxpathContext1;
    private String id;
    private Object object;
    private NodePointer nodePointer;
    private List list;
    private int i;
    private int i1;
    private int i2;
    private int i3;
    private int i4;
    private int i5;
    private int i6;
    private int i7;
    private int i8;
    private int i9;
    private int i10;
    private int i11;
    private int i12;
    private int i13;
    private int i14;
    private int i15;
    private int i16;
    private int i17;
    private int i18;
    private int i19;
    private int i20;
    private int i21;
    private int i22;
    private int i23;
    private int i24;
    private int i25;
    private int i26;
    private int i27;
    private int i28;
    private int i29;
    private int i30;
    private int i31;
    private int i32;
    private int i33;
    private int i34;
    private int i35;
    private int i36;
    private int i37;
    private int i38;
    private int i39;
    private int i40;
    private int i41;
    private int i42;
    private int i43;
    private int i44;
    private int i45;
    private int i46;
    private int i47;
    private int i48;
    private int i49;
    private int i50;
    private int i51;
    private int i52;
    private int i53;
    private int i54;
    private int i55;
    private int i56;
    private int i57;
    private int i58;
    private int i59;
    private int i60;
    private int i61;
    private int i62;
    private int i63;
    private int i64;
    private int i65;
    private int i66;
    private int i67;
    private int i68;
    private int i69;
    private int i70;
    private int i71;
    private int i72;
    private int i73;
    private int i74;
    private int i75;
    private int i76;
    private int i77;
    private int i78;
    private int i79;
    private int i80;
    private int i81;
    private int i82;
    private int i83;
    private int i84;
    private int i85;
    private int i86;
    private int i87;
    private int i88;
    private int i89;
    private int i90;
    private int i91;
    private int i92;
    private int i93;
    private int i94;
    private int i95;
    private int i96;
    private int i97;
    private int i98;
    private int i99;
    private int i100;
    private int i101;
    private int i102;
    private int i103;
    private int i104;
    private int i105;
    private int i106;
    private int i107;
    private int i108;
    private int i109;
    private int i110;
    private int i111;
    private int i112;
    private int i113;
    private int i114;
    private int i115;
    private int i116;
    private int i117;
    private int i118;
    private int i119;
    private int i120;
    private int i121;
    private int i122;
    private int i123;
    private int i124;
    private int i125;
    private int i126;
    private static int MAX_REGISTER = 4;
    private int availableRegister = 0;
    private Object[] registers;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetJXPathContext() throws Exception {
        jxpathContext = mock(JXPathContextReferenceImpl.class);
        pointer = mock(DOMNodePointer.class);
        rootcontext = new RootContext(jxpathContext, pointer);
        JXPathContext jxpathContextResult = rootcontext.getJXPathContext();
        assertEquals(jxpathContext, jxpathContextResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetFunction() throws Exception {
        jxpathContext = mock(JXPathContextReferenceImpl.class);
        pointer = mock(DOMNodePointer.class);
        rootcontext = new RootContext(jxpathContext, pointer);
        // given
        Object[] parameters = {};
        when(jxpathContext.getFunction(any(), eq(parameters))).thenReturn(mock(Function.class));
        // when
        Function function = rootcontext.getFunction(mock(QName.class), parameters);
        // then
        verify(jxpathContext).getFunction(any(), eq(parameters));
        assertNotNull(function);
    }
}