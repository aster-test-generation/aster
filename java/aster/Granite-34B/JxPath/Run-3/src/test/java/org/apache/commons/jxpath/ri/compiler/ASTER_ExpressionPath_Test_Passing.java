/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExpressionPath_Test_Passing {
    ExpressionPath expressionpath;
    EvalContext context;
    Constant expression;
    Expression[] predicates;
    Step[] steps;
    Constant constant;
    NamespaceContext namespaceContext;
    SelfContext selfContext;
    NodeTypeTest nodeTypeTest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        expressionpath = new ExpressionPath(expression, predicates, steps);
        context = mock(EvalContext.class);
        Object result = expressionpath.computeValue(context);
        // Add meaningful assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getExpressionTest_VZCD0() throws Exception {
        Constant constant = new Constant("test");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        Expression expression = expressionPath.getExpression();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_NullContext_Cmog1() throws Exception {
        Constant expression = new Constant("expression");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(expression, predicates, steps);
        Object result = expressionPath.computeValue(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_WithConstantExpression_msbX0() throws Exception {
        Constant constantExpression = new Constant("test");
        ExpressionPath expressionPath = new ExpressionPath(constantExpression, null, null);
        boolean result = expressionPath.computeContextDependent();
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_WithNumberExpression_wKmI1() throws Exception {
        Constant numberExpression = new Constant(10);
        ExpressionPath expressionPath = new ExpressionPath(numberExpression, null, null);
        boolean result = expressionPath.computeContextDependent();
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_Withpredicates_NpqF3() throws Exception {
        Constant constantExpression = new Constant("test");
        ExpressionPath expressionPath = new ExpressionPath(constantExpression, new Expression[]{new Constant(10), new Constant(20)}, null);
        boolean result = expressionPath.computeContextDependent();
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_nLoQ0() throws Exception {
        Constant constant = new Constant("string");
        ExpressionPath expressionPath = new ExpressionPath(constant, new Expression[0], new Step[0]);
        Expression[] actual = expressionPath.getPredicates();
        Expression[] expected = new Expression[0];
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates2_ropq1() throws Exception {
        Number number = new Integer(1);
        ExpressionPath expressionPath = new ExpressionPath(new Constant(number), new Expression[0], new Step[0]);
        Expression[] actual = expressionPath.getPredicates();
        Expression[] expected = new Expression[0];
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ConstantExpression_NoPredicateOrSteps_SmKI0() throws Exception {
        final Constant constant = new Constant("string");
        final ExpressionPath expressionPath = new ExpressionPath(constant, null, null);
        assertEquals("string", expressionPath.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ConstantExpression_WithPredicate_NoSteps_wsem1() throws Exception {
        final Constant constant = new Constant("string");
        final ExpressionPath expressionPath = new ExpressionPath(constant, new Expression[]{new Constant("predicate1"), new Constant("predicate2")}, null);
        assertEquals("string[predicate1][predicate2]", expressionPath.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ExpressionPathExpression_NoPredicateOrSteps_jYrt8() throws Exception {
        final ExpressionPath expressionPath1 = new ExpressionPath(new Constant("string1"), null, null);
        final ExpressionPath expressionPath2 = new ExpressionPath(expressionPath1, null, null);
        assertEquals("(string1)", expressionPath2.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ExpressionPathExpression_WithPredicate_NoSteps_ePow9() throws Exception {
        final ExpressionPath expressionPath1 = new ExpressionPath(new Constant("string1"), null, null);
        final ExpressionPath expressionPath2 = new ExpressionPath(expressionPath1, new Expression[]{new Constant("predicate1"), new Constant("predicate2")}, null);
        assertEquals("(string1)[predicate1][predicate2]", expressionPath2.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath_basicTrue_MCOw0() throws Exception {
        Constant constant = new Constant("expression");
        Expression[] predicates = {};
        Step[] steps = {};
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        assertTrue(expressionPath.isSimpleExpressionPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath_nullConstant_YJFa2() throws Exception {
        Constant constant = null;
        Expression[] predicates = {};
        Step[] steps = {};
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        assertFalse(expressionPath.isSimpleExpressionPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath_nullPredicates_nOVc3() throws Exception {
        Constant constant = new Constant("expression");
        Expression[] predicates = null;
        Step[] steps = {};
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        assertFalse(expressionPath.isSimpleExpressionPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath_nullSteps_kLlz4() throws Exception {
        Constant constant = new Constant("expression");
        Expression[] predicates = {};
        Step[] steps = null;
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        assertFalse(expressionPath.isSimpleExpressionPath());
    }
}