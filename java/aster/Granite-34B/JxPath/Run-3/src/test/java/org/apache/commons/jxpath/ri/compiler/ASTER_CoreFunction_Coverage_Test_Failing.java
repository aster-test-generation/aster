/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreFunction_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionBoolean_assertArgCount_TLgt0() {
        CoreFunction functionBoolean = new CoreFunction(1, new Expression[1]);
        functionBoolean.functionBoolean(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent3_HUqc2() {
        CoreFunction coreFunction = new CoreFunction(3, null);
        boolean actual = coreFunction.computeContextDependent();
        boolean expected = true;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent4_bCQh3() {
        CoreFunction coreFunction = new CoreFunction(4, null);
        boolean actual = coreFunction.computeContextDependent();
        boolean expected = true;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_NKVc0() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
        String actual = coreFunction.toString();
        String expected = "getFunctionName()";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_functionNormalizeSpace_assertArgCount_tuuf0() {
        CoreFunction cf = new CoreFunction(0, null);
        cf.functionNormalizeSpace(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionSum1_qOUa0() {
        CoreFunction cf = new CoreFunction(0, null);
        assertEquals(0, cf.functionSum(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionBoolean_return_sFJu2() {
        CoreFunction functionBoolean = new CoreFunction(1, new Expression[1]);
        functionBoolean.getArg1().computeValue(null);
    }
}