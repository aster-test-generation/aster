/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_NodeTypeTest_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringNode_jlOb0() {
        assertEquals("node", NodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_NODE));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringText_sdlE1() {
        assertEquals("text", NodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_TEXT));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringComment_OAWb2() {
        assertEquals("comment", NodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_COMMENT));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringPI_Yebf3() {
        assertEquals("processing-instruction", NodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_PI));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringDefault_KanW4() {
        assertEquals("UNKNOWN", NodeTypeTest.nodeTypeToString(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_KZJJ0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(0);
        assertEquals("NodeTypeTest(0)()", nodeTypeTest.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_kimh1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        assertEquals("NodeTypeTest(1)()", nodeTypeTest.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_jeHP2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(2);
        assertEquals("NodeTypeTest(2)()", nodeTypeTest.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_wkeb3() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(3);
        assertEquals("NodeTypeTest(3)()", nodeTypeTest.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString5_FeEI4() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(4);
        assertEquals("NodeTypeTest(4)()", nodeTypeTest.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString6_gwha5() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(5);
        assertEquals("NodeTypeTest(5)()", nodeTypeTest.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString7_WbtG6() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(6);
        assertEquals("NodeTypeTest(6)()", nodeTypeTest.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString8_HZKS7() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(7);
        assertEquals("NodeTypeTest(7)()", nodeTypeTest.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString9_DhfP8() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(8);
        assertEquals("NodeTypeTest(8)()", nodeTypeTest.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString10_IXpv9() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(9);
        assertEquals("NodeTypeTest(9)()", nodeTypeTest.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType1_eWIO0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        assertEquals(1, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType2_ZXmE1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(2);
        assertEquals(2, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType3_ZjyX2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(3);
        assertEquals(3, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType4_VBDg3() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(4);
        assertEquals(4, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType5_IEGJ4() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(5);
        assertEquals(5, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType6_ZpzC5() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(6);
        assertEquals(6, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType7_BQzO6() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(7);
        assertEquals(7, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType8_CIPz7() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(8);
        assertEquals(8, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeType9_Vzml8() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(9);
        assertEquals(9, nodeTypeTest.getNodeType());
    }
}