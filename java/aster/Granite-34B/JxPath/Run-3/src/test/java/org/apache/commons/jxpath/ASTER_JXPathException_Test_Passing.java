/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathException_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getExceptionTest1_WLWu0() {
        JXPathException jxPathException = new JXPathException();
        jxPathException.getException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCause1_ziHC0() {
        JXPathException jxPathException = new JXPathException();
        jxPathException.getCause();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCause2_lSAR1() {
        JXPathException jxPathException = new JXPathException("msg");
        jxPathException.getCause();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCause3_qATA2() {
        JXPathException jxPathException = new JXPathException("msg", new Throwable());
        jxPathException.getCause();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCause4_JLrG3() {
        JXPathException jxPathException = new JXPathException(new Throwable());
        jxPathException.getCause();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMessage_whenNoException_thenReturnsSuperMessage_GumR0() {
        JXPathException jxpathException = new JXPathException("msg");
        assertEquals("msg", jxpathException.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMessage_whenSuperMessageAndException_thenReturnsBothMessages_Cphv1() {
        JXPathException jxpathException = new JXPathException("msg", new Throwable("eMsg"));
        assertEquals("msg; eMsg", jxpathException.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMessage_whenNoSuperMessageAndException_thenReturnsExceptionMessage_YGAN2() {
        JXPathException jxpathException = new JXPathException(new Throwable("eMsg"));
        assertEquals("eMsg", jxpathException.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMessage_whenNoSuperMessageAndNoException_thenReturnsNull_dgSP3() {
        JXPathException jxpathException = new JXPathException();
        assertNull(jxpathException.getMessage());
    }
}