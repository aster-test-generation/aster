/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointerFactory_Test_Passing {
    VariablePointerFactory variablepointerfactory;
    NodePointer parent;
    QName name;
    Object object;
    private VariablePointerFactory factory;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodePointer() throws Exception {
        parent = mock(NodePointer.class);
        name = mock(QName.class);
        object = new Object();
        variablepointerfactory = new VariablePointerFactory();
        NodePointer nodePointer = variablepointerfactory.createNodePointer(parent, name, object);
        Assertions.assertEquals(parent, nodePointer.getParent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrder_Fivp0() throws Exception {
        VariablePointerFactory variablePointerFactory = new VariablePointerFactory();
        int order = variablePointerFactory.getOrder();
        assert order == VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_IKvy0() throws Exception {
        factory = new VariablePointerFactory();
    }
}