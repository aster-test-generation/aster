/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicNodeSet_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointers_uDix0_1() throws Exception {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List pointers = basicNodeSet.getPointers();
        assertNotNull(pointers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointers_uDix0_2() throws Exception {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List pointers = basicNodeSet.getPointers();
        assertEquals(Collections.emptyList(), pointers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodes_whenNodesAreNull_thenCreateNewList_dJuJ0() throws Exception {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        basicNodeSet.getNodes();
        assertNotNull(basicNodeSet.getNodes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddWithNullPointer_Uqwt3() throws Exception {
        Pointer pointer = null;
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        try {
            basicNodeSet.add(pointer);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Pointer cannot be null", e.getMessage());
        }
    }
}