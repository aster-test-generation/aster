/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AncestorContext_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_1_mvGZ0() {
        AncestorContext context = new AncestorContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        context.setPosition(1);
        assertEquals(1, context.getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_2_ZkBa1() {
        AncestorContext context = new AncestorContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        context.setPosition(1);
        context.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_3_UZLj2() {
        AncestorContext context = new AncestorContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        context.setPosition(1);
        while (context.getCurrentPosition() < 1) {
            if (!context.nextNode()) {
                return;
            }
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_4_VmkX3() {
        AncestorContext context = new AncestorContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        context.setPosition(1);
        context.reset();
        while (context.getCurrentPosition() < 1) {
            if (!context.nextNode()) {
                return;
            }
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_5_pyDv4() {
        AncestorContext context = new AncestorContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        context.setPosition(1);
        context.reset();
        while (context.getCurrentPosition() < 1) {
            if (!context.nextNode()) {
                return;
            }
        }
        context.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_6_BCbR5() {
        AncestorContext context = new AncestorContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        context.setPosition(1);
        context.reset();
        while (context.getCurrentPosition() < 1) {
            if (!context.nextNode()) {
                return;
            }
        }
        context.reset();
        while (context.getCurrentPosition() < 1) {
            if (!context.nextNode()) {
                return;
            }
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_1_mvGZ0_fid1() {
        AncestorContext context = new AncestorContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        context.setPosition(1);
    }
}