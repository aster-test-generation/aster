/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithNoParameters_YrAf0() {
        Class targetClass = Object.class;
        String name = "toString";
        Object[] parameters = {};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals("toString", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithOneParameter_ITFd1() {
        Class targetClass = Integer.class;
        String name = "parseInt";
        Object[] parameters = {"10"};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals("parseInt", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithTwoParameters_YAWq2() {
        Class targetClass = String.class;
        String name = "format";
        Object[] parameters = {"%s", "Hello"};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals("format", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithThreeParameters_WGxp3() {
        Class targetClass = Math.class;
        String name = "max";
        Object[] parameters = {10, 5};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals("max", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithFourParameters_QCkk4() {
        Class targetClass = System.class;
        String name = "currentTimeMillis";
        Object[] parameters = {};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals("currentTimeMillis", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithFiveParameters_uExt5() {
        Class targetClass = Thread.class;
        String name = "sleep";
        Object[] parameters = {1000L};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals("sleep", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithSixParameters_zMio6() {
        Class targetClass = Arrays.class;
        String name = "asList";
        Object[] parameters = {"a", "b"};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals("asList", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithSevenParameters_Pkqz7() {
        Class targetClass = Collections.class;
        String name = "sort";
        Object[] parameters = {new ArrayList<String>(Arrays.asList("a", "b"))};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals("sort", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithEightParameters_VgbX8() {
        Class targetClass = Collections.class;
        String name = "shuffle";
        Object[] parameters = {new ArrayList<String>(Arrays.asList("a", "b"))};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals("shuffle", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithNineParameters_WJzt9() {
        Class targetClass = Collections.class;
        String name = "binarySearch";
        Object[] parameters = {new ArrayList<String>(Arrays.asList("a", "b")), "a"};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals("binarySearch", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithTenParameters_HnDr10() {
        Class targetClass = Collections.class;
        String name = "frequency";
        Object[] parameters = {new ArrayList<String>(Arrays.asList("a", "b")), "a"};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals("frequency", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithElevenParameters_sLEy11() {
        Class targetClass = Collections.class;
        String name = "reverse";
        Object[] parameters = {new ArrayList<String>(Arrays.asList("a", "b"))};
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertEquals("reverse", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNoParameters_cbuW0() {
        Method method = MethodLookupUtils.lookupMethod(null, "", null);
        Assertions.assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithOneNullParameter_Tqcu1() {
        Method method = MethodLookupUtils.lookupMethod(null, "", new Object[]{null});
        Assertions.assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithOneValidParameter_SzFh2() {
        Object object = new Object();
        Method method = MethodLookupUtils.lookupMethod(object.getClass(), "toString", new Object[]{object});
        Assertions.assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithTwoValidParameters_QyWK3() {
        Object object = new Object();
        Method method = MethodLookupUtils.lookupMethod(object.getClass(), "wait", new Object[]{object, 1000});
        Assertions.assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithThreeValidParameters_vRCz4() {
        Object object = new Object();
        Method method = MethodLookupUtils.lookupMethod(object.getClass(), "wait", new Object[]{object, 1000, 1});
        Assertions.assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithFourValidParameters_ZDGb5() {
        Object object = new Object();
        Method method = MethodLookupUtils.lookupMethod(object.getClass(), "wait", new Object[]{object, 1000, 1, false});
        Assertions.assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithFiveValidParameters_foMN6() {
        Object object = new Object();
        Method method = MethodLookupUtils.lookupMethod(object.getClass(), "wait", new Object[]{object, 1000, 1, false, true});
        Assertions.assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithSixValidParameters_Hvle7() {
        Object object = new Object();
        Method method = MethodLookupUtils.lookupMethod(object.getClass(), "wait", new Object[]{object, 1000, 1, false, true, false});
        Assertions.assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithSevenValidParameters_tcsZ8() {
        Object object = new Object();
        Method method = MethodLookupUtils.lookupMethod(object.getClass(), "wait", new Object[]{object, 1000, 1, false, true, false, 10});
        Assertions.assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithEightValidParameters_jMxD9() {
        Object object = new Object();
        Method method = MethodLookupUtils.lookupMethod(object.getClass(), "wait", new Object[]{object, 1000, 1, false, true, false, 10, 20});
        Assertions.assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNineValidParameters_eOKU10() {
        Object object = new Object();
        Method method = MethodLookupUtils.lookupMethod(object.getClass(), "wait", new Object[]{object, 1000, 1, false, true, false, 10, 20, 30});
        Assertions.assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithTenValidParameters_YJXU11() {
        Object object = new Object();
        Method method = MethodLookupUtils.lookupMethod(object.getClass(), "wait", new Object[]{object, 1000, 1, false, true, false, 10, 20, 30, 40});
        Assertions.assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithElevenValidParameters_UsAK12() {
        Object object = new Object();
        Method method = MethodLookupUtils.lookupMethod(object.getClass(), "wait", new Object[]{object, 1000, 1, false, true, false, 10, 20, 30, 40, 50});
        Assertions.assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithTwelveValidParameters_XPcj13() {
        Object object = new Object();
        Method method = MethodLookupUtils.lookupMethod(object.getClass(), "wait", new Object[]{object, 1000, 1, false, true, false, 10, 20, 30, 40, 50, 60});
        Assertions.assertNotNull(method);
    }
}