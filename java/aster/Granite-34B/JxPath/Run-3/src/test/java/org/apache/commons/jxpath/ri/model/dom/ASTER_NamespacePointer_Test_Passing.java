/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespacePointer_Test_Passing {
    NamespacePointer namespacepointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        when(parent.isCollection()).thenReturn(true);
        namespacepointer = new NamespacePointer(parent, "prefix", "namespaceURI");
        assertTrue(namespacepointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withNoParent_pupX0() throws Exception {
        NamespacePointer pointer = new NamespacePointer(null, "prefix", "namespaceURI");
        assertEquals("namespace::prefix", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withParent_MQRF1() throws Exception {
        NamespacePointer parent = new NamespacePointer(null, "parentPrefix", "parentNamespaceURI");
        NamespacePointer pointer = new NamespacePointer(parent, "prefix", "namespaceURI");
        assertEquals("namespace::prefix", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_withParentAndNoNamespaceURI_aCsg3() throws Exception {
        NamespacePointer parent = new NamespacePointer(null, "parentPrefix", "parentNamespaceURI");
        NamespacePointer pointer = new NamespacePointer(parent, "prefix", null);
        assertEquals("namespace::prefix", pointer.asPath());
    }
}