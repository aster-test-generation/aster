/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ParentContext_Test_Passing {
    @Mock
    NamespaceContext namespaceContext;
    @Mock
    SelfContext selfContext;
    @Mock
    NodeTypeTest nodeTypeTest;
    ParentContext parentcontext;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    private NodeTest nodeTest;
    NamespaceContext namespacecontext;
    SelfContext selfcontext;
    NodeTypeTest nodetypetest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder() throws Exception {
        NamespaceContext namespacecontext = new NamespaceContext(Mockito.mock(SelfContext.class), new NodeTypeTest(0));
        parentcontext = new ParentContext(namespacecontext, new NodeTypeTest(0));
        assertEquals(-1, parentcontext.getDocumentOrder());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCurrentNodePointer() throws Exception {
        parentcontext = new ParentContext(null, new NodeTypeTest(1));
        currentNodePointer = mock(NodePointer.class);
        when(currentNodePointer.getName()).thenReturn(new QName("name"));
        when(currentNodePointer.getNamespaceURI()).thenReturn("namespaceURI");
        assertEquals(currentNodePointer, parentcontext.getCurrentNodePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ajBR0() throws Exception {
        ParentContext parentContext = new ParentContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        int position = 1;
        boolean expected = true;
        boolean actual = parentContext.setPosition(position);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_xbXc1() throws Exception {
        ParentContext parentContext = new ParentContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        int position = 0;
        boolean expected = false;
        boolean actual = parentContext.setPosition(position);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_nVMl0() throws Exception {
        ParentContext parentContext = new ParentContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        boolean result = parentContext.nextNode();
        assertEquals(false, result);
    }
}