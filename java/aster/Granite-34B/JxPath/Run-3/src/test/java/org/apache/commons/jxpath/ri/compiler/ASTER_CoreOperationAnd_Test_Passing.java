/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationAnd_Test_Passing {
    @Mock
    private EvalContext context;
    @Mock
    private Expression[] args;
    private CoreOperationAnd coreoperationand;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue_1() throws Exception {
        coreoperationand = new CoreOperationAnd(args);
        for (final Expression arg : args) {
            when(arg.computeValue(context)).thenReturn(Boolean.TRUE);
        }
        for (final Expression arg : args) {
            when(arg.computeValue(context)).thenReturn(Boolean.FALSE);
        }
        assertEquals(Boolean.TRUE, coreoperationand.computeValue(context));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue_2() throws Exception {
        coreoperationand = new CoreOperationAnd(args);
        for (final Expression arg : args) {
            when(arg.computeValue(context)).thenReturn(Boolean.TRUE);
        }
        for (final Expression arg : args) {
            when(arg.computeValue(context)).thenReturn(Boolean.FALSE);
        }
        assertEquals(Boolean.FALSE, coreoperationand.computeValue(context));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_getSymbol_MYTQ0() throws Exception {
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(new Expression[0]);
        assertEquals("and", coreOperationAnd.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_dZip0() throws Exception {
        Expression[] args = new Expression[1];
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(args);
        boolean result = coreOperationAnd.isSymmetric();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric2_fyWW1() throws Exception {
        Expression[] args = new Expression[2];
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(args);
        boolean result = coreOperationAnd.isSymmetric();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric3_GrsQ2() throws Exception {
        Expression[] args = new Expression[3];
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(args);
        boolean result = coreOperationAnd.isSymmetric();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric4_RMzA3() throws Exception {
        Expression[] args = new Expression[4];
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(args);
        boolean result = coreOperationAnd.isSymmetric();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric5_xneU4() throws Exception {
        Expression[] args = new Expression[5];
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(args);
        boolean result = coreOperationAnd.isSymmetric();
        assertTrue(result);
    }
}