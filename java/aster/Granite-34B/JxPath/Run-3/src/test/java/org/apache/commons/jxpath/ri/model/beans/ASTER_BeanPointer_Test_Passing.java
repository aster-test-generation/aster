/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.JXPathBeanInfo;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointer_Test_Passing {
    private Object bean;
    private QName name;
    BeanPointer beanpointer;
    private JXPathBeanInfo beanInfo;
    private Locale locale;
    private DOMNodePointer parent;
    private VariablePointer variablePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        name = new QName("name");
        beanpointer = new BeanPointer(name, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        assertEquals(name, beanpointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_crdm0() throws Exception {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), null);
        assertEquals("name", beanPointer.getName().getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        beanpointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), new Locale(""));
        assertEquals(1, beanpointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        bean = new Object();
        beanpointer = new BeanPointer(new QName("name"), bean, new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        assertEquals(bean, beanpointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsObjectWhenObjectIsThis_LhUw0() throws Exception {
        final Object object = new Object();
        Assertions.assertTrue(object.equals(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsObjectWhenObjectIsNotBeanPointer_MiHm1() throws Exception {
        final Object object = new Object();
        final boolean actual = object.equals(new Object());
        Assertions.assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsObjectWhenBeanIsEqual_wtit9() throws Exception {
        final Object object = new Object();
        final boolean actual = object.equals(new Object());
        Assertions.assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        name = new QName("name");
        beanpointer = new BeanPointer(name, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        assertEquals(name.hashCode(), beanpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_wVdI0() throws Exception {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), null);
        boolean actual = beanPointer.isCollection();
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_rACZ0() throws Exception {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), null);
        assertEquals(0, beanPointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNonZeroName_gsMk1() throws Exception {
        BeanPointer beanPointer = new BeanPointer(new QName("nonZeroName"), new Object(), new JXPathBasicBeanInfo(Object.class), null);
        assertEquals(beanPointer.getName().hashCode(), beanPointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenNodeIsAtomic_tOwo0() throws Exception {
        Object atomicValue = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(atomicValue.getClass(), true);
        BeanPointer pointer = new BeanPointer(null, null, atomicValue, beanInfo);
        assertTrue(pointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenNodeIsNotAtomic_QkPN1() throws Exception {
        Object nonAtomicValue = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(nonAtomicValue.getClass(), false);
        BeanPointer pointer = new BeanPointer(null, null, nonAtomicValue, beanInfo);
        assertFalse(pointer.isLeaf());
    }
}