/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithArray_Szcz0() {
        Object value = new Object[0];
        boolean actual = ValueUtils.isCollection(value);
        boolean expected = true;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValuesWithNullInputs_awTj2() {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = null;
        Object value = new Object();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCollectionHint_isArray_IlPP0() {
        Class clazz = new String[0].getClass();
        int actual = ValueUtils.getCollectionHint(clazz);
        assertEquals(1, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCollectionHint_isAssignableFrom_GijA1() {
        Class clazz = ArrayList.class;
        int actual = ValueUtils.getCollectionHint(clazz);
        assertEquals(1, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCollectionHint_isPrimitive_gXnM2() {
        Class clazz = int.class;
        int actual = ValueUtils.getCollectionHint(clazz);
        assertEquals(-1, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCollectionHint_isInterface_yRCX3() {
        Class clazz = Iterable.class;
        int actual = ValueUtils.getCollectionHint(clazz);
        assertEquals(0, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCollectionHint_isFinal_WNfh4() {
        Class clazz = String.class;
        int actual = ValueUtils.getCollectionHint(clazz);
        assertEquals(-1, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCollectionHint_else_WfXh5() {
        Class clazz = Object.class;
        int actual = ValueUtils.getCollectionHint(clazz);
        assertEquals(0, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_tOvZ0() {
        Object collection = null;
        assertEquals(0, ValueUtils.getLength(collection));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_ssky1() {
        Object collection = new Object[10];
        assertEquals(10, ValueUtils.getLength(collection));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_DXCK2() {
        Object collection = new ArrayList<>();
        assertEquals(0, ValueUtils.getLength(collection));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_inXy3() {
        Object collection = new ArrayList<>();
        ((List) collection).add("a");
        assertEquals(1, ValueUtils.getLength(collection));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_mHGs4() {
        Object collection = new int[10];
        assertEquals(10, ValueUtils.getLength(collection));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_mrhh5() {
        Object collection = new int[0];
        assertEquals(0, ValueUtils.getLength(collection));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_RuHJ0() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithNullCollection_ZWvL0() {
        Object collection = null;
        int size = 10;
        Object result = ValueUtils.expandCollection(collection, size);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithSmallerSize_kOWI1() {
        Object collection = new Object[5];
        int size = 3;
        try {
            ValueUtils.expandCollection(collection, size);
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithArray_RCQX2() {
        Object collection = new Object[5];
        int size = 10;
        Object result = ValueUtils.expandCollection(collection, size);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithCollection_rWZV3() {
        Collection collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        int size = 10;
        Object result = ValueUtils.expandCollection(collection, size);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithUnsupportedType_qYWR4() {
        Object collection = new HashMap<>();
        int size = 10;
        try {
            ValueUtils.expandCollection(collection, size);
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_setValue_001_BxuH0() throws Exception {
        Object collection = new Object();
        int index = 0;
        Object value = new Object();
        ValueUtils.setValue(collection, index, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_setValue_002_wTOR1() throws Exception {
        Object collection = null;
        int index = 0;
        Object value = new Object();
        ValueUtils.setValue(collection, index, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_zxPX0() {
        Method method = null;
        assertEquals(method, ValueUtils.getAccessibleMethod(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_KbJf2() {
        Method method = null;
        assertEquals(method, ValueUtils.getAccessibleMethod(method));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullCollection_PpdP0() {
        Object collection = null;
        int index = 0;
        Object value = ValueUtils.getValue(collection, index);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithArrayCollection_ANWN1() {
        Object[] array = {1, 2, 3};
        int index = 1;
        Object value = ValueUtils.getValue(array, index);
        assertEquals(2, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNegativeIndex_LVEX2() {
        Object[] array = {1, 2, 3};
        int index = -1;
        Object value = ValueUtils.getValue(array, index);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithIndexGreaterThanArrayLength_VLOu3() {
        Object[] array = {1, 2, 3};
        int index = 3;
        Object value = ValueUtils.getValue(array, index);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithListCollection_TouI4() {
        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        int index = 1;
        Object value = ValueUtils.getValue(list, index);
        assertEquals(2, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithIndexGreaterThanListSize_Reag5() {
        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        int index = 3;
        Object value = ValueUtils.getValue(list, index);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithCollectionCollection_wckj6() {
        Collection<Integer> collection = new ArrayList<>(Arrays.asList(1, 2, 3));
        int index = 1;
        Object value = ValueUtils.getValue(collection, index);
        assertEquals(2, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithIndexGreaterThanCollectionSize_nauc7() {
        Collection<Integer> collection = new ArrayList<>(Arrays.asList(1, 2, 3));
        int index = 3;
        Object value = ValueUtils.getValue(collection, index);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyCollection_hAHP8() {
        Collection<Integer> collection = new ArrayList<>();
        int index = 0;
        Object value = ValueUtils.getValue(collection, index);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterate1_puZW0() {
        Object collection = null;
        Iterator result = ValueUtils.iterate(collection);
        assert(result == Collections.EMPTY_LIST.iterator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterate2_vqAs1() {
        String[] collection = new String[0];
        Iterator result = ValueUtils.iterate(collection);
        assert(result == Collections.EMPTY_LIST.iterator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterate3_mIer2() {
        String[] collection = new String[2];
        Iterator result = ValueUtils.iterate(collection);
        ArrayList<String> expected = new ArrayList<String>();
        expected.add(collection[0]);
        expected.add(collection[1]);
        assert(result.next() == expected.get(0));
        assert(result.next() == expected.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterate5_PtlP4() {
        String collection = "test";
        Iterator result = ValueUtils.iterate(collection);
        ArrayList<String> expected = new ArrayList<String>();
        expected.add(collection);
        assert(result.next() == expected.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterate6_vMwO5() {
        int[] collection = new int[0];
        Iterator result = ValueUtils.iterate(collection);
        assert(result == Collections.EMPTY_LIST.iterator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterate9_TVzZ8() {
        Integer collection = 10;
        Iterator result = ValueUtils.iterate(collection);
        ArrayList<Integer> expected = new ArrayList<Integer>();
        expected.add(collection);
        assert(result.next() == expected.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterate10_UzbC9() {
        double[] collection = new double[0];
        Iterator result = ValueUtils.iterate(collection);
        assert(result == Collections.EMPTY_LIST.iterator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_JYIU1_tKwW0() {
        Method method = null;
        Method accessibleMethod = ValueUtils.getAccessibleMethod(method);
        assertEquals(method, accessibleMethod);
    }
}