/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_InfoSetUtil_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueForNumber_rMbn0() throws Exception {
        Number number = new Double(1.0);
        assertTrue(InfoSetUtil.booleanValue(number));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueForBoolean_GpgQ1() throws Exception {
        Boolean bool = new Boolean(true);
        assertTrue(InfoSetUtil.booleanValue(bool));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueForString_Dihj3() throws Exception {
        String str = "test";
        assertTrue(InfoSetUtil.booleanValue(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueForNullObject_nmaR5() throws Exception {
        Object obj = null;
        assertTrue(InfoSetUtil.booleanValue(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithNumberObject_Oqqp0() throws Exception {
        Object object = new Double(42.0);
        assertEquals(42.0, InfoSetUtil.doubleValue(object), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithBooleanObject_kvvN1() throws Exception {
        Object object = new Boolean(true);
        assertEquals(0.0, InfoSetUtil.doubleValue(object), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithStringObject_Auvt2() throws Exception {
        Object object = "42.0";
        assertEquals(42.0, InfoSetUtil.doubleValue(object), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithUnsupportedObject_dzxM5() throws Exception {
        Object object = new Object();
        assertEquals(Double.NaN, InfoSetUtil.doubleValue(object), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithNumberObject_wIyO0() throws Exception {
        Object object = new Double(3.14);
        Number actual = InfoSetUtil.number(object);
        assertEquals(3.14, actual.doubleValue(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithBooleanObject_wxHz1() throws Exception {
        Object object = new Boolean(true);
        Number actual = InfoSetUtil.number(object);
        assertEquals(1, actual.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithStringObject_vKni2() throws Exception {
        Object object = "123";
        Number actual = InfoSetUtil.number(object);
        assertEquals(123, actual.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithStringValueObject_GPNP5() throws Exception {
        Object object = "abc";
        Number actual = InfoSetUtil.number(object);
        assertEquals(0, actual.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithNullObject_TWAm6() throws Exception {
        Object object = null;
        Number actual = InfoSetUtil.number(object);
        assertEquals(0, actual.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithStringObject_ICky0() throws Exception {
        Object object = "test";
        String expected = "test";
        String actual = InfoSetUtil.stringValue(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithNumberObject_jFzm1() throws Exception {
        Object object = 123;
        String expected = "123";
        String actual = InfoSetUtil.stringValue(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithBooleanObject_eFRv2() throws Exception {
        Object object = true;
        String expected = "true";
        String actual = InfoSetUtil.stringValue(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithNullObject_nWYC3() throws Exception {
        Object object = null;
        String expected = "";
        String actual = InfoSetUtil.stringValue(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithUnsupportedObject_xbsG6() throws Exception {
        Object object = new Object();
        String expected = "object";
        String actual = InfoSetUtil.stringValue(object);
        assertEquals(expected, actual);
    }
}