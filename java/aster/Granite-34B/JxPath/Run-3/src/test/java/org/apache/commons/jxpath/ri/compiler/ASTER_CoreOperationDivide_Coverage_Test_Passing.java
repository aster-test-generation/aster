/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationDivide_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSymbol_0_schR0() throws Exception {
        final Constant constant_1 = new Constant("string");
        final Constant constant_0 = new Constant(1);
        final CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant_0, constant_1);
        final String result = coreOperationDivide.getSymbol();
        assertEquals("div", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getPrecedenceTest1_evUH0() {
        Constant constant1 = new Constant("string");
        Constant constant2 = new Constant(1);
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        int expected = 5;
        int actual = coreOperationDivide.getPrecedence();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric0_DwaD0() {
        Constant constant0 = new Constant("string");
        Constant constant1 = new Constant(0.0);
        CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant1);
        boolean result = coreOperationDivide0.isSymmetric();
        boolean expected = false;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric1_OZox1() {
        Constant constant0 = new Constant(0.0);
        Constant constant1 = new Constant(0.0);
        CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant1);
        boolean result = coreOperationDivide0.isSymmetric();
        boolean expected = false;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric2_hZlE2() {
        Constant constant0 = new Constant(0.0);
        Constant constant1 = new Constant("string");
        CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant1);
        boolean result = coreOperationDivide0.isSymmetric();
        boolean expected = false;
        assertEquals(expected, result);
    }
}