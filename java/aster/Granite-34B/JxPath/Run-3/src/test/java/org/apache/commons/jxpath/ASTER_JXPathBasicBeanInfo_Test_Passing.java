/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.beans.PropertyDescriptor;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathBasicBeanInfo_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomic_IcRM0_1() throws Exception {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, true);
        jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Integer.class, false);
        jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Float.class);
        jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Double.class, Double.class);
        assertEquals(true, jXPathBasicBeanInfo.isAtomic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomic_IcRM0_2() throws Exception {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, true);
        jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Integer.class, false);
        jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Float.class);
        jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Double.class, Double.class);
        assertEquals(false, jXPathBasicBeanInfo.isAtomic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor_TZAP0() throws Exception {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class);
        PropertyDescriptor pd = jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        assertEquals(pd.getName(), "propertyName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorWithAtomic_aGgL1() throws Exception {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, true);
        PropertyDescriptor pd = jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        assertEquals(pd.getName(), "propertyName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorWithDynamicPropertyHandlerClass_eYlw2() throws Exception {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, Object.class);
        PropertyDescriptor pd = jXPathBasicBeanInfo.getPropertyDescriptor("propertyName");
        assertEquals(pd.getName(), "propertyName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicWhenDynamicPropertyHandlerClassIsNullOrEmpty_wyam0_1() throws Exception {
        JXPathBasicBeanInfo jXPathBasicBeanInfo1 = new JXPathBasicBeanInfo(String.class, true);
        JXPathBasicBeanInfo jXPathBasicBeanInfo2 = new JXPathBasicBeanInfo(String.class);
        JXPathBasicBeanInfo jXPathBasicBeanInfo3 = new JXPathBasicBeanInfo(String.class, null);
        assertFalse(jXPathBasicBeanInfo1.isDynamic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicWhenDynamicPropertyHandlerClassIsNullOrEmpty_wyam0_2() throws Exception {
        JXPathBasicBeanInfo jXPathBasicBeanInfo1 = new JXPathBasicBeanInfo(String.class, true);
        JXPathBasicBeanInfo jXPathBasicBeanInfo2 = new JXPathBasicBeanInfo(String.class);
        JXPathBasicBeanInfo jXPathBasicBeanInfo3 = new JXPathBasicBeanInfo(String.class, null);
        assertFalse(jXPathBasicBeanInfo2.isDynamic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicWhenDynamicPropertyHandlerClassIsNullOrEmpty_wyam0_3() throws Exception {
        JXPathBasicBeanInfo jXPathBasicBeanInfo1 = new JXPathBasicBeanInfo(String.class, true);
        JXPathBasicBeanInfo jXPathBasicBeanInfo2 = new JXPathBasicBeanInfo(String.class);
        JXPathBasicBeanInfo jXPathBasicBeanInfo3 = new JXPathBasicBeanInfo(String.class, null);
        assertFalse(jXPathBasicBeanInfo3.isDynamic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicWhenDynamicPropertyHandlerClassIsPresent_lWVD1() throws Exception {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, Object.class);
        assertTrue(jXPathBasicBeanInfo.isDynamic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyDescriptors0_EUJb0() throws Exception {
        final Class clazz = null;
        final JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(clazz);
        final PropertyDescriptor[] propertyDescriptors0 = jXPathBasicBeanInfo0.getPropertyDescriptors();
        assertEquals(0, propertyDescriptors0.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyDescriptors1_Xkzl1() throws Exception {
        final Class clazz = Object.class;
        final JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(clazz);
        final PropertyDescriptor[] propertyDescriptors0 = jXPathBasicBeanInfo0.getPropertyDescriptors();
        assertEquals(0, propertyDescriptors0.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyDescriptors4_tWDB4() throws Exception {
        final Class clazz = Thread.class;
        final JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(clazz);
        final PropertyDescriptor[] propertyDescriptors0 = jXPathBasicBeanInfo0.getPropertyDescriptors();
        assertEquals(15, propertyDescriptors0.length);
    }
}