/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Step_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeTest_gelC0() throws Exception {
        Step step = new Step(1, new NodeTypeTest(1), new Expression[0]);
        NodeTest result = step.getNodeTest();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_0_Vkvw0() throws Exception {
        Step step = new Step(0, new NodeTypeTest(0), new Expression[0]);
        boolean result = step.isContextDependent();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_gBtN0_1() throws Exception {
        assertEquals("self", Step.axisToString(Compiler.AXIS_SELF));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_gBtN0_2() throws Exception {
        assertEquals("child", Step.axisToString(Compiler.AXIS_CHILD));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_gBtN0_3() throws Exception {
        assertEquals("parent", Step.axisToString(Compiler.AXIS_PARENT));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_gBtN0_4() throws Exception {
        assertEquals("ancestor", Step.axisToString(Compiler.AXIS_ANCESTOR));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_gBtN0_5() throws Exception {
        assertEquals("attribute", Step.axisToString(Compiler.AXIS_ATTRIBUTE));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_gBtN0_6() throws Exception {
        assertEquals("namespace", Step.axisToString(Compiler.AXIS_NAMESPACE));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_gBtN0_7() throws Exception {
        assertEquals("preceding", Step.axisToString(Compiler.AXIS_PRECEDING));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_gBtN0_8() throws Exception {
        assertEquals("following", Step.axisToString(Compiler.AXIS_FOLLOWING));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_gBtN0_9() throws Exception {
        assertEquals("descendant", Step.axisToString(Compiler.AXIS_DESCENDANT));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_gBtN0_10() throws Exception {
        assertEquals("ancestor-or-self", Step.axisToString(Compiler.AXIS_ANCESTOR_OR_SELF));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_gBtN0_11() throws Exception {
        assertEquals("following-sibling", Step.axisToString(Compiler.AXIS_FOLLOWING_SIBLING));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_gBtN0_12() throws Exception {
        assertEquals("preceding-sibling", Step.axisToString(Compiler.AXIS_PRECEDING_SIBLING));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_gBtN0_13() throws Exception {
        assertEquals("descendant-or-self", Step.axisToString(Compiler.AXIS_DESCENDANT_OR_SELF));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_gBtN0_14() throws Exception {
        assertEquals("UNKNOWN", Step.axisToString(100));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Rmnh0() throws Exception {
        Step step = new Step(0, new NodeTypeTest(1), new Expression[0]);
        assertEquals(0, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxisWithNegativeAxis_Ijbg1() throws Exception {
        Step step = new Step(-1, new NodeTypeTest(1), new Expression[0]);
        assertEquals(-1, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxisWithPositiveAxis_UwCv3() throws Exception {
        Step step = new Step(1, new NodeTypeTest(1), new Expression[0]);
        assertEquals(1, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxisWithMaxAxis_YxCR4() throws Exception {
        Step step = new Step(Integer.MAX_VALUE, new NodeTypeTest(1), new Expression[0]);
        assertEquals(Integer.MAX_VALUE, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxisWithMinAxis_AmMm5() throws Exception {
        Step step = new Step(Integer.MIN_VALUE, new NodeTypeTest(1), new Expression[0]);
        assertEquals(Integer.MIN_VALUE, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxisWithNodeTypeTestNull_JaQY6() throws Exception {
        Step step = new Step(0, null, new Expression[0]);
        assertEquals(0, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxisWithExpressionNull_qoZq8() throws Exception {
        Step step = new Step(0, new NodeTypeTest(1), null);
        assertEquals(0, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxisWithNodeTypeTestAndExpressionNull_lvZJ10() throws Exception {
        Step step = new Step(0, null, null);
        assertEquals(0, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_0_JBLm0() throws Exception {
        final Step step = new Step(Compiler.AXIS_CHILD, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
        assertEquals("child::node()", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_1_TJVo1() throws Exception {
        final Step step = new Step(Compiler.AXIS_ATTRIBUTE, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
        assertEquals("@attribute::node()", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_2_IElV2() throws Exception {
        final Step step = new Step(Compiler.AXIS_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
        assertEquals("self::node()", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_3_zBOP3() throws Exception {
        final Step step = new Step(Compiler.AXIS_PARENT, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
        assertEquals("parent::node()", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_4_HkuD4() throws Exception {
        final Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
        assertEquals("descendant-or-self::node()", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_5_ouLx5() throws Exception {
        final Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[]{});
        assertEquals("descendant-or-self::node()", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_QVyg0() throws Exception {
        Step step = new Step(0, new NodeTypeTest(0), new Expression[0]);
        Expression[] actual = step.getPredicates();
        Expression[] expected = new Expression[0];
        assertArrayEquals(expected, actual);
    }
}