/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.*;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodePointer_Test_Passing {
    private Node node;
    private NodePointer nodepointer;
    private NamedNodeMap namednodemap;
    @Mock
    private Object object;
    private String defaultNamespace;
    @Mock
    private JXPathContext context;
    @Mock
    private NamespaceResolver namespaceResolver;
    @Mock
    private NodePointer valuePointer;
    @Mock
    private Pointer namespaceContextPointer;
    @Mock
    private Functions functions;
    @Mock
    private KeyManager keyManager;
    @Mock
    private IdentityManager identityManager;
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_mAhG1() throws Exception {
        String qualifiedName = "qualifiedName";
        QName qName = new QName(qualifiedName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName2_ojRb2() throws Exception {
        String prefix = "prefix";
        String localName = "localName";
        QName qName = new QName(prefix, localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer_xMNm3() throws Exception {
        QName name = new QName("name");
        VariablePointer variablePointer = new VariablePointer(name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullNode_dPsb8() throws Exception {
        DOMNodePointer pointer = new DOMNodePointer(null, new Locale("en"), null);
        assertEquals("", pointer.asPath());
    }
}