/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPointer_Test_Passing {
    private QName name;
    private DynaBean dynaBean;
    DynaBeanPointer dynabeanpointer;
    DynaBean dynabean;
    Locale locale;
    DOMNodePointer parent;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_1() throws Exception {
        name = mock(QName.class);
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        DynaBeanPointer dynabeanpointer1 = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        DynaBeanPointer dynabeanpointer2 = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        assertEquals(dynabeanpointer, dynabeanpointer1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_2() throws Exception {
        name = mock(QName.class);
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        DynaBeanPointer dynabeanpointer1 = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        DynaBeanPointer dynabeanpointer2 = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        assertEquals(dynabeanpointer1, dynabeanpointer2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_3() throws Exception {
        name = mock(QName.class);
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        DynaBeanPointer dynabeanpointer1 = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        DynaBeanPointer dynabeanpointer2 = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        assertEquals(dynabeanpointer1.hashCode(), dynabeanpointer2.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        dynabean = mock(DynaBean.class);
        locale = Locale.getDefault();
        name = new QName("name");
        parent = mock(DOMNodePointer.class);
        dynabeanpointer = new DynaBeanPointer(name, dynabean, locale);
        when(dynabean.get(anyString())).thenReturn(new String[1]);
        assertTrue(dynabeanpointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(new QName("name"), dynaBean, Locale.getDefault());
        when(dynaBean.get("property")).thenReturn("value");
        Object immediateNode = dynabeanpointer.getImmediateNode();
        assertEquals("value", immediateNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        name = new QName("name");
        dynabeanpointer = new DynaBeanPointer(name, mock(DynaBean.class), Locale.getDefault());
        assertEquals(name.hashCode(), dynabeanpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        name = mock(QName.class);
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        when(name.getName()).thenReturn("name");
        assertEquals("name", dynabeanpointer.getName().getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_ZlZr2() throws Exception {
        new QName("");
        new QName("", "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() throws Exception {
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        locale = Locale.getDefault();
        name = new QName("name");
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, locale);
        when(parent.asPath()).thenReturn("/parent");
        assertEquals("/parent", dynabeanpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(new QName("name"), dynaBean, Locale.getDefault());
        when(dynaBean.get("property")).thenReturn("value");
        Object baseValue = dynabeanpointer.getBaseValue();
        assertEquals("value", baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer_IzOB1() throws Exception {
        VariablePointer pointer = new VariablePointer(new QName("name"));
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_csBV3() throws Exception {
        QName qname = new QName("qualifiedName");
        assertNotNull(qname);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameStringString_raaw4() throws Exception {
        QName qname = new QName("prefix", "localName");
        assertNotNull(qname);
    }
}