/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_InfoSetUtil_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueForBoolean_riqK0() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueForString_gUjP0() {
        Object object = "test";
        String expected = "test";
        String actual = InfoSetUtil.stringValue(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueForNumber_sSuw1() {
        Object object = 123.456;
        String expected = "123.456";
        String actual = InfoSetUtil.stringValue(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueForBooleanTrue_uUnH2() {
        Object object = true;
        String expected = "true";
        String actual = InfoSetUtil.stringValue(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueForBooleanFalse_pkTQ3() {
        Object object = false;
        String expected = "false";
        String actual = InfoSetUtil.stringValue(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueForNull_qKmb6() {
        Object object = null;
        String expected = "";
        String actual = InfoSetUtil.stringValue(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNumber_RvYE0() {
        Number number = new Double(1.0);
        boolean actual = InfoSetUtil.booleanValue(number);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithString_HoPQ2() {
        String str = "hello";
        boolean actual = InfoSetUtil.booleanValue(str);
        boolean expected = str.length() != 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithObject_dVmD5() {
        Object obj = new Object();
        boolean actual = InfoSetUtil.booleanValue(obj);
        boolean expected = obj != null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNull_hQpr6() {
        Object obj = null;
        boolean actual = InfoSetUtil.booleanValue(obj);
        boolean expected = obj != null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNegZero_leiK7() {
        double value = -0;
        boolean actual = InfoSetUtil.booleanValue(value);
        boolean expected = value != 0 && value != -0 && !Double.isNaN(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNaN_ohar8() {
        double value = Double.NaN;
        boolean actual = InfoSetUtil.booleanValue(value);
        boolean expected = value != 0 && value != -0 && !Double.isNaN(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithZero_xJnb9() {
        double value = 0;
        boolean actual = InfoSetUtil.booleanValue(value);
        boolean expected = value != 0 && value != -0 && !Double.isNaN(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithBoolean_caiy10() {
        Boolean bool = true;
        boolean actual = InfoSetUtil.booleanValue(bool);
        boolean expected = bool.booleanValue();
        assertEquals(expected, actual);
    }
}