/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ClassLoaderUtil_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithInitializeTrue_vVMI0() throws ClassNotFoundException {
        final String className = "java.lang.String";
        final boolean initialize = true;
        final Class expected = String.class;
        final Class actual = ClassLoaderUtil.getClass(className, initialize);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithInitializeFalse_fcSW1() throws ClassNotFoundException {
        final String className = "java.lang.String";
        final boolean initialize = false;
        final Class expected = String.class;
        final Class actual = ClassLoaderUtil.getClass(className, initialize);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithValidClassName_PPEG0() throws ClassNotFoundException {
        String className = "java.lang.String";
        Class expectedClass = String.class;
        Class actualClass = ClassLoaderUtil.getClass(className);
        assertEquals(expectedClass, actualClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithInvalidClassName_PpAa1() throws Exception {
        String className = "invalid.ClassName";
        try {
            ClassLoaderUtil.getClass(className);
        } catch (ClassNotFoundException e) {
            assertEquals("java.lang.ClassNotFoundException: invalid.ClassName", e.toString());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithoutClassLoader_oUoo1() throws Exception {
        String className = "example.ClassName";
        Class expectedClass = Class.forName(className);
        Class actualClass = ClassLoaderUtil.getClass(null, className);
        assertEquals(expectedClass, actualClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithoutClassLoaderAndInitialize_Dpdj3() throws Exception {
        String className = "example.ClassName";
        Class expectedClass = Class.forName(className);
        Class actualClass = ClassLoaderUtil.getClass(null, className, true);
        assertEquals(expectedClass, actualClass);
    }
}