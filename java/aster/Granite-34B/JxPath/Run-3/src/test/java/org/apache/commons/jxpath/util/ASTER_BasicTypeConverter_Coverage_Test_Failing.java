/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathInvalidAccessException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicTypeConverter_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_pSvb0() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Class type = null;
        boolean expected = false;
        boolean actual = basicTypeConverter.canCreateCollection(type);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void allocateCollection_WhenTypeIsInterface_ThenThrowJXPathInvalidAccessException_TjeO0() {
        Class type = List.class;
        BasicTypeConverter systemUT = new BasicTypeConverter();
        assertThrows(JXPathInvalidAccessException.class, () -> systemUT.allocateCollection(type));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_VVgU0() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Class type = java.util.concurrent.atomic.AtomicInteger.class;
        double value = 1.0;
        Object expected = java.lang.Integer.valueOf(1);
        Object actual = basicTypeConverter.allocateNumber(type, value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_LMZD1() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Class type = java.util.concurrent.atomic.AtomicLong.class;
        double value = 1.0;
        Object expected = java.lang.Long.valueOf(1);
        Object actual = basicTypeConverter.allocateNumber(type, value);
        assertEquals(expected.getClass(), actual.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_LMsn2() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Class type = java.util.concurrent.atomic.AtomicInteger.class;
        double value = 1.0;
        Object expected = java.lang.Integer.valueOf(1);
        Object actual = basicTypeConverter.allocateNumber(type, value);
        assertEquals(expected.getClass(), actual.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_lmKw3() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Class type = java.util.concurrent.atomic.AtomicLong.class;
        double value = 1.0;
        Object expected = java.lang.Long.valueOf(1);
        Object actual = basicTypeConverter.allocateNumber(type, value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection3_CEkZ2_fid1() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        Class type = String.class;
        boolean expected = false;
        boolean actual = basicTypeConverter.canCreateCollection(type);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertForCollection_pjqS0_fid1() {
        BasicTypeConverter basicTypeConverter = new BasicTypeConverter();
        boolean actual = basicTypeConverter.canConvert(new Object(), Collection.class);
        Assertions.assertTrue(actual);
    }
}