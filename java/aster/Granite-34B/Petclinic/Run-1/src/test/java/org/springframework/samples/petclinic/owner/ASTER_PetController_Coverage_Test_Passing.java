/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.Collection;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PetController_Coverage_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwnerWithValidId_uOFU0() {
		OwnerRepository mockOwnerRepository = mock(OwnerRepository.class);
		when(mockOwnerRepository.findById(anyInt())).thenReturn(new Owner());
		PetController petController = new PetController(mockOwnerRepository);
		Owner owner = petController.findOwner(1);
		assertNotNull(owner);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindPetWithOwnerFoundAndPetIdNull_qGNK2() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		Owner owner = mock(Owner.class);
		when(ownerRepository.findById(1)).thenReturn(owner);
		PetController petController = new PetController(ownerRepository);
		Pet pet = petController.findPet(1, null);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindPetWithOwnerFoundAndPetIdFound_uKsy4() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		Owner owner = mock(Owner.class);
		Pet pet = mock(Pet.class);
		when(ownerRepository.findById(1)).thenReturn(owner);
		when(owner.getPet(1)).thenReturn(pet);
		PetController petController = new PetController(ownerRepository);
		Pet result = petController.findPet(1, 1);
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindPetWithOwnerFoundAndPetIdFoundAndVisitCollectionNull_RpdP5() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		Owner owner = mock(Owner.class);
		Pet pet = mock(Pet.class);
		when(ownerRepository.findById(1)).thenReturn(owner);
		when(owner.getPet(1)).thenReturn(pet);
		when(pet.getVisits()).thenReturn(null);
		PetController petController = new PetController(ownerRepository);
		Pet result = petController.findPet(1, 1);
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindPetWithOwnerFoundAndPetIdFoundAndVisitCollectionEmpty_JgWn6() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		Owner owner = mock(Owner.class);
		Pet pet = mock(Pet.class);
		when(ownerRepository.findById(1)).thenReturn(owner);
		when(owner.getPet(1)).thenReturn(pet);
		when(pet.getVisits()).thenReturn(new HashSet<>());
		PetController petController = new PetController(ownerRepository);
		Pet result = petController.findPet(1, 1);
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindPetWithOwnerFoundAndPetIdFoundAndVisitCollectionNotEmpty_KGVB7() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		Owner owner = mock(Owner.class);
		Pet pet = mock(Pet.class);
		Visit visit = mock(Visit.class);
		when(ownerRepository.findById(1)).thenReturn(owner);
		when(owner.getPet(1)).thenReturn(pet);
		when(pet.getVisits()).thenReturn(Set.of(visit));
		PetController petController = new PetController(ownerRepository);
		Pet result = petController.findPet(1, 1);
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testPopulatePetTypes_GfBk0_MlJi0() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		PetController petController = new PetController(ownerRepository);
		Collection<PetType> petTypes = petController.populatePetTypes();
		assertNotNull(petTypes);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testPopulatePetTypesWithNullOwnerRepository_cIWS1_fid1() {
		OwnerRepository ownerRepository = null;
		PetController petController = new PetController(ownerRepository);
		try {
			petController.populatePetTypes();
			fail("Exception expected");
		}
		catch (Exception e) {
		}
	}

}