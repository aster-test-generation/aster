/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.time.LocalDate;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Visit_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDate_bGFC0() {
		Visit visit = new Visit();
		LocalDate date = LocalDate.now();
		visit.setDate(date);
		assertEquals(date, visit.getDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDateNull_cJzA1() {
		Visit visit = new Visit();
		visit.setDate(null);
		assertNull(visit.getDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDateBeforeMinDate_irAC2() {
		Visit visit = new Visit();
		LocalDate date = LocalDate.of(1900, 1, 1);
		visit.setDate(date);
		assertEquals(date, visit.getDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDateAfterMaxDate_dDDo3() {
		Visit visit = new Visit();
		LocalDate date = LocalDate.of(2100, 1, 1);
		visit.setDate(date);
		assertEquals(date, visit.getDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setDescriptionTest_yxds0() {
		Visit visit = new Visit();
		String description = "This is a test description";
		visit.setDescription(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setDescriptionTest_nullDescription_bhdX1() {
		Visit visit = new Visit();
		String description = null;
		visit.setDescription(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setDescriptionTest_emptyDescription_zBkY2() {
		Visit visit = new Visit();
		String description = "";
		visit.setDescription(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setDescriptionTest_maxDescriptionLength_Iyeg5() {
		Visit visit = new Visit();
		String description = "This is a test description with a maximum length of 255 characters";
		visit.setDescription(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setDescriptionTest_descriptionLengthExceedsLimit_MoWC6() {
		Visit visit = new Visit();
		String description = "This is a test description that exceeds the maximum length of 255 characters";
		visit.setDescription(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setDescriptionTest_descriptionContainsSpecialCharacters_oGge7() {
		Visit visit = new Visit();
		String description = "This is a test description with special characters like !@#$%^&*()_+";
		visit.setDescription(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setDescriptionTest_descriptionContainsNumbers_Ffxh8() {
		Visit visit = new Visit();
		String description = "This is a test description with numbers like 1234567890";
		visit.setDescription(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setDescriptionTest_descriptionContainsUppercaseLetters_fVHb9() {
		Visit visit = new Visit();
		String description = "This is a test description with uppercase letters like ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		visit.setDescription(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setDescriptionTest_descriptionContainsLowercaseLetters_uymk10() {
		Visit visit = new Visit();
		String description = "This is a test description with lowercase letters like abcdefghijklmnopqrstuvwxyz";
		visit.setDescription(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setDescriptionTest_descriptionContainsBothUppercaseAndLowercaseLetters_hQyt11() {
		Visit visit = new Visit();
		String description = "This is a test description with both uppercase and lowercase letters like AbCdEfGhIjKlMnOpQrStUvWxYz";
		visit.setDescription(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getDateTest_cujh0() {
		Visit visit = new Visit();
		visit.setDate(LocalDate.now());
		LocalDate date = visit.getDate();
		assertEquals(LocalDate.now(), date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getDateTest2_XiBP1() {
		Visit visit = new Visit();
		visit.setDate(LocalDate.of(2022, 12, 31));
		LocalDate date = visit.getDate();
		assertEquals(LocalDate.of(2022, 12, 31), date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getDateTest3_ocAU2() {
		Visit visit = new Visit();
		visit.setDate(LocalDate.of(1990, 5, 15));
		LocalDate date = visit.getDate();
		assertEquals(LocalDate.of(1990, 5, 15), date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getDateTest4_hfuR3() {
		Visit visit = new Visit();
		visit.setDate(LocalDate.of(2000, 1, 1));
		LocalDate date = visit.getDate();
		assertEquals(LocalDate.of(2000, 1, 1), date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getDateTest5_ewsv4() {
		Visit visit = new Visit();
		visit.setDate(LocalDate.of(2050, 10, 20));
		LocalDate date = visit.getDate();
		assertEquals(LocalDate.of(2050, 10, 20), date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getDateTest6_MVHM5() {
		Visit visit = new Visit();
		visit.setDate(LocalDate.of(2020, 6, 25));
		LocalDate date = visit.getDate();
		assertEquals(LocalDate.of(2020, 6, 25), date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getDateTest7_JNbD6() {
		Visit visit = new Visit();
		visit.setDate(LocalDate.of(2030, 7, 30));
		LocalDate date = visit.getDate();
		assertEquals(LocalDate.of(2030, 7, 30), date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getDateTest8_RSBB7() {
		Visit visit = new Visit();
		visit.setDate(LocalDate.of(2040, 8, 10));
		LocalDate date = visit.getDate();
		assertEquals(LocalDate.of(2040, 8, 10), date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getDateTest9_KybW8() {
		Visit visit = new Visit();
		visit.setDate(LocalDate.of(2010, 9, 15));
		LocalDate date = visit.getDate();
		assertEquals(LocalDate.of(2010, 9, 15), date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getDateTest10_GENC9() {
		Visit visit = new Visit();
		visit.setDate(LocalDate.of(2060, 11, 25));
		LocalDate date = visit.getDate();
		assertEquals(LocalDate.of(2060, 11, 25), date);
	}

}