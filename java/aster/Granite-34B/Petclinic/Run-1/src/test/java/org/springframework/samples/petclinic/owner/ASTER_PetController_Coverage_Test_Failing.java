/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import org.springframework.ui.ModelMap;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PetController_Coverage_Test_Failing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testPopulatePetTypesWithNullOwnerRepository_cIWS1() {
		OwnerRepository ownerRepository = null;
		PetController petController = new PetController(ownerRepository);
		try {
			petController.populatePetTypes();
			fail("Exception expected");
		}
		catch (Exception e) {
			assertEquals("OwnerRepository is null", e.getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwnerWithInvalidId_YBGR1() {
		OwnerRepository mockOwnerRepository = mock(OwnerRepository.class);
		when(mockOwnerRepository.findById(anyInt())).thenReturn(null);
		PetController petController = new PetController(mockOwnerRepository);
		Owner owner = petController.findOwner(1);
		assertNull(owner);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwnerWithZeroId_yXsW2() {
		OwnerRepository mockOwnerRepository = mock(OwnerRepository.class);
		when(mockOwnerRepository.findById(anyInt())).thenThrow(new IllegalArgumentException("Owner ID not found: 0"));
		PetController petController = new PetController(mockOwnerRepository);
		Owner owner = petController.findOwner(0);
		assertNull(owner);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwnerWithNegativeId_pRSI3() {
		OwnerRepository mockOwnerRepository = mock(OwnerRepository.class);
		when(mockOwnerRepository.findById(anyInt())).thenThrow(new IllegalArgumentException("Owner ID not found: -1"));
		PetController petController = new PetController(mockOwnerRepository);
		Owner owner = petController.findOwner(-1);
		assertNull(owner);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitCreationForm_IfOS0() {
		OwnerRepository mockOwnerRepository = mock(OwnerRepository.class);
		when(mockOwnerRepository.findById(anyInt())).thenReturn(new Owner());
		PetController petController = new PetController(mockOwnerRepository);
		Owner owner = new Owner();
		ModelMap model = new ModelMap();
		String result = petController.initCreationForm(owner, model);
		assertEquals("pets/createOrUpdatePetForm", result);
		verify(mockOwnerRepository, times(1)).findById(anyInt());
		verifyNoMoreInteractions(mockOwnerRepository);
	}

}