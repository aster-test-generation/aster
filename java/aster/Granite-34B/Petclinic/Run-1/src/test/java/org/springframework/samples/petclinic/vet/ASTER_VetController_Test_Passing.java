/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.vet;

import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VetController_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testShowResourcesVetList_GuMQ0() {
		VetRepository mockVetRepository = mock(VetRepository.class);
		VetController vetController = new VetController(mockVetRepository);
		Vets vets = vetController.showResourcesVetList();
		verify(mockVetRepository, times(1)).findAll();
		assertEquals(vets.getVetList().size(), mockVetRepository.findAll().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testShowResourcesVetList_WithNullRepository_ODXm1() {
		VetRepository mockVetRepository = null;
		VetController vetController = new VetController(mockVetRepository);
		Vets vets = vetController.showResourcesVetList();
		verify(mockVetRepository, times(0)).findAll();
		assertEquals(vets.getVetList().size(), 0);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testShowResourcesVetList_WithNoVets_fJNp2() {
		VetRepository mockVetRepository = mock(VetRepository.class);
		when(mockVetRepository.findAll()).thenReturn(new ArrayList<>());
		VetController vetController = new VetController(mockVetRepository);
		Vets vets = vetController.showResourcesVetList();
		verify(mockVetRepository, times(1)).findAll();
		assertEquals(vets.getVetList().size(), 0);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testShowResourcesVetList_WithOneVet_CeCq3() {
		VetRepository mockVetRepository = mock(VetRepository.class);
		List<Vet> vetList = new ArrayList<>();
		vetList.add(new Vet());
		when(mockVetRepository.findAll()).thenReturn(vetList);
		VetController vetController = new VetController(mockVetRepository);
		Vets vets = vetController.showResourcesVetList();
		verify(mockVetRepository, times(1)).findAll();
		assertEquals(vets.getVetList().size(), 1);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testShowResourcesVetList_WithTwoVets_QKru4() {
		VetRepository mockVetRepository = mock(VetRepository.class);
		List<Vet> vetList = new ArrayList<>();
		vetList.add(new Vet());
		vetList.add(new Vet());
		when(mockVetRepository.findAll()).thenReturn(vetList);
		VetController vetController = new VetController(mockVetRepository);
		Vets vets = vetController.showResourcesVetList();
		verify(mockVetRepository, times(1)).findAll();
		assertEquals(vets.getVetList().size(), 2);
	}

}