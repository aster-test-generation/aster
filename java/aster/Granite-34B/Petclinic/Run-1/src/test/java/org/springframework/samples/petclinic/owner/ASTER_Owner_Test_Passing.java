/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setCity_withValidInput_shouldSetCity_wltf0() {
		Owner owner = new Owner();
		String expectedCity = "New York";
		owner.setCity(expectedCity);
		String actualCity = owner.getCity();
		assertEquals(expectedCity, actualCity);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getCity_IJQm0() {
		Owner owner = new Owner();
		owner.setCity("New York");
		assertEquals("New York", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getCity_null_bFhr1() {
		Owner owner = new Owner();
		owner.setCity(null);
		assertEquals(null, owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getCity_empty_SgtO2() {
		Owner owner = new Owner();
		owner.setCity("");
		assertEquals("", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getTelephoneTest_dlAq0() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-7890");
		String telephone = owner.getTelephone();
		org.junit.jupiter.api.Assertions.assertEquals("123-456-7890", telephone);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setTelephoneTest_XEez0() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-7890");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setTelephoneTest_nullTelephone_jItC1() {
		Owner owner = new Owner();
		owner.setTelephone(null);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setTelephoneTest_emptyTelephone_OVVq2() {
		Owner owner = new Owner();
		owner.setTelephone("");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setTelephoneTest_invalidTelephone_bbmy4() {
		Owner owner = new Owner();
		owner.setTelephone("1234567890");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setTelephoneTest_maxTelephoneLengthPlusOne_KIsj7() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-78901");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setTelephoneTest_minTelephoneLengthMinusOne_EIHP8() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-789");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_with_name_and_return_value_VExU0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("name");
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_with_name_and_return_value_and_visits_ydXk1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("name");
		Collection<Visit> visits = pet.getVisits();
		assertNotNull(visits);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_with_name_and_return_value_and_visits_and_type_KWVv2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("name");
		Collection<Visit> visits = pet.getVisits();
		PetType type = pet.getType();
		assertNotNull(type);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPet_should_return_pet_when_name_is_not_null_and_ignoreNew_is_false_jTMz0() {
		String name = "pet_name";
		boolean ignoreNew = false;
		Pet pet = new Pet();
		Owner owner = new Owner();
		owner.addPet(pet);
		Pet result = owner.getPet(name, ignoreNew);
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPet_should_return_null_when_name_is_null_zzwv1() {
		String name = null;
		boolean ignoreNew = false;
		Owner owner = new Owner();
		Pet result = owner.getPet(name, ignoreNew);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPet_should_return_null_when_name_is_not_null_and_ignoreNew_is_false_and_pet_is_not_found_VKpp4() {
		String name = "pet_name";
		boolean ignoreNew = false;
		Owner owner = new Owner();
		Pet result = owner.getPet(name, ignoreNew);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPet_should_return_null_when_name_is_not_null_and_ignoreNew_is_false_and_pet_name_is_not_equal_AhUF5() {
		String name = "pet_name";
		boolean ignoreNew = false;
		Pet pet = new Pet();
		pet.setName("other_name");
		Owner owner = new Owner();
		owner.addPet(pet);
		Pet result = owner.getPet(name, ignoreNew);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_QuuT0() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		owner.addVisit(1, visit);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullPetId_xTaQ1() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		Assertions.assertThrows(IllegalArgumentException.class, () -> owner.addVisit(null, visit));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisit_gkkC2() {
		Owner owner = new Owner();
		owner.addVisit(1, null);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithInvalidPetId_xhPs3() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		owner.addVisit(100, visit);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPets_BchR0() {
		Owner owner = new Owner();
		List<Pet> pets = owner.getPets();
		assertNotNull(pets);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithNoPets_hYDV1() {
		Owner owner = new Owner();
		List<Pet> pets = owner.getPets();
		assertTrue(pets.isEmpty());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithOnePet_Byhj2_1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		List<Pet> pets = owner.getPets();
		assertEquals(1, pets.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithOnePet_Byhj2_2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		List<Pet> pets = owner.getPets();
		assertEquals(pet, pets.get(0));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithTwoPets_AXik3_1() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		List<Pet> pets = owner.getPets();
		assertEquals(2, pets.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithTwoPets_AXik3_2() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet1));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithTwoPets_AXik3_3() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet2));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithThreePets_ckHk4_1() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		List<Pet> pets = owner.getPets();
		assertEquals(3, pets.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithThreePets_ckHk4_2() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet1));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithThreePets_ckHk4_3() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet2));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithThreePets_ckHk4_4() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet3));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithFourPets_NTSF5_1() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		List<Pet> pets = owner.getPets();
		assertEquals(4, pets.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithFourPets_NTSF5_2() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet1));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithFourPets_NTSF5_3() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet2));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithFourPets_NTSF5_4() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet3));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithFourPets_NTSF5_5() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet4));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithFivePets_kMlr6_1() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		Pet pet5 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		owner.addPet(pet5);
		List<Pet> pets = owner.getPets();
		assertEquals(5, pets.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithFivePets_kMlr6_2() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		Pet pet5 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		owner.addPet(pet5);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet1));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithFivePets_kMlr6_3() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		Pet pet5 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		owner.addPet(pet5);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet2));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithFivePets_kMlr6_4() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		Pet pet5 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		owner.addPet(pet5);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet3));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithFivePets_kMlr6_5() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		Pet pet5 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		owner.addPet(pet5);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet4));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithFivePets_kMlr6_6() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		Pet pet5 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		owner.addPet(pet5);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet5));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithSixPets_zlXQ7_1() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		Pet pet5 = new Pet();
		Pet pet6 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		owner.addPet(pet5);
		owner.addPet(pet6);
		List<Pet> pets = owner.getPets();
		assertEquals(6, pets.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithSixPets_zlXQ7_2() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		Pet pet5 = new Pet();
		Pet pet6 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		owner.addPet(pet5);
		owner.addPet(pet6);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet1));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithSixPets_zlXQ7_3() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		Pet pet5 = new Pet();
		Pet pet6 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		owner.addPet(pet5);
		owner.addPet(pet6);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet2));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithSixPets_zlXQ7_4() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		Pet pet5 = new Pet();
		Pet pet6 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		owner.addPet(pet5);
		owner.addPet(pet6);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet3));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithSixPets_zlXQ7_5() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		Pet pet5 = new Pet();
		Pet pet6 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		owner.addPet(pet5);
		owner.addPet(pet6);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet4));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithSixPets_zlXQ7_6() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		Pet pet5 = new Pet();
		Pet pet6 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		owner.addPet(pet5);
		owner.addPet(pet6);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet5));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithSixPets_zlXQ7_7() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		Pet pet5 = new Pet();
		Pet pet6 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		owner.addPet(pet5);
		owner.addPet(pet6);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet6));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetAddress_GOSe0() {
		Owner owner = new Owner();
		owner.setAddress("123 Main Street");
		String address = owner.getAddress();
		assert address.equals("123 Main Street");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetAddressWithNullAddress_FdMP1() {
		Owner owner = new Owner();
		String address = owner.getAddress();
		assert address == null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetAddressWithEmptyAddress_wxad2() {
		Owner owner = new Owner();
		owner.setAddress("");
		String address = owner.getAddress();
		assert address.equals("");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetAddressWithInvalidAddress_bIVy4() {
		Owner owner = new Owner();
		owner.setAddress("123 Main Street");
		String address = owner.getAddress();
		assert !address.equals("456 Main Street");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_with_id_1_TTTf0_1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(1);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_with_id_1_TTTf0_2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(1);
		assertEquals(1, pet.getId());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_with_id_2_GpTo1_1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(2);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_with_id_2_GpTo1_2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(2);
		assertEquals(2, pet.getId());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_with_id_3_gvNf2_1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(3);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_with_id_3_gvNf2_2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(3);
		assertEquals(3, pet.getId());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_with_id_4_FtQv3_1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(4);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_with_id_4_FtQv3_2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(4);
		assertEquals(4, pet.getId());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setAddressTest_iKFi0() {
		Owner owner = new Owner();
		owner.setAddress("123 Main Street");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setAddressNullTest_uykt1() {
		Owner owner = new Owner();
		owner.setAddress(null);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithOnePet_Byhj2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		List<Pet> pets = owner.getPets();
		assertEquals(1, pets.size());
		assertEquals(pet, pets.get(0));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithTwoPets_AXik3() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		List<Pet> pets = owner.getPets();
		assertEquals(2, pets.size());
		assertTrue(pets.contains(pet1));
		assertTrue(pets.contains(pet2));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithThreePets_ckHk4() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		List<Pet> pets = owner.getPets();
		assertEquals(3, pets.size());
		assertTrue(pets.contains(pet1));
		assertTrue(pets.contains(pet2));
		assertTrue(pets.contains(pet3));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithFourPets_NTSF5() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		List<Pet> pets = owner.getPets();
		assertEquals(4, pets.size());
		assertTrue(pets.contains(pet1));
		assertTrue(pets.contains(pet2));
		assertTrue(pets.contains(pet3));
		assertTrue(pets.contains(pet4));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithFivePets_kMlr6() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		Pet pet5 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		owner.addPet(pet5);
		List<Pet> pets = owner.getPets();
		assertEquals(5, pets.size());
		assertTrue(pets.contains(pet1));
		assertTrue(pets.contains(pet2));
		assertTrue(pets.contains(pet3));
		assertTrue(pets.contains(pet4));
		assertTrue(pets.contains(pet5));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOwnerGetPetsWithSixPets_zlXQ7() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Pet pet3 = new Pet();
		Pet pet4 = new Pet();
		Pet pet5 = new Pet();
		Pet pet6 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		owner.addPet(pet3);
		owner.addPet(pet4);
		owner.addPet(pet5);
		owner.addPet(pet6);
		List<Pet> pets = owner.getPets();
		assertEquals(6, pets.size());
		assertTrue(pets.contains(pet1));
		assertTrue(pets.contains(pet2));
		assertTrue(pets.contains(pet3));
		assertTrue(pets.contains(pet4));
		assertTrue(pets.contains(pet5));
		assertTrue(pets.contains(pet6));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_with_id_1_TTTf0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(1);
		assertNotNull(pet);
		assertEquals(1, pet.getId());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_with_id_2_GpTo1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(2);
		assertNotNull(pet);
		assertEquals(2, pet.getId());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_with_id_3_gvNf2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(3);
		assertNotNull(pet);
		assertEquals(3, pet.getId());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_with_id_4_FtQv3() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(4);
		assertNotNull(pet);
		assertEquals(4, pet.getId());
	}

}