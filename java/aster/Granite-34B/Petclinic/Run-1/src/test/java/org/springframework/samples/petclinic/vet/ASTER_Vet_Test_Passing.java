/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.vet;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Vet_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getNrOfSpecialties_dOtF0() {
		Vet vet = new Vet();
		assertEquals(0, vet.getNrOfSpecialties());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getNrOfSpecialties_with_one_specialty_PSbD1() {
		Vet vet = new Vet();
		vet.addSpecialty(new Specialty());
		assertEquals(1, vet.getNrOfSpecialties());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getNrOfSpecialties_with_two_specialties_ajyX2() {
		Vet vet = new Vet();
		vet.addSpecialty(new Specialty());
		vet.addSpecialty(new Specialty());
		assertEquals(2, vet.getNrOfSpecialties());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getSpecialties_returnsEmptyListWhenNoSpecialties_ucTi1() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertTrue(specialties.isEmpty());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetSpecialtiesInternal_ZaVu0() {
		Vet vet = new Vet();
		Set<Specialty> specialties = new HashSet<>();
		vet.setSpecialtiesInternal(specialties);
		assertEquals(specialties, vet.getSpecialtiesInternal());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetSpecialtiesInternalWithNullParameter_jEet1() {
		Vet vet = new Vet();
		vet.setSpecialtiesInternal(null);
		assertEquals(new HashSet<>(), vet.getSpecialtiesInternal());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddSpecialty_zmbq0() {
		Vet vet = new Vet();
		Specialty specialty = new Specialty();
		vet.addSpecialty(specialty);
		assertTrue(vet.getSpecialtiesInternal().contains(specialty));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getSpecialtiesInternal_whenSpecialtiesNotNull_thenGetSpecialties_Vmoj1_fQeR0() {
		Vet vet = new Vet();
		Set<Specialty> expected = new HashSet<>();
		expected.add(new Specialty());
		vet.setSpecialtiesInternal(expected);
		Set<Specialty> actual = vet.getSpecialtiesInternal();
		assertEquals(expected, actual);
	}

}