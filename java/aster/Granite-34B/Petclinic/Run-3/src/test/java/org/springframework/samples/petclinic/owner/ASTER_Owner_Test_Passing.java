/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCity_IFMW0() {
		Owner owner = new Owner();
		owner.setCity("New York");
		assertEquals("New York", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTelephone_tXEg0() {
		Owner owner = new Owner();
		String telephone = owner.getTelephone();
		assertEquals("Expected telephone number", "Expected telephone number", telephone);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephone_VNeP0() {
		Owner owner = new Owner();
		owner.setTelephone("1234567890");
		assertEquals("1234567890", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPets_NcDn0() {
		Owner owner = new Owner();
		List<Pet> pets = owner.getPets();
		assertNull(null);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddress_kkYM0() {
		Owner owner = new Owner();
		owner.setAddress("Test Address");
		assertEquals("Test Address", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithNonExistingPet_axpz1() {
		Owner owner = new Owner();
		Pet result = owner.getPet(1);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithNullPetList_jjfM3() {
		Owner owner = new Owner();
		owner.getPets().clear();
		Pet result = owner.getPet(1);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetExistingPet_mxMo0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("pet1");
		owner.getPets().add(pet);
		Pet result = owner.getPet("pet1", false);
		assert result != null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetNonExistingPet_hOgJ1() {
		Owner owner = new Owner();
		Pet result = owner.getPet("pet1", false);
		assert result == null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetNonExistingPetIgnoreNew_wpPT3() {
		Owner owner = new Owner();
		Pet result = owner.getPet("pet1", true);
		assert result == null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetEmptyPetList_XdMn6() {
		Owner owner = new Owner();
		owner.getPets().clear();
		Pet result = owner.getPet("pet1", false);
		assert result == null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCity_EAlP0_iNyQ0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("pet", false);
		assertNull(pet);
	}

}