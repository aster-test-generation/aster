/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.text.ParseException;
import java.util.Locale;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Collections;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PetTypeFormatter_Coverage_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testPrint_KIhF0_aPjq0() {
		OwnerRepository owners = mock(OwnerRepository.class);
		PetTypeFormatter petTypeFormatter = new PetTypeFormatter(owners);
		PetType petType = new PetType();
		petType.setName("name");
		String actual = petTypeFormatter.print(petType, Locale.ROOT);
		assertEquals("name", actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_ZJGo0_qOBb0() throws java.text.ParseException {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		PetTypeFormatter petTypeFormatter = new PetTypeFormatter(ownerRepository);
		String text = "dog";
		PetType expected = new PetType();
		expected.setName("dog");
		when(ownerRepository.findPetTypes()).thenReturn(Collections.singletonList(expected));
		assertEquals(expected, petTypeFormatter.parse(text, null));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseWhenTextIsNotFound_Zdde2_PoWS0() throws java.text.ParseException {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		PetTypeFormatter petTypeFormatter = new PetTypeFormatter(ownerRepository);
		String text = "cat";
		when(ownerRepository.findPetTypes()).thenReturn(Collections.emptyList());
		try {
			petTypeFormatter.parse(text, null);
		}
		catch (ParseException e) {
			assertEquals("type not found: " + text, e.getMessage());
		}
	}

}