/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.time.LocalDate;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PetController_Coverage_Test_Failing {

	OwnerRepository owners;

	PetController petController;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwnerWithInvalidInput_YUEx1() {
		OwnerRepository mockOwnerRepository = mock(OwnerRepository.class);
		when(mockOwnerRepository.findById(anyInt())).thenReturn(null);
		PetController petController = new PetController(mockOwnerRepository);
		Owner result = petController.findOwner(1);
		assertEquals(null, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwnerWithException_fnNb2() {
		OwnerRepository mockOwnerRepository = mock(OwnerRepository.class);
		when(mockOwnerRepository.findById(anyInt())).thenThrow(new RuntimeException("Owner ID not found"));
		PetController petController = new PetController(mockOwnerRepository);
		Owner result = petController.findOwner(1);
		assertEquals(null, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindPetWithNullParameter_cmYO0() {
		Pet pet = petController.findPet(1, null);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindPetWithNoVisit_FiPs4() {
		Owner owner = new Owner();
		owner.setId(1);
		Pet pet = new Pet();
		pet.setId(2);
		owner.addPet(pet);
		PetType petType = new PetType();
		petType.setName("cat");
		pet.setType(petType);
		pet.setBirthDate(LocalDate.now());
		when(owners.findById(1)).thenReturn(owner);
		Pet result = petController.findPet(1, 2);
		assertTrue(result.equals(pet));
	}

}