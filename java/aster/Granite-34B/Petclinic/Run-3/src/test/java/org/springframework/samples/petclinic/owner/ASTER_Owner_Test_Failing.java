/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Test_Failing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_CdGl0() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		owner.addVisit(1, visit);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithExistingPet_HYJV0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.getPets().add(pet);
		Pet result = owner.getPet(pet.getId());
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetCaseSensitive_CIlK4() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("Pet1");
		owner.getPets().add(pet);
		Pet result = owner.getPet("pet1", false);
		assert result == null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetNullPetName_nZPG5() {
		Owner owner = new Owner();
		Pet result = owner.getPet(null, false);
		assert result == null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddress_kEaJ0_nNQl0_1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("petName", false);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddress_kEaJ0_nNQl0_2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("petName", false);
		assertNotNull(pet.getVisits());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddress_kEaJ0_nNQl0_3() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("petName", false);
		assertNotNull(pet.getType());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddress_kEaJ0_nNQl0_4() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("petName", false);
		assertNotNull(pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetExistingPetIgnoreNew_YUyc2_mQlg0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("pet1");
		owner.getPets().add(pet);
		Pet result = owner.getPet("pet1", true);
		assert result != null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_HMTQ0_NKll0() {
		Owner owner = new Owner();
		owner.setId(1);
		Pet pet = new Pet();
		pet.setName("John");
		owner.setFirstName("John");
		owner.setLastName("Doe");
		owner.setAddress("123 Main St");
		owner.setCity("Anytown");
		owner.setTelephone("123-456-7890");
		String expected = "[Owner@6c846325 id = 1, new = false, lastName = 'Doe', firstName = 'John', address = '123 Main St', city = 'Anytown', telephone = '123-456-7890']";
		assertEquals(expected, owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPets_NcDn0_fid2() {
		Owner owner = new Owner();
		List<Pet> pets = owner.getPets();
		assertEquals(null, pets);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithExistingPet_HYJV0_fid2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.getPets().add(pet);
		Pet result = owner.getPet(pet.getId());
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCity_EAlP0_iNyQ0_fid3() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("pet", false);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_HMTQ0_NKll0_fid3() {
		Owner owner = new Owner();
		owner.setId(1);
		Pet pet = new Pet();
		pet.setName("John");
		owner.setFirstName("John");
		owner.setLastName("Doe");
		owner.setAddress("123 Main St");
		owner.setCity("Anytown");
		owner.setTelephone("123-456-7890");
		String expected = "id=1, new=true, lastName=Doe, firstName=John, address=123 Main St, city=Anytown, telephone=123-456-7890";
		assertEquals(expected, owner.toString());
	}

}