/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.vet;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Vet_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialties_YSjt0() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals(0, specialties.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNrOfSpecialties_FEnh0() {
		Vet vet = new Vet();
		int result = vet.getNrOfSpecialties();
		assertEquals(0, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternalWhenSpecialtiesIsNull_iClL0() {
		Vet vet = new Vet();
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertNotNull(specialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternalWhenSpecialtiesIsNotNull_iSvN1() {
		Vet vet = new Vet();
		vet.getSpecialtiesInternal();
		vet.getSpecialtiesInternal();
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertNotNull(specialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddSpecialty_krme0_pCVm1() {
		Vet vet = new Vet();
		Specialty specialty = new Specialty();
		vet.addSpecialty(specialty);
		Set<Specialty> specialtiesInternal = vet.getSpecialtiesInternal();
		assertTrue(specialtiesInternal.contains(specialty));
	}

}