/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Coverage_Test_Failing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPetTest1_rmcx0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("dog", true);
		assertNotNull(pet);
		assertEquals("dog", pet.getName());
		assertTrue(pet.isNew());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPetTest2_Ekhn1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("cat", false);
		assertNotNull(pet);
		assertEquals("cat", pet.getName());
		assertFalse(pet.isNew());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPetTest1_rmcx0_1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("dog", true);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPetTest1_rmcx0_2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("dog", true);
		assertEquals("dog", pet.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPetTest1_rmcx0_3() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("dog", true);
		assertTrue(pet.isNew());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPetTest2_Ekhn1_1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("cat", false);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPetTest2_Ekhn1_2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("cat", false);
		assertEquals("cat", pet.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPetTest2_Ekhn1_3() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("cat", false);
		assertFalse(pet.isNew());
	}

}