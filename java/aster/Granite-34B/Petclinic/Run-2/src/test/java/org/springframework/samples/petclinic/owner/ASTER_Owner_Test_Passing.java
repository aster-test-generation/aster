/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCity_eVZq0() {
		Owner owner = new Owner();
		owner.setCity("New York");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityWithNull_zukJ1() {
		Owner owner = new Owner();
		owner.setCity(null);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityWithEmpty_PjzD2() {
		Owner owner = new Owner();
		owner.setCity("");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getCityTest_fRvG0() {
		Owner owner = new Owner();
		owner.setCity("New York");
		String city = owner.getCity();
		org.junit.jupiter.api.Assertions.assertEquals("New York", city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getTelephone_jVGF0() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-7890");
		assertEquals("123-456-7890", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getTelephone_null_HgHG1() {
		Owner owner = new Owner();
		owner.setTelephone(null);
		assertEquals(null, owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getTelephone_empty_YEnL2() {
		Owner owner = new Owner();
		owner.setTelephone("");
		assertEquals("", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephone_DYZi0() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-7890");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneNull_DsLQ1() {
		Owner owner = new Owner();
		owner.setTelephone(null);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneEmpty_sRie2() {
		Owner owner = new Owner();
		owner.setTelephone("");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneInvalid_PZuN3() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-789");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneLong_rVAj5() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-78901");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneShort_ywyw6() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-7");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneInvalidChar_TIsO7() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-789a");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneInvalidChar2_VZYa8() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-789@");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneInvalidChar3_boPL9() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-789#");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneInvalidChar4_reWk10() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-789$");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneInvalidChar5_yxpV11() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-789%");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneInvalidChar6_fsvE12() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-789^");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneInvalidChar7_ZaXv13() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-789&");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneInvalidChar8_KQAN14() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-789=");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_jpOv0_1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("name");
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_jpOv0_2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("name");
		assertEquals(pet.getVisits(), pet.getVisits());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_jpOv0_3() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("name");
		assertEquals(pet.getType(), pet.getType());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_jpOv0_4() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("name");
		assertEquals(pet.getBirthDate(), pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPet_should_return_null_when_name_is_null_FzrB1() {
		String name = null;
		boolean ignoreNew = false;
		Owner owner = new Owner();
		Pet actual = owner.getPet(name, ignoreNew);
		assertNull(actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_oDIv0() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		Integer petId = 1;
		owner.addVisit(petId, visit);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getAddressTest_CxUN0() {
		Owner owner = new Owner();
		owner.setAddress("123 Main Street");
		String address = owner.getAddress();
		org.junit.jupiter.api.Assertions.assertEquals("123 Main Street", address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getAddressNullTest_vKdV1() {
		Owner owner = new Owner();
		String address = owner.getAddress();
		org.junit.jupiter.api.Assertions.assertNull(address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getAddressEmptyTest_uxSW2() {
		Owner owner = new Owner();
		owner.setAddress("");
		String address = owner.getAddress();
		org.junit.jupiter.api.Assertions.assertEquals("", address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_1_kRqX0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(1);
		Assertions.assertEquals(null, pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_2_OlmR1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(2);
		Assertions.assertEquals(null, pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_3_oKpG2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(3);
		Assertions.assertEquals(null, pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setAddressTest_Gwen0() {
		Owner owner = new Owner();
		owner.setAddress("123 Main Street");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_jpOv0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("name");
		assertNotNull(pet);
		assertEquals(pet.getVisits(), pet.getVisits());
		assertEquals(pet.getType(), pet.getType());
		assertEquals(pet.getBirthDate(), pet.getBirthDate());
	}

}