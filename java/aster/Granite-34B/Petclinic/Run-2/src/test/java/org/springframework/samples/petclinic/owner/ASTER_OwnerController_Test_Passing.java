/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OwnerController_Test_Passing {

	private OwnerController ownerController;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void findOwnerWithValidInput_returnsOwner_vejt0() {
		OwnerRepository mockOwnerRepository = mock(OwnerRepository.class);
		Owner owner = new Owner();
		when(mockOwnerRepository.findById(anyInt())).thenReturn(owner);
		OwnerController ownerController = new OwnerController(mockOwnerRepository);
		Owner result = ownerController.findOwner(1);
		assertEquals(owner, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void findOwnerWithInvalidInput_returnsDefaultOwner_rvJY1() {
		OwnerRepository mockOwnerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(mockOwnerRepository);
		Owner result = ownerController.findOwner(null);
		assertEquals(new Owner(), result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitFindForm_lqdG0_MiSG0() {
		OwnerRepository clinicService = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(clinicService);
		String result = controller.initFindForm();
		assertEquals("owners/findOwners", result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testShowOwnerWithException_uJEV2_GvOH0() {
		OwnerRepository clinicService = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(clinicService);
		int ownerId = 1;
		Owner owner = new Owner();
		owner.setId(ownerId);
		when(clinicService.findById(ownerId)).thenThrow(new RuntimeException("Error"));
		try {
			controller.showOwner(ownerId);
		}
		catch (RuntimeException e) {
			assertEquals("Error", e.getMessage());
		}
	}

}