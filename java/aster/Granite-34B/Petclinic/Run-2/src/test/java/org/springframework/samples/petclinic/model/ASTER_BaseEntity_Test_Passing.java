/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Random;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BaseEntity_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsNew_WhenIdIsNullOrEmpty_ReturnsTrue_lxYJ0() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(null);
		boolean actual = baseEntity.isNew();
		boolean expected = true;
		assert actual == expected;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getIdTest_LLPB0() {
		BaseEntity baseEntity = new BaseEntity();
		Integer expected = baseEntity.getId();
		Integer actual = baseEntity.getId();
		org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setId_JaJN0() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(1);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setId_zero_eYgb1() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(0);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setId_null_YybK2() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(null);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setId_negative_OVPw3() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(-1);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setId_maxValue_NABi5() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(Integer.MAX_VALUE);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setId_minValue_BEcd6() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(Integer.MIN_VALUE);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setId_randomValue_bXXn7() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(new Random().nextInt());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setId_customValue_iqCD12() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(5);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setId_customValue2_xmlr13() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(10);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsNew_WhenIdIsPresent_ReturnsFalse_TdPH1_XkRE0() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(1);
		boolean actual = baseEntity.isNew();
		boolean expected = false;
		assert actual == expected;
	}

}