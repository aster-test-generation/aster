/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.Collection;
import org.springframework.web.bind.WebDataBinder;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PetController_Coverage_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwnerWithValidId_fclX0() {
		OwnerRepository mockOwnerRepository = mock(OwnerRepository.class);
		Owner owner = new Owner();
		when(mockOwnerRepository.findById(anyInt())).thenReturn(owner);
		PetController petController = new PetController(mockOwnerRepository);
		Owner resultOwner = petController.findOwner(1);
		assertEquals(owner, resultOwner);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwnerWithInvalidId_uVWt1() {
		OwnerRepository mockOwnerRepository = mock(OwnerRepository.class);
		when(mockOwnerRepository.findById(anyInt())).thenReturn(null);
		PetController petController = new PetController(mockOwnerRepository);
		try {
			petController.findOwner(1);
			fail("Expected IllegalArgumentException");
		}
		catch (IllegalArgumentException e) {
			assertEquals("Owner ID not found: 1", e.getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwnerWithZeroId_Ziuw3() {
		OwnerRepository mockOwnerRepository = mock(OwnerRepository.class);
		when(mockOwnerRepository.findById(anyInt())).thenReturn(null);
		PetController petController = new PetController(mockOwnerRepository);
		try {
			petController.findOwner(0);
			fail("Expected IllegalArgumentException");
		}
		catch (IllegalArgumentException e) {
			assertEquals("Owner ID not found: 0", e.getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindPetWithOwnerFoundAndPetIdNull_fZru2() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		Owner owner = mock(Owner.class);
		when(ownerRepository.findById(1)).thenReturn(owner);
		PetController petController = new PetController(ownerRepository);
		Pet pet = petController.findPet(1, null);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindPetWithOwnerFoundAndPetIdFound_laeg4() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		Owner owner = mock(Owner.class);
		Pet pet = mock(Pet.class);
		when(ownerRepository.findById(1)).thenReturn(owner);
		when(owner.getPet(1)).thenReturn(pet);
		PetController petController = new PetController(ownerRepository);
		Pet result = petController.findPet(1, 1);
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindPetWithOwnerFoundAndPetIdFoundAndVisitCollectionSizeIsOne_utIk5() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		Owner owner = mock(Owner.class);
		Pet pet = mock(Pet.class);
		Visit visit = mock(Visit.class);
		when(ownerRepository.findById(1)).thenReturn(owner);
		when(owner.getPet(1)).thenReturn(pet);
		when(pet.getVisits()).thenReturn(Collections.singletonList(visit));
		PetController petController = new PetController(ownerRepository);
		Pet result = petController.findPet(1, 1);
		assertEquals(1, result.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testPopulatePetTypes_vRNT0_LJqg0() {
		OwnerRepository owners = mock(OwnerRepository.class);
		PetController petController = new PetController(owners);
		Collection<PetType> petTypes = petController.populatePetTypes();
		assertEquals(owners.findPetTypes(), petTypes);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitOwnerBinderWithException_BaEO1_xveP0() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		PetController petController = new PetController(ownerRepository);
		try {
			petController.initOwnerBinder(null);
			fail("Exception should be thrown");
		}
		catch (Exception e) {
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitOwnerBinder_tAuI0_fdlf0() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		PetController petController = new PetController(ownerRepository);
		try {
			petController.initOwnerBinder(new WebDataBinder(null));
		}
		catch (Exception e) {
			fail("Exception should not be thrown");
		}
	}

}