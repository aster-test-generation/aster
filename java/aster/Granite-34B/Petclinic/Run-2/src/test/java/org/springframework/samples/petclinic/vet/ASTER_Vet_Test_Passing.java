/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.vet;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Vet_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getNrOfSpecialties_whenNoSpecialties_thenZero_ZaBt0() {
		Vet vet = new Vet();
		int actual = vet.getNrOfSpecialties();
		int expected = 0;
		assert actual == expected;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getNrOfSpecialties_whenOneSpecialty_thenOne_QGLh1() {
		Vet vet = new Vet();
		vet.addSpecialty(new Specialty());
		int actual = vet.getNrOfSpecialties();
		int expected = 1;
		assert actual == expected;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getNrOfSpecialties_whenTwoSpecialties_thenTwo_fFVJ2() {
		Vet vet = new Vet();
		vet.addSpecialty(new Specialty());
		vet.addSpecialty(new Specialty());
		int actual = vet.getNrOfSpecialties();
		int expected = 2;
		assert actual == expected;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getSpecialties_shouldReturnSortedSpecialties_JMIZ0() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals(3, specialties.size());
		assertTrue(specialties.get(0).getName().equals("radiology"));
		assertTrue(specialties.get(1).getName().equals("surgery"));
		assertTrue(specialties.get(2).getName().equals("dentistry"));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testSetSpecialtiesInternal_Momk0() {
		Vet vet = new Vet();
		Set<Specialty> specialties = new HashSet<>();
		vet.setSpecialtiesInternal(specialties);
		assertNotNull(vet.getSpecialtiesInternal());
		assertEquals(specialties, vet.getSpecialtiesInternal());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testSetSpecialtiesInternalWithNullParameter_mgyV1() {
		Vet vet = new Vet();
		vet.setSpecialtiesInternal(null);
		assertTrue(vet.getSpecialtiesInternal().isEmpty());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testSetSpecialtiesInternalWithMock_FVfV2() {
		Vet vet = new Vet();
		Set<Specialty> specialties = mock(Set.class);
		vet.setSpecialtiesInternal(specialties);
		verify(specialties).addAll(specialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testSetSpecialtiesInternalWithWhenClause_pRjy3() {
		Vet vet = new Vet();
		Set<Specialty> specialties = new HashSet<>();
		Specialty specialty = mock(Specialty.class);
		when(specialty.getName()).thenReturn("Specialty Name");
		specialties.add(specialty);
		vet.setSpecialtiesInternal(specialties);
		assertEquals("Specialty Name", vet.getSpecialtiesInternal().iterator().next().getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getSpecialtiesInternal_whenSpecialtiesNull_thenHashSetCreated_siIc0() {
		Vet vet = new Vet();
		vet.getSpecialtiesInternal();
		assertNotNull(vet.getSpecialtiesInternal());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddSpecialty_QjcS0() {
		Vet vet = new Vet();
		Specialty specialty = new Specialty();
		vet.addSpecialty(specialty);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getSpecialties_shouldReturnSortedSpecialties_JMIZ0_1() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals(3, specialties.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getSpecialties_shouldReturnSortedSpecialties_JMIZ0_2() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertTrue(specialties.get(0).getName().equals("radiology"));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getSpecialties_shouldReturnSortedSpecialties_JMIZ0_3() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertTrue(specialties.get(1).getName().equals("surgery"));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getSpecialties_shouldReturnSortedSpecialties_JMIZ0_4() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertTrue(specialties.get(2).getName().equals("dentistry"));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testSetSpecialtiesInternal_Momk0_1() {
		Vet vet = new Vet();
		Set<Specialty> specialties = new HashSet<>();
		vet.setSpecialtiesInternal(specialties);
		assertNotNull(vet.getSpecialtiesInternal());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testSetSpecialtiesInternal_Momk0_2() {
		Vet vet = new Vet();
		Set<Specialty> specialties = new HashSet<>();
		vet.setSpecialtiesInternal(specialties);
		assertEquals(specialties, vet.getSpecialtiesInternal());
	}

}