/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.time.LocalDate;
import java.util.Collection;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Pet_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetVisits_GdsV0() {
		Pet pet = new Pet();
		Collection<Visit> visits = pet.getVisits();
		assertNotNull(visits);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetVisitsCoverage_mkXh1() {
		Pet pet = new Pet();
		pet.getVisits();
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitNullVisit_EDEM1() {
		Pet pet = new Pet();
		try {
			pet.addVisit(null);
			fail("Expected IllegalArgumentException");
		}
		catch (IllegalArgumentException e) {
			assertEquals("Visit cannot be null", e.getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitNullDate_XQch2() {
		Pet pet = new Pet();
		Visit visit = new Visit();
		visit.setDescription("Test visit");
		try {
			pet.addVisit(visit);
			fail("Expected IllegalArgumentException");
		}
		catch (IllegalArgumentException e) {
			assertEquals("Visit date cannot be null", e.getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitNullDescription_qZPM3() {
		Pet pet = new Pet();
		Visit visit = new Visit();
		visit.setDate(LocalDate.now());
		try {
			pet.addVisit(visit);
			fail("Expected IllegalArgumentException");
		}
		catch (IllegalArgumentException e) {
			assertEquals("Visit description cannot be null", e.getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTypeWithNullType_WMUS1() {
		Pet pet = new Pet();
		assertEquals(pet.getType(), null);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBirthDate_cwVl0() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.now();
		assertEquals(birthDate, pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setType_withNullParameter_shouldThrowException_ZHhD0_1() {
		Pet pet = new Pet();
		PetType type = null;
		Exception exception = org.junit.jupiter.api.Assertions.assertThrows(Exception.class, () -> pet.setType(type));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setType_withValidParameter_shouldSetType_TLnK1() {
		Pet pet = new Pet();
		PetType type = new PetType();
		pet.setType(type);
		org.junit.jupiter.api.Assertions.assertEquals(type, pet.getType());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTypeWithMultiplePets_aecs2_Wxuv0_1() {
		Pet pet1 = new Pet();
		pet1.setType(new PetType());
		Pet pet2 = new Pet();
		pet2.setType(new PetType());
		assertEquals(pet1.getType(), pet1.getType());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTypeWithMultiplePets_aecs2_Wxuv0_2() {
		Pet pet1 = new Pet();
		pet1.setType(new PetType());
		Pet pet2 = new Pet();
		pet2.setType(new PetType());
		assertEquals(pet2.getType(), pet2.getType());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTypeAfterSettingNullType_ddRZ5_VDtC0() {
		Pet pet = new Pet();
		pet.setType(new PetType());
		pet.setType(null);
		assertEquals(pet.getType(), null);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBirthDateWithMinimumCoverage_tvTz2_MWmG0() {
		Pet pet = new Pet();
		pet.setBirthDate(LocalDate.MIN);
		assertEquals(LocalDate.MIN, pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBirthDateWithRandomCoverage_cbYa3_GrRt0() {
		Pet pet = new Pet();
		pet.setBirthDate(LocalDate.of(2022, 12, 31));
		assertEquals(LocalDate.of(2022, 12, 31), pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void setType_withNullParameter_shouldThrowException_ZHhD0() {
		Pet pet = new Pet();
		PetType type = null;
		Exception exception = org.junit.jupiter.api.Assertions.assertThrows(Exception.class, () -> pet.setType(type));
		org.junit.jupiter.api.Assertions.assertEquals("Parameter 'type' cannot be null", exception.getMessage());
	}

}