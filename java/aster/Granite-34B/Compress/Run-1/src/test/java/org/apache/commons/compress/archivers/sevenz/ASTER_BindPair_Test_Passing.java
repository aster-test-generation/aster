/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BindPair_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_MuVl0() {
        BindPair bindPair = new BindPair(1, 2);
        String expected = "BindPair binding input 1 to output 2";
        assertEquals(expected, bindPair.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNegativeInput_EYEx1() {
        BindPair bindPair = new BindPair(-1, 2);
        String expected = "BindPair binding input -1 to output 2";
        assertEquals(expected, bindPair.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNegativeOutput_Ojet2() {
        BindPair bindPair = new BindPair(1, -2);
        String expected = "BindPair binding input 1 to output -2";
        assertEquals(expected, bindPair.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithZeroInput_UjzM3() {
        BindPair bindPair = new BindPair(0, 2);
        String expected = "BindPair binding input 0 to output 2";
        assertEquals(expected, bindPair.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithZeroOutput_yOES4() {
        BindPair bindPair = new BindPair(1, 0);
        String expected = "BindPair binding input 1 to output 0";
        assertEquals(expected, bindPair.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNegativeInputAndOutput_schN11() {
        BindPair bindPair = new BindPair(-1, -2);
        String expected = "BindPair binding input -1 to output -2";
        assertEquals(expected, bindPair.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithZeroInputAndOutput_tUDa12() {
        BindPair bindPair = new BindPair(0, 0);
        String expected = "BindPair binding input 0 to output 0";
        assertEquals(expected, bindPair.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithMaxInput_uizC13() {
        BindPair bindPair = new BindPair(Integer.MAX_VALUE, 2);
        String expected = "BindPair binding input " + Integer.MAX_VALUE + " to output 2";
        assertEquals(expected, bindPair.toString());
    }
}