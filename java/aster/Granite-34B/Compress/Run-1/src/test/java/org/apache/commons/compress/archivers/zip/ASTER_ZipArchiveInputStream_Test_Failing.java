/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.util.zip.ZipException;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test1_DxCY0() throws Throwable {
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
    long long0 = zipArchiveInputStream0.getCompressedCount();
    assertEquals((-1L), long0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test2_csdT1() throws Throwable {
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
    long long0 = zipArchiveInputStream0.getCompressedCount();
    assertEquals(0L, long0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test3_WIup2() throws Throwable {
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
    long long0 = zipArchiveInputStream0.getCompressedCount();
    assertEquals((-1L), long0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test5_OYbm4() throws Throwable {
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, "org.apache.commons.io.input.ClosedInputStream@0000000002", false);
    long long0 = zipArchiveInputStream0.getCompressedCount();
    assertEquals((-1L), long0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test6_crSj5() throws Throwable {
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, "UTF-8");
    long long0 = zipArchiveInputStream0.getCompressedCount();
    assertEquals((-1L), long0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextZipEntryWithInvalidInputStream_OJEX2() throws IOException {
        ZipArchiveInputStream zin = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[]{0x50, 0x4b, 0x03, 0x04}));
        try {
            zin.getNextZipEntry();
            fail("Expected ZipException");
        } catch (ZipException e) {
            assertTrue(true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextZipEntry_with_valid_input_should_return_entry_dibg0() throws IOException {
        byte[] lfhBuf = new byte[30];
        ZipArchiveInputStream zin = new ZipArchiveInputStream(new ByteArrayInputStream(lfhBuf));
        ZipArchiveEntry entry = zin.getNextZipEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_gEOE0_fid1() {
    byte[] signature = new byte[10];
    int length = 10;
    boolean result = ZipArchiveInputStream.matches(signature, length);
    assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test3_WIup2_fid1() throws Throwable {
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, "org.apache.commons.io.input.ClosedInputStream@0000000002", false, false, false);
    long long0 = zipArchiveInputStream0.getCompressedCount();
    assertEquals((-1L), long0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test4_SdVc3_fid1() throws Throwable {
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, "org.apache.commons.io.input.ClosedInputStream@0000000002", false, false);
    long long0 = zipArchiveInputStream0.getCompressedCount();
    assertEquals((-1L), long0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test6_crSj5_fid1() throws Throwable {
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, "org.apache.commons.io.input.ClosedInputStream@0000000002");
    long long0 = zipArchiveInputStream0.getCompressedCount();
    assertEquals((-1L), long0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testReadWithOffsetAndLength_wJnS0_1_fid1() throws IOException {
		ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] { 0x01, 0x02, 0x03 }));
		byte[] buffer = new byte[1];
		int read = zais.read(buffer, 0, 1);
		zais.close();
		assertEquals(1, read);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testReadWithOffsetAndLength_wJnS0_2() throws IOException {
		ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] { 0x01, 0x02, 0x03 }));
		byte[] buffer = new byte[1];
		int read = zais.read(buffer, 0, 1);
		zais.close();
		assertEquals(0x01, buffer[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testReadWithOffsetAndLength_wJnS0_3() throws IOException {
		ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] { 0x01, 0x02, 0x03 }));
		byte[] buffer = new byte[1];
		int read = zais.read(buffer, 0, 1);
		zais.close();
		assertEquals(-1, zais.read(buffer, 0, 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testReadWithOffsetAndLengthAtTheEnd_kOuN1_1() throws IOException {
		ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] { 0x01, 0x02, 0x03 }));
		byte[] buffer = new byte[1];
		zais.close();
		assertEquals(1, zais.read(buffer, 0, 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testReadWithOffsetAndLengthAtTheEnd_kOuN1_4() throws IOException {
		ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] { 0x01, 0x02, 0x03 }));
		byte[] buffer = new byte[1];
		zais.close();
		assertEquals(-1, zais.read(buffer, 0, 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_CrLQ0() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1024];
    int read = zais.read(buffer);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffset_ZXJH1() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1024];
    int read = zais.read(buffer, 10, 100);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadAfterClose_QEYu2() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.close();
    byte[] buffer = new byte[1024];
    int read = zais.read(buffer);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithStoredEntry_UIHP3() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.getNextEntry();
    byte[] buffer = new byte[1024];
    int read = zais.read(buffer);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidOffset_FhZm6() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1024];
    try {
        zais.read(buffer, -1, 100);
        fail("Expected ArrayIndexOutOfBoundsException");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidLength_XYWJ7() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1024];
    try {
        zais.read(buffer, 10, -1);
        fail("Expected ArrayIndexOutOfBoundsException");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidBuffer_YtZH8() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    try {
        zais.read(null, 10, 100);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidEntry_UHyk9() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.getNextEntry();
    byte[] buffer = new byte[1024];
    try {
        zais.read(buffer, 10, 100);
        fail("Expected ZipException");
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_bkBq0() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int read = zais.read(buffer, 0, 10);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffset_rJuj1() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int read = zais.read(buffer, 1, 10);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithLength_BclB2() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int read = zais.read(buffer, 0, 1);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetAndLength_PnZR3() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int read = zais.read(buffer, 1, 1);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetAndLength2_rOaj4() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int read = zais.read(buffer, 1, 2);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetAndLength3_sNiO5() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int read = zais.read(buffer, 1, 3);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetAndLength4_wzGi6() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int read = zais.read(buffer, 1, 4);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetAndLength5_gbPF7() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int read = zais.read(buffer, 1, 5);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetAndLength6_Moyg8() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int read = zais.read(buffer, 1, 6);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetAndLength7_oQUL9() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int read = zais.read(buffer, 1, 7);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetAndLength8_GVxF10() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int read = zais.read(buffer, 1, 8);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetAndLength9_YZeO11() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int read = zais.read(buffer, 1, 9);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextZipEntryWithDeflate64CompressorInputStream_NcyI2_xGlM0() throws IOException {
        ZipArchiveInputStream zin = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        ZipArchiveEntry entry = zin.getNextZipEntry();
        if (entry.getMethod() == ZipMethod.ENHANCED_DEFLATED.getCode()) {
            InputStream inputStream = new Deflate64CompressorInputStream(zin);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextZipEntry_zlCH0_rogl0_1() throws IOException {
        ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        ZipArchiveEntry entry = zis.getNextZipEntry();
        zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
        entry = zis.getNextZipEntry();
        zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true);
        entry = zis.getNextZipEntry();
        zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true);
        entry = zis.getNextZipEntry();
        zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
        entry = zis.getNextZipEntry();
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetAndLengthOnNullBuffer_FvsF6_ezjG0() throws IOException {
    final int offset = 2;
    final int length = 5;
    final ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    try {
        zis.read(null, offset, length);
        fail("Expected an NullPointerException");
    } catch (final NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testReadWithOffsetAndLength_wJnS0() throws IOException {
		ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] { 0x01, 0x02, 0x03 }));
		byte[] buffer = new byte[1];
		int read = zais.read(buffer, 0, 1);
		assertEquals(1, read);
		assertEquals(0x01, buffer[0]);
		assertEquals(-1, zais.read(buffer, 0, 1));
		zais.close();
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testReadWithOffsetAndLengthAtTheEnd_kOuN1() throws IOException {
		ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] { 0x01, 0x02, 0x03 }));
		byte[] buffer = new byte[1];
		assertEquals(1, zais.read(buffer, 0, 1));
		assertEquals(1, zais.read(buffer, 0, 1));
		assertEquals(1, zais.read(buffer, 0, 1));
		assertEquals(-1, zais.read(buffer, 0, 1));
		zais.close();
	}
}