/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LineNumberTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEqualsWithSameObject_oJWB0() {
        LineNumberTableAttribute attribute = new LineNumberTableAttribute(1, new int[]{1}, new int[]{1});
        Object obj = attribute;
        boolean result = attribute.equals(obj);
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEqualsWithNullObject_cjGe1() {
        LineNumberTableAttribute attribute = new LineNumberTableAttribute(1, new int[]{1}, new int[]{1});
        Object obj = null;
        boolean result = attribute.equals(obj);
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNestedClassFileEntries_nUxZ0() {
        LineNumberTableAttribute line = new LineNumberTableAttribute(1, new int[]{1}, new int[]{1});
        ClassFileEntry[] result = line.getNestedClassFileEntries();
        assertEquals(1, result.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testWriteBody_xZSh0() throws IOException {
        LineNumberTableAttribute attribute = new LineNumberTableAttribute(2, new int[]{1, 2}, new int[]{3, 4});
        DataOutputStream dos = new DataOutputStream(System.out);
        attribute.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testWriteBodyWithEmptyTable_EMFv1() throws IOException {
        LineNumberTableAttribute attribute = new LineNumberTableAttribute(0, new int[]{}, new int[]{});
        DataOutputStream dos = new DataOutputStream(System.out);
        attribute.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStartPCs_ZFar0() {
        LineNumberTableAttribute attribute = new LineNumberTableAttribute(10, new int[]{1, 2, 3}, new int[]{4, 5, 6});
        int[] expected = {1, 2, 3};
        assertArrayEquals(expected, attribute.getStartPCs());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStartPCs_nullStartPcs_IHaV2() {
        LineNumberTableAttribute attribute = new LineNumberTableAttribute(10, null, new int[]{4, 5, 6});
        int[] expected = null;
        assertArrayEquals(expected, attribute.getStartPCs());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStartPCs_emptyStartPcs_xoTN3() {
        LineNumberTableAttribute attribute = new LineNumberTableAttribute(10, new int[]{}, new int[]{4, 5, 6});
        int[] expected = new int[]{};
        assertArrayEquals(expected, attribute.getStartPCs());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getLengthTest_hfXC0() {
        LineNumberTableAttribute line = new LineNumberTableAttribute(1, new int[]{1}, new int[]{1});
        int actual = line.getLength();
        int expected = 2 + 4 * 1;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getLengthTest2_TlLD2() {
        LineNumberTableAttribute line = new LineNumberTableAttribute(2, new int[]{1, 2}, new int[]{1, 2});
        int actual = line.getLength();
        int expected = 2 + 4 * 2;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getLengthTest3_emAS3() {
        LineNumberTableAttribute line = new LineNumberTableAttribute(3, new int[]{1, 2, 3}, new int[]{1, 2, 3});
        int actual = line.getLength();
        int expected = 2 + 4 * 3;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getLengthTest4_TUQm4() {
        LineNumberTableAttribute line = new LineNumberTableAttribute(4, new int[]{1, 2, 3, 4}, new int[]{1, 2, 3, 4});
        int actual = line.getLength();
        int expected = 2 + 4 * 4;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getLengthTest5_ICjk5() {
        LineNumberTableAttribute line = new LineNumberTableAttribute(5, new int[]{1, 2, 3, 4, 5}, new int[]{1, 2, 3, 4, 5});
        int actual = line.getLength();
        int expected = 2 + 4 * 5;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToString_oKty0() {
        LineNumberTableAttribute attribute = new LineNumberTableAttribute(10, new int[]{1, 2, 3}, new int[]{10, 20, 30});
        String actual = attribute.toString();
        String expected = "LineNumberTable: 10 lines";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToStringWithNoLines_UwkV1() {
        LineNumberTableAttribute attribute = new LineNumberTableAttribute(0, new int[]{}, new int[]{});
        String actual = attribute.toString();
        String expected = "LineNumberTable: 0 lines";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToStringWithOneLine_MksB2() {
        LineNumberTableAttribute attribute = new LineNumberTableAttribute(1, new int[]{1}, new int[]{10});
        String actual = attribute.toString();
        String expected = "LineNumberTable: 1 lines";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToStringWithMultipleLines_HGzt3() {
        LineNumberTableAttribute attribute = new LineNumberTableAttribute(5, new int[]{1, 2, 3, 4, 5}, new int[]{10, 20, 30, 40, 50});
        String actual = attribute.toString();
        String expected = "LineNumberTable: 5 lines";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToStringWithNullStartPcs_mMXm5() {
        LineNumberTableAttribute attribute = new LineNumberTableAttribute(10, null, new int[]{10, 20, 30});
        String actual = attribute.toString();
        String expected = "LineNumberTable: 10 lines";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToStringWithNullLineNumbers_ulXN6() {
        LineNumberTableAttribute attribute = new LineNumberTableAttribute(10, new int[]{1, 2, 3}, null);
        String actual = attribute.toString();
        String expected = "LineNumberTable: 10 lines";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToStringWithDifferentLength_jufK7() {
        LineNumberTableAttribute attribute = new LineNumberTableAttribute(10, new int[]{1, 2}, new int[]{10, 20, 30});
        String actual = attribute.toString();
        String expected = "LineNumberTable: 10 lines";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToStringWithNegativeLength_dlcn4_fid1() {
        LineNumberTableAttribute attribute = new LineNumberTableAttribute(-1, new int[]{}, new int[]{});
        String actual = attribute.toString();
        String expected = "LineNumberTable: -1 lines";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
}