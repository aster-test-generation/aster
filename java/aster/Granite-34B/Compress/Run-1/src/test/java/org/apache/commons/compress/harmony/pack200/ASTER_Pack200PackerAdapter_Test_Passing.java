/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.IOException;
import java.io.OutputStream;
import java.util.jar.JarFile;
import java.util.jar.JarInputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200PackerAdapter_Test_Passing {

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullOutputStream_nOpF42() throws Exception   {
        Pack200PackerAdapter adapter = new Pack200PackerAdapter();
        JarInputStream in = new JarInputStream(null);
        OutputStream out = null;
        try {
            adapter.pack(in, out);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullOutputStream_MyxH22() throws IOException {
        Pack200PackerAdapter adapter = new Pack200PackerAdapter();
        JarFile jarFile = new JarFile("path/to/valid/jar/file.jar");
        IOException exception = assertThrows(IOException.class, () -> adapter.pack(jarFile, null));
        assertEquals("Must specify both input and output streams", exception.getMessage());
    }


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullOutputStream_nOpF4() throws Exception   {
        Pack200PackerAdapter adapter = new Pack200PackerAdapter();
        JarInputStream in = new JarInputStream(null);
        OutputStream out = null;
        try {
            adapter.pack(in, out);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullOutputStream_MyxH2() throws IOException {
        Pack200PackerAdapter adapter = new Pack200PackerAdapter();
        JarFile jarFile = new JarFile("path/to/valid/jar/file.jar");
        IOException exception = assertThrows(IOException.class, () -> adapter.pack(jarFile, null));
        assertEquals("Must specify both input and output streams", exception.getMessage());
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullOutputStream_nOpF41() throws Exception  {
        Pack200PackerAdapter adapter = new Pack200PackerAdapter();
        JarInputStream in = new JarInputStream(null);
        OutputStream out = null;
        try {
            adapter.pack(in, out);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullOutputStream_MyxH21() throws IOException {
        Pack200PackerAdapter adapter = new Pack200PackerAdapter();
        JarFile jarFile = new JarFile("path/to/valid/jar/file.jar");
        IOException exception = assertThrows(IOException.class, () -> adapter.pack(jarFile, null));
        assertEquals("Must specify both input and output streams", exception.getMessage());
    }
}