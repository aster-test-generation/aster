/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileNameUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getExtension_NullFileName_ReturnsNull_Ccsx0() {
    String fileName = null;
    String expected = null;
    String actual = FileNameUtils.getExtension(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getExtension_OneExtension_ReturnsExtension_iFBw3() {
    String fileName = "filename.txt";
    String expected = "txt";
    String actual = FileNameUtils.getExtension(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getExtension_MultipleExtensions_ReturnsLastExtension_qEcn4() {
    String fileName = "filename.tar.gz";
    String expected = "gz";
    String actual = FileNameUtils.getExtension(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getBaseName_with_valid_input_niAQ0() {
		assertEquals("test",FileNameUtils.getBaseName("test.txt"));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getBaseName_with_empty_input_FEir2() {
		assertEquals("",FileNameUtils.getBaseName(""));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getBaseName_with_no_extension_svbr3() {
		assertEquals("test",FileNameUtils.getBaseName("test"));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getExtension_EmptyFileName_ReturnsNull_WHIX1_fid1() {
    String fileName = "";
    String expected = null;
    String actual = FileNameUtils.getExtension(fileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getExtension_NoExtension_ReturnsNull_JHqx2_fid1() {
    String fileName = "filename";
    String expected = null;
    String actual = FileNameUtils.getExtension(fileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getExtension_InvalidFileName_ReturnsNull_vPMF5_fid1() {
    String fileName = "filename.";
    String expected = null;
    String actual = FileNameUtils.getExtension(fileName);
    assertNull(expected);
}
}