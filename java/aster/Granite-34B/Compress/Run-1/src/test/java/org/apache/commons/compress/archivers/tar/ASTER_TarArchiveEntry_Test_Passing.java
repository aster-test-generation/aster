/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.io.IOException;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDevMajorTest_QRyP0() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    int devMajor = entry.getDevMajor();
    assertEquals(0, devMajor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDevMajorTest1_AdZq1() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    entry.setDevMajor(1);
    int devMajor = entry.getDevMajor();
    assertEquals(1, devMajor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDevMajorTest2_nFBy2() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    entry.setDevMajor(2);
    int devMajor = entry.getDevMajor();
    assertEquals(2, devMajor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDevMajorTest3_hbwI3() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    entry.setDevMajor(3);
    int devMajor = entry.getDevMajor();
    assertEquals(3, devMajor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDevMajorTest4_QURW4() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    entry.setDevMajor(4);
    int devMajor = entry.getDevMajor();
    assertEquals(4, devMajor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDevMajorTest5_VYem5() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    entry.setDevMajor(5);
    int devMajor = entry.getDevMajor();
    assertEquals(5, devMajor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDevMajorTest6_XLiZ6() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    entry.setDevMajor(6);
    int devMajor = entry.getDevMajor();
    assertEquals(6, devMajor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDevMajorTest7_xbGs7() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    entry.setDevMajor(7);
    int devMajor = entry.getDevMajor();
    assertEquals(7, devMajor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDevMajorTest8_ziXV8() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    entry.setDevMajor(8);
    int devMajor = entry.getDevMajor();
    assertEquals(8, devMajor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDevMajorTest9_DmnE9() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    entry.setDevMajor(9);
    int devMajor = entry.getDevMajor();
    assertEquals(9, devMajor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDevMajorTest10_BSut10() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    entry.setDevMajor(10);
    int devMajor = entry.getDevMajor();
    assertEquals(10, devMajor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDevMajorTest11_OcuS11() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    entry.setDevMajor(11);
    int devMajor = entry.getDevMajor();
    assertEquals(11, devMajor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDevMajorTest12_MXbK12() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    entry.setDevMajor(12);
    int devMajor = entry.getDevMajor();
    assertEquals(12, devMajor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDevMajorTest13_ssdL13() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    entry.setDevMajor(13);
    int devMajor = entry.getDevMajor();
    assertEquals(13, devMajor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDevMajorTest14_iBmP14() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    entry.setDevMajor(14);
    int devMajor = entry.getDevMajor();
    assertEquals(14, devMajor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDevMajorTest15_TqJa15() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    entry.setDevMajor(15);
    int devMajor = entry.getDevMajor();
    assertEquals(15, devMajor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void parseTarHeaderTest_mMYF0() {
    byte[] header = new byte[512];
    TarArchiveEntry entry = new TarArchiveEntry(header);
    entry.parseTarHeader(header);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_cJSy3() {
        TarArchiveEntry entry = new TarArchiveEntry("name");
        Object it = null;
        boolean result = entry.equals(it);
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithWrongClass_KFDV4() {
        TarArchiveEntry entry = new TarArchiveEntry("name");
        Object it = new Object();
        boolean result = entry.equals(it);
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithCorrectObject_XVKm5() {
        TarArchiveEntry entry = new TarArchiveEntry("name");
        TarArchiveEntry it = new TarArchiveEntry("name");
        boolean result = entry.equals(it);
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLinkFalse_voDV1() {
        TarArchiveEntry entry = new TarArchiveEntry("name", (byte) 0);
        assertFalse(entry.isLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_IRla0() {
        TarArchiveEntry entry = new TarArchiveEntry(new File("testfile.txt"), "testfile.txt");
        assertEquals(entry.getLastModifiedDate(), entry.getModTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithByte_YqBx4() {
        TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
        assertEquals(entry.getLastModifiedDate(), entry.getModTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithNameAndLinkFlag_DBSN5() {
        TarArchiveEntry entry = new TarArchiveEntry("testfile.txt", TarArchiveEntry.LF_GNUTYPE_LONGNAME);
        assertEquals(entry.getLastModifiedDate(), entry.getModTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithName_arLH6() {
        TarArchiveEntry entry = new TarArchiveEntry("testfile.txt");
        assertEquals(entry.getLastModifiedDate(), entry.getModTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithFile_xzVc7() {
        TarArchiveEntry entry = new TarArchiveEntry(new File("testfile.txt"));
        assertEquals(entry.getLastModifiedDate(), entry.getModTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetSize_validSize_mTqv0() {
		TarArchiveEntry entry = new TarArchiveEntry("testfile");
		entry.setSize(100L);
		assertEquals(100L, entry.getSize());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetSize_invalidSize_jUUv1() {
		TarArchiveEntry entry = new TarArchiveEntry("testfile");
		try {
			entry.setSize(-1L);
			fail("Expected IllegalArgumentException");
		} catch (IllegalArgumentException e) {
			assertTrue(true);
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguous_wZAg1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[1024]);
        assertTrue(tarArchiveEntry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguous_VmKM7() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test");
        assertTrue(tarArchiveEntry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguous_Rxae8() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test", true);
        assertTrue(tarArchiveEntry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_elRD1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"), "test.txt");
        assertEquals(tarArchiveEntry.getName().hashCode(), tarArchiveEntry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_xmiD3() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[512]);
        assertEquals(tarArchiveEntry.getName().hashCode(), tarArchiveEntry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsGNULongLinkEntryWithLinkFlagAsSomethingElse_xzcf1() {
        TarArchiveEntry entry = new TarArchiveEntry("name", (byte) 0);
        assertFalse(entry.isGNULongLinkEntry());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWhenNameEndsWithSlash_UAHd4() {
        TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
        entry.setName("test.txt/");
        assertFalse(entry.isFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClearExtraPaxHeaders_Kqlh0() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[1024]);
    entry.clearExtraPaxHeaders();
    assertTrue(entry.getExtraPaxHeaders().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTime_eZiZ1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt");
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        tarArchiveEntry.setLastAccessTime(time);
        assertEquals(tarArchiveEntry.getLastAccessTime(), time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_Fddq1() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(time);
    assertEquals(time, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddPaxHeader_HBtq0() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
    entry.addPaxHeader("name", "value");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddPaxHeaderWithEmptyName_wPts3() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
    entry.addPaxHeader("", "value");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddPaxHeaderWithInvalidName_NzjY4() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
    entry.addPaxHeader("invalid name", "value");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddPaxHeaderWithInvalidValue_JdOt5() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
    entry.addPaxHeader("name", "invalid value");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddPaxHeaderWithNegativeSize_OIoM6() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
    entry.addPaxHeader("name", "-1");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddPaxHeaderWithNegativeMtime_LWIo7() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
    entry.addPaxHeader("name", "-1.0");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddPaxHeaderWithInvalidTime_nogA12() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
    entry.addPaxHeader("name", "invalid time");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddPaxHeaderWithInvalidDevMinor_ZVFp13() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
    entry.addPaxHeader("name", "invalid devMinor");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddPaxHeaderWithInvalidDevMajor_ZCPI14() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWhenNameEndsWithSlash_myVb4() {
        TarArchiveEntry entry = new TarArchiveEntry("name/");
        assertTrue(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWhenNotPaxHeaderAndNotGlobalPaxHeader_PLyj5() {
        TarArchiveEntry entry = new TarArchiveEntry("name");
        assertFalse(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFileTimeFromOptionalSecondsWithNullAndZero_oslS12() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPaxGNUSparse_SVHh0() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    boolean result = entry.isPaxGNUSparse();
    assertEquals(false, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_NQaC1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name");
        assertEquals(0, tarArchiveEntry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRealSizeWhenNotSparse_ceRR0() {
        TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
        entry.setSize(100L);
        assertEquals(100L, entry.getRealSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLinkTrue_GzJO0_fid1() {
        TarArchiveEntry entry = new TarArchiveEntry("name", (byte) 1);
        assertFalse(entry.isLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWhenFileExistsAndIsRegularFile_lWOr0_fid1() {
        TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
        assertFalse(entry.isFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_yjsX1_fid1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name");
        assertEquals(33188, tarArchiveEntry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_Jora133188() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
        assertEquals(33188, tarArchiveEntry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUserName_IYlL0_fid1() {
		TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
		String userName = entry.getUserName();
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUserName_clAr1_fid1() {
		TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
		String userName = entry.getUserName();
		assertEquals("", userName);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModTime_NrGM0_cfWS0() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("testfile"), "testfile");
        Date date = new Date();
        tarArchiveEntry.setModTime(date);
        assertEquals(tarArchiveEntry.getModTime(), date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateEntryFromPaxHeadersWithEmptyHeaders_rnJe1_Dlbx0_1() throws IOException {
        Map<String, String> headers = new HashMap<>();
        TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
        entry.updateEntryFromPaxHeaders(headers);
        assertEquals("", entry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateEntryFromPaxHeadersWithEmptyHeaders_rnJe1_Dlbx0_2() throws IOException {
        Map<String, String> headers = new HashMap<>();
        TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
        entry.updateEntryFromPaxHeaders(headers);
        assertEquals("", entry.getGroupName());}
}