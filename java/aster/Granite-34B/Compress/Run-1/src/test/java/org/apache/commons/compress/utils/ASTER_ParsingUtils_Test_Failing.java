/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ParsingUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void parseIntValue_invalidInputDifferentRadix_throwsIOException_LACu3() {
    String value = "101";
    int radix = 8;
    IOException expected = new IOException("Unable to parse int from string value: 101");
    IOException actual = null;
    try {
        ParsingUtils.parseIntValue(value, radix);
    } catch (IOException e) {
        actual = e;
    }
    assertEquals(expected.getMessage(), actual.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseLongValue_HctJ0_JToY0_2() throws IOException {
		assertThrows(IOException.class, () -> ParsingUtils.parseLongValue("-123"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseLongValue_HctJ0_JToY0_5() throws IOException {
		assertThrows(IOException.class, () -> ParsingUtils.parseLongValue(String.valueOf(Long.MIN_VALUE)));}
}