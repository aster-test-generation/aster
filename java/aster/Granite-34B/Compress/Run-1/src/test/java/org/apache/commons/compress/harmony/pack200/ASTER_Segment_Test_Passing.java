/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Segment_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddPassFile_XzTq9() {
    PackingOptions options = new PackingOptions();
    String passFileName = "test.txt";
    options.addPassFile(passFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemovePassFile_XazP10() {
    PackingOptions options = new PackingOptions();
    String passFileName = "test.txt";
    options.removePassFile(passFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGzip_RNAx11() {
    PackingOptions options = new PackingOptions();
    boolean gzip = true;
    options.setGzip(gzip);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSegmentLimit_EhOG13() {
    PackingOptions options = new PackingOptions();
    long segmentLimit = 100;
    options.setSegmentLimit(segmentLimit);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEffort_JJqw16() {
    PackingOptions options = new PackingOptions();
    int effort = 10;
    options.setEffort(effort);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetKeepFileOrder_JyLw17() {
    PackingOptions options = new PackingOptions();
    boolean keepFileOrder = true;
    options.setKeepFileOrder(keepFileOrder);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStripDebug_UKGs18() {
    PackingOptions options = new PackingOptions();
    boolean stripDebug = true;
    options.setStripDebug(stripDebug);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVerbose_OOVf19() {
    PackingOptions options = new PackingOptions();
    boolean verbose = true;
    options.setVerbose(verbose);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetQuiet_UNDy20() {
    PackingOptions options = new PackingOptions();
    boolean quiet = true;
    options.setQuiet(quiet);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPassFile_geEa21() {
    PackingOptions options = new PackingOptions();
    String passFileName = "test.txt";
    boolean isPassFile = options.isPassFile(passFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLogFile_kzYs22() {
    PackingOptions options = new PackingOptions();
    String logFile = options.getLogFile();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassBands_MultipleThreads_crfS4() {
        Segment segment = new Segment();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getIcBands_ybUc0() {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModificationTime_jnDw14_fid2() {
    PackingOptions options = new PackingOptions();
    String modificationTime = "latest";
    options.setModificationTime(modificationTime);
}
}