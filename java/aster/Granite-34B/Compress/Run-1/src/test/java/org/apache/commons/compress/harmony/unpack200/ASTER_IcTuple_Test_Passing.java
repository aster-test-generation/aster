/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IcTuple_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedExplicitFlagSet_0_uSlF0() {
    IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    boolean actual = icTuple.nestedExplicitFlagSet();
    boolean expected = false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOuterIsAnonymous_oBaT0() {
        IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        boolean result = tuple.outerIsAnonymous();
        System.out.println(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOuterIsAnonymous_false_XGkD2() {
        IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        boolean result = tuple.outerIsAnonymous();
        assert result == false;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPredictedFalse_Yeqi1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertFalse(tuple.predicted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void nullSafeEquals_null_null_nlGS0() {
    IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    boolean actual = icTuple.nullSafeEquals(null, null);
    boolean expected = true;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void nullSafeEquals_null_not_null_KLJd1() {
    IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    boolean actual = icTuple.nullSafeEquals(null, "not null");
    boolean expected = false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void nullSafeEquals_not_null_null_VxDU2() {
    IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    boolean actual = icTuple.nullSafeEquals("not null", null);
    boolean expected = false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void nullSafeEquals_not_null_not_null_equal_OCBO3() {
    IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    boolean actual = icTuple.nullSafeEquals("not null", "not null");
    boolean expected = true;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void nullSafeEquals_not_null_not_null_not_equal_zwmJ4() {
    IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    boolean actual = icTuple.nullSafeEquals("not null", "not null 2");
    boolean expected = false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSimpleClassName_DfeL0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        String result = icTuple.simpleClassName();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetC_bilF0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        assertEquals("C", icTuple.getC());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassIndex_2_YeHB1() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    int actual = icTuple.thisClassIndex();
    int expected = -1;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getC2Test_adKM0() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("C2", icTuple.getC2());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetF_jLdO0() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
    int actual = icTuple.getF();
    int expected = 1;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFWithZeroF_Dvrn1() {
    IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 1, 1, 1, 1);
    int actual = icTuple.getF();
    int expected = 0;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFWithNegativeF_coSY2() {
    IcTuple icTuple = new IcTuple("C", -1, "C2", "N", 1, 1, 1, 1);
    int actual = icTuple.getF();
    int expected = -1;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFWithMaxIntF_PlnW3() {
    IcTuple icTuple = new IcTuple("C", Integer.MAX_VALUE, "C2", "N", 1, 1, 1, 1);
    int actual = icTuple.getF();
    int expected = Integer.MAX_VALUE;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFWithMinIntF_PWzP4() {
    IcTuple icTuple = new IcTuple("C", Integer.MIN_VALUE, "C2", "N", 1, 1, 1, 1);
    int actual = icTuple.getF();
    int expected = Integer.MIN_VALUE;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassString_2_WmNZ1() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    String actual = icTuple.thisClassString();
    assertEquals("C2$N", actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMember_1_MOwI0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 3, 4, 5);
        boolean expected = true;
        boolean actual = icTuple.isMember();
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerBreakAtDollarWithOneSection_ASQt0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        String[] expected = new String[]{"C"};
        assertArrayEquals(expected, icTuple.innerBreakAtDollar("C"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerBreakAtDollarWithTwoSections_jCAT1() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        String[] expected = new String[]{"C", "C2"};
        assertArrayEquals(expected, icTuple.innerBreakAtDollar("C$C2"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerBreakAtDollarWithThreeSections_JVPO2() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        String[] expected = new String[]{"C", "C2", "N"};
        assertArrayEquals(expected, icTuple.innerBreakAtDollar("C$C2$N"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerBreakAtDollarWithNoSections_lcAc3() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        String[] expected = new String[]{};
        assertArrayEquals(expected, icTuple.innerBreakAtDollar(""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetN_rbnA0() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
    String result = icTuple.getN();
    assertEquals("N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNWithNullN_Ojia1() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", null, 1, 1, 1, 1);
    String result = icTuple.getN();
    assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNWithEmptyN_ylKr2() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "", 1, 1, 1, 1);
    String result = icTuple.getN();
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNWithNegativeCIndex_hOrW3() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", -1, 1, 1, 1);
    String result = icTuple.getN();
    assertEquals("N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNWithZeroCIndex_MKuW4() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 1, 1, 1);
    String result = icTuple.getN();
    assertEquals("N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNWithPositiveCIndex_HoWs5() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 1, 1, 1);
    String result = icTuple.getN();
    assertEquals("N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNWithNegativeC2Index_qoFr6() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, -1, 1, 1);
    String result = icTuple.getN();
    assertEquals("N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNWithZeroC2Index_NMHX7() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 0, 1, 1);
    String result = icTuple.getN();
    assertEquals("N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNWithPositiveC2Index_wGjR8() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 1, 1);
    String result = icTuple.getN();
    assertEquals("N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNWithNegativeNIndex_oCUH9() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, -1, 1);
    String result = icTuple.getN();
    assertEquals("N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNWithZeroNIndex_fjAm10() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 0, 1);
    String result = icTuple.getN();
    assertEquals("N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNWithPositiveNIndex_tgyh11() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 2, 1);
    String result = icTuple.getN();
    assertEquals("N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNWithNegativeTIndex_psBi12() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, -1);
    String result = icTuple.getN();
    assertEquals("N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNWithZeroTIndex_Dpza13() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 0);
    String result = icTuple.getN();
    assertEquals("N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getTupleIndexTest1_aClN0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 3, 4, 5);
        int actual = icTuple.getTupleIndex();
        int expected = 5;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getTupleIndexTest2_NGcU1() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 3, 4, 6);
        int actual = icTuple.getTupleIndex();
        int expected = 6;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getTupleIndexTest3_FcEC2() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 3, 4, 7);
        int actual = icTuple.getTupleIndex();
        int expected = 7;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getTupleIndexTest4_FetU3() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 3, 4, 8);
        int actual = icTuple.getTupleIndex();
        int expected = 8;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getTupleIndexTest5_dszN4() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 3, 4, 9);
        int actual = icTuple.getTupleIndex();
        int expected = 9;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getTupleIndexTest6_wXIn5() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 3, 4, 10);
        int actual = icTuple.getTupleIndex();
        int expected = 10;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getTupleIndexTest7_jJmL6() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 3, 4, 11);
        int actual = icTuple.getTupleIndex();
        int expected = 11;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getTupleIndexTest8_KGDn7() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 3, 4, 12);
        int actual = icTuple.getTupleIndex();
        int expected = 12;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getTupleIndexTest9_vdDH8() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 3, 4, 13);
        int actual = icTuple.getTupleIndex();
        int expected = 13;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getTupleIndexTest10_TIij9() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 3, 4, 14);
        int actual = icTuple.getTupleIndex();
        int expected = 14;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedExplicitFlagSet_1_uqps1_fid2() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    boolean actual = icTuple.nestedExplicitFlagSet();
    boolean expected =false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPredictedTrue_kXJv0_fid2() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSimpleClassNameIndex_fULP0_fid2() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        int actual = icTuple.simpleClassNameIndex();
        int expected =-1; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterString_qtfF0_fid2() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassIndex_1_BNPi0_fid2() {
    IcTuple icTuple = new IcTuple("C",-1, "C2", "N",-1,-1,-1,-1);
    int actual = icTuple.thisClassIndex();
    int expected =-1;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString3_IHoI2_fid2() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
    assertEquals("IcTuple (N in C2)", icTuple.toString());
}
}