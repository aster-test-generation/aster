/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SourceFileAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_reflexive_XVbe0() {
    SourceFileAttribute attribute = new SourceFileAttribute(new CPUTF8("name"));
    assertEquals(attribute, attribute);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_null_rRoc3() {
    SourceFileAttribute attribute = new SourceFileAttribute(new CPUTF8("name"));
    assertNotEquals(attribute, null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_differentClass_KPwh4() {
    SourceFileAttribute attribute = new SourceFileAttribute(new CPUTF8("name"));
    assertNotEquals(attribute, new Object());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_differentName_Sste5() {
    SourceFileAttribute attribute1 = new SourceFileAttribute(new CPUTF8("name1"));
    SourceFileAttribute attribute2 = new SourceFileAttribute(new CPUTF8("name2"));
    assertNotEquals(attribute1, attribute2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_sameObject_UapX6() {
    SourceFileAttribute attribute = new SourceFileAttribute(new CPUTF8("name"));
    assertEquals(attribute.hashCode(), attribute.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_sameValues_guVT7() {
    SourceFileAttribute attribute1 = new SourceFileAttribute(new CPUTF8("name"));
    SourceFileAttribute attribute2 = new SourceFileAttribute(new CPUTF8("name"));
    assertEquals(attribute1.hashCode(), attribute2.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_differentValues_Jkym8() {
    SourceFileAttribute attribute1 = new SourceFileAttribute(new CPUTF8("name1"));
    SourceFileAttribute attribute2 = new SourceFileAttribute(new CPUTF8("name2"));
    assertNotEquals(attribute1.hashCode(), attribute2.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_zrIx0_qdij0() {
    CPUTF8 name = new CPUTF8("name");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    String actual = sourceFileAttribute.toString();
    String expected = "SourceFile: " + name;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithEmptyName_XTCx2_FTJy0() {
    CPUTF8 name = new CPUTF8("", 0);
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    String actual = sourceFileAttribute.toString();
    String expected = "SourceFile: UTF-8:";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_yEmS0_aArq0() {
        CPUTF8 utf8 = new CPUTF8("UTF-8", 0);
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(utf8);
        ClassFileEntry[] nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
    }
}