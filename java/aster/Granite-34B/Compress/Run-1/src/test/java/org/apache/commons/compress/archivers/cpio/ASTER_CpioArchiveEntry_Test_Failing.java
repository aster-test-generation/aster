/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsBlockDevice_XYiC0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertTrue(entry.isBlockDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsBlockDeviceWithMode_HIew1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 100L);
        assertTrue(entry.isBlockDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChksumWithFile_UwyI2() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("test.txt"), "test");
        assertEquals(0xFFFFFFFFL, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getTimeTestWithFile_dbtz2() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("input.txt"), "entryName");
        long time = entry.getTime();
        assertEquals(0, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNetworkTrue_ZqLD0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        assertTrue(entry.isNetwork());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNetworkFalse_KSAP1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1);
        assertFalse(entry.isNetwork());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGID2_GVMT1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setGID(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGID6_RsBG5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        entry.setGID(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGID7_nlLK6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        entry.setGID(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGID9_sptn8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        entry.setGID(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryTrue_VduV0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        assertTrue(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryFalse_MFvd1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1);
        assertFalse(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInodeTest1_Ldjz0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        cpioArchiveEntry.setInode(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInodeTest2_YGHI1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "name", 0L);
        cpioArchiveEntry.setInode(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInodeTest6_iIUO5() {
        short format = 0;
        String name = "name";
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(format, name);
        cpioArchiveEntry.setInode(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInodeTest7_OIOb6() {
        short format = 0;
        File inputFile = new File("inputFile");
        String entryName = "entryName";
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(format, inputFile, entryName);
        cpioArchiveEntry.setInode(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInodeTest9_TJYs8() {
        File inputFile = new File("inputFile");
        String entryName = "entryName";
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(inputFile, entryName);
        cpioArchiveEntry.setInode(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getRemoteDeviceMajTest6_kUXo6() {
    short format = (short) 1;
    File inputFile = new File("input");
    String entryName = "entry";
    CpioArchiveEntry entry = new CpioArchiveEntry(format, inputFile, entryName);
    long result = entry.getRemoteDeviceMaj();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getRemoteDeviceMajTest8_qHJc8() {
    File inputFile = new File("input");
    String entryName = "entry";
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, entryName);
    long result = entry.getRemoteDeviceMaj();
    assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTimeTest1_FoaR0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        FileTime fileTime = FileTime.fromMillis(0L);
        cpioArchiveEntry.setTime(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTimeTest2_nFHQ1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "name", 0L);
        FileTime fileTime = FileTime.fromMillis(0L);
        cpioArchiveEntry.setTime(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithFile_xcmm2() {
        File file = new File("test.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, file, "test.txt");
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getRemoteDeviceMinTest9_vrMn8() {
    File file = new File("inputFile");
    String name = "entryName";
    CpioArchiveEntry entry = new CpioArchiveEntry(file, name);
    entry.setRemoteDeviceMin(900);
    assertEquals(900, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksumWithFile_jOll1() throws IOException {
        File file = new File("test.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "test");
        entry.setChksum(12345L);
        assertEquals(12345L, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPipe_WtaU0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertTrue(entry.isPipe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPipeWithSize_fmoS1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100L);
        assertTrue(entry.isPipe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_cPVh6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("inputFile"), "entryName");
        assertEquals(new Date(1000 * entry.getTime()), entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_SKep8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        assertEquals(new Date(1000 * entry.getTime()), entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceMajTest3_JBMM2() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, new File("test"), "test");
    long result = entry.getDeviceMaj();
    assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceMajTest6_JHrd5() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, new File("test"), "test");
    long result = entry.getDeviceMaj();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRegularFile_QGnf0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100L);
        assertTrue(entry.isRegularFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRegularFileWithFileInput_OAIZ1() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("test.txt"), "test.txt");
        assertTrue(entry.isRegularFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceTest_Kkrd0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    long device = entry.getDevice();
    assertEquals(0L, device);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceTest1_cukg1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 1L);
    long device = entry.getDevice();
    assertEquals(1L, device);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceTest2_hLtI2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    long device = entry.getDevice();
    assertEquals(0L, device);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceTest5_IaVn5() {
    short format = (short) 1;
    String name = "name";
    CpioArchiveEntry entry = new CpioArchiveEntry(format, name);
    long device = entry.getDevice();
    assertEquals(0L, device);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceTest6_XexQ6() {
    short format = (short) 1;
    File inputFile = new File("input");
    String entryName = "entry";
    CpioArchiveEntry entry = new CpioArchiveEntry(format, inputFile, entryName);
    long device = entry.getDevice();
    assertEquals(0L, device);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceTest7_QsvE7() {
    String name = "name";
    long size = 1L;
    CpioArchiveEntry entry = new CpioArchiveEntry(name, size);
    long device = entry.getDevice();
    assertEquals(0L, device);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceTest8_jjOT8() {
    File inputFile = new File("input");
    String entryName = "entry";
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, entryName);
    long device = entry.getDevice();
    assertEquals(0L, device);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_invalidSize_lessThanZero_GgIB1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
        entry.setSize(-1L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_invalidSize_greaterThanMaxInt_weOl2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
        entry.setSize(0x100000000L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpioArchiveEntry_short_String_long_MRpc0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 100L);
        assertEquals(100L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpioArchiveEntry_short_String_quvk2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpioArchiveEntry_short_File_String_oiqh3() {
        File file = new File("input.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, file, "entryName");
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpioArchiveEntry_String_long_QkUS4() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name",0L);
        assertEquals(100L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpioArchiveEntry_File_String_YNic5() {
        File file = new File("input.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "entryName");
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceMinTest1_VYLI0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
    long result = cpioArchiveEntry.getDeviceMin();
    assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceMinTest2_BytX1() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "C:\\Users\\user\\Desktop\\file.txt", 100L);
    long result = cpioArchiveEntry.getDeviceMin();
    assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceMinTest6_SGrX5() {
    short format = (short) 0;
    String name = "name";
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(format, name);
    long result = cpioArchiveEntry.getDeviceMin();
    assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceMinTest7_REtC6() {
    short format = (short) 0;
    File inputFile = new File("C:\\Users\\user\\Desktop\\file.txt");
    String entryName = "entryName";
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(format, inputFile, entryName);
    long result = cpioArchiveEntry.getDeviceMin();
    assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceMinTest9_bnZZ8() {
    File inputFile = new File("C:\\Users\\user\\Desktop\\file.txt");
    String entryName = "entryName";
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(inputFile, entryName);
    long result = cpioArchiveEntry.getDeviceMin();
    assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSize_mfbC0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithFormatAndName_EBwd1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithFormatNameAndSize_Uoef2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100);
        assertEquals(100, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithFormatName_lyMZ5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithFormatinputFileAndEntryName_CgHk6() {
        File file = new File("test");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, file, "test");
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithNameAndSize_VfqE7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test",110);
        assertEquals(100, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithinputFileAndEntryName_Dyap8() {
        File file = new File("test");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "test");
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_JUoe0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setName("test");
        assertEquals("test", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithSize_DLQd1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100L);
        entry.setName("test2");
        assertEquals("test2", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithFormat_TIqM4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        entry.setName("test2");
        assertEquals("test2", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithFile_qCIV5() {
        File file = new File("test.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "test");
        entry.setName("test2");
        assertEquals("test2", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithFormatAndFile_NORh6() {
        File file = new File("test.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, file, "test");
        entry.setName("test2");
        assertEquals("test2", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice_ViVj0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
    entry.setDevice(0);
    assertEquals(0, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice1_iDFf1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 0L);
    entry.setDevice(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice2_fNkX2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    entry.setDevice(0);
    assertEquals(0, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice5_QYpw5() {
    short format = (short) 0;
    String name = "name";
    CpioArchiveEntry entry = new CpioArchiveEntry(format, name);
    entry.setDevice(0);
    assertEquals(0, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice6_IxLb6() {
    short format = (short) CpioConstants.FORMAT_NEW;
    File inputFile = new File("input");
    String entryName = "entry";
    CpioArchiveEntry entry = new CpioArchiveEntry(format, inputFile, entryName);
    entry.setDevice(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice7_KxRH7() {
    String name = "name";
    long size = 0L;
    CpioArchiveEntry entry = new CpioArchiveEntry(name, size);
    entry.setDevice(0);
    assertEquals(0, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice8_lmqS8() {
    File inputFile = new File("input");
    String entryName = "entry";
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, entryName);
    entry.setDevice(0);
    assertEquals(0, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode_RmAN0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInodeWithSize_YdHj1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 100L);
        assertEquals(0, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInodeWithFile_rWeN5() {
        File file = new File("input.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "entryName");
        assertEquals(0, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInodeWithFormatAndFile_JAqi6() {
        File file = new File("input.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, file, "entryName");
        assertEquals(0, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDataPadCount_whenAlignmentBoundaryIsZero_thenReturnsZero_fLeH0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
    int actual = entry.getDataPadCount();
    assertEquals(0, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTimeTest5_QNSj5() {
        short format = 0;
        String name = "";
        CpioArchiveEntry entry = new CpioArchiveEntry(format, name);
        entry.setTime(0L);
        assertEquals(0L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTimeTest6_fUVU6() {
        short format = 0;
        File inputFile = new File("");
        String entryName = "";
        CpioArchiveEntry entry = new CpioArchiveEntry(format, inputFile, entryName);
        entry.setTime(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTimeTest8_ELPK8() {
        File inputFile = new File("");
        String entryName = "";
        CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, entryName);
        entry.setTime(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithAlignmentBoundaryZero_pHPO0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getHeaderPadCount(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode_AGoD0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeWithInvalidMode_qcWJ1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(-1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetUID_VWTE0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setUID(12345L);
        assert entry.getUID() == 12345L;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetUIDWithNegativeValue_Wayb1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setUID(-12345L);
        assert entry.getUID() == -12345L;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetUIDWithZeroValue_Hitk2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setUID(0L);
        assert entry.getUID() == 0L;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount_vsRo0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithSize_XJPX1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100L);
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithFormatAndName_fImi5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithFormatAndFile_AfPG6() {
        File file = new File("test.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, file, "test");
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithFile_cGKs8() {
        File file = new File("test.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "test");
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_dWTh0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 100L);
        assertEquals(100L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCharacterDeviceTrue_GOVA0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertTrue(entry.isCharacterDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID_NdMK0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGIDWithSize_Xmfh1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 100L);
        assertEquals(0, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGIDWithFile_vOUF5() {
        File file = new File("inputFile");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "entryName");
        assertEquals(0, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGIDWithFormatFileAndName_JoAp6() {
        File file = new File("inputFile");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, file, "entryName");
        assertEquals(0, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGIDWithFormatName_poGJ7() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChksum_QNWi0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
        assertEquals(0xFFFFFFFFL, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGID_CKFc0_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setGID(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getRemoteDeviceMajTest8_qHJc8_fid1() {
    File inputFile = new File("input");
    String entryName = "entry";
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, entryName);
    long result = entry.getRemoteDeviceMaj();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithEmptyName_Zikr1_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("");
        assertEquals(0, entry.getHeaderPadCount(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithNonNullNameAndCharset_AodS2_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(4, entry.getHeaderPadCount(Charset.defaultCharset()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithNonNullNameAndNullCharset_kCzq3_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(4, entry.getHeaderPadCount(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithNonNullNameAndCustomCharset_MAVh4_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(8, entry.getHeaderPadCount(Charset.forName("UTF-16")));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceTest_Kkrd0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    long device = entry.getDevice();
    assertEquals(0, device);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceTest1_cukg1_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 1L);
    long device = entry.getDevice();
    assertEquals(0, device);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceTest2_hLtI2_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    long device = entry.getDevice();
    assertEquals(0, device);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceTest5_IaVn5_fid1() {
    short format = (short) 1;
    String name = "name";
    CpioArchiveEntry entry = new CpioArchiveEntry(format, name);
    long device = entry.getDevice();
    assertEquals(0, device);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceTest6_XexQ6_fid1() {
    short format = (short) 1;
    File inputFile = new File("input");
    String entryName = "entry";
    CpioArchiveEntry entry = new CpioArchiveEntry(format, inputFile, entryName);
    long device = entry.getDevice();
    assertEquals(0, device);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceTest7_QsvE7_fid1() {
    String name = "name";
    long size = 1L;
    CpioArchiveEntry entry = new CpioArchiveEntry(name, size);
    long device = entry.getDevice();
    assertEquals(0, device);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceTest8_jjOT8_fid1() {
    File inputFile = new File("input");
    String entryName = "entry";
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, entryName);
    long device = entry.getDevice();
    assertEquals(0, device);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpioArchiveEntry_String_long_QkUS4_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
        assertEquals(100L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceMinTest1_VYLI0_fid1() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
    long result = cpioArchiveEntry.getDeviceMin();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceMinTest2_BytX1_fid1() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "C:\\Users\\user\\Desktop\\file.txt", 100L);
    long result = cpioArchiveEntry.getDeviceMin();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceMinTest6_SGrX5_fid1() {
    short format = (short) 0;
    String name = "name";
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(format, name);
    long result = cpioArchiveEntry.getDeviceMin();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceMinTest7_REtC6_fid1() {
    short format = (short) 0;
    File inputFile = new File("C:\\Users\\user\\Desktop\\file.txt");
    String entryName = "entryName";
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(format, inputFile, entryName);
    long result = cpioArchiveEntry.getDeviceMin();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceMinTest9_bnZZ8_fid1() {
    File inputFile = new File("C:\\Users\\user\\Desktop\\file.txt");
    String entryName = "entryName";
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(inputFile, entryName);
    long result = cpioArchiveEntry.getDeviceMin();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithNameAndSize_VfqE7_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
        assertEquals(100, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice_ViVj0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
    entry.setDevice(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice1_iDFf1_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
    entry.setDevice(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice2_fNkX2_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    entry.setDevice(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice5_QYpw5_fid1() {
    short format = (short) 0;
    String name = "name";
    CpioArchiveEntry entry = new CpioArchiveEntry(format, name);
    entry.setDevice(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice6_IxLb6_fid1() {
    short format = (short) 0;
    File inputFile = new File("input");
    String entryName = "entry";
    CpioArchiveEntry entry = new CpioArchiveEntry(format, inputFile, entryName);
    entry.setDevice(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice7_KxRH7_fid1() {
    String name = "name";
    long size = 0L;
    CpioArchiveEntry entry = new CpioArchiveEntry(name, size);
    entry.setDevice(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice8_lmqS8_fid1() {
    File inputFile = new File("input");
    String entryName = "entry";
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, entryName);
    entry.setDevice(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTimeTest_sMwS0_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setTime(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTimeTest1_NPgJ1_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setTime(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTimeTest5_QNSj5_fid1() {
        short format = 0;
        String name = "";
        CpioArchiveEntry entry = new CpioArchiveEntry(format, name);
        entry.setTime(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithName_GaMP2_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithNameAndSize_lrKb7_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test", 100L);
        assertEquals(0, entry.getHeaderPadCount());
    }
}