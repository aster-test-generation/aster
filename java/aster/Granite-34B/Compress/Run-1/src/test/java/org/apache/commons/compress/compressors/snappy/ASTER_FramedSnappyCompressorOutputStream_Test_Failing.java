/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.snappy;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FramedSnappyCompressorOutputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMask_QOjP0() {
        long x = 1234567890L;
        long expected = 9876543210L;
        long actual = FramedSnappyCompressorOutputStream.mask(x);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMaskWithNegativeInput_XueI1() {
        long x = -1234567890L;
        long expected = 6172839450L;
        long actual = FramedSnappyCompressorOutputStream.mask(x);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMaskWithZeroInput_gLLd2() {
        long x = 0L;
        long expected = 2147483648L;
        long actual = FramedSnappyCompressorOutputStream.mask(x);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteInt_kjeh0_qfmT0() throws IOException {
        OutputStream out = new ByteArrayOutputStream();
        FramedSnappyCompressorOutputStream compressor = new FramedSnappyCompressorOutputStream(out);
        int b = 123;
        compressor.write(b);
        assertEquals(1, ((ByteArrayOutputStream) out).size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteByteArray_rkTm1_bqga0() throws IOException {
        OutputStream out = new ByteArrayOutputStream();
        FramedSnappyCompressorOutputStream compressor = new FramedSnappyCompressorOutputStream(out);
        byte[] bytes = new byte[]{1, 2, 3};
        compressor.write(bytes);
        assertEquals(3, ((ByteArrayOutputStream) out).size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteByteArrayIntInt_UcFe2_OYlS0() throws IOException {
        OutputStream out = new ByteArrayOutputStream();
        FramedSnappyCompressorOutputStream compressor = new FramedSnappyCompressorOutputStream(out);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        int offset = 1;
        int length = 3;
        compressor.write(bytes, offset, length);
        assertEquals(3, ((ByteArrayOutputStream) out).size());
    }
@Test
@Timeout(value =10, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteInt_kjeh0_qfmT0_fid1() throws IOException {
        OutputStream out = new ByteArrayOutputStream();
        FramedSnappyCompressorOutputStream compressor = new FramedSnappyCompressorOutputStream(out);
        int b =1023;
        compressor.write(b);
        assertEquals(1, ((ByteArrayOutputStream) out).size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteByteArray_rkTm1_bqga0_fid1() throws IOException {
        OutputStream out = new ByteArrayOutputStream();
        FramedSnappyCompressorOutputStream compressor = new FramedSnappyCompressorOutputStream(out);
        byte[] bytes = new byte[]{1, 2,10};
        compressor.write(bytes);
        assertEquals(3, ((ByteArrayOutputStream) out).size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteByteArrayIntInt_UcFe2_OYlS0_fid1() throws IOException {
        OutputStream out = new ByteArrayOutputStream();
        FramedSnappyCompressorOutputStream compressor = new FramedSnappyCompressorOutputStream(out);
        byte[] bytes = new byte[]{1, 2,10, 4, 5};
        int offset = 1;
        int length =10;
        compressor.write(bytes, offset, length);
        assertEquals(3, ((ByteArrayOutputStream) out).size());
    }
}