/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.NoSuchElementException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.NoSuchElementException;
import java.util.Random;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveEntry_Test_Passing {
    private static final byte[] DATA = new byte[] { 1, 2, 3 };
    private static final byte[] DATA2 = new byte[] { 4, 5, 6 };
    private static final byte[] DATA3 = new byte[] { 7, 8, 9 };
    private static final byte[] DATA4 = new byte[] { 10, 11, 12 };
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGeneralPurposeBit_Rqne0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        entry.setGeneralPurposeBit(generalPurposeBit);
        assertEquals(generalPurposeBit, entry.getGeneralPurposeBit());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGeneralPurposeBitWithNullArgument_DiuR1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setGeneralPurposeBit(null);
        assertEquals(null, entry.getGeneralPurposeBit());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequired_jlBi0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertEquals(0, entry.getVersionRequired());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequiredWithFile_omBk3() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        assertEquals(0, entry.getVersionRequired());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUnixMode_pXWg0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setUnixMode(0644);
        assertEquals(0644, entry.getUnixMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternalAttributes_Qpyi0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertEquals(0, entry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternalAttributesWithFile_JJuo1() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        assertEquals(0, entry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_wUeX0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertEquals(new Date(entry.getTime()), entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithFile_JaeG3() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        assertEquals(file.lastModified(), entry.getLastModifiedTime().toMillis());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInternalAttributes_adJc0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        int internalAttributes = entry.getInternalAttributes();
        assertTrue(internalAttributes >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInternalAttributesWithFile_FsjP1() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        int internalAttributes = entry.getInternalAttributes();
        assertTrue(internalAttributes >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag_uTxK0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    int actual = entry.getRawFlag();
    int expected = 0; // Replace with the expected value
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlagWithFile_TeLl1() {
    File inputFile = new File("path/to/file");
    String entryName = "entryName";
    ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
    int actual = entry.getRawFlag();
    int expected = 0; // Replace with the expected value
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime_YEzi0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        entry.setCreationTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithFile_clhJ5() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.txt"), "test.txt");
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        entry.setCreationTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_jujY0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithFile_bHJh3() {
    File file = new File("test.txt");
    ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNegativeTime_geJa3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        FileTime time = FileTime.fromMillis(-1);
        entry.setCreationTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithZeroTime_CsIn4() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        FileTime time = FileTime.fromMillis(0);
        entry.setCreationTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDiskNumberStart_QjQQ0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setDiskNumberStart(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDiskNumberStartWithNegativeValue_rxEP1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setDiskNumberStart(-1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDiskNumberStartWithZeroValue_GgfZ2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setDiskNumberStart(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_bWXq0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setName("newName.txt", new byte[]{0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x74, 0x78, 0x74});
        assertEquals("newName.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNamesWithEmptyName_FCjo2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setName("", new byte[0]);
        assertEquals("", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithFutureTime_mxLp4() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis() + 1000);
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithMaxTime_UidH5() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(0x7FFFFFFF * 1000L);
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithMinTime_bUrL6() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(0x00000000 * 1000L);
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignment_FBYV0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        int alignment = entry.getAlignment();
        assertEquals(0, alignment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentWithName_PlAa4() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        int alignment = entry.getAlignment();
        assertEquals(0, alignment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentWithFile_QnQk5() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "entryName");
        int alignment = entry.getAlignment();
        assertEquals(0, alignment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_limh0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setExtra(new byte[]{0x01, 0x02, 0x03});
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_BnFP0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    byte[] extra = new byte[10];
    entry.setExtra(extra);
    assertNotEquals(null, entry.getExtra());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_LjoM0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMergeExtraFields_hoXA1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataOffset_chcc0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setDataOffset(100L);
        assertEquals(100L, entry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataOffsetWithZeroValue_ZGjD2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setDataOffset(0L);
        assertEquals(0L, entry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_WIBj0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    byte[] data = new byte[10];
    entry.setExtra(data);
    assertNotEquals(data, entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldsWithNullFields_dTUH0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setExtraFields(null);
        assertEquals(0, entry.getExtraFields().length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldsWithEmptyArray_EfcR1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setExtraFields(new ZipExtraField[0]);
        assertEquals(0, entry.getExtraFields().length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithPositiveValue_AOtK0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setSize(1024L);
        assertTrue(entry.getSize() == 1024L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithZeroValue_ZjZr1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setSize(0L);
        assertTrue(entry.getSize() == 0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithNegativeValue_EfRn2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        try {
            entry.setSize(-1L);
        } catch (IllegalArgumentException e) {
            assertTrue(true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguous_WhenStreamIsNotContiguous_ReturnsFalse_obqA1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setMethod(ZipEntry.STORED);
        assertFalse(entry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPlatform_sbFs0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setPlatform(ZipArchiveEntry.PLATFORM_UNIX);
        assert entry.getPlatform() == ZipArchiveEntry.PLATFORM_UNIX;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPlatformWithNegativeValue_bsKN1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setPlatform(-1);
        assert entry.getPlatform() == -1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPlatformWithInvalidValue_hhiS2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setPlatform(10);
        assert entry.getPlatform() == 10;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_iiWa0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertEquals(entry.getName().hashCode(), entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithEmptyName_EDQS3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("");
        assertEquals(0, entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithDifferentNames_GVmX4() {
        ZipArchiveEntry entry1 = new ZipArchiveEntry("test1.txt");
        ZipArchiveEntry entry2 = new ZipArchiveEntry("test2.txt");
        assertNotEquals(entry1.hashCode(), entry2.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setName_NonNullName_SetsName_EoEW1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setName("test2");
    Assertions.assertEquals("test2", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setName_NameWithBackslashes_SetsNameWithForwardSlashes_RrTE2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setName("test\\test2");
    Assertions.assertEquals("test/test2", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setName_NameWithBackslashesAndPlatformFat_SetsNameWithForwardSlashes_vfeg3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setPlatform(ZipArchiveEntry.PLATFORM_FAT);
    entry.setName("test\\test2");
    Assertions.assertEquals("test/test2", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setName_NameWithForwardSlashesAndPlatformUnix_SetsNameWithForwardSlashes_zppx4() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setPlatform(ZipArchiveEntry.PLATFORM_UNIX);
    entry.setName("test/test2");
    Assertions.assertEquals("test/test2", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setName_NameWithForwardSlashesAndPlatformFat_SetsNameWithForwardSlashes_aPcL7() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setPlatform(ZipArchiveEntry.PLATFORM_FAT);
    entry.setName("test/test2");
    Assertions.assertEquals("test/test2", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionMadeBy_QfPS0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setVersionMadeBy(20);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionMadeByWithNegativeValue_kQaU1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setVersionMadeBy(-1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionMadeByWithZeroValue_AsiG2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setVersionMadeBy(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionMadeByWithValueugeValue_Mptx3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setVersionMadeBy(100);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataLength_OUAY4() {
        UnparseableExtraFieldData unparseableExtra = new UnparseableExtraFieldData();
        ZipShort localFileDataLength = unparseableExtra.getLocalFileDataLength();
        assertEquals(0, localFileDataLength.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_xrju5() {
        UnparseableExtraFieldData unparseableExtra = new UnparseableExtraFieldData();
        ZipShort centralDirectoryLength = unparseableExtra.getCentralDirectoryLength();
        assertEquals(0, centralDirectoryLength.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffset_NIcq0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setLocalHeaderOffset(100L);
        assertEquals(100L, entry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffsetWithNegativeValue_CvTc1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setLocalHeaderOffset(-100L);
        assertEquals(-100L, entry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffsetWithZeroValue_uMLb2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setLocalHeaderOffset(0L);
        assertEquals(0L, entry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributes_eNCX0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setExternalAttributes(123456L);
        assertEquals(123456L, entry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributesWithNegativeValue_wqio1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setExternalAttributes(-123456L);
        assertEquals(-123456L, entry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributesWithZeroValue_gvkg2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setExternalAttributes(0L);
        assertEquals(0L, entry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtra_NaOU0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    byte[] extraData = new byte[10]; // Replace with actual data
    entry.setCentralDirectoryExtra(extraData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtraWithEmptyArray_IKOY2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    byte[] extraData = new byte[0];
    entry.setCentralDirectoryExtra(extraData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtraWithInvalidData_yvEF3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    byte[] extraData = new byte[10]; // Replace with invalid data
    entry.setCentralDirectoryExtra(extraData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtraWithValidData_pPBe4() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    byte[] extraData = new byte[10]; // Replace with valid data
    entry.setCentralDirectoryExtra(extraData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetCentralDirectoryExtra_Kyyt0() {
        byte[] b = new byte[10];
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertDoesNotThrow(() -> entry.setCentralDirectoryExtra(b));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetCentralDirectoryExtraWithParameters(String name) {
        byte[] b = new byte[10];
        ZipArchiveEntry entry = new ZipArchiveEntry(name);
        assertDoesNotThrow(() -> entry.setCentralDirectoryExtra(b));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtra_cAvO0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] extraData = new byte[] { 0x01, 0x02, 0x03 };
        entry.setCentralDirectoryExtra(extraData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithEmptyArrayArgument_jduD2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] emptyArray = new byte[0];
        entry.setCentralDirectoryExtra(emptyArray);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithNonEmptyArrayArgument_aDEA3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] nonEmptyArray = new byte[] { 0x01, 0x02, 0x03 };
        entry.setCentralDirectoryExtra(nonEmptyArray);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtra_QmiW0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    byte[] b = new byte[10];
    entry.setCentralDirectoryExtra(b);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getExtraFields_includeUnparseable_nEeq0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        ZipExtraField[] extraFields = entry.getExtraFields(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getExtraFields_noIncludeUnparseable_gLnu1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        ZipExtraField[] extraFields = entry.getExtraFields(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetCentralDirectoryExtra_wjvw0() {
        byte[] b = new byte[10];
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setCentralDirectoryExtra(b);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithEmptyExtra_wgsj1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        byte[] emptyExtra = new byte[0];
        assertDoesNotThrow(() -> entry.setExtra(emptyExtra));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithValidExtra_rWrZ2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        byte[] validExtra = new byte[]{0x01, 0x02, 0x03};
        assertDoesNotThrow(() -> entry.setExtra(validExtra));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getExtraFields_true_ftvo0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = entry.getExtraFields(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getExtraFields_false_yvvA1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    ZipExtraField[] extraFields = entry.getExtraFields(false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtraWithEmptyArrayArgument_Wxjc2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    byte[] b = new byte[0];
    entry.setCentralDirectoryExtra(b);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldsWithIncludeUnparseableTrue_Tfli0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipExtraField[] extraFields = entry.getExtraFields(true);
        assertEquals(0, extraFields.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldsWithIncludeUnparseableFalse_lSYl1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipExtraField[] extraFields = entry.getExtraFields(false);
        assertEquals(0, extraFields.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getExtraFields_true_gTSp0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    ZipExtraField[] fields = entry.getExtraFields(true);
    assertNotNull(fields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getExtraFields_false_zDLL1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    ZipExtraField[] fields = entry.getExtraFields(false);
    assertNotNull(fields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldWithoutExtraFields_ZQDO1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipShort type = new ZipShort(1);
        ZipExtraField result = entry.getExtraField(type);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldWithNullType_SkkI2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipExtraField result = entry.getExtraField(null);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTime_JqkG0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        entry.setLastModifiedTime(fileTime);
        assertEquals(fileTime, entry.getLastModifiedTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTime_ecgk0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        entry.setLastModifiedTime(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_file_FnYF2_1() throws Exception {
        File file = new File("test");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test");
        File file2 = new File("test2");
        ZipArchiveEntry entry2 = new ZipArchiveEntry(file2, "test2");
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_file_FnYF2_2() throws Exception {
        File file = new File("test");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test");
        File file2 = new File("test2");
        ZipArchiveEntry entry2 = new ZipArchiveEntry(file2, "test2");
        assertEquals("test", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_file_FnYF2_3() throws Exception {
        File file = new File("test");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test");
        File file2 = new File("test2");
        ZipArchiveEntry entry2 = new ZipArchiveEntry(file2, "test2");
        assertNotNull(entry2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_file_FnYF2_4() throws Exception {
        File file = new File("test");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test");
        File file2 = new File("test2");
        ZipArchiveEntry entry2 = new ZipArchiveEntry(file2, "test2");
        assertEquals("test2", entry2.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_string_zmrT6_1() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        ZipArchiveEntry entry2 = new ZipArchiveEntry("test2");
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_string_zmrT6_2() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        ZipArchiveEntry entry2 = new ZipArchiveEntry("test2");
        assertEquals("test", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_string_zmrT6_3() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        ZipArchiveEntry entry2 = new ZipArchiveEntry("test2");
        assertNotNull(entry2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_string_zmrT6_4() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        ZipArchiveEntry entry2 = new ZipArchiveEntry("test2");
        assertEquals("test2", entry2.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithDifferentFileTime_zHZU3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime1 = FileTime.fromMillis(System.currentTimeMillis());
    FileTime fileTime2 = FileTime.fromMillis(System.currentTimeMillis() + 1000);
    entry.setLastModifiedTime(fileTime1);
    entry.setLastModifiedTime(fileTime2);
    assertEquals(fileTime2, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTime_nxlY0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        ZipEntry result = entry.setLastModifiedTime(fileTime);
        assertEquals(result, entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_NCYs0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    ZipEntry result = entry.setLastAccessTime(fileTime);
    assertEquals(result, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithInvalidFileTime_QsNw2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(-1);
    ZipEntry result = entry.setLastAccessTime(fileTime);
    assertEquals(result, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithFutureFileTime_eVgt3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() + 10000);
    ZipEntry result = entry.setLastAccessTime(fileTime);
    assertEquals(result, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_kAmg0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastAccessTime(fileTime);
    assertEquals(fileTime, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetLastAccessTime_kgJa0() throws IOException, ZipException {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        entry.setLastAccessTime(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_CWdk0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    ZipEntry result = entry.setLastAccessTime(fileTime);
    assertEquals(entry, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_CWdk0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    ZipEntry result = entry.setLastAccessTime(fileTime);
    assertEquals(fileTime, entry.getLastAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTime_tAId0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        entry.setLastAccessTime(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTime_pOHb0() throws IOException {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        entry.setLastAccessTime(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithInvalidFileTime_tfza2() throws IOException {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        FileTime fileTime = FileTime.fromMillis(-1);
        entry.setLastAccessTime(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithInvalidFileTime_BAoZ2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        FileTime fileTime = FileTime.fromMillis(-1);
        ZipEntry result = entry.setLastAccessTime(fileTime);
        assertEquals(entry, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_SLrt0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionMadeBy_PJZB0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertEquals(0, entry.getVersionMadeBy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionMadeByWithFile_Xtwt1() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        assertEquals(0, entry.getVersionMadeBy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataExtraWithoutExtraData_QUuD1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] result = entry.getLocalFileDataExtra();
        assertArrayEquals(new byte[0], result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithDirectoryEntryName_PKVl1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test_dir/");
        assertTrue(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithFileEntryName_juGi2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertFalse(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_qqwu0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastAccessTime(fileTime);
    Assertions.assertEquals(fileTime, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithMaxFileTime_upoL6() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime maxFileTime = FileTime.fromMillis(Long.MAX_VALUE);
    entry.setLastAccessTime(maxFileTime);
    Assertions.assertNotEquals(maxFileTime, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithMinFileTime_vXmO7() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime minFileTime = FileTime.fromMillis(Long.MIN_VALUE);
    entry.setLastAccessTime(minFileTime);
    Assertions.assertNotEquals(minFileTime, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithCurrentFileTime_axrr8() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime currentFileTime = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastAccessTime(currentFileTime);
    Assertions.assertEquals(currentFileTime, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithFutureFileTime_MtTI2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() + 10000);
    entry.setLastAccessTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithPastFileTime_ibHE3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() - 10000);
    entry.setLastAccessTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithMaxFileTime_bBXV4() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(Long.MAX_VALUE);
    entry.setLastAccessTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithMinFileTime_mZQj5() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(Long.MIN_VALUE);
    entry.setLastAccessTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithInvalidFileTime_LKlm6() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(-10000);
    entry.setLastAccessTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithInvalidFileTime2_kCNi7() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(1000000000000000000L);
    entry.setLastAccessTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_TrXz0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    entry.setTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithInvalidFileTime_NUBz2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    FileTime fileTime = FileTime.fromMillis(-1);
    entry.setTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithMaxFileTime_Ogwj3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    FileTime fileTime = FileTime.fromMillis(Long.MAX_VALUE);
    entry.setTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithMinFileTime_ZOgJ4() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    FileTime fileTime = FileTime.fromMillis(Long.MIN_VALUE);
    entry.setTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithInvalidFileTime_WWRS2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(-1);
    entry.setLastAccessTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithZeroFileTime_pdGZ7() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(0);
    entry.setLastAccessTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithNegativeFileTime_pTBl8() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(-1000);
    entry.setLastAccessTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithPositiveFileTime_LOJh9() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(1000);
    entry.setLastAccessTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithRandomFileTime_GMjc10() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(new Random().nextLong());
    entry.setLastAccessTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithCustomFileTime_TwJI12() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(1234567890);
    entry.setLastAccessTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setRawFlagTest1_PHKo0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setRawFlag(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setRawFlagTest3_JqwX2() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("name"), "entryName");
        entry.setRawFlag(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDiskNumberStart_nGao0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertEquals(0, entry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDiskNumberStartWithFile_Dliw2() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.txt"), "test.txt");
        assertEquals(0, entry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getUnixMode_whenPlatformIsNotUnix_thenZeroIsReturned_RkRd1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setPlatform(ZipArchiveEntry.PLATFORM_FAT);
        int unixMode = entry.getUnixMode();
        assertEquals(0, unixMode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_vVEX0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        ZipArchiveEntry clonedEntry = (ZipArchiveEntry) entry.clone();
        assertEquals(entry, clonedEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClone_ZSBR0_1() throws Exception {
		ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
		ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
		assertNotNull(clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClone_ZSBR0_2() throws Exception {
		ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
		ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
		assertEquals(entry.getName(), clone.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryExtra_Pjdy0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] expected = new byte[0];
        byte[] actual = entry.getCentralDirectoryExtra();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveExtraFieldWithNullType_wzcP0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipShort type = null;
        assertThrows(NoSuchElementException.class, () -> entry.removeExtraField(type));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixSymlinkWithSymlink_svYm0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setUnixMode(UnixStat.LINK_FLAG);
        assertTrue(entry.isUnixSymlink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixSymlinkWithFile_nagY1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setUnixMode(UnixStat.FILE_FLAG);
        assertFalse(entry.isUnixSymlink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNonDosTime_dJCt1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setTime(1234567890123L);
    assertEquals(1234567890123L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAlignment_FCWw0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setAlignment(16);
        assertEquals(16, entry.getAlignment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAlignmentInvalidValue_AgcW1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        try {
            entry.setAlignment(15);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid value for alignment, must be power of two and no bigger than 65535 but is 15", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAlignmentTooBigValue_AkEh2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        try {
            entry.setAlignment(0x10000);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid value for alignment, must be power of two and no bigger than 65535 but is 65536", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_oDqq0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setTime(System.currentTimeMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithFileTime_xhyh1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    entry.setTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithNonDosTime_DTVk1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setTime(1234567890);
        assertEquals(1234567890, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithValidTime_WonH0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setTime(System.currentTimeMillis());
    assertEquals(System.currentTimeMillis(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithDosTime_IIxW0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("testentry");
    entry.setTime(ZipUtil.dosToJavaTime(123456789));
    assertFalse(entry.isUnixSymlink());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNonDosTime_Spui1_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("testentry");
    entry.setTime(123456789000L);
    assertEquals(123456789000L, entry.getTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNonDosTime_Spui1_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("testentry");
    entry.setTime(123456789000L);
    assertFalse(entry.isUnixSymlink());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithValidTime_UpZo0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setTime(System.currentTimeMillis());
    assertEquals(entry.getTime(), System.currentTimeMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_rxCj0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("testentry");
    entry.setTime(1634636400000L);
    assertEquals(1634636400000L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithFileTime_wDuy1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("testentry");
    FileTime fileTime = FileTime.fromMillis(1634636400000L);
    entry.setTime(fileTime);
    assertEquals(1634636400000L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNonDosTime_pJHi1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setTime(123456789000L);
    assertEquals(123456789000L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithDosTime_Rzzq0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setTime(1634340800000L); // 2021-10-15 00:00:00
        assertEquals(1634340800000L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithNonDosTime_hVRN1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setTime(1634340800001L); // 2021-10-15 00:00:00.001
        assertEquals(1634340800001L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMethod_GNWB0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setMethod(ZipArchiveEntry.DEFLATED);
        assertEquals(ZipArchiveEntry.DEFLATED, entry.getMethod());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMethodWithNegativeValue_sTRC1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        try {
            entry.setMethod(-1);
        } catch (IllegalArgumentException e) {
            assertEquals("ZIP compression method can not be negative: -1", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFields_mCes0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipExtraField[] extraFields = entry.getExtraFields();
        assertEquals(0, extraFields.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGeneralPurposeBit_OVxN0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        GeneralPurposeBit gpb = entry.getGeneralPurposeBit();
        assertEquals(gpb, entry.getGeneralPurposeBit());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPlatform_NxaD0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        int platform = entry.getPlatform();
        assertEquals(0, platform);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPlatformWithFile_hGbY3() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        int platform = entry.getPlatform();
        assertEquals(0, platform);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetStreamContiguous_QKnT0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setStreamContiguous(true);
        assert entry.isStreamContiguous();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetStreamContiguousFalse_MIGy1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setStreamContiguous(false);
        assert !entry.isStreamContiguous();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInternalAttributes_GCVv0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setInternalAttributes(123);
    assertEquals(123, entry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInternalAttributesWithNegativeValue_fMtq1() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setInternalAttributes(-1);
    assertEquals(-1, entry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInternalAttributesWithZeroValue_PbcJ2() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setInternalAttributes(0);
    assertEquals(0, entry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInternalAttributesWithMaxValue_WdZA3() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setInternalAttributes(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInternalAttributesWithMinValue_xzZp4() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setInternalAttributes(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInternalAttributesWithRandomValue_BVvy5() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setInternalAttributes(100);
    assertEquals(100, entry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_CdIa0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setSize(1024L);
        assertEquals(1024L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithZeroValue_SdhT2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setSize(0L);
        assertEquals(0L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeAfterSettingSize_obXT3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setSize(512L);
        assertEquals(512L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeAfterSettingSizeToMaxLongValue_FLoh6() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setSize(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeAfterSettingSizeToHalfOfMaxLongValue_jFKx8() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setSize(Long.MAX_VALUE / 2);
        assertEquals(Long.MAX_VALUE / 2, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_file_FnYF2() throws Exception {
        File file = new File("test");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test");
        assertNotNull(entry);
        assertEquals("test", entry.getName());
        File file2 = new File("test2");
        ZipArchiveEntry entry2 = new ZipArchiveEntry(file2, "test2");
        assertNotNull(entry2);
        assertEquals("test2", entry2.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_string_zmrT6() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertNotNull(entry);
        assertEquals("test", entry.getName());
        ZipArchiveEntry entry2 = new ZipArchiveEntry("test2");
        assertNotNull(entry2);
        assertEquals("test2", entry2.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_CWdk0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    ZipEntry result = entry.setLastAccessTime(fileTime);
    assertEquals(entry, result);
    assertEquals(fileTime, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClone_ZSBR0() throws Exception {
		ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
		ZipArchiveEntry clone = (ZipArchiveEntry) entry.clone();
		assertNotNull(clone);
		assertEquals(entry.getName(), clone.getName());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNonDosTime_Spui1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("testentry");
    entry.setTime(123456789000L);
    assertEquals(123456789000L, entry.getTime());
    assertFalse(entry.isUnixSymlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUnixModeWithNegativeValue_WdeK1_fid2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setUnixMode(-1);
        assertEquals(65535, entry.getUnixMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidFileTime_ORRb2_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(-1);
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidFileTime_gVpT2_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(-1);
    entry.setCreationTime(time);
    assertNull(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidZipArchiveEntry_UGOG3_fid2() {
    ZipArchiveEntry entry = null;
    try {
        entry = new ZipArchiveEntry(new File("test.txt"), "test.txt");
    } catch (Exception e) {
        fail("Failed to create ZipArchiveEntry");
    }
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidFileTimeZipArchiveEntry_xOfH5_fid2() {
    ZipArchiveEntry entry = null;
    try {
        entry = new ZipArchiveEntry(new File("test.txt"), "test.txt");
    } catch (Exception e) {
        fail("Failed to create ZipArchiveEntry");
    }
    FileTime time = FileTime.fromMillis(-1);
    entry.setCreationTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidZipArchiveEntryFile_KcDS6_fid2() {
    ZipArchiveEntry entry = null;
    try {
        entry = new ZipArchiveEntry(new File("test.txt"), "test.txt");
    } catch (Exception e) {
        fail("Failed to create ZipArchiveEntry");
    }
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertNull(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNamesWithNullName_uCKy1_fid2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setName(null, null);
    assertNull(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithNegativeTime_ialC3_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(-1000);
    entry.setCreationTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidTime_LVeh7_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(0x80000000 * 1000L);
    entry.setCreationTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidTime2_TfQr8_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(0xFFFFFFFF * 1000L);
    entry.setCreationTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidTime5_KBDL11_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(0x7FFFFFFF * 1000L + 1);
    entry.setCreationTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidTime6_FARK12_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(0x7FFFFFFF * 1000L + 1000);
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_dynr0_fid2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
    assertNull(entry.getExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguous_WhenStreamIsContiguous_ReturnsTrue_oNGz0_fid2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setMethod(ZipEntry.DEFLATED);
        assertFalse(entry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setName_NullName_SetsNameToNull_sVzw0_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setName(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderId_QFMz2_fid2() {
        UnparseableExtraFieldData unparseableExtra = new UnparseableExtraFieldData();
        ZipShort headerId = unparseableExtra.getHeaderId();
        assertEquals(44225, headerId.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtraWithNullArgument_aMlK1_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setCentralDirectoryExtra(new byte[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTimeWithInvalidFileTime_Apbd2_fid2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        FileTime fileTime = FileTime.fromMillis(-1);
        entry.setLastModifiedTime(fileTime);
    assertNull(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithInvalidFileTime_lJiM2_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(-1);
    entry.setLastModifiedTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithInvalidFileTime_vOPq2_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(-1);
    entry.setLastModifiedTime(fileTime);
    assertEquals(fileTime, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithFutureFileTime_OeuB3_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() + 1000000);
    entry.setLastModifiedTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithNegativeFileTime_PPAa4_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(-1000000);
    entry.setLastModifiedTime(fileTime);
    assertNull(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithInvalidFileTime_NBRf2_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(-1);
    entry.setLastAccessTime(fileTime);
    assertNull(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithInvalidFileTime_qALG2_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime invalidFileTime = FileTime.fromMillis(-1);
    entry.setLastAccessTime(invalidFileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullName_CJcW1_fid2() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
    assertNull(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithFutureFileTime_JEdn3_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime futureFileTime = FileTime.fromMillis(System.currentTimeMillis() + 10000);
    entry.setLastAccessTime(futureFileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithNegativeFileTime_DSnX4_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime negativeFileTime = FileTime.fromMillis(-10000);
    entry.setLastAccessTime(negativeFileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithZeroFileTime_ReSz5_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime zeroFileTime = FileTime.fromMillis(0);
    entry.setLastAccessTime(zeroFileTime);
    Assertions.assertEquals(zeroFileTime, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithRandomFileTime_RBNr9_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime randomFileTime = FileTime.fromMillis(new Random().nextLong());
    entry.setLastAccessTime(randomFileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithNullFileTime_rrjM1_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setLastAccessTime(FileTime.fromMillis(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNullFileTime_YxPS1_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setTime(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithInvalidTime_OkyQ1_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setTime(-1);
    assertEquals(-1, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldsWithFile_PDgE2_fid2() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        ZipExtraField[] extraFields = entry.getExtraFields();
        assertEquals(2, extraFields.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffsetWithFile_tzNg3_fid2() {
        File file = new File("name");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "entryName");
        assertEquals(-1, entry.getDataOffset());
    }
}