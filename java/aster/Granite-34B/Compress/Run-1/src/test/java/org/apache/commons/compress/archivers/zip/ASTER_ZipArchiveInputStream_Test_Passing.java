/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.function.Function;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_gEOE0() {
    byte[] signature = new byte[10];
    int length = 10;
    boolean result = ZipArchiveInputStream.matches(signature, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches1_egVp1() {
    byte[] signature = new byte[10];
    int length = 9;
    boolean result = ZipArchiveInputStream.matches(signature, length);
    assertEquals(false, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches2_moxA2() {
    byte[] signature = new byte[10];
    int length = 10;
    boolean result = ZipArchiveInputStream.matches(signature, length);
    assertEquals(false, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_jZBB0() throws IOException {
    ZipArchiveInputStream zin = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zin.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseTwice_tfRd1() throws IOException {
    ZipArchiveInputStream zin = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zin.close();
    zin.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextZipEntry_FirstEntry_ftUc0() throws IOException {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedCount_hbGe0() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        assertEquals(0, zipArchiveInputStream.getUncompressedCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedCountWithEncoding_zOSN1() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
        assertEquals(0, zipArchiveInputStream.getUncompressedCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedCountWithUseUnicodeExtraFields_jEEU2() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true);
        assertEquals(0, zipArchiveInputStream.getUncompressedCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedCountWithAllowStoredEntriesWithDataDescriptor_Hwra3() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true);
        assertEquals(0, zipArchiveInputStream.getUncompressedCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedCountWithSkipSplitSig_ngRX4() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
        assertEquals(0, zipArchiveInputStream.getUncompressedCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextZipEntry_with_invalid_input_should_throw_exception_jHkl1() throws IOException {
        byte[] lfhBuf = new byte[20];
        ZipArchiveInputStream zin = new ZipArchiveInputStream(new ByteArrayInputStream(lfhBuf));
        try {
            zin.getNextZipEntry();
        } catch (ZipException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldSupport_qsQi0() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream);
        Function<ZipShort, ZipExtraField> extraFieldSupport = (zipShort) -> null;
        zipArchiveInputStream.setExtraFieldSupport(extraFieldSupport);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldSupport2_hEpr1() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream, "UTF-8", true, true, true);
        Function<ZipShort, ZipExtraField> extraFieldSupport = (zipShort) -> null;
        zipArchiveInputStream.setExtraFieldSupport(extraFieldSupport);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldSupport3_cCFJ2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream, "UTF-8", true);
        Function<ZipShort, ZipExtraField> extraFieldSupport = (zipShort) -> null;
        zipArchiveInputStream.setExtraFieldSupport(extraFieldSupport);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldSupport4_Rswg3() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream, "UTF-8", true, true);
        Function<ZipShort, ZipExtraField> extraFieldSupport = (zipShort) -> null;
        zipArchiveInputStream.setExtraFieldSupport(extraFieldSupport);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldSupport5_djsv4() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream, "UTF-8");
        Function<ZipShort, ZipExtraField> extraFieldSupport = (zipShort) -> null;
        zipArchiveInputStream.setExtraFieldSupport(extraFieldSupport);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void readWithNoArguments_gqlA0() throws IOException {
    ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zis.read();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void readWithOneArgument_hlzL1() throws IOException {
    ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zis.read(new byte[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void readWithTwoArguments_OVRQ2() throws IOException {
    ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zis.read(new byte[1], 0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testReadWithOffsetAndLength_wJnS0_1() throws IOException {
		ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] { 0x01, 0x02, 0x03 }));
		byte[] buffer = new byte[1];
		int read = zais.read(buffer, 0, 1);
		zais.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testReadWithOffsetAndLengthAfterClose_yaEs2() throws IOException {
		ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] { 0x01, 0x02, 0x03 }));
		zais.close();
		byte[] buffer = new byte[1];
		try {
			zais.read(buffer, 0, 1);
			fail("Expected IOException");
		} catch (IOException expected) {
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testReadWithOffsetAndLengthOnEmptyStream_YYsE3() throws IOException {
		ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
		byte[] buffer = new byte[1];
		assertEquals(-1, zais.read(buffer, 0, 1));
		zais.close();
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadFully_koYF2_tsEu0() throws IOException {
        ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        byte[] b = new byte[10];
        int off = 0;
        zis.read(b, off, b.length);
        zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        b = new byte[10];
        off = 0;
        zis.read(b, off, b.length);
    }
}