/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.io.IOException;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIno_IPnS0() {
        byte[] buffer = new byte[24];
        for (int i = 0; i < 24; i++) {
            buffer[i] = (byte) i;
        }
        int expected = DumpArchiveUtil.convert32(buffer, 20);
        int actual = DumpArchiveUtil.getIno(buffer);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert64_voMV0() {
        byte[] buffer = new byte[8];
        int offset = 0;
        long expected = ByteUtils.fromLittleEndian(buffer, offset, 8);
        long actual = DumpArchiveUtil.convert64(buffer, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyWithNullBuffer_ausR0() {
    byte[] buffer = null;
    boolean actual = DumpArchiveUtil.verify(buffer);
    boolean expected = false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyWithInvalidMagicNumber_fBbU2() {
    byte[] buffer = new byte[32];
    buffer[24] = 0x00;
    buffer[25] = 0x00;
    buffer[26] = 0x00;
    buffer[27] = 0x00;
    boolean actual = DumpArchiveUtil.verify(buffer);
    boolean expected = false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyWithInvalidChecksum_MyoO3() {
    byte[] buffer = new byte[32];
    buffer[24] = 0x01;
    buffer[25] = 0x02;
    buffer[26] = 0x03;
    buffer[27] = 0x04;
    buffer[28] = 0x00;
    buffer[29] = 0x00;
    buffer[30] = 0x00;
    buffer[31] = 0x00;
    boolean actual = DumpArchiveUtil.verify(buffer);
    boolean expected = false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCalculateChecksum_zvlE0_fid1() {
        byte[] buffer = new byte[1024]; // Assuming buffer size is 1024
        int expectedChecksum =84446; // Replace with the expected checksum value
        int actualChecksum = DumpArchiveUtil.calculateChecksum(buffer);
        assertEquals(expectedChecksum, actualChecksum);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert16_koeF0_fid1() {
        byte[] buffer = new byte[]{0x00, 0x0A};
        int offset = 0;
        int expected =2560;
        int actual = DumpArchiveUtil.convert16(buffer, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert16WithOffset_LIbu1_fid1() {
        byte[] buffer = new byte[]{0x00, 0x0A, 0x00, 0x0B};
        int offset = 2;
        int expected =2816;
        int actual = DumpArchiveUtil.convert16(buffer, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyWithValidBuffer_ASHA1_fid1() {
    byte[] buffer = new byte[32];
    buffer[24] = 0x01;
    buffer[25] = 0x02;
    buffer[26] = 0x03;
    buffer[27] = 0x04;
    boolean actual = DumpArchiveUtil.verify(buffer);
    boolean expected =false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_BZdB0_MdKU0() throws IOException {
        ZipEncoding encoding = ZipEncodingHelper.getZipEncoding("UTF8");
        byte[] b = new byte[10];
        int offset = 0;
        int len = 5;
        String result = DumpArchiveUtil.decode(encoding, b, offset, len);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidInput_ytxt1_EOGd0() {
        ZipEncoding encoding = ZipEncodingHelper.getZipEncoding("UTF8");
        byte[] b = new byte[10];
        int offset = 10;
        int len = 5;
        try {
            String result = DumpArchiveUtil.decode(encoding, b, offset, len);
        } catch (IOException e) {
        }
    }
}