/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZFile_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchesWithInvalidSignatureAndLength_liXg1() {
		byte[] signature = new byte[] { 0x37, 0x7A, 0x58, 0x5A, 0x01 };
		int length = 5;
		assertTrue(!SevenZFile.matches(signature, length));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchesWithValidSignatureButShortLength_fgwa2() {
		byte[] signature = new byte[] { 0x37, 0x7A, 0x58, 0x5A, 0x00 };
		int length = 4;
		assertTrue(!SevenZFile.matches(signature, length));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchesWithInvalidSignatureButLongLength_Ybjl3() {
		byte[] signature = new byte[] { 0x37, 0x7A, 0x58 };
		int length = 3;
		assertTrue(!SevenZFile.matches(signature, length));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchesWithValidSignatureAndLength_ZnRF0_fid2() {
		byte[] signature = new byte[] { 0x37, 0x7A, 0x58, 0x5A, 0x00 };
		int length = 5;
		assertFalse(SevenZFile.matches(signature, length));
	}
}