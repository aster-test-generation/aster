/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NewAttribute_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullString_Qlxe2() {
        CPUTF8 utf8 = new CPUTF8(null);
        NewAttribute newAttribute = new NewAttribute(utf8, 0);
        assertEquals("", newAttribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullCPUTF8_RYKg4() {
        NewAttribute newAttribute = new NewAttribute(null, 0);
        assertEquals("", newAttribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPUTF8StringInt_cGED1() {
        CPUTF8 utf8 = new CPUTF8("test", 10);
        assertEquals("test", utf8.toString());
        assertEquals(10, utf8.getGlobalIndex());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_TWFN2() {
        CPUTF8 attributeName = new CPUTF8("attribute");
        NewAttribute newAttribute = new NewAttribute(attributeName, 1);
        ClassFileEntry[] nested = newAttribute.getNestedClassFileEntries();
        assertEquals(2, nested.length);
        assertEquals(attributeName, nested[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResolve_hWjx0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 1);
    ClassConstantPool pool = new ClassConstantPool();
    newAttribute.resolve(pool);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResolveWithCoverage_gvgD1() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 1);
    ClassConstantPool pool = new ClassConstantPool();
    newAttribute.resolve(pool);
    newAttribute.resolve(pool);
    newAttribute.resolve(pool);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLengthTest2_LBBF1_fid1() {
    CPUTF8 attributeName = new CPUTF8("attributeName");
    NewAttribute newAttribute = new NewAttribute(attributeName, 0);
    int actual = newAttribute.getLength();
    int expected = 1;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPUTF8StringInt_cGED1_1() {
        CPUTF8 utf8 = new CPUTF8("test", 10);
        assertEquals("test", utf8.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_TWFN2_1() {
        CPUTF8 attributeName = new CPUTF8("attribute");
        NewAttribute newAttribute = new NewAttribute(attributeName, 1);
        ClassFileEntry[] nested = newAttribute.getNestedClassFileEntries();
        assertEquals(2, nested.length);}
}