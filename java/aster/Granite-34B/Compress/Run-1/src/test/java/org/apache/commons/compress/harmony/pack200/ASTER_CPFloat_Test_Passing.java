/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPFloat_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcompareToWithObjectOfSameClassAndSameFloatValue_FPup6() {
    final float theFloat = 1.0f;
    final CPFloat cpFloat1 = new CPFloat(theFloat);
    final CPFloat cpFloat2 = new CPFloat(theFloat);
    assertEquals(0, cpFloat1.compareTo(cpFloat2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcompareTo_YGFI0_OqDJ0() {
    final float theFloat1 = 1.0f;
    final float theFloat2 = 2.0f;
    final CPFloat cpFloat1 = new CPFloat(theFloat1);
    final CPFloat cpFloat2 = new CPFloat(theFloat2);
    assertEquals(Float.compare(theFloat1, theFloat2), cpFloat1.compareTo(cpFloat2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcompareToWithObjectOfSameClassButDifferentFloatValue_jXQq5_KBit0() {
    final float theFloat1 = 1.0f;
    final float theFloat2 = 2.0f;
    final CPFloat cpFloat1 = new CPFloat(theFloat1);
    final CPFloat cpFloat2 = new CPFloat(theFloat2);
    assertNotEquals(0, cpFloat1.compareTo(cpFloat2));
}
}