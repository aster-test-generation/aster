/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipParameters_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFileName_SVvA0() {
    GzipParameters gzipParameters = new GzipParameters();
    gzipParameters.setFileName("test.txt");
    assertEquals("test.txt", gzipParameters.getFileName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFileNameNull_DMnG1() {
    GzipParameters gzipParameters = new GzipParameters();
    gzipParameters.setFileName(null);
    assertEquals(null, gzipParameters.getFileName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFileNameEmpty_FpbT2() {
    GzipParameters gzipParameters = new GzipParameters();
    gzipParameters.setFileName("");
    assertEquals("", gzipParameters.getFileName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_iTYg0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_2_rvez1() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_3_JgbW2() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_4_CPTR3() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(4);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_5_pudz4() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_6_xpYI5() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(6);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_7_cetw6() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(7);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_8_QNwE7() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_9_zNdN8() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(9);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_10_dlLZ9() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModificationTime_qJyC0() {
        GzipParameters gzipParameters = new GzipParameters();
        long modificationTime = 1634047962000L;
        gzipParameters.setModificationTime(modificationTime);
        assertEquals(modificationTime, gzipParameters.getModificationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModificationTimeWithZeroValue_GBOT1() {
        GzipParameters gzipParameters = new GzipParameters();
        long modificationTime = 0L;
        gzipParameters.setModificationTime(modificationTime);
        assertEquals(modificationTime, gzipParameters.getModificationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModificationTimeWithNegativeValue_ACNz2() {
        GzipParameters gzipParameters = new GzipParameters();
        long modificationTime = -1634047962000L;
        gzipParameters.setModificationTime(modificationTime);
        assertEquals(modificationTime, gzipParameters.getModificationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getModificationTime_returnsCorrectValue_XRmh0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setModificationTime(123456789L);
        assert gzipParameters.getModificationTime() == 123456789L;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getModificationTime_returnsZeroWhenNotSet_OIgt1() {
        GzipParameters gzipParameters = new GzipParameters();
        assert gzipParameters.getModificationTime() == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateStrategy_wyEo0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setDeflateStrategy(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateStrategyWithZero_NNkr1() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setDeflateStrategy(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateStrategyWithNegativeValue_YPPs2() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setDeflateStrategy(-1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateStrategyWithMaximumValue_GRSK3() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setDeflateStrategy(9);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFilename_PbLM0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setFilename("test.txt");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFilenameWithNull_rxTp1() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setFilename(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFilenameWithEmpty_kQQm2() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setFilename("");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFilenameWithValidName_equg3() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setFilename("valid_name.txt");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressionLevel_15_zlrZ15() {
    GzipParameters gzipParameters = new GzipParameters();
    gzipParameters.setCompressionLevel(1);
    int compressionLevel = gzipParameters.getCompressionLevel();
    assertEquals(1, compressionLevel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressionLevel_16_Egsa16() {
    GzipParameters gzipParameters = new GzipParameters();
    gzipParameters.setCompressionLevel(2);
    int compressionLevel = gzipParameters.getCompressionLevel();
    assertEquals(2, compressionLevel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressionLevel_17_AEDS17() {
    GzipParameters gzipParameters = new GzipParameters();
    gzipParameters.setCompressionLevel(3);
    int compressionLevel = gzipParameters.getCompressionLevel();
    assertEquals(3, compressionLevel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getFilenameTest_GqDq0() {
        GzipParameters gzipParameters = new GzipParameters();
        String filename = gzipParameters.getFilename();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getFilenameTest_NullFileName_aGsz1() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setFileName(null);
        String filename = gzipParameters.getFilename();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getFilenameTest_EmptyFileName_dHvT2() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setFileName("");
        String filename = gzipParameters.getFilename();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getFilenameTest_ValidFileName_GCWp3() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setFileName("test.txt");
        String filename = gzipParameters.getFilename();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressionLevel_ValidCompressionLevel_faIh0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setCompressionLevel(5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressionLevel_CompressionLevelBelowMinimum_qwHy1() {
        GzipParameters gzipParameters = new GzipParameters();
        try {
            gzipParameters.setCompressionLevel(-2);
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressionLevel_CompressionLevelAboveMaximum_IkUp2() {
        GzipParameters gzipParameters = new GzipParameters();
        try {
            gzipParameters.setCompressionLevel(10);
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBufferSizeWithValidValue_MJaC0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setBufferSize(1024);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBufferSizeWithZeroValue_CYkZ1() {
        GzipParameters gzipParameters = new GzipParameters();
        try {
            gzipParameters.setBufferSize(0);
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBufferSizeWithNegativeValue_sjAn2() {
        GzipParameters gzipParameters = new GzipParameters();
        try {
            gzipParameters.setBufferSize(-1024);
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetComment_tBxY0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setComment("Test comment");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCommentNull_uazI1() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setComment(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCommentEmpty_KRZt2() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setComment("");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getBufferSize_2_NxUf1() {
	GzipParameters gzipParameters = new GzipParameters();
	int expected = 100;
	gzipParameters.setBufferSize(expected);
	int actual = gzipParameters.getBufferSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getBufferSize_3_uKlu2() {
	GzipParameters gzipParameters = new GzipParameters();
	int expected = 1000;
	gzipParameters.setBufferSize(expected);
	int actual = gzipParameters.getBufferSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getBufferSize_4_XlbL3() {
	GzipParameters gzipParameters = new GzipParameters();
	int expected = 10000;
	gzipParameters.setBufferSize(expected);
	int actual = gzipParameters.getBufferSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getBufferSize_5_qZbI4() {
	GzipParameters gzipParameters = new GzipParameters();
	int expected = 100000;
	gzipParameters.setBufferSize(expected);
	int actual = gzipParameters.getBufferSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getBufferSize_6_uJRn5() {
	GzipParameters gzipParameters = new GzipParameters();
	int expected = Integer.MAX_VALUE;
	gzipParameters.setBufferSize(expected);
	int actual = gzipParameters.getBufferSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getBufferSize_8_VYHc7() {
	GzipParameters gzipParameters = new GzipParameters();
	int expected = 1;
	gzipParameters.setBufferSize(expected);
	int actual = gzipParameters.getBufferSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getBufferSize_9_NRee8() {
	GzipParameters gzipParameters = new GzipParameters();
	int expected = 10;
	gzipParameters.setBufferSize(expected);
	int actual = gzipParameters.getBufferSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetComment_TwQZ0() {
    GzipParameters gzipParameters = new GzipParameters();
    String actual = gzipParameters.getComment();
    assertEquals(null, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetComment2_xctb1() {
    GzipParameters gzipParameters = new GzipParameters();
    gzipParameters.setComment("Test");
    String actual = gzipParameters.getComment();
    assertEquals("Test", actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetComment3_YkOV2() {
    GzipParameters gzipParameters = new GzipParameters();
    gzipParameters.setComment("Test");
    gzipParameters.setComment("Test2");
    String actual = gzipParameters.getComment();
    assertEquals("Test2", actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetComment4_ivWz3() {
    GzipParameters gzipParameters = new GzipParameters();
    gzipParameters.setComment("Test");
    gzipParameters.setComment(null);
    String actual = gzipParameters.getComment();
    assertEquals(null, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetComment5_eLzC4() {
    GzipParameters gzipParameters = new GzipParameters();
    gzipParameters.setComment(null);
    String actual = gzipParameters.getComment();
    assertEquals(null, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetComment6_NvNW5() {
    GzipParameters gzipParameters = new GzipParameters();
    gzipParameters.setComment(null);
    gzipParameters.setComment("Test");
    String actual = gzipParameters.getComment();
    assertEquals("Test", actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetComment7_doZr6() {
    GzipParameters gzipParameters = new GzipParameters();
    gzipParameters.setComment(null);
    gzipParameters.setComment(null);
    String actual = gzipParameters.getComment();
    assertEquals(null, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressionLevel_OIie0_fid1() {
    GzipParameters gzipParameters = new GzipParameters();
    int compressionLevel = gzipParameters.getCompressionLevel();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getFileNameTest_ENuF0_fid1() {
    GzipParameters gzipParameters = new GzipParameters();
    String fileName = gzipParameters.getFileName();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getFileNameTest2_kMfB1_fid1() {
    GzipParameters gzipParameters = new GzipParameters();
    String fileName = gzipParameters.getFileName();
    assertNull(fileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getOperatingSystem_1_HmMb0_fid1() {
	GzipParameters gzipParameters = new GzipParameters();
	int actual = gzipParameters.getOperatingSystem();
	int expected =255;
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getBufferSize_1_nmMj0_fid1() {
	GzipParameters gzipParameters = new GzipParameters();
	int expected =512;
	int actual = gzipParameters.getBufferSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetComment_returnsCorrectValue_kYmO1_JaSK1() {
        GzipParameters gzipParameters = new GzipParameters();
        String actual = gzipParameters.getComment();
        String expected = null; // Replace with the expected value
        assertEquals(expected, actual);
    }
}