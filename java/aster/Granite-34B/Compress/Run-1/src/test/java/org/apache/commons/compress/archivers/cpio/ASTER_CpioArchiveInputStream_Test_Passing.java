/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithSignatureAndLength_NzaW0() {
        byte[] signature = new byte[6];
        signature[0] = 0x71;
        signature[1] = (byte) 0xc7;
        signature[2] = 0x30;
        signature[3] = 0x37;
        signature[4] = 0x30;
        signature[5] = 0x31;
        int length = 6;
        assertTrue(CpioArchiveInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithSignatureAndLength2_kFQN1() {
        byte[] signature = new byte[6];
        signature[0] = 0x71;
        signature[1] = (byte) 0xc7;
        signature[2] = 0x30;
        signature[3] = 0x37;
        signature[4] = 0x30;
        signature[5] = 0x32;
        int length = 6;
        assertTrue(CpioArchiveInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithSignatureAndLength3_snXE2() {
        byte[] signature = new byte[6];
        signature[0] = 0x71;
        signature[1] = (byte) 0xc7;
        signature[2] = 0x30;
        signature[3] = 0x37;
        signature[4] = 0x30;
        signature[5] = 0x37;
        int length = 6;
        assertTrue(CpioArchiveInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithSignatureAndLength4_WAqt3() {
        byte[] signature = new byte[6];
        signature[0] = 0x30;
        signature[1] = 0x37;
        signature[2] = 0x30;
        signature[3] = 0x37;
        signature[4] = 0x30;
        signature[5] = 0x31;
        int length = 6;
        assertTrue(CpioArchiveInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithSignatureAndLength5_OTwu4() {
        byte[] signature = new byte[6];
        signature[0] = 0x30;
        signature[1] = 0x37;
        signature[2] = 0x30;
        signature[3] = 0x37;
        signature[4] = 0x30;
        signature[5] = 0x32;
        int length = 6;
        assertTrue(CpioArchiveInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithSignatureAndLength6_JShp5() {
        byte[] signature = new byte[6];
        signature[0] = 0x30;
        signature[1] = 0x37;
        signature[2] = 0x30;
        signature[3] = 0x37;
        signature[4] = 0x30;
        signature[5] = 0x37;
        int length = 6;
        assertTrue(CpioArchiveInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithSignatureAndLength7_SIQi6() {
        byte[] signature = new byte[6];
        signature[0] = 0x71;
        signature[1] = (byte) 0xc7;
        signature[2] = 0x30;
        signature[3] = 0x37;
        signature[4] = 0x30;
        signature[5] = 0x38;
        int length = 6;
        assertTrue(CpioArchiveInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithSignatureAndLength8_gkUR7() {
        byte[] signature = new byte[6];
        signature[0] = 0x30;
        signature[1] = 0x37;
        signature[2] = 0x30;
        signature[3] = 0x37;
        signature[4] = 0x30;
        signature[5] = 0x38;
        int length = 6;
        assertFalse(CpioArchiveInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumberOfLinks_kNIL2_KSVP0_2() {
        CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW);
        entry.setNumberOfLinks(0);
        entry.setNumberOfLinks(10);
        assertEquals(10, entry.getNumberOfLinks());}
}