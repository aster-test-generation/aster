/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipShort_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest4_WllA3() {
        ZipShort zipShort = new ZipShort(new byte[]{0x01, 0x02}, 1);
        int actual = zipShort.getValue();
        int expected = 0x0102;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_vGsj0_1() {
        ZipShort zipShort1 = new ZipShort(new byte[]{0x01, 0x02}, 0);
        ZipShort zipShort2 = new ZipShort(0x0102);
        ZipShort zipShort3 = new ZipShort(new byte[]{0x01, 0x02});
        assertEquals(zipShort1.hashCode(), zipShort2.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_vGsj0_2() {
        ZipShort zipShort1 = new ZipShort(new byte[]{0x01, 0x02}, 0);
        ZipShort zipShort2 = new ZipShort(0x0102);
        ZipShort zipShort3 = new ZipShort(new byte[]{0x01, 0x02});
        assertEquals(zipShort2.hashCode(), zipShort3.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest2_YGBA1() {
		byte[] bytes = new byte[2];
		int offset = 1;
		int expected = (int) ByteUtils.fromLittleEndian(bytes, offset, 1);
		int actual = ZipShort.getValue(bytes, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest3_DKDh2() {
		byte[] bytes = new byte[2];
		int offset = 2;
		int expected = (int) ByteUtils.fromLittleEndian(bytes, offset, 2);
		int actual = ZipShort.getValue(bytes, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest4_hzkH3() {
		byte[] bytes = new byte[2];
		int offset = 3;
		int expected = (int) ByteUtils.fromLittleEndian(bytes, offset, 2);
		int actual = ZipShort.getValue(bytes, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest5_WfWh4() {
		byte[] bytes = new byte[2];
		int offset = 4;
		int expected = (int) ByteUtils.fromLittleEndian(bytes, offset, 2);
		int actual = ZipShort.getValue(bytes, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest6_WHdA5() {
		byte[] bytes = new byte[2];
		int offset = 5;
		int expected = (int) ByteUtils.fromLittleEndian(bytes, offset, 2);
		int actual = ZipShort.getValue(bytes, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest7_YKnT6() {
		byte[] bytes = new byte[2];
		int offset = 6;
		int expected = (int) ByteUtils.fromLittleEndian(bytes, offset, 2);
		int actual = ZipShort.getValue(bytes, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest8_mmEg7() {
		byte[] bytes = new byte[2];
		int offset = 7;
		int expected = (int) ByteUtils.fromLittleEndian(bytes, offset, 2);
		int actual = ZipShort.getValue(bytes, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest9_DyTw8() {
		byte[] bytes = new byte[2];
		int offset = 8;
		int expected = (int) ByteUtils.fromLittleEndian(bytes, offset, 2);
		int actual = ZipShort.getValue(bytes, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest10_TmQT9() {
		byte[] bytes = new byte[2];
		int offset = 9;
		int expected = (int) ByteUtils.fromLittleEndian(bytes, offset, 2);
		int actual = ZipShort.getValue(bytes, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutShort2_mAkc2() {
        byte[] buf = new byte[2];
        int value = 256;
        int offset = 0;
        ZipShort.putShort(value, buf, offset);
        assertEquals(1, buf[0] & 0xFF);
        assertEquals(0, buf[1] & 0xFF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutShort3_gYbN3() {
        byte[] buf = new byte[2];
        int value = 65535;
        int offset = 0;
        ZipShort.putShort(value, buf, offset);
        assertEquals(-1, buf[0] & 0xFF);
        assertEquals(-1, buf[1] & 0xFF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes2_hwzF1_fid1() {
    ZipShort zipShort = new ZipShort(0x0102);
    byte[] result = zipShort.getBytes();
    byte[] expected = new byte[] {0x01, 0x02};
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_waCo0_fid1() {
        ZipShort zipShort = new ZipShort(new byte[] {0x01, 0x02}, 0);
        assertEquals("ZipShort value: 258", zipShort.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_qQTy2_fid1() {
        ZipShort zipShort = new ZipShort(new byte[] {0x01, 0x02});
        assertEquals("ZipShort value: 258", zipShort.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithIntValue_Psco0_fid1() {
    byte[] expected = new byte[] {0, 1};
    byte[] actual = ZipShort.getBytes(1);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithIntValueRandom_sTzV4_fid1() {
    byte[] expected = new byte[] {10, -5};
    byte[] actual = ZipShort.getBytes(2555);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithIntValueNegative_wphk5_fid1() {
    byte[] expected = new byte[] {10, 111};
    byte[] actual = ZipShort.getBytes(-23957);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_vGsj0() {
        ZipShort zipShort1 = new ZipShort(new byte[]{0x01, 0x02}, 0);
        ZipShort zipShort2 = new ZipShort(0x0102);
        ZipShort zipShort3 = new ZipShort(new byte[]{0x01, 0x02});
        assertEquals(zipShort1.hashCode(), zipShort2.hashCode());
        assertEquals(zipShort2.hashCode(), zipShort3.hashCode());
        assertEquals(zipShort1.hashCode(), zipShort3.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest2_YGBA1_fid1() {
		byte[] bytes = new byte[2];
		int offset = 1;
		int expected = (int) ByteUtils.fromLittleEndian(bytes, offset, 2);
		int actual = ZipShort.getValue(bytes, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutShort2_mAkc2_2() {
        byte[] buf = new byte[2];
        int value = 256;
        int offset = 0;
        ZipShort.putShort(value, buf, offset);
        assertEquals(0, buf[1] & 0xFF);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutShort3_gYbN3_1_fid2() {
        byte[] buf = new byte[2];
        int value = 65535;
        int offset = 0;
        ZipShort.putShort(value, buf, offset);
        assertEquals(-1, buf[0] & 0xFF);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutShort3_gYbN3_2_fid2() {
        byte[] buf = new byte[2];
        int value = 65535;
        int offset = 0;
        ZipShort.putShort(value, buf, offset);
        assertEquals(-1, buf[1] & 0xFF);}
}