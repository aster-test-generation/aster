/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.HashSet;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sets_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNoArguments_OFsX0_1() {
        HashSet<Object> set = Sets.newHashSet();
        assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNoArguments_OFsX0_2() {
        HashSet<Object> set = Sets.newHashSet();
        assertTrue(set.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithOneArgument_bnpY1_1() {
        HashSet<String> set = Sets.newHashSet("a");
        assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithOneArgument_bnpY1_2() {
        HashSet<String> set = Sets.newHashSet("a");
        assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithOneArgument_bnpY1_3() {
        HashSet<String> set = Sets.newHashSet("a");
        assertTrue(set.contains("a"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithTwoArguments_vtto2_1() {
        HashSet<Integer> set = Sets.newHashSet(1, 2);
        assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithTwoArguments_vtto2_2() {
        HashSet<Integer> set = Sets.newHashSet(1, 2);
        assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithTwoArguments_vtto2_3() {
        HashSet<Integer> set = Sets.newHashSet(1, 2);
        assertTrue(set.contains(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithTwoArguments_vtto2_4() {
        HashSet<Integer> set = Sets.newHashSet(1, 2);
        assertTrue(set.contains(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithThreeArguments_Ycem3_1() {
        HashSet<Character> set = Sets.newHashSet('a', 'b', 'c');
        assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithThreeArguments_Ycem3_2() {
        HashSet<Character> set = Sets.newHashSet('a', 'b', 'c');
        assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithThreeArguments_Ycem3_3() {
        HashSet<Character> set = Sets.newHashSet('a', 'b', 'c');
        assertTrue(set.contains('a'));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithThreeArguments_Ycem3_4() {
        HashSet<Character> set = Sets.newHashSet('a', 'b', 'c');
        assertTrue(set.contains('b'));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithThreeArguments_Ycem3_5() {
        HashSet<Character> set = Sets.newHashSet('a', 'b', 'c');
        assertTrue(set.contains('c'));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFourArguments_PjQK4_1() {
        HashSet<Long> set = Sets.newHashSet(1L, 2L, 3L, 4L);
        assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFourArguments_PjQK4_2() {
        HashSet<Long> set = Sets.newHashSet(1L, 2L, 3L, 4L);
        assertEquals(4, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFourArguments_PjQK4_3() {
        HashSet<Long> set = Sets.newHashSet(1L, 2L, 3L, 4L);
        assertTrue(set.contains(1L));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFourArguments_PjQK4_4() {
        HashSet<Long> set = Sets.newHashSet(1L, 2L, 3L, 4L);
        assertTrue(set.contains(2L));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFourArguments_PjQK4_5() {
        HashSet<Long> set = Sets.newHashSet(1L, 2L, 3L, 4L);
        assertTrue(set.contains(3L));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFourArguments_PjQK4_6() {
        HashSet<Long> set = Sets.newHashSet(1L, 2L, 3L, 4L);
        assertTrue(set.contains(4L));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFiveArguments_SQnU5_1() {
        HashSet<Float> set = Sets.newHashSet(1.0f, 2.0f, 3.0f, 4.0f, 5.0f);
        assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFiveArguments_SQnU5_2() {
        HashSet<Float> set = Sets.newHashSet(1.0f, 2.0f, 3.0f, 4.0f, 5.0f);
        assertEquals(5, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFiveArguments_SQnU5_3() {
        HashSet<Float> set = Sets.newHashSet(1.0f, 2.0f, 3.0f, 4.0f, 5.0f);
        assertTrue(set.contains(1.0f));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFiveArguments_SQnU5_4() {
        HashSet<Float> set = Sets.newHashSet(1.0f, 2.0f, 3.0f, 4.0f, 5.0f);
        assertTrue(set.contains(2.0f));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFiveArguments_SQnU5_5() {
        HashSet<Float> set = Sets.newHashSet(1.0f, 2.0f, 3.0f, 4.0f, 5.0f);
        assertTrue(set.contains(3.0f));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFiveArguments_SQnU5_6() {
        HashSet<Float> set = Sets.newHashSet(1.0f, 2.0f, 3.0f, 4.0f, 5.0f);
        assertTrue(set.contains(4.0f));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFiveArguments_SQnU5_7() {
        HashSet<Float> set = Sets.newHashSet(1.0f, 2.0f, 3.0f, 4.0f, 5.0f);
        assertTrue(set.contains(5.0f));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSixArguments_qtyR6_1() {
        HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSixArguments_qtyR6_2() {
        HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        assertEquals(6, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSixArguments_qtyR6_3() {
        HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        assertTrue(set.contains(1.0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSixArguments_qtyR6_4() {
        HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        assertTrue(set.contains(2.0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSixArguments_qtyR6_5() {
        HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        assertTrue(set.contains(3.0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSixArguments_qtyR6_6() {
        HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        assertTrue(set.contains(4.0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSixArguments_qtyR6_7() {
        HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        assertTrue(set.contains(5.0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSixArguments_qtyR6_8() {
        HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        assertTrue(set.contains(6.0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSevenArguments_OzpX7_1() {
        HashSet<Boolean> set = Sets.newHashSet(true, false, true, false, true, false, true);
        assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSevenArguments_OzpX7_2() {
        HashSet<Boolean> set = Sets.newHashSet(true, false, true, false, true, false, true);
        assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSevenArguments_OzpX7_3() {
        HashSet<Boolean> set = Sets.newHashSet(true, false, true, false, true, false, true);
        assertTrue(set.contains(true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSevenArguments_OzpX7_4() {
        HashSet<Boolean> set = Sets.newHashSet(true, false, true, false, true, false, true);
        assertTrue(set.contains(false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightArguments_XuzO8_1() {
        HashSet<Byte> set = Sets.newHashSet((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6, (byte) 7, (byte) 8);
        assertNotNull(set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightArguments_XuzO8_2() {
        HashSet<Byte> set = Sets.newHashSet((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6, (byte) 7, (byte) 8);
        assertEquals(8, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightArguments_XuzO8_3() {
        HashSet<Byte> set = Sets.newHashSet((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6, (byte) 7, (byte) 8);
        assertTrue(set.contains((byte) 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightArguments_XuzO8_4() {
        HashSet<Byte> set = Sets.newHashSet((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6, (byte) 7, (byte) 8);
        assertTrue(set.contains((byte) 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightArguments_XuzO8_5() {
        HashSet<Byte> set = Sets.newHashSet((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6, (byte) 7, (byte) 8);
        assertTrue(set.contains((byte) 3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightArguments_XuzO8_6() {
        HashSet<Byte> set = Sets.newHashSet((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6, (byte) 7, (byte) 8);
        assertTrue(set.contains((byte) 4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightArguments_XuzO8_7() {
        HashSet<Byte> set = Sets.newHashSet((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6, (byte) 7, (byte) 8);
        assertTrue(set.contains((byte) 5));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightArguments_XuzO8_8() {
        HashSet<Byte> set = Sets.newHashSet((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6, (byte) 7, (byte) 8);
        assertTrue(set.contains((byte) 6));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightArguments_XuzO8_9() {
        HashSet<Byte> set = Sets.newHashSet((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6, (byte) 7, (byte) 8);
        assertTrue(set.contains((byte) 7));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightArguments_XuzO8_10() {
        HashSet<Byte> set = Sets.newHashSet((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6, (byte) 7, (byte) 8);
        assertTrue(set.contains((byte) 8));}
}