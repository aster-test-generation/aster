/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.IOException;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testComputeCheckSum_uAtB0() {
		byte[] buf = new byte[] { 1, 2, 3, 4, 5 };
		assertEquals(15,TarUtils.computeCheckSum(buf));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatOctalBytesWithZeroValue_Vxae1() {
	    byte[] buf = new byte[10];
	    int offset = 2;
	    int length = 8;
	    long value = 0L;
	    int expected = 10;
	    int actual =TarUtils.formatOctalBytes(value, buf, offset, length);
	    assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes7_fviY6() {
    long value = 100;
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 4;
    int expected = 4;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes_8_mAqr8()
{
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalString_0_JNpL0() {
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        long value = 0;
       TarUtils.formatUnsignedOctalString(value, buffer, offset, length);
        assertEquals("0000000000", new String(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalString_1_AznC1() {
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        long value = 1;
       TarUtils.formatUnsignedOctalString(value, buffer, offset, length);
        assertEquals("0000000001", new String(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalString_7_QZmY2() {
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        long value = 7;
       TarUtils.formatUnsignedOctalString(value, buffer, offset, length);
        assertEquals("0000000007", new String(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalString_8_IzYY3() {
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        long value = 8;
       TarUtils.formatUnsignedOctalString(value, buffer, offset, length);
        assertEquals("0000000010", new String(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalString_9_vvYo4() {
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        long value = 9;
       TarUtils.formatUnsignedOctalString(value, buffer, offset, length);
        assertEquals("0000000011", new String(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalString_10_Tcsb5() {
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        long value = 10;
       TarUtils.formatUnsignedOctalString(value, buffer, offset, length);
        assertEquals("0000000012", new String(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalString_11_VtxW6() {
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        long value = 11;
       TarUtils.formatUnsignedOctalString(value, buffer, offset, length);
        assertEquals("0000000013", new String(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalString_12_FITw7() {
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        long value = 12;
       TarUtils.formatUnsignedOctalString(value, buffer, offset, length);
        assertEquals("0000000014", new String(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalString_13_gGZX8() {
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        long value = 13;
       TarUtils.formatUnsignedOctalString(value, buffer, offset, length);
        assertEquals("0000000015", new String(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalString_14_EJqc9() {
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        long value = 14;
       TarUtils.formatUnsignedOctalString(value, buffer, offset, length);
        assertEquals("0000000016", new String(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalString_15_Lrfm10() {
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        long value = 15;
       TarUtils.formatUnsignedOctalString(value, buffer, offset, length);
        assertEquals("0000000017", new String(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseFromPAX01SparseHeaders_OGAo0_1() throws IOException {
	    final List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders("100,200,300,400");
	    assertEquals(2, sparseHeaders.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseFromPAX01SparseHeaders_OGAo0_2() throws IOException {
	    final List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders("100,200,300,400");
	    assertEquals(100, sparseHeaders.get(0).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseFromPAX01SparseHeaders_OGAo0_3() throws IOException {
	    final List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders("100,200,300,400");
	    assertEquals(200, sparseHeaders.get(0).getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseFromPAX01SparseHeaders_OGAo0_4() throws IOException {
	    final List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders("100,200,300,400");
	    assertEquals(300, sparseHeaders.get(1).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseFromPAX01SparseHeaders_OGAo0_5() throws IOException {
	    final List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders("100,200,300,400");
	    assertEquals(400, sparseHeaders.get(1).getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseFromPAX01SparseHeadersWithNegativeOffset_Matz1_1() {
	    final IOException exception = assertThrows(IOException.class,
	        () -> TarUtils.parseFromPAX01SparseHeaders("-1,200,300,400"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseFromPAX01SparseHeadersWithNegativeNumbytes_ErIm2_1() {
	    final IOException exception = assertThrows(IOException.class,
	        () -> TarUtils.parseFromPAX01SparseHeaders("100,-200,300,400"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseFromPAX01SparseHeaders_OGAo0() throws IOException {
	    final List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders("100,200,300,400");
	    assertEquals(2, sparseHeaders.size());
	    assertEquals(100, sparseHeaders.get(0).getOffset());
	    assertEquals(200, sparseHeaders.get(0).getNumbytes());
	    assertEquals(300, sparseHeaders.get(1).getOffset());
	    assertEquals(400, sparseHeaders.get(1).getNumbytes());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseFromPAX01SparseHeadersWithNegativeOffset_Matz1() {
	    final IOException exception = assertThrows(IOException.class,
	        () -> TarUtils.parseFromPAX01SparseHeaders("-1,200,300,400"));
	    assertEquals("Corrupted TAR archive. Sparse struct offset contains negative value", exception.getMessage());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseFromPAX01SparseHeadersWithNegativeNumbytes_ErIm2() {
	    final IOException exception = assertThrows(IOException.class,
	        () -> TarUtils.parseFromPAX01SparseHeaders("100,-200,300,400"));
	    assertEquals("Corrupted TAR archive. Sparse struct numbytes contains negative value", exception.getMessage());
	}
}