/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200CompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureNotMatching_pBmy1() {
    byte[] signature = new byte[8];
    signature[0] = 1;
    signature[1] = 2;
    signature[2] = 3;
    signature[3] = 4;
    signature[4] = 5;
    signature[5] = 6;
    signature[6] = 7;
    signature[7] = 8;
    int length = 8;
    boolean actual = Pack200CompressorInputStream.matches(signature, length);
    boolean expected = false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureMatching_aOPG2_fid2() {
    byte[] signature = new byte[8];
    signature[0] = -86;
    signature[1] = -69;
    signature[2] = -67;
    signature[3] = -66;
    signature[4] = 8;
    signature[5] = 0;
    signature[6] = 0;
    signature[7] = 0;
    int length = 8;
    boolean actual = Pack200CompressorInputStream.matches(signature, length);
    boolean expected =false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureLengthMoreThanSIG_LENGTH_cXBm3_fid2() {
    byte[] signature = new byte[8];
    signature[0] = -86;
    signature[1] = -69;
    signature[2] = -67;
    signature[3] = -66;
    signature[4] = 8;
    signature[5] = 0;
    signature[6] = 0;
    signature[7] = 0;
    int length = 9;
    boolean actual = Pack200CompressorInputStream.matches(signature, length);
    boolean expected =false;
    assertEquals(expected, actual);
}
}