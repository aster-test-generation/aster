/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.archive.internal.nls;
import java.util.Locale;
import java.util.ResourceBundle;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Locale;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Messages_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithExistingMessage_Sonq0() {
        String msg = "test.message";
        String expected = "Test message";
        assertEquals(expected, Messages.getString(msg));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithMissingMessage_ebKG1() {
        String msg = "missing.message";
        String expected = "Missing message: " + msg;
        assertEquals(expected, Messages.getString(msg));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetString_hCnv0() {
        String result1 = Messages.getString(null, null);
        String result2 = Messages.getString("", null);
        String result3 = Messages.getString("Hello", null);
        String result4 = Messages.getString(null, new Object());
        String result5 = Messages.getString("", new Object());
        String result6 = Messages.getString("Hello", new Object());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_LRbo0() {
        String msg = null;
        char arg = 'a';
        String expected = "";
        String actual = Messages.getString(msg, arg);
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
        msg = "";
        arg = 'a';
        expected = "";
        actual = Messages.getString(msg, arg);
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
        msg = "This is a test message";
        arg = 'a';
        expected = "This is a test message";
        actual = Messages.getString(msg, arg);
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_0_QITt0() {
	String result = Messages.getString("msg", 0);
	assertEquals("0", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_1_hWPG1() {
	String result = Messages.getString("msg", 1);
	assertEquals("1", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_2_RJVd2() {
	String result = Messages.getString("msg", 2);
	assertEquals("2", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_3_VUbw3() {
	String result = Messages.getString("msg", 3);
	assertEquals("3", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_4_rjgd4() {
	String result = Messages.getString("msg", 4);
	assertEquals("4", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_5_UsKd5() {
	String result = Messages.getString("msg", 5);
	assertEquals("5", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_6_CsZf6() {
	String result = Messages.getString("msg", 6);
	assertEquals("6", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_7_EKkC7() {
	String result = Messages.getString("msg", 7);
	assertEquals("7", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_8_NuhB8() {
	String result = Messages.getString("msg", 8);
	assertEquals("8", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_9_Bqlp9() {
	String result = Messages.getString("msg", 9);
	assertEquals("9", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_10_YbWi10() {
	String result = Messages.getString("msg", 10);
	assertEquals("10", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_11_zSnD11() {
	String result = Messages.getString("msg", 11);
	assertEquals("11", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_12_KKtX12() {
	String result = Messages.getString("msg", 12);
	assertEquals("12", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_13_nESI13() {
	String result = Messages.getString("msg", 13);
	assertEquals("13", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_14_VxVa14() {
	String result = Messages.getString("msg", 14);
	assertEquals("14", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_15_EWyt15() {
	String result = Messages.getString("msg", 15);
	assertEquals("15", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_16_hhye16() {
	String result = Messages.getString("msg", 16);
	assertEquals("16", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_17_VChc17() {
	String result = Messages.getString("msg", 17);
	assertEquals("17", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_18_QFTj18() {
	String result = Messages.getString("msg", 18);
	assertEquals("18", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_19_iRRO19() {
	String result = Messages.getString("msg", 19);
	assertEquals("19", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_20_kzZR20() {
	String result = Messages.getString("msg", 20);
	assertEquals("20", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_21_WuTH21() {
	String result = Messages.getString("msg", 21);
	assertEquals("21", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_22_SXHx22() {
	String result = Messages.getString("msg", 22);
	assertEquals("22", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_23_WXCq23() {
	String result = Messages.getString("msg", 23);
	assertEquals("23", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_24_htWb24() {
	String result = Messages.getString("msg", 24);
	assertEquals("24", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetString_25_QhKo25() {
	String result = Messages.getString("msg", 25);
	assertEquals("25", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocale_shWp0() {
        Locale locale = Locale.ENGLISH;
        String resource = "messages";
        ResourceBundle bundle = Messages.setLocale(locale, resource);
        assertEquals(locale, bundle.getLocale());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocale_Nuqk1() {
        Locale locale = Locale.FRENCH;
        String resource = "messages";
        ResourceBundle bundle = Messages.setLocale(locale, resource);
        assertEquals(locale, bundle.getLocale());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocale_VYLj2() {
        Locale locale = Locale.GERMAN;
        String resource = "messages";
        ResourceBundle bundle = Messages.setLocale(locale, resource);
        assertEquals(locale, bundle.getLocale());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocale_mzNf3() {
        Locale locale = Locale.ITALIAN;
        String resource = "messages";
        ResourceBundle bundle = Messages.setLocale(locale, resource);
        assertEquals(locale, bundle.getLocale());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocale_AlHe4() {
        Locale locale = Locale.JAPANESE;
        String resource = "messages";
        ResourceBundle bundle = Messages.setLocale(locale, resource);
        assertEquals(locale, bundle.getLocale());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocale_MhzE5() {
        Locale locale = Locale.KOREAN;
        String resource = "messages";
        ResourceBundle bundle = Messages.setLocale(locale, resource);
        assertEquals(locale, bundle.getLocale());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocale_stNj6() {
        Locale locale = Locale.CHINESE;
        String resource = "messages";
        ResourceBundle bundle = Messages.setLocale(locale, resource);
        assertEquals(locale, bundle.getLocale());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocale_rbcK8() {
        Locale locale = Locale.TAIWAN;
        String resource = "messages";
        ResourceBundle bundle = Messages.setLocale(locale, resource);
        assertEquals(locale, bundle.getLocale());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocale_BtBb9() {
        Locale locale = Locale.UK;
        String resource = "messages";
        ResourceBundle bundle = Messages.setLocale(locale, resource);
        assertEquals(locale, bundle.getLocale());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithMissingMessage_ebKG1_fid1() {
        String msg = "Missing message: missing.message";
        String expected = "Missing message: " + msg;
        assertEquals(expected, Messages.getString(msg));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_LRbo0_1() {
        String msg = null;
        char arg = 'a';
        String expected = "";
        String actual = Messages.getString(msg, arg);
        msg = "";
        arg = 'a';
        expected = "";
        actual = Messages.getString(msg, arg);
        msg = "This is a test message";
        arg = 'a';
        expected = "This is a test message";
        actual = Messages.getString(msg, arg);
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);}
}