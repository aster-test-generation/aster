/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IntList_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithEmptyList_FAsI0() {
        IntList list = new IntList();
        assertTrue(list.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithPopulatedList_TYlG1() {
        IntList list = new IntList(10);
        list.add(5);
        assertFalse(list.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAll_jzHv0() {
        IntList list = new IntList(5);
        IntList list2 = new IntList(5);
        list2.add(1);
        list2.add(2);
        list2.add(3);
        list.addAll(list2);
        int[] expected = {1, 2, 3};
        int[] actual = list.toArray();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_ZPpC0() {
        IntList intList = new IntList();
        intList.add(1);
        assertEquals(1, intList.get(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddWithCapacity_pZAD1() {
        IntList intList = new IntList(10);
        intList.add(1);
        assertEquals(1, intList.get(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFirstElement_Prut0_1() {
        IntList intList = new IntList(10);
        intList.add(1);
        intList.add(2);
        intList.add(3);
        int result = intList.remove(0);
        assertEquals(1, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFirstElement_Prut0_2() {
        IntList intList = new IntList(10);
        intList.add(1);
        intList.add(2);
        intList.add(3);
        int result = intList.remove(0);
        assertEquals(2, intList.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFirstElement_Prut0_3() {
        IntList intList = new IntList(10);
        intList.add(1);
        intList.add(2);
        intList.add(3);
        int result = intList.remove(0);
        assertEquals(3, intList.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveLastElement_jaXg1_1() {
        IntList intList = new IntList(10);
        intList.add(1);
        intList.add(2);
        intList.add(3);
        int result = intList.remove(2);
        assertEquals(3, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveLastElement_jaXg1_2() {
        IntList intList = new IntList(10);
        intList.add(1);
        intList.add(2);
        intList.add(3);
        int result = intList.remove(2);
        assertEquals(1, intList.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveLastElement_jaXg1_3() {
        IntList intList = new IntList(10);
        intList.add(1);
        intList.add(2);
        intList.add(3);
        int result = intList.remove(2);
        assertEquals(2, intList.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveMiddleElement_tfOt2_1() {
        IntList intList = new IntList(10);
        intList.add(1);
        intList.add(2);
        intList.add(3);
        int result = intList.remove(1);
        assertEquals(2, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveMiddleElement_tfOt2_2() {
        IntList intList = new IntList(10);
        intList.add(1);
        intList.add(2);
        intList.add(3);
        int result = intList.remove(1);
        assertEquals(1, intList.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveMiddleElement_tfOt2_3() {
        IntList intList = new IntList(10);
        intList.add(1);
        intList.add(2);
        intList.add(3);
        int result = intList.remove(1);
        assertEquals(3, intList.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation0_XdfX0() {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    assertEquals(1, intList.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation1_KLDX1() {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    intList.add(1, 2);
    assertEquals(2, intList.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation2_rfGO2() {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    intList.add(1, 2);
    intList.add(2, 3);
    assertEquals(3, intList.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation3_mAMX3() {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    intList.add(1, 2);
    intList.add(2, 3);
    intList.add(3, 4);
    assertEquals(4, intList.get(3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation4_NbOU4() {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    intList.add(1, 2);
    intList.add(2, 3);
    intList.add(3, 4);
    intList.add(4, 5);
    assertEquals(5, intList.get(4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation5_AdUr5() {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    intList.add(1, 2);
    intList.add(2, 3);
    intList.add(3, 4);
    intList.add(4, 5);
    intList.add(5, 6);
    assertEquals(6, intList.get(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation6_xfRZ6() {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    intList.add(1, 2);
    intList.add(2, 3);
    intList.add(3, 4);
    intList.add(4, 5);
    intList.add(5, 6);
    intList.add(6, 7);
    assertEquals(7, intList.get(6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation7_TEIX7() {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    intList.add(1, 2);
    intList.add(2, 3);
    intList.add(3, 4);
    intList.add(4, 5);
    intList.add(5, 6);
    intList.add(6, 7);
    intList.add(7, 8);
    assertEquals(8, intList.get(7));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation8_Ghhx8() {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    intList.add(1, 2);
    intList.add(2, 3);
    intList.add(3, 4);
    intList.add(4, 5);
    intList.add(5, 6);
    intList.add(6, 7);
    intList.add(7, 8);
    intList.add(8, 9);
    assertEquals(9, intList.get(8));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation9_pOYo9() {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    intList.add(1, 2);
    intList.add(2, 3);
    intList.add(3, 4);
    intList.add(4, 5);
    intList.add(5, 6);
    intList.add(6, 7);
    intList.add(7, 8);
    intList.add(8, 9);
    intList.add(9, 10);
    assertEquals(10, intList.get(9));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation0AndObject0_VnCW0() {
    IntList intList = new IntList(10);
    intList.add(0, 0);
    assertEquals(0, intList.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation0AndObject2_DNli2() {
    IntList intList = new IntList(10);
    intList.add(0, 2);
    assertEquals(2, intList.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation0AndObject3_LfLi3() {
    IntList intList = new IntList(10);
    intList.add(0, 3);
    assertEquals(3, intList.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation0AndObject4_BHKi4() {
    IntList intList = new IntList(10);
    intList.add(0, 4);
    assertEquals(4, intList.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation0AndObject5_WBET5() {
    IntList intList = new IntList(10);
    intList.add(0, 5);
    assertEquals(5, intList.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation0AndObject6_FKmG6() {
    IntList intList = new IntList(10);
    intList.add(0, 6);
    assertEquals(6, intList.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation0AndObject7_chSZ7() {
    IntList intList = new IntList(10);
    intList.add(0, 7);
    assertEquals(7, intList.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation0AndObject8_mEVo8() {
    IntList intList = new IntList(10);
    intList.add(0, 8);
    assertEquals(8, intList.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithLocation0AndObject9_xAcY9() {
    IntList intList = new IntList(10);
    intList.add(0, 9);
    assertEquals(9, intList.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddWithLocation0_pvDR0() {
        IntList intList = new IntList(10);
        intList.add(0, 10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_VOdc0() {
        IntList intList = new IntList(10);
        assertEquals(0, intList.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_ImIF1() {
        IntList intList = new IntList();
        assertEquals(0, intList.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_sSYu2() {
        IntList intList = new IntList(5);
        intList.add(1);
        intList.add(2);
        intList.add(3);
        intList.add(4);
        intList.add(5);
        assertEquals(5, intList.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_OvtK3() {
        IntList intList = new IntList(10);
        intList.add(1);
        intList.add(2);
        intList.add(3);
        intList.add(4);
        intList.add(5);
        assertEquals(5, intList.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_zImw4() {
        IntList intList = new IntList(10);
        intList.add(1);
        intList.add(2);
        intList.add(3);
        intList.add(4);
        intList.add(5);
        intList.remove(0);
        intList.remove(0);
        intList.remove(0);
        intList.remove(0);
        intList.remove(0);
        assertEquals(0, intList.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFirstElement_Prut0() {
        IntList intList = new IntList(10);
        intList.add(1);
        intList.add(2);
        intList.add(3);
        int result = intList.remove(0);
        assertEquals(1, result);
        assertEquals(2, intList.get(0));
        assertEquals(3, intList.get(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveLastElement_jaXg1() {
        IntList intList = new IntList(10);
        intList.add(1);
        intList.add(2);
        intList.add(3);
        int result = intList.remove(2);
        assertEquals(3, result);
        assertEquals(1, intList.get(0));
        assertEquals(2, intList.get(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveMiddleElement_tfOt2() {
        IntList intList = new IntList(10);
        intList.add(1);
        intList.add(2);
        intList.add(3);
        int result = intList.remove(1);
        assertEquals(2, result);
        assertEquals(1, intList.get(0));
        assertEquals(3, intList.get(1));
    }
}