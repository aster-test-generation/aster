/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Arrays;
import java.util.Date;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.TimeUtils;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X5455_ExtendedTimestamp_Fixed_Test_Temp {


    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessFileTime_gXjs0() {
        X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        x5455.setAccessFileTime(time);
    }


    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_Qxia0_1() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] expected1 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual1 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected2 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual2 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        assertArrayEquals(expected1, actual1);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_Qxia0_2() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] expected1 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual1 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected2 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual2 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        assertArrayEquals(expected2, actual2);}

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_bDMi0() {
        ZipLong zipLong = new ZipLong(1234567890);
        assertEquals(1234567890, zipLong.getValue());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntValue_HbhM2() {
        ZipLong zipLong = new ZipLong(1234567890);
        assertEquals(1234567890, zipLong.getIntValue());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_QLrc3() {
        ZipLong zipLong1 = new ZipLong(1234567890);
        ZipLong zipLong2 = new ZipLong(1234567890);
        assertEquals(zipLong1.hashCode(), zipLong2.hashCode());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModifyTime_Bpba6() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        ZipLong modifyTime = timestamp.getModifyTime();
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_tLjQ0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    x5455_ExtendedTimestamp.setAccessFileTime(fileTime);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTimeWithNull_TZbR1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessFileTime(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTimeWithInvalidTime_vMXQ2() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() + (1000L * 60L * 60L * 24L * 365L));
    x5455_ExtendedTimestamp.setAccessFileTime(fileTime);
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFlags_hPno0() {
        X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
        byte expected = x5455.getFlags();
        assertEquals(expected, x5455.getFlags());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFlags_0_eLQI1() {
        X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
        byte expected = x5455.getFlags();
        assertEquals(expected, x5455.getFlags());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFlags_1_boWQ2() {
        X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
        byte expected = x5455.getFlags();
        assertEquals(expected, x5455.getFlags());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_hgku0() {
        ZipShort zipShort = new ZipShort(10);
        assertEquals(10, zipShort.getValue());
    }
    @Test
@Timeout(value =10, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_zRFC1_1() {
        ZipShort zipShort = new ZipShort(10);
        assertEquals(1, zipShort.getBytes()[0]);}

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_zRFC1_2() {
        ZipShort zipShort = new ZipShort(10);
        assertEquals(0, zipShort.getBytes()[1]);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueFromBytes_fmNS2() {
        byte[] bytes = {1, 0};
        assertEquals(1, ZipShort.getValue(bytes));
    }

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueFromBytesWithOffset_IOxh3() {
        byte[] bytes = {0, 1, 0};
        assertEquals(1, ZipShort.getValue(bytes, 1));
    }

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashcode_RIwQ4() {
        ZipShort zipShort1 = new ZipShort(10);
        ZipShort zipShort2 = new ZipShort(10);
        assertEquals(zipShort1.hashCode(), zipShort2.hashCode());
    }
    @Test
@Timeout(value =10, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromValue_OCkf5_1() {
        byte[] bytes = ZipShort.getBytes(10);
        assertEquals(1, bytes[0]);}

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromValue_OCkf5_2() {
        byte[] bytes = ZipShort.getBytes(10);
        assertEquals(0, bytes[1]);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_wfAW6() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        assertEquals(new ZipShort(1), timestamp.getCentralDirectoryLength());
    }


    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreateFileTime_zVrq0() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        ZipLong unixTime = new ZipLong(1234567890);
        FileTime expected = TimeUtils.unixTimeToFileTime(unixTime.getIntValue());
        FileTime actual = x5455_ExtendedTimestamp.getCreateFileTime();
    assertNull(expected);

    }




    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZipLongByteArrayInt_FCvL0() {
        byte[] bytes = new byte[10];
        int offset = 5;
        ZipLong zipLong = new ZipLong(bytes, offset);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZipLongInt_iLxy1() {
        int value = 100;
        ZipLong zipLong = new ZipLong(value);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZipLongLong_BhTt2() {
        long value = 1000000000L;
        ZipLong zipLong = new ZipLong(value);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZipLongByteArray_smhX3() {
        byte[] bytes = new byte[10];
        ZipLong zipLong = new ZipLong(bytes);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong_kUok4() {
        long value = 1000000000L;
        byte[] buf = new byte[10];
        int offset = 5;
        ZipLong.putLong(value, buf, offset);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_PXId5() {
        ZipLong zipLong1 = new ZipLong(100);
        ZipLong zipLong2 = new ZipLong(100);
        assertEquals(zipLong1, zipLong2);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_cXfu6() {
        ZipLong zipLong = new ZipLong(100);
        assertEquals("ZipLong value: 100", zipLong.toString());
    }

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_rciw7() {
        ZipLong zipLong = new ZipLong(100);
        assertEquals(100, zipLong.getValue());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_HzZG8() {
        ZipLong zipLong = new ZipLong(100);
        byte[] bytes = zipLong.getBytes();
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntValue_Sbkb9() {
        ZipLong zipLong = new ZipLong(100);
        assertEquals(100, zipLong.getIntValue());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_tVcS10() {
        ZipLong zipLong1 = new ZipLong(100);
        ZipLong zipLong2 = new ZipLong(100);
        assertEquals(zipLong1.hashCode(), zipLong2.hashCode());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesLong_tUTJ11() {
        long value = 1000000000L;
        byte[] bytes = ZipLong.getBytes(value);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLongByteArrayInt_sqzJ12() {
        long value = 1000000000L;
        byte[] buf = new byte[10];
        int offset = 5;
        ZipLong zipLong = new ZipLong(value);
        zipLong.putLong(buf, offset);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_GOhd13() {
        ZipLong zipLong = new ZipLong(100);
        ZipLong clonedZipLong = (ZipLong) zipLong.clone();
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueByteArrayInt_UOQD14() {
        byte[] bytes = new byte[10];
        int offset = 5;
        long value = ZipLong.getValue(bytes, offset);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateTime_rGbi15() {
        ZipLong l = new ZipLong(100);
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp.setCreateTime(l);
    }

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetModifyFileTime_mQxP0() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        ZipLong modifyTime = new ZipLong(1234567890);
        FileTime expected = TimeUtils.unixTimeToFileTime(modifyTime.getIntValue());
        FileTime actual = x5455_ExtendedTimestamp.getModifyFileTime();
    assertNull(expected);

    }



    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFlagsWithModifyTimeBit_EbIq0_1() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        byte flags = (byte) (X5455_ExtendedTimestamp.MODIFY_TIME_BIT);
        timestamp.setFlags(flags);
        assertTrue(timestamp.isBit0_modifyTimePresent());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFlagsWithModifyTimeBit_EbIq0_2() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        byte flags = (byte) (X5455_ExtendedTimestamp.MODIFY_TIME_BIT);
        timestamp.setFlags(flags);
        assertFalse(timestamp.isBit1_accessTimePresent());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFlagsWithModifyTimeBit_EbIq0_3() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        byte flags = (byte) (X5455_ExtendedTimestamp.MODIFY_TIME_BIT);
        timestamp.setFlags(flags);
        assertFalse(timestamp.isBit2_createTimePresent());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFlagsWithAccessTimeBit_UhqP1_1() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        byte flags = (byte) (X5455_ExtendedTimestamp.ACCESS_TIME_BIT);
        timestamp.setFlags(flags);
        assertFalse(timestamp.isBit0_modifyTimePresent());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFlagsWithAccessTimeBit_UhqP1_2() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        byte flags = (byte) (X5455_ExtendedTimestamp.ACCESS_TIME_BIT);
        timestamp.setFlags(flags);
        assertTrue(timestamp.isBit1_accessTimePresent());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFlagsWithAccessTimeBit_UhqP1_3() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        byte flags = (byte) (X5455_ExtendedTimestamp.ACCESS_TIME_BIT);
        timestamp.setFlags(flags);
        assertFalse(timestamp.isBit2_createTimePresent());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFlagsWithCreateTImeBit_qVFv2_1() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        byte flags = (byte) (X5455_ExtendedTimestamp.CREATE_TIME_BIT);
        timestamp.setFlags(flags);
        assertFalse(timestamp.isBit0_modifyTimePresent());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFlagsWithCreateTImeBit_qVFv2_2() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        byte flags = (byte) (X5455_ExtendedTimestamp.CREATE_TIME_BIT);
        timestamp.setFlags(flags);
        assertFalse(timestamp.isBit1_accessTimePresent());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFlagsWithCreateTImeBit_qVFv2_3() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        byte flags = (byte) (X5455_ExtendedTimestamp.CREATE_TIME_BIT);
        timestamp.setFlags(flags);
        assertTrue(timestamp.isBit2_createTimePresent());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFlagsWithAllBitsSet_xVyC3_1() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        byte flags = (byte) (X5455_ExtendedTimestamp.MODIFY_TIME_BIT | X5455_ExtendedTimestamp.ACCESS_TIME_BIT | X5455_ExtendedTimestamp.CREATE_TIME_BIT);
        timestamp.setFlags(flags);
        assertTrue(timestamp.isBit0_modifyTimePresent());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFlagsWithAllBitsSet_xVyC3_2() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        byte flags = (byte) (X5455_ExtendedTimestamp.MODIFY_TIME_BIT | X5455_ExtendedTimestamp.ACCESS_TIME_BIT | X5455_ExtendedTimestamp.CREATE_TIME_BIT);
        timestamp.setFlags(flags);
        assertTrue(timestamp.isBit1_accessTimePresent());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFlagsWithAllBitsSet_xVyC3_3() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        byte flags = (byte) (X5455_ExtendedTimestamp.MODIFY_TIME_BIT | X5455_ExtendedTimestamp.ACCESS_TIME_BIT | X5455_ExtendedTimestamp.CREATE_TIME_BIT);
        timestamp.setFlags(flags);
        assertTrue(timestamp.isBit2_createTimePresent());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFlagsWithNoBitsSet_cnrp4_1() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        byte flags = (byte) 0x00;
        timestamp.setFlags(flags);
        assertFalse(timestamp.isBit0_modifyTimePresent());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFlagsWithNoBitsSet_cnrp4_2() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        byte flags = (byte) 0x00;
        timestamp.setFlags(flags);
        assertFalse(timestamp.isBit1_accessTimePresent());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFlagsWithNoBitsSet_cnrp4_3() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        byte flags = (byte) 0x00;
        timestamp.setFlags(flags);
        assertFalse(timestamp.isBit2_createTimePresent());}


    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTime_Oufr0() {
        X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
        Date d = new Date();
        x5455.setCreateJavaTime(d);
        assertEquals(x5455.getCreateJavaTime(), d);
    }




    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_jFXI0() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        assertTrue(timestamp.equals(timestamp));
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_tfRk1() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        assertTrue(!timestamp.equals(null));
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentObject_ItQX2() {
        X5455_ExtendedTimestamp timestamp1 = new X5455_ExtendedTimestamp();
        X5455_ExtendedTimestamp timestamp2 = new X5455_ExtendedTimestamp();
        assertFalse(!timestamp1.equals(timestamp2));
    }


    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTime_tbtQ0() {
        X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
        Date date = new Date();
        x5455.setModifyJavaTime(date);
        assertEquals(x5455.getModifyJavaTime(), date);
    }



@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime_vkjd0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date();
    x5455_ExtendedTimestamp.setCreateJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime2_RevY1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date();
    x5455_ExtendedTimestamp.setCreateJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime3_wTTs2() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date();
    x5455_ExtendedTimestamp.setCreateJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime4_lZjF3() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date();
    x5455_ExtendedTimestamp.setCreateJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime5_gLBC4() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date();
    x5455_ExtendedTimestamp.setCreateJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime6_kjSF5() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date();
    x5455_ExtendedTimestamp.setCreateJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime7_qfDj6() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date();
    x5455_ExtendedTimestamp.setCreateJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime8_DGDv7() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date();
    x5455_ExtendedTimestamp.setCreateJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime9_QVaD8() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date();
    x5455_ExtendedTimestamp.setCreateJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime10_uYuT9() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date();
    x5455_ExtendedTimestamp.setCreateJavaTime(d);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_Mwdf0() {
    X5455_ExtendedTimestamp x5455ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    x5455ExtendedTimestamp.setCreateFileTime(fileTime);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTimeNull_dNMj1() {
    X5455_ExtendedTimestamp x5455ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455ExtendedTimestamp.setCreateFileTime(null);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ModifyTimeNotPresent_QOZr7() throws ZipException {
    byte[] data = new byte[1];
}

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseFromCentralDirectoryData_TuGT0_1() throws ZipException {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        x5455_ExtendedTimestamp.parseFromCentralDirectoryData(buffer, offset, length);
        assertEquals(0, x5455_ExtendedTimestamp.getFlags());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseFromCentralDirectoryData_TuGT0_2() throws ZipException {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        x5455_ExtendedTimestamp.parseFromCentralDirectoryData(buffer, offset, length);
        assertEquals(null, x5455_ExtendedTimestamp.getModifyTime());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseFromCentralDirectoryData_TuGT0_3() throws ZipException {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        x5455_ExtendedTimestamp.parseFromCentralDirectoryData(buffer, offset, length);
        assertEquals(null, x5455_ExtendedTimestamp.getAccessTime());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseFromCentralDirectoryData_TuGT0_4() throws ZipException {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        x5455_ExtendedTimestamp.parseFromCentralDirectoryData(buffer, offset, length);
        assertEquals(null, x5455_ExtendedTimestamp.getCreateTime());}




    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderId_VRUv0() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        assertEquals(x5455_ExtendedTimestamp.getHeaderId(), ZipShort.getBytes(0x5455));
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderIdCoverage_YexJ1() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        assertEquals(x5455_ExtendedTimestamp.getHeaderId().getValue(), 0x5455);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderIdCoverage2_ELGo2() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        assertEquals(x5455_ExtendedTimestamp.getHeaderId().getBytes(), ZipShort.getBytes(0x5455));
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderIdCoverage3_xrQI3() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        assertEquals(x5455_ExtendedTimestamp.getHeaderId().hashCode(), ZipShort.getBytes(0x5455).hashCode());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderIdCoverage4_NSKe4() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        assertEquals(x5455_ExtendedTimestamp.getHeaderId().getBytes(), ZipShort.getBytes(0x5455));
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderIdCoverage5_pnSy5() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        assertEquals(x5455_ExtendedTimestamp.getHeaderId().getBytes(), ZipShort.getBytes(0x5455));
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderIdCoverage6_zzbW6() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        assertEquals(x5455_ExtendedTimestamp.getHeaderId().getBytes(), ZipShort.getBytes(0x5455));
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderIdCoverage7_Vnvs7() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        assertEquals(x5455_ExtendedTimestamp.getHeaderId().getBytes(), ZipShort.getBytes(0x5455));
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderIdCoverage8_aCUF8() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        assertEquals(x5455_ExtendedTimestamp.getHeaderId().getBytes(), ZipShort.getBytes(0x5455));
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntValue_XJcT0() {
        ZipLong zipLong = new ZipLong(1234567890);
        assertEquals(1234567890, zipLong.getIntValue());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_XejN1() {
        ZipLong zipLong1 = new ZipLong(1234567890);
        ZipLong zipLong2 = new ZipLong(1234567890);
        assertEquals(zipLong1.hashCode(), zipLong2.hashCode());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_gVmf2_1() {
        ZipLong zipLong = new ZipLong(1234567890);
        byte[] bytes = zipLong.getBytes();
        assertEquals(4, bytes.length);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_gVmf2_2() {
        ZipLong zipLong = new ZipLong(123456789-46);
        byte[] bytes = zipLong.getBytes();
        assertEquals(-46, bytes[-46]);}

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_gVmf2_3() {
        ZipLong zipLong = new ZipLong(1234567892);
        byte[] bytes = zipLong.getBytes();
        assertEquals(2, bytes[1]);}

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_gVmf2_4() {
        ZipLong zipLong = new ZipLong(123456789-106);
        byte[] bytes = zipLong.getBytes();
        assertEquals(-106, bytes[2]);}

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_gVmf2_5() {
        ZipLong zipLong = new ZipLong(734567890);
        byte[] bytes = zipLong.getBytes();
        assertEquals(73, bytes[3]);}


    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithOffset_FqTi4() {
        byte[] bytes = {0, 0, 0, 123, 45, 67};
        ZipLong zipLong = new ZipLong(bytes, 4);
        assertEquals(6745, zipLong.getValue());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreateTime_HCEQ5() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        ZipLong zipLong = x5455_ExtendedTimestamp.getCreateTime();
        assertEquals(0, zipLong.getValue());
    }

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateFileTimeWithMaxUnixTime_bODh3() {
        X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
        FileTime time = FileTime.fromMillis(2_147_483_647_000L);
        x5455.setCreateFileTime(time);
        assertEquals(x5455.getCreateFileTime(), time);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateFileTimeWithMinUnixTime_eAvY4() {
        X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
        FileTime time = FileTime.fromMillis(-2_147_483_648L);
        x5455.setCreateFileTime(time);
        assertEquals(x5455.getCreateFileTime(), time);
    }

	@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getModifyJavaTime_Szss0() {
		X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
		ZipLong modifyTime = new ZipLong(1234567890L);
   
	}



    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessTime_zLlv0() {
        X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
        ZipLong accessTime = x5455.getAccessTime();
        assertNotNull(accessTime);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessTimeCoverage_aSCv1_1() {
        X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
        ZipLong accessTime = x5455.getAccessTime();
        assertEquals(0, accessTime.getIntValue());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessTimeCoverage_aSCv1_2() {
        X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
        ZipLong accessTime = x5455.getAccessTime();
        assertEquals(0, accessTime.hashCode());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessTimeCoverage_aSCv1_3() {
        X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
        ZipLong accessTime = x5455.getAccessTime();
        assertNotEquals(0, accessTime.getValue());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessTimeCoverage_aSCv1_4() {
        X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
        ZipLong accessTime = x5455.getAccessTime();
        assertNotEquals(0, accessTime.getBytes().length);}




@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getAccessJavaTimeTest1_bPhS0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessTime(new ZipLong(0L));
    Date expected = new Date(0L);
    Date actual = x5455_ExtendedTimestamp.getAccessJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getAccessJavaTimeTest2_LPul1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessTime(new ZipLong(1L));
    Date expected = new Date(1000L);
    Date actual = x5455_ExtendedTimestamp.getAccessJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getAccessJavaTimeTest3_mUBs2() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessTime(new ZipLong(1588230400L));
    Date expected = new Date(1588230400000L);
    Date actual = x5455_ExtendedTimestamp.getAccessJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getAccessJavaTimeTest4_wpyS3() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessTime(new ZipLong(9223372036854775807L));
    Date expected = new Date(9223372036854L);
    Date actual = x5455_ExtendedTimestamp.getAccessJavaTime();
    assertEquals(expected.getTime(), actual.getTime());
}



@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTime_Abhe0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date();
    x5455_ExtendedTimestamp.setAccessJavaTime(d);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTimeWithNullDate_Kbar1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessJavaTime(null);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTimeWithInvalidDate2_QOpu3() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date(Long.MIN_VALUE);
    x5455_ExtendedTimestamp.setAccessJavaTime(d);
    assertEquals(x5455_ExtendedTimestamp.getAccessJavaTime(), d);
}

    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_lrdc0_1() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotNull(clonedObj);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_lrdc0_2() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotSame(obj, clonedObj);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_withParameter_HByu1_1() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotNull(clonedObj);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_withParameter_HByu1_2() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotSame(obj, clonedObj);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_withMultipleParameters_ZZED2_1() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotNull(clonedObj);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_withMultipleParameters_ZZED2_2() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotSame(obj, clonedObj);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_withMultipleParameters_qXAV3_1() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotNull(clonedObj);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_withMultipleParameters_qXAV3_2() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotSame(obj, clonedObj);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_withMultipleParameters_YglL4_1() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotNull(clonedObj);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_withMultipleParameters_YglL4_2() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotSame(obj, clonedObj);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_withMultipleParameters_mXjP5_1() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotNull(clonedObj);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_withMultipleParameters_mXjP5_2() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotSame(obj, clonedObj);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_withMultipleParameters_XrIm6_1() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotNull(clonedObj);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_withMultipleParameters_XrIm6_2() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotSame(obj, clonedObj);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_withMultipleParameters_dZqr7_1() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotNull(clonedObj);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_withMultipleParameters_dZqr7_2() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotSame(obj, clonedObj);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_withMultipleParameters_YydL8_1() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotNull(clonedObj);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_withMultipleParameters_YydL8_2() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clonedObj = obj.clone();
        assertNotSame(obj, clonedObj);}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTime_ElUV0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date();
    x5455_ExtendedTimestamp.setAccessJavaTime(d);
}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTimeWithNullDate_KRPX1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessJavaTime(null);
}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTimeWithFutureDate_nLYx2() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date(System.currentTimeMillis() + 86400000);
    x5455_ExtendedTimestamp.setAccessJavaTime(d);
}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTimeWithPastDate_ZWjK3() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date(System.currentTimeMillis() - 86400000);
    x5455_ExtendedTimestamp.setAccessJavaTime(d);
}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTimeWithMaxDate_iPTi4() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date(253402300799999L);
    x5455_ExtendedTimestamp.setAccessJavaTime(d);
    assertEquals(253402300799999L, x5455_ExtendedTimestamp.getAccessJavaTime().getTime());
}



@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTimeWithMinDate_LDcK5() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date(0L);
    x5455_ExtendedTimestamp.setAccessJavaTime(d);
}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTimeWithInvalidDate_WanD6() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date(-1L);
    x5455_ExtendedTimestamp.setAccessJavaTime(d);
}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTimeWithInvalidDate2_pWdX7() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date(253402300800000L);
    x5455_ExtendedTimestamp.setAccessJavaTime(d);
    assertEquals(253402300800L, x5455_ExtendedTimestamp.getAccessJavaTime().getTime());
}



@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTimeWithInvalidDate3_dQPO8() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date(253402300800001L);
    x5455_ExtendedTimestamp.setAccessJavaTime(d);
    assertEquals(253402300800001L, x5455_ExtendedTimestamp.getAccessJavaTime().getTime());
}



@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTimeWithInvalidDate4_zDQS9() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date(253402300800002L);
    x5455_ExtendedTimestamp.setAccessJavaTime(d);
    assertEquals(253402300800002L, x5455_ExtendedTimestamp.getAccessJavaTime().getTime());
}



@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTimeWithInvalidDate5_svmO10() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date(253402300800003L);
    x5455_ExtendedTimestamp.setAccessJavaTime(d);
    assertEquals(x5455_ExtendedTimestamp.getAccessJavaTime(), d);
}



@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTimeWithInvalidDate6_tVLr11() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date(253402300800004L);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getAccessJavaTimeTest5_fvjf4_OtCV0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessTime(new ZipLong(9223372036854775807L));
    Date expected = new Date(9223372036854L);
    Date actual = x5455_ExtendedTimestamp.getAccessJavaTime();
    assertEquals(expected, actual);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getAccessJavaTimeTest6_lQUc5_kQlV0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessTime(new ZipLong(9223372036854775807L));
    Date expected = new Date(9223372036854L);
    Date actual = x5455_ExtendedTimestamp.getAccessJavaTime();
    assertEquals(expected, actual);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getAccessJavaTimeTest7_LQEj6_IsBy0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessTime(new ZipLong(9223372036854775807L));
    Date expected = new Date(9223372036854L);
    Date actual = x5455_ExtendedTimestamp.getAccessJavaTime();
    assertEquals(expected, actual);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getAccessJavaTimeTest8_yDwt7_IIQb0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessTime(new ZipLong(9223372036854775807L));
    Date expected = new Date(9223372036854L);
    Date actual = x5455_ExtendedTimestamp.getAccessJavaTime();
    assertEquals(expected, actual);
}






@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSimilarObjectButDifferentModifyTime_deIx5_WyBc0() {
        X5455_ExtendedTimestamp timestamp1 = new X5455_ExtendedTimestamp();
        X5455_ExtendedTimestamp timestamp2 = new X5455_ExtendedTimestamp();
        timestamp1.setModifyJavaTime(new Date());
        timestamp2.setModifyJavaTime(new Date(System.currentTimeMillis()));
        assertFalse(!timestamp1.equals(timestamp2));
    }



@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit1_accessTimePresent_JYgg0_Eiov0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessJavaTime(new Date());
    assertTrue(x5455_ExtendedTimestamp.isBit1_accessTimePresent());
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSimilarObjectButDifferentAccessTime_Idau6_hGRL0() {
        X5455_ExtendedTimestamp timestamp1 = new X5455_ExtendedTimestamp();
        X5455_ExtendedTimestamp timestamp2 = new X5455_ExtendedTimestamp();
        timestamp1.setAccessJavaTime(new Date());
        timestamp2.setAccessJavaTime(new Date(System.currentTimeMillis()));
        assertFalse(!timestamp1.equals(timestamp2));
    }





@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSimilarObject_Pfuq3_SDfe0() {
        X5455_ExtendedTimestamp timestamp1 = new X5455_ExtendedTimestamp();
        X5455_ExtendedTimestamp timestamp2 = new X5455_ExtendedTimestamp();
        timestamp1.setFlags(timestamp2.getFlags());
        timestamp1.setModifyJavaTime(timestamp2.getModifyJavaTime());
        timestamp1.setAccessJavaTime(timestamp2.getAccessJavaTime());
        timestamp1.setCreateJavaTime(timestamp2.getCreateJavaTime());
        timestamp1.setModifyJavaTime(timestamp2.getModifyJavaTime());
        timestamp1.setAccessJavaTime(timestamp2.getAccessJavaTime());
        assertTrue(timestamp1.equals(timestamp2));
    }












@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTime_Ecke0_sRpD0() {
        X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
        Date d = new Date();
        x5455.setAccessJavaTime(d);
        assertEquals(x5455.getAccessJavaTime(), d);
    }




@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBit2_createTimePresent_Rjpr0_vBsS0() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp.setCreateJavaTime(new Date());
        assertTrue(x5455_ExtendedTimestamp.isBit2_createTimePresent());
    }














}