/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentConstantPool_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueInvalidCP_uuEA9() {
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
        try {
            segmentConstantPool.getValue(100, 123);
            fail("Expected Pack200Exception");
        } catch (Pack200Exception e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_1_VDQZ0() {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] primaryArray = new String[]{"a", "b", "c"};
        String[] secondaryArray = new String[]{"x", "y", "z"};
        String primaryCompareString = "b";
        String secondaryCompareRegex = "y";
        int desiredIndex = 0;
        int result = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_2_QrPA1() {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] primaryArray = new String[]{"a", "b", "c"};
        String[] secondaryArray = new String[]{"x", "y", "z"};
        String primaryCompareString = "c";
        String secondaryCompareRegex = "z";
        int desiredIndex = 1;
        int result = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_3_nGzE2() {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] primaryArray = new String[]{"a", "b", "c"};
        String[] secondaryArray = new String[]{"x", "y", "z"};
        String primaryCompareString = "a";
        String secondaryCompareRegex = "x";
        int desiredIndex = 2;
        int result = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_4_YyJm3() {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] primaryArray = new String[]{"a", "b", "c"};
        String[] secondaryArray = new String[]{"x", "y", "z"};
        String primaryCompareString = "b";
        String secondaryCompareRegex = "y";
        int desiredIndex = 1;
        int result = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_5_nyqD4() {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] primaryArray = new String[]{"a", "b", "c"};
        String[] secondaryArray = new String[]{"x", "y", "z"};
        String primaryCompareString = "c";
        String secondaryCompareRegex = "z";
        int desiredIndex = 0;
        int result = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
        assertEquals(2, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_mRWP0() {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] nameArray = new String[]{"name1", "name2", "name3"};
        String compareString = "name2";
        int desiredIndex = 2;
        int result = segmentConstantPool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
        assert result == 2;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndexRegexMatchAll_gtEP1() {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] nameArray = new String[]{"name1", "name2", "name3"};
        String compareString = "name.";
        int desiredIndex = 2;
        int result = segmentConstantPool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
        assert result == 2;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndexRegexMatchStart_zcKz2() {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] nameArray = new String[]{"name1", "name2", "name3"};
        String compareString = "^name";
        int desiredIndex = 2;
        int result = segmentConstantPool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
        assert result == 2;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndexRegexMatchEnd_EViG3() {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] nameArray = new String[]{"name1", "name2", "name3"};
        String compareString = "name$";
        int desiredIndex = 2;
        int result = segmentConstantPool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
        assert result == 2;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getInitMethodPoolEntry_1_EccD1_1() throws Exception {
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
        int cp = 1;
        long value = 1L;
        String desiredClassName = "class";
        ConstantPoolEntry result = segmentConstantPool.getInitMethodPoolEntry(cp, value, desiredClassName);
        assertEquals(1, result.getGlobalIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getInitMethodPoolEntry_1_EccD1_2() throws Exception {
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
        int cp = 1;
        long value = 1L;
        String desiredClassName = "class";
        ConstantPoolEntry result = segmentConstantPool.getInitMethodPoolEntry(cp, value, desiredClassName);
        assertEquals((byte) 1, result.getTag());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test1_wvrU0_tuGF0() throws Pack200Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
    int cp = 1;
    long value = 1;
    ConstantPoolEntry result = segmentConstantPool.getConstantPoolEntry(cp, value);
    assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test2_pYxE1_vBtD0() throws Pack200Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
    int cp = 2;
    long value = 2;
    ConstantPoolEntry result = segmentConstantPool.getConstantPoolEntry(cp, value);
    assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getInitMethodPoolEntry_0_Jbti0_hNiY0_1() throws Exception {
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
        int cp = 0;
        long value = 0L;
        String desiredClassName = "";
        ConstantPoolEntry result = segmentConstantPool.getInitMethodPoolEntry(cp, value, desiredClassName);
        assertEquals(0, result.getGlobalIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getInitMethodPoolEntry_0_Jbti0_hNiY0_2() throws Exception {
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
        int cp = 0;
        long value = 0L;
        String desiredClassName = "";
        ConstantPoolEntry result = segmentConstantPool.getInitMethodPoolEntry(cp, value, desiredClassName);
        assertEquals((byte) 0, result.getTag());}
}