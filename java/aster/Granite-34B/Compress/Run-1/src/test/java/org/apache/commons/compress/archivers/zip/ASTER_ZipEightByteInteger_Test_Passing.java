/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_bSVn0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        assertTrue(zipEightByteInteger.equals(zipEightByteInteger));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_JEBf1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        assertFalse(zipEightByteInteger.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentObject_lfdq2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        assertFalse(zipEightByteInteger.equals(""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameValue_zewd3() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        assertTrue(zipEightByteInteger1.equals(zipEightByteInteger2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentValue_QdIA4() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1});
        assertFalse(zipEightByteInteger1.equals(zipEightByteInteger2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentType_tsQh5() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        assertFalse(zipEightByteInteger.equals(new ZipEightByteInteger(new BigInteger("1"))));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_xhGU0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        assertEquals(BigInteger.ZERO, zipEightByteInteger.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue1_fMrX1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new BigInteger("10000000000000000000"));
        assertEquals(new BigInteger("10000000000000000000"), zipEightByteInteger.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue2_lqsM2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1000000000000000000L);
        assertEquals(new BigInteger("1000000000000000000"), zipEightByteInteger.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue3_Xisk3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        assertEquals(BigInteger.ZERO, zipEightByteInteger.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLongValueWithBytesAndOffset_HAKr0() {
        byte[] bytes = new byte[8];
        int offset = 0;
        long expected = 0L;
        long actual = ZipEightByteInteger.getLongValue(bytes, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLongValueWithBytes_WDtH3() {
        byte[] bytes = new byte[8];
        long expected = 0L;
        long actual = ZipEightByteInteger.getLongValue(bytes);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLongValueTest1_isLb0() {
        byte[] bytes = new byte[8];
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, 0);
        long expected = zipEightByteInteger.getLongValue(bytes);
        long actual = ZipEightByteInteger.getLongValue(bytes);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLongValueTest4_WeSM3() {
        byte[] bytes = new byte[8];
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
        long expected = zipEightByteInteger.getLongValue(bytes);
        long actual = ZipEightByteInteger.getLongValue(bytes);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_gghy0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] {0, 0, 0, 0, 0, 0, 0, 0}, 0);
        assertEquals("ZipEightByteInteger value: 0", zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNegativeValue_VCMt1() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] {0, 0, 0, 0, 0, 0, 0, -1}, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithValueOne_HULv3() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] {0, 0, 0, 0, 0, 0, 0, 1}, 0);
    assertEquals("ZipEightByteInteger value: 72057594037927936", zipEightByteInteger.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithValueMax_sRRW4() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF}, 0);
    assertEquals("ZipEightByteInteger value: 18446744073709551615", zipEightByteInteger.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBytes_SDpn0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        byte[] expected = new byte[]{0, 0, 0, 0, 0, 0, 0, 0};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBytes3_qtvi3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        byte[] expected = new byte[]{0, 0, 0, 0, 0, 0, 0, 0};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLongValueTest1_GOOd0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        assertEquals(0L, zipEightByteInteger.getLongValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLongValueTest2_yxkF1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new BigInteger("1"));
        assertEquals(1L, zipEightByteInteger.getLongValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLongValueTest3_SYMh2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1L);
        assertEquals(1L, zipEightByteInteger.getLongValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLongValueTest4_epsi3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        assertEquals(0L, zipEightByteInteger.getLongValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_QLPn0() {
        byte[] bytes = new byte[8];
        int offset = 0;
        BigInteger expected = BigInteger.valueOf(0);
        BigInteger actual = ZipEightByteInteger.getValue(bytes, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getValueTest1_LnFW0() {
    byte[] bytes = new byte[8];
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, 0);
    BigInteger expected = zipEightByteInteger.getValue();
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithLongValue_sWsV0() {
        byte[] expected = new byte[8];
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(expected, 0);
        byte[] actual = ZipEightByteInteger.getBytes(zipEightByteInteger.getValue());
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLongValueWithLongValue_QEjr2_FlDp0() {
        long value = 1234567890L;
        byte[] expected = ZipEightByteInteger.getBytes(value);
        byte[] actual = ZipEightByteInteger.getBytes(value);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLongValueTest3_GFXA2_sAuM0() {
        long value = 1234567890;
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
        byte[] expected = zipEightByteInteger.getBytes(value);
        byte[] actual = ZipEightByteInteger.getBytes(value);
        assertNotEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithByteArray_IIHV2_ilPm0() {
        byte[] bytes = new byte[] {0, 0, 0, 0, 0, 0, 45, -62};
        byte[] expected = new byte[] {0, 0, 0, 0, 0, 0, 45, -62};
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
        byte[] actual = zipEightByteInteger.getBytes();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithByteArrayAndOffset_rsyN3_EBWd0() {
        byte[] bytes = new byte[] {0, 0, 0, 0, 0, 0, 45, -62};
        int offset = 0;
        byte[] expected = new byte[] {0, 0, 0, 0, 0, 0, 45, -62};
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, offset);
        byte[] actual = ZipEightByteInteger.getBytes(zipEightByteInteger.getValue());
        assertArrayEquals(expected, actual);
    }
}