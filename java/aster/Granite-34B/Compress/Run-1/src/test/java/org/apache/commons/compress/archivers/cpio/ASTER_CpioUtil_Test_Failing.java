/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioUtil_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArray2longWithNumberLengthOdd_ooFG2() {
        byte[] number = {0, 0, 0};
        boolean swapHalfWord = false;
        long expected = 0;
        long actual = CpioUtil.byteArray2long(number, swapHalfWord);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArray2longWithNumberLengthOddAndSwapHalfWord_DMUv3() {
        byte[] number = {0, 0, 0};
        boolean swapHalfWord = true;
        long expected = 0;
        long actual = CpioUtil.byteArray2long(number, swapHalfWord);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLong2ByteArrayLengthEven_vNzW1() {
        long number = 1234567890;
        int length = 10;
        boolean swapHalfWord = false;
        byte[] expected = {0, 0, 0, 0, 0, 0, 49, 50, 51, 52};
        byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
        assert actual != null;
        assert actual.length == expected.length;
        for (int i = 0; i < expected.length; i++) {
            assert actual[i] == expected[i];
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLong2ByteArraySwapHalfWord_TBtN3() {
        long number = 1234567890;
        int length = 8;
        boolean swapHalfWord = true;
        byte[] expected = {0, 0, 0, 0, 49, 50, 51, 52};
        byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
        assert actual != null;
        assert actual.length == expected.length;
        for (int i = 0; i < expected.length; i++) {
            assert actual[i] == expected[i];
        }
    }
}