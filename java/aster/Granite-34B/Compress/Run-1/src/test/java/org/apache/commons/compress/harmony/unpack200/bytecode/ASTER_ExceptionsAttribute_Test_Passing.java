/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExceptionsAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNullArray_ZMZW1() {
    ExceptionsAttribute exceptionsAttribute = new ExceptionsAttribute(null);
    int result = exceptionsAttribute.hashCode();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAttributeName_WhenValidInput_SetsAttributeName_ICRH0() {
        CPUTF8 cpUTF8Value = new CPUTF8("ValidUTF8Value");
        ExceptionsAttribute.setAttributeName(cpUTF8Value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAttributeName_WhenNullInput_SetsAttributeNameToNull_VolM1() {
        CPUTF8 cpUTF8Value = null;
        ExceptionsAttribute.setAttributeName(cpUTF8Value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAttributeName_WhenEmptyInput_SetsAttributeNameToEmpty_ymQf2() {
        CPUTF8 cpUTF8Value = new CPUTF8("");
        ExceptionsAttribute.setAttributeName(cpUTF8Value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNestedClassFileEntriesTest_nCcs3_gdPo0() {
        final org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[] exceptions = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[2];
        ExceptionsAttribute exceptionsAttribute = new ExceptionsAttribute(exceptions);
        ClassFileEntry[] result = exceptionsAttribute.getNestedClassFileEntries();
        assertTrue(result.length > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getLength_1_FzPG0_ZsPD0() {
	org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[] exceptions = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[0];
	ExceptionsAttribute target = new ExceptionsAttribute(exceptions);
	int actual = target.getLength();
	int expected = 2 + 2 * exceptions.length;
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getLength_2_iejN1_XgrC0() {
	org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[] exceptions = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[1];
	ExceptionsAttribute target = new ExceptionsAttribute(exceptions);
	int actual = target.getLength();
	int expected = 2 + 2 * exceptions.length;
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getLength_3_BCGH2_whji0() {
	org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[] exceptions = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[2];
	ExceptionsAttribute target = new ExceptionsAttribute(exceptions);
	int actual = target.getLength();
	int expected = 2 + 2 * exceptions.length;
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getLength_4_FDqD3_tnzW0() {
	org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[] exceptions = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[3];
	ExceptionsAttribute target = new ExceptionsAttribute(exceptions);
	int actual = target.getLength();
	int expected = 2 + 2 * exceptions.length;
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getLength_5_Lvxe4_xzdg0() {
	org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[] exceptions = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[4];
	ExceptionsAttribute target = new ExceptionsAttribute(exceptions);
	int actual = target.getLength();
	int expected = 2 + 2 * exceptions.length;
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getLength_6_RRMk5_yhwV0() {
	org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[] exceptions = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[5];
	ExceptionsAttribute target = new ExceptionsAttribute(exceptions);
	int actual = target.getLength();
	int expected = 2 + 2 * exceptions.length;
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getLength_7_YrWu6_xYVN0() {
	org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[] exceptions = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[6];
	ExceptionsAttribute target = new ExceptionsAttribute(exceptions);
	int actual = target.getLength();
	int expected = 2 + 2 * exceptions.length;
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getLength_8_hdog7_vtZf0() {
	org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[] exceptions = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[7];
	ExceptionsAttribute target = new ExceptionsAttribute(exceptions);
	int actual = target.getLength();
	int expected = 2 + 2 * exceptions.length;
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getLength_9_oDkT8_vlDk0() {
	org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[] exceptions = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[8];
	ExceptionsAttribute target = new ExceptionsAttribute(exceptions);
	int actual = target.getLength();
	int expected = 2 + 2 * exceptions.length;
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getLength_10_YBXN9_PnMy0() {
	org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[] exceptions = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[9];
	ExceptionsAttribute target = new ExceptionsAttribute(exceptions);
	int actual = target.getLength();
	int expected = 2 + 2 * exceptions.length;
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getLength_12_XOrM11_WsZb0() {
	org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[] exceptions = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[11];
	ExceptionsAttribute target = new ExceptionsAttribute(exceptions);
	int actual = target.getLength();
	int expected = 2 + 2 * exceptions.length;
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getLength_13_VifX12_mzRS0() {
	org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[] exceptions = new org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[12];
	ExceptionsAttribute target = new ExceptionsAttribute(exceptions);
	int actual = target.getLength();
	int expected = 2 + 2 * exceptions.length;
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNullElementInArray_UhOX6_eQbu0_fid2() {
    org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[] exceptions = null;
    ExceptionsAttribute exceptionsAttribute = new ExceptionsAttribute(exceptions);
    int result = exceptionsAttribute.hashCode();
}
}