/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ConstantValueAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_FbnH0() {
        ConstantValueAttribute attribute = new ConstantValueAttribute(new ByteCode(1));
        assertTrue(attribute.equals(attribute));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_XfAc1() {
        ConstantValueAttribute attribute = new ConstantValueAttribute(new ByteCode(1));
        assertFalse(attribute.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClassObject_IOGN2() {
        ConstantValueAttribute attribute = new ConstantValueAttribute(new ByteCode(1));
        assertFalse(attribute.equals(""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithEqualObjects_gcYK3() {
        ConstantValueAttribute attribute1 = new ConstantValueAttribute(new ByteCode(1));
        ConstantValueAttribute attribute2 = new ConstantValueAttribute(new ByteCode(1));
        assertFalse(attribute1.equals(attribute2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNonEqualObjects_gNLi4() {
        ConstantValueAttribute attribute1 = new ConstantValueAttribute(new ByteCode(1));
        ConstantValueAttribute attribute2 = new ConstantValueAttribute(new ByteCode(2));
        assertFalse(attribute1.equals(attribute2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_pnTz0() {
		ByteCode bytecode = new ByteCode(1);
		ConstantValueAttribute attribute = new ConstantValueAttribute(bytecode);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithNestedByteCode_yNio1() {
		ByteCode bytecode = new ByteCode(1, new ClassFileEntry[0]);
		ConstantValueAttribute attribute = new ConstantValueAttribute(bytecode);
		assertEquals("Constant:aconst_null", attribute.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLengthTest_SRep0() {
    ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(new ByteCode(1));
    int result = constantValueAttribute.getLength();
    assertEquals(2, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLengthTest1_YVvh1() {
    ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(new ByteCode(1, new ClassFileEntry[0]));
    int result = constantValueAttribute.getLength();
    assertEquals(2, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void writeBodyTest_dEDE0() throws IOException {
        ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(new ByteCode(1));
        DataOutputStream dos = new DataOutputStream(System.out);
        constantValueAttribute.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void writeBodyTest_lineCoverage_YaPG1() throws IOException {
        ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(new ByteCode(1));
        DataOutputStream dos = new DataOutputStream(System.out);
        constantValueAttribute.writeBody(dos);
        constantValueAttribute.writeBody(dos);
        constantValueAttribute.writeBody(dos);
    }
}