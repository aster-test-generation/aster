/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_1_CIqs0() {
        final long[] flags = {0x10000};
        final int expected = 1;
        final int actual =SegmentUtils.countBit16(flags);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_2_mUCq1() {
        final long[] flags = {0x10000, 0x10000};
        final int expected = 2;
        final int actual =SegmentUtils.countBit16(flags);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_3_llQm2() {
        final long[] flags = {0x10000, 0x10000, 0x10000};
        final int expected = 3;
        final int actual =SegmentUtils.countBit16(flags);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCountInvokeInterfaceArgs_MXXn0() {
		String descriptor = "()V";
		int expected = 0;
		int actual =SegmentUtils.countInvokeInterfaceArgs(descriptor);
		assert actual == expected;
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCountInvokeInterfaceArgs2_zjer1() {
		String descriptor = "(I)V";
		int expected = 1;
		int actual =SegmentUtils.countInvokeInterfaceArgs(descriptor);
		assert actual == expected;
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCountInvokeInterfaceArgs3_hXSU2() {
		String descriptor = "(II)V";
		int expected = 2;
		int actual =SegmentUtils.countInvokeInterfaceArgs(descriptor);
		assert actual == expected;
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCountInvokeInterfaceArgs4_SKYI3() {
		String descriptor = "(III)V";
		int expected = 3;
		int actual =SegmentUtils.countInvokeInterfaceArgs(descriptor);
		assert actual == expected;
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCountInvokeInterfaceArgs5_aLYE4() {
		String descriptor = "(IIII)V";
		int expected = 4;
		int actual =SegmentUtils.countInvokeInterfaceArgs(descriptor);
		assert actual == expected;
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCountInvokeInterfaceArgs6_AgGi5() {
		String descriptor = "(IIIII)V";
		int expected = 5;
		int actual =SegmentUtils.countInvokeInterfaceArgs(descriptor);
		assert actual == expected;
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCountInvokeInterfaceArgs7_RZSW6() {
		String descriptor = "(IIIIII)V";
		int expected = 6;
		int actual =SegmentUtils.countInvokeInterfaceArgs(descriptor);
		assert actual == expected;
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCountInvokeInterfaceArgs8_mYpv7() {
		String descriptor = "(IIIIIII)V";
		int expected = 7;
		int actual =SegmentUtils.countInvokeInterfaceArgs(descriptor);
		assert actual == expected;
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCountInvokeInterfaceArgs9_QjVN8() {
		String descriptor = "(IIIIIIII)V";
		int expected = 8;
		int actual =SegmentUtils.countInvokeInterfaceArgs(descriptor);
		assert actual == expected;
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCountBit16_1_NOnl0() {
		long[][] flags = { { 1L << 16, 0L } };
		int expected = 1;
		int actual =SegmentUtils.countBit16(flags);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCountBit16_2_VVoi1() {
		long[][] flags = { { 1L << 16, 1L << 16 } };
		int expected = 2;
		int actual =SegmentUtils.countBit16(flags);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCountBit16_3_yORt2() {
		long[][] flags = { { 1L << 16, 0L }, { 1L << 16, 0L } };
		int expected = 2;
		int actual =SegmentUtils.countBit16(flags);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCountBit16_1_qJaq0_fid1() {
		int[] flags = {1, 2, 4, 8, 16};
		int expected = 1;
		int actual =SegmentUtils.countBit16(flags);
	}
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCountBit16_2_vBaE1_fid1() {
		int[] flags = {1, 2, 4, 8,06, 32};
		int expected =0;
		int actual =SegmentUtils.countBit16(flags);
		assertEquals(expected, actual);
	}
}