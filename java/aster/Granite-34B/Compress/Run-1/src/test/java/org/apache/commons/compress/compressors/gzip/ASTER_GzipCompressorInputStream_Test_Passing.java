/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithValidSignatureAndLength_eOai0() {
        byte[] signature = {31, -117};
        int length = 2;
        assertTrue(GzipCompressorInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithInvalidSignatureAndLength_fVgd1() {
        byte[] signature = {32, -118};
        int length = 2;
        assertTrue(!GzipCompressorInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithValidSignatureButInsufficientLength_OLTe2() {
        byte[] signature = {31, -117};
        int length = 1;
        assertTrue(!GzipCompressorInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithInvalidSignatureButSufficientLength_iEIb7() {
        byte[] signature = {32, -118};
        int length = 3;
        assertTrue(!GzipCompressorInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithEmptySignature_pCgj8() {
        byte[] signature = {};
        int length = 0;
        assertTrue(!GzipCompressorInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithNullSignature_NWGA9() {
        byte[] signature = null;
        int length = 0;
        assertTrue(!GzipCompressorInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_11_qgTo11() throws IOException {
    final byte[] b = new byte[100];
}
}