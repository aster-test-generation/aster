/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.Collections;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassConstantPool_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEntries_lpwC0() {
    ClassConstantPool classConstantPool = new ClassConstantPool();
    List<ClassFileEntry> expected = Collections.emptyList();
    List<ClassFileEntry> actual = classConstantPool.entries();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSortClassPoolWithNoEntries_gTNy0() {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        classConstantPool.sortClassPool();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddWithNullEntry_YfNY3() {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        ClassFileEntry entry = null;
        ClassFileEntry result = classConstantPool.add(entry);
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddWithNullEntryForLineCoverage_fcqj7() {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        ClassFileEntry entry = null;
        classConstantPool.add(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddWithNullEntryForBranchCoverage_mAfe11() {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        ClassFileEntry entry = null;
        classConstantPool.add(entry);
        assertEquals(null, classConstantPool.add(entry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddNestedEntries_DimW0() {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        classConstantPool.addNestedEntries();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_iCxx0() {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        assertEquals(0, classConstantPool.size());
    }
}