/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPUTF8_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_FEAu0() {
        CPUTF8 cputf8 = new CPUTF8("test");
        String result = cputf8.toString();
        assert result.equals("test");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullString_cVkp1() {
        CPUTF8 cputf8 = new CPUTF8(null);
        String result = cputf8.toString();
        assert result.equals("");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyString_MKek2() {
        CPUTF8 cputf8 = new CPUTF8("");
        String result = cputf8.toString();
        assert result.equals("");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithUnicodeString_qVUM3() {
        CPUTF8 cputf8 = new CPUTF8("Hello, ");
        String result = cputf8.toString();
        assert result.equals("Hello, ");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnderlyingStringWithMultipleConstructor_WHef3_frZd0() {
        CPUTF8 cputf8 = new CPUTF8("test1");
        CPUTF8 cputf81 = new CPUTF8("test2");
        String result = cputf8.toString();
        String result1 = cputf81.toString();
        assert result.equals("test1");
        assert result1.equals("test2");
    }
}