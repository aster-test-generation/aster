/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode.forms;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IMethodRefForm_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPoolID_GMZY0() {
    IMethodRefForm iMethodRefForm = new IMethodRefForm(0, "name", new int[]{0});
    int actual = iMethodRefForm.getPoolID();
    int expected = SegmentConstantPool.CP_IMETHOD;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPoolID_lineCoverage_MBqs2() {
    IMethodRefForm iMethodRefForm = new IMethodRefForm(0, "name", new int[]{0});
    iMethodRefForm.getPoolID();
    iMethodRefForm.getPoolID();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPoolID_branchCoverage_pdTR3() {
    IMethodRefForm iMethodRefForm = new IMethodRefForm(0, "name", new int[]{0});
    int actual = iMethodRefForm.getPoolID();
    if (actual == SegmentConstantPool.CP_IMETHOD) {
    } else {
    }
}
}