/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.z;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithInvalidSignatureAndLength_kKkx1() {
    byte[] signature = {1, 2, 3, 4};
    int length = 3;
    boolean result = ZCompressorInputStream.matches(signature, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithInvalidSignature_beQX2() {
    byte[] signature = {1, 2, 3};
    int length = 4;
    boolean result = ZCompressorInputStream.matches(signature, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithInvalidLength_Bshy3() {
    byte[] signature = {1, 2, 3, 4};
    int length = 0;
    boolean result = ZCompressorInputStream.matches(signature, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithValidSignatureAndLength_Icaw0_fid1() {
    byte[] signature = {1, 2, 3, 4};
    int length = 4;
    boolean result = ZCompressorInputStream.matches(signature, length);
    assertFalse(result);
}
}