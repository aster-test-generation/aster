/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SeekableInMemoryByteChannel_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray_NdJB0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        byte[] expected = new byte[10];
        assertEquals(expected, channel.array());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayWithNoArgument_ujJS1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        byte[] expected = new byte[0];
        assertEquals(expected, channel.array());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNegativeSize_epGk1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        channel.truncate(-5);
        assertEquals(0, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithSizeGreaterThanMaximum_tPTO2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        channel.truncate(1000);
        assertEquals(Integer.MAX_VALUE, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithSizeGreaterThanCurrent_pSLF5() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        channel.truncate(5);
        channel.truncate(10);
        assertEquals(10, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testWrite_VTpR0() {
		SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
		ByteBuffer buffer = ByteBuffer.allocate(10);
		buffer.put("Hello, World!".getBytes());
		buffer.flip();
		try {
			assertEquals(12, channel.write(buffer));
		} catch (IOException e) {
			e.printStackTrace();
			fail("Unexpected exception");
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testWriteWithClosedChannel_aqtz1() {
		SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
		channel.close();
		ByteBuffer buffer = ByteBuffer.allocate(10);
		buffer.put("Hello, World!".getBytes());
		buffer.flip();
		try {
			channel.write(buffer);
			fail("Expected ClosedChannelException");
		} catch (ClosedChannelException e) {
		} catch (IOException e) {
			e.printStackTrace();
			fail("Unexpected exception");
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testWriteWithInsufficientSpace_rmnk2() {
		SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
		ByteBuffer buffer = ByteBuffer.allocate(100);
		buffer.put("Hello, World!".getBytes());
		buffer.flip();
		try {
			channel.write(buffer);
			fail("Expected IOException");
		} catch (IOException e) {
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testWriteWithResize_uutZ3() {
		SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
		ByteBuffer buffer = ByteBuffer.allocate(100);
		buffer.put("Hello, World!".getBytes());
		buffer.flip();
		try {
			channel.write(buffer);
			assertTrue(channel.size() >= 110);
		} catch (IOException e) {
			e.printStackTrace();
			fail("Unexpected exception");
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithInsufficientSpace_rpMY1() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer buffer = ByteBuffer.allocate(15);
        buffer.put(new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15});
        buffer.flip();
        channel.write(buffer);
        assertEquals(10, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithNegativeSize_Yggz2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer buffer = ByteBuffer.allocate(-5);
        buffer.put(new byte[] {1, 2, 3, 4, 5});
        buffer.flip();
        IOException exception = assertThrows(IOException.class, () -> channel.write(buffer));
        assertEquals("Invalid buffer size: -5", exception.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithClosedChannel_bsUb3() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        channel.close();
        ByteBuffer buffer = ByteBuffer.allocate(5);
        buffer.put(new byte[] {1, 2, 3, 4, 5});
        buffer.flip();
        IOException exception = assertThrows(IOException.class, () -> channel.write(buffer));
        assertEquals("Channel is closed", exception.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWhenNoDataLeftAndBufferEmpty_OOLM2() throws Exception {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer buf = ByteBuffer.allocate(0);
        assertEquals(-1, channel.read(buf));
        assertEquals(0, buf.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testWrite_VTpR0_fid1() {
		SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
		ByteBuffer buffer = ByteBuffer.allocate(10);
		buffer.put("Hello, World!".getBytes());
		buffer.flip();
		try {
			assertEquals(10, channel.write(buffer));
		} catch (IOException e) {
			e.printStackTrace();
			fail("Unexpected exception");
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithInsufficientSpace_rpMY1_fid1() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer buffer = ByteBuffer.allocate(15);
        buffer.put(new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9,15, 11, 12, 13, 14, 15});
        buffer.flip();
        channel.write(buffer);
        assertEquals(10, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithNegativeSize_Yggz2_1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer buffer = ByteBuffer.allocate(-5);
        buffer.put(new byte[] {1, 2, 3, 4, 5});
        buffer.flip();
        IOException exception = assertThrows(IOException.class, () -> channel.write(buffer));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_UxXD0_2() throws Exception {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer buf = ByteBuffer.allocate(5);
        assertEquals(5, buf.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWhenNoDataLeft_TAsR1_2() throws Exception {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer buf = ByteBuffer.allocate(15);
        assertEquals(10, buf.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWhenNoDataLeftAndBufferEmpty_OOLM2_1() throws Exception {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer buf = ByteBuffer.allocate(0);
        assertEquals(-1, channel.read(buf));}
}