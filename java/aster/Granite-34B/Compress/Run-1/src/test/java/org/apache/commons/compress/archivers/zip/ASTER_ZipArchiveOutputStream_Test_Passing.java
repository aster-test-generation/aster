/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.channels.SeekableByteChannel;
import java.util.zip.Deflater;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveOutputStream_Test_Passing {
    private static final byte[] CFH_SIG = ZipLong.LFH_SIG.getBytes();
    private static final byte[] ZERO = new byte[ZipConstants.SHORT];
    private static final int CFH_FILENAME_OFFSET = ZipConstants.WORD * 4 + ZipConstants.SHORT * 4 + ZipConstants.SHORT;
    private static final int CFH_EXTRA_LENGTH_OFFSET = CFH_FILENAME_OFFSET - ZipConstants.SHORT;
    private static final int CFH_COMMENT_LENGTH_OFFSET = CFH_EXTRA_LENGTH_OFFSET - ZipConstants.SHORT;
    private static final int CFH_DISK_NUMBER_OFFSET = CFH_COMMENT_LENGTH_OFFSET - ZipConstants.SHORT;
    private static final int CFH_INTERNAL_ATTRIBUTES_OFFSET = CFH_DISK_NUMBER_OFFSET - ZipConstants.SHORT;
    private static final int CFH_EXTERNAL_ATTRIBUTES_OFFSET = CFH_INTERNAL_ATTRIBUTES_OFFSET + ZipConstants.SHORT;
    private static final int CFH_VERSION_MADE_BY_OFFSET = ZipConstants.WORD;
    private static final int CFH_VERSION_NEEDED_OFFSET = CFH_VERSION_MADE_BY_OFFSET + ZipConstants.WORD;
    private static final int CFH_GPB_OFFSET = CFH_VERSION_NEEDED_OFFSET + ZipConstants.WORD;
    private static final int CFH_METHOD_OFFSET = CFH_GPB_OFFSET + ZipConstants.SHORT;
    private static final int CFH_TIME_OFFSET = CFH_METHOD_OFFSET + ZipConstants.SHORT;
    private static final int CFH_CRC_OFFSET = CFH_TIME_OFFSET + ZipConstants.WORD;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithComment_ErrZ3() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setComment("This is a test archive");
    zos.putArchiveEntry(new ZipArchiveEntry("file1.txt"));
    zos.write("Hello, World!".getBytes());
    zos.closeArchiveEntry();
    zos.putArchiveEntry(new ZipArchiveEntry("file2.txt"));
    zos.write("This is a test file.".getBytes());
    zos.closeArchiveEntry();
    zos.finish();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_dXEO0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.putArchiveEntry(new ZipArchiveEntry("file1.txt"));
    zos.write("Hello, World!".getBytes());
    zos.closeArchiveEntry();
    zos.putArchiveEntry(new ZipArchiveEntry("file2.txt"));
    zos.write("This is a test file".getBytes());
    zos.closeArchiveEntry();
    zos.finish();
    assertTrue(zos.finished);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_zRuL0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.finish();
    zos.finish();
    zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    zos.write("Test content".getBytes());
    zos.finish();
    zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.finish();
    zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    zos.write("Test content".getBytes());
    zos.closeArchiveEntry();
    zos.finish();
    zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.putArchiveEntry(new ZipArchiveEntry("test1.txt"));
    zos.write("Test content 1".getBytes());
    zos.closeArchiveEntry();
    zos.putArchiveEntry(new ZipArchiveEntry("test2.txt"));
    zos.write("Test content 2".getBytes());
    zos.closeArchiveEntry();
    zos.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithSeekableByteChannel_AtQm1() throws IOException {
        SeekableByteChannel channel = null; // initialize SeekableByteChannel
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(channel);
        zos.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithOutputStream_IQtP4() throws IOException {
        OutputStream out = null; // initialize OutputStream
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(out);
        zos.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithSplitZip_wYdw1() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zos.putArchiveEntry(new ZipArchiveEntry("file1.txt"));
    zos.write("Hello, World!".getBytes());
    zos.closeArchiveEntry();
    zos.putArchiveEntry(new ZipArchiveEntry("file2.txt"));
    zos.write("This is a test file".getBytes());
    zos.closeArchiveEntry();
    zos.finish();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithFallbackToUTF8_VHKh3() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setFallbackToUTF8(true);
    zos.putArchiveEntry(new ZipArchiveEntry("file1.txt"));
    zos.write("Hello, World!".getBytes());
    zos.closeArchiveEntry();
    zos.putArchiveEntry(new ZipArchiveEntry("file2.txt"));
    zos.write("This is a test file".getBytes());
    zos.closeArchiveEntry();
    zos.finish();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_ffyr0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry zae = new ZipArchiveEntry("test.txt");
    zos.putArchiveEntry(zae);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutArchiveEntry_iIUS0() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
        zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_ccFS0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    ZipArchiveEntry entry = new ZipArchiveEntry("testfile.txt");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_yxzT0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithDeflateCompression_gvng1() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setMethod(ZipArchiveOutputStream.DEFLATED);
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithStoredCompression_DPnO2() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setMethod(ZipArchiveOutputStream.STORED);
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithZip64ModeAlways_UqOo3() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setUseZip64(Zip64Mode.Always);
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithZip64ModeAsNeeded_SuCz4() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setUseZip64(Zip64Mode.AsNeeded);
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithZip64ModeNever_AEyj5() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setUseZip64(Zip64Mode.Never);
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithComment_Jmfy6() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setComment("This is a test entry");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithExtraFields_Umxk7() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    Zip64ExtendedInformationExtraField z64 = new Zip64ExtendedInformationExtraField();
    entry.addExtraField(z64);
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithCompression_ecWW1() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setLevel(Deflater.DEFAULT_COMPRESSION);
    ZipArchiveEntry zae = new ZipArchiveEntry("test.txt");
    zos.putArchiveEntry(zae);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithDeflateCompression_QuDd2() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setLevel(Deflater.DEFAULT_COMPRESSION);
    ZipArchiveEntry zae = new ZipArchiveEntry("test.txt");
    zae.setMethod(ZipArchiveEntry.DEFLATED);
    zos.putArchiveEntry(zae);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithStoredCompression_CVuc3() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setLevel(Deflater.DEFAULT_COMPRESSION);
    ZipArchiveEntry zae = new ZipArchiveEntry("test.txt");
    zae.setMethod(ZipArchiveEntry.STORED);
    zos.putArchiveEntry(zae);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithZip64Mode_ljjk4() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setUseZip64(Zip64Mode.Always);
    ZipArchiveEntry zae = new ZipArchiveEntry("test.txt");
    zos.putArchiveEntry(zae);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithComment_IbFB5() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry zae = new ZipArchiveEntry("test.txt");
    zae.setComment("This is a test entry");
    zos.putArchiveEntry(zae);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_VeWf0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithCompression_lNSP1() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setMethod(ZipArchiveEntry.DEFLATED);
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithZip64ModeAlways_sGPT2() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setUseZip64(Zip64Mode.Always);
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithZip64ModeNever_VUng3() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setUseZip64(Zip64Mode.Never);
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithDeflateCompressionLevel_uMQR4() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setLevel(Deflater.DEFAULT_COMPRESSION);
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setMethod(ZipArchiveEntry.DEFLATED);
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithStoreCompressionMethod_ChRv5() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setMethod(ZipArchiveEntry.STORED);
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithComment_mzNZ7() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setComment("This is a test entry");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithExtraFields_wxoD8() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    Zip64ExtendedInformationExtraField z64 = new Zip64ExtendedInformationExtraField();
    entry.addExtraField(z64);
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithExternalAttributes_yVDg9() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setExternalAttributes(0x01020304L);
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_VBPc0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry zae = new ZipArchiveEntry("test.txt");
    zos.putArchiveEntry(zae);
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_cScy0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    ZipArchiveEntry zae = new ZipArchiveEntry("testfile");
    zos.putArchiveEntry(zae);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_VGcI0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    ZipArchiveEntry entry = new ZipArchiveEntry("testfile");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithCompression_aAbE1() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setMethod(ZipArchiveOutputStream.DEFLATED);
    ZipArchiveEntry entry = new ZipArchiveEntry("testfile");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithZip64ModeAlways_nBoL2() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setUseZip64(Zip64Mode.Always);
    ZipArchiveEntry entry = new ZipArchiveEntry("testfile");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithZip64ModeAsNeeded_rorP3() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setUseZip64(Zip64Mode.AsNeeded);
    ZipArchiveEntry entry = new ZipArchiveEntry("testfile");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithZip64ModeNever_lUEw4() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setUseZip64(Zip64Mode.Never);
    ZipArchiveEntry entry = new ZipArchiveEntry("testfile");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithMethodStore_goUk5() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setMethod(ZipArchiveOutputStream.STORED);
    ZipArchiveEntry entry = new ZipArchiveEntry("testfile");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithMethodDeflateAndLevel1_IbFq7() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setMethod(ZipArchiveOutputStream.DEFLATED);
    zos.setLevel(1);
    ZipArchiveEntry entry = new ZipArchiveEntry("testfile");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithMethodDeflateAndLevel9_Lvbk8() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setMethod(ZipArchiveOutputStream.DEFLATED);
    zos.setLevel(9);
    ZipArchiveEntry entry = new ZipArchiveEntry("testfile");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithMethodDeflateAndLevelDefault_loSp9() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setMethod(ZipArchiveOutputStream.DEFLATED);
    zos.setLevel(Deflater.DEFAULT_COMPRESSION);
    ZipArchiveEntry entry = new ZipArchiveEntry("testfile");
    zos.putArchiveEntry(entry);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_qsrp0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithEntry_nHNV1() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    zos.write("test".getBytes());
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithFinishedEntry_sEIm2() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    zos.write("test".getBytes());
    zos.finish();
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithEntryAndException_oYqe3() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    zos.write("test".getBytes());
    try {
        zos.closeArchiveEntry();
        fail("Expected IOException");
    } catch (IOException e) {
    }
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithFinishedEntryAndException_VxTS4() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    zos.write("test".getBytes());
    zos.finish();
    try {
        zos.closeArchiveEntry();
        fail("Expected IOException");
    } catch (IOException e) {
    }
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_rZsZ0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    ZipArchiveEntry zae = new ZipArchiveEntry("testfile.txt");
    zos.putArchiveEntry(zae);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithFile_UddD1() throws IOException {
    File file = new File("testfile.txt");
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(file);
    ZipArchiveEntry zae = new ZipArchiveEntry(file, "testfile.txt");
    zos.putArchiveEntry(zae);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithZipEntry_Paen3() throws IOException {
    java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("testfile.txt");
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    ZipArchiveEntry zae = new ZipArchiveEntry(ze);
    zos.putArchiveEntry(zae);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithGeneralPurposeBit_MSgp8() throws IOException {
    File file = new File("testfile.txt");
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(file);
    ZipArchiveEntry zae = new ZipArchiveEntry(file, "testfile.txt");
    zae.setGeneralPurposeBit(new GeneralPurposeBit());
    zos.putArchiveEntry(zae);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithUnixMode_FkJL9() throws IOException {
    File file = new File("testfile.txt");
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(file);
    ZipArchiveEntry zae = new ZipArchiveEntry(file, "testfile.txt");
    zae.setUnixMode(0755);
    zos.putArchiveEntry(zae);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithZip64ModeAlways_NkoI1() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setUseZip64(Zip64Mode.Always);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithZip64ModeAsNeeded_pINw2() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setUseZip64(Zip64Mode.AsNeeded);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithZip64ModeNever_CvEI3() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setUseZip64(Zip64Mode.Never);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_RYiW0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    ZipArchiveEntry zae = new ZipArchiveEntry("test.txt");
    zos.putArchiveEntry(zae);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithCompression_aHcw1() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setLevel(Deflater.DEFAULT_COMPRESSION);
    ZipArchiveEntry zae = new ZipArchiveEntry("test.txt");
    zos.putArchiveEntry(zae);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithStoreCompression_xzCJ3() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setLevel(Deflater.NO_COMPRESSION);
    ZipArchiveEntry zae = new ZipArchiveEntry("test.txt");
    zos.putArchiveEntry(zae);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithComment_uHxW7() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    ZipArchiveEntry zae = new ZipArchiveEntry("test.txt");
    zae.setComment("This is a test");
    zos.putArchiveEntry(zae);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntry_ayxO0() throws IOException {
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
        zos.closeArchiveEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntry_qYUl0() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipArchiveOutputStream.closeArchiveEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithMethodUnknown_iLQe6() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setMethod(99);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithDeflateMethod_diVG4() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setMethod(ZipArchiveOutputStream.DEFLATED);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithStoredMethod_LtQd5() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setMethod(ZipArchiveOutputStream.STORED);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithLastModFileTimeAndEntryTimeAndMethodAndCommentAndExtraFieldsAndDataDescriptorAndZip64ModeAndLevel_Zvbe15() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlushWithFile_UHSY1() throws IOException {
        File file = new File("test.zip");
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
        zipArchiveOutputStream.flush();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithEntry_mpIK1() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    zos.putArchiveEntry(entry);
    zos.write("test".getBytes());
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithEntryAndDataAndMethod_GfqK3() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setMethod(ZipArchiveEntry.DEFLATED);
    zos.putArchiveEntry(entry);
    zos.write("test".getBytes());
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithMethodDeflateAndLevel1_hezL5() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setMethod(ZipArchiveOutputStream.DEFLATED);
    zos.setLevel(1);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithMethodDeflateAndLevel9_NZxL6() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setMethod(ZipArchiveOutputStream.DEFLATED);
    zos.setLevel(9);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithMethodDeflateAndLevelDefault_JHTP7() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setMethod(ZipArchiveOutputStream.DEFLATED);
    zos.setLevel(Deflater.DEFAULT_COMPRESSION);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithMethodDeflateAndLevelBestSpeed_Knqx8() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setMethod(ZipArchiveOutputStream.DEFLATED);
    zos.setLevel(Deflater.BEST_SPEED);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithMethodDeflateAndLevelBestCompression_GnGS9() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setMethod(ZipArchiveOutputStream.DEFLATED);
    zos.setLevel(Deflater.BEST_COMPRESSION);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithMethodDeflateAndLevelNoCompression_SzRT10() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setMethod(ZipArchiveOutputStream.DEFLATED);
    zos.setLevel(Deflater.NO_COMPRESSION);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithMethodDeflateAndLevel0_dmKL11() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setMethod(ZipArchiveOutputStream.DEFLATED);
    zos.setLevel(0);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteLocalFileHeader_rYuq0() throws IOException {
        ZipArchiveEntry ze = new ZipArchiveEntry("test.txt");
        ze.setMethod(ZipArchiveEntry.DEFLATED);
        ze.setSize(1024);
        ze.setCompressedSize(512);
        ze.setCrc(0x12345678);
        ze.setUnixMode(0755);
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(System.out);
        zos.writeLocalFileHeader(ze);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_gDCE1() throws Exception {
        final ZipArchiveEntry original = new ZipArchiveEntry("test.txt");
        original.setComment("This is a test");
        original.setMethod(ZipArchiveEntry.DEFLATED);
        original.setUnixMode(0755);
        final ZipArchiveEntry cloned = (ZipArchiveEntry) original.clone();
        assertEquals(original.getName(), cloned.getName());
        assertEquals(original.getComment(), cloned.getComment());
        assertEquals(original.getMethod(), cloned.getMethod());
        assertEquals(original.getUnixMode(), cloned.getUnixMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteOutWithSeekableByteChannel_WUDe1() throws IOException {
        SeekableByteChannel channel = null; // Initialize SeekableByteChannel
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(channel);
        byte[] data = new byte[1024];
        zipArchiveOutputStream.writeOut(data);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteOutWithFileAndZipSplitSize_HyHb2() throws IOException {
        File file = new File("test.zip");
        long zipSplitSize = 1024;
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file, zipSplitSize);
        byte[] data = new byte[1024];
        zipArchiveOutputStream.writeOut(data);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteOutWithOutputStream_QliA4() throws IOException {
        OutputStream out = null; // Initialize OutputStream
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(out);
        byte[] data = new byte[1024];
        zipArchiveOutputStream.writeOut(data);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteOutWithFile_Szng5() throws IOException {
        File file = new File("test.zip");
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
        byte[] data = new byte[1024];
        zipArchiveOutputStream.writeOut(data);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLocalFileHeader_NFHV0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setMethod(ZipArchiveEntry.DEFLATED);
    zos.writeLocalFileHeader(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLocalFileHeaderWithExternalAttributes_fhOt5() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setMethod(ZipArchiveEntry.DEFLATED);
    entry.setExternalAttributes(123456L);
    zos.writeLocalFileHeader(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithByteArrayOffsetAndLength_RRMQ0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] b = new byte[10];
    zos.write(b, 0, 10);
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithByteArrayOffsetAndLengthAndEntryOpen_WZsV1() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    byte[] b = new byte[10];
    zos.write(b, 0, 10);
    zos.closeArchiveEntry();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeflate_KWRK0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.deflate();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteCentralFileHeader_UGRs0() throws IOException {
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(System.out);
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        zos.writeCentralFileHeader(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteCentralFileHeader_UNoR0() throws IOException {
        ZipArchiveEntry ze = new ZipArchiveEntry("test.txt");
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(System.out);
        zos.writeCentralFileHeader(ze);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getBytesWrittenTest1_PhLq0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    assertEquals(0, zipArchiveOutputStream.getBytesWritten());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddRawArchiveEntryWithEntryAndInputStreamAndNoInputStream_YLGY3() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    zos.addRawArchiveEntry(entry, null);
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddRawArchiveEntryWithEntryAndInputStreamAndDataDescriptorAndZip64Extra_oTPy3() throws IOException {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddRawArchiveEntryWithEntryAndInputStreamAndNoInputStream_KVwh4() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setSize(10);
    entry.setCompressedSize(5);
    entry.setCrc(123456L);
    try {
        zos.addRawArchiveEntry(entry, null);
        fail("Expected IOException");
    } catch (IOException e) {
    }
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_yEbI0() throws IOException {
	ZipArchiveOutputStream zOut = new ZipArchiveOutputStream(new File("test.zip"));
	zOut.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreambleWithNegativeOffset_IIUK2() throws IOException {
        ZipArchiveOutputStream stream = new ZipArchiveOutputStream(new File("test.zip"));
        byte[] preamble = new byte[10];
        try {
            stream.writePreamble(preamble, -1, 5);
        } catch (IndexOutOfBoundsException e) {
            assertEquals("Offset cannot be negative", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreambleWithNegativeLength_AqIq3() throws IOException {
        ZipArchiveOutputStream stream = new ZipArchiveOutputStream(new File("test.zip"));
        byte[] preamble = new byte[10];
        try {
            stream.writePreamble(preamble, 2, -5);
        } catch (IndexOutOfBoundsException e) {
            assertEquals("Length cannot be negative", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreambleWithInvalidOffsetAndLength_wMxP4() throws IOException {
        ZipArchiveOutputStream stream = new ZipArchiveOutputStream(new File("test.zip"));
        byte[] preamble = new byte[10];
        try {
            stream.writePreamble(preamble, 12, 5);
        } catch (IndexOutOfBoundsException e) {
            assertEquals("Offset + length cannot be greater than array size", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralDirectoryEnd_ADPq0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.writeCentralDirectoryEnd();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralDirectoryEndWithZip64ModeAlways_wvcl1() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setUseZip64(Zip64Mode.Always);
    zos.writeCentralDirectoryEnd();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralDirectoryEndWithZip64ModeNever_nJxK2() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setUseZip64(Zip64Mode.Never);
    zos.writeCentralDirectoryEnd();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralDirectoryEndWithSplitZip_ywoY1() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ZipSplitOutputStream(new File("test.zip"), 1024));
    zos.writeCentralDirectoryEnd();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralDirectoryEndWithComment_uqqk3() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setComment("This is a test comment");
    zos.writeCentralDirectoryEnd();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteZip64CentralDirectoryWhenUsingZip64ModeNever_ccdq0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setUseZip64(Zip64Mode.Never);
    zos.writeZip64CentralDirectory();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteZip64CentralDirectoryWhenUsingZip64ModeAlways_uTpk1() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setUseZip64(Zip64Mode.Always);
    zos.writeZip64CentralDirectory();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteZip64CentralDirectoryWhenUsingZip64ModeAsNeeded_bdxd2() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setUseZip64(Zip64Mode.AsNeeded);
    zos.writeZip64CentralDirectory();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteZip64CentralDirectoryWhenUsingZip64ModeNeverAndNotUsingZip64_jzBO9() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setUseZip64(Zip64Mode.Never);
    zos.setUseZip64(Zip64Mode.Never);
    zos.writeZip64CentralDirectory();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteZip64CentralDirectoryWhenUsingZip64ModeAlwaysAndNotUsingZip64_vpMA10() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.setUseZip64(Zip64Mode.Always);
    zos.setUseZip64(Zip64Mode.Never);
    zos.writeZip64CentralDirectory();
}
}