/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveStructSparse_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNegativeOffset_OJCt2() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(-10L, 0L);
        String expected = "TarArchiveStructSparse{offset=-10, numbytes=0}";
        assertEquals(expected, tarArchiveStructSparse.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNegativeNumbytes_Oxbp3() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0L, -20L);
        String expected = "TarArchiveStructSparse{offset=0, numbytes=-20}";
        assertEquals(expected, tarArchiveStructSparse.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithBothNegativeValues_eyWu4() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(-10L, -20L);
        String expected = "TarArchiveStructSparse{offset=-10, numbytes=-20}";
        assertEquals(expected, tarArchiveStructSparse.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffsetWithOffsetAsNegativeOne_NQHh2() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(-1L, 0L);
        long offset = tarArchiveStructSparse.getOffset();
        assert offset == -1L;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffsetWithOffsetAsMinLongValue_wLxD4() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(Long.MIN_VALUE, 0L);
        long offset = tarArchiveStructSparse.getOffset();
        assert offset == Long.MIN_VALUE;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumbytesWithNegativeOffset_wLiP2() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(-100L, 50L);
        long expected = 50L;
        long actual = tarArchiveStructSparse.getNumbytes();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumbytesWithNegativeNumbytes_ZGOE3() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(100L, -50L);
        long expected = 0L;
        long actual = tarArchiveStructSparse.getNumbytes();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumbytesWithMinOffsetAndNumbytes_rMVQ6() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(Long.MIN_VALUE, Long.MIN_VALUE);
        long expected = 0L;
        long actual = tarArchiveStructSparse.getNumbytes();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumbytesWithMaxOffsetAndNumbytes_JIDN5_fid2() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(Long.MAX_VALUE, Long.MAX_VALUE);
        long expected = 0L;
        long actual = tarArchiveStructSparse.getNumbytes();
        assertEquals(expected, actual);
    }
}