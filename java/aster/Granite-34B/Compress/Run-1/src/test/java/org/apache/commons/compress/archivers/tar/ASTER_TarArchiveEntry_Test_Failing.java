/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.nio.file.attribute.FileTime;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLinkTrue_GzJO0() {
        TarArchiveEntry entry = new TarArchiveEntry("name", (byte) 1);
        assertTrue(entry.isLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWhenFileExistsAndIsRegularFile_lWOr0() {
        TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
        assertTrue(entry.isFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastAccessTime_TopG0() {
        TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
        FileTime lastAccessTime = entry.getLastAccessTime();
        assertNotNull(lastAccessTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastAccessTimeWithName_JcZV6() {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt");
        FileTime lastAccessTime = entry.getLastAccessTime();
        assertNotNull(lastAccessTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastAccessTimeWithNameAndLinkFlag_IKLH7() {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt", TarArchiveEntry.LF_GNUTYPE_LONGNAME);
        FileTime lastAccessTime = entry.getLastAccessTime();
        assertNotNull(lastAccessTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastAccessTimeWithNameAndLinkFlagAndPreserveAbsolutePath_RtOm8() {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt", TarArchiveEntry.LF_GNUTYPE_LONGNAME, true);
        FileTime lastAccessTime = entry.getLastAccessTime();
        assertNotNull(lastAccessTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastAccessTimeWithNameAndPreserveAbsolutePath_qiir10() {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
        FileTime lastAccessTime = entry.getLastAccessTime();
        assertNotNull(lastAccessTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastAccessTimeWithFileAndFileName_LEQl13() {
        TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
        FileTime lastAccessTime = entry.getLastAccessTime();
        assertNotNull(lastAccessTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddPaxHeader_nguA1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[10]);
        tarArchiveEntry.addPaxHeader("name", "value");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddPaxHeaderWithNullName_DPPa2() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
    entry.addPaxHeader(null, "value");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_yjsX1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name");
        assertEquals(0, tarArchiveEntry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_DcxH5() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[10]);
        assertEquals(0, tarArchiveEntry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_ZRaQ6() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0);
        assertEquals(0, tarArchiveEntry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_QtoA7() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0, true);
        assertEquals(0, tarArchiveEntry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_Jora10() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
        assertEquals(0, tarArchiveEntry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUserName_IYlL0() {
		TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
		String userName = entry.getUserName();
		assertEquals("testuser", userName);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUserName_clAr1() {
		TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
		String userName = entry.getUserName();
		assertEquals("defaultuser", userName);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_ZRaQ6_fid1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte)33188);
        assertEquals(0, tarArchiveEntry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_QtoA7_fid1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte)33188, true);
        assertEquals(0, tarArchiveEntry.getMode());
    }
}