/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Objects;
import java.util.Scanner;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveStructSparse_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_reflexive_wlyQ0() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0L, 0L);
        assertTrue(tarArchiveStructSparse.equals(tarArchiveStructSparse));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_symmetric_JNOA1() {
        TarArchiveStructSparse tarArchiveStructSparse1 = new TarArchiveStructSparse(0L, 0L);
        TarArchiveStructSparse tarArchiveStructSparse2 = new TarArchiveStructSparse(0L, 0L);
        assertTrue(tarArchiveStructSparse1.equals(tarArchiveStructSparse2) && tarArchiveStructSparse2.equals(tarArchiveStructSparse1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_transitive_WNNO2() {
        TarArchiveStructSparse tarArchiveStructSparse1 = new TarArchiveStructSparse(0L, 0L);
        TarArchiveStructSparse tarArchiveStructSparse2 = new TarArchiveStructSparse(0L, 0L);
        TarArchiveStructSparse tarArchiveStructSparse3 = new TarArchiveStructSparse(0L, 0L);
        assertTrue(tarArchiveStructSparse1.equals(tarArchiveStructSparse2) && tarArchiveStructSparse2.equals(tarArchiveStructSparse3) && tarArchiveStructSparse3.equals(tarArchiveStructSparse1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_null_MkCT3() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0L, 0L);
        assertTrue(!tarArchiveStructSparse.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_notTarArchiveStructSparse_PTXl4() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0L, 0L);
        assertTrue(!tarArchiveStructSparse.equals(new Object()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_differentOffset_hJij5() {
        TarArchiveStructSparse tarArchiveStructSparse1 = new TarArchiveStructSparse(0L, 0L);
        TarArchiveStructSparse tarArchiveStructSparse2 = new TarArchiveStructSparse(1L, 0L);
        assertTrue(!tarArchiveStructSparse1.equals(tarArchiveStructSparse2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_differentNumbytes_DFAG6() {
        TarArchiveStructSparse tarArchiveStructSparse1 = new TarArchiveStructSparse(0L, 0L);
        TarArchiveStructSparse tarArchiveStructSparse2 = new TarArchiveStructSparse(0L, 1L);
        assertTrue(!tarArchiveStructSparse1.equals(tarArchiveStructSparse2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_JBOS0() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0L, 0L);
        String expected = "TarArchiveStructSparse{offset=0, numbytes=0}";
        assertEquals(expected, tarArchiveStructSparse.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOffsetAndNumbytes_zUtG1() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10L, 20L);
        String expected = "TarArchiveStructSparse{offset=10, numbytes=20}";
        assertEquals(expected, tarArchiveStructSparse.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_fDLJ0() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0, 0);
        assertEquals(tarArchiveStructSparse.hashCode(), Objects.hash(0, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithOffset_BBnr2() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(100, 0);
        assertNotEquals(tarArchiveStructSparse.hashCode(), Objects.hash(0, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNumBytes_NkMW3() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0, 100);
        assertNotEquals(tarArchiveStructSparse.hashCode(), Objects.hash(0, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithBothParameters_iqkS4_1() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(100, 100);
        assertNotEquals(tarArchiveStructSparse.hashCode(), Objects.hash(0, 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithBothParameters_iqkS4_2() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(100, 100);
        assertNotEquals(tarArchiveStructSparse.hashCode(), Objects.hash(100, 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithBothParameters_iqkS4_3() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(100, 100);
        assertNotEquals(tarArchiveStructSparse.hashCode(), Objects.hash(0, 100));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffset_FqWa0() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0L, 0L);
        long offset = tarArchiveStructSparse.getOffset();
        assert offset == 0L;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffsetWithOffsetAsOne_Qthi1() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(1L, 0L);
        long offset = tarArchiveStructSparse.getOffset();
        assert offset == 1L;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffsetWithOffsetAsMaxLongValue_dVWf3() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(Long.MAX_VALUE, 0L);
        long offset = tarArchiveStructSparse.getOffset();
        assert offset == Long.MAX_VALUE;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffsetWithOffsetAsRandomValue_QEUZ6() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(1234567890L, 0L);
        long offset = tarArchiveStructSparse.getOffset();
        assert offset == 1234567890L;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffsetWithOffsetAsUserInput_AaXu7() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the offset value: ");
        long offset = scanner.nextLong();
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(offset, 0L);
        long offset1 = tarArchiveStructSparse.getOffset();
        assert offset1 == offset;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffsetWithOffsetAsUserInputAndVerifyWithAssertTrue_dXrF8() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the offset value: ");
        long offset = scanner.nextLong();
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(offset, 0L);
        long offset1 = tarArchiveStructSparse.getOffset();
        assertTrue(offset1 == offset);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffsetWithOffsetAsUserInputAndVerifyWithAssertFalse_nHgI9() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the offset value: ");
        long offset = scanner.nextLong();
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(offset, 0L);
        long offset1 = tarArchiveStructSparse.getOffset();
        assertFalse(offset1 != offset);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumbytes_uKZB0() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0L, 0L);
        long expected = 0L;
        long actual = tarArchiveStructSparse.getNumbytes();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumbytesWithOffsetAndNumbytes_IweS1() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(100L, 50L);
        long expected = 50L;
        long actual = tarArchiveStructSparse.getNumbytes();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumbytesWithMaxOffsetAndNumbytes_JIDN5() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(Long.MAX_VALUE, Long.MAX_VALUE);
        long expected =9223372036854775807L;
        long actual = tarArchiveStructSparse.getNumbytes();
        assertEquals(expected, actual);
    }
}