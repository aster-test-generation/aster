/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import org.apache.commons.compress.archivers.ArchiveException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArjArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureNotMatching_DpCQ3() {
    byte[] signature = new byte[2];
    signature[0] = (byte) 0x00;
    signature[1] = (byte) 0x00;
    int length = 2;
    boolean result = ArjArchiveInputStream.matches(signature, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getNextEntry_NotNull_SMub1_vcfs0() throws IOException {
		ArjArchiveInputStream arjArchiveInputStream = null;
		try {
			arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
			arjArchiveInputStream.getNextEntry();
			assertNotNull(arjArchiveInputStream.getNextEntry());
		} catch (ArchiveException e) {
			e.printStackTrace();
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getNextEntry_LastEntry_Djxg2_JVAE0() throws IOException {
		ArjArchiveInputStream arjArchiveInputStream = null;
		try {
			arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
			arjArchiveInputStream.getNextEntry();
			arjArchiveInputStream.getNextEntry();
			assertNull(arjArchiveInputStream.getNextEntry());
		} catch (ArchiveException e) {
			e.printStackTrace();
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_lXcc0_fid2() {
    byte[] signature = new byte[2];
    signature[0] = (byte) 0xff;
    signature[1] = (byte) 0xff;
    int length = 2;
    boolean result = ArjArchiveInputStream.matches(signature, length);
}
}