/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.IOException;
import java.util.Collections;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Folder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream3_HPtq3() {
    Folder folder = new Folder();
    int index = 3;
    int result = folder.findBindPairForOutStream(index);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStreamWithBindPairsNotNullAndIndexFound_WfHM0() {
        Folder folder = new Folder();
        folder.bindPairs = new BindPair[5];
        folder.bindPairs[0] = new BindPair(0, 1);
        folder.bindPairs[1] = new BindPair(2, 3);
        folder.bindPairs[2] = new BindPair(4, 5);
        folder.bindPairs[3] = new BindPair(6, 7);
        folder.bindPairs[4] = new BindPair(8, 9);
        int result = folder.findBindPairForInStream(4);
        assertEquals(2, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStreamWithBindPairsNotNullAndIndexNotFound_egWA1() {
        Folder folder = new Folder();
        folder.bindPairs = new BindPair[5];
        folder.bindPairs[0] = new BindPair(0, 1);
        folder.bindPairs[1] = new BindPair(2, 3);
        folder.bindPairs[2] = new BindPair(4, 5);
        folder.bindPairs[3] = new BindPair(6, 7);
        folder.bindPairs[4] = new BindPair(8, 9);
        int result = folder.findBindPairForInStream(10);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStreamWithBindPairsNull_uOAE2() {
        Folder folder = new Folder();
        folder.bindPairs = null;
        int result = folder.findBindPairForInStream(4);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStreamWithBindPairsEmpty_PlVO3() {
        Folder folder = new Folder();
        folder.bindPairs = new BindPair[0];
        int result = folder.findBindPairForInStream(4);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getOrderedCoders_WithNullPackedStreams_ReturnsEmptyList_hWkm0() throws IOException {
    Folder folder = new Folder();
    folder.packedStreams = null;
    folder.coders = new Coder[1];
    Iterable<Coder> orderedCoders = folder.getOrderedCoders();
    assertEquals(Collections.emptyList(), orderedCoders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getOrderedCoders_WithEmptyPackedStreams_ReturnsEmptyList_ivfF1() throws IOException {
    Folder folder = new Folder();
    folder.packedStreams = new long[0];
    folder.coders = new Coder[1];
    Iterable<Coder> orderedCoders = folder.getOrderedCoders();
    assertEquals(Collections.emptyList(), orderedCoders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getOrderedCoders_WithNullCoders_ReturnsEmptyList_CaTe2() throws IOException {
    Folder folder = new Folder();
    folder.packedStreams = new long[1];
    folder.coders = null;
    Iterable<Coder> orderedCoders = folder.getOrderedCoders();
    assertEquals(Collections.emptyList(), orderedCoders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getOrderedCoders_WithEmptyCoders_ReturnsEmptyList_Llal3() throws IOException {
    Folder folder = new Folder();
    folder.packedStreams = new long[1];
    folder.coders = new Coder[0];
    Iterable<Coder> orderedCoders = folder.getOrderedCoders();
    assertEquals(Collections.emptyList(), orderedCoders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Withoutcoders_ReturnsExpectedString_Iije1_yFvQ0() {
        Folder folder = new Folder();
        folder.unpackSizes = new long[]{};
}
}