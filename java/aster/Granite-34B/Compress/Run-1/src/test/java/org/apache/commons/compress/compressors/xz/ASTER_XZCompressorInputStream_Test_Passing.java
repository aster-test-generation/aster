/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.xz;
import org.tukaani.xz.XZ;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XZCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureAndLength_vWOT0() {
    byte[] signature = new byte[XZ.HEADER_MAGIC.length];
    int length = XZ.HEADER_MAGIC.length;
    boolean result = XZCompressorInputStream.matches(signature, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureAndLengthWhenLengthIsLessThanHeaderMagicLength_lBbF1() {
    byte[] signature = new byte[XZ.HEADER_MAGIC.length];
    int length = XZ.HEADER_MAGIC.length - 1;
    boolean result = XZCompressorInputStream.matches(signature, length);
    assertFalse(result);
}
}