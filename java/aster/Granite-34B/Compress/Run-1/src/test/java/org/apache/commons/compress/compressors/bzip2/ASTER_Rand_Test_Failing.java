/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.bzip2;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Rand_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_1() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(0, Rand.rNums(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_2() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(1, Rand.rNums(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_3() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(2, Rand.rNums(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_4() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(3, Rand.rNums(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_5() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(4, Rand.rNums(4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_6() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(5, Rand.rNums(5));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_7() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(6, Rand.rNums(6));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_8() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(7, Rand.rNums(7));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_9() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(8, Rand.rNums(8));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_10() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(9, Rand.rNums(9));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_1_fid1() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i =619; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(0, Rand.rNums(0));}
@Test
@Timeout(value =720, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_2_fid1() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size7200
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(1, Rand.rNums(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_3_fid1() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(127, Rand.rNums(127));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_4_fid1() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(481, Rand.rNums(481));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_5_fid1() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(931, Rand.rNums(931));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_6_fid1() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(816, Rand.rNums(816));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_7_fid1() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(813, Rand.rNums(813));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_8_fid1() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(233, Rand.rNums(233));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_9_fid1() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(566, Rand.rNums(566));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRNums_IBgD0_10_fid1() {
        int[] RNUMS = new int[10]; // Assuming RNUMS is an array of size 10
        for (int i = 0; i < RNUMS.length; i++) {
            RNUMS[i] = i; // Assigning values to RNUMS array for testing
        }
        assertEquals(247, Rand.rNums(247));}
}