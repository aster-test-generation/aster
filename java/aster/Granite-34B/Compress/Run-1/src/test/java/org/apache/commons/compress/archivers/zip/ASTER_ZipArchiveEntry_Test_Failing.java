/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.util.Arrays;
import java.util.Date;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Date;
import java.util.Optional;
import java.util.Random;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveEntry_Test_Failing {
    private static final byte[] DATA = new byte[] { 1, 2, 3 };
    private static final byte[] DATA2 = new byte[] { 4, 5, 6 };
    private static final byte[] DATA3 = new byte[] { 7, 8, 9 };
    private static final byte[] DATA4 = new byte[] { 10, 11, 12 };
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUnixModeWithNegativeValue_WdeK1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setUnixMode(-1);
        assertEquals(0, entry.getUnixMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUnixModeWithInvalidValue_lrSl2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setUnixMode(1000);
        assertEquals(0, entry.getUnixMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveUnparseableExtraFieldDataWhenUnparseableExtraIsNullOrEmpty_zLWp0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.removeUnparseableExtraFieldData();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNull_ZjVx1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setCreationTime(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithZipException_fhPo4() throws ZipException {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test.txt"));
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        entry.setCreationTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeNull_DEig1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setCreationTime(null);
    assertNull(entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeInvalid_YOsf2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    try {
        entry.setCreationTime(FileTime.fromMillis(-1));
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidTime_LkPc2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(-1);
    entry.setCreationTime(time);
    assertNull(entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithNull_PiBV1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setCreationTime(null);
    assertEquals(null, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidFileTime_gVpT2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(-1);
    entry.setCreationTime(time);
    assertEquals(null, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithZipException_JRQY6() throws ZipException {
    ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test.txt"));
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidZipArchiveEntry_UGOG3() {
    ZipArchiveEntry entry = null;
    try {
        entry = new ZipArchiveEntry(new File("test.txt"), "test.txt");
    } catch (Exception e) {
        fail("Failed to create ZipArchiveEntry");
    }
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertEquals(null, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithNullZipArchiveEntry_vQua4() {
    ZipArchiveEntry entry = null;
    try {
        entry = new ZipArchiveEntry(new File("test.txt"), "test.txt");
    } catch (Exception e) {
        fail("Failed to create ZipArchiveEntry");
    }
    entry.setCreationTime(null);
    assertEquals(null, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidFileTimeZipArchiveEntry_xOfH5() {
    ZipArchiveEntry entry = null;
    try {
        entry = new ZipArchiveEntry(new File("test.txt"), "test.txt");
    } catch (Exception e) {
        fail("Failed to create ZipArchiveEntry");
    }
    FileTime time = FileTime.fromMillis(-1);
    entry.setCreationTime(time);
    assertEquals(null, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidZipArchiveEntryPath_DKWZ9() {
    ZipArchiveEntry entry = null;
    try {
        entry = new ZipArchiveEntry(new File("test.txt").toPath(), "test.txt");
    } catch (Exception e) {
        fail("Failed to create ZipArchiveEntry");
    }
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertEquals(null, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNamesWithNullName_uCKy1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setName(null, null);
        assertEquals(null, entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_GRHp0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] extraData = new byte[] { 0x01, 0x02, 0x03 };
        entry.setExtra(extraData);
        assertEquals(extraData, entry.getExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithNegativeTime_ialC3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(-1000);
    entry.setCreationTime(time);
    assertNull(entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidTime_LVeh7() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(0x80000000 * 1000L);
    entry.setCreationTime(time);
    assertNull(entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidTime2_TfQr8() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(0xFFFFFFFF * 1000L);
    entry.setCreationTime(time);
    assertNull(entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidTime5_KBDL11() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(0x7FFFFFFF * 1000L + 1);
    entry.setCreationTime(time);
    assertNull(entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidTime6_FARK12() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(0x7FFFFFFF * 1000L + 1000);
    entry.setCreationTime(time);
    assertNull(entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithNullArgument_HySg1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setExtra(null);
        assertEquals(null, entry.getExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithEmptyArrayArgument_UpLh2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] emptyArray = new byte[0];
        entry.setExtra(emptyArray);
        assertEquals(emptyArray, entry.getExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_BnFP0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    byte[] extra = new byte[10];
    entry.setExtra(extra);
    assertEquals(extra, entry.getExtra());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithNull_KEvP1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    entry.setExtra(null);
    assertEquals(null, entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_dynr0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        assertEquals("expectedExtra", entry.getExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithTimeFields_wcrj7() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        assertEquals("expectedTime", entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithNullExtraData_aYIf8() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setExtra(null);
    assertNull(entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguous_WhenStreamIsContiguous_ReturnsTrue_oNGz0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setMethod(ZipEntry.DEFLATED);
        assertTrue(entry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setName_NullName_SetsNameToNull_sVzw0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setName(null);
    Assertions.assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setName_NameWithBackslashesAndPlatformUnix_SetsNameWithForwardSlashes_EZts5() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setPlatform(ZipArchiveEntry.PLATFORM_UNIX);
    entry.setName("test\\test2");
    Assertions.assertEquals("test/test2", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldData_iKhk0() {
        UnparseableExtraFieldData unparseableExtra = new UnparseableExtraFieldData();
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertEquals(unparseableExtra, entry.getUnparseableExtraFieldData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_Fsgo1() {
        UnparseableExtraFieldData unparseableExtra = new UnparseableExtraFieldData();
        byte[] centralDirectoryData = unparseableExtra.getCentralDirectoryData();
        assertEquals(0, centralDirectoryData.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderId_QFMz2() {
        UnparseableExtraFieldData unparseableExtra = new UnparseableExtraFieldData();
        ZipShort headerId = unparseableExtra.getHeaderId();
        assertEquals(0, headerId.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataData_RePh3() {
        UnparseableExtraFieldData unparseableExtra = new UnparseableExtraFieldData();
        byte[] localFileDataData = unparseableExtra.getLocalFileDataData();
        assertEquals(0, localFileDataData.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalHeaderOffset_fyyc0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertEquals(0, entry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtraWithNullArgument_wNwc1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    byte[] extraData = null;
    entry.setCentralDirectoryExtra(extraData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithNullArgument_lxVq1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setCentralDirectoryExtra(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtraWithNullArgument_abbX1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    byte[] b = null;
    entry.setCentralDirectoryExtra(b);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetCentralDirectoryExtraWithNullArgument_vyiz1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setCentralDirectoryExtra(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithNullExtra_KHoc0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        assertDoesNotThrow(() -> entry.setExtra(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTimeWithNull_VBCk1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setLastModifiedTime(null);
        assertEquals(null, entry.getLastModifiedTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTimeWithInvalidFileTime_Apbd2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        FileTime fileTime = FileTime.fromMillis(-1);
        entry.setLastModifiedTime(fileTime);
        assertEquals(null, entry.getLastModifiedTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_entry_iLLi0_1() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry(new ZipArchiveEntry("test"));
        ZipArchiveEntry entry2 = new ZipArchiveEntry(new ZipArchiveEntry("test2"));
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_entry_iLLi0_2() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry(new ZipArchiveEntry("test"));
        ZipArchiveEntry entry2 = new ZipArchiveEntry(new ZipArchiveEntry("test2"));
        assertEquals("test", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_entry_iLLi0_3() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry(new ZipArchiveEntry("test"));
        ZipArchiveEntry entry2 = new ZipArchiveEntry(new ZipArchiveEntry("test2"));
        assertNotNull(entry2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_entry_iLLi0_4() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry(new ZipArchiveEntry("test"));
        ZipArchiveEntry entry2 = new ZipArchiveEntry(new ZipArchiveEntry("test2"));
        assertEquals("test2", entry2.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_path_SLuw4_1() throws Exception {
        Path path = new File("test").toPath();
        ZipArchiveEntry entry = new ZipArchiveEntry(path, "test");
        Path path2 = new File("test2").toPath();
        ZipArchiveEntry entry2 = new ZipArchiveEntry(path2, "test2");
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_path_SLuw4_2() throws Exception {
        Path path = new File("test").toPath();
        ZipArchiveEntry entry = new ZipArchiveEntry(path, "test");
        Path path2 = new File("test2").toPath();
        ZipArchiveEntry entry2 = new ZipArchiveEntry(path2, "test2");
        assertEquals("test", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_path_SLuw4_3() throws Exception {
        Path path = new File("test").toPath();
        ZipArchiveEntry entry = new ZipArchiveEntry(path, "test");
        Path path2 = new File("test2").toPath();
        ZipArchiveEntry entry2 = new ZipArchiveEntry(path2, "test2");
        assertNotNull(entry2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_path_SLuw4_4() throws Exception {
        Path path = new File("test").toPath();
        ZipArchiveEntry entry = new ZipArchiveEntry(path, "test");
        Path path2 = new File("test2").toPath();
        ZipArchiveEntry entry2 = new ZipArchiveEntry(path2, "test2");
        assertEquals("test2", entry2.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithNull_TSsX1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setLastModifiedTime(null);
    assertNull(entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithInvalidFileTime_vOPq2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(-1);
    entry.setLastModifiedTime(fileTime);
    assertNull(entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithInvalidFileTime_MwUf2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(-1);
    entry.setLastModifiedTime(fileTime);
    assertNotEquals(fileTime, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithFutureFileTime_OeuB3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() + 1000000);
    entry.setLastModifiedTime(fileTime);
    assertEquals(null, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithNegativeFileTime_PPAa4() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(-1000000);
    entry.setLastModifiedTime(fileTime);
    assertEquals(null, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithNullZipArchiveEntry_zyIK4() {
    ZipArchiveEntry entry = null;
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(fileTime);
    assertEquals(null, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithNullFileTime_XGFK1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    ZipEntry result = entry.setLastAccessTime(null);
    assertEquals(result, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithNull_Bwgf1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setLastAccessTime(null);
    assertEquals(null, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithInvalidFileTime_NBRf2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = FileTime.fromMillis(-1);
    entry.setLastAccessTime(fileTime);
    assertEquals(null, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithNullFileTime_yjdf1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setLastAccessTime(null);
    assertNull(entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithInvalidFileTime_qALG2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime invalidFileTime = FileTime.fromMillis(-1);
    entry.setLastAccessTime(invalidFileTime);
    assertNotEquals(invalidFileTime, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeNull_nwqQ1_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = null;
    ZipEntry result = entry.setLastAccessTime(fileTime);
    assertEquals(entry, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeNull_nwqQ1_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = null;
    ZipEntry result = entry.setLastAccessTime(fileTime);
    assertEquals(fileTime, entry.getLastAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithNullFileTime_ykAg1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setLastAccessTime(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithNullFileTime_LgWp1() throws IOException {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        entry.setLastAccessTime(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithNullFileTime_Phqn1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipEntry result = entry.setLastAccessTime(null);
        assertEquals(entry, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullName_CJcW1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        assertEquals(null, entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionMadeByWithEntry_KpTo4() throws ZipException {
        ZipArchiveEntry sourceEntry = new ZipArchiveEntry("source.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(sourceEntry);
        assertEquals(0, entry.getVersionMadeBy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataExtraWithExtraData_rnSV0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] extraData = new byte[] { 0x01, 0x02, 0x03 };
        entry.setExtra(extraData);
        byte[] result = entry.getLocalFileDataExtra();
        assertArrayEquals(extraData, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory_UeFK0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertTrue(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithNullFileTime_oxIH1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setLastAccessTime(null);
    Assertions.assertNull(entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithInvalidFileTime_DIMo2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime invalidFileTime = FileTime.fromMillis(-1);
    entry.setLastAccessTime(invalidFileTime);
    Assertions.assertNotEquals(invalidFileTime, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithFutureFileTime_JEdn3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime futureFileTime = FileTime.fromMillis(System.currentTimeMillis() + 10000);
    entry.setLastAccessTime(futureFileTime);
    Assertions.assertNotEquals(futureFileTime, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithNegativeFileTime_DSnX4() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime negativeFileTime = FileTime.fromMillis(-10000);
    entry.setLastAccessTime(negativeFileTime);
    Assertions.assertNotEquals(negativeFileTime, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithZeroFileTime_ReSz5() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime zeroFileTime = FileTime.fromMillis(0);
    entry.setLastAccessTime(zeroFileTime);
    Assertions.assertNotEquals(zeroFileTime, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithRandomFileTime_RBNr9() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime randomFileTime = FileTime.fromMillis(new Random().nextLong());
    entry.setLastAccessTime(randomFileTime);
    Assertions.assertEquals(randomFileTime, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeWithNullFileTime_rrjM1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setLastAccessTime(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNullFileTime_YxPS1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setTime(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRawNameWhenRawNameExists_taQl0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        byte[] rawName = entry.getRawName();
        assertEquals(Arrays.asList((byte) 'n', (byte) 'a', (byte) 'm', (byte) 'e'), Arrays.asList(rawName));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryExtra_Hihr0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] expected = new byte[0];
        byte[] actual = entry.getCentralDirectoryExtra();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryExtraTest_aTQk0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] expected = new byte[] {0x01, 0x02, 0x03};
        entry.setCentralDirectoryExtra(expected);
        byte[] actual = entry.getCentralDirectoryExtra();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveExtraFieldWithValidType_vMie1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipShort type = new ZipShort(1);
        entry.removeExtraField(type);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithDosTime_Vjyp0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setTime(ZipUtil.dosToJavaTime(123456789L));
    assertEquals(123456789L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithDosTime_mJqq0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setTime(ZipUtil.dosToJavaTime(1234567890));
        assertEquals(1234567890, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithNullEntry_hwqe2() {
        ZipArchiveEntry entry = null;
        entry.setTime(1234567890000L);
        assertNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithInvalidTime_OkyQ1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setTime(-1);
    assertEquals(0, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithDosTime_IIxW0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("testentry");
    entry.setTime(ZipUtil.dosToJavaTime(123456789));
    assertEquals(123456789, entry.getTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithDosTime_srWf0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setTime(ZipUtil.dosToJavaTime(123456789));
    assertEquals(123456789, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddExtraFieldWithNullArgument_Popt1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.addExtraField(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldsWithFile_PDgE2() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        ZipExtraField[] extraFields = entry.getExtraFields();
        assertEquals(0, extraFields.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAsFirstExtraFieldWithNullField_IqZi2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.addAsFirstExtraField(null);
        assertEquals(0, entry.getExtraFields().length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffset_PcSS0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        assertEquals(0, entry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffsetWithFile_tzNg3() {
        File file = new File("name");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "entryName");
        assertEquals(0, entry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithNegativeValue_gIsl1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setSize(-1L);
        assertEquals(-1L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeAfterSettingNegativeSize_tvdH4() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setSize(-512L);
        assertEquals(-512L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeAfterSettingSizeToMinLongValue_PQyu7() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setSize(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeAfterSettingSizeToHalfOfMinLongValue_odIX9() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setSize(Long.MIN_VALUE / 2);
        assertEquals(Long.MIN_VALUE / 2, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidTime3_psbu9_Inth0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(0x7FFFFFFFFFFFFFFFL);
    entry.setCreationTime(time);
    assertNull(entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequiredWithZipEntry_zMGB2_yasm0() {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        try {
            ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
            assertEquals(0, entry.getVersionRequired());
        } catch (ZipException e) {
            fail("Exception should not be thrown");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternalAttributesWithZipEntry_utnO3_iSsN0() throws ZipException {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        assertEquals(0, entry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithZipEntry_kNYQ1_kWWA0() throws ZipException {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        zipEntry.setTime(System.currentTimeMillis());
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        assertEquals(new Date(zipEntry.getTime()), entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInternalAttributesWithZipEntry_MWlr3_IgkJ0() {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        try {
            ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
            int internalAttributes = entry.getInternalAttributes();
            assertTrue(internalAttributes >= 0);
        } catch (ZipException e) {
            fail("Exception not expected");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInternalAttributesWithEntry_knGE4_Dkwx0() throws ZipException {
        ZipArchiveEntry originalEntry = new ZipArchiveEntry("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(originalEntry);
        int internalAttributes = entry.getInternalAttributes();
        assertTrue(internalAttributes >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlagWithZipEntry_MJUU3_KZxS0() throws ZipException {
    java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("name");
    ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
    int actual = entry.getRawFlag();
    int expected = 0; // Replace with the expected value
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlagWithEntry_wXKi4_AkdT0() throws ZipException {
    ZipArchiveEntry originalEntry = new ZipArchiveEntry("name");
    ZipArchiveEntry entry = new ZipArchiveEntry(originalEntry);
    int actual = entry.getRawFlag();
    int expected = 0; // Replace with the expected value
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentWithZipEntry_eoJz3_nIUR0() throws ZipException {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("entryName");
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        int alignment = entry.getAlignment();
        assertEquals(0, alignment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionMadeByWithZipEntry_Oddi3_gstC0() throws ZipException {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        assertEquals(0, entry.getVersionMadeBy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDiskNumberStartWithZipEntry_jkfA4_goYW0() {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        try {
            ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
            assertEquals(0, entry.getDiskNumberStart());
        } catch (ZipException e) {
            fail("Exception not expected");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldsWithZipEntry_kUWz1_iMna0() throws ZipException {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        ZipExtraField[] extraFields = entry.getExtraFields();
        assertEquals(0, extraFields.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_BnFP0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    byte[] extra = new byte[10];
    entry.setExtra(extra);
    assertNotEquals(null, entry.getExtra());
    assertEquals(extra, entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_entry_iLLi0() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry(new ZipArchiveEntry("test"));
        assertNotNull(entry);
        assertEquals("test", entry.getName());
        ZipArchiveEntry entry2 = new ZipArchiveEntry(new ZipArchiveEntry("test2"));
        assertNotNull(entry2);
        assertEquals("test2", entry2.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_path_SLuw4() throws Exception {
        Path path = new File("test").toPath();
        ZipArchiveEntry entry = new ZipArchiveEntry(path, "test");
        assertNotNull(entry);
        assertEquals("test", entry.getName());
        Path path2 = new File("test2").toPath();
        ZipArchiveEntry entry2 = new ZipArchiveEntry(path2, "test2");
        assertNotNull(entry2);
        assertEquals("test2", entry2.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTimeNull_nwqQ1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime fileTime = null;
    ZipEntry result = entry.setLastAccessTime(fileTime);
    assertEquals(entry, result);
    assertEquals(fileTime, entry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithDosTime_IIxW0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("testentry");
    entry.setTime(ZipUtil.dosToJavaTime(123456789));
    assertEquals(123456789, entry.getTime());
    assertFalse(entry.isUnixSymlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeNull_DEig1_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setCreationTime(null);
    assertEquals(entry.getCreationTime(), null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidZipArchiveEntryPath_DKWZ9_fid2() {
    ZipArchiveEntry entry = null;
    try {
        entry = new ZipArchiveEntry(new File("test.txt").toPath(), "test.txt");
    } catch (Exception e) {
        fail("Failed to create ZipArchiveEntry");
    }
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithNull_KEvP1_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    entry.setExtra(null);
    byte[] expected = null;
    assertArrayEquals(expected, entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithTimeFields_wcrj7_fid2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        assertEquals("-1", entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithNullExtraData_aYIf8_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setExtra(null);
    byte[] extra = entry.getExtra();
    if (extra == null) {
        assertNull(extra);
    } else {
        fail("extra should be null");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithNull_jSsK1_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    entry.setExtra(null);
    byte[] expected = null;
    byte[] actual = entry.getExtra();
    assertNotEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setName_NameWithBackslashesAndPlatformUnix_SetsNameWithForwardSlashes_EZts5_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setPlatform(ZipArchiveEntry.PLATFORM_UNIX);
    entry.setName("test\\test2");
    Assertions.assertEquals("test\test2", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldData_iKhk0_fid2() {
        UnparseableExtraFieldData unparseableExtra = new UnparseableExtraFieldData();
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    assertNull(unparseableExtra);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtraWithNullArgument_wNwc1_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    byte[] extraData = null;
    entry.setCentralDirectoryExtra(extraData);
    assertEquals(extraData, entry.getCentralDirectoryExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtraWithNullArgument_abbX1_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    byte[] b = null;
    entry.setCentralDirectoryExtra(b);
    // Add assertion here
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithNullFileTime_kVkf1_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setLastModifiedTime(null);
    assertEquals(FileTime.fromMillis(0), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithNullZipArchiveEntry_zyIK4_fid2() {
    ZipArchiveEntry entry = null;
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(fileTime);
    assertEquals(fileTime, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithNull_uYsQ1_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setLastModifiedTime(null);
    assertEquals(Optional.empty(), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithDosTime_Vjyp0_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setTime(ZipUtil.dosToJavaTime(436171242000L));
    assertEquals(436171242000L, entry.getTime());
}
}