/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import java.io.File;
import java.util.Date;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.Objects;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId_dYKk0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100);
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupIdWithUserIdAndGroupId_cnAK1() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100, 1000, 1000, 0644, System.currentTimeMillis());
        assertEquals(1000, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupIdWithFileAndEntryName_pExC2() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("input.txt"), "entryName");
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_RgEF0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 1000);
        Date date = entry.getLastModifiedDate();
        assertEquals(new Date(1000 * entry.getLastModified()), date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithFileInput_uxKT2() {
        File file = new File("input.txt");
        ArArchiveEntry entry = new ArArchiveEntry(file, "entryName");
        Date date = entry.getLastModifiedDate();
        assertEquals(new Date(file.lastModified()), date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_IDXH0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100);
        long size = entry.getSize();
        assert size == 100;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithFile_bywV1() {
        File file = new File("input.txt");
        ArArchiveEntry entry = new ArArchiveEntry(file, "entryName");
        long size = entry.getSize();
        assert size == file.length();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithConstructor_DRIG3() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100, 1, 1, 755, System.currentTimeMillis());
        long size = entry.getSize();
        assert size == 100;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_Hfwe0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100, 1, 2, 3, 4);
        assertEquals(1, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserIdWithFileInput_rBAG1() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("input"), "entryName");
        assertEquals(0, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_FzWG0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100);
        assertEquals(Objects.hash("name"), entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithFile_nXgp2() {
        File file = new File("file.txt");
        ArArchiveEntry entry = new ArArchiveEntry(file, "entryName");
        assertEquals(Objects.hash("entryName"), entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameTest_xyKe0() {
        ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 100L);
        assertEquals("name", arArchiveEntry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameTestWithFile_kFpj2() {
        File file = new File("inputFile");
        ArArchiveEntry arArchiveEntry = new ArArchiveEntry(file, "entryName");
        assertEquals("entryName", arArchiveEntry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameTestWithAllParams_Shhs3() {
        ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 100L, 1, 2, 3, 4L);
        assertEquals("name", arArchiveEntry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_yNED0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100);
        assertEquals(100, entry.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithFile_oQNJ2() {
        File file = new File("file.txt");
        ArArchiveEntry entry = new ArArchiveEntry(file, "entryName");
        assertEquals(file.length(), entry.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithAllParams_BrCf3() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100, 1000, 1000, 0644, System.currentTimeMillis());
        assertEquals(100, entry.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModeWithConstructor_SPYr3() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100, 1, 1, 0, System.currentTimeMillis());
        assertEquals(0, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModeWithFile_eafQ1_fid1() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("input.txt"), "entryName");
        assertEquals(33188, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSimilarObject_IcIb3_llbP0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10);
        ArArchiveEntry other = new ArArchiveEntry("name", 10);
        boolean result = entry.equals(other);
        org.junit.jupiter.api.Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentName_RNrX4_NFQC0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10);
        ArArchiveEntry other = new ArArchiveEntry("other", 10);
        boolean result = entry.equals(other);
        org.junit.jupiter.api.Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentLength_WaHt5_XeLw0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10);
        ArArchiveEntry other = new ArArchiveEntry("name", 20);
        boolean result = entry.equals(other);
        org.junit.jupiter.api.Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullName_PHIi6_JMFT0() {
        ArArchiveEntry entry = new ArArchiveEntry(null, 10);
        ArArchiveEntry other = new ArArchiveEntry(null, 10);
        boolean result = entry.equals(other);
        org.junit.jupiter.api.Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNonNullName_eQeQ7_yQCt0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10);
        ArArchiveEntry other = new ArArchiveEntry(null, 10);
        boolean result = entry.equals(other);
        org.junit.jupiter.api.Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullNameAndNonNullOtherName_nfZK9_mPCb0() {
        ArArchiveEntry entry = new ArArchiveEntry(null, 10);
        ArArchiveEntry other = new ArArchiveEntry("name", 10);
        boolean result = entry.equals(other);
        org.junit.jupiter.api.Assertions.assertFalse(result);
    }
}