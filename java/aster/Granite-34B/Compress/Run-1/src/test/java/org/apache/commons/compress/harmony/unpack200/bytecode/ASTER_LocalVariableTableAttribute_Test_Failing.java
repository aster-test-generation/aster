/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTableAttribute_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenumber_LEvV0() throws Pack200Exception {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(10, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[3], new CPUTF8[3], new int[]{7, 8, 9});
        List<Integer> byteCodeOffsets = new ArrayList<>();
        byteCodeOffsets.add(10);
        byteCodeOffsets.add(20);
        byteCodeOffsets.add(30);
        attribute.renumber(byteCodeOffsets);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenumberWithEmptyList_XOnK1() throws Pack200Exception {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(10, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[3], new CPUTF8[3], new int[]{7, 8, 9});
        List<Integer> byteCodeOffsets = new ArrayList<>();
        attribute.renumber(byteCodeOffsets);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenumberWithNullList_FpSM2() throws Pack200Exception {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(10, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[3], new CPUTF8[3], new int[]{7, 8, 9});
        attribute.renumber(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBody_bczg0() throws IOException {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(10, new int[]{1, 2}, new int[]{3, 4}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2")}, new int[]{5, 6});
        DataOutputStream dos = new DataOutputStream(System.out);
        attribute.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithEmptyArray_EgpQ1() {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(1, new int[]{}, new int[]{}, new CPUTF8[]{}, new CPUTF8[]{}, new int[]{});
        ClassFileEntry[] entries = attribute.getNestedClassFileEntries();
        assertEquals(1, entries.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithNullArray_lwHx2() {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(1, null, null, null, null, null);
        ClassFileEntry[] entries = attribute.getNestedClassFileEntries();
        assertEquals(1, entries.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithEmptyArray_EgpQ1_fid1() {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(0, new int[]{}, new int[]{}, new CPUTF8[]{}, new CPUTF8[]{}, new int[]{});
        ClassFileEntry[] entries = attribute.getNestedClassFileEntries();
        assertEquals(0, entries.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithNullArray_lwHx2_fid1() {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(0, null, null, null, null, null);
        ClassFileEntry[] entries = attribute.getNestedClassFileEntries();
        assertEquals(0, entries.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithNegativeLength_wtxJ3_fid1() {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(-1, new int[]{}, new int[]{}, new CPUTF8[]{}, new CPUTF8[]{}, new int[]{});
        ClassFileEntry[] entries = attribute.getNestedClassFileEntries();
        assertEquals(0, entries.length);
    }
}