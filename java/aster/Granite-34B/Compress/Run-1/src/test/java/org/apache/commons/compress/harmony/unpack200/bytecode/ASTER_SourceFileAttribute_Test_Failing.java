/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SourceFileAttribute_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_symmetric_Opfm1() {
    SourceFileAttribute attribute1 = new SourceFileAttribute(new CPUTF8("name1"));
    SourceFileAttribute attribute2 = new SourceFileAttribute(new CPUTF8("name2"));
    assertEquals(attribute1, attribute2);
    assertEquals(attribute2, attribute1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_transitive_ayPd2() {
    SourceFileAttribute attribute1 = new SourceFileAttribute(new CPUTF8("name1"));
    SourceFileAttribute attribute2 = new SourceFileAttribute(new CPUTF8("name2"));
    SourceFileAttribute attribute3 = new SourceFileAttribute(new CPUTF8("name3"));
    assertEquals(attribute1, attribute2);
    assertEquals(attribute2, attribute3);
    assertEquals(attribute1, attribute3);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_symmetric_Opfm1_1() {
    SourceFileAttribute attribute1 = new SourceFileAttribute(new CPUTF8("name1"));
    SourceFileAttribute attribute2 = new SourceFileAttribute(new CPUTF8("name2"));
    assertEquals(attribute1, attribute2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_symmetric_Opfm1_2() {
    SourceFileAttribute attribute1 = new SourceFileAttribute(new CPUTF8("name1"));
    SourceFileAttribute attribute2 = new SourceFileAttribute(new CPUTF8("name2"));
    assertEquals(attribute2, attribute1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_transitive_ayPd2_1() {
    SourceFileAttribute attribute1 = new SourceFileAttribute(new CPUTF8("name1"));
    SourceFileAttribute attribute2 = new SourceFileAttribute(new CPUTF8("name2"));
    SourceFileAttribute attribute3 = new SourceFileAttribute(new CPUTF8("name3"));
    assertEquals(attribute1, attribute2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_transitive_ayPd2_2() {
    SourceFileAttribute attribute1 = new SourceFileAttribute(new CPUTF8("name1"));
    SourceFileAttribute attribute2 = new SourceFileAttribute(new CPUTF8("name2"));
    SourceFileAttribute attribute3 = new SourceFileAttribute(new CPUTF8("name3"));
    assertEquals(attribute2, attribute3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_transitive_ayPd2_3() {
    SourceFileAttribute attribute1 = new SourceFileAttribute(new CPUTF8("name1"));
    SourceFileAttribute attribute2 = new SourceFileAttribute(new CPUTF8("name2"));
    SourceFileAttribute attribute3 = new SourceFileAttribute(new CPUTF8("name3"));
    assertEquals(attribute1, attribute3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_DDJf0_fPHN0() {
        CPUTF8 utf8 = new CPUTF8("utf8", 0);
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(utf8);
        ClassConstantPool pool = new ClassConstantPool();
        sourceFileAttribute.resolve(pool);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_VFet0_KHsO0() {
        CPUTF8 name = new CPUTF8("name");
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
        int actual = sourceFileAttribute.hashCode();
        int expected = 31 + (name == null ? 0 : name.hashCode());
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithEmptyName_XTCx2_FTJy0_fid2() {
    CPUTF8 name = new CPUTF8("", 0);
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    String actual = sourceFileAttribute.toString();
    String expected = "SourceFile: ";
    assertEquals(expected, actual);
}
}