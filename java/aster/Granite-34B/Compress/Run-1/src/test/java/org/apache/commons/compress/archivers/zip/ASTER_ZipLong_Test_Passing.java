/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipLong_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong_BRDq0_1() {
        byte[] buf = new byte[4];
        ZipLong.putLong(0x12345678, buf, 0);
        assertEquals(0x78, buf[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong_BRDq0_2() {
        byte[] buf = new byte[4];
        ZipLong.putLong(0x12345678, buf, 0);
        assertEquals(0x56, buf[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong_BRDq0_3() {
        byte[] buf = new byte[4];
        ZipLong.putLong(0x12345678, buf, 0);
        assertEquals(0x34, buf[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong_BRDq0_4() {
        byte[] buf = new byte[4];
        ZipLong.putLong(0x12345678, buf, 0);
        assertEquals(0x12, buf[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLongCoverage_Uymi1() {
        ZipLong zipLong = new ZipLong(0x12345678);
        zipLong.putLong(0x12345678, new byte[4], 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameObject_WdTl0() {
    ZipLong zipLong = new ZipLong(10);
    assertTrue(zipLong.equals(zipLong));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNullObject_NqVf1() {
    ZipLong zipLong = new ZipLong(10);
    assertFalse(zipLong.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSimilarObject_UYRu2() {
    ZipLong zipLong1 = new ZipLong(10);
    ZipLong zipLong2 = new ZipLong(10);
    assertTrue(zipLong1.equals(zipLong2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest1_JEPj0() {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        assertEquals(0, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest2_sZiB1() {
        ZipLong zipLong = new ZipLong(0);
        assertEquals(0, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest3_KeGt2() {
        ZipLong zipLong = new ZipLong(0L);
        assertEquals(0, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest4_JCzG3() {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0});
        assertEquals(0, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_iykc1() {
        ZipLong zipLong = new ZipLong(100);
        assertEquals("ZipLong value: 100", zipLong.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_nkjf2() {
        ZipLong zipLong = new ZipLong(1000000000L);
        assertEquals("ZipLong value: 1000000000", zipLong.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getIntValueTest1_HVrf0() {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        int actual = zipLong.getIntValue();
        int expected = 0;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getIntValueTest2_TKEK1() {
        ZipLong zipLong = new ZipLong(0);
        int actual = zipLong.getIntValue();
        int expected = 0;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getIntValueTest3_Bgpu2() {
        ZipLong zipLong = new ZipLong(0L);
        int actual = zipLong.getIntValue();
        int expected = 0;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getIntValueTest4_YvaQ3() {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0});
        int actual = zipLong.getIntValue();
        int expected = 0;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong_jbPm0() {
        byte[] bytes = new byte[4];
        int offset = 0;
        ZipLong zipLong = new ZipLong(bytes, offset);
        zipLong.putLong(bytes, offset);
        assertEquals(0, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong2_NPKY1() {
        byte[] bytes = new byte[4];
        int offset = 0;
        ZipLong zipLong = new ZipLong(bytes);
        zipLong.putLong(bytes, offset);
        assertEquals(0, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong3_MgfZ2() {
        byte[] bytes = new byte[4];
        int offset = 0;
        ZipLong zipLong = new ZipLong(0);
        zipLong.putLong(bytes, offset);
        assertEquals(0, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong4_jxAA3() {
        byte[] bytes = new byte[4];
        int offset = 0;
        ZipLong zipLong = new ZipLong(0L);
        zipLong.putLong(bytes, offset);
        assertEquals(0, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getValueTest5_iPlA4() {
    byte[] bytes = new byte[4];
    long expected = 0;
    long actual = ZipLong.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getValueTest6_umVL5() {
    byte[] bytes = new byte[5];
    long expected = 0;
    long actual = ZipLong.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getValueTest7_QiGG6() {
    byte[] bytes = new byte[6];
    long expected = 0;
    long actual = ZipLong.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getValueTest8_nxTR7() {
    byte[] bytes = new byte[7];
    long expected = 0;
    long actual = ZipLong.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getValueTest9_ESzZ8() {
    byte[] bytes = new byte[8];
    long expected = 0;
    long actual = ZipLong.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getValueTest10_Uhdh9() {
    byte[] bytes = new byte[9];
    long expected = 0;
    long actual = ZipLong.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHashCode_MUUJ0() {
		ZipLong zipLong = new ZipLong(new byte[] {0x01, 0x02, 0x03, 0x04}, 0);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHashCode_hzLC1() {
		ZipLong zipLong = new ZipLong(0x01020304);
		assertEquals(16909060, zipLong.hashCode());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHashCode_lgrw2() {
		ZipLong zipLong = new ZipLong(0x0102030405060708L);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHashCode_pkfW3() {
		ZipLong zipLong = new ZipLong(new byte[] {0x01, 0x02, 0x03, 0x04});
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClone_Pbwr1_1() {
		ZipLong zipLong = new ZipLong(0);
		ZipLong clone = (ZipLong) zipLong.clone();
		assertNotNull(clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClone_Pbwr1_2() {
		ZipLong zipLong = new ZipLong(0);
		ZipLong clone = (ZipLong) zipLong.clone();
		assertEquals(zipLong.getValue(), clone.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClone_hwyi2_1() {
		ZipLong zipLong = new ZipLong(0L);
		ZipLong clone = (ZipLong) zipLong.clone();
		assertNotNull(clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClone_hwyi2_2() {
		ZipLong zipLong = new ZipLong(0L);
		ZipLong clone = (ZipLong) zipLong.clone();
		assertEquals(zipLong.getValue(), clone.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest1_avyn0() {
        byte[] bytes = new byte[4];
        int offset = 0;
        long expected = ByteUtils.fromLittleEndian(bytes, offset, 4);
        long actual = ZipLong.getValue(bytes, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBytes_ogQl0() {
        ZipLong zipLong = new ZipLong(0x12345678);
        byte[] expected = new byte[]{(byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12};
        assertArrayEquals(expected, zipLong.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBytes_3_zLIl2() {
        ZipLong zipLong = new ZipLong(new byte[]{(byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12});
        byte[] expected = new byte[]{(byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12};
        assertArrayEquals(expected, zipLong.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getBytesTest1_bLfo0() {
    byte[] expected = new byte[4];
    expected[0] = (byte) 0x00;
    expected[1] = (byte) 0x00;
    expected[2] = (byte) 0x00;
    expected[3] = (byte) 0x00;
    byte[] actual = ZipLong.getBytes(0L);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getBytesTest4_AZYg3() {
    byte[] expected = new byte[4];
    expected[0] = (byte) 0xFF;
    expected[1] = (byte) 0xFF;
    expected[2] = (byte) 0xFF;
    expected[3] = (byte) 0xFF;
    byte[] actual = ZipLong.getBytes(-1L);
    assertArrayEquals(expected, actual);
}
}