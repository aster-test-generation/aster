/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AES256SHA256Decoder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUtf16DecodeWithNullInput_RriU0() {
        char[] chars = null;
        byte[] expected = null;
        byte[] actual = AES256SHA256Decoder.utf16Decode(chars);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUtf16DecodeWithEmptyInput_QcOZ1() {
        char[] chars = new char[0];
        byte[] expected = new byte[0];
        byte[] actual = AES256SHA256Decoder.utf16Decode(chars);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Password_EYtl0() {
        byte[] password = new byte[10];
        int numCyclesPower = 10;
        byte[] salt = new byte[10];
        byte[] result = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
        assertTrue(result.length == 32);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256PasswordWithEmptyPassword_jFbI1() {
        byte[] password = new byte[0];
        int numCyclesPower = 10;
        byte[] salt = new byte[10];
        byte[] result = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
        assertTrue(result.length == 32);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256PasswordWithEmptySalt_hICP2() {
        byte[] password = new byte[10];
        int numCyclesPower = 10;
        byte[] salt = new byte[0];
        byte[] result = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
        assertTrue(result.length == 32);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256PasswordWithNegativeNumCyclesPower_Ryhg3() {
        byte[] password = new byte[10];
        int numCyclesPower = -1;
        byte[] salt = new byte[10];
        byte[] result = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
        assertTrue(result.length == 32);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256PasswordWithZeroNumCyclesPower_QFEW4() {
        byte[] password = new byte[10];
        int numCyclesPower = 0;
        byte[] salt = new byte[10];
        byte[] result = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
        assertTrue(result.length == 32);
    }
}