/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPMember_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_EPiZ0_nKBK0() {
        CPUTF8 name = new CPUTF8("name", 0);
        CPUTF8 descriptor = new CPUTF8("descriptor", 0);
        long flags = 0L;
        List<Attribute> attributes = new ArrayList<>();
        CPMember cpMember = new CPMember(name, descriptor, flags, attributes);
        ClassConstantPool pool = new ClassConstantPool();
        cpMember.resolve(pool);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullName_Jexs5_uoQD0() {
        CPUTF8 name = null;
        CPUTF8 descriptor = new CPUTF8("descriptor");
        CPMember cpMember = new CPMember(name, descriptor, 0, null);
        String expected = "CPMember: (descriptor)";
        String actual = cpMember.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullDescriptor_Nkgj6_PEzd0() {
        CPUTF8 name = new CPUTF8("name");
        CPUTF8 descriptor = null;
        CPMember cpMember = new CPMember(name, descriptor, 0, null);
        String expected = "CPMember: (null)";
        String actual = cpMember.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullNameAndDescriptor_qrfH7_dqyW0() {
        CPUTF8 name = null;
        CPUTF8 descriptor = null;
        CPMember cpMember = new CPMember(name, descriptor, 0, null);
        String expected = "CPMember: (null)";
        String actual = cpMember.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPUTF8String_yHRt0_VHOm0_fid1() {
        CPUTF8 utf8 = new CPUTF8("test");
        assertEquals("CPUTF8: test", utf8.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_inul2_xbZi0_1_fid1() {
        CPUTF8 name = new CPUTF8("name");
        CPUTF8 descriptor = new CPUTF8("descriptor", 0);
        long flags = 0;
        List<Attribute> attributes = new ArrayList<>();
        CPMember cpMember = new CPMember(name, descriptor, flags, attributes);
        ClassFileEntry[] entries = cpMember.getNestedClassFileEntries();
        assertEquals(3, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ZucN0_Btta0_fid1() {
        CPUTF8 name = new CPUTF8("name");
        CPUTF8 descriptor = new CPUTF8("descriptor");
        CPMember cpMember = new CPMember(name, descriptor, 0, null);
        String expected = "CPMember: name(descriptor)";
        String actual = cpMember.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithFlags_Hwco1_XSkT0_fid1() {
        CPUTF8 name = new CPUTF8("name");
        CPUTF8 descriptor = new CPUTF8("descriptor");
        CPMember cpMember = new CPMember(name, descriptor, 1, null);
        String expected = "CPMember: name(descriptor)";
        String actual = cpMember.toString();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithAttributes_lnwt2_ZMpA0_fid1() {
        CPUTF8 name = new CPUTF8("name");
        CPUTF8 descriptor = new CPUTF8("descriptor");
        List<Attribute> attributes = new ArrayList<>();
        CPMember cpMember = new CPMember(name, descriptor, 0, attributes);
        String expected = "CPMember: name(descriptor)";
        String actual = cpMember.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithAllParameters_mwCp3_FoNm0_fid1() {
        CPUTF8 name = new CPUTF8("name");
        CPUTF8 descriptor = new CPUTF8("descriptor");
        long flags = 1;
        List<Attribute> attributes = new ArrayList<>();
        CPMember cpMember = new CPMember(name, descriptor, flags, attributes);
        String expected = "CPMember: name(descriptor)";
        String actual = cpMember.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoParameters_Byyt4_mocf0_fid1() {
        CPUTF8 name = new CPUTF8("");
        CPUTF8 descriptor = new CPUTF8("");
        CPMember cpMember = new CPMember(name, descriptor, 0, null);
        String expected = "CPMember: ()";
        String actual = cpMember.toString();
        assertEquals(expected, actual);
    }
}