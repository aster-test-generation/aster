/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.util.Date;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_Wpud0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        long ntfsLastModifiedDate = 1234567890;
        entry.setLastModifiedDate(ntfsLastModifiedDate);
        assertEquals(FileTimes.ntfsTimeToFileTime(ntfsLastModifiedDate), entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateWithZeroValue_gQbT1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        long ntfsLastModifiedDate = 0;
        entry.setLastModifiedDate(ntfsLastModifiedDate);
        assertEquals(FileTimes.ntfsTimeToFileTime(ntfsLastModifiedDate), entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateWithNegativeValue_pfQO2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        long ntfsLastModifiedDate = -1234567890;
        entry.setLastModifiedDate(ntfsLastModifiedDate);
        assertEquals(FileTimes.ntfsTimeToFileTime(ntfsLastModifiedDate), entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_LzIM0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> result = entry.getContentMethods();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethodsWithNoContentMethods_ZLfe1_2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> result = entry.getContentMethods();
        assertTrue(result.iterator().hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethodsWithContentMethods_bfzI2_2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> result = entry.getContentMethods();
        assertFalse(result.iterator().hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethodsWithContentMethod_GWlK3_1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> result = entry.getContentMethods();
        SevenZMethodConfiguration method = result.iterator().next();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethodsWithContentMethod_GWlK3_2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> result = entry.getContentMethods();
        SevenZMethodConfiguration method = result.iterator().next();
        assertTrue(result.iterator().hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethodsWithContentMethod_GWlK3_3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> result = entry.getContentMethods();
        SevenZMethodConfiguration method = result.iterator().next();
        assertNotNull(method);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToJavaTimeCoverage_EjNr1() {
        long ntfsTime = 0L;
        SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
        ntfsTime = Long.MAX_VALUE;
        SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
        ntfsTime = Long.MIN_VALUE;
        SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_cCiq0_fid2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessDate(1234567890L);
    assertEquals(1234567890L, entry.getAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDateCoverage_leYT1_fid2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessDate(0L);
    entry.setAccessDate(1L);
    entry.setAccessDate(Long.MAX_VALUE);
    entry.setAccessDate(Long.MIN_VALUE);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getCreationDateTest_gEYY0_fid2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    Date creationDate = sevenZArchiveEntry.getCreationDate();
    assertNotNull(creationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_EbCI0_1_fid2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(0);
    entry.setCompressedCrc(1);
    entry.setCompressedCrc(Integer.MAX_VALUE);
    entry.setCompressedCrc(Integer.MIN_VALUE);
    assertEquals(0, entry.getCompressedCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_EbCI0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(0);
    entry.setCompressedCrc(1);
    entry.setCompressedCrc(Integer.MAX_VALUE);
    entry.setCompressedCrc(Integer.MIN_VALUE);
    assertEquals(1, entry.getCompressedCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_EbCI0_3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(0);
    entry.setCompressedCrc(1);
    entry.setCompressedCrc(Integer.MAX_VALUE);
    entry.setCompressedCrc(Integer.MIN_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getCompressedCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_bKsL0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date date = entry.getLastModifiedDate();
    assertNotNull(date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDateWithNullFileTime_eSXy2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    when(entry.getLastModifiedTime()).thenReturn(null);
    Date date = entry.getLastModifiedDate();
    assertNull(date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateWithNullDate_NTYQ1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setLastModifiedDate(null);
        assertNull(entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateWithInvalidDate_bWco2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date invalidDate = new Date(-1);
        entry.setLastModifiedDate(invalidDate);
        assertNotEquals(invalidDate, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAccessDate_CVRD0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date accessDate = entry.getAccessDate();
        assertNotNull(accessDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithNegativeValue_DxjZ1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(-100);
        assertEquals(-1, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_FDTP0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCreationDate(1234567890L);
    Assertions.assertEquals(1234567890L, sevenZArchiveEntry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithZeroValue_LxpF1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCreationDate(0L);
    Assertions.assertEquals(0L, sevenZArchiveEntry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithNegativeValue_LTiV2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCreationDate(-1234567890L);
    Assertions.assertEquals(-1234567890L, sevenZArchiveEntry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithMAXValue_Gdbk3() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCreationDate(Long.MAX_VALUE);
    Assertions.assertEquals(Long.MAX_VALUE, sevenZArchiveEntry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithMINValue_lBDH4() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCreationDate(Long.MIN_VALUE);
    Assertions.assertEquals(Long.MIN_VALUE, sevenZArchiveEntry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithNullFileTime_cxEN1_NItN1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedTime(null);
    Date lastModified = entry.getLastModifiedDate();
    assertNull(lastModified);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethodsWithNoContentMethods_ZLfe1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> result = entry.getContentMethods();
        assertNotNull(result);
        assertTrue(result.iterator().hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethodsWithContentMethods_bfzI2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> result = entry.getContentMethods();
        assertNotNull(result);
        assertFalse(result.iterator().hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethodsWithContentMethod_GWlK3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> result = entry.getContentMethods();
        assertNotNull(result);
        assertTrue(result.iterator().hasNext());
        SevenZMethodConfiguration method = result.iterator().next();
        assertNotNull(method);
    }
}