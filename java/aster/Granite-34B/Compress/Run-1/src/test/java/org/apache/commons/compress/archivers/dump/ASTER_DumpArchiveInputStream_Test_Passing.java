/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithLength31_ntDq0() {
    byte[] buffer = new byte[31];
    boolean result = DumpArchiveInputStream.matches(buffer, 31);
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithLength32AndInvalidBuffer_ebHF2() {
    byte[] buffer = new byte[32];
    boolean result = DumpArchiveInputStream.matches(buffer, 32);
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithLength64AndInvalidBuffer_dPmY4() {
    byte[] buffer = new byte[64];
    boolean result = DumpArchiveInputStream.matches(buffer, 64);
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithLength32AndValidBuffer_sBYj1_fid1() {
    byte[] buffer = new byte[32];
    boolean result = DumpArchiveInputStream.matches(buffer, 32);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithLength64AndValidBuffer_GVtE3_fid1() {
    byte[] buffer = new byte[64];
    boolean result = DumpArchiveInputStream.matches(buffer, 64);
}
}