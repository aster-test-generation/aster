/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackingOptions_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemovePassFile_Uhfs0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.removePassFile("file1.txt");
        packingOptions.removePassFile("file2.txt");
        packingOptions.removePassFile("file3.txt");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGzip_TsoF0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setGzip(true);
        assertEquals(true, packingOptions.isGzip());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGzipFalse_JyYs1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setGzip(false);
        assertEquals(false, packingOptions.isGzip());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getModificationTime_LaFQ0() {
        PackingOptions packingOptions = new PackingOptions();
        String modificationTime = packingOptions.getModificationTime();
        assertNotNull(modificationTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVerbose_true_SYGF0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setVerbose(true);
        boolean result = packingOptions.isVerbose();
        assert result == true;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVerbose_false_pmXN1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setVerbose(false);
        boolean result = packingOptions.isVerbose();
        assert result == false;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLogFile_BCHf0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setLogFile("logFile");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLogFile_NullParameter_TrDp1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setLogFile(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLogFile_EmptyParameter_KDKd2() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setLogFile("");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddMethodAttributeAction_JmQw0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.addMethodAttributeAction("attributeName", "action");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddMethodAttributeActionCoverage_tMGd1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.addMethodAttributeAction(null, null);
        packingOptions.addMethodAttributeAction("", "");
        packingOptions.addMethodAttributeAction("attributeName", "action");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuietTrue_GLcZ0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setQuiet(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuietFalse_QDvF1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setQuiet(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetKeepFileOrderTrue_jtqA0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setKeepFileOrder(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetKeepFileOrderFalse_jeXf1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setKeepFileOrder(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSegmentLimit_positive_FbzN1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setSegmentLimit(100);
        assertEquals(100, packingOptions.getSegmentLimit());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnknownAttributeAction_PcDA0() {
    PackingOptions packingOptions = new PackingOptions();
    String result = packingOptions.getUnknownAttributeAction();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVerboseTrue_xaYn0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setVerbose(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVerboseFalse_kPaY1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setVerbose(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getLogFileTest_jTfB0() {
        PackingOptions packingOptions = new PackingOptions();
        String logFile = packingOptions.getLogFile();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEffort_NVUo0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setEffort(100);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEffortWithZeroValue_NNQT1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setEffort(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEffortWithNegativeValue_ZPlX2() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setEffort(-10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetStripDebug_HZhO0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setStripDebug(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetStripDebugFalse_nycF1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setStripDebug(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEffort_bXcc0() {
        PackingOptions packingOptions = new PackingOptions();
        int effort = packingOptions.getEffort();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHintKeep_bwIB0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setDeflateHint(PackingOptions.KEEP);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHintTrue_rtpv1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setDeflateHint("true");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHintFalse_QbFf2() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setDeflateHint("false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHintInvalid_ietn3() {
        PackingOptions packingOptions = new PackingOptions();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddClassAttributeAction_OSbM0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.addClassAttributeAction("attributeName", "action");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddClassAttributeAction_NullAttributeName_tZOd1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.addClassAttributeAction(null, "action");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddClassAttributeAction_EmptyAttributeName_Hobr2() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.addClassAttributeAction("", "action");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddClassAttributeAction_NullAction_cFHW3() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.addClassAttributeAction("attributeName", null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddClassAttributeAction_EmptyAction_vnle4() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.addClassAttributeAction("attributeName", "");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepFileOrder_wMof0() {
        PackingOptions packingOptions = new PackingOptions();
        boolean expected = packingOptions.isKeepFileOrder();
        boolean actual = packingOptions.isKeepFileOrder();
        assert expected == actual;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepFileOrderTrue_DXZz1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setKeepFileOrder(true);
        boolean expected = true;
        boolean actual = packingOptions.isKeepFileOrder();
        assert expected == actual;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepFileOrderFalse_cBRT2() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setKeepFileOrder(false);
        boolean expected = false;
        boolean actual = packingOptions.isKeepFileOrder();
        assert expected == actual;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepFileOrderAfterToggle_DZjM5() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setKeepFileOrder(true);
        packingOptions.setKeepFileOrder(false);
        boolean expected = false;
        boolean actual = packingOptions.isKeepFileOrder();
        assert expected == actual;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepFileOrderAfterToggleTwice_SRZV6() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setKeepFileOrder(true);
        packingOptions.setKeepFileOrder(false);
        packingOptions.setKeepFileOrder(true);
        boolean expected = true;
        boolean actual = packingOptions.isKeepFileOrder();
        assert expected == actual;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepFileOrderAfterToggleThrice_zbwi7() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setKeepFileOrder(true);
        packingOptions.setKeepFileOrder(false);
        packingOptions.setKeepFileOrder(true);
        packingOptions.setKeepFileOrder(false);
        boolean expected = false;
        boolean actual = packingOptions.isKeepFileOrder();
        assert expected == actual;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepFileOrderAfterToggleFourTimes_qdXT8() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setKeepFileOrder(true);
        packingOptions.setKeepFileOrder(false);
        packingOptions.setKeepFileOrder(true);
        packingOptions.setKeepFileOrder(false);
        packingOptions.setKeepFileOrder(true);
        boolean expected = true;
        boolean actual = packingOptions.isKeepFileOrder();
        assert expected == actual;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSegmentLimit_eChq0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setSegmentLimit(100);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSegmentLimitZero_zFeS1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setSegmentLimit(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSegmentLimitNegative_KQVT2() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setSegmentLimit(-10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUnknownAttributeActionWithIncorrectOption_TBiP3() {
        PackingOptions packingOptions = new PackingOptions();
        try {
            packingOptions.setUnknownAttributeAction(" incorrectOption");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModificationTimeLatest_eIOE1() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setModificationTime("latest");
    assertEquals("latest", packingOptions.getModificationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModificationTimeInvalid_JCdP2() {
    PackingOptions packingOptions = new PackingOptions();
    try {
        packingOptions.setModificationTime("invalid");
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Bad argument: -m invalid ? transmit modtimes should be either latest or keep (default)", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldAttributeAction_rmkh0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.addFieldAttributeAction("attributeName", "action");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsGzip_WhenGzipSetToTrue_leMW0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setGzip(true);
        assertTrue(packingOptions.isGzip());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsGzip_WhenGzipSetToFalse_MRFN1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setGzip(false);
        assertFalse(packingOptions.isGzip());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPassFile_sLOX4_fid1() {
    PackingOptions packingOptions = new PackingOptions();
    String passFileName = "dir/file.class";
    boolean expected =false;
    boolean actual = packingOptions.isPassFile(passFileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getUnknownFieldAttributeActionTest_mJaI0_fid1() {
        PackingOptions packingOptions = new PackingOptions();
        String type = "someType";
        String expected = "pass";
        String actual = packingOptions.getUnknownFieldAttributeAction(type);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSegmentLimit_default_HoOs1000000() {
        PackingOptions packingOptions = new PackingOptions();
        assertEquals(1000000, packingOptions.getSegmentLimit());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnknownAttributeActionCoverage_Jute1_fid1() {
    PackingOptions packingOptions = new PackingOptions();
    String result = packingOptions.getUnknownAttributeAction();
    Assertions.assertEquals("pass", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getUnknownClassAttributeActionTest_nullMap_tUlK1() {
		PackingOptions packingOptions = new PackingOptions();
		assertEquals("pass", packingOptions.getUnknownClassAttributeAction("type"));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getUnknownMethodAttributeActionTest_axwz0_fid1() {
        PackingOptions packingOptions = new PackingOptions();
        String type = "some type";
        String expected = "pass";
        String actual = packingOptions.getUnknownMethodAttributeAction(type);
        assertEquals(expected, actual);
    }
}