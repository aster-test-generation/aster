/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextCPIOEntry_1_tfvL0() throws IOException {
    CpioArchiveInputStream cpiOArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null);
    cpiOArchiveInputStream0.getNextCPIOEntry();
    cpiOArchiveInputStream0.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextCPIOEntry_2_cHYn1() throws IOException {
    CpioArchiveInputStream cpiOArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, 1000);
    CpioArchiveEntry nextCPIOEntry = cpiOArchiveInputStream0.getNextCPIOEntry();
    cpiOArchiveInputStream0.close();
    assertNotNull(nextCPIOEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextCPIOEntry_3_QXoz2() throws IOException {
    CpioArchiveInputStream cpiOArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, "UTF-8");
    cpiOArchiveInputStream0.getNextCPIOEntry();
    cpiOArchiveInputStream0.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextCPIOEntry_4_eSpa3() throws IOException {
    CpioArchiveInputStream cpiOArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, 1000, "UTF-8");
    cpiOArchiveInputStream0.getNextCPIOEntry();
    cpiOArchiveInputStream0.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextCPIOEntry_6_Bfmy5() throws IOException {
    CpioArchiveInputStream cpiOArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, 1000, "UTF-8");
    CpioArchiveEntry nextCPIOEntry = cpiOArchiveInputStream0.getNextCPIOEntry();
    cpiOArchiveInputStream0.close();
    assertNotNull(nextCPIOEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextCPIOEntry_1_zlBD0() throws IOException {
    CpioArchiveInputStream cpiOArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null);
    CpioArchiveEntry nextCPIOEntry = cpiOArchiveInputStream0.getNextCPIOEntry();
    if (nextCPIOEntry == null) {
        fail("NullPointer");
    }
    assertEquals(0L, cpiOArchiveInputStream0.getBytesRead());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextCPIOEntry_2_pCTo1() throws IOException {
    CpioArchiveInputStream cpiOArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, 1000);
    CpioArchiveEntry nextCPIOEntry = cpiOArchiveInputStream0.getNextCPIOEntry();
    assertNotNull(nextCPIOEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextCPIOEntry_3_xyyw2() throws IOException {
    CpioArchiveInputStream cpiOArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, "UTF-8");
    CpioArchiveEntry nextCPIOEntry = cpiOArchiveInputStream0.getNextCPIOEntry();
    if (nextCPIOEntry == null) {
        fail("expected not null");
    }
    assertEquals(0L, cpiOArchiveInputStream0.getBytesRead());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextCPIOEntry_4_QMGM3() throws IOException {
    CpioArchiveInputStream cpiOArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, 1000, "UTF-8");
    CpioArchiveEntry nextCPIOEntry = cpiOArchiveInputStream0.getNextCPIOEntry();
    assertNotNull(nextCPIOEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextCPIOEntry_5_tCZV4() throws IOException {
    CpioArchiveInputStream cpiOArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, 1000, "UTF-8");
    CpioArchiveEntry nextCPIOEntry = cpiOArchiveInputStream0.getNextCPIOEntry();
    if (nextCPIOEntry == null) {
        fail("expected not null");
    }
    assertEquals(0L, cpiOArchiveInputStream0.getBytesRead());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextCPIOEntry_6_Ueoi5() throws IOException {
    CpioArchiveInputStream cpiOArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, 1000, "UTF-8");
    CpioArchiveEntry nextCPIOEntry = cpiOArchiveInputStream0.getNextCPIOEntry();
    if (nextCPIOEntry == null) {
        fail("NullPointer");
    }
    assertEquals(0L, cpiOArchiveInputStream0.getBytesRead());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextCPIOEntry_8_eTxS7() throws IOException {
    CpioArchiveInputStream cpiOArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, 1000, "UTF-8");
    CpioArchiveEntry nextCPIOEntry = cpiOArchiveInputStream0.getNextCPIOEntry();
    if (nextCPIOEntry == null) {
        assertEquals(0L, cpiOArchiveInputStream0.getBytesRead());
    } else {
        // handle the non-null case
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumberOfLinks_kNIL2_KSVP10_1() {
        CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW);
        entry.setNumberOfLinks(10);
        entry.setNumberOfLinks(110);
        assertEquals(10, entry.getNumberOfLinks());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithSignatureAndLength7_SIQi6_fid1() {
        byte[] signature = new byte[6];
        signature[0] = 0x71;
        signature[1] = (byte) 0xc7;
        signature[2] = 0x30;
        signature[3] = 0x37;
        signature[4] = 0x30;
        signature[5] = 0x38;
        int length = 6;
        assertFalse(CpioArchiveInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextCPIOEntry_2_cHYn1_fid1() throws IOException {
    CpioArchiveInputStream cpiOArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, 1000);
    cpiOArchiveInputStream0.getNextCPIOEntry();
    cpiOArchiveInputStream0.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextCPIOEntry_1_zlBD0_fid1() throws IOException {
    CpioArchiveInputStream cpiOArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null);
    cpiOArchiveInputStream0.getNextCPIOEntry();
    assertEquals(0L, cpiOArchiveInputStream0.getBytesRead());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextCPIOEntry_2_pCTo1_fid1() throws IOException {
    CpioArchiveInputStream cpiOArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, 1000);
    cpiOArchiveInputStream0.getNextCPIOEntry();
    assertEquals(0L, cpiOArchiveInputStream0.getBytesRead());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextCPIOEntry_3_xyyw2_fid1() throws IOException {
    CpioArchiveInputStream cpiOArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, "UTF-8");
    cpiOArchiveInputStream0.getNextCPIOEntry();
    assertEquals(0L, cpiOArchiveInputStream0.getBytesRead());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextCPIOEntry_4_QMGM3_fid1() throws IOException {
    CpioArchiveInputStream cpiOArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, 1000, "UTF-8");
    cpiOArchiveInputStream0.getNextCPIOEntry();
    assertEquals(0L, cpiOArchiveInputStream0.getBytesRead());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumberOfLinks_kNIL2_KSVP0_1() {
        CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW);
        entry.setNumberOfLinks(0);
        entry.setNumberOfLinks(10);
        assertEquals(0, entry.getNumberOfLinks());}
}