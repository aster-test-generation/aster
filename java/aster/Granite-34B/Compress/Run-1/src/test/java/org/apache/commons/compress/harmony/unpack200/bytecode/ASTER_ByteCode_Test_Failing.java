/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ByteCode_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperand2Bytes_mpLN0() {
    ByteCode byteCode = new ByteCode(1);
    int operand = 100;
    int position = 2;
    byteCode.setOperand2Bytes(operand, position);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperand2Bytes_zero_HrcI1() {
    ByteCode byteCode = new ByteCode(1);
    int operand = 0;
    int position = 2;
    byteCode.setOperand2Bytes(operand, position);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperand2Bytes_maxValue_pxbI2() {
    ByteCode byteCode = new ByteCode(1);
    int operand = 65535;
    int position = 2;
    byteCode.setOperand2Bytes(operand, position);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setOperandBytesTest1_MSth0() {
        final int opcode = 1;
        final ClassFileEntry[] nested = new ClassFileEntry[1];
        final int[] operands = new int[1];
        final ByteCode byteCode = new ByteCode(opcode, nested);
        byteCode.setOperandBytes(operands);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setOperandBytesTest2_xeEV1() {
        final int opcode = 1;
        final ClassFileEntry[] nested = new ClassFileEntry[1];
        final int[] operands = new int[2];
        final ByteCode byteCode = new ByteCode(opcode, nested);
        byteCode.setOperandBytes(operands);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setOperandBytesTest3_Mqgu2() {
        final int opcode = 1;
        final ClassFileEntry[] nested = new ClassFileEntry[2];
        final int[] operands = new int[1];
        final ByteCode byteCode = new ByteCode(opcode, nested);
        byteCode.setOperandBytes(operands);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setOperandBytesTest4_zgsw3() {
        final int opcode = 1;
        final ClassFileEntry[] nested = new ClassFileEntry[2];
        final int[] operands = new int[2];
        final ByteCode byteCode = new ByteCode(opcode, nested);
        byteCode.setOperandBytes(operands);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperandByte_1_GAKB0() {
        ByteCode byteCode = new ByteCode(1);
        byteCode.setOperandByte(10, 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperandByte_2_Qqra1() {
        ByteCode byteCode = new ByteCode(2, new ClassFileEntry[0]);
        byteCode.setOperandByte(20, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperandByte_3_OHfE2() {
        ByteCode byteCode = new ByteCode(3);
        byteCode.setOperandByte(30, 2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_XQyq0() {
        ByteCode bytecode = new ByteCode(1);
        assertEquals(0, bytecode.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRewrite_saFI0() {
        ByteCode byteCode = new ByteCode(0);
        int[] result = byteCode.getRewrite();
        int[] expected = new int[0];
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRewriteWithNestedClasses_UXMQ1() {
        ClassFileEntry[] nested = new ClassFileEntry[0];
        ByteCode byteCode = new ByteCode(0, nested);
        int[] result = byteCode.getRewrite();
        int[] expected = new int[0];
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEqualsWithSameObject_estf0() {
        ByteCode bytecode = new ByteCode(1);
        Object obj = new Object();
        boolean result = bytecode.equals(obj);
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedPosition_pjNF0() {
        ClassFileEntry[] nested = new ClassFileEntry[0];
        ByteCode byteCode = new ByteCode(1, nested);
        int[] result = byteCode.getNestedPosition(0);
        int[] expected = new int[0];
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedPositionWithNegativeIndex_buPZ1() {
        ClassFileEntry[] nested = new ClassFileEntry[0];
        ByteCode byteCode = new ByteCode(1, nested);
        int[] result = byteCode.getNestedPosition(-1);
        int[] expected = new int[0];
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedPositionWithIndexGreaterThanLength_fYWQ2() {
        ClassFileEntry[] nested = new ClassFileEntry[0];
        ByteCode byteCode = new ByteCode(1, nested);
        int[] result = byteCode.getNestedPosition(1);
        int[] expected = new int[0];
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_XiRj0() {
        ByteCode byteCode = new ByteCode(1);
        assertEquals("ByteCode", byteCode.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteCodeIndex_cCGO0() {
        ByteCode byteCode = new ByteCode(1);
        assertEquals(0, byteCode.getByteCodeIndex());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteCodeIndexWithNestedClasses_LbHa1() {
        ClassFileEntry[] nested = new ClassFileEntry[1];
        ByteCode byteCode = new ByteCode(2, nested);
        assertEquals(0, byteCode.getByteCodeIndex());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasMultipleByteCodes_eKoH0() {
        ByteCode byteCode = new ByteCode(1);
        assertTrue(byteCode.hasMultipleByteCodes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets_tHaq0() {
    ByteCode bytecode = new ByteCode(1);
    int[] targets = bytecode.getByteCodeTargets();
    Assertions.assertNotNull(targets);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNestedMustStartClassPool_dpEs0_hAJp1_fid2() {
        ByteCode byteCode = new ByteCode(0);
        boolean result = byteCode.nestedMustStartClassPool();
        org.junit.jupiter.api.Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNestedMustStartClassPoolWithOpcodeAndNested_lYTM2_gqsX0_fid2() {
        ClassFileEntry[] nested = new ClassFileEntry[0];
        ByteCode byteCode = new ByteCode(2, nested);
        boolean result = byteCode.nestedMustStartClassPool();
        org.junit.jupiter.api.Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNested_pdTi1_vzGg0() {
        ClassFileEntry[] nested = new ClassFileEntry[0];
        ByteCode byteCode = new ByteCode(1, nested);
        String actual = byteCode.toString();
        String expected = "ByteCode";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
}