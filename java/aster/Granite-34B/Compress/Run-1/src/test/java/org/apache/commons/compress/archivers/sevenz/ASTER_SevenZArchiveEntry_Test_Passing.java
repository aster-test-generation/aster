/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_cCiq0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessDate(1234567890L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDateCoverage_leYT1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessDate(0L);
    entry.setAccessDate(1L);
    entry.setAccessDate(Long.MAX_VALUE);
    entry.setAccessDate(1L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getCreationDateTest_gEYY0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCreationDate(new Date());
    Date creationDate = sevenZArchiveEntry.getCreationDate();
    assertEquals(new Date(), creationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToJavaTime_AThj0() {
        long ntfsTime = 1234567890L;
        Date expected = FileTimes.ntfsTimeToDate(ntfsTime);
        Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasLastModifiedDate_KwEn0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasLastModifiedDate(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasLastModifiedDateFalse_VXgv1() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasLastModifiedDate(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_EbCI0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(0);
    entry.setCompressedCrc(1);
    entry.setCompressedCrc(Integer.MAX_VALUE);
    entry.setCompressedCrc(Integer.MIN_VALUE);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_EbCI0_4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(0);
    entry.setCompressedCrc(1);
    entry.setCompressedCrc(Integer.MAX_VALUE);
    entry.setCompressedCrc(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getCompressedCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test1_dfPr0() {
		SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
		sevenZArchiveEntry.setHasLastModifiedDate(true);
		assertTrue(sevenZArchiveEntry.getHasLastModifiedDate());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test2_Kwdw1() {
		SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
		sevenZArchiveEntry.setHasLastModifiedDate(false);
		assertTrue(!sevenZArchiveEntry.getHasLastModifiedDate());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAntiItem_kstQ0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setAntiItem(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAntiItemFalse_ZgyP1() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setAntiItem(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasStream_yFNO0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasStream(true);
        assert entry.hasStream() == true;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasStreamFalse_seMX1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasStream(false);
        assert entry.hasStream() == false;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEquals_WithThisObject_ReturnsTrue_uRxx0() {
		SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
		assertTrue(sevenZArchiveEntry.equals(sevenZArchiveEntry));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEquals_WithNullObject_ReturnsFalse_eYcw1() {
		SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
		assertFalse(sevenZArchiveEntry.equals(null));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEquals_WithNonSevenZArchiveEntryObject_ReturnsFalse_UsIp2() {
		SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
		assertFalse(sevenZArchiveEntry.equals(new Object()));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEquals_WithSameObject_ReturnsTrue_ZvWR3() {
		SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
		SevenZArchiveEntry sevenZArchiveEntry2 = sevenZArchiveEntry1;
		assertTrue(sevenZArchiveEntry1.equals(sevenZArchiveEntry2));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEquals_WithEqualObject_ReturnsTrue_uupE4() {
		SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
		SevenZArchiveEntry sevenZArchiveEntry2 = new SevenZArchiveEntry();
		assertTrue(sevenZArchiveEntry1.equals(sevenZArchiveEntry2));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_zOeD0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedSize(100L);
    assertEquals(100L, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSizeWithNegativeValue_BUxq1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedSize(-1L);
    assertEquals(-1L, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSizeWithZeroValue_vgGf2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedSize(0L);
    assertEquals(0L, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasStreamTrue_xalz0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasStream(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasStreamFalse_WDzJ1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasStream(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasWindowsAttributes_XSbY0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasWindowsAttributes(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasWindowsAttributesFalse_HrLs1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasWindowsAttributes(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_caFG0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test.txt");
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameNull_QOmf1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName(null);
        assertEquals(null, entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameEmpty_bWPa2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("");
        assertEquals("", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameLong_ynly3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        String longName = "ThisIsAVeryLongFileNameThatExceedsTheMaximumLengthOf64Characters";
        entry.setName(longName);
        assertEquals(longName, entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasAccessDateTest_cpVM0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        boolean hasAccessDate = sevenZArchiveEntry.getHasAccessDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasAccessDateTest_PKpc1() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasAccessDate(true);
        boolean hasAccessDate = sevenZArchiveEntry.getHasAccessDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasAccessDateTest_KsYd2() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasAccessDate(false);
        boolean hasAccessDate = sevenZArchiveEntry.getHasAccessDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasAccessDateTest_HtIv3() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasAccessDate(true);
        sevenZArchiveEntry.setHasAccessDate(false);
        boolean hasAccessDate = sevenZArchiveEntry.getHasAccessDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasAccessDateTest_HgoS4() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasAccessDate(false);
        sevenZArchiveEntry.setHasAccessDate(true);
        boolean hasAccessDate = sevenZArchiveEntry.getHasAccessDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasAccessDateTest_rSyb5() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasAccessDate(false);
        sevenZArchiveEntry.setHasAccessDate(false);
        boolean hasAccessDate = sevenZArchiveEntry.getHasAccessDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasAccessDateTest_bYth6() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasAccessDate(true);
        sevenZArchiveEntry.setHasAccessDate(true);
        boolean hasAccessDate = sevenZArchiveEntry.getHasAccessDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasAccessDateTest_rFKB7() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasAccessDate(true);
        sevenZArchiveEntry.setHasAccessDate(false);
        sevenZArchiveEntry.setHasAccessDate(true);
        boolean hasAccessDate = sevenZArchiveEntry.getHasAccessDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasAccessDateTest_SJWp8() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasAccessDate(true);
        sevenZArchiveEntry.setHasAccessDate(false);
        sevenZArchiveEntry.setHasAccessDate(false);
        boolean hasAccessDate = sevenZArchiveEntry.getHasAccessDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrcValue_mEIT0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrcValue(123456L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrcValueWithZeroValue_CkWE1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrcValue(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrcValueWithNegativeValue_iGHy2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrcValue(-123456L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_pRpB0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithNegativeValue_nCTj1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(-1L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithPositiveValue_BAvO2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(1L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedSize_VMOE0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedSize(100L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedSizeWithZeroValue_FlIN1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedSize(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedSizeWithNegativeValue_FerU2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedSize(-100L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_Svek0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName(null);
        assertEquals(0, entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNonNullName_RaIG1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test");
        assertEquals("test".hashCode(), entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetCompressedCrcValue_WEAt0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrcValue(123456L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetCompressedCrcValueWithZeroValue_xcgs1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrcValue(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetCompressedCrcValueWithNegativeValue_VKor2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrcValue(-123456L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_Ffqr0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date date = new Date();
        entry.setLastModifiedDate(date);
        assertEquals(date, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateWithFutureDate_Ujco3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date futureDate = new Date(System.currentTimeMillis() + 1000000);
        entry.setLastModifiedDate(futureDate);
        assertEquals(futureDate, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAntiItem_whenAntiItem_thenReturnsTrue_ACqe0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAntiItem(true);
        boolean result = entry.isAntiItem();
        assert result == true;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAntiItem_whenNotAntiItem_thenReturnsFalse_ODmH1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAntiItem(false);
        boolean result = entry.isAntiItem();
        assert result == false;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasCreationDateTest_HjfT0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        boolean expected = false; // assign the expected value based on the method implementation
        boolean actual = sevenZArchiveEntry.getHasCreationDate();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasCreationDateTest_sIgR1() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasCreationDate(true);
        boolean expected = true; // assign the expected value based on the method implementation
        boolean actual = sevenZArchiveEntry.getHasCreationDate();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasCreationDateTest_MHMz2() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasCreationDate(false);
        boolean expected = false; // assign the expected value based on the method implementation
        boolean actual = sevenZArchiveEntry.getHasCreationDate();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_dauV0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(100);
        assertEquals(100, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithZeroValue_XkCy2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(0);
        assertEquals(0, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrc_Ubmt0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrc(12345);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrcWithNegativeValue_cyUk1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrc(-1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrcWithZeroValue_EErF2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrc(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetContentMethods_vWGh0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        SevenZMethodConfiguration method1 = new SevenZMethodConfiguration(SevenZMethod.COPY);
        SevenZMethodConfiguration method2 = new SevenZMethodConfiguration(SevenZMethod.LZMA);
        SevenZMethodConfiguration method3 = new SevenZMethodConfiguration(SevenZMethod.DEFLATE);
        entry.setContentMethods(method1, method2, method3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getWindowsAttributesTest_MiLT0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(123);
        assertEquals(123, entry.getWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getWindowsAttributesTest2_gZsM1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(456);
        assertEquals(456, entry.getWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWindowsAttributes_GIxI0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWindowsAttributesWithNegativeValue_xIsY1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(-1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWindowsAttributesWithPositiveValue_OYXt2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWindowsAttributesWithMaxIntValue_vqTU3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(Integer.MAX_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWindowsAttributesWithMinIntValue_MaZH4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(Integer.MIN_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasWindowsAttributesTest_UOFG0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        boolean result = entry.getHasWindowsAttributes();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasWindowsAttributesTrueTest_BTAC1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasWindowsAttributes(true);
        boolean result = entry.getHasWindowsAttributes();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasWindowsAttributesFalseTest_RIun2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasWindowsAttributes(false);
        boolean result = entry.getHasWindowsAttributes();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasCrc_ABTG0_OVXZ0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCrc(true);
        entry.setCompressedCrcValue(123456L);
        assertEquals(123456L, entry.getCompressedCrcValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getCreationDateTest2_EDaz1_cjQM0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCreationTime(FileTime.fromMillis(-1L));
    Date creationDate = sevenZArchiveEntry.getCreationDate();
    assertEquals(new Date(-1L), creationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEquals_WithDifferentName_ReturnsFalse_Ckxl5_hzHr0() {
		SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
		SevenZArchiveEntry sevenZArchiveEntry2 = new SevenZArchiveEntry();
		sevenZArchiveEntry1.setName("name1");
		sevenZArchiveEntry2.setName("name2");
		assertFalse(sevenZArchiveEntry1.equals(sevenZArchiveEntry2));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_EbCI0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(0);
    assertEquals(0, entry.getCompressedCrc());
    entry.setCompressedCrc(1);
    assertEquals(1, entry.getCompressedCrc());
    entry.setCompressedCrc(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getCompressedCrc());
    entry.setCompressedCrc(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getCompressedCrc());
}
}