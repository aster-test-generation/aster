/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.examples;
import java.io.File;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Archiver_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithZipFormat_qgBd0() throws IOException, ArchiveException {
        Archiver archiver = new Archiver();
        SeekableByteChannel target = null; // initialize SeekableByteChannel
        File directory = null; // initialize File
        CloseableConsumer closeableConsumer = null; // initialize CloseableConsumer
        archiver.create(ArchiveStreamFactory.ZIP, target, directory, closeableConsumer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithSevenZFormat_VRol1() throws IOException, ArchiveException {
        Archiver archiver = new Archiver();
        SeekableByteChannel target = null; // initialize SeekableByteChannel
        File directory = null; // initialize File
        CloseableConsumer closeableConsumer = null; // initialize CloseableConsumer
        archiver.create(ArchiveStreamFactory.SEVEN_Z, target, directory, closeableConsumer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithInvalidFormat_MjCU2() {
        Archiver archiver = new Archiver();
        SeekableByteChannel target = null; // initialize SeekableByteChannel
        File directory = null; // initialize File
        CloseableConsumer closeableConsumer = null; // initialize CloseableConsumer
        try {
            archiver.create("invalidFormat", target, directory, closeableConsumer);
            fail("Expected ArchiveException");
        } catch (ArchiveException e) {
            assertEquals("Don't know how to handle format invalidFormat", e.getMessage());
        } catch (Exception e) {
            fail("Expected ArchiveException");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateWithSevenZFormat_lkxK0() throws IOException {
        Archiver archiver = new Archiver();
        Path directory = Files.createTempDirectory("test");
        SeekableByteChannel target = Files.newByteChannel(directory.resolve("test.7z"));
        archiver.create(ArchiveStreamFactory.SEVEN_Z, target, directory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateWithZipFormat_cBak1() throws IOException {
        Archiver archiver = new Archiver();
        Path directory = Files.createTempDirectory("test");
        SeekableByteChannel target = Files.newByteChannel(directory.resolve("test.zip"));
        archiver.create(ArchiveStreamFactory.ZIP, target, directory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_aBEK0() throws IOException, ArchiveException {
        Archiver archiver = new Archiver();
        String format = "format";
        File target = new File("target");
        File directory = new File("directory");
        archiver.create(format, target, directory);
    }
}