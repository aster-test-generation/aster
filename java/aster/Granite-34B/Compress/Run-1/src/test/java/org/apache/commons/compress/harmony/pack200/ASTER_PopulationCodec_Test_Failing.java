/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PopulationCodec_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QyQX0() throws Pack200Exception {
        RunCodec favouredCodec = new RunCodec(1, new BHSDCodec(2, 3), new BHSDCodec(4, 5));
        RunCodec tokenCodec = new RunCodec(6, new BHSDCodec(7, 8), new BHSDCodec(9, 10));
        RunCodec unfavouredCodec = new RunCodec(11, new BHSDCodec(12, 13), new BHSDCodec(14, 15));
        PopulationCodec populationCodec = new PopulationCodec(favouredCodec, 16, unfavouredCodec);
        int[] favoured = {1, 2, 3};
        int[] tokens = {4, 5, 6};
        int[] unfavoured = {7, 8, 9};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] actual = populationCodec.encode(favoured, tokens, unfavoured);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFavoured_sETZ0() throws Pack200Exception {
        RunCodec runCodec = new RunCodec(1, new BHSDCodec(1, 2), new BHSDCodec(3, 4));
        PopulationCodec populationCodec = new PopulationCodec(runCodec, 5, new RunCodec(6, new BHSDCodec(7, 8), new BHSDCodec(9, 10)));
        int[] expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        assertArrayEquals(expected, populationCodec.getFavoured());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QpyM0() throws Pack200Exception {
        RunCodec favouredCodec = new RunCodec(1, new BHSDCodec(2, 3), new BHSDCodec(4, 5));
        RunCodec unfavouredCodec = new RunCodec(6, new BHSDCodec(7, 8), new BHSDCodec(9, 10));
        PopulationCodec populationCodec = new PopulationCodec(favouredCodec, 11, unfavouredCodec);
        byte[] encodedValue = populationCodec.encode(123);
        assertNotNull(encodedValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getFavouredCodecTest2_CBAL1_HJJx0() throws Pack200Exception {
    RunCodec favouredCodec = new RunCodec(0, new BHSDCodec(0, 0), new BHSDCodec(0, 0));
    RunCodec tokenCodec = new RunCodec(0, new BHSDCodec(0, 0), new BHSDCodec(0, 0));
    RunCodec unvafouredCodec = new RunCodec(0, new BHSDCodec(0, 0), new BHSDCodec(0, 0));
    PopulationCodec populationCodec = new PopulationCodec(favouredCodec, tokenCodec, unvafouredCodec);
    Codec result = populationCodec.getTokenCodec();
    assertEquals(tokenCodec, result);
}
}