/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NewAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPUTF8StringInt_cGED1_2() {
        CPUTF8 utf8 = new CPUTF8("test", 10);
        assertEquals(10, utf8.getGlobalIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_TWFN1_1() {
        CPUTF8 attributeName = new CPUTF8("attribute");
        NewAttribute newAttribute = new NewAttribute(attributeName, 1);
        ClassFileEntry[] nested = newAttribute.getNestedClassFileEntries();
        assertEquals(1, nested.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_TWFN2_2() {
        CPUTF8 attributeName = new CPUTF8("attribute");
        NewAttribute newAttribute = new NewAttribute(attributeName, 1);
        ClassFileEntry[] nested = newAttribute.getNestedClassFileEntries();
        assertEquals(attributeName, nested[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getStartPCsTest_furx0() {
        CPUTF8 utf8 = new CPUTF8("test");
        NewAttribute newAttribute = new NewAttribute(utf8, 0);
        int[] startPCs = newAttribute.getStartPCs();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLayoutIndex_Xyxl0() {
        CPUTF8 utf8 = new CPUTF8("test");
        NewAttribute newAttribute = new NewAttribute(utf8, 1);
        int layoutIndex = newAttribute.getLayoutIndex();
        assert layoutIndex == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_snzb0() {
        CPUTF8 utf8 = new CPUTF8("Hello, World!");
        NewAttribute newAttribute = new NewAttribute(utf8, 0);
        assertEquals("Hello, World!", newAttribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyString_UAFK3() {
        CPUTF8 utf8 = new CPUTF8("");
        NewAttribute newAttribute = new NewAttribute(utf8, 0);
        assertEquals("", newAttribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNegativeLayoutIndex_wmqY5() {
        CPUTF8 utf8 = new CPUTF8("Hello, World!");
        NewAttribute newAttribute = new NewAttribute(utf8, -1);
        assertEquals("Hello, World!", newAttribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithPositiveLayoutIndex_wOzm7() {
        CPUTF8 utf8 = new CPUTF8("Hello, World!");
        NewAttribute newAttribute = new NewAttribute(utf8, 1);
        assertEquals("Hello, World!", newAttribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithMaxLayoutIndex_OQJU8() {
        CPUTF8 utf8 = new CPUTF8("Hello, World!");
        NewAttribute newAttribute = new NewAttribute(utf8, Integer.MAX_VALUE);
        assertEquals("Hello, World!", newAttribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithMinLayoutIndex_ttsU9() {
        CPUTF8 utf8 = new CPUTF8("Hello, World!");
        NewAttribute newAttribute = new NewAttribute(utf8, Integer.MIN_VALUE);
        assertEquals("Hello, World!", newAttribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLengthTest1_MtxZ0() {
    CPUTF8 attributeName = new CPUTF8("attributeName");
    NewAttribute newAttribute = new NewAttribute(attributeName, 0);
    int actual = newAttribute.getLength();
    int expected = 0;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddBCLengthWithNegativeLength_dgTc1_mmso0() {
        CPUTF8 utf8 = new CPUTF8("utf8", 0);
        NewAttribute newAttribute = new NewAttribute(utf8, 0);
        newAttribute.addBCOffset(1, 5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddBCLengthWithZeroLength_DMhu2_sQIJ0() {
        CPUTF8 utf8 = new CPUTF8("utf8", 0);
        NewAttribute newAttribute = new NewAttribute(utf8, 0);
        newAttribute.addBCOffset(0, 5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddBCLengthWithZeroValue_dWos4_OABz0() {
        CPUTF8 utf8 = new CPUTF8("utf8", 0);
        NewAttribute newAttribute = new NewAttribute(utf8, 0);
        newAttribute.addBCOffset(10, 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddBCOffsetWithNegativeValue_qMTa3_ZLUc0() {
        CPUTF8 utf8 = new CPUTF8("utf8", 0);
        NewAttribute newAttribute = new NewAttribute(utf8, 0);
        newAttribute.addBCOffset(10, -5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenumberWithBCIndex_Riow0_WaAF0() {
        NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 1);
        List<Integer> byteCodeOffsets = Arrays.asList(1, 2, 3, 4, 5);
        newAttribute.renumber(byteCodeOffsets);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenumberWhenRenumberedIsAlreadyTrue_rwXI3_xtZb0() {
        NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 1);
        newAttribute.renumbered = true;
        List<Integer> byteCodeOffsets = Arrays.asList(1, 2, 3, 4, 5);
        newAttribute.renumber(byteCodeOffsets);
    }
}