/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipLong_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_rRyZ0() {
        ZipLong zipLong = new ZipLong(new byte[] {0x01, 0x02}, 0);
        assertEquals("ZipLong value: 258", zipLong.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_kEtO3() {
        ZipLong zipLong = new ZipLong(new byte[] {0x01, 0x02});
        assertEquals("ZipLong value: 258", zipLong.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClone_mvFj0_1() {
		ZipLong zipLong = new ZipLong(new byte[] { 0, 1 }, 0);
		ZipLong clone = (ZipLong) zipLong.clone();
		assertNotNull(clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClone_mvFj0_2() {
		ZipLong zipLong = new ZipLong(new byte[] { 0, 1 }, 0);
		ZipLong clone = (ZipLong) zipLong.clone();
		assertEquals(zipLong.getValue(), clone.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClone_QPeu3_1() {
		ZipLong zipLong = new ZipLong(new byte[] { 0, 1 });
		ZipLong clone = (ZipLong) zipLong.clone();
		assertEquals(clone.getValue(), zipLong.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClone_QPeu3_2() {
		ZipLong zipLong = new ZipLong(new byte[] { 0, 1 });
		ZipLong clone = (ZipLong) zipLong.clone();
		assertEquals(zipLong.getValue(), clone.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest2_kntU1() {
        byte[] bytes = new byte[4];
        int offset = 1;
        long expected = ByteUtils.fromLittleEndian(bytes, offset, 4);
        long actual = ZipLong.getValue(bytes, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest3_Lsrh2() {
        byte[] bytes = new byte[4];
        int offset = 2;
        long expected = ByteUtils.fromLittleEndian(bytes, offset, 4);
        long actual = ZipLong.getValue(bytes, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest4_xTvq3() {
        byte[] bytes = new byte[4];
        int offset = 3;
        long expected = ByteUtils.fromLittleEndian(bytes, offset, 4);
        long actual = ZipLong.getValue(bytes, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest5_SOQp4() {
        byte[] bytes = new byte[4];
        int offset = 4;
        long expected = ByteUtils.fromLittleEndian(bytes, offset, 4);
        long actual = ZipLong.getValue(bytes, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBytes_2_ItyV1() {
        ZipLong zipLong = new ZipLong(0x123456789ABCDEFL);
        byte[] expected = new byte[]{(byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x9A, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12};
        assertArrayEquals(expected, zipLong.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getValueTest1_oUcP0() {
    byte[] bytes = new byte[0];
    long expected = 0;
    long actual = ZipLong.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getValueTest2_fBGK1() {
    byte[] bytes = new byte[1];
    long expected = 0;
    long actual = ZipLong.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getValueTest3_pJMx2() {
    byte[] bytes = new byte[2];
    long expected = 0;
    long actual = ZipLong.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getValueTest4_svby3() {
    byte[] bytes = new byte[3];
    long expected = 0;
    long actual = ZipLong.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHashCode_MUUJ0_fid1() {
		ZipLong zipLong = new ZipLong(new byte[] {0x01, 0x02, 0x03, 0x04}, 0);
		assertEquals(16909060, zipLong.hashCode());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHashCode_lgrw2_fid1() {
		ZipLong zipLong = new ZipLong(0x0102030405060708L);
		assertEquals(16909060, zipLong.hashCode());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHashCode_pkfW3_fid1() {
		ZipLong zipLong = new ZipLong(new byte[] {0x01, 0x02, 0x03, 0x04});
		assertEquals(16909060, zipLong.hashCode());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClone_QPeu3_1_fid1() {
		ZipLong zipLong = new ZipLong(new byte[] { 0, 1 });
		ZipLong clone = (ZipLong) zipLong.clone();
		assertNotNull(clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBytes_4_PgcD3() {
        ZipLong zipLong = new ZipLong(new byte[]{(byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, 4);
        byte[] expected = new byte[]{(byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12};
        assertArrayEquals(expected, zipLong.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getBytesTest2_idxM1() {
    byte[] expected = new byte[4];
    expected[0] = (byte) 0x7F;
    expected[1] = (byte) 0xFF;
    expected[2] = (byte) 0xFF;
    expected[3] = (byte) 0xFF;
    byte[] actual = ZipLong.getBytes(2147483647L);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getBytesTest3_htAh2() {
    byte[] expected = new byte[4];
    expected[0] = (byte) 0x80;
    expected[1] = (byte) 0x00;
    expected[2] = (byte) 0x00;
    expected[3] = (byte) 0x00;
    byte[] actual = ZipLong.getBytes(-2147483648L);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getBytesTest5_LYRj4() {
    byte[] expected = new byte[4];
    expected[0] = (byte) 0x00;
    expected[1] = (byte) 0x00;
    expected[2] = (byte) 0x00;
    expected[3] = (byte) 0x01;
    byte[] actual = ZipLong.getBytes(1L);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getBytesTest6_QCoZ5() {
    byte[] expected = new byte[4];
    expected[0] = (byte) 0x00;
    expected[1] = (byte) 0x00;
    expected[2] = (byte) 0x00;
    expected[3] = (byte) 0x02;
    byte[] actual = ZipLong.getBytes(2L);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getBytesTest7_koPV6() {
    byte[] expected = new byte[4];
    expected[0] = (byte) 0x00;
    expected[1] = (byte) 0x00;
    expected[2] = (byte) 0x00;
    expected[3] = (byte) 0x7F;
    byte[] actual = ZipLong.getBytes(127L);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getBytesTest8_nJmq7() {
    byte[] expected = new byte[4];
    expected[0] = (byte) 0x00;
    expected[1] = (byte) 0x00;
    expected[2] = (byte) 0x00;
    expected[3] = (byte) 0x80;
    byte[] actual = ZipLong.getBytes(-128L);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getBytesTest9_voyF8() {
    byte[] expected = new byte[4];
    expected[0] = (byte) 0x00;
    expected[1] = (byte) 0x00;
    expected[2] = (byte) 0x00;
    expected[3] = (byte) 0xFF;
    byte[] actual = ZipLong.getBytes(-127L);
    assertArrayEquals(expected, actual);
}
}