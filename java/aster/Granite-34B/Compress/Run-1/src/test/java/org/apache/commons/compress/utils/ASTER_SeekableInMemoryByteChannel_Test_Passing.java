/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.SeekableByteChannel;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SeekableInMemoryByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayWithByteArrayArgument_ccgP2() {
        byte[] data = new byte[10];
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
        assertEquals(data, channel.array());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncate_LLIW0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        channel.truncate(5);
        assertEquals(5, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithSizeSmallerThanCurrent_qugk3() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        channel.truncate(5);
        channel.truncate(3);
        assertEquals(3, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithSizeEqualCurrent_jrQt4() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        channel.truncate(5);
        channel.truncate(5);
        assertEquals(5, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPositionWithValidInput_uZAx0() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
    SeekableByteChannel result = channel.position(50);
    assertEquals(50, result.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPositionWithInvalidInput_llMM1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
    try {
        channel.position(-1);
        fail("Expected IOException not thrown");
    } catch (IOException e) {
        assertEquals("Position has to be in range 0.. 2147483647", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPositionAfterClose_rIaW2() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
    channel.close();
    try {
        channel.position(50);
        fail("Expected ClosedChannelException not thrown");
    } catch (ClosedChannelException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition_IodS0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        assertEquals(0, channel.position());
        channel = new SeekableInMemoryByteChannel();
        assertEquals(0, channel.position());
        byte[] data = new byte[10];
        channel = new SeekableInMemoryByteChannel(data);
        assertEquals(0, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_EYSr0() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer buffer = ByteBuffer.allocate(5);
        buffer.put(new byte[] {1, 2, 3, 4, 5});
        buffer.flip();
        assertEquals(5, channel.write(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_UxXD0() throws Exception {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer buf = ByteBuffer.allocate(5);
        assertEquals(5, channel.read(buf));
        assertEquals(5, buf.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWhenNoDataLeft_TAsR1() throws Exception {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer buf = ByteBuffer.allocate(15);
        assertEquals(10, channel.read(buf));
        assertEquals(10, buf.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void size_withSizeParameter_kfvg0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        assertEquals(10, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void size_withoutSizeParameter_zvzx1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        assertEquals(0, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void size_withDataParameter_IeWp2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[5]);
        assertEquals(5, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithSizeGreaterThanCurrent_pSLF5_fid1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(5);
        channel.truncate(5);
        channel.truncate(5);
        assertEquals(5, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition_IodS0_1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        channel = new SeekableInMemoryByteChannel();
        byte[] data = new byte[10];
        channel = new SeekableInMemoryByteChannel(data);
        assertEquals(0, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testWriteWithResize_uutZ3_fid1() {
		SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
		ByteBuffer buffer = ByteBuffer.allocate(100);
		buffer.put("Hello, World!".getBytes());
		buffer.flip();
		try {
			channel.write(buffer);
			assertFalse(channel.size() >= 110);
		} catch (IOException e) {
			e.printStackTrace();
			fail("Unexpected exception");
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithClosedChannel_bsUb3_1() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        channel.close();
        ByteBuffer buffer = ByteBuffer.allocate(5);
        buffer.put(new byte[] {1, 2, 3, 4, 5});
        buffer.flip();
        IOException exception = assertThrows(IOException.class, () -> channel.write(buffer));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_UxXD0_1() throws Exception {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer buf = ByteBuffer.allocate(5);
        assertEquals(5, channel.read(buf));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWhenNoDataLeft_TAsR1_1() throws Exception {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer buf = ByteBuffer.allocate(15);
        assertEquals(10, channel.read(buf));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWhenNoDataLeftAndBufferEmpty_OOLM2_2() throws Exception {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer buf = ByteBuffer.allocate(0);
        assertEquals(0, buf.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithPositionGreaterThanNewSize_okDX6_hBmV0() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        channel.truncate(5);
        channel.position(10);
        channel.truncate(3);
        assertEquals(3, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithPositionSmallerThanNewSize_lBUS7_iWTV0() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        channel.truncate(5);
        channel.position(3);
        channel.truncate(10);
        assertEquals(3, channel.position());
    }
}