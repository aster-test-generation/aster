/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPLong_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNegativeValueAndPositiveGlobalIndex_urGr13() {
    CPLong longObject = new CPLong(-1L, 1);
    assertEquals("Long: -1", longObject.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNegativeValueAndRandomGlobalIndex_OHSU14() {
    Random random = new Random();
    int randomInt = random.nextInt();
    CPLong longObject = new CPLong(-1L, randomInt);
    assertEquals("Long: -1", longObject.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithZeroValueAndNegativeGlobalIndex_VeNA15() {
    CPLong longObject = new CPLong(0L, -1);
    assertEquals("Long: 0", longObject.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithMaxLongValue_LlHO3_aTGW0() {
    CPLong longObject = new CPLong(Long.MAX_VALUE, 1);
    assertEquals("Long: 9223372036854775807", longObject.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithMinLongValue_awoE4_WaxV0() {
    CPLong longObject = new CPLong(Long.MIN_VALUE, 1);
    assertEquals("Long: -9223372036854775808", longObject.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullObject_bGlU6_ZQQR0_fid1() {
    CPLong longObject = null;
    try {
        assertEquals("Long: ", longObject.toString());
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    assertNull(e.getMessage());
    }
}
}