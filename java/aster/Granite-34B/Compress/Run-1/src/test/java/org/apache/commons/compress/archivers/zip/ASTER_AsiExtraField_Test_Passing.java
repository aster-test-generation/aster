/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AsiExtraField_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryDataTest_CvaA0() {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] expected = asiExtraField.getLocalFileDataData();
        byte[] actual = asiExtraField.getCentralDirectoryData();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getLinkedFile_KKIZ0() {
        AsiExtraField asiExtraField = new AsiExtraField();
        String result = asiExtraField.getLinkedFile();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getLinkedFile_withoutLink_aPsJ2() {
        AsiExtraField asiExtraField = new AsiExtraField();
        String result = asiExtraField.getLinkedFile();
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDirectory_true_cNWl0() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setDirectory(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDirectory_false_VfkF1() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setDirectory(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode_xQQN0() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setMode(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode2_XHda1() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setMode(2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode3_WWFA2() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setMode(3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode4_CreU3() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setMode(4);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode5_QBXK4() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setMode(5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode6_iGyX5() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setMode(6);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode7_yyYw6() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setMode(7);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode8_UZzy7() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setMode(8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode9_SJRP8() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setMode(9);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode10_eaYq9() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setMode(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkedFile_bnZM0() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setLinkedFile("test.txt");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkedFileWithEmpty_XDsr2() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setLinkedFile("");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_Bjxq0() {
    AsiExtraField asiExtraField = new AsiExtraField();
    ZipShort zipShort = asiExtraField.getLocalFileDataLength();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGroupId_HzSa0() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setGroupId(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGroupIdWithZeroValue_RcIU1() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setGroupId(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGroupIdWithNegativeValue_uoLi2() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setGroupId(-1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGroupIdWithMaximumValue_HbJE3() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setGroupId(Integer.MAX_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGroupIdWithMinimumValue_DSHu4() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setGroupId(Integer.MIN_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLinkTrue_OTWT0() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setLinkedFile("example.txt");
        boolean result = asiExtraField.isLink();
        assert result == true;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLinkFalse_NxFd1() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setLinkedFile("");
        boolean result = asiExtraField.isLink();
        assert result == false;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_BweV0() {
        AsiExtraField asiExtraField = new AsiExtraField();
        int mode = asiExtraField.getMode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLengthTest_KgEG0() {
        AsiExtraField asiExtraField = new AsiExtraField();
        ZipShort expected = asiExtraField.getLocalFileDataLength();
        ZipShort actual = asiExtraField.getCentralDirectoryLength();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testparseFromCentralDirectoryData_NullBuffer_QntE1() throws ZipException {
    AsiExtraField asiExtraField = new AsiExtraField();
    byte[] buffer = null;
    int offset = 0;
    int length = 10;
    try {
        asiExtraField.parseFromCentralDirectoryData(buffer, offset, length);
        fail("Exception expected");
    } catch (ZipException e) {
        assertEquals("The length is too short, only 10 bytes, expected at least 14", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testparseFromCentralDirectoryData_NegativeOffset_cVsV2() throws ZipException {
    AsiExtraField asiExtraField = new AsiExtraField();
    byte[] buffer = new byte[10];
    int offset = -1;
    int length = 10;
    try {
        asiExtraField.parseFromCentralDirectoryData(buffer, offset, length);
        fail("Exception expected");
    } catch (ZipException e) {
        assertEquals("The length is too short, only 10 bytes, expected at least 14", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testparseFromCentralDirectoryData_NegativeLength_auHj3() throws ZipException {
    AsiExtraField asiExtraField = new AsiExtraField();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = -1;
    try {
        asiExtraField.parseFromCentralDirectoryData(buffer, offset, length);
        fail("Exception expected");
    } catch (ZipException e) {
        assertEquals("The length is too short, only -1 bytes, expected at least 14", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testparseFromCentralDirectoryData_InvalidOffset_zNHl4() throws ZipException {
    AsiExtraField asiExtraField = new AsiExtraField();
    byte[] buffer = new byte[10];
    int offset = 10;
    int length = 10;
    try {
        asiExtraField.parseFromCentralDirectoryData(buffer, offset, length);
        fail("Exception expected");
    } catch (ZipException e) {
        assertEquals("The length is too short, only 10 bytes, expected at least 14", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testparseFromCentralDirectoryData_InvalidLength_cUSO5() throws ZipException {
    AsiExtraField asiExtraField = new AsiExtraField();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 20;
    try {
        asiExtraField.parseFromCentralDirectoryData(buffer, offset, length);
        fail("Exception expected");
    } catch (ArrayIndexOutOfBoundsException e) {
        // expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testparseFromCentralDirectoryData_InsufficientBuffer_CQFN6() throws ZipException {
    AsiExtraField asiExtraField = new AsiExtraField();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 15;
    try {
        asiExtraField.parseFromCentralDirectoryData(buffer, offset, length);
        fail("Exception expected");
    } catch (ArrayIndexOutOfBoundsException e) {
        // Expected exception
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testparseFromCentralDirectoryData_InsufficientData_IFmn7() throws ZipException {
    AsiExtraField asiExtraField = new AsiExtraField();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        asiExtraField.parseFromCentralDirectoryData(buffer, offset, length);
        fail("The length is too short, only 10 bytes, expected at least 14");
    } catch (ZipException e) {
        // Expected exception
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLengthWithCoverage_YGTN1_YEew0_1() {
    AsiExtraField asiExtraField = new AsiExtraField();
    ZipShort zipShort = asiExtraField.getLocalFileDataLength();
    assertEquals(14, zipShort.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLengthWithCoverage_YGTN1_YEew0_3() {
    AsiExtraField asiExtraField = new AsiExtraField();
    ZipShort zipShort = asiExtraField.getLocalFileDataLength();
    assertEquals(2560, ZipShort.getValue(new byte[] {0x00, 0x0A}));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLengthWithCoverage_YGTN1_YEew0_8() {
    AsiExtraField asiExtraField = new AsiExtraField();
    ZipShort zipShort = asiExtraField.getLocalFileDataLength();
    assertNotEquals(10, ZipShort.getValue(new byte[] {0x00, 0x0B}));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLengthWithCoverage_YGTN1_YEew0_9() {
    AsiExtraField asiExtraField = new AsiExtraField();
    ZipShort zipShort = asiExtraField.getLocalFileDataLength();
    assertNotEquals(10, ZipShort.getValue(new byte[] {0x00, 0x0B}, 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLengthWithCoverage_YGTN1_YEew0_11() {
    AsiExtraField asiExtraField = new AsiExtraField();
    ZipShort zipShort = asiExtraField.getLocalFileDataLength();
    assertNotEquals(2560, ZipShort.getValue(new byte[] {(byte) 0x0A, (byte) 0xF0}, 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLengthWithCoverage_YGTN1_YEew0_13() {
    AsiExtraField asiExtraField = new AsiExtraField();
    ZipShort zipShort = asiExtraField.getLocalFileDataLength();
    assertNotEquals(10, zipShort.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLengthWithCoverage_YGTN1_YEew0_14() {
    AsiExtraField asiExtraField = new AsiExtraField();
    ZipShort zipShort = asiExtraField.getLocalFileDataLength();
    assertNotEquals(new byte[] {0x00, 0x0B}, zipShort.getBytes());}
}