/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X7875_NewUnix_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderId_lXEJ0() {
        X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
        assertEquals(x7875_NewUnix.getHeaderId(), ZipShort.getBytes(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLocalFileDataLength_uidAndGidAreNull_returnsZero_xJQS0() {
        X7875_NewUnix unix = new X7875_NewUnix();
        assertEquals(0, unix.getLocalFileDataLength().getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_uiQu0() {
        X7875_NewUnix x7875_newUnix = new X7875_NewUnix();
        assertEquals("0x7875 Zip Extra Field: UID=0 GID=0", x7875_newUnix.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetUID_VPpj0() {
		X7875_NewUnix x7875 = new X7875_NewUnix();
		x7875.setUID(1234567890L);
		assertEquals(ZipUtil.longToBig(1234567890L), x7875.getUID());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetUID_Min_bVJN1() {
		X7875_NewUnix x7875 = new X7875_NewUnix();
		x7875.setUID(Long.MIN_VALUE);
		assertEquals(ZipUtil.longToBig(Long.MIN_VALUE), x7875.getUID());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetUID_Max_bzeS2() {
		X7875_NewUnix x7875 = new X7875_NewUnix();
		x7875.setUID(Long.MAX_VALUE);
		assertEquals(ZipUtil.longToBig(Long.MAX_VALUE), x7875.getUID());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetUID_Zero_BBSh3() {
		X7875_NewUnix x7875 = new X7875_NewUnix();
		x7875.setUID(0L);
		assertEquals(ZipUtil.longToBig(0L), x7875.getUID());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetUID_Negative_frjE4() {
		X7875_NewUnix x7875 = new X7875_NewUnix();
		x7875.setUID(-1234567890L);
		assertEquals(ZipUtil.longToBig(-1234567890L), x7875.getUID());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_withException_DdfM2() {
        X7875_NewUnix obj = new X7875_NewUnix();
        try {
            Object clone = obj.clone();
            fail("Expected CloneNotSupportedException");
        } catch (CloneNotSupportedException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLength_returnsCorrectLength_withCoverage_ZIur2_IlUJ0_2() {
        X7875_NewUnix unix = new X7875_NewUnix();
        assertEquals(new byte[2], unix.getCentralDirectoryLength().getBytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLength_returnsCorrectLength_withCoverage_ZIur2_IlUJ0_5() {
        X7875_NewUnix unix = new X7875_NewUnix();
        assertEquals(0, ZipShort.getBytes(0).length);}
}