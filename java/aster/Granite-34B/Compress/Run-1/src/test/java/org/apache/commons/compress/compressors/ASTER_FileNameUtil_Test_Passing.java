/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileNameUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename_ooyt0() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put(".zip", "zip");
        uncompressSuffix.put(".tar", "tar");
        uncompressSuffix.put(".gz", "gz");
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "defaultExtension");
        assertTrue(fileNameUtil.isCompressedFilename("test.zip"));
        assertTrue(fileNameUtil.isCompressedFilename("test.tar"));
        assertTrue(fileNameUtil.isCompressedFilename("test.gz"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getUncompressedFilenameTest_XRHg0() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put(".zip", ".unzip");
        uncompressSuffix.put(".tar", ".untar");
        String defaultExtension = ".txt";
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
        String fileName = "test.zip";
        String expected = "test.unzip";
        assertEquals(expected, fileNameUtil.getUncompressedFilename(fileName));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getUncompressedFilenameDefaultTest_CrLR1() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put(".zip", ".unzip");
        uncompressSuffix.put(".tar", ".untar");
        String defaultExtension = ".txt";
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
        String fileName = "test.txt";
        String expected = "test.txt";
        assertEquals(expected, fileNameUtil.getUncompressedFilename(fileName));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getUncompressedFilenameNoMatchTest_CVoe2() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put(".zip", ".unzip");
        uncompressSuffix.put(".tar", ".untar");
        String defaultExtension = ".txt";
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
        String fileName = "test.xyz";
        String expected = "test.xyz";
        assertEquals(expected, fileNameUtil.getUncompressedFilename(fileName));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCompressedFilename_withInvalidInput_returnsDefaultExtension_YMnf1() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put(".zip", ".tar");
        uncompressSuffix.put(".tar", ".gz");
        String defaultExtension = ".zip";
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
        String compressedFileName = fileNameUtil.getCompressedFilename("test.txt");
        assertEquals("test.txt.zip", compressedFileName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUncompressedFileName1_mYXW0() {
		FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "defaultExtension");
		assertEquals("file.txt", fileNameUtil.getUncompressedFileName("file.txt"));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedFileName_with_invalid_input_should_return_default_extension_nxTH1() {
    final Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", ".gz");
    uncompressSuffix.put("tar", ".gz");
    final String defaultExtension = ".gz";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    final String fileName = "test.txt";
    final String actual = fileNameUtil.getCompressedFileName(fileName);
    assertEquals("test.txt.gz", actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedFileName_with_empty_input_should_return_default_extension_dncD3() {
    final Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", ".gz");
    uncompressSuffix.put("tar", ".gz");
    final String defaultExtension = ".gz";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    final String fileName = "";
    final String actual = fileNameUtil.getCompressedFileName(fileName);
    assertEquals(".gz", actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedFileName_with_input_length_less_than_shortest_uncompressed_suffix_should_return_default_extension_mEAn4() {
    final Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", ".gz");
    uncompressSuffix.put("tar", ".gz");
    final String defaultExtension = ".gz";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    final String fileName = "test";
    final String actual = fileNameUtil.getCompressedFileName(fileName);
    assertEquals("test.gz", actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename_ooyt0_1() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put(".zip", "zip");
        uncompressSuffix.put(".tar", "tar");
        uncompressSuffix.put(".gz", "gz");
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "defaultExtension");
        assertTrue(fileNameUtil.isCompressedFilename("test.zip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename_ooyt0_2() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put(".zip", "zip");
        uncompressSuffix.put(".tar", "tar");
        uncompressSuffix.put(".gz", "gz");
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "defaultExtension");
        assertTrue(fileNameUtil.isCompressedFilename("test.tar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename_ooyt0_3() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put(".zip", "zip");
        uncompressSuffix.put(".tar", "tar");
        uncompressSuffix.put(".gz", "gz");
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "defaultExtension");
        assertTrue(fileNameUtil.isCompressedFilename("test.gz"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCompressedFilename_withValidInput_returnsCompressedFileName_OnDA0_fid1() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put(".zip", ".tar");
        uncompressSuffix.put(".tar", ".gz");
        String defaultExtension = ".zip";
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
        String compressedFileName = fileNameUtil.getCompressedFilename("test.tar");
        assertEquals("test.zip", compressedFileName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedFileName_with_valid_input_should_return_compressed_file_name_tidB0_fid1() {
    final Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", ".gz");
    uncompressSuffix.put("tar", ".gz");
    final String defaultExtension = ".gz";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    final String fileName = "test.zip";
    final String actual = fileNameUtil.getCompressedFileName(fileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedFileName_with_input_length_greater_than_longest_uncompressed_suffix_should_return_default_extension_uruM5_fid1() {
    final Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", ".gz");
    uncompressSuffix.put("tar", ".gz");
    final String defaultExtension = ".gz";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    final String fileName = "test.zip.tar.gz";
    final String actual = fileNameUtil.getCompressedFileName(fileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedFileName_with_input_length_equal_to_longest_uncompressed_suffix_should_return_compressed_file_name_PRLh6_fid1() {
    final Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", ".gz");
    uncompressSuffix.put("tar", ".gz");
    final String defaultExtension = ".gz";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    final String fileName = "test.tar.gz";
    final String actual = fileNameUtil.getCompressedFileName(fileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedFileName_with_null_input_should_throw_exception_CMrh2_BtvT0() {
    final Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", ".gz");
    uncompressSuffix.put("tar", ".gz");
    final String defaultExtension = ".gz";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    final String fileName = null;
    Assertions.assertThrows(NullPointerException.class, () -> fileNameUtil.getCompressedFileName(fileName));
}
}