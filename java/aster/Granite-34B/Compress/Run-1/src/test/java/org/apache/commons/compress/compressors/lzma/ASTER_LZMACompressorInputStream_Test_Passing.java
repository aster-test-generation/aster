/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMACompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureNull_jQMn0() {
    byte[] signature = null;
    int length = 3;
    boolean result = LZMACompressorInputStream.matches(signature, length);
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureNotStartingWith0x5d_wGtK2() {
    byte[] signature = new byte[]{0, 0, 0};
    int length = 3;
    boolean result = LZMACompressorInputStream.matches(signature, length);
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureNotStartingWith0_qjMf3() {
    byte[] signature = new byte[]{(byte) 0x5d, 1, 0};
    int length = 3;
    boolean result = LZMACompressorInputStream.matches(signature, length);
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureNotStartingWith0_BvaN4() {
    byte[] signature = new byte[]{(byte) 0x5d, 0, 1};
    int length = 3;
    boolean result = LZMACompressorInputStream.matches(signature, length);
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureStartingWith0x5dAnd0_dRBH5() {
    byte[] signature = new byte[]{(byte) 0x5d, 0, 0};
    int length = 3;
    boolean result = LZMACompressorInputStream.matches(signature, length);
    Assertions.assertTrue(result);
}
}