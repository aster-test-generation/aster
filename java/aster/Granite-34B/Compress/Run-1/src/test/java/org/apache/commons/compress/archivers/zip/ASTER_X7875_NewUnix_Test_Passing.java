/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X7875_NewUnix_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_WithNullObject_ReturnsFalse_kikH1() {
        X7875_NewUnix x = new X7875_NewUnix();
        boolean actual = x.equals(null);
        assert !actual;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_WithDifferentClassObject_ReturnsFalse_eULx2() {
        X7875_NewUnix x = new X7875_NewUnix();
        boolean actual = x.equals(new Object());
        assert !actual;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLength_returnsCorrectLength_HAcr0() {
        X7875_NewUnix unix = new X7875_NewUnix();
        assertEquals(0, unix.getCentralDirectoryLength().getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCentralDirectoryData_FEiI0() {
        X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
        byte[] expected = ByteUtils.EMPTY_BYTE_ARRAY;
        byte[] actual = x7875_NewUnix.getCentralDirectoryData();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseFromCentralDirectoryData_BTwh0() throws ZipException {
		X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
		byte[] buffer = new byte[10];
		int offset = 0;
		int length = 10;
		x7875_NewUnix.parseFromCentralDirectoryData(buffer, offset, length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseFromCentralDirectoryData_NullBuffer_mKrK1() throws ZipException {
		X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
		byte[] buffer = null;
		int offset = 0;
		int length = 10;
		x7875_NewUnix.parseFromCentralDirectoryData(buffer, offset, length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseFromCentralDirectoryData_NegativeOffset_wGtH2() throws ZipException {
		X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
		byte[] buffer = new byte[10];
		int offset = -1;
		int length = 10;
		x7875_NewUnix.parseFromCentralDirectoryData(buffer, offset, length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseFromCentralDirectoryData_NegativeLength_KEvL3() throws ZipException {
		X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
		byte[] buffer = new byte[10];
		int offset = 0;
		int length = -1;
		x7875_NewUnix.parseFromCentralDirectoryData(buffer, offset, length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseFromCentralDirectoryData_InvalidOffsetAndLength_pdqp4() throws ZipException {
		X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
		byte[] buffer = new byte[10];
		int offset = 5;
		int length = 20;
		x7875_NewUnix.parseFromCentralDirectoryData(buffer, offset, length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrimLeadingZeroesForceMinLength_NullArray_IEIg0() {
        byte[] array = null;
        byte[] expected = null;
        assertArrayEquals(expected, X7875_NewUnix.trimLeadingZeroesForceMinLength(array));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrimLeadingZeroesForceMinLength_EmptyArray_sufE1() {
        byte[] array = new byte[0];
        byte[] expected = new byte[1];
        assertArrayEquals(expected, X7875_NewUnix.trimLeadingZeroesForceMinLength(array));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrimLeadingZeroesForceMinLength_NoLeadingZeros_nvsI2() {
        byte[] array = new byte[] { 1, 2, 3 };
        byte[] expected = new byte[] { 1, 2, 3 };
        assertArrayEquals(expected, X7875_NewUnix.trimLeadingZeroesForceMinLength(array));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrimLeadingZeroesForceMinLength_WithLeadingZeros_eCqk3() {
        byte[] array = new byte[] { 0, 0, 1, 2, 3 };
        byte[] expected = new byte[] { 1, 2, 3 };
        assertArrayEquals(expected, X7875_NewUnix.trimLeadingZeroesForceMinLength(array));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrimLeadingZeroesForceMinLength_WithOnlyLeadingZeros_cPOW4() {
        byte[] array = new byte[] { 0, 0, 0 };
        byte[] expected = new byte[] { 0 };
        assertArrayEquals(expected, X7875_NewUnix.trimLeadingZeroesForceMinLength(array));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID_aakU0() {
        X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
        x7875_NewUnix.setGID(1234567890L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID_QlOd1() {
        X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
        x7875_NewUnix.setGID(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID_ztNW2() {
        X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
        x7875_NewUnix.setGID(987654321L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_YqXE0() throws CloneNotSupportedException {
        X7875_NewUnix obj = new X7875_NewUnix();
        Object clone = obj.clone();
        assertNotNull(clone);
        assertNotSame(obj, clone);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLocalFileDataLength_uidAndGidAreNull_returnsZero_xJQS7() {
        X7875_NewUnix unix = new X7875_NewUnix();
        assertEquals(7, unix.getLocalFileDataLength().getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_uiQu0_fid1() {
        X7875_NewUnix x7875_newUnix = new X7875_NewUnix();
        assertEquals("0x7875 Zip Extra Field: UID=1000 GID=1000", x7875_newUnix.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetUID_VPpj0_fid1() {
		X7875_NewUnix x7875 = new X7875_NewUnix();
		x7875.setUID(1234567890L);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetUID_Max_bzeS2_fid1() {
		X7875_NewUnix x7875 = new X7875_NewUnix();
		x7875.setUID(Long.MAX_VALUE);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetUID_Zero_BBSh3_fid1() {
		X7875_NewUnix x7875 = new X7875_NewUnix();
		x7875.setUID(0L);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_YqXE0_1() throws CloneNotSupportedException {
        X7875_NewUnix obj = new X7875_NewUnix();
        Object clone = obj.clone();
        assertNotNull(clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_YqXE0_2() throws CloneNotSupportedException {
        X7875_NewUnix obj = new X7875_NewUnix();
        Object clone = obj.clone();
        assertNotSame(obj, clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLength_returnsCorrectLength_withCoverage_ZIur2_IlUJ0_3() {
        X7875_NewUnix unix = new X7875_NewUnix();
        assertEquals(0, ZipShort.getValue(new byte[2]));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLength_returnsCorrectLength_withCoverage_ZIur2_IlUJ0_4() {
        X7875_NewUnix unix = new X7875_NewUnix();
        assertEquals(0, ZipShort.getValue(new byte[2], 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLength_returnsCorrectLength_withCoverage_ZIur2_IlUJ2_5() {
        X7875_NewUnix unix = new X7875_NewUnix();
        assertEquals(2, ZipShort.getBytes(2).length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLength_returnsCorrectLength_withCoverage_ZIur2_IlUJ0_6() {
        X7875_NewUnix unix = new X7875_NewUnix();
        assertEquals(0, new ZipShort(0).hashCode());}
}