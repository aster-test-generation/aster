/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLongValueTest2_wiPK1() {
        BigInteger value = new BigInteger("1234567890");
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
        long expected = zipEightByteInteger.getLongValue(value.toByteArray());
        long actual = ZipEightByteInteger.getLongValue(value.toByteArray());
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBytes1_uvJh1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new BigInteger("1000000000000000000"));
        byte[] expected = new byte[]{0,0, 104,0, 104,0, 104,0};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBytes2_jraJ2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1000000000000000000L);
        byte[] expected = new byte[]{0,0, 104,0, 104,0, 104,0};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithOffset_kpDk1() {
        byte[] bytes = new byte[8];
        int offset = 1;
        BigInteger expected = BigInteger.valueOf(0);
        BigInteger actual = ZipEightByteInteger.getValue(bytes, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithBigIntegerValue_hXDW0() {
        BigInteger value = BigInteger.valueOf(1234567890);
        byte[] expected = new byte[] {0,-46,-46,-46,-46,-46, 45, -62};
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
        byte[] actual = zipEightByteInteger.getBytes(value);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithLongValue_GhkR1() {
        long value = 1234567890;
        byte[] expected = new byte[] {0,-46,-46,-46,-46,-46, 45, -62};
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
        byte[] actual = zipEightByteInteger.getBytes(value);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithBigIntegerValue_OkAG1() {
        BigInteger value = BigInteger.valueOf(1234567890);
        byte[] expected = value.toByteArray();
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(expected);
        byte[] actual = ZipEightByteInteger.getBytes(value);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLongValueWithBigIntegerValue_ieAz1_jyXS0() {
        BigInteger value = new BigInteger("1234567890");
        long expected = 1234567890L;
        long actual = ZipEightByteInteger.getLongValue(value.toByteArray());
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue2_lqsM2_fid1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1000000000000000000L);
        assertEquals(new BigInteger("10000000000000000000"), zipEightByteInteger.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNegativeValue_VCMt1_fid1() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] {0, 0, 0, 0, 0, 0, 0, -1}, 0);
    assertEquals("ZipEightByteInteger value: -1", zipEightByteInteger.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithValueOne_HULv3_fid1() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] {0, 0, 0, 0, 0, 0, 0, 1}, 0);
    assertEquals("ZipEightByteInteger value: 1", zipEightByteInteger.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBytes1_uvJh1_fid1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new BigInteger("1000000000000000000"));
        byte[] expected = new byte[]{0, -104, 104, -104, 104, -104, 104, -104};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBytes2_jraJ2_fid1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1000000000000000000L);
        byte[] expected = new byte[]{0, -104, 104, -104, 104, -104, 104, -104};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithBigIntegerValue_hXDW0_fid1() {
        BigInteger value = BigInteger.valueOf(1234567890);
        byte[] expected = new byte[] {0, 0, 0, 0, 0, 0, 45, -62};
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
        byte[] actual = zipEightByteInteger.getBytes(value);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithLongValue_GhkR1_fid1() {
        long value = 1234567890;
        byte[] expected = new byte[] {0, 0, 0, 0, 0, 0, 45, -62};
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
        byte[] actual = zipEightByteInteger.getBytes(value);
        assertArrayEquals(expected, actual);
    }
}