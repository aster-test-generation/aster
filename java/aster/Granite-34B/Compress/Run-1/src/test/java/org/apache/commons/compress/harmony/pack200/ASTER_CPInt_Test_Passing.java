/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPInt_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInt_dVKL0() {
        CPInt cpInt = new CPInt(10);
        int result = cpInt.getInt();
        assert result == 10;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntWithZeroValue_HXuw1() {
        CPInt cpInt = new CPInt(0);
        int result = cpInt.getInt();
        assert result == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntWithNegativeValue_qvfU2() {
        CPInt cpInt = new CPInt(-10);
        int result = cpInt.getInt();
        assert result == -10;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcompareTo_XlAy0() {
    final CPInt cpInt1 = new CPInt(10);
    final CPInt cpInt2 = new CPInt(20);
    assertEquals(Integer.compare(cpInt1.getInt(), cpInt2.getInt()), cpInt1.compareTo(cpInt2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcompareToWithItself_jBqn2() {
    final CPInt cpInt = new CPInt(10);
    assertEquals(Integer.compare(cpInt.getInt(), cpInt.getInt()), cpInt.compareTo(cpInt));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcompareToWithEqualObjects_aVFL3() {
    final CPInt cpInt1 = new CPInt(10);
    final CPInt cpInt2 = new CPInt(10);
    assertEquals(Integer.compare(cpInt1.getInt(), cpInt2.getInt()), cpInt1.compareTo(cpInt2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcompareToWithNegativeNumbers_dIYY4() {
    final CPInt cpInt1 = new CPInt(-10);
    final CPInt cpInt2 = new CPInt(-20);
    assertEquals(Integer.compare(cpInt1.getInt(), cpInt2.getInt()), cpInt1.compareTo(cpInt2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcompareToWithPositiveAndNegativeNumbers_bplA5() {
    final CPInt cpInt1 = new CPInt(10);
    final CPInt cpInt2 = new CPInt(-10);
    assertEquals(Integer.compare(cpInt1.getInt(), cpInt2.getInt()), cpInt1.compareTo(cpInt2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcompareToWithZero_Xbos6() {
    final CPInt cpInt1 = new CPInt(10);
    final CPInt cpInt2 = new CPInt(0);
    assertEquals(Integer.compare(cpInt1.getInt(), cpInt2.getInt()), cpInt1.compareTo(cpInt2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcompareToWithMaxInt_EPjU7() {
    final CPInt cpInt1 = new CPInt(Integer.MAX_VALUE);
    final CPInt cpInt2 = new CPInt(Integer.MAX_VALUE - 1);
    assertEquals(Integer.compare(cpInt1.getInt(), cpInt2.getInt()), cpInt1.compareTo(cpInt2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcompareToWithMinInt_yOkG8() {
    final CPInt cpInt1 = new CPInt(Integer.MIN_VALUE);
    final CPInt cpInt2 = new CPInt(Integer.MIN_VALUE + 1);
    assertEquals(Integer.compare(cpInt1.getInt(), cpInt2.getInt()), cpInt1.compareTo(cpInt2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcompareToWithNull_bwEi1_fid1() {
    final CPInt cpInt = new CPInt(10);
    final CPInt nullCPInt = null;
}
}