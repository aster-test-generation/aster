/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X000A_NTFS_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getCentralDirectoryData_OUTx0() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		byte[] expected = x000A_NTFS.getLocalFileDataData();
		byte[] actual = x000A_NTFS.getCentralDirectoryData();
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAccessFileTime_PsoI0() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		FileTime time = FileTime.fromMillis(System.currentTimeMillis());
		x000A_NTFS.setAccessFileTime(time);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCentralDirectoryLength_yjEd0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort centralDirectoryLength = x000A_NTFS.getCentralDirectoryLength();
    assertNotNull(centralDirectoryLength);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCentralDirectoryLengthCoverage_GsVk1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.getCentralDirectoryLength();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithAllTimesNull_tjDX3() {
        X000A_NTFS ntf = new X000A_NTFS();
        assertEquals(-123, ntf.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getLocalFileDataLengthTest_sKpu0() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		ZipShort expected = new ZipShort(4 + 2 + 2 + 3 * 8);
		ZipShort actual = x000A_NTFS.getLocalFileDataLength();
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTime_sDjJ0() {
        X000A_NTFS ntfs = new X000A_NTFS();
        Date date = new Date();
        ntfs.setCreateJavaTime(date);
        assertEquals(date, ntfs.getCreateJavaTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData_edRL0() throws ZipException {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        x000A_NTFS.parseFromLocalFileData(data, offset, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void setCreateTime_Test_1_EDKo0() {
		X000A_NTFS x000a_ntfs = new X000A_NTFS();
		ZipEightByteInteger t = new ZipEightByteInteger(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0);
		x000a_ntfs.setCreateTime(t);
		assertEquals(x000a_ntfs.getCreateTime(), t);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void setCreateTime_Test_3_aZAm2() {
		X000A_NTFS x000a_ntfs = new X000A_NTFS();
		ZipEightByteInteger t = new ZipEightByteInteger(1L);
		x000a_ntfs.setCreateTime(t);
		assertEquals(x000a_ntfs.getCreateTime(), t);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void setCreateTime_Test_4_Fbht3() {
		X000A_NTFS x000a_ntfs = new X000A_NTFS();
		ZipEightByteInteger t = new ZipEightByteInteger(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
		x000a_ntfs.setCreateTime(t);
		assertEquals(x000a_ntfs.getCreateTime(), t);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTime_QJbQ0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date d = new Date();
    x000A_NTFS.setModifyJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTimeWithNullDate_lRXP1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date d = null;
    x000A_NTFS.setModifyJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderIdCoverage_BDAR1_2() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        assertEquals(x000A_NTFS.getHeaderId().getValue(), ZipShort.getValue(ZipShort.getBytes(0x000A)));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_QYMM0() {
		X000A_NTFS x000A = new X000A_NTFS();
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseFromCentralDirectoryData_IKuH0() throws ZipException {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        x000A_NTFS.parseFromCentralDirectoryData(buffer, offset, length);
        assertEquals(true, true); // Placeholder for assertion
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_false_notX000A_NTFS_hlVd4() {
    X000A_NTFS x000A_NTFS1 = new X000A_NTFS();
    assertFalse(x000A_NTFS1.equals(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessTime_PqDK0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger t = new ZipEightByteInteger(1234567890L);
        x000A_NTFS.setAccessTime(t);
        assertEquals(t, x000A_NTFS.getAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessTimeWithNull_rCdL1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger t = null;
        x000A_NTFS.setAccessTime(t);
        assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyTime_BknM0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger t = new ZipEightByteInteger(1234567890L);
        x000A_NTFS.setModifyTime(t);
        assertEquals(t, x000A_NTFS.getModifyTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyTimeWithNull_LJdf1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger t = null;
        x000A_NTFS.setModifyTime(t);
        assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getModifyTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTime_NmRt0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date d = new Date();
    x000A_NTFS.setAccessJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTimeWithNullDate_dqTP1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setAccessJavaTime(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCreateJavaTime_2_WFJh1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date expected = null;
    Date actual = x000A_NTFS.getCreateJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_UwDd7() {
        long value = 1234567890;
        byte[] bytes = ZipEightByteInteger.getBytes(value);
        assertEquals(8, bytes.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_true_CqKm0_bzJe0() {
    X000A_NTFS x000A_NTFS1 = new X000A_NTFS();
    X000A_NTFS x000A_NTFS2 = new X000A_NTFS();
    x000A_NTFS1.setModifyTime(new ZipEightByteInteger(1200));
    x000A_NTFS1.setAccessTime(new ZipEightByteInteger(1200));
    x000A_NTFS1.setCreateTime(new ZipEightByteInteger(1200));
    x000A_NTFS2.setModifyTime(new ZipEightByteInteger(1200));
    x000A_NTFS2.setAccessTime(new ZipEightByteInteger(1200));
    x000A_NTFS2.setCreateTime(new ZipEightByteInteger(1200));
    assertTrue(x000A_NTFS1.equals(x000A_NTFS2));
}
}