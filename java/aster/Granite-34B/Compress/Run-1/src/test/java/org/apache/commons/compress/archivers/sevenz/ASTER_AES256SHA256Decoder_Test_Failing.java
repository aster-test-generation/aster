/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AES256SHA256Decoder_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUtf16DecodeWithNonEmptyInput_DvWO2() {
        char[] chars = "Hello, World!".toCharArray();
        byte[] expected = new byte[] { 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21 };
        byte[] actual = AES256SHA256Decoder.utf16Decode(chars);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha256Password_sNtq0() {
		char[] password = "password".toCharArray();
		int numCyclesPower = 10;
		byte[] salt = new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
		byte[] expected = new byte[] {10, -56, 100, -102, -119, -10, 116, -10, -116, -111, -124, 124, -104, 126, 112, 104, -103, -114, -128, 109, 126, -128, 100, 110, 126, 122, 120, 109};
		byte[] actual = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionsAsPropertiesWithNoOptions_KZOl0() throws IOException {
        AES256SHA256Decoder decoder = new AES256SHA256Decoder();
        Object options = null;
        byte[] props = decoder.getOptionsAsProperties(options);
        assertEquals(0, props.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionsAsPropertiesWithInvalidOptionsType_pYOt4() {
        AES256SHA256Decoder decoder = new AES256SHA256Decoder();
        Object options = new Object();
        try {
            decoder.getOptionsAsProperties(options);
            fail("Expected IOException");
        } catch (IOException e) {
            assertEquals("Invalid options type", e.getMessage());
        }
    }
}