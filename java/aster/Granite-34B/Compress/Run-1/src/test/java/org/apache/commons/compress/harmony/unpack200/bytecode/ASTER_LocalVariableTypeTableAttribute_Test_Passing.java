/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTypeTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getStartPCsTest_lineCoverage_RqRL1() {
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(10, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3")}, new CPUTF8[]{new CPUTF8("signature1"), new CPUTF8("signature2"), new CPUTF8("signature3")}, new int[]{7, 8, 9});
        int[] startPCs = attribute.getStartPCs();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testWriteBodyWithEmptyArrays_QTqx1() throws IOException {
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(0, new int[]{}, new int[]{}, new CPUTF8[]{}, new CPUTF8[]{}, new int[]{});
        DataOutputStream dos = new DataOutputStream(System.out);
        attribute.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToString_Bjnv0() {
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{1}, new int[]{1}, new CPUTF8[]{new CPUTF8("name1")}, new CPUTF8[]{new CPUTF8("signature1")}, new int[]{1});
        String actual = attribute.toString();
        String expected = "LocalVariableTypeTable: 1 varaibles";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToStringWithZeroLength_AZcm1() {
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(0, new int[]{}, new int[]{}, new CPUTF8[]{}, new CPUTF8[]{}, new int[]{});
        String actual = attribute.toString();
        String expected = "LocalVariableTypeTable: 0 varaibles";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToStringWithMultipleVariables_chJR2() {
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(2, new int[]{1, 2}, new int[]{1, 2}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2")}, new CPUTF8[]{new CPUTF8("signature1"), new CPUTF8("signature2")}, new int[]{1, 2});
        String actual = attribute.toString();
        String expected = "LocalVariableTypeTable: 2 varaibles";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToStringWithNegativeLength_Jdmm3() {
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(-1, new int[]{-1}, new int[]{-1}, new CPUTF8[]{}, new CPUTF8[]{}, new int[]{});
        String actual = attribute.toString();
        String expected = "LocalVariableTypeTable: -1 varaibles";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToStringWithNullNames_MGRP4() {
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{1}, new int[]{1}, null, new CPUTF8[]{new CPUTF8("signature1")}, new int[]{1});
        String actual = attribute.toString();
        String expected = "LocalVariableTypeTable: 1 varaibles";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToStringWithNullSignatures_GJGU5() {
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{1}, new int[]{1}, new CPUTF8[]{new CPUTF8("name1")}, null, new int[]{1});
        String actual = attribute.toString();
        String expected = "LocalVariableTypeTable: 1 varaibles";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToStringWithNullIndexes_MhCA6() {
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{1}, new int[]{1}, new CPUTF8[]{new CPUTF8("name1")}, new CPUTF8[]{new CPUTF8("signature1")}, null);
        String actual = attribute.toString();
        String expected = "LocalVariableTypeTable: 1 varaibles";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAttributeName_WhenValidInput_SetsAttributeName_OKxa0() {
        CPUTF8 cpUTF8Value = new CPUTF8("validName");
        LocalVariableTypeTableAttribute.setAttributeName(cpUTF8Value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAttributeName_WhenNullInput_SetsAttributeNameToNull_nHuF1() {
        CPUTF8 cpUTF8Value = null;
        LocalVariableTypeTableAttribute.setAttributeName(cpUTF8Value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAttributeName_WhenEmptyInput_SetsAttributeNameToEmpty_eFpw2() {
        CPUTF8 cpUTF8Value = new CPUTF8("");
        LocalVariableTypeTableAttribute.setAttributeName(cpUTF8Value);
    }
}