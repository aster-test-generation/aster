/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.archivers.ArchiveException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArjArchiveInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_lXcc0() {
    byte[] signature = new byte[2];
    signature[0] = (byte) 0xff;
    signature[1] = (byte) 0xff;
    int length = 2;
    boolean result = ArjArchiveInputStream.matches(signature, length);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureNull_Nyls1() {
    byte[] signature = null;
    int length = 2;
    boolean result = ArjArchiveInputStream.matches(signature, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithValidInput_GKhM0() throws IOException, ArchiveException {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[10]));
        ArjArchiveEntry arjArchiveEntry = arjArchiveInputStream.getNextEntry();
        assertNotNull(arjArchiveEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithInvalidInput_JwCV1() throws IOException, ArchiveException {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[10]));
        arjArchiveInputStream.getNextEntry();
        arjArchiveInputStream.getNextEntry();
        assertNull(arjArchiveInputStream.getNextEntry());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithEmptyInput_aCYn2() throws IOException, ArchiveException {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        assertNull(arjArchiveInputStream.getNextEntry());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithNullInput_Tjrw4() throws IOException, ArchiveException {
        try {
            new ArjArchiveInputStream(null);
            fail("Exception expected");
        } catch (ArchiveException e) {
            assertTrue(e.getMessage().contains("ArchiveException"));
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_eofException_WJeg0() throws ArchiveException, IOException {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        try {
            arjArchiveInputStream.getNextEntry();
            fail("Expected IOException");
        } catch (IOException expected) {
            assertTrue(expected instanceof EOFException);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_eofException_withComment_withCharset_UisX2() throws ArchiveException, IOException {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
        try {
            arjArchiveInputStream.getNextEntry();
            fail("Expected IOException");
        } catch (IOException expected) {
            assertTrue(expected instanceof EOFException);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArchiveComment_default_yqQt0() throws ArchiveException {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        assertEquals(null, arjArchiveInputStream.getArchiveComment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArchiveComment_with_charsetName_nSLU1() throws ArchiveException {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
        assertEquals(null, arjArchiveInputStream.getArchiveComment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withValidInputStream_shouldReturnArjArchiveEntry_StsL0() throws Exception {
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        ArjArchiveEntry entry = arjArchiveInputStream.getNextEntry();
        assertEquals(entry.getLastModifiedDate(), new Date());
        assertEquals(entry.getSize(), 4);
        assertEquals(entry.getHostOs(), 0);
        assertEquals(entry.hashCode(), 0);
        assertEquals(entry.getUnixMode(), 0);
        assertEquals(entry.getName(), "test");
        assertEquals(entry.getMode(), 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withValidInputStreamAndCharsetName_shouldReturnArjArchiveEntry_jNnR1() throws Exception {
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream, "UTF-8");
        ArjArchiveEntry entry = arjArchiveInputStream.getNextEntry();
        assertEquals(entry.getLastModifiedDate(), new Date());
        assertEquals(entry.getSize(), 4);
        assertEquals(entry.getHostOs(), 0);
        assertEquals(entry.hashCode(), 0);
        assertEquals(entry.getUnixMode(), 0);
        assertEquals(entry.getName(), "test");
        assertEquals(entry.getMode(), 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithNullInputStream_OPKj1() {
        try {
            ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(null);
            arjArchiveInputStream.getNextEntry();
            fail("Exception expected");
        } catch (ArchiveException e) {
            assertTrue(true);
        } catch (Exception e) {
            fail("Wrong exception");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithClosedInputStream_jrFp2() throws ArchiveException, IOException {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[10]));
        arjArchiveInputStream.close();
        ArjArchiveEntry arjArchiveEntry = arjArchiveInputStream.getNextEntry();
        assertNull(arjArchiveEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithLength_lPTM0() throws Exception {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        byte[] b = new byte[10];
        int off = 0;
        int len = 10;
        int result = arjArchiveInputStream.read(b, off, len);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithLengthAndOffset_yuIO1() throws Exception {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        byte[] b = new byte[10];
        int off = 1;
        int len = 10;
        int result = arjArchiveInputStream.read(b, off, len);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithoutLength_pbUa2() throws Exception {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        byte[] b = new byte[10];
        int result = arjArchiveInputStream.read(b);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_bFeM0() throws ArchiveException, IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        arjArchiveInputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withValidInputStream_shouldReturnArjArchiveEntry_StsL0_1() throws Exception {
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        ArjArchiveEntry entry = arjArchiveInputStream.getNextEntry();
        assertEquals(entry.getLastModifiedDate(), new Date());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withValidInputStream_shouldReturnArjArchiveEntry_StsL0_2() throws Exception {
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        ArjArchiveEntry entry = arjArchiveInputStream.getNextEntry();
        assertEquals(entry.getSize(), 4);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withValidInputStream_shouldReturnArjArchiveEntry_StsL0_3() throws Exception {
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        ArjArchiveEntry entry = arjArchiveInputStream.getNextEntry();
        assertEquals(entry.getHostOs(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withValidInputStream_shouldReturnArjArchiveEntry_StsL0_4() throws Exception {
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        ArjArchiveEntry entry = arjArchiveInputStream.getNextEntry();
        assertEquals(entry.hashCode(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withValidInputStream_shouldReturnArjArchiveEntry_StsL0_5() throws Exception {
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        ArjArchiveEntry entry = arjArchiveInputStream.getNextEntry();
        assertEquals(entry.getUnixMode(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withValidInputStream_shouldReturnArjArchiveEntry_StsL0_6() throws Exception {
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        ArjArchiveEntry entry = arjArchiveInputStream.getNextEntry();
        assertEquals(entry.getName(), "test");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withValidInputStream_shouldReturnArjArchiveEntry_StsL0_7() throws Exception {
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        ArjArchiveEntry entry = arjArchiveInputStream.getNextEntry();
        assertEquals(entry.getMode(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withValidInputStreamAndCharsetName_shouldReturnArjArchiveEntry_jNnR1_1() throws Exception {
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream, "UTF-8");
        ArjArchiveEntry entry = arjArchiveInputStream.getNextEntry();
        assertEquals(entry.getLastModifiedDate(), new Date());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withValidInputStreamAndCharsetName_shouldReturnArjArchiveEntry_jNnR1_2() throws Exception {
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream, "UTF-8");
        ArjArchiveEntry entry = arjArchiveInputStream.getNextEntry();
        assertEquals(entry.getSize(), 4);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withValidInputStreamAndCharsetName_shouldReturnArjArchiveEntry_jNnR1_3() throws Exception {
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream, "UTF-8");
        ArjArchiveEntry entry = arjArchiveInputStream.getNextEntry();
        assertEquals(entry.getHostOs(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withValidInputStreamAndCharsetName_shouldReturnArjArchiveEntry_jNnR1_4() throws Exception {
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream, "UTF-8");
        ArjArchiveEntry entry = arjArchiveInputStream.getNextEntry();
        assertEquals(entry.hashCode(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withValidInputStreamAndCharsetName_shouldReturnArjArchiveEntry_jNnR1_5() throws Exception {
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream, "UTF-8");
        ArjArchiveEntry entry = arjArchiveInputStream.getNextEntry();
        assertEquals(entry.getUnixMode(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withValidInputStreamAndCharsetName_shouldReturnArjArchiveEntry_jNnR1_6() throws Exception {
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream, "UTF-8");
        ArjArchiveEntry entry = arjArchiveInputStream.getNextEntry();
        assertEquals(entry.getName(), "test");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withValidInputStreamAndCharsetName_shouldReturnArjArchiveEntry_jNnR1_7() throws Exception {
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream, "UTF-8");
        ArjArchiveEntry entry = arjArchiveInputStream.getNextEntry();
        assertEquals(entry.getMode(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithEmptyInputStream_LJHw3() throws ArchiveException, IOException {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        ArjArchiveEntry arjArchiveEntry = arjArchiveInputStream.getNextEntry();
        assertNull(arjArchiveEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNextEntry_YEhf0_TWRA0() throws IOException {
		ArjArchiveInputStream arjArchiveInputStream = null;
		try {
			arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
		} catch (ArchiveException e) {
			e.printStackTrace();
		}
		ArjArchiveEntry arjArchiveEntry = arjArchiveInputStream.getNextEntry();
		assertNull(arjArchiveEntry);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureNull_Nyls1_fid2() {
    byte[] signature = null;
    int length = 2;
    boolean result = ArjArchiveInputStream.matches(signature, length);
    assertTrue(result);
}
}