/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExtraFieldUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraFieldNoDefaultWithNullHeaderId_Jmvc2() {
        ZipShort headerId = null;
        ZipExtraField extraField = ExtraFieldUtils.createExtraFieldNoDefault(headerId);
        assertNull(extraField);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_NullData_ReturnsEmptyArray_AljS0() throws ZipException {
	    byte[] data = null;
	    boolean local = true;
	    ZipExtraField[] result = ExtraFieldUtils.parse(data, local);
	    assertEquals(0, result.length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_ValidData_ReturnsCorrectExtraFields_LSHH2_1() throws ZipException {
	    byte[] data = new byte[] { 0x01, 0x02, 0x03 };
	    boolean local = true;
	    ZipExtraField[] result = ExtraFieldUtils.parse(data, local);
	    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_ValidData_ReturnsCorrectExtraFields_LSHH2_2() throws ZipException {
	    byte[] data = new byte[] { 0x01, 0x02, 0x03 };
	    boolean local = true;
	    ZipExtraField[] result = ExtraFieldUtils.parse(data, local);
	    assertEquals(0x0102, result[0].getHeaderId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_ValidData_ReturnsCorrectExtraFields_LSHH2_3() throws ZipException {
	    byte[] data = new byte[] { 0x01, 0x02, 0x03 };
	    boolean local = true;
	    ZipExtraField[] result = ExtraFieldUtils.parse(data, local);
	    assertEquals(0x03, result[1].getHeaderId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraField_STyZ0() {
        ZipShort headerId = new ZipShort(1);
        ZipExtraField field = ExtraFieldUtils.createExtraField(headerId);
        assertEquals(UnrecognizedExtraField.class, field.getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMergeLocalFileDataDataWithNull_xgOQ0() {
		final byte[] result = ExtraFieldUtils.mergeLocalFileDataData(null);
		Assertions.assertNull(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_NullData_Tdtn0() throws ZipException {
	    ZipExtraField[] actual = ExtraFieldUtils.parse(null);
	    assertEquals(0, actual.length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_ValidData_ReturnsCorrectExtraFields_LSHH2() throws ZipException {
	    byte[] data = new byte[] { 0x01, 0x02, 0x03 };
	    boolean local = true;
	    ZipExtraField[] result = ExtraFieldUtils.parse(data, local);
	    assertEquals(2, result.length);
	    assertEquals(0x0102, result[0].getHeaderId());
	    assertEquals(0x03, result[1].getHeaderId());
	}
}