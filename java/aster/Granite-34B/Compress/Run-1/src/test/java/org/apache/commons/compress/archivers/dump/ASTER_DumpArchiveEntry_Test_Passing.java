/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffset_wtJt0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.FILE);
        assertEquals(0, entry.getOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode_zeYX0() {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        entry.setMode(0644);
        assertEquals(420, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeWithNegativeValue_mUSr1() {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        entry.setMode(-1);
        assertEquals(4095, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameTest_zBgY0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertEquals("name", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOffset_EjNX0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        entry.setOffset(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOffsetWithNegativeValue_KEEm1() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        entry.setOffset(-1L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOffsetWithMaxValue_ChoF2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        entry.setOffset(Long.MAX_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOffsetWithMinValue_SHWJ3() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        entry.setOffset(Long.MIN_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameObject_NiOn0() {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNullObject_qVhK1() {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentClassObject_IzMF2() {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    assertFalse(entry.equals(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSimpleName_DtJh0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertEquals("simpleName", entry.getSimpleName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getGenerationTest_JZMy0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FILE);
        int generation = entry.getGeneration();
        System.out.println("Generation: " + generation);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getGenerationTest_whiteout_bvlL1() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.WHITEOUT);
        int generation = entry.getGeneration();
        System.out.println("Generation: " + generation);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getGenerationTest_socket_evPn2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.SOCKET);
        int generation = entry.getGeneration();
        System.out.println("Generation: " + generation);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getGenerationTest_link_NZvu3() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.LINK);
        int generation = entry.getGeneration();
        System.out.println("Generation: " + generation);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getGenerationTest_blkdev_TJMu5() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.BLKDEV);
        int generation = entry.getGeneration();
        System.out.println("Generation: " + generation);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getGenerationTest_directory_QYcF6() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.DIRECTORY);
        int generation = entry.getGeneration();
        System.out.println("Generation: " + generation);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getGenerationTest_chrdev_aobY7() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.CHRDEV);
        int generation = entry.getGeneration();
        System.out.println("Generation: " + generation);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getGenerationTest_fifo_NGmm8() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FIFO);
        int generation = entry.getGeneration();
        System.out.println("Generation: " + generation);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getGenerationTest_unknown_rHIq9() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.UNKNOWN);
        int generation = entry.getGeneration();
        System.out.println("Generation: " + generation);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNlinkWithZeroInodeNumber_pbHb1() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 0, DumpArchiveEntry.TYPE.FILE);
        assertEquals(0, entry.getNlink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setVolumeTest_zJWw0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setVolume(100);
        assert dumpArchiveEntry.getVolume() == 100;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setVolumeTest_KCXe1() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setVolume(0);
        assert dumpArchiveEntry.getVolume() == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setVolumeTest_mpls2() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setVolume(50);
        assert dumpArchiveEntry.getVolume() == 50;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupIdWithNoType_bcec1() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGenerationTest_SdTl0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setGeneration(1);
        assert dumpArchiveEntry.getGeneration() == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGenerationTest2_ySSG1() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FILE);
        dumpArchiveEntry.setGeneration(2);
        assert dumpArchiveEntry.getGeneration() == 2;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGenerationTest3_pBWz2() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.DIRECTORY);
        dumpArchiveEntry.setGeneration(3);
        assert dumpArchiveEntry.getGeneration() == 3;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGenerationTest4_bcZU3() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FIFO);
        dumpArchiveEntry.setGeneration(4);
        assert dumpArchiveEntry.getGeneration() == 4;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGenerationTest5_tdwh4() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.LINK);
        dumpArchiveEntry.setGeneration(5);
        assert dumpArchiveEntry.getGeneration() == 5;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGenerationTest6_NYon5() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.BLKDEV);
        dumpArchiveEntry.setGeneration(6);
        assert dumpArchiveEntry.getGeneration() == 6;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGenerationTest7_zYuw6() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.CHRDEV);
        dumpArchiveEntry.setGeneration(7);
        assert dumpArchiveEntry.getGeneration() == 7;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGenerationTest8_bZxC7() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.SOCKET);
        dumpArchiveEntry.setGeneration(8);
        assert dumpArchiveEntry.getGeneration() == 8;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGenerationTest9_Tovt8() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.WHITEOUT);
        dumpArchiveEntry.setGeneration(9);
        assert dumpArchiveEntry.getGeneration() == 9;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGenerationTest10_jIFr9() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.UNKNOWN);
        dumpArchiveEntry.setGeneration(10);
        assert dumpArchiveEntry.getGeneration() == 10;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_mlcu0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.FILE);
        int mode = entry.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModeWithWhiteoutEntry_FgWM8() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.WHITEOUT);
        int mode = entry.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModeWithUnknownEntry_sBLk9() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.UNKNOWN);
        int mode = entry.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSizeTest_dlQZ0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setSize(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSizeTest1_mzMX1() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setSize(1L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSizeTest2_AfVi2() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setSize(100L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSizeTest3_QeUu3() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setSize(1000L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSizeTest4_XTrt4() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setSize(10000L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSizeTest5_rIrh5() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setSize(100000L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSizeTest6_SUWD6() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setSize(1000000L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSizeTest7_QMMK7() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setSize(10000000L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSizeTest8_pJOm8() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setSize(100000000L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSizeTest9_kjCW9() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setSize(1000000000L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithNullName_rgWb0() {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        entry.setName(null);
        assertEquals(null, entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithValidName_ktVK1() {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        entry.setName("test.txt");
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_VkyQ0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        Date date = new Date();
        entry.setLastModifiedDate(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateWithCoverage_mavr1() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        Date date = new Date();
        entry.setLastModifiedDate(date);
        entry.setLastModifiedDate(date);
        entry.setLastModifiedDate(date);
        entry.setLastModifiedDate(date);
        entry.setLastModifiedDate(date);
        entry.setLastModifiedDate(date);
        entry.setLastModifiedDate(date);
        entry.setLastModifiedDate(date);
        entry.setLastModifiedDate(date);
        entry.setLastModifiedDate(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderCountWithUnknownType_VWLl1() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.UNKNOWN);
        assertEquals(0, entry.getHeaderCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderCountWithWhiteoutType_iWER2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.WHITEOUT);
        assertEquals(0, entry.getHeaderCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderCountWithSocketType_EZAd3() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.SOCKET);
        assertEquals(0, entry.getHeaderCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeleted_SXpj0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        entry.setDeleted(true);
        assertEquals(true, entry.isDeleted());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeletedWithCoverage_pdLO1() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        entry.setDeleted(true);
        entry.setDeleted(false);
        assertEquals(false, entry.isDeleted());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUserIdTest_oDdG0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setUserId(123);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUserIdTest_OywS1() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setUserId(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUserIdTest_Gvoq2() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setUserId(-1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUserIdTest_Kogp3() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setUserId(Integer.MAX_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUserIdTest_FtbU4() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setUserId(Integer.MIN_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUserIdTest_oBiq5() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setUserId(1000);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUserIdTest_HhTH6() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setUserId(500);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUserIdTest_QslP7() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setUserId(2000);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUserIdTest_entp8() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setUserId(1500);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUserIdTest_FTvi9() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setUserId(2500);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUserIdTest_jDgI10() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setUserId(3000);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUserIdTest_etgT11() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setUserId(4000);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUserIdTest_FooV12() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setUserId(5000);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUserIdTest_WvYZ13() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setUserId(6000);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTimeWithFutureValue_XqBk3_LVmE0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    Date date = new Date();
    dumpArchiveEntry.setAccessTime(date);
    dumpArchiveEntry.setAccessTime(new Date(date.getTime() + 1000));
    assertEquals(date.getTime() + 1000, dumpArchiveEntry.getAccessTime().getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeWithExcessiveValue_yptt2_fid2() {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        entry.setMode(10000);
        assertEquals(1808, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModeWithDirectoryEntry_IbDT2_fid2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.DIRECTORY);
        int mode = entry.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModeWithLinkEntry_KDOf3_fid2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.LINK);
        int mode = entry.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModeWithFifoEntry_aeqv4_fid2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.FIFO);
        int mode = entry.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModeWithblkDevEntry_FmJG5_fid2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.BLKDEV);
        int mode = entry.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModeWithChrDevEntry_sQeF6_fid2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.CHRDEV);
        int mode = entry.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModeWithSocketEntry_NBbE7_fid2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.SOCKET);
        int mode = entry.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderCount_dfEi0_fid2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName",023, DumpArchiveEntry.TYPE.FILE);
        assertEquals(1, entry.getHeaderCount());
    }
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderCountWithLinkType_GMvj4_fid2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName",023, DumpArchiveEntry.TYPE.LINK);
        assertEquals(1, entry.getHeaderCount());
    }
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderCountWithBlkDevType_tsfP6_fid2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName",023, DumpArchiveEntry.TYPE.BLKDEV);
        assertEquals(1, entry.getHeaderCount());
    }
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderCountWithDirectoryType_mGtH7_fid2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName",023, DumpArchiveEntry.TYPE.DIRECTORY);
        assertEquals(1, entry.getHeaderCount());
    }
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderCountWithChrDevType_GNtn8_fid2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName",023, DumpArchiveEntry.TYPE.CHRDEV);
        assertEquals(1, entry.getHeaderCount());
    }
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderCountWithFifoType_zJxx9_fid2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName",023, DumpArchiveEntry.TYPE.FIFO);
        assertEquals(1, entry.getHeaderCount());
    }
}