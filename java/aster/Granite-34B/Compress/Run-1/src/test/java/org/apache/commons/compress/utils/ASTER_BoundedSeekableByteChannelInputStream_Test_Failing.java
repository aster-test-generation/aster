/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.nio.ByteBuffer;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BoundedSeekableByteChannelInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_Xuxf0() throws IOException {
        BoundedSeekableByteChannelInputStream boundedSeekableByteChannelInputStream = new BoundedSeekableByteChannelInputStream(0L, 100L, null);
        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);
        int read = boundedSeekableByteChannelInputStream.read(0L, byteBuffer);
        assertNotNull(read);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_SoHc1() throws IOException {
        BoundedSeekableByteChannelInputStream boundedSeekableByteChannelInputStream = new BoundedSeekableByteChannelInputStream(0L, 100L, null);
        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);
        int read = boundedSeekableByteChannelInputStream.read(0L, byteBuffer);
        assertEquals(1024, read);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_xgGu2() throws IOException {
        BoundedSeekableByteChannelInputStream boundedSeekableByteChannelInputStream = new BoundedSeekableByteChannelInputStream(0L, 100L, null);
        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);
        int read = boundedSeekableByteChannelInputStream.read(0L, byteBuffer);
        assertTrue(read > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_JrYW3() throws IOException {
        BoundedSeekableByteChannelInputStream boundedSeekableByteChannelInputStream = new BoundedSeekableByteChannelInputStream(0L, 100L, null);
        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);
        int read = boundedSeekableByteChannelInputStream.read(0L, byteBuffer);
        assertFalse(read < 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_mgoz4() throws IOException {
        BoundedSeekableByteChannelInputStream boundedSeekableByteChannelInputStream = new BoundedSeekableByteChannelInputStream(0L, 100L, null);
        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);
        int read = boundedSeekableByteChannelInputStream.read(0L, byteBuffer);
        assertNotEquals(0, read);
    }
}