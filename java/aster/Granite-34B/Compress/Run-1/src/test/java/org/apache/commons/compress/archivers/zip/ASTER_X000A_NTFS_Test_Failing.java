/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X000A_NTFS_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderId_GWlA0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        assertEquals(x000A_NTFS.getHeaderId(), ZipShort.getBytes(0x000A));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderIdCoverage_BDAR1_1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        assertEquals(x000A_NTFS.getHeaderId().getBytes(), ZipShort.getBytes(0x000A));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetAccessFileTime_uuvB0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    FileTime fileTime = x000A_NTFS.getAccessFileTime();
    assertEquals(fileTime, FileTime.fromMillis(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getLongValueTest_lOwV0_1() {
		byte[] bytes1 = new byte[8];
		int offset1 = 0;
		long expected1 = 0L;
		ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(bytes1, offset1);
		long actual1 = zipEightByteInteger1.getLongValue();
		byte[] bytes2 = new byte[8];
		int offset2 = 1;
		long expected2 = 0L;
		ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(bytes2, offset2);
		long actual2 = zipEightByteInteger2.getLongValue();
		assertEquals(expected1, actual1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getLongValueTest_lOwV0_2() {
		byte[] bytes1 = new byte[8];
		int offset1 = 0;
		long expected1 = 0L;
		ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(bytes1, offset1);
		long actual1 = zipEightByteInteger1.getLongValue();
		byte[] bytes2 = new byte[8];
		int offset2 = 1;
		long expected2 = 0L;
		ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(bytes2, offset2);
		long actual2 = zipEightByteInteger2.getLongValue();
		assertEquals(expected2, actual2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessTime_dcED0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger accessTime = x000A_NTFS.getAccessTime();
    assertNull(accessTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_QYMM0_fid1() {
		X000A_NTFS x000A = new X000A_NTFS();
		assertEquals("0x000A Zip Extra Field: Modify:[] Access:[] Create:[] ", x000A.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetAccessFileTime_uuvB0_fid1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    FileTime fileTime = x000A_NTFS.getAccessFileTime();
    assertNotNull(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessTime_dcED0_fid1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger accessTime = x000A_NTFS.getAccessTime();
        assertEquals(accessTime, null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderIdCoverage_BDAR1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        assertEquals(x000A_NTFS.getHeaderId().getBytes(), ZipShort.getBytes(0x000A));
        assertEquals(x000A_NTFS.getHeaderId().getValue(), ZipShort.getValue(ZipShort.getBytes(0x000A)));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getLongValueTest_lOwV0() {
		byte[] bytes1 = new byte[8];
		int offset1 = 0;
		long expected1 = 0L;
		ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(bytes1, offset1);
		long actual1 = zipEightByteInteger1.getLongValue();
		assertEquals(expected1, actual1);
		byte[] bytes2 = new byte[8];
		int offset2 = 1;
		long expected2 = 0L;
		ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(bytes2, offset2);
		long actual2 = zipEightByteInteger2.getLongValue();
		assertEquals(expected2, actual2);
	}
}