/**
 * Generated by Aster
 */
package org.apache.commons.compress;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MemoryLimitException_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMemoryNeededInKbTest_gXUd0() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(1024, 2048);
        long memoryNeededInKb = memoryLimitException.getMemoryNeededInKb();
        assert memoryNeededInKb == 1024;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMemoryNeededInKbTestWithException_Zdcz1() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(1024, 2048, new Exception());
        long memoryNeededInKb = memoryLimitException.getMemoryNeededInKb();
        assert memoryNeededInKb == 1024;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMemoryLimitInKb_KcLN0() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(100, 200);
        int memoryLimit = memoryLimitException.getMemoryLimitInKb();
        assert memoryLimit == 200;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMemoryLimitInKb_withException_tOeF1() {
        Exception e = new Exception();
        MemoryLimitException memoryLimitException = new MemoryLimitException(100, 200, e);
        int memoryLimit = memoryLimitException.getMemoryLimitInKb();
        assert memoryLimit == 200;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMemoryLimitInKb_withZeroMemoryNeeded_GWqy2() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(0, 200);
        int memoryLimit = memoryLimitException.getMemoryLimitInKb();
        assert memoryLimit == 200;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMemoryLimitInKb_withZeroMemoryLimit_PbSE3() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(100, 0);
        int memoryLimit = memoryLimitException.getMemoryLimitInKb();
        assert memoryLimit == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMemoryLimitInKb_withNegativeMemoryNeeded_FtDF4() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(-100, 200);
        int memoryLimit = memoryLimitException.getMemoryLimitInKb();
        assert memoryLimit == 200;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMemoryLimitInKb_withNegativeMemoryLimit_atea5() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(100, -200);
        int memoryLimit = memoryLimitException.getMemoryLimitInKb();
        assert memoryLimit == -200;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMemoryLimitInKb_withZeroMemoryNeededAndLimit_IDsd6() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(0, 0);
        int memoryLimit = memoryLimitException.getMemoryLimitInKb();
        assert memoryLimit == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMemoryLimitInKb_withNegativeMemoryNeededAndLimit_MBvp7() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(-100, -200);
        int memoryLimit = memoryLimitException.getMemoryLimitInKb();
        assert memoryLimit == -200;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMemoryLimitInKb_withMemoryNeededGreaterThanLimit_TxQN8() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(200, 100);
        int memoryLimit = memoryLimitException.getMemoryLimitInKb();
        assert memoryLimit == 100;
    }
}