/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200Strategy_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStreamBridgeWithInMemoryStrategyAndException_Eoes4() throws IOException {
    Pack200Strategy pack200Strategy = Pack200Strategy.IN_MEMORY;
    when(pack200Strategy.newStreamBridge()).thenThrow(new IOException("Test Exception"));
    try {
        pack200Strategy.newStreamBridge();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Test Exception", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStreamBridgeWithTempFileStrategyAndException_HADB5() throws IOException {
    Pack200Strategy pack200Strategy = Pack200Strategy.TEMP_FILE;
    when(pack200Strategy.newStreamBridge()).thenThrow(new IOException("Test Exception"));
    try {
        pack200Strategy.newStreamBridge();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Test Exception", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStreamBridgeWithTempFileStrategyAndException_HADB5_fid1() throws IOException {
    Pack200Strategy pack200Strategy = Pack200Strategy.TEMP_FILE;
    IOException exception = new IOException("Test Exception");
    when(pack200Strategy.newStreamBridge()).thenThrow(exception);
    try {
        pack200Strategy.newStreamBridge();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals(exception, e);
    }
}
}