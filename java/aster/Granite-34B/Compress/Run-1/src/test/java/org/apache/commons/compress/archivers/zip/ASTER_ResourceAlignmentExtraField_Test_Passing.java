/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ResourceAlignmentExtraField_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllowMethodChange_uFtR0() {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1, true);
        boolean actual = resourceAlignmentExtraField.allowMethodChange();
        boolean expected = true;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllowMethodChange2_BCzi1() {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1);
        boolean actual = resourceAlignmentExtraField.allowMethodChange();
        boolean expected = false;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllowMethodChange3_fHYU2() {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField();
        boolean actual = resourceAlignmentExtraField.allowMethodChange();
        boolean expected = false;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllowMethodChange4_tIQR3() {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1, true, 1);
        boolean actual = resourceAlignmentExtraField.allowMethodChange();
        boolean expected = true;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryDataTest2_bmer1() {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(2, false);
        byte[] expected = ZipShort.getBytes(2 | 0);
        assertArrayEquals(expected, resourceAlignmentExtraField.getCentralDirectoryData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLocalFileDataData_defaultValues_IyVm0() {
        ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField();
        byte[] expected = new byte[ResourceAlignmentExtraField.BASE_SIZE];
        assertArrayEquals(expected, extraField.getLocalFileDataData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignment_QJQC0() {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1, true);
        short alignment = resourceAlignmentExtraField.getAlignment();
        assertEquals(1, alignment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentWithNoArgs_rBax1() {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField();
        short alignment = resourceAlignmentExtraField.getAlignment();
        assertEquals(0, alignment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentWithThreeArgs_DNbu2() {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(2, true, 1);
        short alignment = resourceAlignmentExtraField.getAlignment();
        assertEquals(2, alignment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResourceAlignmentExtraField_zCUn0() {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField();
        assertNotNull(resourceAlignmentExtraField);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResourceAlignmentExtraFieldInt_RvrG1() {
        int alignment = 10;
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(alignment);
        assertEquals(alignment, resourceAlignmentExtraField.getAlignment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseFromCentralDirectoryData_KcLu4() throws ZipException {
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField();
        resourceAlignmentExtraField.parseFromCentralDirectoryData(buffer, offset, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLengthTest_IDUp0() {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField();
        ZipShort expected = new ZipShort(ResourceAlignmentExtraField.BASE_SIZE);
        ZipShort actual = resourceAlignmentExtraField.getCentralDirectoryLength();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLengthWithAlignmentTest_ajga1() {
        int alignment = 10;
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(alignment);
        ZipShort expected = new ZipShort(ResourceAlignmentExtraField.BASE_SIZE);
        ZipShort actual = resourceAlignmentExtraField.getCentralDirectoryLength();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLengthWithAlignmentAndAllowMethodChangeTest_qErZ2() {
        int alignment = 10;
        boolean allowMethodChange = true;
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(alignment, allowMethodChange);
        ZipShort expected = new ZipShort(ResourceAlignmentExtraField.BASE_SIZE);
        ZipShort actual = resourceAlignmentExtraField.getCentralDirectoryLength();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLengthWithAlignmentAndAllowMethodChangeAndPaddingTest_FWro3() {
        int alignment = 10;
        boolean allowMethodChange = true;
        int padding = 5;
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(alignment, allowMethodChange, padding);
        ZipShort expected = new ZipShort(ResourceAlignmentExtraField.BASE_SIZE);
        ZipShort actual = resourceAlignmentExtraField.getCentralDirectoryLength();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLengthWithOnlyPaddingTest_psec7() {
        int padding = 5;
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(padding);
        ZipShort expected = new ZipShort(ResourceAlignmentExtraField.BASE_SIZE);
        ZipShort actual = resourceAlignmentExtraField.getCentralDirectoryLength();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLengthWithOnlyAllowMethodChangeTest_RJLa6_pDjW0() {
        boolean allowMethodChange = true;
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1, allowMethodChange);
        ZipShort expected = new ZipShort(ResourceAlignmentExtraField.BASE_SIZE);
        ZipShort actual = resourceAlignmentExtraField.getCentralDirectoryLength();
        assertEquals(expected, actual);
    }
}