/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.nio.charset.Charset;
import java.util.Date;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import java.util.Date;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getTimeTest_DlOG0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        long time = entry.getTime();
        assertEquals(0, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getTimeTestWithSize_hLMd1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
        long time = entry.getTime();
        assertEquals(0, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
void setGID_CKFc0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setGID(0);
    assertEquals(0, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGID3_GVno2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        entry.setGID(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGID8_aOBB7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        entry.setGID(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInodeTest3_ieeo2() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name");
        cpioArchiveEntry.setInode(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInodeTest8_wVVA7() {
        String name = "name";
        long size = 0L;
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(name, size);
        cpioArchiveEntry.setInode(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getRemoteDeviceMajTest_bUjh0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    long result = entry.getRemoteDeviceMaj();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getRemoteDeviceMajTest1_GHgZ1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 1L);
    long result = entry.getRemoteDeviceMaj();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getRemoteDeviceMajTest2_BmpF2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    long result = entry.getRemoteDeviceMaj();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getRemoteDeviceMajTest5_qswN5() {
    short format = (short) 1;
    String name = "name";
    CpioArchiveEntry entry = new CpioArchiveEntry(format, name);
    long result = entry.getRemoteDeviceMaj();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getRemoteDeviceMajTest7_sWNI7() {
    String name = "name";
    long size = 1L;
    CpioArchiveEntry entry = new CpioArchiveEntry(name, size);
    long result = entry.getRemoteDeviceMaj();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ZZcK0() {
        CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test.txt", 1024L);
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithConstructor_cKFv3() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test.txt");
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithConstructorAndSize_Bsiz4() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test.txt", 1024L);
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithConstructorAndFormat_DMGb5() {
        CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test.txt");
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getRemoteDeviceMinTest3_xalu2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    entry.setRemoteDeviceMin(300);
    assertEquals(300, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getRemoteDeviceMinTest8_Ihhy7() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name", 100);
    entry.setRemoteDeviceMin(800);
    assertEquals(800, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksum_iwza0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
        entry.setChksum(12345L);
        assertEquals(12345L, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_pQTZ0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertEquals(new Date(1000 * entry.getTime()), entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_Tdyj1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
        assertEquals(new Date(1000 * entry.getTime()), entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_diFy2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(new Date(1000 * entry.getTime()), entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_KUkP5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
        assertEquals(new Date(1000 * entry.getTime()), entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_sjpB7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
        assertEquals(new Date(1000 * entry.getTime()), entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceMajTest_UFeW0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100L);
    long result = entry.getDeviceMaj();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceMajTest2_UxBO1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    long result = entry.getDeviceMaj();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceMajTest5_Grsp4() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test");
    long result = entry.getDeviceMaj();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithNullName_wlEG0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((String) null);
        assertEquals(0, entry.getHeaderPadCount(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithEmptyName_Zikr1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("");
        assertEquals(1, entry.getHeaderPadCount(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithNonNullNameAndCharset_AodS2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(1, entry.getHeaderPadCount(Charset.defaultCharset()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithNonNullNameAndNullCharset_kCzq3() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(1, entry.getHeaderPadCount(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithNonNullNameAndCustomCharset_MAVh4() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(3, entry.getHeaderPadCount(Charset.forName("UTF-16")));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_validSize_LaFE0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
        entry.setSize(100L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpioArchiveEntry_String_vdPF6() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceMinTest3_HSTw2() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("C:\\Users\\user\\Desktop\\file.txt");
    long result = cpioArchiveEntry.getDeviceMin();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDeviceMinTest8_pQCS7() {
    String name = "name";
    long size = 100L;
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(name, size);
    long result = cpioArchiveEntry.getDeviceMin();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithSizeAndName_Wmqm7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test", 100L);
        entry.setName("test2");
        assertEquals("test2", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInodeWithNameAndSize_kwjC7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
        assertEquals(0, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
void setTimeTest_sMwS0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setTime(0L);
    assertEquals(0L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTimeTest1_NPgJ1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 0L);
        entry.setTime(0L);
        assertEquals(0L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTimeTest2_mbxE2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        entry.setTime(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTimeTest7_xRlA7() {
        String name = "";
        CpioArchiveEntry entry = new CpioArchiveEntry(name, 0L);
        entry.setTime(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithName_GaMP2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(1, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithNameAndSize_lrKb7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test", 111L);
        assertEquals(1, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_ZXJb1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(Objects.hash("test"), entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCharacterDeviceFalse_lPDx1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertFalse(entry.isCharacterDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMin_yisq0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100L);
    entry.setRemoteDeviceMin(10L);
    assertEquals(10L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMinWithZeroRmin_kIGZ4() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100L);
    entry.setRemoteDeviceMin(0L);
    assertEquals(0L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getRemoteDeviceMinTest2_GuDq1_lBYR0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100);
    entry.setRemoteDeviceMin(200);
    assertEquals(200, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getRemoteDeviceMinTest_yJMu0_xoKg1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setRemoteDeviceMin(100);
    assertEquals(100, entry.getRemoteDeviceMin());
}
}