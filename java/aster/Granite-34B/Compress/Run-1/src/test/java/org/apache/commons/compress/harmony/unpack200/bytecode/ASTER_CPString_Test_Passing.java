/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPString_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNestedClassFileEntriesTest_6_Rdsl6() {
        CPUTF8 utf8 = new CPUTF8("string", 0);
        CPString cpString = new CPString(utf8, 0);
        ClassFileEntry[] expected = new ClassFileEntry[] { utf8 };
        assertArrayEquals(expected, cpString.getNestedClassFileEntries());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBody_UWqa0() throws IOException {
        CPUTF8 utf8 = new CPUTF8("test");
        CPString cpString = new CPString(utf8, 0);
        DataOutputStream dos = new DataOutputStream(System.out);
        cpString.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBodyWithEmptyUTF8_oUHN1() throws IOException {
        CPUTF8 utf8 = new CPUTF8("");
        CPString cpString = new CPString(utf8, 0);
        DataOutputStream dos = new DataOutputStream(System.out);
        cpString.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBodyWithNegativeGlobalIndex_azCs3() throws IOException {
        CPUTF8 utf8 = new CPUTF8("test");
        CPString cpString = new CPString(utf8, -1);
        DataOutputStream dos = new DataOutputStream(System.out);
        cpString.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBodyWithPositiveGlobalIndex_RXSg5() throws IOException {
        CPUTF8 utf8 = new CPUTF8("test");
        CPString cpString = new CPString(utf8, 1);
        DataOutputStream dos = new DataOutputStream(System.out);
        cpString.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBodyWithMaxGlobalIndex_FgBk6() throws IOException {
        CPUTF8 utf8 = new CPUTF8("test");
        CPString cpString = new CPString(utf8, Integer.MAX_VALUE);
        DataOutputStream dos = new DataOutputStream(System.out);
        cpString.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBodyWithMinGlobalIndex_QZbd7() throws IOException {
        CPUTF8 utf8 = new CPUTF8("test");
        CPString cpString = new CPString(utf8, Integer.MIN_VALUE);
        DataOutputStream dos = new DataOutputStream(System.out);
        cpString.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_vBzs0_JPrI0_fid1() {
        CPUTF8 utf8 = new CPUTF8("Hello", 0);
        CPString cpString = new CPString(utf8, 0);
        String result = cpString.toString();
        String expected = "String: UTF-8:Hello";
        org.junit.jupiter.api.Assertions.assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyValue_BZVh1_SvJW0_fid1() {
        CPUTF8 utf8 = new CPUTF8("", 0);
        CPString cpString = new CPString(utf8, 0);
        String result = cpString.toString();
        String expected = "String: UTF-8:";
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithPositiveGlobalIndex_WyGU5_jJwI0_fid1() {
        CPUTF8 utf8 = new CPUTF8("Hello");
        CPString cpString = new CPString(utf8, 1);
        String result = cpString.toString();
        String expected = "String: UTF-8:Hello";
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNegativeGlobalIndex_gFXr3_UGDz0_fid1() {
        CPUTF8 utf8 = new CPUTF8("Hello", -1);
        CPString cpString = new CPString(utf8, -1);
        String result = cpString.toString();
        String expected = "String: UTF-8:Hello";
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyValueAndNegativeGlobalIndex_bvaK9_XFTA0_fid1() {
        CPUTF8 utf8 = new CPUTF8("");
        CPString cpString = new CPString(utf8, -1);
        String result = cpString.toString();
        String expected = "String: UTF-8:";
        assertEquals(expected, result);
    }
}