/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPMethod_Test_Passing {
@Test
@Timeout(value =-643780123, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_Kguk0_qnco0() {
        CPUTF8 name = new CPUTF8("name", 0);
        CPUTF8 descriptor = new CPUTF8("descriptor", 0);
        long flags = 0;
        List<Attribute> attributes = new ArrayList<>();
        CPMethod cpMethod = new CPMethod(name, descriptor, flags, attributes);
        assertEquals(1, cpMethod.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyName_EjcG1_QcdU0() {
        CPUTF8 name = new CPUTF8("", 0);
        CPUTF8 descriptor = new CPUTF8("testDescriptor", 0);
        long flags = 0;
        List<Attribute> attributes = new ArrayList<>();
        CPMethod cpMethod = new CPMethod(name, descriptor, flags, attributes);
        String expected = "Method: UTF-8:(UTF-8:testDescriptor)";
        String actual = cpMethod.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_QSIr0_YZho0() {
        CPUTF8 name = new CPUTF8("testName", 0);
        CPUTF8 descriptor = new CPUTF8("testDescriptor", 0);
        long flags = 0;
        List<Attribute> attributes = new ArrayList<>();
        CPMethod cpMethod = new CPMethod(name, descriptor, flags, attributes);
        String expected = "Method: UTF-8:testName(UTF-8:testDescriptor)";
        String actual = cpMethod.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyDescriptor_eoME2_oRiz0() {
        CPUTF8 name = new CPUTF8("testName", 0);
        CPUTF8 descriptor = new CPUTF8("", 0);
        long flags = 0;
        List<Attribute> attributes = new ArrayList<>();
        CPMethod cpMethod = new CPMethod(name, descriptor, flags, attributes);
        String expected = "Method: UTF-8:testName(UTF-8:)";
        String actual = cpMethod.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyNameAndDescriptor_AMYq3_vWkc0() {
        CPUTF8 name = new CPUTF8("", 0);
        CPUTF8 descriptor = new CPUTF8("", 0);
        long flags = 0;
        List<Attribute> attributes = new ArrayList<>();
        CPMethod cpMethod = new CPMethod(name, descriptor, flags, attributes);
        String expected = "Method: UTF-8:(UTF-8:)";
        String actual = cpMethod.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithFlags_QtBI4_TMNa0() {
        CPUTF8 name = new CPUTF8("testName", 0);
        CPUTF8 descriptor = new CPUTF8("testDescriptor", 0);
        long flags = 1;
        List<Attribute> attributes = new ArrayList<>();
        CPMethod cpMethod = new CPMethod(name, descriptor, flags, attributes);
        String expected = "Method: UTF-8:testName(UTF-8:testDescriptor)";
        String actual = cpMethod.toString();
        assertEquals(expected, actual);
    }
}