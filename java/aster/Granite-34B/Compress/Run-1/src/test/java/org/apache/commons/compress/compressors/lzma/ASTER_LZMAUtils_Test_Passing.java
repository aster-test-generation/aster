/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMAUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUncompressedFilename_nLOZ0() {
		assertEquals("test.txt", LZMAUtils.getUncompressedFilename("test.txt.lzma"));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUncompressedFilenameWithNoCompression_lRBk1() {
		assertEquals("test.txt", LZMAUtils.getUncompressedFilename("test.txt"));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getCompressedFilename_withValidFileName_zjdS0() {
		String fileName = "example.txt";
		String expected = "example.txt.lzma";
		String actual =LZMAUtils.getCompressedFilename(fileName);
		Assertions.assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getCompressedFilename_withInvalidFileName_zlpI1() {
		String fileName = "example.exe";
		String expected = "example.exe.lzma";
		String actual =LZMAUtils.getCompressedFilename(fileName);
		Assertions.assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getCompressedFilename_withEmptyFileName_dvFO2() {
		String fileName = "";
		String expected = ".lzma";
		String actual =LZMAUtils.getCompressedFilename(fileName);
		Assertions.assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedFileName_withValidFileName_KZko0() {
    String fileName = "test.txt";
    String expected = "test.txt.lzma";
    assertEquals(expected,LZMAUtils.getCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedFileName_withInvalidFileName_hjAw1() {
    String fileName = "test.exe";
    String expected = "test.exe.lzma";
    assertEquals(expected,LZMAUtils.getCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedFileName_withEmptyFileName_mBjY2() {
    String fileName = "";
    String expected = ".lzma";
    assertEquals(expected,LZMAUtils.getCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedFileName_withNullFileName_zfRM3() {
    String fileName = null;
    String expected = null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLZMACompressionAvailable_rYJD0() {
    assertTrue(LZMAUtils.isLZMACompressionAvailable());
}
}