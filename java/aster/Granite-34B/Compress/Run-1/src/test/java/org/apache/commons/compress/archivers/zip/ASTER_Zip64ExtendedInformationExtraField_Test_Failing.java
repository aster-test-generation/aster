/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Zip64ExtendedInformationExtraField_Test_Failing {
private void assertLocalFileDataData(Zip64ExtendedInformationExtraField field, byte[] expectedData) {
        byte[] actualData = field.getLocalFileDataData();
        assert actualData != null;
        assert actualData.length == expectedData.length;
        assert Arrays.equals(actualData, expectedData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLocalFileDataLengthWhenSizeIsPresent_ReturnsCorrectLength_sgdP1_2() {
        Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(10), null);
        field = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(10), new ZipEightByteInteger(20));
        assertEquals(new ZipShort(32), field.getLocalFileDataLength());}
@Test
@Timeout(value =256, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderId_UKXL0() {
        Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField();
        assertEquals(ZipShort.getValue(new byte[] { 0x00, 0x01 }), extraField.getHeaderId().getValue());
    }
@Test
@Timeout(value =256, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderIdWithParam_jcEY1() {
        Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(1), new ZipEightByteInteger(2));
        assertEquals(ZipShort.getValue(new byte[] { 0x00, 0x01 }), extraField.getHeaderId().getValue());
    }
@Test
@Timeout(value =256, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderIdWithParam2_loXy2() {
        Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(1), new ZipEightByteInteger(2), new ZipEightByteInteger(3), new ZipLong(4));
        assertEquals(ZipShort.getValue(new byte[] { 0x00, 0x01 }), extraField.getHeaderId().getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLength_withAllFieldsPopulated_returnsCorrectLength_vzhH0() {
        Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(10),
            new ZipEightByteInteger(20),
            new ZipEightByteInteger(30),
            new ZipLong(40)
        );
        assertEquals(new ZipShort(22), field.getCentralDirectoryLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLength_withSomeFieldsNull_returnsCorrectLength_Rlgv1() {
        Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(10),
            null,
            new ZipEightByteInteger(30),
            null
        );
        assertEquals(new ZipShort(10), field.getCentralDirectoryLength());
    }
@Test
@Timeout(value =256, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderIdWithParam3_ocsf3_PAcF0() {
        Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(1), new ZipEightByteInteger(2), new ZipEightByteInteger(3), null);
        assertEquals(ZipShort.getValue(new byte[] { 0x00, 0x01 }), extraField.getHeaderId().getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData3_WYIA2_cdtZ0_fid2() throws ZipException {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(buffer, offset, length);
        assertEquals(true, zip64ExtendedInformationExtraField.getCompressedSize() != null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData4_ZOAr3_cxHU0_fid2() throws ZipException {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(buffer, offset, length);
        assertTrue(zip64ExtendedInformationExtraField.getRelativeHeaderOffset() != null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLocalFileDataLengthWhenSizeIsPresent_ReturnsCorrectLength_sgdP1() {
        Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(10), null);
        assertEquals(new ZipShort(16), field.getLocalFileDataLength());
        field = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(10), new ZipEightByteInteger(20));
        assertEquals(new ZipShort(32), field.getLocalFileDataLength());
    }
}