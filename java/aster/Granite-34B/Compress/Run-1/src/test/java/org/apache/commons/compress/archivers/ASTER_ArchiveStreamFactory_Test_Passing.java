/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Set;
import java.util.TreeMap;
import org.apache.commons.compress.utils.Sets;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveStreamFactory_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_GWfX0() throws ArchiveException {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        String archiverName = "zip";
        String entryEncoding = "UTF-8";
        ArchiveInputStream archiveInputStream = archiveStreamFactory.createArchiveInputStream(archiverName, inputStream, entryEncoding);
        assertNotNull(archiveInputStream);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStreamWithoutEntryEncoding_nnsU1() throws ArchiveException {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
        InputStream inputStream = new ByteArrayInputStream("test".getBytes());
        String archiverName = "zip";
        ArchiveInputStream archiveInputStream = archiveStreamFactory.createArchiveInputStream(archiverName, inputStream);
        assertNotNull(archiveInputStream);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEntryEncoding_hdCe0() {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("encoding");
        archiveStreamFactory.setEntryEncoding("entryEncoding");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEntryEncoding2_eyZu1() {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
        archiveStreamFactory.setEntryEncoding("entryEncoding");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntryEncoding_PgQK0() {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("encoding");
        String entryEncoding = archiveStreamFactory.getEntryEncoding();
        assertEquals("encoding", entryEncoding);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntryEncodingDefault_Xawy1() {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
        String entryEncoding = archiveStreamFactory.getEntryEncoding();
        assertEquals(null, entryEncoding);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutAllWithNullProvider_gqAi3_fid1() {
        Set<String> names = new HashSet<>();
        names.add("file1.txt");
        names.add("file2.txt");
        TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
        ArchiveStreamFactory.putAll(names, null, map);
        assertEquals(2, map.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamArchiveNames_XeWD0_HGZz0() {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
        Set<String> expected = Sets.newHashSet("ar", "zip", "tar", "jar", "cpio", "7z");
        assertEquals(expected, archiveStreamFactory.getOutputStreamArchiveNames());
    }
}