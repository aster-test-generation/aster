/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MultiReadOnlySeekableByteChannel_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testForFilesWithValidFiles_UUGt0() throws IOException {
        File file1 = new File("file1.txt");
        File file2 = new File("file2.txt");
        SeekableByteChannel channel = MultiReadOnlySeekableByteChannel.forFiles(file1, file2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testForFilesWithNullFiles_pTqF1() {
        File file1 = new File("file1.txt");
        File file2 = null;
        IOException exception = assertThrows(IOException.class, () -> MultiReadOnlySeekableByteChannel.forFiles(file1, file2));
        assertEquals("files must not be null", exception.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testForFilesWithEmptyFilesArray_icFE2() throws IOException {
        IOException exception = assertThrows(IOException.class, () -> MultiReadOnlySeekableByteChannel.forFiles());
        assertEquals("files must not be null", exception.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testForFilesWithSingleFile_HdJg3() throws IOException {
        File file = new File("file.txt");
        SeekableByteChannel channel = MultiReadOnlySeekableByteChannel.forFiles(file);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testForFilesWithMultipleFiles_fqQI4() throws IOException {
        File file1 = new File("file1.txt");
        File file2 = new File("file2.txt");
        File file3 = new File("file3.txt");
        SeekableByteChannel channel = MultiReadOnlySeekableByteChannel.forFiles(file1, file2, file3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_NdfA0() throws Exception {
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(null);
        ByteBuffer byteBuffer = null;
        int result = multiReadOnlySeekableByteChannel.read(byteBuffer);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testForFilesWithNullFiles_pTqF1_1() {
        File file1 = new File("file1.txt");
        File file2 = null;
        IOException exception = assertThrows(IOException.class, () -> MultiReadOnlySeekableByteChannel.forFiles(file1, file2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testForFilesWithEmptyFilesArray_icFE2_1() throws IOException {
        IOException exception = assertThrows(IOException.class, () -> MultiReadOnlySeekableByteChannel.forFiles());}
}