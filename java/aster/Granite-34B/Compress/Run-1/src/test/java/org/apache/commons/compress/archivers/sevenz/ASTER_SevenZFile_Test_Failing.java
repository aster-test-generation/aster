/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZFile_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchesWithValidSignatureAndLength_ZnRF0() {
		byte[] signature = new byte[] { 0x37, 0x7A, 0x58, 0x5A, 0x00 };
		int length = 5;
		assertTrue(SevenZFile.matches(signature, length));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInputStreamWithEntry_FdRi0() throws IOException {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"));
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        InputStream inputStream = sevenZFile.getInputStream(entry);
        assertNotNull(inputStream);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInputStreamWithEntryAndPassword_FQkV1() throws IOException {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), "password".toCharArray());
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        InputStream inputStream = sevenZFile.getInputStream(entry);
        assertNotNull(inputStream);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInputStream_slKV3() throws IOException {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        sevenZFile.getInputStream(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withFileAndPassword_returnsNextEntry_qDnn0() throws IOException {
        File file = new File("test.7z");
        char[] password = "password".toCharArray();
        SevenZFile sevenZFile = new SevenZFile(file, password);
        SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextEntryWithRandomAccess_IUKN2() throws IOException {
        File file = new File("test.7z");
        char[] password = "password".toCharArray();
        SevenZFile sevenZFile = new SevenZFile(file, password);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_jVwp0() throws IOException {
    byte[] b = new byte[10];
    SevenZFile file = new SevenZFile(new File("test.7z"), "password".toCharArray());
    int read = file.read(b);
    Assertions.assertTrue(read >= 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead2_LhSi1() throws IOException {
    byte[] b = new byte[10];
    SevenZFile file = new SevenZFile(new File("test.7z"), "password".toCharArray());
    int read = file.read(b, 0, b.length);
    Assertions.assertTrue(read >= 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithException_AwAk1() throws IOException {
        SevenZFile file = new SevenZFile(new File("test.7z"), "password".toCharArray());
        try {
            file.read();
        } catch (IOException e) {
            fail("Exception should not be thrown");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextEntryWithFileAndPassword_jMTA0() throws IOException {
        File file = new File("test.7z");
        char[] password = "password".toCharArray();
        SevenZFile sevenZFile = new SevenZFile(file, password);
        SevenZArchiveEntry entry = sevenZFile.getNextEntry();
        assertNotNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextEntryWithFile_oXgW10() throws IOException {
        File file = new File("test.7z");
        SevenZFile sevenZFile = new SevenZFile(file);
        SevenZArchiveEntry entry = sevenZFile.getNextEntry();
        assertNotNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithFileAndPassword_zVPJ0() throws IOException {
        File file = new File("test.7z");
        char[] password = "password".toCharArray();
        SevenZFile sevenZFile = new SevenZFile(file, password);
        sevenZFile.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextEntry_withFileAndPassword_returnsNextEntry_tSXe0() throws IOException {
    SevenZFile file = new SevenZFile(new File("test.7z"), "password".toCharArray());
    SevenZArchiveEntry entry = file.getNextEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextEntry_withFile_returnsNextEntry_TPOD6() throws IOException {
    SevenZFile file = new SevenZFile(new File("test.7z"));
    SevenZArchiveEntry entry = file.getNextEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getInputStreamTest1_VsnA1_qoUU0() throws IOException {
    SevenZFile file = new SevenZFile(new File("test.7z"));
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    InputStream result = file.getInputStream(entry);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getStatisticsForCurrentEntry_fMdW0_EfFa0_1() throws IOException {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
        InputStreamStatistics statistics = sevenZFile.getStatisticsForCurrentEntry();
        assertEquals(0, statistics.getCompressedCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getStatisticsForCurrentEntry_fMdW0_EfFa0_2() throws IOException {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
        InputStreamStatistics statistics = sevenZFile.getStatisticsForCurrentEntry();
        assertEquals(0, statistics.getUncompressedCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultName_WithPassword_kNXL3_wxow0() throws IOException {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), "password".toCharArray());
        String defaultName = sevenZFile.getDefaultName();
        assertEquals("test", defaultName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead2_LhSi1_fid2() throws IOException {
    byte[] b = new byte[10];
    SevenZFile file = new SevenZFile(new File("test.7z"), "password".toCharArray());
    int read = file.read(b, 0, b.length);
    assertEquals(10, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead5_ciif4_fid2() throws IOException {
    byte[] b = new byte[10];
    SevenZFile file = new SevenZFile(new File("test.7z"), "password".toCharArray());
    int read = file.read(b, 0, b.length);
    Assertions.assertEquals(10, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead11_joFG10_fid2() throws IOException {
    byte[] b = new byte[10];
    SevenZFile file = new SevenZFile(new File("test.7z"), "password".toCharArray());
    int read = file.read(b, 0, b.length);
    Assertions.assertTrue(read == 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextEntry_withFileAndPassword_returnsNextEntry_hPCn11_fid2() throws IOException {
    SevenZFile file = new SevenZFile(new File("test.7z"), "password".toCharArray());
    SevenZArchiveEntry entry = file.getNextEntry();
    assertEquals(entry.getName(), "file1.txt");
}
}