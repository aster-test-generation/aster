/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveUtil_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCalculateChecksum_zvlE0() {
        byte[] buffer = new byte[1024]; // Assuming buffer size is 1024
        int expectedChecksum = 12345; // Replace with the expected checksum value
        int actualChecksum = DumpArchiveUtil.calculateChecksum(buffer);
        assertEquals(expectedChecksum, actualChecksum);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCalculateChecksumWithEmptyBuffer_UIjh1() {
        byte[] buffer = new byte[0];
        int expectedChecksum = 0;
        int actualChecksum = DumpArchiveUtil.calculateChecksum(buffer);
        assertEquals(expectedChecksum, actualChecksum);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInoWithNullBuffer_DwQA1() {
        byte[] buffer = null;
        int expected = 0;
        int actual = DumpArchiveUtil.getIno(buffer);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInoWithEmptyBuffer_JVSi2() {
        byte[] buffer = new byte[0];
        int expected = 0;
        int actual = DumpArchiveUtil.getIno(buffer);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert16_koeF0() {
        byte[] buffer = new byte[]{0x00, 0x0A};
        int offset = 0;
        int expected = 10;
        int actual = DumpArchiveUtil.convert16(buffer, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert16WithOffset_LIbu1() {
        byte[] buffer = new byte[]{0x00, 0x0A, 0x00, 0x0B};
        int offset = 2;
        int expected = 11;
        int actual = DumpArchiveUtil.convert16(buffer, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert64WithOffset_jgMA1() {
        byte[] buffer = new byte[8];
        int offset = 1;
        long expected = ByteUtils.fromLittleEndian(buffer, offset, 8);
        long actual = DumpArchiveUtil.convert64(buffer, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert64WithNegativeOffset_EhDp2() {
        byte[] buffer = new byte[8];
        int offset = -1;
        try {
            DumpArchiveUtil.convert64(buffer, offset);
            fail("Exception expected");
        } catch (IllegalArgumentException e) {
            assertEquals("Offset cannot be negative", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert64WithNullBuffer_btAs3() {
        byte[] buffer = null;
        int offset = 0;
        try {
            DumpArchiveUtil.convert64(buffer, offset);
            fail("Exception expected");
        } catch (IllegalArgumentException e) {
            assertEquals("Buffer cannot be null", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert64WithEmptyBuffer_bHDN4() {
        byte[] buffer = new byte[0];
        int offset = 0;
        try {
            DumpArchiveUtil.convert64(buffer, offset);
            fail("Exception expected");
        } catch (IllegalArgumentException e) {
            assertEquals("Buffer length must be at least 8", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert64WithSmallBuffer_dknw5() {
        byte[] buffer = new byte[7];
        int offset = 0;
        try {
            DumpArchiveUtil.convert64(buffer, offset);
            fail("Exception expected");
        } catch (IllegalArgumentException e) {
            assertEquals("Buffer length must be at least 8", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert64WithLargeBuffer_FaCK6() {
        byte[] buffer = new byte[9];
        int offset = 0;
        try {
            DumpArchiveUtil.convert64(buffer, offset);
            fail("Exception expected");
        } catch (IllegalArgumentException e) {
            assertEquals("Buffer length must be at most 8", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert64WithNegativeOffsetAndSmallBuffer_aRpK7() {
        byte[] buffer = new byte[7];
        int offset = -1;
        try {
            DumpArchiveUtil.convert64(buffer, offset);
            fail("Exception expected");
        } catch (IllegalArgumentException e) {
            assertEquals("Offset cannot be negative", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert64WithNegativeOffsetAndLargeBuffer_nUQd8() {
        byte[] buffer = new byte[9];
        int offset = -1;
        try {
            DumpArchiveUtil.convert64(buffer, offset);
            fail("Exception expected");
        } catch (IllegalArgumentException e) {
            assertEquals("Offset cannot be negative", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyWithValidBuffer_ASHA1() {
    byte[] buffer = new byte[32];
    buffer[24] = 0x01;
    buffer[25] = 0x02;
    buffer[26] = 0x03;
    buffer[27] = 0x04;
    boolean actual = DumpArchiveUtil.verify(buffer);
    boolean expected = true;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCalculateChecksum_LtRk4() {
    byte[] buffer = new byte[32];
    buffer[24] = 0x01;
    buffer[25] = 0x02;
    buffer[26] = 0x03;
    buffer[27] = 0x04;
    int actual = DumpArchiveUtil.calculateChecksum(buffer);
    int expected = 0x1234;
    assertEquals(expected, actual);
}
}