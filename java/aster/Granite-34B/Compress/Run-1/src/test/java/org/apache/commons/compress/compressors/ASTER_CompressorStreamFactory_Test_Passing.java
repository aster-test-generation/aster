/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Set;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CompressorStreamFactory_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetZstandard_OwHO0() {
        assertEquals("zstd", CompressorStreamFactory.getZstandard());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetZstandardWithDecompressUntilEOF_elsB1() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
        assertEquals("zstd", compressorStreamFactory.getZstandard());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetZstandardWithMemoryLimitInKb_icJW2() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
        assertEquals("zstd", compressorStreamFactory.getZstandard());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetZstandardWithoutParameters_ejDb3() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
        assertEquals("zstd", compressorStreamFactory.getZstandard());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBzip2_TFUG0() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBzip2WithCoverage_eWrh1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    assertEquals("bzip2", factory.getBzip2());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetInputStreamCompressorNames_boxg0_1() {
		CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
		Set<String> compressorNames = compressorStreamFactory.getInputStreamCompressorNames();
		assertNotNull(compressorNames);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetInputStreamCompressorNames_boxg0_2() {
		CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
		Set<String> compressorNames = compressorStreamFactory.getInputStreamCompressorNames();
		assertTrue(compressorNames.size() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetInputStreamCompressorNames_boxg0_3() {
		CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
		Set<String> compressorNames = compressorStreamFactory.getInputStreamCompressorNames();
		assertEquals(compressorNames.size(),14);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getGzip_DefaultConstructor_ReturnsGzip_aTtb0() {
        assertEquals("gz", CompressorStreamFactory.getGzip());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getGzip_CustomConstructor_ReturnsGzip_VcYY1_1() {
        assertEquals("gz", new CompressorStreamFactory(true).getGzip());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getGzip_CustomConstructor_ReturnsGzip_VcYY1_2() {
        assertEquals("gz", new CompressorStreamFactory(true, 1024).getGzip());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzma_oZKH0() {
    assertEquals("lzma", CompressorStreamFactory.getLzma());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzmaWithDecompressUntilEOF_Ilqr1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzmaWithMemoryLimit_rSxT2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyRaw_mOnw0() {
    assertEquals("snappy-raw", CompressorStreamFactory.getSnappyRaw());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyRawWithCoverage_OMgU1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    assertEquals("snappy-raw", factory.getSnappyRaw());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyRawWithCoverageAndLimit_IBvA2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    assertEquals("snappy-raw", factory.getSnappyRaw());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getDecompressConcatenated_DefaultConstructor_EYIY0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    boolean actual = factory.getDecompressConcatenated();
    boolean expected = false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getDecompressConcatenated_OneArgConstructor_AwzN1() {
    boolean decompressUntilEOF = true;
    CompressorStreamFactory factory = new CompressorStreamFactory(decompressUntilEOF);
    boolean actual = factory.getDecompressConcatenated();
    assertEquals(decompressUntilEOF, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getDecompressConcatenated_TwoArgConstructor_WEBW2() {
    boolean decompressUntilEOF = false;
    int memoryLimitInKb = 1024;
    CompressorStreamFactory factory = new CompressorStreamFactory(decompressUntilEOF, memoryLimitInKb);
    boolean actual = factory.getDecompressConcatenated();
    assertEquals(decompressUntilEOF, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getDecompressConcatenated_ThreeArgConstructor_DzzH3() {
    boolean decompressUntilEOF = true;
    int memoryLimitInKb = 2048;
    CompressorStreamFactory factory = new CompressorStreamFactory(decompressUntilEOF, memoryLimitInKb);
    boolean actual = factory.getDecompressConcatenated();
    assertEquals(decompressUntilEOF, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getDecompressConcatenated_FourArgConstructor_JuoK4() {
    boolean decompressUntilEOF = false;
    int memoryLimitInKb = 4096;
    CompressorStreamFactory factory = new CompressorStreamFactory(decompressUntilEOF, memoryLimitInKb);
    boolean actual = factory.getDecompressConcatenated();
    assertEquals(decompressUntilEOF, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getDecompressConcatenated_FiveArgConstructor_cmyE5() {
    boolean decompressUntilEOF = true;
    int memoryLimitInKb = 8192;
    CompressorStreamFactory factory = new CompressorStreamFactory(decompressUntilEOF, memoryLimitInKb);
    boolean actual = factory.getDecompressConcatenated();
    assertEquals(decompressUntilEOF, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getDecompressConcatenated_SixArgConstructor_tWNk6() {
    boolean decompressUntilEOF = false;
    int memoryLimitInKb = 16384;
    CompressorStreamFactory factory = new CompressorStreamFactory(decompressUntilEOF, memoryLimitInKb);
    boolean actual = factory.getDecompressConcatenated();
    assertEquals(decompressUntilEOF, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getDecompressConcatenated_SevenArgConstructor_zGiv7() {
    boolean decompressUntilEOF = true;
    int memoryLimitInKb = 32768;
    CompressorStreamFactory factory = new CompressorStreamFactory(decompressUntilEOF, memoryLimitInKb);
    boolean actual = factory.getDecompressConcatenated();
    assertEquals(decompressUntilEOF, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getDecompressConcatenated_EightArgConstructor_jqWI8() {
    boolean decompressUntilEOF = false;
    int memoryLimitInKb = 65536;
    CompressorStreamFactory factory = new CompressorStreamFactory(decompressUntilEOF, memoryLimitInKb);
    boolean actual = factory.getDecompressConcatenated();
    assertEquals(decompressUntilEOF, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructorWithDecompressUntilEOF_WyHX1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        assertEquals(true, factory.getDecompressUntilEOF());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructorWithDecompressUntilEOFAndMemoryLimit_wMSG2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        assertEquals(true, factory.getDecompressUntilEOF());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPack200_TbGC0() {
        assertEquals("pack200", CompressorStreamFactory.getPack200());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPack200WithCoverage_Awow1_2() {
        assertEquals("pack200", new CompressorStreamFactory().getPack200());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLZ4Block_DqVL0() {
        assertEquals("lz4-block", CompressorStreamFactory.getLZ4Block());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLZ4BlockWithCoverage_fDnj1_2() {
        assertEquals("lz4-block", new CompressorStreamFactory().getLZ4Block());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLZ4BlockWithCoverage_fDnj1_3() {
        assertEquals("lz4-block", new CompressorStreamFactory(true).getLZ4Block());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLZ4BlockWithCoverage_fDnj1_4() {
        assertEquals("lz4-block", new CompressorStreamFactory(true, 1024).getLZ4Block());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetZstandard_BZFZ1() {
        String zstandard = CompressorStreamFactory.getZstandard();
        assertEquals("zstd", zstandard);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBzip2_htlX2() {
        String bzip2 = CompressorStreamFactory.getBzip2();
        assertEquals("bzip2", bzip2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetZ_kGYZ6() {
        String z = CompressorStreamFactory.getZ();
        assertEquals("z", z);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLZ4Framed_vijq7() {
        String lz4Framed = CompressorStreamFactory.getLZ4Framed();
        assertEquals("lz4-framed", lz4Framed);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLzma_FpKj9() {
        String lzma = CompressorStreamFactory.getLzma();
        assertEquals("lzma", lzma);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSnappyRaw_BhZp10() {
        String snappyRaw = CompressorStreamFactory.getSnappyRaw();
        assertEquals("snappy-raw", snappyRaw);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeflate_uIfP0() {
        assertEquals("deflate", CompressorStreamFactory.getDeflate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeflateWithDecompressUntilEOF_hVAv1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        assertEquals("deflate", factory.getDeflate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeflateWithMemoryLimit_AYyt2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        assertEquals("deflate", factory.getDeflate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeflateDefaultConstructor_xNCA3() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        assertEquals("deflate", factory.getDeflate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getSnappyFramedTest1_jDNs0() {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    String string0 = compressorStreamFactory0.getSnappyFramed();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getSnappyFramedTest2_NFHk1() {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false, 0);
    String string0 = compressorStreamFactory0.getSnappyFramed();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getSnappyFramedTest3_syEz2() {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false);
    String string0 = compressorStreamFactory0.getSnappyFramed();
    assertEquals("snappy-framed", string0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBrotli_niij0() {
        assertEquals("br", CompressorStreamFactory.getBrotli());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompressorStreamFactory_QNrW1() {
        new CompressorStreamFactory();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompressorStreamFactoryBoolean_NpbU2() {
        new CompressorStreamFactory(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompressorStreamFactoryBooleanInt_Xjzv3() {
        new CompressorStreamFactory(true, 1024);
    }
}