/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.zstandard;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZstdUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSkippableSignatureAndLength_vMbk2() {
    byte[] signature = new byte[] { 0x50, 0x2a, 0x4d, 0x18, 0x53, 0x4c, 0x41, 0x4e, 0x44 };
    int length = 9;
    boolean result = ZstdUtils.matches(signature, length);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithInvalidSignatureAndLength_tKDV3() {
    byte[] signature = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    int length = 8;
    boolean result = ZstdUtils.matches(signature, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPublicStaticVoidZstdUtilsSetCacheZstdAvailablityFinalBooleanDoCache_pwbF0() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithZstandardSignatureAndLength_KDNi0_BgvO0() {
    byte[] signature = new byte[] { (byte) 0x28, (byte) 0xb5, (byte) 0x2f, (byte) 0x4f, (byte) 0x46, (byte) 0x46, (byte) 0x54, (byte) 0x53 };
    int length = 8;
    boolean result = ZstdUtils.matches(signature, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithZstandardSignatureAndSmallerLength_AWuN1_cTYo0() {
    byte[] signature = new byte[] { (byte) 0x28, (byte) 0xb5, (byte) 0x2f, (byte) 0x4f, (byte) 0x46, (byte) 0x46, (byte) 0x54, (byte) 0x53 };
    int length = 7;
    boolean result = ZstdUtils.matches(signature, length);
    assertFalse(result);
}
}