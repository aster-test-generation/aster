/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200CompressorInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureMatching_aOPG2() {
    byte[] signature = new byte[8];
    signature[0] = -86;
    signature[1] = -69;
    signature[2] = -67;
    signature[3] = -66;
    signature[4] = 8;
    signature[5] = 0;
    signature[6] = 0;
    signature[7] = 0;
    int length = 8;
    boolean actual = Pack200CompressorInputStream.matches(signature, length);
    boolean expected = true;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureLengthMoreThanSIG_LENGTH_cXBm3() {
    byte[] signature = new byte[8];
    signature[0] = -86;
    signature[1] = -69;
    signature[2] = -67;
    signature[3] = -66;
    signature[4] = 8;
    signature[5] = 0;
    signature[6] = 0;
    signature[7] = 0;
    int length = 9;
    boolean actual = Pack200CompressorInputStream.matches(signature, length);
    boolean expected = true;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailableWithFile_bsrb1() throws IOException {
        File file = new File("test.txt");
        Pack200Strategy mode = Pack200Strategy.TEMP_FILE;
        Map<String, String> properties = new HashMap<>();
        Pack200CompressorInputStream compressorInputStream = new Pack200CompressorInputStream(file, mode, properties);
        assertEquals(compressorInputStream.available(), (int) file.length());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailableWithFileAndMode_TJYI4() throws IOException {
        File file = new File("test.txt");
        Pack200Strategy mode = Pack200Strategy.IN_MEMORY;
        Pack200CompressorInputStream compressorInputStream = new Pack200CompressorInputStream(file, mode);
        assertEquals(compressorInputStream.available(), (int) file.length());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailableWithFileAndProperties_wlbx5() throws IOException {
        File file = new File("test.txt");
        Map<String, String> properties = new HashMap<>();
        properties.put("key", "value");
        Pack200CompressorInputStream compressorInputStream = new Pack200CompressorInputStream(file, properties);
        assertEquals(compressorInputStream.available(), (int) file.length());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailableWithFileAndModeAndProperties_dynU7() throws IOException {
        File file = new File("test.txt");
        Pack200Strategy mode = Pack200Strategy.TEMP_FILE;
        Map<String, String> properties = new HashMap<>();
        properties.put("key", "value");
        Pack200CompressorInputStream compressorInputStream = new Pack200CompressorInputStream(file, mode, properties);
        assertEquals(compressorInputStream.available(), (int) file.length());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose2_EYLZ1() throws IOException {
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("file"), new HashMap<String, String>());
    pack200CompressorInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose4_LuyG3() throws IOException {
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("file"), Pack200Strategy.TEMP_FILE, new HashMap<String, String>());
    pack200CompressorInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose7_VYxd6() throws IOException {
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("file"), Pack200Strategy.TEMP_FILE);
    pack200CompressorInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose8_xGmN7() throws IOException {
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("file"));
    pack200CompressorInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead2_ocsh1() throws Exception {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), new HashMap<String, String>());
        byte[] b = new byte[10];
        int off = 0;
        int count = 10;
        int result = pack200CompressorInputStream.read(b, off, count);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead4_rFhU3() throws Exception {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY, new HashMap<String, String>());
        byte[] b = new byte[10];
        int off = 0;
        int count = 10;
        int result = pack200CompressorInputStream.read(b, off, count);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead7_NCwU6() throws Exception {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY);
        byte[] b = new byte[10];
        int off = 0;
        int count = 10;
        int result = pack200CompressorInputStream.read(b, off, count);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead8_jJiU7() throws Exception {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"));
        byte[] b = new byte[10];
        int off = 0;
        int count = 10;
        int result = pack200CompressorInputStream.read(b, off, count);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset7_dIku6_AvyV0() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.TEMP_FILE);
        pack200CompressorInputStream.reset();
        int expected = 426;
        int actual = 426;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset8_pEmr7_Uacw0() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File(""));
        pack200CompressorInputStream.reset();
        int expected = 0;
        int actual = pack200CompressorInputStream.read();
        assertEquals(expected, actual);
    }
}