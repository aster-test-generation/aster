/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JarMarker_Test_Passing {
    private JarMarker jarMarker = new JarMarker();    
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData_NoData_ZIpw0() throws ZipException {
        JarMarker jarMarker = new JarMarker();
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        jarMarker.parseFromLocalFileData(data, offset, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData_WithOffsetAndLength_RYtp1() throws ZipException {
        JarMarker jarMarker = new JarMarker();
        byte[] data = new byte[10];
        int offset = 2;
        int length = 8;
        try {
            jarMarker.parseFromLocalFileData(data, offset, length);
            fail("Expected ZipException to be thrown");
        } catch (ZipException e) {
            assertEquals("JarMarker doesn't expect any data", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryDataTest_Okdp0() {
        byte[] expected = ByteUtils.EMPTY_BYTE_ARRAY;
        byte[] actual = jarMarker.getCentralDirectoryData();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_kPnQ0() {
    JarMarker jarMarker = new JarMarker();
    byte[] result = jarMarker.getLocalFileDataData();
    assert result == ByteUtils.EMPTY_BYTE_ARRAY;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataCoverage_STMp1() {
    JarMarker jarMarker = new JarMarker();
    byte[] result = jarMarker.getLocalFileDataData();
    assert result != null;
    assert result.length == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderId_fCGF0() {
        JarMarker jarMarker = new JarMarker();
        ZipShort expected = jarMarker.ID;
        ZipShort actual = jarMarker.getHeaderId();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderIdCoverage_ayQM1() {
        JarMarker jarMarker = new JarMarker();
        jarMarker.getHeaderId();
        jarMarker.getHeaderId();
        jarMarker.getHeaderId();
        jarMarker.getHeaderId();
        jarMarker.getHeaderId();
        jarMarker.getHeaderId();
        jarMarker.getHeaderId();
        jarMarker.getHeaderId();
        jarMarker.getHeaderId();
        jarMarker.getHeaderId();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getCentralDirectoryLengthTest3_YMhd2() {
    JarMarker jarMarker = new JarMarker();
    ZipShort result = jarMarker.getCentralDirectoryLength();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataLength_DwRd0_fid2() {
        JarMarker jarMarker = new JarMarker();
        ZipShort zipShort = jarMarker.getLocalFileDataLength();
    assertNull(null);
    }
}