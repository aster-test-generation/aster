/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.function.Function;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse; 
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveEntry_Test_Failing {
private int versionRequired;
ZipArchiveEntry ziparchiveentry;
private static int SHORT_SHIFT = 16;
private long externalAttributes;
private UnparseableExtraFieldData unparseableExtra;
private int internalAttributes;
private int rawFlag;
private long time = -1;
private String name;
private byte[] rawName;
private int method = ZipMethod.UNKNOWN_CODE;
private boolean lastModifiedDateSet;
private static String ZIP_DIR_SEP = "/";
private static int SHORT_MASK = 0xFFFF;
ZipExtraField ze;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequiredWithMethod_NElc7() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setMethod(ZipArchiveEntry.DEFLATED);
        int versionRequired = entry.getVersionRequired();
        assertEquals(1, versionRequired);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUnixModeWithNegativeMode_DQvy1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setUnixMode(-1);
        assertEquals(-1, entry.getUnixMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternalAttributes() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        externalAttributes = 100L;
        doReturn(externalAttributes).when(ziparchiveentry).getExternalAttributes();
        long result = ziparchiveentry.getExternalAttributes();
        assertEquals(externalAttributes, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLastModifiedDate() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
    	Date date = new Date();
    	when(ziparchiveentry.getTime()).thenReturn(date.getTime());
    	assertEquals(date, ziparchiveentry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveUnparseableExtraFieldDataWhenUnparseableExtraIsNullOrEmpty_KuJg0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.removeUnparseableExtraFieldData();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNull_erhI1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setCreationTime(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithZipEntry_yyVf3() throws IOException {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        entry.setCreationTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithZipArchiveEntry_jSNn5() throws ZipException {
        ZipArchiveEntry entry1 = new ZipArchiveEntry("test.txt");
        ZipArchiveEntry entry2 = new ZipArchiveEntry(entry1);
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        entry2.setCreationTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithNullArgument_ftfD1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setCreationTime(null);
    assertEquals(null, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidArgument_IZSU2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(-1);
    entry.setCreationTime(time);
    assertEquals(null, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithMaxArgument_nAge3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(0x7FFFFFFF_00000000L);
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeNull_OKpX1_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    ZipEntry result = entry.setCreationTime(null);
    assertEquals(null, entry.getCreationTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeNull_OKpX1_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    ZipEntry result = entry.setCreationTime(null);
    assertEquals(result, entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeInvalid_eMRg2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    try {
        entry.setCreationTime(FileTime.fromMillis(-1));
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeNull_MPzQ1_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipEntry result = entry.setCreationTime(null);
        assertNull(entry.getCreationTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithNull_ibXw1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setCreationTime(null);
    assertNull(entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidTime_rdBL2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(-1);
    entry.setCreationTime(time);
    assertNull(entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithNegativeTime_GIyz4() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(-1000);
    entry.setCreationTime(time);
    assertNull(entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetName_1() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        name = "testName";
        rawName = new byte[]{0x74, 0x65, 0x73, 0x74};
        ziparchiveentry.setName(name, rawName);
        verify(ziparchiveentry, times(1)).setName(name);
        assertNotEquals(ziparchiveentry.getName(), name);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetName_2() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        name = "testName";
        rawName = new byte[]{0x74, 0x65, 0x73, 0x74};
        ziparchiveentry.setName(name, rawName);
        verify(ziparchiveentry, times(1)).setName(name);
        assertNotEquals(ziparchiveentry.getRawName(), rawName);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_TOEH0_2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        String name = "newName.txt";
        byte[] rawName = name.getBytes();
        entry.setName(name, rawName);
        assertEquals(rawName, entry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNullName_bXrc1_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        String name = null;
        byte[] rawName = null;
        entry.setName(name, rawName);
        assertEquals(name, entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEmptyName_BPVl2_2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        String name = "";
        byte[] rawName = new byte[0];
        entry.setName(name, rawName);
        assertEquals(rawName, entry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_kvCT0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] extraData = new byte[] {0x01, 0x02, 0x03};
        entry.setExtra(extraData);
        assertEquals(extraData, entry.getExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_wpbW0_2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    byte[] extraData = new byte[10];
    entry.setExtra(extraData);
    assertEquals(extraData, entry.getExtra());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithNull_nNuz1() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setExtra(null);
    assertEquals(null, entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithEmptyArray_PVHh2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    byte[] extraData = new byte[0];
    entry.setExtra(extraData);
    assertEquals(extraData, entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithNegativeLength_IypE4() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    byte[] extraData = new byte[-10];
    entry.setExtra(extraData);
    assertEquals(null, entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithInvalidType_JtPo6() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    String extraData = "invalid data";
    entry.setExtra(extraData.getBytes());
    assertEquals(null, entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithNullData_eXUc1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setExtra(null);
    assertNull(entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithEmptyArrayArgument_eqNG2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] emptyArray = new byte[0];
        entry.setExtra(emptyArray);
        assertEquals(emptyArray, entry.getExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithNullData_NsPU1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setExtra(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithNegativeLength_FYYs5() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    byte[] extraData = new byte[-1]; // Replace with negative length
    entry.setExtra(extraData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithMaxNegativeLength_FOIk9() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    byte[] extraData = new byte[Integer.MIN_VALUE]; // Replace with max negative length
    entry.setExtra(extraData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldsWithNull_hlHU0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setExtraFields(null);
        assertNull(entry.getExtraFields());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldData_UkSg0() {
        UnparseableExtraFieldData unparseableExtra = new UnparseableExtraFieldData();
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(unparseableExtra, entry.getUnparseableExtraFieldData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldDataCoverage_KFyM1_2() {
        UnparseableExtraFieldData unparseableExtra = new UnparseableExtraFieldData();
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(unparseableExtra.getCentralDirectoryData(), entry.getUnparseableExtraFieldData().getCentralDirectoryData());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldDataCoverage_KFyM1_3() {
        UnparseableExtraFieldData unparseableExtra = new UnparseableExtraFieldData();
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(unparseableExtra.getHeaderId(), entry.getUnparseableExtraFieldData().getHeaderId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldDataCoverage_KFyM1_4() {
        UnparseableExtraFieldData unparseableExtra = new UnparseableExtraFieldData();
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(unparseableExtra.getLocalFileDataData(), entry.getUnparseableExtraFieldData().getLocalFileDataData());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldDataCoverage_KFyM1_5() {
        UnparseableExtraFieldData unparseableExtra = new UnparseableExtraFieldData();
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(unparseableExtra.getLocalFileDataLength(), entry.getUnparseableExtraFieldData().getLocalFileDataLength());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldDataCoverage_KFyM1_6() {
        UnparseableExtraFieldData unparseableExtra = new UnparseableExtraFieldData();
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(unparseableExtra.getCentralDirectoryLength(), entry.getUnparseableExtraFieldData().getCentralDirectoryLength());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_NullName_bIzb0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setName(null);
        assertEquals(null, entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguous_wvZR0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertTrue(entry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguousWithFile_xiaT1() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        assertTrue(entry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        when(ziparchiveentry.getName()).thenReturn("test");
        assertEquals("test".hashCode(), ziparchiveentry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalHeaderOffset_rcRk0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertEquals(0L, entry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtra_mTfL0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] extraData = new byte[] {0x01, 0x02, 0x03};
        entry.setCentralDirectoryExtra(extraData);
        assertEquals(extraData, entry.getCentralDirectoryExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithNullArgument_gWUc1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setCentralDirectoryExtra(null);
        assertEquals(null, entry.getCentralDirectoryExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithEmptyArgument_aJUC2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] emptyData = new byte[0];
        entry.setCentralDirectoryExtra(emptyData);
        assertEquals(emptyData, entry.getCentralDirectoryExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithValidArgument_Knpj3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] validData = new byte[] {0x01, 0x02, 0x03};
        entry.setCentralDirectoryExtra(validData);
        assertEquals(validData, entry.getCentralDirectoryExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithMaxArgument_ZiCE5() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] maxData = new byte[65535];
        entry.setCentralDirectoryExtra(maxData);
        assertEquals(maxData, entry.getCentralDirectoryExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithMinArgument_tmPH6() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] minData = new byte[1];
        entry.setCentralDirectoryExtra(minData);
        assertEquals(minData, entry.getCentralDirectoryExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithRandomArgument_ywlg7() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] randomData = new byte[] {0x12, 0x34, 0x56};
        entry.setCentralDirectoryExtra(randomData);
        assertEquals(randomData, entry.getCentralDirectoryExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_QpUw0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] extra = new byte[10];
        Arrays.fill(extra, (byte) 1);
        entry.setExtra(extra);
        assertEquals(extra, entry.getExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithNullArgument_seev1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] extra = null;
        entry.setExtra(extra);
        assertEquals(extra, entry.getExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithEmptyArgument_tBgn2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] extra = new byte[0];
        entry.setExtra(extra);
        assertEquals(extra, entry.getExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithNegativeLengthArgument_LIYM3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] extra = new byte[-1];
        entry.setExtra(extra);
        assertEquals(extra, entry.getExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithIOException_amNs4_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] extra = new byte[10];
        Arrays.fill(extra, (byte) 1);
        ZipException exception = assertThrows(ZipException.class, () -> entry.setExtra(extra));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_Path_String_fIRk1() throws IOException {
        final Path inputPath = new File("test").toPath();
        final String entryName = "entryName";
        final ZipArchiveEntry entry = new ZipArchiveEntry(inputPath, entryName, new LinkOption[0]);
        assertEquals(entryName, entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_ZipEntry_IQmg2() throws ZipException {
        final java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("entryName");
        final ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        assertEquals(zipEntry.getName(), entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_Entry_tfXF3() throws ZipException {
        final ZipArchiveEntry entry1 = new ZipArchiveEntry("entryName");
        final ZipArchiveEntry entry2 = new ZipArchiveEntry(entry1);
        assertEquals(entry1.getName(), entry2.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getExtraFields_includeUnparseable_true_gLnf0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        ZipExtraField[] extraFields = entry.getExtraFields(true);
        assertEquals(extraFields.length, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTimeWithZipEntry_AYXn1() throws IOException, ZipException {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        entry.setLastModifiedTime(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithNullFileTime_GLec1_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipEntry result = entry.setLastAccessTime(null);
        assertEquals(null, entry.getLastAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithNullFileTime_GLec1_2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipEntry result = entry.setLastAccessTime(null);
        assertEquals(result, entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullName_YtZL1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        assertEquals(null, entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataExtra() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
    	byte[] expected = new byte[0];
    	when(ziparchiveentry.getExtra()).thenReturn(expected);
    	byte[] actual = ziparchiveentry.getLocalFileDataExtra();
    	assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataExtraWithExtraData_kCxM1() {
        byte[] extraData = new byte[] { 0x01, 0x02, 0x03 };
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setExtra(extraData);
        byte[] actual = entry.getLocalFileDataExtra();
        assertEquals(extraData, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisDirectory() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        when(ziparchiveentry.getName()).thenReturn("testDir" + ZIP_DIR_SEP);
        assertTrue(ziparchiveentry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRawNameWithValidInput_Qgcx0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] expected = {116, 101, 115, 116, 46, 116, 120, 116};
        assertArrayEquals(expected, entry.getRawName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRawNameWithInvalidInput_CeJN3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("invalid");
        byte[] expected = {105, 110, 118, 97, 108, 105, 100};
        assertArrayEquals(expected, entry.getRawName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testclone() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
    	Object clone = ziparchiveentry.clone();
    	assertEquals(clone, ziparchiveentry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithEntry_DMAf1() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry(new ZipArchiveEntry("name"));
        Object clone = entry.clone();
        assertEquals(entry, clone);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithZipEntry_EryM3() throws Exception {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("name");
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        Object clone = entry.clone();
        assertEquals(entry, clone);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisUnixSymlink() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
    	when(ziparchiveentry.getUnixMode()).thenReturn(UnixStat.FILE_TYPE_FLAG);
    	assertTrue(ziparchiveentry.isUnixSymlink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAlignmentWithNegativeValue_kgMe2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setAlignment(-1);
        assertEquals(-1, entry.getAlignment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMethodWithInvalidInput_Uqpj1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setMethod(-1);
        assertEquals(ZipArchiveEntry.STORED, entry.getMethod());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldsWithFile_fMcY4() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        ZipExtraField[] extraFields = entry.getExtraFields();
        assertEquals(0, extraFields.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffset_Kocb0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        long expected = 0L;
        long actual = entry.getDataOffset();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffsetWithFile_pqAL4() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        long expected = 0L;
        long actual = entry.getDataOffset();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithNegativeValue_vgxd1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setSize(-1L);
        assertEquals(-1L, entry.getSize());
    }
@Test
    public void testSetSize_InvalidSize_xczo1_imDX0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setSize(-1L);
        try {
            entry.setSize(-1L);
            fail("expected exception");
        } catch (final IllegalArgumentException expected) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExtraFields_sqtF0_1() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        ZipExtraField[] extraFields = ziparchiveentry.getExtraFields();
        assertNotNull(extraFields);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExtraFields_sqtF0_2() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        ZipExtraField[] extraFields = ziparchiveentry.getExtraFields();
        assertEquals(0, extraFields.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisStreamContiguous_NhYy0() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        boolean isStreamContiguous = true;
        when(ziparchiveentry.isStreamContiguous()).thenReturn(isStreamContiguous);
        boolean result = ziparchiveentry.isStreamContiguous();
        assertEquals(isStreamContiguous, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_UySb1_YQOg0() {
        ZipArchiveEntry entry = new ZipArchiveEntry((String) null);
        assertEquals(0, entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAsFirstExtraField_ZipExtraField_MKRr0_nbFf0() {
    ZipExtraField ze = mock(ZipExtraField.class);
    ZipArchiveEntry zae = new ZipArchiveEntry();
    zae.addAsFirstExtraField(ze);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternalAttributesWithZipEntry_QkkN3_rDBx0() throws ZipException {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        long attributes = entry.getExternalAttributes();
        assertEquals(0, attributes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternalAttributesWithEntry_icxZ4_qWtb0() throws ZipException {
        ZipArchiveEntry sourceEntry = new ZipArchiveEntry("source.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(sourceEntry);
        long attributes = entry.getExternalAttributes();
        assertEquals(0, attributes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithZipEntry_BnLD1_xElZ0() throws ZipException {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        zipEntry.setTime(System.currentTimeMillis());
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        Date lastModifiedDate = entry.getLastModifiedDate();
        assert lastModifiedDate != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInternalAttributesWithZipEntry_fUcL3_GbVe0() throws ZipException {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        int expected = 0; // Replace with the expected value
        int actual = entry.getInternalAttributes();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInternalAttributesWithEntry_Raug4_Yjsz0() throws ZipException {
        ZipArchiveEntry entry1 = new ZipArchiveEntry("test.txt");
        ZipArchiveEntry entry2 = new ZipArchiveEntry(entry1);
        int expected = 0;
        int actual = entry2.getInternalAttributes();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRawFlagWithZipEntry_NQxa1_CnPj0() throws ZipException {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        int rawFlag = entry.getRawFlag();
        assertEquals(0, rawFlag);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRawFlagWithEntry_yTsc2_UwKN0() throws ZipException {
        ZipArchiveEntry entry1 = new ZipArchiveEntry("test1.txt");
        ZipArchiveEntry entry2 = new ZipArchiveEntry(entry1);
        int rawFlag = entry2.getRawFlag();
        assertEquals(0, rawFlag);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentWithZipEntry_UAhJ4_SJiW0() throws ZipException {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        assertEquals(0, entry.getAlignment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguousWithZipEntry_ZSRN3_nEaX0() throws ZipException {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        assertTrue(entry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguousWithEntry_Jtiq4_ehUR0() throws ZipException {
        ZipArchiveEntry originalEntry = new ZipArchiveEntry("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(originalEntry);
        assertTrue(entry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionMadeByWithZipEntry_RNUE2_leTo0() {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        try {
            ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
            assertEquals(0, entry.getVersionMadeBy());
        } catch (ZipException e) {
            fail("Exception not expected");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDiskNumberStartWithZipEntry_tjnw2_cmqH0() throws ZipException {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        assertEquals(0, entry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldsWithZipEntry_VuQG2_kAbI0() throws ZipException {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        ZipExtraField[] extraFields = entry.getExtraFields();
        assertEquals(0, extraFields.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_EsJq3_Pyxo0() {
        try {
            ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entry"));
            GeneralPurposeBit gpb = entry.getGeneralPurposeBit();
        } catch (java.util.zip.ZipException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffsetWithZipEntry_Webx2_GLGJ0() throws ZipException {
        java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        long expected = 0L;
        long actual = entry.getDataOffset();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributesWithZipException_OBbh1_GfEZ0() throws ZipException {
        ZipArchiveEntry entry = new ZipArchiveEntry(new ZipArchiveEntry());
        entry.setInternalAttributes(1);
        assertEquals(1, entry.getInternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributesWithZipEntry_aFOc3_vCor0() throws ZipException {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entryName"));
        entry.setInternalAttributes(1);
        assertEquals(1, entry.getInternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetName() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        name = "testName";
        rawName = new byte[]{0x74, 0x65, 0x73, 0x74};
        ziparchiveentry.setName(name, rawName);
        verify(ziparchiveentry, times(1)).setName(name);
        assertNotEquals(ziparchiveentry.getName(), name);
        assertNotEquals(ziparchiveentry.getRawName(), rawName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeNull_OKpX1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    ZipEntry result = entry.setCreationTime(null);
    assertEquals(null, entry.getCreationTime());
    assertEquals(result, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeNull_MPzQ1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipEntry result = entry.setCreationTime(null);
        assertNull(entry.getCreationTime());
        assertEquals(result, entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_TOEH0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        String name = "newName.txt";
        byte[] rawName = name.getBytes();
        entry.setName(name, rawName);
        assertEquals(name, entry.getName());
        assertEquals(rawName, entry.getRawName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNullName_bXrc1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        String name = null;
        byte[] rawName = null;
        entry.setName(name, rawName);
        assertEquals(name, entry.getName());
        assertEquals(rawName, entry.getRawName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEmptyName_BPVl2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        String name = "";
        byte[] rawName = new byte[0];
        entry.setName(name, rawName);
        assertEquals(name, entry.getName());
        assertEquals(rawName, entry.getRawName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_wpbW0() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    byte[] extraData = new byte[10];
    entry.setExtra(extraData);
    assertNotEquals(null, entry.getExtra());
    assertEquals(extraData, entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldDataCoverage_KFyM1() {
        UnparseableExtraFieldData unparseableExtra = new UnparseableExtraFieldData();
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(unparseableExtra, entry.getUnparseableExtraFieldData());
        assertEquals(unparseableExtra.getCentralDirectoryData(), entry.getUnparseableExtraFieldData().getCentralDirectoryData());
        assertEquals(unparseableExtra.getHeaderId(), entry.getUnparseableExtraFieldData().getHeaderId());
        assertEquals(unparseableExtra.getLocalFileDataData(), entry.getUnparseableExtraFieldData().getLocalFileDataData());
        assertEquals(unparseableExtra.getLocalFileDataLength(), entry.getUnparseableExtraFieldData().getLocalFileDataLength());
        assertEquals(unparseableExtra.getCentralDirectoryLength(), entry.getUnparseableExtraFieldData().getCentralDirectoryLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithIOException_amNs4() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] extra = new byte[10];
        Arrays.fill(extra, (byte) 1);
        ZipException exception = assertThrows(ZipException.class, () -> entry.setExtra(extra));
        assertTrue(exception.getMessage().contains("Error parsing extra fields for entry: test.txt -"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithNullFileTime_GLec1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipEntry result = entry.setLastAccessTime(null);
        assertEquals(null, entry.getLastAccessTime());
        assertEquals(result, entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLastModifiedDate_fid2() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
    	Date date = new Date();
    	when(ziparchiveentry.getTime()).thenReturn(date.getTime());
    assertNull(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithMaxArgument_nAge3_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(0x7FFFFFFF_00000000L);
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime(), "The creation time of the entry should be the same as the one set");
}
}