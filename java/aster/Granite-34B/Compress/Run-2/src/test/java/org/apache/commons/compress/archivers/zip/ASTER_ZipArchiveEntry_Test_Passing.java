/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.function.Function;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse; 
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveEntry_Test_Passing {
private int versionRequired;
ZipArchiveEntry ziparchiveentry;
private static int SHORT_SHIFT = 16;
private long externalAttributes;
private UnparseableExtraFieldData unparseableExtra;
private int internalAttributes;
private int rawFlag;
private long time = -1;
private String name;
private byte[] rawName;
private int method = ZipMethod.UNKNOWN_CODE;
private boolean lastModifiedDateSet;
private static String ZIP_DIR_SEP = "/";
private static int SHORT_MASK = 0xFFFF;
ZipExtraField ze;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVersionRequired() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        versionRequired = 1;
        when(ziparchiveentry.getVersionRequired()).thenReturn(versionRequired);
        assertEquals(versionRequired, ziparchiveentry.getVersionRequired());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequired_WJVS0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        int versionRequired = entry.getVersionRequired();
        assertEquals(0, versionRequired);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequiredWithFile_vZJo3() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        int versionRequired = entry.getVersionRequired();
        assertEquals(0, versionRequired);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequiredWithVersion_kulr5() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setVersionRequired(1);
        int versionRequired = entry.getVersionRequired();
        assertEquals(1, versionRequired);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequiredWithComment_NYaW6() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setComment("Test comment");
        int versionRequired = entry.getVersionRequired();
        assertEquals(0, versionRequired);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequiredWithTime_aPdv8() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setTime(System.currentTimeMillis());
        int versionRequired = entry.getVersionRequired();
        assertEquals(0, versionRequired);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequiredWithCrc_HEbW9() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setCrc(123456L);
        int versionRequired = entry.getVersionRequired();
        assertEquals(0, versionRequired);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGeneralPurposeBit_mHQr0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        entry.setGeneralPurposeBit(generalPurposeBit);
        assertEquals(generalPurposeBit, entry.getGeneralPurposeBit());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGeneralPurposeBitWithNullArgument_IRPG1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setGeneralPurposeBit(null);
        assertEquals(null, entry.getGeneralPurposeBit());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUnixMode_RElZ0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setUnixMode(0644);
        assertEquals(0644, entry.getUnixMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUnixModeWithInvalidMode_KeYm2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setUnixMode(1000);
        assertEquals(1000, entry.getUnixMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternalAttributes_phwz0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        long attributes = entry.getExternalAttributes();
        assertEquals(0, attributes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternalAttributesWithFile_zUwM1() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        long attributes = entry.getExternalAttributes();
        assertEquals(0, attributes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        Object obj = new Object();
        boolean expected = false;
        boolean actual = ziparchiveentry.equals(obj);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_Ejqy0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        Date lastModifiedDate = entry.getLastModifiedDate();
        assert lastModifiedDate != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithFile_JsOM2() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        Date lastModifiedDate = entry.getLastModifiedDate();
        assert lastModifiedDate != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInternalAttributes() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        internalAttributes = 10;
        when(ziparchiveentry.getInternalAttributes()).thenReturn(internalAttributes);
        int result = ziparchiveentry.getInternalAttributes();
        assertEquals(internalAttributes, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInternalAttributes_oULb0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        int expected = 0; // Replace with the expected value
        int actual = entry.getInternalAttributes();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInternalAttributesWithFile_FuzU1() {
        File inputFile = new File("test.txt");
        String entryName = "test.txt";
        ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
        int expected = 0; // Replace with the expected value
        int actual = entry.getInternalAttributes();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInternalAttributesWithConstructor_HziH5() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        int expected = 0; // Replace with the expected value
        int actual = entry.getInternalAttributes();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRawFlag() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        rawFlag = 10;
        when(ziparchiveentry.getRawFlag()).thenReturn(rawFlag);
        int result = ziparchiveentry.getRawFlag();
        assertEquals(rawFlag, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRawFlag_tHhv0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        int rawFlag = entry.getRawFlag();
        assertEquals(0, rawFlag);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRawFlagWithFile_ZzrK4() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        int rawFlag = entry.getRawFlag();
        assertEquals(0, rawFlag);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetCreationTime() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        when(ziparchiveentry.setCreationTime(fileTime)).thenCallRealMethod();
        ziparchiveentry.setCreationTime(fileTime);
        verify(ziparchiveentry, times(1)).setCreationTime(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime_pHfh0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        entry.setCreationTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithFile_ijvd4() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        entry.setCreationTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_oinx0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithMinArgument_YvyK4() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(0x00000000_00000000L);
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_YjKW0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    ZipEntry result = entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_YjKW0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    ZipEntry result = entry.setCreationTime(time);
    assertEquals(result, entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithInvalidArgument_kGAE2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        FileTime time = FileTime.fromMillis(-1);
        entry.setCreationTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithFutureTime_HqWA3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis() + 1000);
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime_XREQ0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        ZipEntry result = entry.setCreationTime(time);
        assertEquals(time, result.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDiskNumberStart_cFNr0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setDiskNumberStart(123);
        assertEquals(123, entry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDiskNumberStartWithNegativeValue_ZiNM1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setDiskNumberStart(-1);
        assertEquals(-1, entry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDiskNumberStartWithZeroValue_yLaG2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setDiskNumberStart(0);
        assertEquals(0, entry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_TOEH0_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        String name = "newName.txt";
        byte[] rawName = name.getBytes();
        entry.setName(name, rawName);
        assertEquals(name, entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNullName_bXrc1_2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        String name = null;
        byte[] rawName = null;
        entry.setName(name, rawName);
        assertEquals(rawName, entry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEmptyName_BPVl2_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        String name = "";
        byte[] rawName = new byte[0];
        entry.setName(name, rawName);
        assertEquals(name, entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignment_cfTC0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertEquals(0, entry.getAlignment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentWithFile_Bxup2() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.txt"), "test.txt");
        assertEquals(0, entry.getAlignment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_pqro0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        entry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_wpbW0_1() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    byte[] extraData = new byte[10];
    entry.setExtra(extraData);
    assertNotEquals(null, entry.getExtra());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithInvalidLength_wLqE5() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    byte[] extraData = new byte[1000000000];
    entry.setExtra(extraData);
    assertEquals(null, entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_EYmb0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    byte[] extraData = new byte[10]; // Replace with actual data
    entry.setExtra(extraData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithEmptyData_TSnI2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    byte[] extraData = new byte[0];
    entry.setExtra(extraData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithInvalidData_KgtB3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    byte[] extraData = new byte[10]; // Replace with invalid data
    entry.setExtra(extraData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithValidData_Zlls4() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    byte[] extraData = new byte[10]; // Replace with valid data
    entry.setExtra(extraData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithPositiveLength_DGjn7() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    byte[] extraData = new byte[10]; // Replace with positive length
    entry.setExtra(extraData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithMaxPositiveLength_LsHQ8() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    byte[] extraData = new byte[Integer.MAX_VALUE]; // Replace with max positive length
    entry.setExtra(extraData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithRandomLength_JHBr10() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    byte[] extraData = new byte[10]; // Replace with random length
    entry.setExtra(extraData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithMultipleCalls_qpqH11() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    byte[] extraData1 = new byte[10]; // Replace with valid data
    byte[] extraData2 = new byte[20]; // Replace with valid data
    entry.setExtra(extraData1);
    entry.setExtra(extraData2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithMultipleCallsInReverseOrder_oyrl12() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    byte[] extraData1 = new byte[10]; // Replace with valid data
    byte[] extraData2 = new byte[20]; // Replace with valid data
    entry.setExtra(extraData2);
    entry.setExtra(extraData1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetDataOffset() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        long dataOffset = 100L;
        ziparchiveentry.setDataOffset(dataOffset);
        assertEquals(dataOffset, ziparchiveentry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataOffset_ZLTc0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setDataOffset(100L);
        assertEquals(100L, entry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataOffsetWithNegativeValue_HxxD1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setDataOffset(-1L);
        assertEquals(-1L, entry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataOffsetWithZeroValue_ukQd2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setDataOffset(0L);
        assertEquals(0L, entry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldsWithEmptyArray_bhSt1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setExtraFields(new ZipExtraField[0]);
        assertEquals(0, entry.getExtraFields().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_EmptyName_DHSs1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setName("");
        assertEquals("", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_ValidName_WXIC2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setName("new.txt");
        assertEquals("new.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_InvalidName_XWuU3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setName("new/file.txt");
        assertEquals("new/file.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_ValidSize_IIWH0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setSize(1024L);
        assertEquals(1024L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_WCMT0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        assertEquals(entry.getName().hashCode(), entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithEmptyName_GXrZ2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("");
        assertEquals(0, entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPlatform() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        int platform = 1;
        ziparchiveentry.setPlatform(platform);
        verify(ziparchiveentry, times(1)).setPlatform(platform);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPlatform_evss0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setPlatform(1);
        assertEquals(1, entry.getPlatform());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPlatformWithNegativeValue_bUsi1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setPlatform(-1);
        assertEquals(-1, entry.getPlatform());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPlatformWithZeroValue_yNXx2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setPlatform(0);
        assertEquals(0, entry.getPlatform());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPlatformWithMaxValue_hEiI3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setPlatform(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, entry.getPlatform());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPlatformWithMinValue_OdDd4() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setPlatform(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, entry.getPlatform());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionMadeBy_Ayag0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setVersionMadeBy(20);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionMadeByWithNegativeValue_bkcO1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setVersionMadeBy(-1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionMadeByWithZeroValue_NnhS2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setVersionMadeBy(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionMadeByWithMaximumValue_nrEL3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setVersionMadeBy(65535);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffset_lyUK0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setLocalHeaderOffset(100L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffsetWithNegativeValue_AYJy1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setLocalHeaderOffset(-1L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffsetWithZeroValue_JEDX2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setLocalHeaderOffset(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetExternalAttributes() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        externalAttributes = 0L;
        ziparchiveentry.setExternalAttributes(externalAttributes);
        verify(ziparchiveentry, times(1)).setExternalAttributes(externalAttributes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributes_KhWw0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setExternalAttributes(123456L);
        assertEquals(123456L, entry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributesWithNegativeValue_bdnV1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setExternalAttributes(-123456L);
        assertEquals(-123456L, entry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributesWithZeroValue_jDQQ2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setExternalAttributes(0L);
        assertEquals(0L, entry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetCentralDirectoryExtra() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        byte[] b = new byte[10];
        ziparchiveentry.setCentralDirectoryExtra(b);
        // Add meaningful assertions here
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExtraFields_1() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        boolean includeUnparseable = true;
        ZipExtraField[] expected = new ZipExtraField[0];
        when(ziparchiveentry.getExtraFields(includeUnparseable)).thenReturn(expected);
        ZipExtraField[] actual = ziparchiveentry.getExtraFields(includeUnparseable);
        assertNotEquals(null, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExtraFields_2() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        boolean includeUnparseable = true;
        ZipExtraField[] expected = new ZipExtraField[0];
        when(ziparchiveentry.getExtraFields(includeUnparseable)).thenReturn(expected);
        ZipExtraField[] actual = ziparchiveentry.getExtraFields(includeUnparseable);
        assertEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor_File_String_Nnfz0() {
        final File inputFile = new File("test");
        final String entryName = "entryName";
        final ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
        assertEquals(entryName, entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraField_HmTh6() {
        final ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        final ZipExtraField[] extraFields = entry.getExtraFields(true);
        for (final ZipExtraField extraField : extraFields) {
            final ZipExtraField extraFieldByCode = entry.getExtraField(extraField.getHeaderId());
            assertEquals(extraField, extraFieldByCode);
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetComment_tcIm7() {
        final ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        final String comment = "comment";
        entry.setComment(comment);
        assertEquals(comment, entry.getComment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMethod_skNF8() {
        final ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        final int method = 1;
        entry.setMethod(method);
        assertEquals(method, entry.getMethod());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTime_rySM9() {
        final ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        final long time = 1;
        entry.setTime(time);
        assertEquals(time, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUnixMode_SkVt10() {
        final ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        final int mode = 1;
        entry.setUnixMode(mode);
        assertEquals(mode, entry.getUnixMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributes_oyBM11() {
        final ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        final long externalAttributes = 1;
        entry.setExternalAttributes(externalAttributes);
        assertEquals(externalAttributes, entry.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixSymlink_MBio12() {
        final ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        assertFalse(entry.isUnixSymlink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldsWithIncludeUnparseableTrue_Hrrw0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipExtraField[] extraFields = entry.getExtraFields(true);
        assertEquals(0, extraFields.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldsWithIncludeUnparseableFalse_mXUq1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipExtraField[] extraFields = entry.getExtraFields(false);
        assertEquals(0, extraFields.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getExtraFields_includeUnparseable_false_hoPb1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        ZipExtraField[] extraFields = entry.getExtraFields(false);
        assertEquals(extraFields.length, 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMethod() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        assertEquals(method, ziparchiveentry.getMethod());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldWithNoExtraFields_tdmw3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipShort type = new ZipShort(1);
        assertNull(entry.getExtraField(type));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getTime_withTimeSet_returnsTime_iJoN1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        entry.setTime(1234567890L);
        assertEquals(1234567890L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTime_uOMe0() throws IOException, ZipException {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        entry.setLastModifiedTime(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTimeWithFile_KzQj3() throws IOException, ZipException {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        entry.setLastModifiedTime(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetLastAccessTime() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        when(ziparchiveentry.setLastAccessTime(fileTime)).thenCallRealMethod();
        ziparchiveentry.setLastAccessTime(fileTime);
        verify(ziparchiveentry, times(1)).setLastAccessTime(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTime_IWoD0_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        ZipEntry result = entry.setLastAccessTime(fileTime);
        assertEquals(fileTime, entry.getLastAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTime_IWoD0_2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        ZipEntry result = entry.setLastAccessTime(fileTime);
        assertEquals(result, entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionMadeBy_oqMN0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertEquals(0, entry.getVersionMadeBy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionMadeByWithFile_JEdC4() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        assertEquals(0, entry.getVersionMadeBy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception{
        ziparchiveentry = new ZipArchiveEntry("name");
        assertEquals("name", ziparchiveentry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_DCri0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataExtraWithNoExtraData_VjIu0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] actual = entry.getLocalFileDataExtra();
        byte[] expected = ByteUtils.EMPTY_BYTE_ARRAY;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsDirectory_MSxu0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        boolean result = entry.isDirectory();
        assert result == false;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsDirectoryWithPrivateMethodCoverage_srEn1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test_dir/");
        boolean result = entry.isDirectory();
        assert result == true;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTime_TshY0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        entry.setTime(fileTime);
        assertEquals(fileTime.toMillis(), entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRawFlag() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        rawFlag = 123;
        ziparchiveentry.setRawFlag(rawFlag);
        verify(ziparchiveentry, times(1)).setRawFlag(rawFlag);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag_gLiy0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setRawFlag(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlagWithCoverage_gkUH1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setRawFlag(0);
        entry.setRawFlag(1);
        entry.setRawFlag(2);
        entry.setRawFlag(3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDiskNumberStart_TEGt0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertEquals(0, entry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDiskNumberStartWithFile_hpKB3() {
        File file = new File("test.txt");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test.txt");
        assertEquals(0, entry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRawName_1() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        rawName = new byte[0];
        when(ziparchiveentry.getRawName()).thenReturn(rawName);
        byte[] result = ziparchiveentry.getRawName();
        assertNotEquals(null, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRawName_2() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        rawName = new byte[0];
        when(ziparchiveentry.getRawName()).thenReturn(rawName);
        byte[] result = ziparchiveentry.getRawName();
        assertEquals(rawName.length, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRawNameWithEmptyInput_bAgI2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("");
        assertNull(entry.getRawName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_lIOt0() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        Object clone = entry.clone();
        assertEquals(entry, clone);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithPathAndString_qtHV2() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("file"), "name");
        Object clone = entry.clone();
        assertEquals(entry, clone);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCentralDirectoryExtra() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        byte[] expected = new byte[0];
        when(ziparchiveentry.getCentralDirectoryExtra()).thenReturn(expected);
        byte[] actual = ziparchiveentry.getCentralDirectoryExtra();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryExtra_Nncu0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] expected = new byte[0];
        byte[] actual = entry.getCentralDirectoryExtra();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveExtraField_ADkL0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipShort type = new ZipShort(1);
        try {
            entry.removeExtraField(type);
            fail("Expected NoSuchElementException");
        } catch (NoSuchElementException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixSymlink_ReturnsTrue_WhenUnixModeIsLinkFlag_MCni0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setUnixMode(UnixStat.LINK_FLAG);
        assertTrue(entry.isUnixSymlink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixSymlink_ReturnsFalse_WhenUnixModeIsNotLinkFlag_wfyB1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setUnixMode(0);
        assertFalse(entry.isUnixSymlink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetVersionRequired() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        versionRequired = 1;
        ziparchiveentry.setVersionRequired(versionRequired);
        verify(ziparchiveentry, times(1)).setVersionRequired(versionRequired);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAlignment() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        int alignment = 1024;
        doNothing().when(ziparchiveentry).setAlignment(alignment);
        ziparchiveentry.setAlignment(alignment);
        verify(ziparchiveentry, times(1)).setAlignment(alignment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAlignment_TFRh0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setAlignment(16);
        assertEquals(16, entry.getAlignment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAlignmentWithZero_OngW1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setAlignment(0);
        assertEquals(0, entry.getAlignment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTime_rmPL0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setTime(System.currentTimeMillis());
        assertEquals(System.currentTimeMillis(), entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMethodWithValidInput_MQPk0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setMethod(ZipArchiveEntry.DEFLATED);
        assertEquals(ZipArchiveEntry.DEFLATED, entry.getMethod());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAsFirstExtraField_ZipExtraField_UnparseableExtraFieldData_iSjb1() {
    ZipExtraField ze = new UnparseableExtraFieldData();
    ZipArchiveEntry zae = new ZipArchiveEntry();
    zae.addAsFirstExtraField(ze);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAsFirstExtraField_ZipExtraField_UnparseableExtraFieldData_getExtraField_bvHD2() {
    ZipExtraField ze = new UnparseableExtraFieldData();
    ZipArchiveEntry zae = new ZipArchiveEntry();
    zae.getExtraField(ze.getHeaderId());
    zae.addAsFirstExtraField(ze);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFields_evDU0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        ZipExtraField[] extraFields = entry.getExtraFields();
        assertEquals(0, extraFields.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_rKve0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        GeneralPurposeBit gpb = entry.getGeneralPurposeBit();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_mIUB1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("file"), "entryName");
        GeneralPurposeBit gpb = entry.getGeneralPurposeBit();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithZeroValue_TjQD2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setSize(0L);
        assertEquals(0L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPlatform_gvLo0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        int platform = entry.getPlatform();
        assertEquals(0, platform);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPlatformWithFile_RubV2() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.txt"), "test.txt");
        int platform = entry.getPlatform();
        assertEquals(0, platform);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributes_raTB0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setInternalAttributes(1);
        assertEquals(1, entry.getInternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributesWithName_uHSu4() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        entry.setInternalAttributes(1);
        assertEquals(1, entry.getInternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributesWithFile_EOMo5() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "entryName");
        entry.setInternalAttributes(1);
        assertEquals(1, entry.getInternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetStreamContiguous_wpHf0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setStreamContiguous(true);
        assertEquals(true, entry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetStreamContiguousFalse_qwKh1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setStreamContiguous(false);
        assertEquals(false, entry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetName_w_WUfV0() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        String name = "testName";
        when(ziparchiveentry.getName()).thenReturn(name);
        ziparchiveentry.setName(name);
        verify(ziparchiveentry, times(1)).setName(name);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetExtra_I_TXzv0() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
    	byte[] extra = new byte[10];
    	doNothing().when(ziparchiveentry).setExtra(extra);
    	ziparchiveentry.setExtra(extra);
    	verify(ziparchiveentry, times(1)).setExtra(extra);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetTime_NqBL0() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        long timeEpochMillis = 0L; // replace with actual value
        ziparchiveentry.setTime(timeEpochMillis);
        verify(ziparchiveentry, times(1)).setTime(timeEpochMillis);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidZipArchiveEntry_OCOv3_QCZk0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetDiskNumberStart_bgeh0() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        int diskNumberStart = 1;
        ziparchiveentry.setDiskNumberStart(diskNumberStart);
        verify(ziparchiveentry, times(1)).setDiskNumberStart(diskNumberStart);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetSize_hGse0() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        long size = 10L;
        ziparchiveentry.setSize(size);
        assertEquals(size,ziparchiveentry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetVersionMadeBy_SKJf0() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        int versionMadeBy = 1;
        ziparchiveentry.setVersionMadeBy(versionMadeBy);
        assertEquals(versionMadeBy,ziparchiveentry.getVersionMadeBy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetLocalHeaderOffset_HsNb0() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        long localHeaderOffset = 100L;
        ziparchiveentry.setLocalHeaderOffset(localHeaderOffset);
        assertEquals(localHeaderOffset, ziparchiveentry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithInvalidArgument_bHvC4_JCDi0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] invalidData = new byte[] {(byte) 0xFF, (byte) 0xFE, (byte) 0x00};
        entry.setCentralDirectoryExtra(invalidData);
        assertNotEquals(invalidData, entry.getCentralDirectoryExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithNegativeArgument_IqxD8_Zkou0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        byte[] negativeData = new byte[] {0x00, (byte) 0xFF, 0x00};
        entry.setCentralDirectoryExtra(negativeData);
        assertNotEquals(negativeData, entry.getCentralDirectoryExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUnixMode_ByVG0() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        when(ziparchiveentry.getExternalAttributes()).thenReturn(1000L);
        when(ziparchiveentry.getPlatform()).thenReturn(ZipArchiveEntry.PLATFORM_UNIX);
        int unixMode = ziparchiveentry.getUnixMode();
        assertEquals(1000 >> 16 & 0xFFFF, unixMode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetMethod_FyAm0() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        int method = 1;
        ziparchiveentry.setMethod(method);
        assertEquals(method,ziparchiveentry.getMethod());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetInternalAttributes_hloQ0() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        int internalAttributes = 1;
        ziparchiveentry.setInternalAttributes(internalAttributes);
        assertEquals(internalAttributes,ziparchiveentry.getInternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetStreamContiguous_gXvl0() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        boolean isStreamContiguous = true;
        ziparchiveentry.setStreamContiguous(isStreamContiguous);
        assertEquals(isStreamContiguous, ziparchiveentry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExtraFields() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        boolean includeUnparseable = true;
        ZipExtraField[] expected = new ZipExtraField[0];
        when(ziparchiveentry.getExtraFields(includeUnparseable)).thenReturn(expected);
        ZipExtraField[] actual = ziparchiveentry.getExtraFields(includeUnparseable);
        assertNotEquals(null, actual);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_YjKW0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    ZipEntry result = entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
    assertEquals(result, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTime_IWoD0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        ZipEntry result = entry.setLastAccessTime(fileTime);
        assertEquals(fileTime, entry.getLastAccessTime());
        assertEquals(result, entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRawName() throws Exception{
        ziparchiveentry = mock(ZipArchiveEntry.class);
        rawName = new byte[0];
        when(ziparchiveentry.getRawName()).thenReturn(rawName);
        byte[] result = ziparchiveentry.getRawName();
        assertNotEquals(null, result);
        assertEquals(rawName.length, result.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUnixModeWithNegativeMode_DQvy1_fid2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setUnixMode(65535);
        assertEquals(65535, entry.getUnixMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidArgument_IZSU2_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(-1);
    entry.setCreationTime(time);
    assertNull(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeInvalid_eMRg2_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    try {
        entry.setCreationTime(FileTime.fromMillis(-1));
    } catch (IllegalArgumentException e) {
        // Expected exception
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidTime_rdBL2_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(-1);
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithNegativeTime_GIyz4_fid2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    FileTime time = FileTime.fromMillis(-1000);
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNullName_bXrc1_1_fid2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        String name = null;
        byte[] rawName = null;
        entry.setName(name, rawName);
    assertNull(name);
}
}