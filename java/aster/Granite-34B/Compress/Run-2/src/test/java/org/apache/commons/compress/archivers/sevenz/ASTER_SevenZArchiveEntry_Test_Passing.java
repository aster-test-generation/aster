/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.nio.file.attribute.FileTime;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Objects;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.io.file.attribute.FileTimes;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse; 
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZArchiveEntry_Test_Passing {
private Iterable<? extends SevenZMethodConfiguration> contentMethods;
SevenZArchiveEntry sevenzarchiveentry;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getContentMethodsTest_chrO0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> result = entry.getContentMethods();
        assertEquals(result, entry.getContentMethods());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getContentMethodsTest_Null_gwBE1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> result = entry.getContentMethods();
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetHasCrc_ULsb0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCrc(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetHasCrcFalse_Zntv1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCrc(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasCreationDateTrue_Jebg0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCreationDate(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasCreationDateFalse_vPNR1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCreationDate(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCrcValueDefault_dYUU1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        assertEquals(0L, entry.getCrcValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDate_ugnZ0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAccessDate(1234567890L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDateWithZeroValue_ZiDt1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAccessDate(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDateWithNegativeValue_OcnL2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAccessDate(-1234567890L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToJavaTime_AifU0() {
        long ntfsTime = 1234567890L;
        Date expected = FileTimes.ntfsTimeToDate(ntfsTime);
        Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetHasLastModifiedDateTrue_oTKo0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasLastModifiedDate(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetHasLastModifiedDateFalse_YykX1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasLastModifiedDate(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_TIkn0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(0);
    entry.setCompressedCrc(1);
    entry.setCompressedCrc(-1);
    entry.setCompressedCrc(Integer.MAX_VALUE);
    entry.setCompressedCrc(Integer.MIN_VALUE);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_TIkn0_5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(0);
    entry.setCompressedCrc(1);
    entry.setCompressedCrc(-1);
    entry.setCompressedCrc(Integer.MAX_VALUE);
    entry.setCompressedCrc(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getCompressedCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasLastModifiedDateTest_vkzL0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasLastModifiedDate(true);
        boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasLastModifiedDateTest_yfKM1() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasLastModifiedDate(false);
        boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasLastModifiedDateTest_zbFp2() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasLastModifiedDate(true);
        sevenZArchiveEntry.setHasLastModifiedDate(false);
        boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasLastModifiedDateTest_AxSj3() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasLastModifiedDate(false);
        sevenZArchiveEntry.setHasLastModifiedDate(true);
        boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasLastModifiedDateTest_cXEK4() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasLastModifiedDate(true);
        sevenZArchiveEntry.setHasLastModifiedDate(true);
        boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasLastModifiedDateTest_ePGM5() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasLastModifiedDate(false);
        sevenZArchiveEntry.setHasLastModifiedDate(false);
        boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasLastModifiedDateTest_XdLS6() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasLastModifiedDate(true);
        sevenZArchiveEntry.setHasLastModifiedDate(false);
        sevenZArchiveEntry.setHasLastModifiedDate(true);
        boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasLastModifiedDateTest_HjAu7() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasLastModifiedDate(false);
        sevenZArchiveEntry.setHasLastModifiedDate(true);
        sevenZArchiveEntry.setHasLastModifiedDate(false);
        boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHasLastModifiedDateTest_YLxe8() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasLastModifiedDate(true);
        sevenZArchiveEntry.setHasLastModifiedDate(false);
        sevenZArchiveEntry.setHasLastModifiedDate(false);
        boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetAntiItem_TmSB0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setAntiItem(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetAntiItemFalse_PUGL1() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setAntiItem(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_NNWo0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date creationDate = new Date();
    entry.setCreationDate(creationDate);
    assertEquals(creationDate, entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithMaxDate_AWSc2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date maxDate = new Date(Long.MAX_VALUE);
    entry.setCreationDate(maxDate);
    assertEquals(maxDate, entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithMinDate_FvYl3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date minDate = new Date(Long.MIN_VALUE);
    entry.setCreationDate(minDate);
    assertEquals(minDate, entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDateWithRandomDate_jjGE4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date randomDate = new Date(1234567890);
    entry.setCreationDate(randomDate);
    assertEquals(randomDate, entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testHasStream_dBgA0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasStream(true);
        assert entry.hasStream();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testHasStreamWithFalse_JWkU1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasStream(false);
        assert !entry.hasStream();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasAccessDate_fduv0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        boolean hasAccessDate = entry.getHasAccessDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasAccessDateWithTrueValue_hPny1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasAccessDate(true);
        boolean hasAccessDate = entry.getHasAccessDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasAccessDateWithFalseValue_LyUV2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasAccessDate(false);
        boolean hasAccessDate = entry.getHasAccessDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedSize_1_MNRV0() {
	SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
	long expected = 0;
	long actual = sevenZArchiveEntry.getCompressedSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedSize_2_UfEb1() {
	SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
	sevenZArchiveEntry.setCompressedSize(0);
	long expected = 0;
	long actual = sevenZArchiveEntry.getCompressedSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedSize_3_NZKr2() {
	SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
	sevenZArchiveEntry.setCompressedSize(1);
	long expected = 1;
	long actual = sevenZArchiveEntry.getCompressedSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedSize_4_Mdkp3() {
	SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
	sevenZArchiveEntry.setCompressedSize(100);
	long expected = 100;
	long actual = sevenZArchiveEntry.getCompressedSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedSize_5_PDXA4() {
	SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
	sevenZArchiveEntry.setCompressedSize(1000);
	long expected = 1000;
	long actual = sevenZArchiveEntry.getCompressedSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedSize_6_lYzP5() {
	SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
	sevenZArchiveEntry.setCompressedSize(10000);
	long expected = 10000;
	long actual = sevenZArchiveEntry.getCompressedSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedSize_7_BkWN6() {
	SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
	sevenZArchiveEntry.setCompressedSize(100000);
	long expected = 100000;
	long actual = sevenZArchiveEntry.getCompressedSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedSize_8_zgLp7() {
	SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
	sevenZArchiveEntry.setCompressedSize(1000000);
	long expected = 1000000;
	long actual = sevenZArchiveEntry.getCompressedSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedSize_9_VWkv8() {
	SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
	sevenZArchiveEntry.setCompressedSize(10000000);
	long expected = 10000000;
	long actual = sevenZArchiveEntry.getCompressedSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedSize_10_hGyz9() {
	SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
	sevenZArchiveEntry.setCompressedSize(100000000);
	long expected = 100000000;
	long actual = sevenZArchiveEntry.getCompressedSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCompressedSize_11_xtEp10() {
	SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
	sevenZArchiveEntry.setCompressedSize(1000000000);
	long expected = 1000000000;
	long actual = sevenZArchiveEntry.getCompressedSize();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasStreamTrue_fldW0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasStream(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasStreamFalse_wGHf1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasStream(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetHasWindowsAttributes_ZooN0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasWindowsAttributes(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetHasWindowsAttributesFalse_demq1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasWindowsAttributes(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_JIjr0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test.txt");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameNull_EMEp1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrcValue_sPca0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrcValue(123456L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrcValueWithZeroValue_bYXM1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrcValue(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrcValueWithNegativeValue_xYVk2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrcValue(-123456L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_InVQ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedSize(100L);
    assertEquals(100L, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSizeWithZero_IURn1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedSize(0L);
    assertEquals(0L, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSizeWithNegativeValue_PirJ2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedSize(-100L);
    assertEquals(-100L, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_lYgY0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(100);
        assertEquals(100, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithNegativeValue_CFsU1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(-100);
        assertEquals(-100, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithZeroValue_MLBp2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(0);
        assertEquals(0, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_ZVcW0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName(null);
        assertEquals(0, entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNonNullName_YJXS1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("example.txt");
        assertEquals("example.txt".hashCode(), entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJavaTimeToNtfsTime_QhCh0() {
        Date date = new Date();
        long ntfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
        assertEquals(FileTimes.toNtfsTime(date), ntfsTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJavaTimeToNtfsTimeWithMinimumDate_IOpL2() {
        Date date = new Date(0);
        long ntfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
        assertEquals(116444736000000000L, ntfsTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_rRgB0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date date = new Date();
    entry.setAccessDate(date);
    assertEquals(date, entry.getAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDateWithMaxDate_kSEH2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date maxDate = new Date(Long.MAX_VALUE);
    entry.setAccessDate(maxDate);
    assertEquals(maxDate, entry.getAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDateWithMinDate_iUMu3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date minDate = new Date(Long.MIN_VALUE);
    entry.setAccessDate(minDate);
    assertEquals(minDate, entry.getAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasCreationDate_naVh0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCreationDate(true);
        assertTrue(entry.getHasCreationDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNoCreationDate_LzUA1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCreationDate(false);
        assertTrue(!entry.getHasCreationDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCompressedCrcValueTest_vSyF0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrcValue(123456L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCompressedCrcValueTest_zeroValue_WBBp1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrcValue(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCompressedCrcValueTest_negativeValue_keee2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrcValue(-123456L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_ZubQ0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date date = new Date();
        entry.setLastModifiedDate(date);
        assertEquals(date, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateWithMaxDate_SIfi1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date date = new Date(Long.MAX_VALUE);
        entry.setLastModifiedDate(date);
        assertEquals(date, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateWithMinDate_hVdY2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date date = new Date(Long.MIN_VALUE);
        entry.setLastModifiedDate(date);
        assertEquals(date, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasCrcTrue_ZZTT0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCrc(true);
        boolean result = entry.getHasCrc();
        assert result == true;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasCrcFalse_GobM1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCrc(false);
        boolean result = entry.getHasCrc();
        assert result == false;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDirectoryTrue_SuXk0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setDirectory(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDirectoryFalse_ZSOf1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setDirectory(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAccessDateCoverage_fKzN1() {
		SevenZArchiveEntry entry = new SevenZArchiveEntry();
		entry.setAccessTime(FileTimes.toFileTime(new Date()));
		Date actual = entry.getAccessDate();
		assertNotNull(actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDate_vrvH0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCreationDate(1234567890L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDateWithZeroValue_QqXR1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCreationDate(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDateWithNegativeValue_zJzl2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCreationDate(-1234567890L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrc_OIms0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrc(12345);
        assert entry.getCrc() == 12345;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrcWithNegativeValue_vAVm1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrc(-1);
        assert entry.getCrc() == -1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrcWithZeroValue_SywA2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrc(0);
        assert entry.getCrc() == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetContentMethods_dVkL0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        SevenZMethodConfiguration method1 = new SevenZMethodConfiguration(SevenZMethod.COPY, null);
        SevenZMethodConfiguration method2 = new SevenZMethodConfiguration(SevenZMethod.LZMA, null);
        entry.setContentMethods(method1, method2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWindowsAttributes_HmeK0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(1);
        int actual = entry.getWindowsAttributes();
        int expected = 1;
        assert (actual == expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWindowsAttributesWithZeroValue_DVeK1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(0);
        int actual = entry.getWindowsAttributes();
        int expected = 0;
        assert (actual == expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWindowsAttributesWithNegativeValue_EWOB2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(-1);
        int actual = entry.getWindowsAttributes();
        int expected = -1;
        assert (actual == expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWindowsAttributesAfterSettingNewValue_GvkY3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(2);
        int actual = entry.getWindowsAttributes();
        int expected = 2;
        assert (actual == expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWindowsAttributesAfterSettingMaxIntValue_KnPF4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(Integer.MAX_VALUE);
        int actual = entry.getWindowsAttributes();
        int expected = Integer.MAX_VALUE;
        assert (actual == expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWindowsAttributesAfterSettingMinIntValue_lXzZ5() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(Integer.MIN_VALUE);
        int actual = entry.getWindowsAttributes();
        int expected = Integer.MIN_VALUE;
        assert (actual == expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWindowsAttributesTest1_ZRGQ0() {
        SevenZArchiveEntry se = new SevenZArchiveEntry();
        se.setWindowsAttributes(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWindowsAttributesTest2_cHRR1() {
        SevenZArchiveEntry se = new SevenZArchiveEntry();
        se.setWindowsAttributes(2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWindowsAttributesTest3_kVxA2() {
        SevenZArchiveEntry se = new SevenZArchiveEntry();
        se.setWindowsAttributes(4);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWindowsAttributesTest4_iHHR3() {
        SevenZArchiveEntry se = new SevenZArchiveEntry();
        se.setWindowsAttributes(8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWindowsAttributesTest5_yixs4() {
        SevenZArchiveEntry se = new SevenZArchiveEntry();
        se.setWindowsAttributes(16);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWindowsAttributesTest6_aFcY5() {
        SevenZArchiveEntry se = new SevenZArchiveEntry();
        se.setWindowsAttributes(32);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWindowsAttributesTest7_NYLs6() {
        SevenZArchiveEntry se = new SevenZArchiveEntry();
        se.setWindowsAttributes(64);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWindowsAttributesTest8_eyHX7() {
        SevenZArchiveEntry se = new SevenZArchiveEntry();
        se.setWindowsAttributes(128);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWindowsAttributesTest9_Mrhn8() {
        SevenZArchiveEntry se = new SevenZArchiveEntry();
        se.setWindowsAttributes(256);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWindowsAttributesTest10_Knwo9() {
        SevenZArchiveEntry se = new SevenZArchiveEntry();
        se.setWindowsAttributes(512);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test1_yrhk0() {
		SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
		sevenZArchiveEntry.setHasWindowsAttributes(true);
		assertTrue(sevenZArchiveEntry.getHasWindowsAttributes());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTimeWithNullFileTime_fmqS1_IDQO0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setLastModifiedTime(null);
        assertTrue(!entry.getHasWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameTest_BBnI0_hslQ0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test.txt");
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameTest2_UMzw1_SdXD0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test2.txt");
        assertEquals("test2.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasAccessDate_YYnv0_fDCI0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasAccessDate(true);
    assertTrue(sevenZArchiveEntry.getHasAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasAccessDateFalse_xeDa1_YGUI0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasAccessDate(false);
    assertTrue(!sevenZArchiveEntry.getHasAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNonNullFileTime_hUJQ0_QSis0_1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        entry.setCreationTime(time);
        assertTrue(entry.getHasCreationDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNullFileTime_mDIy1_GBTg0_1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCreationTime(null);
        assertFalse(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNonNullDate_kYxz4_OjUE0_1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date date = new Date();
        FileTime time = FileTime.fromMillis(date.getTime());
        entry.setCreationTime(time);
        assertTrue(entry.getHasCreationDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNonNullDate_kYxz4_OjUE0_2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date date = new Date();
        FileTime time = FileTime.fromMillis(date.getTime());
        entry.setCreationTime(time);
        assertEquals(date.getTime(), entry.getCreationDate().toInstant().toEpochMilli());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessTimeWithNotNullFileTime_HLDu0_KFKV0_1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        entry.setAccessTime(time);
        assertTrue(entry.getHasAccessDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessTimeWithNullFileTime_ZiBn1_joUP0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAccessTime(null);
        assertTrue(!entry.getHasWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompressedCrc_when_compressedCrc_is_0_ferh0_oaJi0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(0);
        assertEquals(0, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompressedCrc_when_compressedCrc_is_max_value_ZpwH1_ZdLu0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompressedCrc_when_compressedCrc_is_min_value_lmdz2_NRYr0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompressedCrc_when_compressedCrc_is_positive_EGoG4_OeOd0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(1);
        assertEquals(1, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAccessDateCoverage6_gHFn6_MGFl0() {
		SevenZArchiveEntry entry = new SevenZArchiveEntry();
		entry.setAccessTime(FileTime.fromMillis(System.currentTimeMillis()));
		Date actual = entry.getAccessDate();
		assertNotNull(actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_iwFf0_bNqO0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(100L);
        long size = entry.getSize();
        assertEquals(100L, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithNegativeValue_MZWo1_PCYa0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(-1L);
        long size = entry.getSize();
        assertEquals(-1L, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithZeroValue_BqdG2_xtBN0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(0L);
        long size = entry.getSize();
        assertEquals(0L, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedCrcValueWithZeroValue_EXKu2_qiaG0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(0);
        assertEquals(0, entry.getCompressedCrcValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_TIkn0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(0);
    assertEquals(0, entry.getCompressedCrc());
    entry.setCompressedCrc(1);
    assertEquals(1, entry.getCompressedCrc());
    entry.setCompressedCrc(-1);
    assertEquals(-1, entry.getCompressedCrc());
    entry.setCompressedCrc(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getCompressedCrc());
    entry.setCompressedCrc(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getCompressedCrc());
}
}