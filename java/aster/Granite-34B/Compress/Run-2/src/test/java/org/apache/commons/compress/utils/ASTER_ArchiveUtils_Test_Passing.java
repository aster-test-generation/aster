/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.Arrays;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveUtils_Test_Passing {
final StringBuilder sb = new StringBuilder();
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisEqual_1_TYyD0() throws Exception {
    byte[] buffer1 = new byte[0];
    byte[] buffer2 = new byte[0];
    boolean ignoreTrailingNulls = false;
    boolean result = ArchiveUtils.isEqual(buffer1, 0, 0, buffer2, 0, 0, ignoreTrailingNulls);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisEqual_2_jUGI1() throws Exception {
    byte[] buffer1 = new byte[0];
    byte[] buffer2 = new byte[0];
    boolean ignoreTrailingNulls = true;
    boolean result = ArchiveUtils.isEqual(buffer1, 0, 0, buffer2, 0, 0, ignoreTrailingNulls);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisEqual_3_vMtx2() throws Exception {
    byte[] buffer1 = new byte[1];
    buffer1[0] = (byte) 0;
    byte[] buffer2 = new byte[1];
    buffer2[0] = (byte) 255;
    boolean ignoreTrailingNulls = false;
    boolean result = ArchiveUtils.isEqual(buffer1, 0, 1, buffer2, 0, 1, ignoreTrailingNulls);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisEqual_4_tSof3() throws Exception {
    byte[] buffer1 = new byte[1];
    buffer1[0] = (byte) 0;
    byte[] buffer2 = new byte[1];
    buffer2[0] = (byte) 255;
    boolean ignoreTrailingNulls = true;
    boolean result = ArchiveUtils.isEqual(buffer1, 0, 1, buffer2, 0, 1, ignoreTrailingNulls);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisEqual_5_YCjP4() throws Exception {
    byte[] buffer1 = new byte[1];
    buffer1[0] = (byte) 0;
    byte[] buffer2 = new byte[1];
    buffer2[0] = (byte) 0;
    boolean ignoreTrailingNulls = false;
    boolean result = ArchiveUtils.isEqual(buffer1, 0, 1, buffer2, 0, 1, ignoreTrailingNulls);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisEqual_6_OaQe5() throws Exception {
    byte[] buffer1 = new byte[1];
    buffer1[0] = (byte) 0;
    byte[] buffer2 = new byte[1];
    buffer2[0] = (byte) 0;
    boolean ignoreTrailingNulls = true;
    boolean result = ArchiveUtils.isEqual(buffer1, 0, 1, buffer2, 0, 1, ignoreTrailingNulls);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisEqual_7_vPYY6() throws Exception {
    byte[] buffer1 = new byte[1];
    buffer1[0] = (byte) 255;
    byte[] buffer2 = new byte[1];
    buffer2[0] = (byte) 0;
    boolean ignoreTrailingNulls = false;
    boolean result = ArchiveUtils.isEqual(buffer1, 0, 1, buffer2, 0, 1, ignoreTrailingNulls);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisEqual_8_HHha7() throws Exception {
    byte[] buffer1 = new byte[1];
    buffer1[0] = (byte) 255;
    byte[] buffer2 = new byte[1];
    buffer2[0] = (byte) 0;
    boolean ignoreTrailingNulls = true;
    boolean result = ArchiveUtils.isEqual(buffer1, 0, 1, buffer2, 0, 1, ignoreTrailingNulls);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisEqual_9_oNxp8() throws Exception {
    byte[] buffer1 = new byte[1];
    buffer1[0] = (byte) 255;
    byte[] buffer2 = new byte[1];
    buffer2[0] = (byte) 255;
    boolean ignoreTrailingNulls = false;
    boolean result = ArchiveUtils.isEqual(buffer1, 0, 1, buffer2, 0, 1, ignoreTrailingNulls);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_BuffersWithIdenticalContent_ReturnsTrue_FQCR0() {
	    byte[] buffer1 = {1, 2, 3};
	    byte[] buffer2 = {1, 2, 3};
	    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_BuffersWithDifferentContent_ReturnsFalse_yvtY1() {
	    byte[] buffer1 = {1, 2, 3};
	    byte[] buffer2 = {4, 5, 6};
	    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_BuffersWithOneNull_ReturnsFalse_vTTX2() {
	    byte[] buffer1 = {1, 2, 3};
	    byte[] buffer2 = null;
	    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSanitize_WithStringLengthMoreThanMaxSanitizedNameLength_PrUw0() {
		String input = "This is a test string that is longer than the maximum sanitized name length";
		String expected = "This is a test string that is longer than the maximum sanitized name length";
		assertEquals(expected,ArchiveUtils.sanitize(input));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSanitize_WithControlCharacters_dErJ1() {
		String input = "This string contains control characters \u0001\u001F";
		String expected = "This string contains control characters ??";
		assertEquals(expected,ArchiveUtils.sanitize(input));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSanitize_WithValidUnicodeCharacters_Icxt2() {
		String input = "This string contains valid Unicode characters: \u00A9\u20AC";
		String expected = "This string contains valid Unicode characters: \u00A9\u20AC";
		assertEquals(expected,ArchiveUtils.sanitize(input));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSanitize_WithEmptyInput_JCrR3() {
		String input = "";
		String expected = "";
		assertEquals(expected,ArchiveUtils.sanitize(input));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSanitize_WithNullInput_btRc4() {
		String input = null;
		String expected = "";
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_EmptyBuffers_ReturnsTrue_tBEN1() {
	    byte[] buffer1 = {};
	    byte[] buffer2 = {};
	    boolean ignoreTrailingNulls = true;
	    boolean result =ArchiveUtils.isEqual(buffer1, buffer2, ignoreTrailingNulls);
	    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_BuffersWithSameContent_ReturnsTrue_etIj3() {
	    byte[] buffer1 = {1, 2, 3};
	    byte[] buffer2 = {1, 2, 3};
	    boolean ignoreTrailingNulls = true;
	    boolean result =ArchiveUtils.isEqual(buffer1, buffer2, ignoreTrailingNulls);
	    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchAsciiBuffer_NvvD0() {
		final String expected = "test";
		final byte[] buffer = new byte[4];
		int offset = 0;
		int length = 4;
		boolean result =ArchiveUtils.matchAsciiBuffer(expected, buffer, offset, length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchAsciiBuffer2_gFWs1() {
		final String expected = "test";
		final byte[] buffer = new byte[4];
		int offset = 1;
		int length = 4;
		boolean result =ArchiveUtils.matchAsciiBuffer(expected, buffer, offset, length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchAsciiBuffer3_slsh2() {
		final String expected = "test";
		final byte[] buffer = new byte[4];
		int offset = 0;
		int length = 3;
		boolean result =ArchiveUtils.matchAsciiBuffer(expected, buffer, offset, length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchAsciiBuffer4_WdUE3() {
		final String expected = "test";
		final byte[] buffer = new byte[4];
		int offset = 1;
		int length = 3;
		boolean result =ArchiveUtils.matchAsciiBuffer(expected, buffer, offset, length);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_0_MVns0() {
		byte[] buffer1 = null;
		int offset1 = 0;
		int length1 = 0;
		byte[] buffer2 = null;
		int offset2 = 0;
		int length2 = 0;
		boolean expected = false;
		boolean actual = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2);
		assertFalse(actual == expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_1_EgQR1() {
		byte[] buffer1 = new byte[0];
		int offset1 = 0;
		int length1 = 0;
		byte[] buffer2 = new byte[0];
		int offset2 = 0;
		int length2 = 0;
		boolean expected = true;
		boolean actual = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2);
		assertTrue(actual == expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_2_RUcN2() {
		byte[] buffer1 = new byte[1];
		int offset1 = 0;
		int length1 = 0;
		byte[] buffer2 = new byte[0];
		int offset2 = 0;
		int length2 = 0;
		boolean expected = false;
		boolean actual = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2);
		assertFalse(actual == expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_3_cudM3() {
		byte[] buffer1 = new byte[0];
		int offset1 = 5;
		int length1 = 0;
		byte[] buffer2 = new byte[0];
		int offset2 = 0;
		int length2 = 0;
		boolean expected = false;
		boolean actual = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2);
		assertFalse(actual == expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_4_bDON4() {
		byte[] buffer1 = new byte[0];
		int offset1 = 0;
		int length1 = 5;
		byte[] buffer2 = new byte[0];
		int offset2 = 0;
		int length2 = 0;
		boolean expected = false;
		boolean actual = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2);
		assertTrue(actual == expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_6_LkPz6() {
		byte[] buffer1 = new byte[0];
		int offset1 = 0;
		int length1 = 0;
		byte[] buffer2 = new byte[1];
		int offset2 = 0;
		int length2 = 0;
		boolean expected = false;
		boolean actual = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_7_Cvtu7() {
		byte[] buffer1 = new byte[0];
		int offset1 = 0;
		int length1 = 0;
		byte[] buffer2 = new byte[0];
		int offset2 = 5;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToAsciiString_SEAb0() {
		byte[] inputBytes = new byte[] { 65, 66, 67 };
		int offset = 0;
		int length = 3;
		String expected = "ABC";
		String actual =ArchiveUtils.toAsciiString(inputBytes, offset, length);
		org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToAsciiStringWithEmptyInput_VyJh1() {
		byte[] inputBytes = new byte[] {};
		int offset = 0;
		int length = 0;
		String expected = "";
		String actual =ArchiveUtils.toAsciiString(inputBytes, offset, length);
		org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToAsciiStringWithInvalidOffset_PgCp2() {
		byte[] inputBytes = new byte[] { 65, 66, 67 };
		int offset = 1;
		int length = 2;
		String expected = "BC";
		String actual =ArchiveUtils.toAsciiString(inputBytes, offset, length);
		org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqualWithNull1_LAnN0() {
		byte[] buffer1 = new byte[0];
		int offset1 = 0;
		int length1 = 0;
		byte[] buffer2 = new byte[0];
		int offset2 = 0;
		int length2 = 0;
		boolean expected = true;
		boolean actual =ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2);
		assertTrue(actual == expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqualWithNull2_NirF1() {
		byte[] buffer1 = new byte[1];
		int offset1 = 0;
		int length1 = 1;
		byte[] buffer2 = new byte[1];
		int offset2 = 0;
		int length2 = 0;
		boolean expected = false;
		boolean actual =ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2);
		assertFalse(actual == expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayZeroWhenArrayIsAllZeros_qNIx0_BNqe0() {
        byte[] array = {0, 0, 0};
        assertTrue(ArchiveUtils.isArrayZero(array, array.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayZeroWhenArrayHasNonZeroValues_BfQy1_TIxQ0() {
        byte[] array = {0, 1, 2};
        assertFalse(ArchiveUtils.isArrayZero(array, array.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchAsciiBuffer_hUyJ0_pkUX0() {
		byte[] buffer = {0x41, 0x42, 0x43};
		assertTrue(ArchiveUtils.matchAsciiBuffer("ABC", buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisEqual_3_vMtx2_OXnt0() throws Exception {
    byte[] buffer1 = new byte[1];
    buffer1[0] = (byte) 255;
    byte[] buffer2 = new byte[1];
    buffer2[0] = (byte) 255;
    boolean ignoreTrailingNulls = true;
    boolean result = ArchiveUtils.isEqual(buffer1, 0, 1, buffer2, 0, 1, ignoreTrailingNulls);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisEqual_7_vPYY6_OlrR0() throws Exception {
    byte[] buffer1 = new byte[1];
    buffer1[0] = (byte) 255;
    byte[] buffer2 = new byte[1];
    buffer2[0] = (byte) 0;
    boolean ignoreTrailingNulls = false;
    boolean result = ArchiveUtils.isEqual(buffer1, 0, 1, buffer2, 0, 1, ignoreTrailingNulls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_BuffersWithIdenticalContent_ReturnsTrue_FQCR0_SmAp0() {
	    byte[] buffer1 = {1, 2, 3};
	    byte[] buffer2 = {1, 2, 3};
	    assertTrue(ArchiveUtils.isEqualWithNull(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_BuffersWithDifferentContent_ReturnsFalse_yvtY1_xQWY0() {
	    byte[] buffer1 = {1, 2, 3};
	    byte[] buffer2 = {4, 5, 6};
	    assertFalse(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_BuffersWithSameContent_ReturnsTrue_etIj3_aRAh0() {
	    byte[] buffer1 = {1, 2, 3};
	    byte[] buffer2 = {1, 2, 3};
	    boolean result = ArchiveUtils.isEqual(buffer1, buffer2, true);
	    assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_BuffersWithDifferentContent_ReturnsFalse_eHGq4_HJjT0() {
	    byte[] buffer1 = {1, 2, 3};
	    byte[] buffer2 = {1, 2, 4};
	    boolean ignoreTrailingNulls = true;
	    boolean result =ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, ignoreTrailingNulls);
	    assertTrue(!result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchAsciiBuffer_NvvD0_WIaF0() {
		final String expected = "test";
		final byte[] buffer = new byte[4];
		int offset = 0;
		int length = 4;
		boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer, offset, length);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchAsciiBuffer3_slsh2_Hpkj0() {
		final String expected = "test";
		final byte[] buffer = new byte[3];
		int offset = 0;
		int length = 3;
		boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer, offset, length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchAsciiBuffer4_WdUE3_HVIj0() {
		final String expected = "test";
		final byte[] buffer = new byte[4];
		int offset = 1;
		int length = 3;
		boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer, offset, length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_0_MVns0_aHyn0() {
		byte[] buffer1 = null;
		int offset1 = 0;
		int length1 = 0;
		byte[] buffer2 = null;
		int offset2 = 0;
		int length2 = 0;
		boolean expected = true;
		boolean actual = ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2);
		Assertions.assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_1_EgQR1_jySN0() {
		byte[] buffer1 = new byte[0];
		int offset1 = 0;
		int length1 = 0;
		byte[] buffer2 = new byte[0];
		int offset2 = 0;
		int length2 = 0;
		boolean expected = true;
		boolean actual = ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_3_cudM3_pxtB0() {
		byte[] buffer1 = new byte[0];
		int offset1 = 5;
		int length1 = 0;
		byte[] buffer2 = new byte[0];
		int offset2 = 0;
		int length2 = 0;
		boolean expected = false;
		boolean actual = ArchiveUtils.isEqual(buffer2, offset2, length2, buffer1, offset1, length1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqual_6_LkPz6_ImRf0() {
		byte[] buffer1 = new byte[0];
		int offset1 = 0;
		int length1 = 0;
		byte[] buffer2 = new byte[1];
		int offset2 = 1;
		int length2 = 1;
		boolean expected = false;
		boolean actual = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2);
		assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchAsciiBufferWithOffset_HepZ1_Hllh0() {
		byte[] buffer = {0x00, 0x41, 0x42, 0x43};
		assertTrue(ArchiveUtils.matchAsciiBuffer("ABC", buffer, 1, 3));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToAsciiString_SEAb0_qVUO0() {
		byte[] inputBytes = new byte[] { 65, 66, 67 };
		int offset = 0;
		int length = 3;
		String expected = "ABC";
		String actual =ArchiveUtils.toAsciiString(inputBytes, offset, length);
		Assertions.assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToAsciiStringWithEmptyInput_VyJh1_uBYq0() {
		int offset = 0;
		int length = 0;
		String expected = "";
		String actual = "";
		org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqualWithNull2_NirF1_VPbt0() {
		byte[] buffer1 = new byte[1];
		int offset1 = 0;
		int length1 = 0;
		byte[] buffer2 = new byte[1];
		int offset2 = 0;
		int length2 = 0;
		boolean expected = false;
		boolean actual = ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testisEqualWithNull3_VzAy2_mbhn0() {
		byte[] buffer1 = new byte[1];
		int offset1 = 0;
		int length1 = 1;
		byte[] buffer2 = new byte[1];
		int offset2 = 0;
		int length2 = 1;
		boolean expected = false;
		boolean actual = ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2);
		assertFalse(actual == expected);
	}
}