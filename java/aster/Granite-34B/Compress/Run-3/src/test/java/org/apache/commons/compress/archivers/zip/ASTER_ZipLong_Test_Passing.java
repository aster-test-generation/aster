/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipLong_Test_Passing {
    private static final int WORD = 4;
    public void putLong(final long value, final byte[] bytes, final int offset) {
        bytes[offset] = (byte) (value & 0xFF);
        bytes[offset + 1] = (byte) ((value >> 8) & 0xFF);
        bytes[offset + 2] = (byte) ((value >> 16) & 0xFF);
        bytes[offset + 3] = (byte) ((value >> 24) & 0xFF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong_oCVE0() throws Exception {
        byte[] buf = new byte[4];
        ZipLong.putLong(0x12345678, buf, 0);
        byte[] expected = { (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12 };
        assertArrayEquals(expected, buf);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLongWithOffset_mLWn1() throws Exception {
        byte[] buf = new byte[8];
        ZipLong.putLong(0x12345678, buf, 4);
        byte[] expected = { 0, 0, 0, 0, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12 };
        assertArrayEquals(expected, buf);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_vYHu0() throws Exception {
        ZipLong zipLong = new ZipLong(new byte[] {0x01, 0x02, 0x03, 0x04}, 0);
        assertEquals("ZipLong value: 16909060", zipLong.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_nMLU1() throws Exception {
        ZipLong zipLong = new ZipLong(1234567890);
        assertEquals("ZipLong value: 1234567890", zipLong.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_gEKF2() throws Exception {
        ZipLong zipLong = new ZipLong(1234567890123456789L);
        assertEquals("ZipLong value: 1234567890123456800", zipLong.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_nKla3() throws Exception {
        ZipLong zipLong = new ZipLong(new byte[] {0x01, 0x02, 0x03, 0x04});
        assertEquals("ZipLong value: 16909060", zipLong.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest1_VHWi0() throws Exception {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        assertEquals(0, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest2_VkzU1() throws Exception {
        ZipLong zipLong = new ZipLong(0);
        assertEquals(0, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest3_xeBT2() throws Exception {
        ZipLong zipLong = new ZipLong(0L);
        assertEquals(0, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest4_JPsn3() throws Exception {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0});
        assertEquals(0, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesTest1_NWCj0() throws Exception {
        ZipLong zipLong = new ZipLong(new byte[] {0, 1, 2, 3}, 0);
        byte[] expected = new byte[] {0, 1, 2, 3};
        assertArrayEquals(expected, zipLong.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesTest2_gQSF1() throws Exception {
        ZipLong zipLong = new ZipLong(12345);
        byte[] expected = new byte[] {0x39, 0x30};
        assertArrayEquals(expected, zipLong.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesTest4_PMrw3() throws Exception {
        ZipLong zipLong = new ZipLong(new byte[] {0, 1, 2, 3});
        byte[] expected = new byte[] {0, 1, 2, 3};
        assertArrayEquals(expected, zipLong.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getIntValueTest1_LDmO0() throws Exception {
    ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 1}, 0);
    int actual = zipLong.getIntValue();
    int expected = 1;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getIntValueTest2_DSsK1() throws Exception {
    ZipLong zipLong = new ZipLong(1);
    int actual = zipLong.getIntValue();
    int expected = 1;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getIntValueTest3_TjlE2() throws Exception {
    ZipLong zipLong = new ZipLong(1L);
    int actual = zipLong.getIntValue();
    int expected = 1;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getIntValueTest4_eapa3() throws Exception {
    ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 1});
    int actual = zipLong.getIntValue();
    int expected = 1;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHashCode_Vaqm0() throws Exception {
		ZipLong zipLong = new ZipLong(new byte[] {0x01, 0x02, 0x03, 0x04}, 0);
		assertEquals(zipLong.hashCode(), (int) zipLong.getValue());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHashCode_wmRs1() throws Exception {
		ZipLong zipLong = new ZipLong(0x01020304);
		assertEquals(zipLong.hashCode(), (int) zipLong.getValue());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHashCode_goFK2() throws Exception {
		ZipLong zipLong = new ZipLong(0x01020304L);
		assertEquals(zipLong.hashCode(), (int) zipLong.getValue());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHashCode_oYUz3() throws Exception {
		ZipLong zipLong = new ZipLong(new byte[] {0x01, 0x02, 0x03, 0x04});
		assertEquals(zipLong.hashCode(), (int) zipLong.getValue());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesForLongValue_lBXp0() throws Exception {
        final byte[] expected = new byte[WORD];
        putLong(123456789L, expected, 0);
        assertArrayEquals(expected, ZipLong.getBytes(123456789L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesForZeroValue_mjFf1() throws Exception {
        final byte[] expected = new byte[WORD];
        putLong(0L, expected, 0);
        assertArrayEquals(expected, ZipLong.getBytes(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesForNegativeValue_kjhS2() throws Exception {
        final byte[] expected = new byte[WORD];
        putLong(-123456789L, expected, 0);
        assertArrayEquals(expected, ZipLong.getBytes(-123456789L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesForMaxPositiveValue_Ritg3() throws Exception {
        final byte[] expected = new byte[WORD];
        putLong(Long.MAX_VALUE, expected, 0);
        assertArrayEquals(expected, ZipLong.getBytes(Long.MAX_VALUE));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesForMaxNegativeValue_cehO4() throws Exception {
        final byte[] expected = new byte[WORD];
        putLong(Long.MIN_VALUE, expected, 0);
        assertArrayEquals(expected, ZipLong.getBytes(Long.MIN_VALUE));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesForRandomValue_MwWa5() throws Exception {
        final byte[] expected = new byte[WORD];
        putLong(987654321L, expected, 0);
        assertArrayEquals(expected, ZipLong.getBytes(987654321L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesForAnotherRandomValue_bGzd6() throws Exception {
        final byte[] expected = new byte[WORD];
        putLong(-987654321L, expected, 0);
        assertArrayEquals(expected, ZipLong.getBytes(-987654321L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesForOneValue_XiOS7() throws Exception {
        final byte[] expected = new byte[WORD];
        putLong(1L, expected, 0);
        assertArrayEquals(expected, ZipLong.getBytes(1L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesForNegativeOneValue_iYaV8() throws Exception {
        final byte[] expected = new byte[WORD];
        putLong(-1L, expected, 0);
        assertArrayEquals(expected, ZipLong.getBytes(-1L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong_LXaR0() throws Exception {
        byte[] bytes = new byte[4];
        int offset = 0;
        ZipLong zipLong = new ZipLong(bytes, offset);
        zipLong.putLong(bytes, offset);
        assertEquals(0, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong1_nvQB1() throws Exception {
        int value = 10;
        byte[] buf = new byte[4];
        int offset = 0;
        ZipLong zipLong = new ZipLong(value);
        zipLong.putLong(buf, offset);
        assertEquals(10, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong2_yEcO2() throws Exception {
        long value = 10L;
        byte[] buf = new byte[4];
        int offset = 0;
        ZipLong zipLong = new ZipLong(value);
        zipLong.putLong(buf, offset);
        assertEquals(10, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong3_ovaX3() throws Exception {
        byte[] bytes = new byte[4];
        ZipLong zipLong = new ZipLong(bytes);
        zipLong.putLong(bytes, 0);
        assertEquals(0, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClone_pSco0() throws Exception {
		ZipLong zipLong = new ZipLong(new byte[] {1, 2, 3}, 0);
		ZipLong clonedZipLong = (ZipLong) zipLong.clone();
		assertEquals(zipLong, clonedZipLong);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClone1_Ejij1() throws Exception {
		ZipLong zipLong = new ZipLong(100);
		ZipLong clonedZipLong = (ZipLong) zipLong.clone();
		assertEquals(zipLong, clonedZipLong);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClone2_nWzt2() throws Exception {
		ZipLong zipLong = new ZipLong(10000000000L);
		ZipLong clonedZipLong = (ZipLong) zipLong.clone();
		assertEquals(zipLong, clonedZipLong);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClone3_nsKv3() throws Exception {
		ZipLong zipLong = new ZipLong(new byte[] {1, 2, 3});
		ZipLong clonedZipLong = (ZipLong) zipLong.clone();
		assertEquals(zipLong, clonedZipLong);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest1_chtI0() throws Exception {
		ZipLong zipLong = new ZipLong(new byte[] { 0, 0, 0, 0 }, 0);
		assertEquals(0, ZipLong.getValue(zipLong.getBytes(), 0));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest2_EiQy1() throws Exception {
		ZipLong zipLong = new ZipLong(new byte[] { 0, 0, 0, 1 }, 0);
		assertEquals(1, ZipLong.getValue(zipLong.getBytes(), 0));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest3_Huno2() throws Exception {
		ZipLong zipLong = new ZipLong(new byte[] { 0, 0, 1, 0 }, 0);
		assertEquals(256, ZipLong.getValue(zipLong.getBytes(), 0));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest4_HQTP3() throws Exception {
		ZipLong zipLong = new ZipLong(new byte[] { 0, 1, 0, 0 }, 0);
		assertEquals(65536, ZipLong.getValue(zipLong.getBytes(), 0));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest5_nycF4() throws Exception {
		ZipLong zipLong = new ZipLong(new byte[] { 1, 0, 0, 0 }, 0);
		assertEquals(16777216, ZipLong.getValue(zipLong.getBytes(), 0));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest6_zTEn5() throws Exception {
		ZipLong zipLong = new ZipLong(new byte[] { -1, -1, -1, 7 }, 0);
		assertEquals(2147483647, ZipLong.getValue(zipLong.getBytes(), 0));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest7_bfFU6() throws Exception {
		ZipLong zipLong = new ZipLong(new byte[] { -1, -1, -1, -1 }, 0);
		assertEquals(4294967295L, ZipLong.getValue(zipLong.getBytes(), 0));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getValueTest8_RmMY7() throws Exception {
		ZipLong zipLong = new ZipLong(new byte[] { 0, 1, 2, 3 }, 0);
		assertEquals(513, ZipLong.getValue(zipLong.getBytes(), 0));
	}
}