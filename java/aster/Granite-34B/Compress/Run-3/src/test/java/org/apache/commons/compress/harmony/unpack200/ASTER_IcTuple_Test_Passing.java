/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IcTuple_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOuterClassIndex_diRQ0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        int result = icTuple.outerClassIndex();
        int expected = 4;
        assert result == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOuterClassIndexWithCoverage_eEVA1() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        int result = icTuple.outerClassIndex();
        int expected = 4;
        assert result == expected;
        assert result != 5;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymous_oFkM0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
    boolean actual = icTuple.outerIsAnonymous();
    boolean expected = true;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymous2_QQSO1() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
    boolean actual = icTuple.outerIsAnonymous();
    boolean expected = false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedExplicitFlagSet_0_iGlL0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    boolean actual = icTuple.nestedExplicitFlagSet();
    boolean expected = false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedExplicitFlagSet_1_OtPA1() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    boolean actual = icTuple.nestedExplicitFlagSet();
    boolean expected = true;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSimpleClassNameIndex_wElV0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        int result = icTuple.simpleClassNameIndex();
        int expected = 0; // Replace with the expected value
        assert result == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSimpleClassNameIndex_withNegativeValue_svwO1() throws Exception {
        IcTuple icTuple = new IcTuple("C", -1, "C2", "N", 1, 2, 3, 4);
        int result = icTuple.simpleClassNameIndex();
        int expected = -1; // Replace with the expected value
        assert result == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSimpleClassNameIndex_withZeroValue_izGt2() throws Exception {
        IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 1, 2, 3, 4);
        int result = icTuple.simpleClassNameIndex();
        int expected = 0; // Replace with the expected value
        assert result == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_mhnF0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        int hashCode = icTuple.hashCode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullValues_YZYg1() throws Exception {
        IcTuple icTuple = new IcTuple(null, 0, null, null, 0, 0, 0, 0);
        int hashCode = icTuple.hashCode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPredicted_1_YtOb0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    boolean actual = icTuple.predicted();
    boolean expected = true;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPredicted_2_YNES1() throws Exception {
    IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    boolean actual = icTuple.predicted();
    boolean expected = false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPredicted_3_YAkN2() throws Exception {
    IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 1, 1, 1, 0);
    boolean actual = icTuple.predicted();
    boolean expected = true;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAnonymous_vHrs0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        boolean actual = icTuple.isAnonymous();
        boolean expected = false;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAnonymous2_vhpV1() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        boolean actual = icTuple.isAnonymous();
        boolean expected = true;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getC2Test_vCwg0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("C2", icTuple.getC2());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_equals_0_WPjq0() throws Exception {
    IcTuple tuple1 = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    IcTuple tuple2 = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    assertEquals(true, tuple1.equals(tuple2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_equals_1_NvQq1() throws Exception {
    IcTuple tuple1 = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    IcTuple tuple2 = new IcTuple("C2", 0, "C2", "N", 0, 0, 0, 0);
    assertEquals(false, tuple1.equals(tuple2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_equals_2_aMRg2() throws Exception {
    IcTuple tuple1 = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    IcTuple tuple2 = new IcTuple("C", 0, "C22", "N", 0, 0, 0, 0);
    assertEquals(false, tuple1.equals(tuple2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_equals_3_WeAN3() throws Exception {
    IcTuple tuple1 = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    IcTuple tuple2 = new IcTuple("C", 0, "C2", "N2", 0, 0, 0, 0);
    assertEquals(false, tuple1.equals(tuple2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_equals_4_OYzp4() throws Exception {
    IcTuple tuple1 = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    IcTuple tuple2 = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    assertEquals(false, tuple1.equals(tuple2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_equals_5_cHDG5() throws Exception {
    IcTuple tuple1 = new IcTuple("C", 0, "C2", "N", 1, 0, 0, 0);
    IcTuple tuple2 = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    assertEquals(false, tuple1.equals(tuple2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_equals_6_vUEn6() throws Exception {
    IcTuple tuple1 = new IcTuple("C", 0, "C2", "N", 0, 1, 0, 0);
    IcTuple tuple2 = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    assertEquals(false, tuple1.equals(tuple2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_equals_7_oQOe7() throws Exception {
    IcTuple tuple1 = new IcTuple("C", 0, "C2", "N", 0, 0, 1, 0);
    IcTuple tuple2 = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    assertEquals(false, tuple1.equals(tuple2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_equals_8_KRVq8() throws Exception {
    IcTuple tuple1 = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 1);
    IcTuple tuple2 = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    assertEquals(false, tuple1.equals(tuple2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_equals_9_qwSn9() throws Exception {
    IcTuple tuple1 = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    IcTuple tuple2 = null;
    assertEquals(false, tuple1.equals(tuple2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSimpleClassName_akUq0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        String result = icTuple.simpleClassName();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMember_pSWs0() throws Exception {
        IcTuple tuple = new IcTuple("C", 1, "C2", "N", 2, 3, 4, 5);
        boolean result = tuple.isMember();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMemberWithCoverage_gTwF1() throws Exception {
        IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
        boolean result = tuple.isMember();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getC_returnsCorrectValue_CpUa0() throws Exception {
        IcTuple tuple = new IcTuple("value1", 10, "value2", "value3", 1, 2, 3, 4);
        assertEquals("value1", tuple.getC());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getC_returnsCorrectValue_withDifferentConstructorParams_yNBE1() throws Exception {
        IcTuple tuple = new IcTuple("value4", 20, "value5", "value6", 5, 6, 7, 8);
        assertEquals("value4", tuple.getC());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_hozI0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
    String expected = "IcTuple (";
    expected += icTuple.simpleClassName();
    expected += " in ";
    expected += icTuple.outerClassString();
    expected += ")";
    assertEquals(expected, icTuple.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testThisClassIndexWhenPredicted_dHXE0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        int actual = icTuple.thisClassIndex();
        int expected = 1;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testThisClassIndexWhenNotPredicted_zzww1() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        int actual = icTuple.thisClassIndex();
        int expected = -1;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetF_rpJF0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 100, "C2", "N", 1, 2, 3, 4);
    int actual = icTuple.getF();
    int expected = 100;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFWithNegativeF_glSb1() throws Exception {
    IcTuple icTuple = new IcTuple("C", -100, "C2", "N", 1, 2, 3, 4);
    int actual = icTuple.getF();
    int expected = -100;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFWithZeroF_oJIX2() throws Exception {
    IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 1, 2, 3, 4);
    int actual = icTuple.getF();
    int expected = 0;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getTupleIndex_1_GNva0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        int expected = 1;
        int actual = icTuple.getTupleIndex();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getTupleIndex_2_NcSe1() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 1, 1, 2);
        int expected = 2;
        int actual = icTuple.getTupleIndex();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getTupleIndex_3_rmQp2() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 3, 1, 1, 3);
        int expected = 3;
        int actual = icTuple.getTupleIndex();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getTupleIndex_4_mHlr3() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 4, 1, 1, 4);
        int expected = 4;
        int actual = icTuple.getTupleIndex();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getTupleIndex_5_lcjg4() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 5, 1, 1, 5);
        int expected = 5;
        int actual = icTuple.getTupleIndex();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getTupleIndex_6_GMGS5() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 1, 1);
        int expected = 6;
        int actual = icTuple.getTupleIndex();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getTupleIndex_7_QbWi6() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 3, 1, 1);
        int expected = 7;
        int actual = icTuple.getTupleIndex();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getTupleIndex_8_aFwU7() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 4, 1, 1);
        int expected = 8;
        int actual = icTuple.getTupleIndex();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getTupleIndex_9_WiUX8() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 5, 1, 1);
        int expected = 9;
        int actual = icTuple.getTupleIndex();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getTupleIndex_10_VeSE9() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 2, 1);
        int expected = 10;
        int actual = icTuple.getTupleIndex();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getTupleIndex_11_AkZT10() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 3, 1);
        int expected = 11;
        int actual = icTuple.getTupleIndex();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getTupleIndex_12_bGYY11() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 4, 1);
        int expected = 12;
        int actual = icTuple.getTupleIndex();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerBreakAtDollarWithOneElement_IKNp0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        String[] expected = {"C"};
        assertArrayEquals(expected, icTuple.innerBreakAtDollar("C"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerBreakAtDollarWithTwoElements_twbV1() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        String[] expected = {"C", "C2"};
        assertArrayEquals(expected, icTuple.innerBreakAtDollar("C$C2"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerBreakAtDollarWithThreeElements_zHbI2() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        String[] expected = {"C", "C2", "N"};
        assertArrayEquals(expected, icTuple.innerBreakAtDollar("C$C2$N"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerBreakAtDollarWithFourElements_IsFT3() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        String[] expected = {"C", "C2", "N", "1"};
        assertArrayEquals(expected, icTuple.innerBreakAtDollar("C$C2$N$1"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerBreakAtDollarWithNoElements_rRZb4() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        String[] expected = {};
        assertArrayEquals(expected, icTuple.innerBreakAtDollar(""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassString_0_bpzE0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
    String result = icTuple.thisClassString();
    assertEquals("C", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassString_1_JecD1() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    String result = icTuple.thisClassString();
    assertEquals("C2$N", result);
}
}