/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GeneralPurposeBit_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getSlidingDictionarySizeTest_CrTQ0() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        int slidingDictionarySize = generalPurposeBit.getSlidingDictionarySize();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_WithNullObject_ReturnsFalse_leSE0() throws Exception {
    GeneralPurposeBit g = new GeneralPurposeBit();
    Object o = null;
    boolean actual = g.equals(o);
    boolean expected = false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_WithObjectOfDifferentClass_ReturnsFalse_rRNf1() throws Exception {
    GeneralPurposeBit g = new GeneralPurposeBit();
    Object o = new Object();
    boolean actual = g.equals(o);
    boolean expected = false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUseStrongEncryptionTrue_LMEE0() throws Exception {
        GeneralPurposeBit gpb = new GeneralPurposeBit();
        gpb.useStrongEncryption(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUseStrongEncryptionFalse_rvVV1() throws Exception {
        GeneralPurposeBit gpb = new GeneralPurposeBit();
        gpb.useStrongEncryption(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getNumberOfShannonFanoTrees_aPqo0() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        int actual = generalPurposeBit.getNumberOfShannonFanoTrees();
        int expected = 0; // Replace with expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getNumberOfShannonFanoTrees_whenCalledWithInvalidInput_thenThrowsException_Vsnl2() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        org.junit.jupiter.api.Assertions.assertThrows(Exception.class, () -> generalPurposeBit.getNumberOfShannonFanoTrees());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_LXPw0() throws Exception {
        GeneralPurposeBit gpb = new GeneralPurposeBit();
        byte[] expected = new byte[2];
        byte[] actual = gpb.encode();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesUTF8ForNames_fOBL0() throws Exception {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    boolean result = generalPurposeBit.usesUTF8ForNames();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testUseDataDescriptor_GAZO0() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        generalPurposeBit.useDataDescriptor(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUseUTF8ForNames_hMJE0() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        generalPurposeBit.useUTF8ForNames(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUseUTF8ForNamesWithFalse_mAsy1() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        generalPurposeBit.useUTF8ForNames(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testUseEncryptionWithTrue_nJwL0() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        generalPurposeBit.useEncryption(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testUseEncryptionWithFalse_fkFy1() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        generalPurposeBit.useEncryption(false);
    }
}