/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.jar.JarOutputStream;
import org.apache.commons.io.input.BoundedInputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200UnpackerAdapter_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadPath_rSrm0() throws Exception {
        FileInputStream fis = new FileInputStream("path");
        String path = Pack200UnpackerAdapter.readPath(fis);
        assertEquals("path", path);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackerAdapter_jmeP0() throws Exception {
        Pack200UnpackerAdapter unpacker = new Pack200UnpackerAdapter();
        assertTrue(unpacker != null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackerAdapterWithFileAndJarOutputStream_piEy1() throws Exception {
        Pack200UnpackerAdapter unpacker = new Pack200UnpackerAdapter();
        File file = new File("test.txt");
        JarOutputStream out = new JarOutputStream(System.out);
        try {
            unpacker.unpack(file, out);
        } catch (IOException e) {
            fail("IOException should not be thrown");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackerAdapterWithNullJarOutputStream_GewF3() throws Exception {
        Pack200UnpackerAdapter unpacker = new Pack200UnpackerAdapter();
        File file = new File("test.txt");
        try {
            unpacker.unpack(file, null);
            fail("IllegalArgumentException should be thrown");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackerAdapterWithNegativeBufferSize_dWZI4() throws Exception {
        Pack200UnpackerAdapter unpacker = new Pack200UnpackerAdapter();
        File file = new File("test.txt");
        JarOutputStream out = new JarOutputStream(System.out);
        try (InputStream in = new BufferedInputStream(Files.newInputStream(file.toPath()), -1)) {
            unpacker.unpack(in, out);
        } catch (IOException e) {
            fail("IOException should not be thrown");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackerAdapterWithZeroBufferSize_wMsN5() throws Exception {
        Pack200UnpackerAdapter unpacker = new Pack200UnpackerAdapter();
        File file = new File("test.txt");
        JarOutputStream out = new JarOutputStream(System.out);
        try (InputStream in = new BufferedInputStream(Files.newInputStream(file.toPath()), 0)) {
            unpacker.unpack(in, out);
        } catch (IOException e) {
            fail("IOException should not be thrown");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewBoundedInputStream_Tmhg0() throws IOException, URISyntaxException {
        URL url = new URL("http://example.com/file.txt");
        BoundedInputStream boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream(url);
        assertNotNull(boundedInputStream);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewBoundedInputStreamWithPath_PzMF1() throws IOException, URISyntaxException {
        URL url = new URL("http://example.com/file.txt");
        BoundedInputStream boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream(Paths.get(url.toURI()));
        assertNotNull(boundedInputStream);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewBoundedInputStreamWithFileInputStream_WivJ2() throws IOException {
        InputStream inputStream = new FileInputStream("test.txt");
        BoundedInputStream boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream(inputStream);
        assertEquals(boundedInputStream.getClass(), BoundedInputStream.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewBoundedInputStream_gbWk0() throws IOException {
        String first = "file1.txt";
        String[] more = {};
        BoundedInputStream boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream(first, more);
        assertNotNull(boundedInputStream);
        first = "file1.txt";
        more = new String[]{"file2.txt", "file3.txt"};
        boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream(first, more);
        assertNotNull(boundedInputStream);
        first = "nonexistentfile.txt";
        more = new String[]{};
        try {
            boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream(first, more);
        } catch (IOException e) {
        }
    }
}