/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_UnparseableExtraFieldData_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseFromCentralDirectoryData_kOhD0() {
        UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
        byte[] buffer = new byte[10];
        int offset = 2;
        int length = 8;
        unparseableExtraFieldData.parseFromCentralDirectoryData(buffer, offset, length);
        byte[] expected = Arrays.copyOfRange(buffer, offset, offset + length);
        assertArrayEquals(expected, unparseableExtraFieldData.getCentralDirectoryData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseFromCentralDirectoryDataWithNullBuffer_weVx1() {
        UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
        byte[] buffer = null;
        int offset = 2;
        int length = 8;
        unparseableExtraFieldData.parseFromCentralDirectoryData(buffer, offset, length);
        byte[] expected = null;
        assertArrayEquals(expected, unparseableExtraFieldData.getCentralDirectoryData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseFromCentralDirectoryDataWithNegativeOffset_BCYi2() {
        UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
        byte[] buffer = new byte[10];
        int offset = -2;
        int length = 8;
        unparseableExtraFieldData.parseFromCentralDirectoryData(buffer, offset, length);
        byte[] expected = new byte[0];
        assertArrayEquals(expected, unparseableExtraFieldData.getCentralDirectoryData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseFromCentralDirectoryDataWithNegativeLength_ZyxQ3() {
        UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
        byte[] buffer = new byte[10];
        int offset = 2;
        int length = -8;
        unparseableExtraFieldData.parseFromCentralDirectoryData(buffer, offset, length);
        byte[] expected = new byte[0];
        assertArrayEquals(expected, unparseableExtraFieldData.getCentralDirectoryData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseFromCentralDirectoryDataWithOffsetGreaterThanBufferLength_Cckb4() {
        UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
        byte[] buffer = new byte[10];
        int offset = 20;
        int length = 8;
        unparseableExtraFieldData.parseFromCentralDirectoryData(buffer, offset, length);
        byte[] expected = new byte[0];
        assertArrayEquals(expected, unparseableExtraFieldData.getCentralDirectoryData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseFromCentralDirectoryDataWithLengthGreaterThanBufferLength_Aasv5() {
        UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
        byte[] buffer = new byte[10];
        int offset = 2;
        int length = 20;
        unparseableExtraFieldData.parseFromCentralDirectoryData(buffer, offset, length);
        byte[] expected = Arrays.copyOfRange(buffer, offset, offset + 10);
        assertArrayEquals(expected, unparseableExtraFieldData.getCentralDirectoryData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataLength_BQdc0() {
        UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
        assertEquals(0, unparseableExtraFieldData.getLocalFileDataLength().getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLengthWhenCentralDirectoryDataIsNullOrEmpty_NTRq0() {
        UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
        assertEquals(unparseableExtraFieldData.getLocalFileDataLength(), unparseableExtraFieldData.getCentralDirectoryLength());
    }
}