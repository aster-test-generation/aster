/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AsiExtraField_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCentralDirectoryData_pYMZ0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] expected = asiExtraField.getLocalFileDataData();
        byte[] actual = asiExtraField.getCentralDirectoryData();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCentralDirectoryData_krLD1() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] expected = new byte[0];
        byte[] actual = asiExtraField.getCentralDirectoryData();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCentralDirectoryData_RbXq2() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] expected = new byte[10];
        byte[] actual = asiExtraField.getCentralDirectoryData();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCentralDirectoryData_vVPm3() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] expected = new byte[20];
        byte[] actual = asiExtraField.getCentralDirectoryData();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCentralDirectoryData_Czjc4() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] expected = new byte[30];
        byte[] actual = asiExtraField.getCentralDirectoryData();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCentralDirectoryData_NFEz5() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] expected = new byte[40];
        byte[] actual = asiExtraField.getCentralDirectoryData();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCentralDirectoryData_qePm6() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] expected = new byte[50];
        byte[] actual = asiExtraField.getCentralDirectoryData();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCentralDirectoryData_HSrA7() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] expected = new byte[60];
        byte[] actual = asiExtraField.getCentralDirectoryData();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCentralDirectoryData_ogYX8() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] expected = new byte[70];
        byte[] actual = asiExtraField.getCentralDirectoryData();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCentralDirectoryData_CHne9() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] expected = new byte[80];
        byte[] actual = asiExtraField.getCentralDirectoryData();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode_kAWU0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setMode(1);
        assertEquals(1, asiExtraField.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeWithNegativeValue_UfAB1() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setMode(-1);
        assertEquals(0, asiExtraField.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeWithZeroValue_chgs2() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setMode(0);
        assertEquals(0, asiExtraField.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeWithValueGreaterThanThree_hUlL3() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setMode(4);
        assertEquals(3, asiExtraField.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_OOkR0() throws Exception {
    AsiExtraField asiExtraField = new AsiExtraField();
    ZipShort zipShort = asiExtraField.getLocalFileDataLength();
    assertEquals(10, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDirectory_zKXB0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setDirectory(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDirectory2_clOe1() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setDirectory(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLengthTest_ecjp0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        ZipShort expected = asiExtraField.getLocalFileDataLength();
        ZipShort actual = asiExtraField.getCentralDirectoryLength();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLengthForNullTest_JYNj1() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.getLocalFileDataLength();
        ZipShort expected = null;
        ZipShort actual = asiExtraField.getCentralDirectoryLength();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUserId_pOxx0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setUserId(123);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUserId_MinimumValue_ZkVB1() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setUserId(Integer.MIN_VALUE);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUserId_MaximumValue_rwyK2() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setUserId(Integer.MAX_VALUE);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUserId_Zero_cLJK3() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setUserId(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUserId_NegativeValue_FjcF4() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setUserId(-123);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_wpyD0() throws Exception {
    AsiExtraField asiExtraField = new AsiExtraField();
    asiExtraField.getLocalFileDataData();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGroupIdTest_FYZV0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setGroupId(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsLinkTrue_Ivwn0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        boolean result = asiExtraField.isLink();
        org.junit.jupiter.api.Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsLinkFalse_CtqO1() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        boolean result = asiExtraField.isLink();
        org.junit.jupiter.api.Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_fvVj0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        int expectedMode = 0; // Replace with the expected mode value
        int actualMode = asiExtraField.getMode();
        assertEquals(expectedMode, actualMode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModeWithExpectedMode_VyMb1() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        int expectedMode = 1; // Replace with the expected mode value
        asiExtraField.setMode(expectedMode);
        int actualMode = asiExtraField.getMode();
        assertEquals(expectedMode, actualMode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModeWithUnexpectedMode_qtkG2() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        int expectedMode = 2; // Replace with the expected mode value
        asiExtraField.setMode(expectedMode);
        int actualMode = asiExtraField.getMode();
        assertEquals(expectedMode, actualMode);
    }
}