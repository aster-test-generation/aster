/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;
import java.io.File;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200CompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureNotMatching_TlBT1() {
    byte[] signature = new byte[10];
    signature[0] = 1;
    signature[1] = 2;
    signature[2] = 3;
    signature[3] = 4;
    signature[4] = 5;
    signature[5] = 6;
    signature[6] = 7;
    signature[7] = 8;
    signature[8] = 9;
    signature[9] = 10;
    boolean actual = Pack200CompressorInputStream.matches(signature, 10);
    assertFalse(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureMatching_Sakb2() {
    byte[] signature = new byte[10];
    signature[0] = -84;
    signature[1] = -49;
    signature[2] = -69;
    signature[3] = 8;
    signature[4] = 100;
    signature[5] = 4;
    signature[6] = 12;
    signature[7] = 0;
    signature[8] = 10;
    signature[9] = 0;
    boolean actual = Pack200CompressorInputStream.matches(signature, 10);
    assertTrue(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithLengthLessThanSIG_LENGTH_wvyF3() {
    byte[] signature = new byte[10];
    signature[0] = -84;
    signature[1] = -49;
    signature[2] = -69;
    signature[3] = 8;
    signature[4] = 100;
    signature[5] = 4;
    signature[6] = 12;
    signature[7] = 0;
    signature[8] = 10;
    signature[9] = 0;
    boolean actual = Pack200CompressorInputStream.matches(signature, 9);
    assertFalse(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead2_hMHm1() throws Exception {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), new HashMap<>());
        byte[] b = new byte[10];
        int off = 0;
        int count = 10;
        int result = pack200CompressorInputStream.read(b, off, count);
        assertTrue(result >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead4_LiaW3() throws Exception {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY, new HashMap<>());
        byte[] b = new byte[10];
        int off = 0;
        int count = 10;
        int result = pack200CompressorInputStream.read(b, off, count);
        assertTrue(result >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead7_ZTgl6() throws Exception {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY);
        byte[] b = new byte[10];
        int off = 0;
        int count = 10;
        int result = pack200CompressorInputStream.read(b, off, count);
        assertTrue(result >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead8_ENnq7() throws Exception {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"));
        byte[] b = new byte[10];
        int off = 0;
        int count = 10;
        int result = pack200CompressorInputStream.read(b, off, count);
        assertTrue(result >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose2_CFSp1() throws IOException {
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("file"), new HashMap<String, String>());
    pack200CompressorInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose4_NCFu3() throws IOException {
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("file"), Pack200Strategy.TEMP_FILE, new HashMap<String, String>());
    pack200CompressorInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose7_gZSt6() throws IOException {
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("file"), Pack200Strategy.TEMP_FILE);
    pack200CompressorInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose8_LzkQ7() throws IOException {
    Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("file"));
    pack200CompressorInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_VQFR6_yCil0() throws Exception {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test"), Pack200Strategy.TEMP_FILE);
        pack200CompressorInputStream.reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarkSupported2_ExhU1_NsLD0() throws IOException {
        Pack200CompressorInputStream obj = new Pack200CompressorInputStream(new File("test"), Pack200Strategy.TEMP_FILE, new HashMap<String, String>());
        boolean result = obj.markSupported();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarkSupported4_IqSi3_OlEK0() throws IOException {
        Pack200CompressorInputStream obj = new Pack200CompressorInputStream(new File("test"), Pack200Strategy.IN_MEMORY, new HashMap<String, String>());
        boolean result = obj.markSupported();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarkSupported7_BfGr6_uOFs0() throws IOException {
        Pack200CompressorInputStream obj = new Pack200CompressorInputStream(new File("test"), Pack200Strategy.IN_MEMORY);
        boolean result = obj.markSupported();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarkSupported8_oYIs7_GYUV0() throws IOException {
        Pack200CompressorInputStream obj = new Pack200CompressorInputStream(new File("test"));
        boolean result = obj.markSupported();
        assertTrue(result);
    }
}