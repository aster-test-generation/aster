/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveStructSparse_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffset_OjQr0() throws Exception {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0L, 0L);
        long offset = tarArchiveStructSparse.getOffset();
        assert offset == 0L;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffsetWithPositiveOffset_qrkk1() throws Exception {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(100L, 0L);
        long offset = tarArchiveStructSparse.getOffset();
        assert offset == 100L;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffsetWithNegativeOffset_LJhy2() throws Exception {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(-100L, 0L);
        long offset = tarArchiveStructSparse.getOffset();
        assert offset == -100L;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffsetWithMaxOffset_nrdH3() throws Exception {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(Long.MAX_VALUE, 0L);
        long offset = tarArchiveStructSparse.getOffset();
        assert offset == Long.MAX_VALUE;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffsetWithMinOffset_CKAy4() throws Exception {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(Long.MIN_VALUE, 0L);
        long offset = tarArchiveStructSparse.getOffset();
        assert offset == Long.MIN_VALUE;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_AJuv0() throws Exception {
        TarArchiveStructSparse struct = new TarArchiveStructSparse(100L, 50L);
        assertEquals("TarArchiveStructSparse{offset=100, numbytes=50}", struct.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumbytes_LWfr0() throws Exception {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0L, 0L);
        long result = tarArchiveStructSparse.getNumbytes();
        assertEquals(0L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_VTJi0() throws Exception {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0L, 0L);
        int expected = Objects.hash(0L, 0L);
        int actual = tarArchiveStructSparse.hashCode();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithOffset_Dztt1() throws Exception {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(1L, 0L);
        int expected = Objects.hash(1L, 0L);
        int actual = tarArchiveStructSparse.hashCode();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNumbytes_uNXY2() throws Exception {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0L, 1L);
        int expected = Objects.hash(0L, 1L);
        int actual = tarArchiveStructSparse.hashCode();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithBothParameters_uriy3() throws Exception {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(1L, 1L);
        int expected = Objects.hash(1L, 1L);
        int actual = tarArchiveStructSparse.hashCode();
        assertEquals(expected, actual);
    }
}