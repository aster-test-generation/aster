/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEquals_WithZipEightByteIntegerObject_ReturnsTrue_Rlnf0_1() {
		ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }, 0);
		ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new BigInteger("0"));
		ZipEightByteInteger zipEightByteInteger3 = new ZipEightByteInteger(0L);
		ZipEightByteInteger zipEightByteInteger4 = new ZipEightByteInteger(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });
		assertTrue(zipEightByteInteger.equals(zipEightByteInteger2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEquals_WithZipEightByteIntegerObject_ReturnsTrue_Rlnf0_2() {
		ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }, 0);
		ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new BigInteger("0"));
		ZipEightByteInteger zipEightByteInteger3 = new ZipEightByteInteger(0L);
		ZipEightByteInteger zipEightByteInteger4 = new ZipEightByteInteger(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });
		assertTrue(zipEightByteInteger.equals(zipEightByteInteger3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEquals_WithZipEightByteIntegerObject_ReturnsTrue_Rlnf0_3() {
		ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }, 0);
		ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new BigInteger("0"));
		ZipEightByteInteger zipEightByteInteger3 = new ZipEightByteInteger(0L);
		ZipEightByteInteger zipEightByteInteger4 = new ZipEightByteInteger(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });
		assertTrue(zipEightByteInteger.equals(zipEightByteInteger4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEquals_WithNonZipEightByteIntegerObject_ReturnsFalse_iPXQ1() {
		ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }, 0);
		assertFalse(zipEightByteInteger.equals(new Object()));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_iZMI0() {
    byte[] bytes = new byte[8];
    int offset = 0;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, offset);
    long expected = zipEightByteInteger.getLongValue();
    long actual = ZipEightByteInteger.getLongValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_QBXO0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        assertEquals("ZipEightByteInteger value: 0", zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_HFyx1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new BigInteger("1"));
        assertEquals("ZipEightByteInteger value: 1", zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_lrKt2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(0L);
        assertEquals("ZipEightByteInteger value: 0", zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_ShQR3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        assertEquals("ZipEightByteInteger value: 0", zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getLongValueTest1_MEqM0() {
		byte[] bytes = new byte[8];
		ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
		assertEquals(0, zipEightByteInteger.getLongValue(bytes));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesTest1_lcmY0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] {0, 0, 0, 0, 0, 0, 0, 0}, 0);
        byte[] expected = new byte[] {0, 0, 0, 0, 0, 0, 0, 0};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesTest2_VjMB1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new BigInteger("12345678901234567890"));
        byte[] expected = new byte[] {0, 0, 45, -76, 75, 112, -106, 63};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesTest3_EVIB2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1234567890123456789L);
        byte[] expected = new byte[] {0, 0, 0, 0, 0, 0, -112, 63};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesTest4_oDsd3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] {0, 0, 0, 0, 0, 0, 0, 0});
        byte[] expected = new byte[] {0, 0, 0, 0, 0, 0, 0, 0};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getValueTest1_oCFI0() {
    byte[] bytes = new byte[8];
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, 1);
    BigInteger expected = BigInteger.valueOf(0);
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLongValueTest1_GACp0() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }, 0);
	long expected = 0;
	long actual = zipEightByteInteger.getLongValue();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLongValueTest2_wGIA1() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new BigInteger("1"));
	long expected = 1;
	long actual = zipEightByteInteger.getLongValue();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLongValueTest3_jkVo2() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(0L);
	long expected = 0;
	long actual = zipEightByteInteger.getLongValue();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLongValueTest4_tnNo3() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] { 0, 0, 0, 0, 0, 0, 1, 0 });
	long expected = 256;
	long actual = zipEightByteInteger.getLongValue();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLongValueTest5_YXvD4() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] { 0, 0, 0, 0, 1, 0, 0, 0 });
	long expected = 65536;
	long actual = zipEightByteInteger.getLongValue();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLongValueTest6_cMPb5() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] { 0, 0, 0, 1, 0, 0, 0, 0 });
	long expected = 16777216;
	long actual = zipEightByteInteger.getLongValue();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLongValueTest7_VZea6() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] { 1, 0, 0, 0, 0, 0, 0, 0 });
	long expected = 4294967296L;
	long actual = zipEightByteInteger.getLongValue();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLongValueTest8_PTCO7() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] { 0, 0, 0, 0, 0, 0, 0, 1 });
	long expected = 1;
	long actual = zipEightByteInteger.getLongValue();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLongValueTest9_KubB8() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] { 0, 0, 0, 0, 0, 0, 0, -1 });
	long expected = 255;
	long actual = zipEightByteInteger.getLongValue();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLongValueTest10_kwga9() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] { 0, 0, 0, 0, 0, 0, -1, -1 });
	long expected = 65535;
	long actual = zipEightByteInteger.getLongValue();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLongValueTest11_YTJU10() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] { 0, 0, 0, 0, -1, -1, -1, -1 });
	long expected = 16777215;
	long actual = zipEightByteInteger.getLongValue();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithBigInteger_ZdRX0() {
        BigInteger value = BigInteger.valueOf(1234567890);
        byte[] expected = {0, 0, 0, 0, 0, 0, 45, -62};
        byte[] actual = ZipEightByteInteger.getBytes(value);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithBigInteger2_TEjD1() {
        BigInteger value = BigInteger.valueOf(-1234567890);
        byte[] expected = {0, 0, 0, 0, 0, 0, -107, 90};
        byte[] actual = ZipEightByteInteger.getBytes(value);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithBigInteger3_TczL2() {
        BigInteger value = BigInteger.valueOf(0);
        byte[] expected = {0, 0, 0, 0, 0, 0, 0, 0};
        byte[] actual = ZipEightByteInteger.getBytes(value);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithBigInteger4_UsTS3() {
        BigInteger value = BigInteger.valueOf(1);
        byte[] expected = {0, 0, 0, 0, 0, 0, 0, 1};
        byte[] actual = ZipEightByteInteger.getBytes(value);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithBigInteger5_dswE4() {
        BigInteger value = BigInteger.valueOf(255);
        byte[] expected = {0, 0, 0, 0, 0, 0, 0, -1};
        byte[] actual = ZipEightByteInteger.getBytes(value);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithBigInteger6_gjUb5() {
        BigInteger value = BigInteger.valueOf(256);
        byte[] expected = {0, 0, 0, 0, 0, 0, 1, 0};
        byte[] actual = ZipEightByteInteger.getBytes(value);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithBigInteger7_LXmh6() {
        BigInteger value = BigInteger.valueOf(65535);
        byte[] expected = {0, 0, 0, 0, 0, 0, -1, -1};
        byte[] actual = ZipEightByteInteger.getBytes(value);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithBigInteger8_NxvG7() {
        BigInteger value = BigInteger.valueOf(65536);
        byte[] expected = {0, 0, 0, 0, 0, 1, 0, 0};
        byte[] actual = ZipEightByteInteger.getBytes(value);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithBigInteger9_SLdy8() {
        BigInteger value = BigInteger.valueOf(16777215);
        byte[] expected = {0, 0, 0, 0, 0, -1, -1, -1};
        byte[] actual = ZipEightByteInteger.getBytes(value);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithBigInteger10_zgia9() {
        BigInteger value = BigInteger.valueOf(16777216);
        byte[] expected = {0, 0, 0, 0, 1, 0, 0, 0};
        byte[] actual = ZipEightByteInteger.getBytes(value);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithLongValue_eRZs0() {
        byte[] expected = {0, 0, 0, 0, 0, 0, 0, 0};
        byte[] actual = ZipEightByteInteger.getBytes(0L);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithNegativeLongValue_ZnKM1() {
        byte[] expected = {0, 0, 0, 0, 0, 0, 0, -1};
        byte[] actual = ZipEightByteInteger.getBytes(-1L);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithPositiveLongValue_eCDb2() {
        byte[] expected = {0, 0, 0, 0, 0, 0, 1, 0};
        byte[] actual = ZipEightByteInteger.getBytes(256L);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithMaxLongValue_YmcM3() {
        byte[] expected = {0, 0, 0, 0, 0, 0, -1, -1};
        byte[] actual = ZipEightByteInteger.getBytes(Long.MAX_VALUE);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithMinLongValue_KoSJ4() {
        byte[] expected = {0, 0, 0, 0, 0, 0, 0, 0};
        byte[] actual = ZipEightByteInteger.getBytes(Long.MIN_VALUE);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getValueTest1_qqlx0() {
        byte[] bytes = new byte[8];
        int offset = 0;
        BigInteger expected = BigInteger.valueOf(0);
        BigInteger actual = ZipEightByteInteger.getValue(bytes, offset);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getValueTest2_qoIt1() {
        byte[] bytes = new byte[8];
        int offset = 1;
        BigInteger expected = BigInteger.valueOf(0);
        BigInteger actual = ZipEightByteInteger.getValue(bytes, offset);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_nwZr0_xhJk0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        int actual = zipEightByteInteger.hashCode();
        int expected = zipEightByteInteger.getValue(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0).hashCode();
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_uykc1_VTcx0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new BigInteger("1234567890"));
        int actual = zipEightByteInteger.hashCode();
        int expected = zipEightByteInteger.getValue().hashCode();
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_DVIp2_MyTB0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1234567890L);
        int actual = zipEightByteInteger.hashCode();
        int expected = zipEightByteInteger.getValue().hashCode();
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_FLTV3_OkLN0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        int actual = zipEightByteInteger.hashCode();
        int expected = zipEightByteInteger.getValue().hashCode();
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEquals_WithZipEightByteIntegerObject_ReturnsTrue_Rlnf0() {
		ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }, 0);
		ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new BigInteger("0"));
		ZipEightByteInteger zipEightByteInteger3 = new ZipEightByteInteger(0L);
		ZipEightByteInteger zipEightByteInteger4 = new ZipEightByteInteger(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });
		assertTrue(zipEightByteInteger.equals(zipEightByteInteger2));
		assertTrue(zipEightByteInteger.equals(zipEightByteInteger3));
		assertTrue(zipEightByteInteger.equals(zipEightByteInteger4));
	}
}