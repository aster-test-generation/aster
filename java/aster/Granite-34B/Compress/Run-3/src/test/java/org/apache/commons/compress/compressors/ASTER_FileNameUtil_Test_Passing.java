/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileNameUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileNameWithCompressedFile_ZjTz0() throws Exception {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put("zip", "zip");
        uncompressSuffix.put("gz", "gz");
        uncompressSuffix.put("tar", "tar");
        String defaultExtension = "txt";
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
        assertTrue(fileNameUtil.isCompressedFileName("test.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileNameWithUncompressedFile_oJHG1() throws Exception {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put("zip", "zip");
        uncompressSuffix.put("gz", "gz");
        uncompressSuffix.put("tar", "tar");
        String defaultExtension = "txt";
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
        assertFalse(fileNameUtil.isCompressedFileName("test.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileNameWithFileLongerThanCompressedSuffix_MEhp3() throws Exception {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put("zip", "zip");
        uncompressSuffix.put("gz", "gz");
        uncompressSuffix.put("tar", "tar");
        String defaultExtension = "txt";
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
        assertTrue(fileNameUtil.isCompressedFileName("test.tar.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileNameWithFileWithNoSuffix_BJhG4() throws Exception {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put("zip", "zip");
        uncompressSuffix.put("gz", "gz");
        uncompressSuffix.put("tar", "tar");
        String defaultExtension = "txt";
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
        assertFalse(fileNameUtil.isCompressedFileName("test"));
    }
}