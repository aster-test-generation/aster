/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NewAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddToBody_FullObject_EmptyObject_OAZS9() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 9);
    newAttribute.addToBody(10, new Object());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddToBody_FullObject_FullObject_xsLO10() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 10);
    newAttribute.addToBody(10, new Object());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddToBody_FullObject_FullObject_NullObject_YZXD11() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 11);
    newAttribute.addToBody(10, null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddToBody_FullObject_FullObject_NegativeLength_ukhW12() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 12);
    newAttribute.addToBody(-1, new Object());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddToBody_FullObject_FullObject_ZeroLength_vGWg13() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 13);
    newAttribute.addToBody(0, new Object());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPUTF8String_xpAI0() {
        CPUTF8 cputf8 = new CPUTF8("string");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPUTF8StringInt_Dusr1() {
        CPUTF8 cputf8 = new CPUTF8("utf8", 10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_CCvi2() {
        NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 10);
        ClassFileEntry[] nested = newAttribute.getNestedClassFileEntries();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStartPCs_pepE0() {
        CPUTF8 utf8 = new CPUTF8("string");
        NewAttribute newAttribute = new NewAttribute(utf8, 0);
        int[] startPCs = newAttribute.getStartPCs();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStartPCs_chQv1() {
        CPUTF8 utf8 = new CPUTF8("utf8", 0);
        NewAttribute newAttribute = new NewAttribute(utf8, 0);
        int[] startPCs = newAttribute.getStartPCs();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResolve_zYuf0() {
	NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 0);
	ClassConstantPool pool = new ClassConstantPool();
	newAttribute.resolve(pool);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_axeT0() {
        CPUTF8 utf8 = new CPUTF8("string");
        NewAttribute newAttribute = new NewAttribute(utf8, 2);
        int layoutIndex = newAttribute.getLayoutIndex();
        assert layoutIndex == 2;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_OegS1() {
        CPUTF8 utf8 = new CPUTF8("utf8", 3);
        NewAttribute newAttribute = new NewAttribute(utf8, 4);
        int layoutIndex = newAttribute.getLayoutIndex();
        assert layoutIndex == 4;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInteger_NegativeLength_bGrH3() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 1);
    try {
        newAttribute.addInteger(-1, 1234567890L);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Length must be non-negative", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInteger_NegativeValue_snjh4() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 1);
    try {
        newAttribute.addInteger(10, -1L);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Value must be non-negative", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRenumber_AAQm0() {
    CPUTF8 utf8 = new CPUTF8("test");
    NewAttribute newAttribute = new NewAttribute(utf8, 0);
    List<Integer> byteCodeOffsets = new ArrayList<>();
    byteCodeOffsets.add(0);
    newAttribute.renumber(byteCodeOffsets);
    assertTrue(newAttribute.renumbered);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRenumber8_HUkj7() {
    CPUTF8 utf8 = new CPUTF8("test");
    NewAttribute newAttribute = new NewAttribute(utf8, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddBCOffset_Edah0() {
        CPUTF8 utf8 = new CPUTF8("utf8");
        NewAttribute newAttribute = new NewAttribute(utf8, 0);
        newAttribute.addBCOffset(10, 5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddToBody_VGcB0_yvti0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName", 10), 0);
    newAttribute.addToBody(10, new Object());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddToBody_NegativeLength_mSyv2_VauK0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName", 0), 2);
    newAttribute.addToBody(-1, new Object());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddToBody_EmptyObject_PdhI4_zSlE0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName", 0), 4);
    newAttribute.addToBody(10, new Object());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddToBody_FullObject_Gweh5_RaKk0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName", 0), 5);
    newAttribute.addToBody(10, new Object());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddToBody_FullObject_NullObject_fwUP6_PEPK0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName", 6), 0);
    newAttribute.addToBody(10, null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddToBody_FullObject_NegativeLength_RSZM7_DYZI0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName", 0), 7);
    newAttribute.addToBody(-1, new Object());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddToBody_FullObject_ZeroLength_RhyK8_LWRr0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 8);
    newAttribute.addToBody(0, new Object());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Hnzu0_xMCd0() {
        CPUTF8 attributeName = new CPUTF8("attributeName");
        NewAttribute newAttribute = new NewAttribute(attributeName, 1);
        String actual = newAttribute.toString();
        String expected = attributeName.underlyingString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_coverage_pjGD1_nlel0() {
        CPUTF8 attributeName = new CPUTF8("attributeName");
        NewAttribute newAttribute = new NewAttribute(attributeName, 1);
        String actual = newAttribute.toString();
        org.junit.jupiter.api.Assertions.assertNotNull(actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_coverage_FeMi2_yHoW0() {
        CPUTF8 attributeName = new CPUTF8("attributeName");
        NewAttribute newAttribute = new NewAttribute(attributeName, 1);
        String actual = newAttribute.toString();
        assertEquals(attributeName.underlyingString(), actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_coverage_SSWU3_bftU0() {
        CPUTF8 attributeName = new CPUTF8("attributeName");
        NewAttribute newAttribute = new NewAttribute(attributeName, 1);
        String actual = newAttribute.toString();
        assertEquals("attributeName", actual);
    }
}