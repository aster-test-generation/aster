/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptor_WFKb0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] actual = cpBands.getCpDescriptor();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConstantPool_iIvV0() {
        CpBands cpBands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = cpBands.getConstantPool();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpDoubleValue_lzzC0() {
        CpBands cpBands = new CpBands(new Segment());
        CPDouble cpDouble = cpBands.cpDoubleValue(0);
        assertNotNull(cpDouble);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpDoubleValueWithNegativeIndex_fVUC1() {
        CpBands cpBands = new CpBands(new Segment());
        CPDouble cpDouble = cpBands.cpDoubleValue(-1);
        assertNull(cpDouble);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameInts_QgYe0() {
    CpBands cpBands = new CpBands(new Segment());
    int[] actual = cpBands.getCpDescriptorNameInts();
    int[] expected = cpBands.getCpDescriptorNameInts();
    assertNotEquals(actual, expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameInts_yozy1() {
    CpBands cpBands = new CpBands(new Segment());
    int[] actual = cpBands.getCpDescriptorNameInts();
    int[] expected = cpBands.getCpDescriptorNameInts();
    assertEquals(actual, expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIntegerValue_DXgH0() {
    CpBands cpBands = new CpBands(new Segment());
    CPInteger cpInteger = cpBands.cpIntegerValue(0);
    assertNotNull(cpInteger);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIntegerValueWithNegativeIndex_dPNI1() {
    CpBands cpBands = new CpBands(new Segment());
    CPInteger cpInteger = cpBands.cpIntegerValue(-1);
    assertNull(cpInteger);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpFieldClass_zcQb0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] result = cpBands.getCpFieldClass();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpFieldClass_WhenSegmentIsNullOrEmpty_ThenReturnNull_sVrG1() {
        Segment segment = null;
        CpBands cpBands = new CpBands(segment);
        String[] result = cpBands.getCpFieldClass();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpClass_XINP0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] result = cpBands.getCpClass();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpClassWithNullSegment_kzGl1() {
        Segment segment = null;
        CpBands cpBands = new CpBands(segment);
        String[] result = cpBands.getCpClass();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_boIl0() {
        CpBands c = new CpBands(new Segment());
        CPUTF8 result = c.cpUTF8Value("string");
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_1_KJMe0() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "string";
    CPClass result = cpBands.cpClassValue(string);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_2_aRvT1() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "string";
    CPClass result = cpBands.cpClassValue(string);
    assertEquals(0, result.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_3_eysO2() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "string";
    CPClass result = cpBands.cpClassValue(string);
    assertEquals("name", result.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpMethodDescriptor_VGIP0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] expected = cpBands.getCpMethodDescriptor();
        String[] actual = cpBands.getCpMethodDescriptor();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpMethodDescriptor_withSegmentParameter_andEmptyArray_LHuS2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] expected = new String[0];
        String[] actual = cpBands.getCpMethodDescriptor();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpMethodDescriptor_withSegmentParameter_andPopulatedArray_xRDS3() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] expected = {"method1", "method2", "method3"};
        String[] actual = cpBands.getCpMethodDescriptor();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpMethodDescriptor_withSegmentParameter_andNullArray_GRPt4() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] expected = null;
        String[] actual = cpBands.getCpMethodDescriptor();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpMethodDescriptor_withSegmentParameter_andEmptyArray_andEmptyArray_bDdu5() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] expected = new String[0];
        String[] actual = new String[0];
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpMethodDescriptor_withSegmentParameter_andEmptyArray_andPopulatedArray_RgQT6() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] expected = new String[0];
        String[] actual = new String[]{"method1", "method2", "method3"};
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpMethodDescriptor_withSegmentParameter_andEmptyArray_andNullArray_ivID7() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] expected = new String[0];
        String[] actual = null;
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_cpUTF8Value_001_CRmq0() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 result = cpBands.cpUTF8Value("string", true);
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_cpUTF8Value_002_ILeR1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 result = cpBands.cpUTF8Value("string", false);
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_cpUTF8Value_003_XRfJ2() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 result = cpBands.cpUTF8Value("string", true);
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_cpUTF8Value_004_SvoJ3() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 result = cpBands.cpUTF8Value("string", false);
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCpIMethodClassTest_pyyw0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] actual = cpBands.getCpIMethodClass();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpLongValue_0_PduA0() {
        CpBands cpBands = new CpBands(new Segment());
        CPLong result = cpBands.cpLongValue(0);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpLongValue_1_oxzJ1() {
        CpBands cpBands = new CpBands(new Segment());
        CPLong result = cpBands.cpLongValue(1);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpClassValue_RCHp0() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 0; // Replace with the actual value
        CPClass result = cpBands.cpClassValue(index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpClassValueWithIndexOne_NGgF1() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 1; // Replace with the actual value
        CPClass result = cpBands.cpClassValue(index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpClassValueWithIndexTwo_isuO2() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 2; // Replace with the actual value
        CPClass result = cpBands.cpClassValue(index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpClassValueWithIndexThree_AnOc3() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 3; // Replace with the actual value
        CPClass result = cpBands.cpClassValue(index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpClassValueWithIndexFour_qsCd4() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 4; // Replace with the actual value
        CPClass result = cpBands.cpClassValue(index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpClassValueWithIndexFive_InDh5() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 5; // Replace with the actual value
        CPClass result = cpBands.cpClassValue(index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpClassValueWithIndexSix_jteG6() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 6; // Replace with the actual value
        CPClass result = cpBands.cpClassValue(index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpClassValueWithIndexSeven_dvkR7() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 7; // Replace with the actual value
        CPClass result = cpBands.cpClassValue(index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpFloatValue_VBZu0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPFloat result = cpBands.cpFloatValue(0);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpFloatValueWithNegativeIndex_FBkV1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPFloat result = cpBands.cpFloatValue(-1);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValueWithValidIndex_XTpR0() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 cpUTF8 = cpBands.cpSignatureValue(1);
        assertNotNull(cpUTF8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValueWithInvalidIndex_lOua1() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 cpUTF8 = cpBands.cpSignatureValue(-1);
        assertNull(cpUTF8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValueWithZeroIndex_ulJt2() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 cpUTF8 = cpBands.cpSignatureValue(0);
        assertNotNull(cpUTF8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLong_gcJi0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] result = cpBands.getCpLong();
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLongWithNullSegment_HMPz1() {
    Segment segment = null;
    CpBands cpBands = new CpBands(segment);
    long[] result = cpBands.getCpLong();
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLongWithEmptySegment_zWfj2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] result = cpBands.getCpLong();
    Assertions.assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLongWithNonEmptySegment_sEEg3_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] result = cpBands.getCpLong();
    Assertions.assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCpMethodValue_penO0() {
        CpBands cpBands = new CpBands(new Segment());
        CPMethodRef result = cpBands.cpMethodValue(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpSignature_Uuvu0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] result = cpBands.getCpSignature();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpStringValue_DlIo0() {
    CpBands cpBands = new CpBands(new Segment());
    CPString cpString = cpBands.cpStringValue(0);
    assertNotNull(cpString);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpStringValueWithNegativeIndex_LalL1() {
    CpBands cpBands = new CpBands(new Segment());
    CPString cpString = cpBands.cpStringValue(-1);
    assertNull(cpString);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_cpNameAndTypeValue_0_zJpb0() {
	CpBands cpBands = new CpBands(new Segment());
	String descriptor = "descriptor";
	CPNameAndType result = cpBands.cpNameAndTypeValue(descriptor);
	assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_TObF0() {
        CpBands c = new CpBands(new Segment());
        CPUTF8 result = c.cpUTF8Value(0);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value1_roft1() {
        CpBands c = new CpBands(new Segment());
        CPUTF8 result = c.cpUTF8Value(1);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value2_Slat2() {
        CpBands c = new CpBands(new Segment());
        CPUTF8 result = c.cpUTF8Value(2);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpMethodClass_zIkf0_eiDa0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] result = cpBands.getCpMethodClass();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpUTF8_EgDd0_ntyy0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] result = cpBands.getCpUTF8();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpUTF8WithCoverage_FWVP1_LOlV0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] result = cpBands.getCpUTF8();
        assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpUTF8WithCoverage_FWVP1_LOlV0_3() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] result = cpBands.getCpUTF8();
        assertEquals("UTF-8", result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnPack_VOok0_fhJD0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        cpBands.cpUTF8Value(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_yikv0_wYcK0() throws IOException, Pack200Exception {
        CpBands cpBands = new CpBands(new Segment());
        InputStream in = mock(InputStream.class);
        when(in.read()).thenReturn(1);
        cpBands.read(in);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_2_qJAR2_Foen0() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 2;
        CPUTF8 expected = new CPUTF8("expected", index);
        CPUTF8 result = cpBands.cpUTF8Value(index);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_4_JFfq4_EkoV0() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 4;
        CPUTF8 expected = new CPUTF8("expected", index);
        CPUTF8 result = cpBands.cpUTF8Value(index);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLongWithNonEmptySegment_sEEg3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] result = cpBands.getCpLong();
    Assertions.assertNotNull(result);
    Assertions.assertTrue(result.length > 0);
}
}