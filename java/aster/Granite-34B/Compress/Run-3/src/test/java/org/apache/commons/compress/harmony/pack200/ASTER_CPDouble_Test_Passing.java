/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPDouble_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareTo_PiLh0() throws Exception {
        CPDouble cpDouble1 = new CPDouble(1.0);
        CPDouble cpDouble2 = new CPDouble(2.0);
        CPDouble cpDouble3 = new CPDouble(1.0);
        int result1 = cpDouble1.compareTo(cpDouble3);
        assert result1 == 0;
        int result2 = cpDouble1.compareTo(cpDouble2);
        assert result2 < 0;
        try {
            cpDouble1.compareTo(null);
            assert false; // This line should not be reached
        } catch (NullPointerException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDouble_rgee0() throws Exception {
        CPDouble cpDouble = new CPDouble(10.5);
        double result = cpDouble.getDouble();
        assert result == 10.5;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZero_NxTt1() throws Exception {
        CPDouble cpDouble = new CPDouble(0);
        double result = cpDouble.getDouble();
        assert result == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNegative_gRpX2() throws Exception {
        CPDouble cpDouble = new CPDouble(-5.5);
        double result = cpDouble.getDouble();
        assert result == -5.5;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositive_BjwW3() throws Exception {
        CPDouble cpDouble = new CPDouble(5.5);
        double result = cpDouble.getDouble();
        assert result == 5.5;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMax_ckSf4() throws Exception {
        CPDouble cpDouble = new CPDouble(Double.MAX_VALUE);
        double result = cpDouble.getDouble();
        assert result == Double.MAX_VALUE;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMin_mbZz5() throws Exception {
        CPDouble cpDouble = new CPDouble(Double.MIN_VALUE);
        double result = cpDouble.getDouble();
        assert result == Double.MIN_VALUE;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNaN_aaup6() throws Exception {
        CPDouble cpDouble = new CPDouble(Double.NaN);
        double result = cpDouble.getDouble();
        assert Double.isNaN(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositiveInfinity_sjhc7() throws Exception {
        CPDouble cpDouble = new CPDouble(Double.POSITIVE_INFINITY);
        double result = cpDouble.getDouble();
        assert result == Double.POSITIVE_INFINITY;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNegativeInfinity_bhEm8() throws Exception {
        CPDouble cpDouble = new CPDouble(Double.NEGATIVE_INFINITY);
        double result = cpDouble.getDouble();
        assert result == Double.NEGATIVE_INFINITY;
    }
}