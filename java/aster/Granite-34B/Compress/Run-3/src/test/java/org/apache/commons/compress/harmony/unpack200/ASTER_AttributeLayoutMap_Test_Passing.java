/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeLayoutMap_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeBands_Ngqp0() throws Exception {
        AttributeLayout layout = new AttributeLayout("name", 1, "layout", 2);
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        NewAttributeBands newAttributeBands = attributeLayoutMap.getAttributeBands(layout);
        assertNotNull(newAttributeBands);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeBandsWithBackwardsCallCount_jCPM1() throws Exception {
        AttributeLayout layout = new AttributeLayout("name", 1, "layout", 2);
        layout.setBackwardsCallCount(10);
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        NewAttributeBands newAttributeBands = attributeLayoutMap.getAttributeBands(layout);
        assertEquals(10, newAttributeBands.getBackwardsCallCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributeLayout_afyM0() throws Pack200Exception {
    AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
    int index = 1;
    int context = 2;
    AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(index, context);
    assertNotNull(attributeLayout);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributeLayoutWithIndexZero_SiFi1() throws Pack200Exception {
    AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
    int index = 0;
    int context = 2;
    AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(index, context);
    assertNull(attributeLayout);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributeLayoutWithContextZero_WuiG2() throws Pack200Exception {
    AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
    int index = 1;
    int context = 0;
    AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(index, context);
    assertNull(attributeLayout);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributeLayoutWithIndexAndContextZero_YKXy3() throws Pack200Exception {
    AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
    int index = 0;
    int context = 0;
    AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(index, context);
    assertNull(attributeLayout);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_EoJG0() throws Exception {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        String name = "name";
        int context = 1;
        AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(name, context);
        assertEquals(null, attributeLayout);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_LqQK1() throws Exception {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        String name = "name";
        int context = 2;
        AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(name, context);
        assertEquals(null, attributeLayout);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_Taqc2() throws Exception {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        String name = "name";
        int context = 3;
        AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(name, context);
        assertEquals(null, attributeLayout);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_jysW3() throws Exception {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        String name = "name";
        int context = 4;
        AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(name, context);
        assertEquals(null, attributeLayout);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_CVAU4() throws Exception {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        String name = "name";
        int context = 5;
        AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(name, context);
        assertEquals(null, attributeLayout);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_jNNa5() throws Exception {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        String name = "name";
        int context = 6;
        AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(name, context);
        assertEquals(null, attributeLayout);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_MQuM6() throws Exception {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        String name = "name";
        int context = 7;
        AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(name, context);
        assertEquals(null, attributeLayout);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_BQRV7() throws Exception {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        String name = "name";
        int context = 8;
        AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(name, context);
        assertEquals(null, attributeLayout);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test9_Vcjr8() throws Exception {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        String name = "name";
        int context = 9;
        AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(name, context);
        assertEquals(null, attributeLayout);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test10_SStM9() throws Exception {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        String name = "name";
        int context = 10;
        AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(name, context);
        assertEquals(null, attributeLayout);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_KCAg0() throws Exception {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        AttributeLayout layout = new AttributeLayout("name", 1, "layout", 2);
        attributeLayoutMap.add(layout);
    }
}