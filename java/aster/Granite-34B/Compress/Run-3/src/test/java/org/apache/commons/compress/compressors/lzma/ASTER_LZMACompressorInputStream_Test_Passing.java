/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMACompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip_qsbd0() throws IOException {
        InputStream inputStream = mock(InputStream.class);
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream, 1024);
        when(inputStream.skip(1024)).thenReturn(1024L);
        assertEquals(1024L, lzmaCompressorInputStream.skip(1024));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithNoMemoryLimit_AoXX1() throws IOException {
        InputStream inputStream = mock(InputStream.class);
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream);
        when(inputStream.skip(1024)).thenReturn(1024L);
        assertEquals(1024L, lzmaCompressorInputStream.skip(1024));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureNull_hbMT0() {
    byte[] signature = null;
    int length = 3;
    boolean result = LZMACompressorInputStream.matches(signature, length);
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureNotStartingWith0x5d_IkwK2() {
    byte[] signature = new byte[3];
    signature[0] = 0x5e;
    signature[1] = 0;
    signature[2] = 0;
    int length = 3;
    boolean result = LZMACompressorInputStream.matches(signature, length);
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureNotStartingWith0_yNyk3() {
    byte[] signature = new byte[3];
    signature[0] = 0x5d;
    signature[1] = 1;
    signature[2] = 0;
    int length = 3;
    boolean result = LZMACompressorInputStream.matches(signature, length);
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureNotStartingWith0_rFsJ4() {
    byte[] signature = new byte[3];
    signature[0] = 0x5d;
    signature[1] = 0;
    signature[2] = 1;
    int length = 3;
    boolean result = LZMACompressorInputStream.matches(signature, length);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureStartingWith0x5d000_TUvs5() {
    byte[] signature = new byte[3];
    signature[0] = 0x5d;
    signature[1] = 0;
    signature[2] = 0;
    int length = 3;
    boolean result = LZMACompressorInputStream.matches(signature, length);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailable_dyZs0_bWbK0() throws IOException {
        InputStream inputStream = mock(InputStream.class);
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream, 1024);
        assertEquals(lzmaCompressorInputStream.available(), 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_eXUF0_DETq0() throws IOException {
    InputStream inputStream = mock(InputStream.class);
    LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream, 1024);
    int read = lzmaCompressorInputStream.read();
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead1_CeRr1_WaZC0() throws IOException {
    InputStream inputStream = mock(InputStream.class);
    LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream);
    int read = lzmaCompressorInputStream.read();
    assertEquals(0, read);
}
}