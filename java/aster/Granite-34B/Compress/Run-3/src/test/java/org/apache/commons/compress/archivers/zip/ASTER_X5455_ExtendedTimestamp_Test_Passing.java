/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Arrays;
import java.util.Date;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X5455_ExtendedTimestamp_Test_Passing {
    private Date zipLongToDate(long time) {
        return new Date(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_IxbX0() throws Exception {
        ZipLong zipLong = new ZipLong(0x12345678);
        assertEquals(0x12345678, zipLong.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_BVPM1() throws Exception {
        ZipLong zipLong = new ZipLong(0x12345678);
        byte[] expected = { (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12 };
        assertArrayEquals(expected, zipLong.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueFromBytes_XWVD2() throws Exception {
        byte[] bytes = { (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12 };
        assertEquals(0x12345678, ZipLong.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntValue_rwkF3() throws Exception {
        ZipLong zipLong = new ZipLong(0x12345678);
        assertEquals(0x12345678, zipLong.getIntValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_oFZy4() throws Exception {
        ZipLong zipLong1 = new ZipLong(0x12345678);
        ZipLong zipLong2 = new ZipLong(0x12345678);
        assertEquals(zipLong1.hashCode(), zipLong2.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromValue_wLlX5() throws Exception {
        byte[] expected = { (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12 };
        assertArrayEquals(expected, ZipLong.getBytes(0x12345678));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueFromBytesWithOffset_vUCT6() throws Exception {
        byte[] bytes = { 0, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12 };
        assertEquals(0x12345678, ZipLong.getValue(bytes, 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModifyTime_VtNe7() throws Exception {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        ZipLong modifyTime = timestamp.getModifyTime();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_MLkt0_1() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] expected1 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual1 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected2 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual2 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected3 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual3 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected4 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual4 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected5 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual5 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected6 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual6 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected7 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual7 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected8 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual8 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected9 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual9 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected10 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual10 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        assertArrayEquals(expected1, actual1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_MLkt0_2() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] expected1 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual1 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected2 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual2 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected3 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual3 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected4 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual4 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected5 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual5 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected6 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual6 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected7 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual7 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected8 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual8 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected9 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual9 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected10 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual10 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        assertArrayEquals(expected2, actual2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_MLkt0_3() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] expected1 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual1 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected2 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual2 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected3 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual3 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected4 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual4 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected5 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual5 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected6 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual6 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected7 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual7 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected8 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual8 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected9 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual9 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected10 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual10 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        assertArrayEquals(expected3, actual3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_MLkt0_4() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] expected1 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual1 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected2 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual2 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected3 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual3 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected4 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual4 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected5 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual5 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected6 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual6 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected7 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual7 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected8 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual8 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected9 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual9 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected10 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual10 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        assertArrayEquals(expected4, actual4);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_MLkt0_5() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] expected1 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual1 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected2 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual2 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected3 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual3 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected4 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual4 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected5 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual5 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected6 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual6 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected7 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual7 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected8 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual8 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected9 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual9 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected10 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual10 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        assertArrayEquals(expected5, actual5);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_MLkt0_6() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] expected1 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual1 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected2 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual2 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected3 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual3 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected4 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual4 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected5 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual5 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected6 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual6 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected7 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual7 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected8 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual8 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected9 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual9 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected10 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual10 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        assertArrayEquals(expected6, actual6);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_MLkt0_7() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] expected1 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual1 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected2 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual2 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected3 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual3 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected4 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual4 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected5 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual5 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected6 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual6 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected7 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual7 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected8 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual8 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected9 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual9 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected10 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual10 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        assertArrayEquals(expected7, actual7);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_MLkt0_8() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] expected1 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual1 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected2 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual2 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected3 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual3 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected4 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual4 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected5 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual5 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected6 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual6 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected7 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual7 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected8 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual8 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected9 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual9 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected10 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual10 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        assertArrayEquals(expected8, actual8);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_MLkt0_9() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] expected1 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual1 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected2 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual2 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected3 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual3 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected4 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual4 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected5 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual5 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected6 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual6 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected7 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual7 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected8 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual8 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected9 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual9 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected10 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual10 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        assertArrayEquals(expected9, actual9);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_MLkt0_10() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] expected1 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual1 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected2 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual2 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected3 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual3 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected4 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual4 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected5 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual5 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected6 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual6 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected7 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual7 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected8 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual8 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected9 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual9 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        byte[] expected10 = Arrays.copyOf(x5455_ExtendedTimestamp.getLocalFileDataData(), x5455_ExtendedTimestamp.getCentralDirectoryLength().getValue());
        byte[] actual10 = x5455_ExtendedTimestamp.getCentralDirectoryData();
        assertArrayEquals(expected10, actual10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_CHoY0() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    x5455_ExtendedTimestamp.setAccessFileTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTimeWithNull_XPRh1() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessFileTime(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTimeWithInvalidTime_FrxW2() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(-1);
    try {
        x5455_ExtendedTimestamp.setAccessFileTime(time);
        fail("Expected IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTimeWithMaxTime_wKCo4() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(Integer.MAX_VALUE * 1000L);
    x5455_ExtendedTimestamp.setAccessFileTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTimeWithMinTime_yAyN5() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(Integer.MIN_VALUE * 1000L);
    try {
        x5455_ExtendedTimestamp.setAccessFileTime(time);
        fail("Expected IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTimeWithFutureTime_vxBi6() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis() + 1000000);
    x5455_ExtendedTimestamp.setAccessFileTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTimeWithPastTime_lLNx7() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis() - 1000000);
    x5455_ExtendedTimestamp.setAccessFileTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTimeWithLeapYearTime_wQHr8() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(1582136400000L); // Leap year
    x5455_ExtendedTimestamp.setAccessFileTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFlags_hXhE0() throws Exception {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        byte flags = timestamp.getFlags();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_TYZE0() throws Exception {
        ZipShort zipShort = new ZipShort(10);
        assertEquals(10, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_cQqQ1() throws Exception {
        ZipShort zipShort = new ZipShort(10);
        assertEquals(2, zipShort.getBytes().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueFromBytes_nHWL2() throws Exception {
        byte[] bytes = {0, 10};
        assertEquals(10, ZipShort.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueFromBytesWithOffset_kAVk3() throws Exception {
        byte[] bytes = {0, 0, 0, 10};
        assertEquals(10, ZipShort.getValue(bytes, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_IUFt4() throws Exception {
        ZipShort zipShort1 = new ZipShort(10);
        ZipShort zipShort2 = new ZipShort(10);
        assertEquals(zipShort1.hashCode(), zipShort2.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromValue_ISQW5_1() throws Exception {
        byte[] bytes = ZipShort.getBytes(10);
        assertEquals(2, bytes.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromValue_ISQW5_2() throws Exception {
        byte[] bytes = ZipShort.getBytes(10);
        assertEquals(0, bytes[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromValue_ISQW5_3() throws Exception {
        byte[] bytes = ZipShort.getBytes(10);
        assertEquals(10, bytes[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_1_kdOU0_2() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setCreateTime(new ZipLong(new byte[] { 0, 0, 0, 0 }, 0));
    assertEquals(0, x5455.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_1_kdOU0_3() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setCreateTime(new ZipLong(new byte[] { 0, 0, 0, 0 }, 0));
    assertEquals(0, x5455.getCreateTime().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_2_MadH1_2() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setCreateTime(new ZipLong(new byte[] { 0, 2, 0, 0 }, 1));
    assertEquals(2, x5455.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_2_MadH1_3() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setCreateTime(new ZipLong(new byte[] { 0, 2, 0, 0 }, 1));
    assertEquals(2, x5455.getCreateTime().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_3_QEjW2_2() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setCreateTime(new ZipLong(new byte[] { 0, 0, 0, 0 }));
    assertEquals(0, x5455.getFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_3_QEjW2_3() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setCreateTime(new ZipLong(new byte[] { 0, 0, 0, 0 }));
    assertEquals(0, x5455.getCreateTime().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_allNull_JfOl4() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setModifyTime(null);
    x5455.setAccessTime(null);
    x5455.setCreateTime(null);
    int hc = -123 * (x5455.getFlags() & 0x07);
    assertEquals(hc, x5455.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithModifyTimeBitSet_AueQ0_1() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte flags = 1;
    x5455_ExtendedTimestamp.setFlags(flags);
    assertEquals(true, x5455_ExtendedTimestamp.isBit0_modifyTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithModifyTimeBitSet_AueQ0_2() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte flags = 1;
    x5455_ExtendedTimestamp.setFlags(flags);
    assertEquals(false, x5455_ExtendedTimestamp.isBit1_accessTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithModifyTimeBitSet_AueQ0_3() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte flags = 1;
    x5455_ExtendedTimestamp.setFlags(flags);
    assertEquals(false, x5455_ExtendedTimestamp.isBit2_createTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithAccessTimeBitSet_wNti1_1() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte flags = 2;
    x5455_ExtendedTimestamp.setFlags(flags);
    assertEquals(false, x5455_ExtendedTimestamp.isBit0_modifyTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithAccessTimeBitSet_wNti1_2() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte flags = 2;
    x5455_ExtendedTimestamp.setFlags(flags);
    assertEquals(true, x5455_ExtendedTimestamp.isBit1_accessTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithAccessTimeBitSet_wNti1_3() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte flags = 2;
    x5455_ExtendedTimestamp.setFlags(flags);
    assertEquals(false, x5455_ExtendedTimestamp.isBit2_createTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithCreateTImeBitSet_kHnU2_1() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte flags = 4;
    x5455_ExtendedTimestamp.setFlags(flags);
    assertEquals(false, x5455_ExtendedTimestamp.isBit0_modifyTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithCreateTImeBitSet_kHnU2_2() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte flags = 4;
    x5455_ExtendedTimestamp.setFlags(flags);
    assertEquals(false, x5455_ExtendedTimestamp.isBit1_accessTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithCreateTImeBitSet_kHnU2_3() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte flags = 4;
    x5455_ExtendedTimestamp.setFlags(flags);
    assertEquals(true, x5455_ExtendedTimestamp.isBit2_createTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithAllBitsSet_PVMB3_1() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte flags = 7;
    x5455_ExtendedTimestamp.setFlags(flags);
    assertEquals(true, x5455_ExtendedTimestamp.isBit0_modifyTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithAllBitsSet_PVMB3_2() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte flags = 7;
    x5455_ExtendedTimestamp.setFlags(flags);
    assertEquals(true, x5455_ExtendedTimestamp.isBit1_accessTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithAllBitsSet_PVMB3_3() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte flags = 7;
    x5455_ExtendedTimestamp.setFlags(flags);
    assertEquals(true, x5455_ExtendedTimestamp.isBit2_createTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithNoBitsSet_FIAB4_1() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte flags = 0;
    x5455_ExtendedTimestamp.setFlags(flags);
    assertEquals(false, x5455_ExtendedTimestamp.isBit0_modifyTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithNoBitsSet_FIAB4_2() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte flags = 0;
    x5455_ExtendedTimestamp.setFlags(flags);
    assertEquals(false, x5455_ExtendedTimestamp.isBit1_accessTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithNoBitsSet_FIAB4_3() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    byte flags = 0;
    x5455_ExtendedTimestamp.setFlags(flags);
    assertEquals(false, x5455_ExtendedTimestamp.isBit2_createTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getCreateFileTimeTest_BVrR0() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime result = x5455_ExtendedTimestamp.getCreateFileTime();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ModifyTimePresent_AccessTimePresent_CreateTImePresent_XWwQ8() throws ZipException {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTime_uOUU0() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        Date d = new Date();
        x5455_ExtendedTimestamp.setCreateJavaTime(d);
        assertEquals(x5455_ExtendedTimestamp.getCreateJavaTime(), d);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTime_RQUB0() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date();
    x5455_ExtendedTimestamp.setModifyJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdCoverage_DyUK1() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.getHeaderId();
    x5455_ExtendedTimestamp.getHeaderId();
    x5455_ExtendedTimestamp.getHeaderId();
    x5455_ExtendedTimestamp.getHeaderId();
    x5455_ExtendedTimestamp.getHeaderId();
    x5455_ExtendedTimestamp.getHeaderId();
    x5455_ExtendedTimestamp.getHeaderId();
    x5455_ExtendedTimestamp.getHeaderId();
    x5455_ExtendedTimestamp.getHeaderId();
    x5455_ExtendedTimestamp.getHeaderId();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCreateFileTime_TfZd0() throws Exception {
		X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
		FileTime time = FileTime.fromMillis(System.currentTimeMillis());
		x5455_ExtendedTimestamp.setCreateFileTime(time);
		assertEquals(x5455_ExtendedTimestamp.getCreateFileTime(), time);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseFromCentralDirectoryData_yzjc0() throws ZipException {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        x5455_ExtendedTimestamp.parseFromCentralDirectoryData(buffer, offset, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WsDL0() throws Exception {
        ZipLong zipLong = new ZipLong(1234567890L);
        assertEquals(1234567890L, zipLong.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_zArj1() throws Exception {
        ZipLong zipLong = new ZipLong(1234567890L);
        byte[] expected = { -106, -62, 100, 56 };
        assertArrayEquals(expected, zipLong.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueFromBytes_Pvpy2() throws Exception {
        byte[] bytes = { -106, -62, 100, 56 };
        assertEquals(1234567890L, ZipLong.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntValue_mCxO3() throws Exception {
        ZipLong zipLong = new ZipLong(1234567890L);
        assertEquals(1234567890, zipLong.getIntValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_tbcE4() throws Exception {
        ZipLong zipLong1 = new ZipLong(1234567890L);
        ZipLong zipLong2 = new ZipLong(1234567890L);
        assertEquals(zipLong1.hashCode(), zipLong2.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromValue_RiLh5() throws Exception {
        byte[] expected = { -106, -62, 100, 56 };
        assertArrayEquals(expected, ZipLong.getBytes(1234567890L));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueFromBytesWithOffset_ZyoG6() throws Exception {
        byte[] bytes = { 0, 0, -106, -62, 100, 56 };
        assertEquals(1234567890L, ZipLong.getValue(bytes, 2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreateTime_ZzDM7() throws Exception {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        ZipLong expected = new ZipLong(1234567890L);
        assertEquals(expected, timestamp.getCreateTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreateJavaTime_mKxp0_1() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        long createTime = 1632680400L; // Replace with actual value
        Date expected = zipLongToDate(createTime);
        Date actual = x5455_ExtendedTimestamp.getCreateJavaTime();
        long anotherTime = 1632680401L; // Replace with actual value
        Date anotherExpected = zipLongToDate(anotherTime);
        Date anotherActual = x5455_ExtendedTimestamp.getCreateJavaTime();
        assertEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreateJavaTime_mKxp0_2() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        long createTime = 1632680400L; // Replace with actual value
        Date expected = zipLongToDate(createTime);
        Date actual = x5455_ExtendedTimestamp.getCreateJavaTime();
        long anotherTime = 1632680401L; // Replace with actual value
        Date anotherExpected = zipLongToDate(anotherTime);
        Date anotherActual = x5455_ExtendedTimestamp.getCreateJavaTime();
        assertEquals(anotherExpected, anotherActual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessTime_nCvw0() throws Exception {
        X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
        ZipLong accessTime = x5455.getAccessTime();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTime_Ytfy0() throws Exception {
    X5455_ExtendedTimestamp x5455ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    x5455ExtendedTimestamp.setModifyFileTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithNull_GzgQ1() throws Exception {
    X5455_ExtendedTimestamp x5455ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455ExtendedTimestamp.setModifyFileTime(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithZero_dxYk2() throws Exception {
    X5455_ExtendedTimestamp x5455ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(0);
    x5455ExtendedTimestamp.setModifyFileTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithMax_mfUT3() throws Exception {
    X5455_ExtendedTimestamp x5455ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(Long.MAX_VALUE);
    x5455ExtendedTimestamp.setModifyFileTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithMin_GwEH4() throws Exception {
    X5455_ExtendedTimestamp x5455ExtendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(Long.MIN_VALUE);
    x5455ExtendedTimestamp.setModifyFileTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_1_WLyp0_2() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(0L);
    x5455_ExtendedTimestamp.setModifyTime(l);
    Assertions.assertEquals(x5455_ExtendedTimestamp.getModifyTime(), l);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_2_JcmR1_2() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(1L);
    x5455_ExtendedTimestamp.setModifyTime(l);
    Assertions.assertEquals(x5455_ExtendedTimestamp.getModifyTime(), l);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_3_Yxbx2_2() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(2L);
    x5455_ExtendedTimestamp.setModifyTime(l);
    Assertions.assertEquals(x5455_ExtendedTimestamp.getModifyTime(), l);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_Null_Garp3_2() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong l = null;
    x5455_ExtendedTimestamp.setModifyTime(l);
    Assertions.assertNull(x5455_ExtendedTimestamp.getModifyTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_1_ZuPE0_2() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(new byte[0], 0);
    x5455_ExtendedTimestamp.setAccessTime(l);
    Assertions.assertEquals(x5455_ExtendedTimestamp.getAccessTime(), l);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_2_JTSK1_2() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(0);
    x5455_ExtendedTimestamp.setAccessTime(l);
    Assertions.assertEquals(x5455_ExtendedTimestamp.getAccessTime(), l);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_3_UhsH2_2() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(0L);
    x5455_ExtendedTimestamp.setAccessTime(l);
    Assertions.assertEquals(x5455_ExtendedTimestamp.getAccessTime(), l);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_4_MSBY3_2() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(new byte[0]);
    x5455_ExtendedTimestamp.setAccessTime(l);
    Assertions.assertEquals(x5455_ExtendedTimestamp.getAccessTime(), l);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_5_HpVN4_2() throws Exception {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessTime(null);
    Assertions.assertNull(x5455_ExtendedTimestamp.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_pqdF0_1() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
        X5455_ExtendedTimestamp cloned = (X5455_ExtendedTimestamp) original.clone();
        assertNotNull(cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_pqdF0_2() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
        X5455_ExtendedTimestamp cloned = (X5455_ExtendedTimestamp) original.clone();
        assertNotSame(original, cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTime_Nwpw0() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        Date date = new Date();
        x5455_ExtendedTimestamp.setAccessJavaTime(date);
        assertEquals(date.getTime(), x5455_ExtendedTimestamp.getAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTimeWithMaxDate_JvlU1() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        Date maxDate = new Date(Long.MAX_VALUE);
        x5455_ExtendedTimestamp.setAccessJavaTime(maxDate);
        assertEquals(maxDate.getTime(), x5455_ExtendedTimestamp.getAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTimeWithMinDate_FNFu2() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        Date minDate = new Date(Long.MIN_VALUE);
        x5455_ExtendedTimestamp.setAccessJavaTime(minDate);
        assertEquals(minDate.getTime(), x5455_ExtendedTimestamp.getAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTimeWithNullDate_Jtry3() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        Date nullDate = null;
        x5455_ExtendedTimestamp.setAccessJavaTime(nullDate);
        assertEquals(0, x5455_ExtendedTimestamp.getAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTimeWithRandomDate_mxoo4() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        Date randomDate = new Date(1234567890);
        x5455_ExtendedTimestamp.setAccessJavaTime(randomDate);
        assertEquals(randomDate.getTime(), x5455_ExtendedTimestamp.getAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTimeWithFutureDate_fzVY5() throws Exception {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        Date futureDate = new Date(System.currentTimeMillis() + 10000);
        x5455_ExtendedTimestamp.setAccessJavaTime(futureDate);
        assertEquals(futureDate.getTime(), x5455_ExtendedTimestamp.getAccessTime());
    }
}