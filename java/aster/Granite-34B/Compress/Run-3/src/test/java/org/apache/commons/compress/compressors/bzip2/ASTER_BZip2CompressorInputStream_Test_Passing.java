/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.bzip2;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BZip2CompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithValidSignatureAndLength_HnaK0() throws Exception {
    byte[] signature = {'B', 'Z', 'h'};
    int length = 3;
    assertTrue(BZip2CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithInvalidSignatureAndLength_uood1() throws Exception {
    byte[] signature = {'X', 'Y', 'Z'};
    int length = 2;
    assertFalse(BZip2CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithInvalidSignatureButValidLength_FVWN2() throws Exception {
    byte[] signature = {'X', 'Y', 'Z'};
    int length = 3;
    assertFalse(BZip2CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithValidSignatureButInvalidLength_JfNk3() throws Exception {
    byte[] signature = {'B', 'Z', 'h'};
    int length = 2;
    assertFalse(BZip2CompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithEmptySignature_jicZ4() throws Exception {
    byte[] signature = {};
    int length = 0;
    assertFalse(BZip2CompressorInputStream.matches(signature, length));
}
}