/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipParameters_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompressionLevel_WYJg0() {
        GzipParameters gzipParameters = new GzipParameters();
        assertEquals(0, gzipParameters.getCompressionLevel());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompressionLevelWithParameter_DsPg1() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setCompressionLevel(5);
        assertEquals(5, gzipParameters.getCompressionLevel());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompressionLevelWithNegativeParameter_WlQx2() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setCompressionLevel(-1);
        assertEquals(0, gzipParameters.getCompressionLevel());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompressionLevelWithLargeParameter_yyjH3() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setCompressionLevel(10);
        assertEquals(9, gzipParameters.getCompressionLevel());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_gJYg0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_Mac_cbmh2() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_Linux_uSgk3() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(3);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_Solaris_EyQy4() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(4);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_AIX_jraq5() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(5);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_HPUX_tyRK6() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(6);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_OS390_PaQK7() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(7);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_FreeBSD_bOLS8() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_Irix_SPXu9() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(9);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_DigitalUnix_NlVp10() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_NetWare_gdzt11() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(11);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_OSF1_dMfG12() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(12);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_OPENVMS_SqUn13() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(13);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_Other_dRBY14() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(14);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFileName_AQeZ0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setFileName("test.txt");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModificationTime_sxMW0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setModificationTime(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModificationTimeWithPositiveValue_EMTb1() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setModificationTime(System.currentTimeMillis());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModificationTimeWithNegativeValue_fDoX2() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setModificationTime(-1L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModificationTimeWithMaxLongValue_oSRJ3() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setModificationTime(Long.MAX_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModificationTimeWithMinLongValue_DqNb4() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setModificationTime(Long.MIN_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getModificationTimeTest_wBAl0() {
        GzipParameters gzipParameters = new GzipParameters();
        long modificationTime = gzipParameters.getModificationTime();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getModificationTimeWithZeroTest_WUgG1() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setModificationTime(0L);
        long modificationTime = gzipParameters.getModificationTime();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getModificationTimeWithNegativeTest_qHTx2() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setModificationTime(-1L);
        long modificationTime = gzipParameters.getModificationTime();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getModificationTimeWithPositiveTest_ongh3() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setModificationTime(1L);
        long modificationTime = gzipParameters.getModificationTime();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getModificationTimeWithMaxTest_LmFU4() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setModificationTime(Long.MAX_VALUE);
        long modificationTime = gzipParameters.getModificationTime();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getModificationTimeWithMinTest_TIPp5() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setModificationTime(Long.MIN_VALUE);
        long modificationTime = gzipParameters.getModificationTime();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateStrategy_hShE0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setDeflateStrategy(1);
        assertEquals(1, gzipParameters.getDeflateStrategy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateStrategyWithNegativeValue_UDly1() {
        GzipParameters gzipParameters = new GzipParameters();
        try {
            gzipParameters.setDeflateStrategy(-1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("deflateStrategy must be between 0 and 1", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateStrategyWithInvalidValue_DjKW2() {
        GzipParameters gzipParameters = new GzipParameters();
        try {
            gzipParameters.setDeflateStrategy(2);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("deflateStrategy must be between 0 and 1", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFilename_wgXu0() {
        GzipParameters gzipParameters = new GzipParameters();
        String fileName = "test.txt";
        gzipParameters.setFilename(fileName);
        assertEquals(fileName, gzipParameters.getFilename());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFilenameNull_TAIg1() {
        GzipParameters gzipParameters = new GzipParameters();
        String fileName = null;
        gzipParameters.setFilename(fileName);
        assertEquals(fileName, gzipParameters.getFilename());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFilenameEmpty_iQSw2() {
        GzipParameters gzipParameters = new GzipParameters();
        String fileName = "";
        gzipParameters.setFilename(fileName);
        assertEquals(fileName, gzipParameters.getFilename());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFileName_OPRl0() {
        GzipParameters gzipParameters = new GzipParameters();
        String fileName = gzipParameters.getFileName();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFilename_Ljin0() {
        GzipParameters gzipParameters = new GzipParameters();
        String filename = gzipParameters.getFilename();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFilename_qAYb1() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setFileName("test.txt");
        String filename = gzipParameters.getFilename();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFilename_hqwg2() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setFileName(null);
        String filename = gzipParameters.getFilename();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFilename_nKBE3() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setFileName("");
        String filename = gzipParameters.getFilename();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBufferSize_FTyv0() {
        GzipParameters gzipParameters = new GzipParameters();
        assertEquals(0, gzipParameters.getBufferSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBufferSizeWithPositiveValue_rZvB1() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setBufferSize(1024);
        assertEquals(1024, gzipParameters.getBufferSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBufferSizeWithNegativeValue_ioKH2() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setBufferSize(-1024);
        assertEquals(0, gzipParameters.getBufferSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressionLevel_ValidInput_vngf0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setCompressionLevel(5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressionLevel_InvalidInput_BelowMinimum_gUKi1() {
        GzipParameters gzipParameters = new GzipParameters();
        try {
            gzipParameters.setCompressionLevel(-2);
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressionLevel_InvalidInput_AboveMaximum_ovRW2() {
        GzipParameters gzipParameters = new GzipParameters();
        try {
            gzipParameters.setCompressionLevel(10);
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetComment_gVDz0() {
        GzipParameters gzipParameters = new GzipParameters();
        assertEquals(null, gzipParameters.getComment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCommentWithComment_WFkx1() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setComment("Test comment");
        assertEquals("Test comment", gzipParameters.getComment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBufferSizeWithValidValue_NaPx0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setBufferSize(1024);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBufferSizeWithZeroValue_Ovtg1() {
        GzipParameters gzipParameters = new GzipParameters();
        try {
            gzipParameters.setBufferSize(0);
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBufferSizeWithNegativeValue_mjob2() {
        GzipParameters gzipParameters = new GzipParameters();
        try {
            gzipParameters.setBufferSize(-1024);
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetComment_pxsr0() {
        GzipParameters gzipParameters = new GzipParameters();
        String comment = "Test comment";
        gzipParameters.setComment(comment);
        assertEquals(comment, gzipParameters.getComment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCommentNull_QXrL1() {
        GzipParameters gzipParameters = new GzipParameters();
        String comment = null;
        gzipParameters.setComment(comment);
        assertEquals(comment, gzipParameters.getComment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCommentEmpty_sgNk2() {
        GzipParameters gzipParameters = new GzipParameters();
        String comment = "";
        gzipParameters.setComment(comment);
        assertEquals(comment, gzipParameters.getComment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setCommentTest_pAdQ0_Fjok0() {
        GzipParameters gzipParameters = new GzipParameters();
        String comment = "comment";
        gzipParameters.setComment(comment);
        String actual = gzipParameters.getComment();
        String expected = comment;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetComment_wDNa0_minx0() {
        GzipParameters gzipParameters = new GzipParameters();
        String comment = "comment"; // Replace with the expected value
        gzipParameters.setComment(comment);
        String actual = gzipParameters.getComment();
        org.junit.jupiter.api.Assertions.assertEquals(comment, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeflateStrategyWithCoverage_Ivcm1_PlnQ0() {
        GzipParameters gzipParameters = new GzipParameters();
        int actual = gzipParameters.getDeflateStrategy();
        org.junit.jupiter.api.Assertions.assertNotNull(actual);
    }
}