/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Date;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_YmKj0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10);
        assertTrue(entry.equals(entry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_XAGv1() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10);
        assertTrue(!entry.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClassObject_jeMO2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10);
        assertTrue(!entry.equals(""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSimilarObject_YVDp3() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10);
        ArArchiveEntry other = new ArArchiveEntry("name", 10);
        assertTrue(entry.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentName_TArc4() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10);
        ArArchiveEntry other = new ArArchiveEntry("other", 10);
        assertTrue(!entry.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentLength_hEjE5() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10);
        ArArchiveEntry other = new ArArchiveEntry("name", 20);
        assertTrue(!entry.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSimilarFileObject_QmVV7() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("file"), "name");
        ArArchiveEntry other = new ArArchiveEntry(new File("file"), "name");
        assertTrue(entry.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSimilarConstructorObject_KrCE8() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10, 1, 1, 777, 1000);
        ArArchiveEntry other = new ArArchiveEntry("name", 10, 1, 1, 777, 1000);
        assertTrue(entry.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory_hqJM0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100);
        boolean result = entry.isDirectory();
        assert result == false;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithUserId_dfTL2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100, 1000, 1000, 0644, System.currentTimeMillis());
        boolean result = entry.isDirectory();
        assert result == false;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithFile_wZya3() {
        File file = new File("file.txt");
        ArArchiveEntry entry = new ArArchiveEntry(file, "entryName");
        boolean result = entry.isDirectory();
        assert result == false;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_ohLP0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 1000);
        assertEquals(new Date(1000), entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithFile_MQDD2() {
        File file = new File("file.txt");
        ArArchiveEntry entry = new ArArchiveEntry(file, "entryName");
        assertEquals(new Date(1000), entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithAllParams_Tcix3() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 1000, 1, 1, 0755, 1000);
        assertEquals(new Date(1000), entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId_quxc0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100);
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupIdWithUserIdAndGroupId_oHFi1() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100, 1000, 1001, 755, System.currentTimeMillis());
        assertEquals(1001, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupIdWithFileAndEntryName_tbkS2() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("input.txt"), "entryName");
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_xvFA0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100);
        assertEquals(100, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithFile_VETK1() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("file"), "entryName");
        assertEquals(entry.getSize(), entry.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_ckwn0() {
        ArArchiveEntry arArchiveEntry = new ArArchiveEntry("name", 100, 1, 1, 0755, 1000);
        assertEquals(1, arArchiveEntry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId2_NRft1() {
        ArArchiveEntry arArchiveEntry = new ArArchiveEntry(new File("input"), "entry");
        assertEquals(0, arArchiveEntry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_oYui0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100);
        assertEquals(Objects.hash("name"), entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithFile_kOwt2() {
        File file = new File("input.txt");
        ArArchiveEntry entry = new ArArchiveEntry(file, "entryName");
        assertEquals(Objects.hash(file, "entryName"), entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithAllParams_mAwG3() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100, 1, 2, 3, 4);
        assertEquals(Objects.hash("name", 100, 1, 2, 3, 4), entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_OmpP0() {
        ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_JMWX0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100);
        long length = entry.getLength();
        assert length == 100;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithFileInput_hkcd1() {
        File file = new File("input.txt");
        ArArchiveEntry entry = new ArArchiveEntry(file, "entryName");
        long length = entry.getLength();
        assert length == file.length();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_dqPR0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100);
        assertEquals(0, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModeWithFile_trTa2() {
        File file = new File("file.txt");
        ArArchiveEntry entry = new ArArchiveEntry(file, "entryName");
        assertEquals(0, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModeWithAllParams_DxZi3() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100, 1, 2, 3, 4);
        assertEquals(3, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModified_tgop0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100);
        assertEquals(entry.getLastModified(), 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedWithFile_QbJH2() {
        File file = new File("input.txt");
        ArArchiveEntry entry = new ArArchiveEntry(file, "entryName");
        assertEquals(entry.getLastModified(), file.lastModified());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedWithAllParams_aOkL3() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100, 1000, 1000, 0644, 1632483200000L);
        assertEquals(entry.getLastModified(), 1632483200000L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithPath_DmUs2_GdeF0() throws IOException {
        ArArchiveEntry entry = new ArArchiveEntry(new File("path"), "entryName");
        assertEquals(entry.getSize(), entry.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId3_uNJY2_nSTU0() {
        ArArchiveEntry arArchiveEntry = new ArArchiveEntry(new File("input"), "entry");
        assertEquals(0, arArchiveEntry.getLastModified());
    }
}