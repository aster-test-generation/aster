/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTypeTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_cGxZ0_1() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[0], new CPUTF8[0], new int[]{7, 8, 9});
    int[] startPCs = attribute.getStartPCs();
    assertNotEquals(null, startPCs);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_cGxZ0_2() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[0], new CPUTF8[0], new int[]{7, 8, 9});
    int[] startPCs = attribute.getStartPCs();
    assertNotEquals(0, startPCs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_cGxZ0_3() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[0], new CPUTF8[0], new int[]{7, 8, 9});
    int[] startPCs = attribute.getStartPCs();
    assertEquals(3, startPCs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_cGxZ0_4() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[0], new CPUTF8[0], new int[]{7, 8, 9});
    int[] startPCs = attribute.getStartPCs();
    assertEquals(1, startPCs[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_cGxZ0_5() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[0], new CPUTF8[0], new int[]{7, 8, 9});
    int[] startPCs = attribute.getStartPCs();
    assertEquals(2, startPCs[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_cGxZ0_6() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[0], new CPUTF8[0], new int[]{7, 8, 9});
    int[] startPCs = attribute.getStartPCs();
    assertEquals(3, startPCs[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_NullAttribute_mLvy1() {
    LocalVariableTypeTableAttribute attribute = null;
    int[] startPCs = attribute.getStartPCs();
    assertEquals(null, startPCs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_EmptyAttribute_hvRQ2() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(0, new int[0], new int[0], new CPUTF8[0], new CPUTF8[0], new int[0]);
    int[] startPCs = attribute.getStartPCs();
    assertEquals(null, startPCs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_InvalidAttribute_bszL3() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(-1, new int[]{-1, -2, -3}, new int[]{-4, -5, -6}, new CPUTF8[0], new CPUTF8[0], new int[]{-7, -8, -9});
    int[] startPCs = attribute.getStartPCs();
    assertEquals(null, startPCs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getLengthTest_XXBg0() {
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{1}, new int[]{2}, new CPUTF8[]{new CPUTF8("name1")}, new CPUTF8[]{new CPUTF8("signature1")}, new int[]{1});
        int result = attribute.getLength();
        int expected = 2 + 10 * 1;
        assert result == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getLengthTest1_mDCz1() {
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{1}, new int[]{2}, new CPUTF8[]{new CPUTF8("name1")}, new CPUTF8[]{new CPUTF8("signature1")}, new int[]{1});
        int result = attribute.getLength();
        int expected = 2 + 10 * 2;
        assert result == expected;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getLengthTest2_ogjv2() {
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{1}, new int[]{2}, new CPUTF8[]{new CPUTF8("name1")}, new CPUTF8[]{new CPUTF8("signature1")}, new int[]{1});
        int result = attribute.getLength();
        int expected = 2 + 10 * 0;
        assert result == expected;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getLengthTest3_pKGR3() {
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{1}, new int[]{2}, new CPUTF8[]{new CPUTF8("name1")}, new CPUTF8[]{new CPUTF8("signature1")}, new int[]{1});
        int result = attribute.getLength();
        int expected = 2 + 10 * -1;
        assert result == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenumber_NTpg0() throws Pack200Exception {
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(10, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[3], new CPUTF8[3], new int[]{7, 8, 9});
        List<Integer> byteCodeOffsets = new ArrayList<>();
        attribute.renumber(byteCodeOffsets);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenumberWithNullList_XKGW2() throws Pack200Exception {
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(10, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[3], new CPUTF8[3], new int[]{7, 8, 9});
        attribute.renumber(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testWriteBody_LRGq0() throws IOException {
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(10, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[3], new CPUTF8[3], new int[]{7, 8, 9});
        DataOutputStream dos = new DataOutputStream(System.out);
        attribute.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testWriteBodyWithEmptyArray_fuym1() throws IOException {
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(0, new int[0], new int[0], new CPUTF8[0], new CPUTF8[0], new int[0]);
        DataOutputStream dos = new DataOutputStream(System.out);
        attribute.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAttributeName_WhenValidInput_SetsAttributeName_kiCv0() {
        CPUTF8 cpUTF8Value = new CPUTF8("validName");
        LocalVariableTypeTableAttribute.setAttributeName(cpUTF8Value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAttributeName_WhenNullInput_SetsAttributeNameToNull_sQSQ1() {
        CPUTF8 cpUTF8Value = null;
        LocalVariableTypeTableAttribute.setAttributeName(cpUTF8Value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAttributeName_WhenEmptyInput_SetsAttributeNameToEmpty_rYdK2() {
        CPUTF8 cpUTF8Value = new CPUTF8("");
        LocalVariableTypeTableAttribute.setAttributeName(cpUTF8Value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddWithNestedEntries_gvLD6_HqtC0() {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int expected = 0;
        int result = 0;
        assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_cGxZ0() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[0], new CPUTF8[0], new int[]{7, 8, 9});
    int[] startPCs = attribute.getStartPCs();
    assertNotEquals(null, startPCs);
    assertNotEquals(0, startPCs.length);
    assertEquals(3, startPCs.length);
    assertEquals(1, startPCs[0]);
    assertEquals(2, startPCs[1]);
    assertEquals(3, startPCs[2]);
}
}