/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.HashSet;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sets_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNoElements_xyOn0() {
        HashSet<Object> set = Sets.newHashSet();
        assertTrue(set.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithOneElement_MEHo1_1() {
        HashSet<String> set = Sets.newHashSet("a");
        assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithOneElement_MEHo1_2() {
        HashSet<String> set = Sets.newHashSet("a");
        assertTrue(set.contains("a"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithTwoElements_LSZh2_1() {
        HashSet<Integer> set = Sets.newHashSet(1, 2);
        assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithTwoElements_LSZh2_2() {
        HashSet<Integer> set = Sets.newHashSet(1, 2);
        assertTrue(set.contains(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithTwoElements_LSZh2_3() {
        HashSet<Integer> set = Sets.newHashSet(1, 2);
        assertTrue(set.contains(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithThreeElements_pqAj3_1() {
        HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0);
        assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithThreeElements_pqAj3_2() {
        HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0);
        assertTrue(set.contains(1.0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithThreeElements_pqAj3_3() {
        HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0);
        assertTrue(set.contains(2.0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithThreeElements_pqAj3_4() {
        HashSet<Double> set = Sets.newHashSet(1.0, 2.0, 3.0);
        assertTrue(set.contains(3.0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFourElements_VdEy4_1() {
        HashSet<Character> set = Sets.newHashSet('a', 'b', 'c', 'd');
        assertEquals(4, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFourElements_VdEy4_2() {
        HashSet<Character> set = Sets.newHashSet('a', 'b', 'c', 'd');
        assertTrue(set.contains('a'));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFourElements_VdEy4_3() {
        HashSet<Character> set = Sets.newHashSet('a', 'b', 'c', 'd');
        assertTrue(set.contains('b'));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFourElements_VdEy4_4() {
        HashSet<Character> set = Sets.newHashSet('a', 'b', 'c', 'd');
        assertTrue(set.contains('c'));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFourElements_VdEy4_5() {
        HashSet<Character> set = Sets.newHashSet('a', 'b', 'c', 'd');
        assertTrue(set.contains('d'));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFiveElements_BBog5_1() {
        HashSet<Boolean> set = Sets.newHashSet(true, false, true, false, true);
        assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFiveElements_BBog5_2() {
        HashSet<Boolean> set = Sets.newHashSet(true, false, true, false, true);
        assertTrue(set.contains(true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithFiveElements_BBog5_3() {
        HashSet<Boolean> set = Sets.newHashSet(true, false, true, false, true);
        assertTrue(set.contains(false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSixElements_GRtd6_1() {
        HashSet<Byte> set = Sets.newHashSet((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6);
        assertEquals(6, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSixElements_GRtd6_2() {
        HashSet<Byte> set = Sets.newHashSet((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6);
        assertTrue(set.contains((byte) 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSixElements_GRtd6_3() {
        HashSet<Byte> set = Sets.newHashSet((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6);
        assertTrue(set.contains((byte) 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSixElements_GRtd6_4() {
        HashSet<Byte> set = Sets.newHashSet((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6);
        assertTrue(set.contains((byte) 3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSixElements_GRtd6_5() {
        HashSet<Byte> set = Sets.newHashSet((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6);
        assertTrue(set.contains((byte) 4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSixElements_GRtd6_6() {
        HashSet<Byte> set = Sets.newHashSet((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6);
        assertTrue(set.contains((byte) 5));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSixElements_GRtd6_7() {
        HashSet<Byte> set = Sets.newHashSet((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6);
        assertTrue(set.contains((byte) 6));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSevenElements_aIER7_1() {
        HashSet<Short> set = Sets.newHashSet((short) 1, (short) 2, (short) 3, (short) 4, (short) 5, (short) 6, (short) 7);
        assertEquals(7, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSevenElements_aIER7_2() {
        HashSet<Short> set = Sets.newHashSet((short) 1, (short) 2, (short) 3, (short) 4, (short) 5, (short) 6, (short) 7);
        assertTrue(set.contains((short) 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSevenElements_aIER7_3() {
        HashSet<Short> set = Sets.newHashSet((short) 1, (short) 2, (short) 3, (short) 4, (short) 5, (short) 6, (short) 7);
        assertTrue(set.contains((short) 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSevenElements_aIER7_4() {
        HashSet<Short> set = Sets.newHashSet((short) 1, (short) 2, (short) 3, (short) 4, (short) 5, (short) 6, (short) 7);
        assertTrue(set.contains((short) 3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSevenElements_aIER7_5() {
        HashSet<Short> set = Sets.newHashSet((short) 1, (short) 2, (short) 3, (short) 4, (short) 5, (short) 6, (short) 7);
        assertTrue(set.contains((short) 4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSevenElements_aIER7_6() {
        HashSet<Short> set = Sets.newHashSet((short) 1, (short) 2, (short) 3, (short) 4, (short) 5, (short) 6, (short) 7);
        assertTrue(set.contains((short) 5));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSevenElements_aIER7_7() {
        HashSet<Short> set = Sets.newHashSet((short) 1, (short) 2, (short) 3, (short) 4, (short) 5, (short) 6, (short) 7);
        assertTrue(set.contains((short) 6));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithSevenElements_aIER7_8() {
        HashSet<Short> set = Sets.newHashSet((short) 1, (short) 2, (short) 3, (short) 4, (short) 5, (short) 6, (short) 7);
        assertTrue(set.contains((short) 7));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightElements_PQSE8_1() {
        HashSet<Float> set = Sets.newHashSet(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f);
        assertEquals(8, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightElements_PQSE8_2() {
        HashSet<Float> set = Sets.newHashSet(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f);
        assertTrue(set.contains(1.0f));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightElements_PQSE8_3() {
        HashSet<Float> set = Sets.newHashSet(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f);
        assertTrue(set.contains(2.0f));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightElements_PQSE8_4() {
        HashSet<Float> set = Sets.newHashSet(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f);
        assertTrue(set.contains(3.0f));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightElements_PQSE8_5() {
        HashSet<Float> set = Sets.newHashSet(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f);
        assertTrue(set.contains(4.0f));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightElements_PQSE8_6() {
        HashSet<Float> set = Sets.newHashSet(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f);
        assertTrue(set.contains(5.0f));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightElements_PQSE8_7() {
        HashSet<Float> set = Sets.newHashSet(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f);
        assertTrue(set.contains(6.0f));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightElements_PQSE8_8() {
        HashSet<Float> set = Sets.newHashSet(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f);
        assertTrue(set.contains(7.0f));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEightElements_PQSE8_9() {
        HashSet<Float> set = Sets.newHashSet(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f);
        assertTrue(set.contains(8.0f));}
}