/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExtraFieldUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraFieldNoDefault_vQED0() {
        final ZipShort headerId = new ZipShort(1);
        final ZipExtraField extraField = ExtraFieldUtils.createExtraFieldNoDefault(headerId);
        assertNotNull(extraField);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraFieldNoDefaultWithNullHeaderId_LoUR1() {
        final ZipShort headerId = null;
        final ZipExtraField extraField = ExtraFieldUtils.createExtraFieldNoDefault(headerId);
        assertNull(extraField);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraFieldNoDefaultWithUnsupportedHeaderId_MGLf2() {
        final ZipShort headerId = new ZipShort(999);
        final ZipExtraField extraField = ExtraFieldUtils.createExtraFieldNoDefault(headerId);
        assertNull(extraField);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_NullData_ReturnsEmptyArray_SNUJ0() throws ZipException {
    final byte[] data = null;
    final boolean local = true;
    final ZipExtraField[] actual = ExtraFieldUtils.parse(data, local);
    assertTrue(actual.length == 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_NoFields_ReturnsEmptyArray_hsnz1() throws ZipException {
    final byte[] data = new byte[0];
    final boolean local = true;
    final ZipExtraField[] actual = ExtraFieldUtils.parse(data, local);
    assertTrue(actual.length == 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMergeCentralDirectoryDataWithNoData_rZeM0() {
    final ZipExtraField[] data = {};
    final byte[] result = ExtraFieldUtils.mergeCentralDirectoryData(data);
    assert result.length == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraField_bvRO0() {
        ZipShort headerId = new ZipShort(1);
        ZipExtraField field = ExtraFieldUtils.createExtraField(headerId);
        assertEquals(field.getClass(), UnrecognizedExtraField.class);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraField2_OVay1() {
        ZipShort headerId = new ZipShort(2);
        ZipExtraField field = ExtraFieldUtils.createExtraField(headerId);
        assertEquals(field.getClass(), UnrecognizedExtraField.class);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_NullData_gIXp0() throws ZipException {
	    ZipExtraField[] actual = ExtraFieldUtils.parse(null);
	    assertEquals(0, actual.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_EmptyData_mGpX1() throws ZipException {
	    ZipExtraField[] actual = ExtraFieldUtils.parse(new byte[0]);
	    assertEquals(0, actual.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFillExtraField_kVQt0_quzG0() throws Exception {
        ZipExtraField ze = mock(ZipExtraField.class);
        byte[] data = new byte[10];
        int off = 0;
        int len = 10;
        boolean local = true;
        ZipExtraField result = ExtraFieldUtils.fillExtraField(ze, data, off, len, local);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFillExtraFieldWithException_UKbN1_GgFj0() throws Exception {
        ZipExtraField ze = mock(ZipExtraField.class);
        byte[] data = new byte[10];
        int off = 11;
        int len = 10;
        boolean local = true;
        try {
            ExtraFieldUtils.fillExtraField(ze, data, off, len, local);
            fail("Expected ZipException");
        } catch (ZipException e) {
            assertEquals("Failed to parse corrupt ZIP extra field of type " + Integer.toHexString(ze.getHeaderId().getValue()), e.getMessage());
        }
    }
}