/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.Iterator;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Iterators_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAll_EHgd0_1() {
        List<Integer> list = new ArrayList<>();
        List<Integer> toAdd = Arrays.asList(1, 2, 3);
        Iterator<Integer> iterator = toAdd.iterator();
        boolean result = Iterators.addAll(list, iterator);
        assertTrue(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAll_EHgd0_2() {
        List<Integer> list = new ArrayList<>();
        List<Integer> toAdd = Arrays.asList(1, 2, 3);
        Iterator<Integer> iterator = toAdd.iterator();
        boolean result = Iterators.addAll(list, iterator);
        assertTrue(list.containsAll(toAdd));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllEmpty_guLZ1_1() {
        List<Integer> list = new ArrayList<>();
        List<Integer> toAdd = Arrays.asList();
        Iterator<Integer> iterator = toAdd.iterator();
        boolean result = Iterators.addAll(list, iterator);
        assertTrue(!result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllEmpty_guLZ1_2() {
        List<Integer> list = new ArrayList<>();
        List<Integer> toAdd = Arrays.asList();
        Iterator<Integer> iterator = toAdd.iterator();
        boolean result = Iterators.addAll(list, iterator);
        assertTrue(list.isEmpty());}
}