/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.deflate;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DeflateCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithValidSignatureAndLength_WRXy0() throws Exception {
        byte[] signature = { 0x1f, (byte) 0x8b, 0x08, 0x08 };
        int length = 4;
        assertTrue(DeflateCompressorInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithInvalidSignatureAndLength_DLES1() throws Exception {
        byte[] signature = { 0x1f, (byte) 0x8b, 0x08, 0x08 };
        int length = 3;
        assertFalse(DeflateCompressorInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithInvalidLength_TUQJ3() throws Exception {
        byte[] signature = { 0x1f, (byte) 0x8b, 0x08, 0x08 };
        int length = 5;
        assertFalse(DeflateCompressorInputStream.matches(signature, length));
    }
}