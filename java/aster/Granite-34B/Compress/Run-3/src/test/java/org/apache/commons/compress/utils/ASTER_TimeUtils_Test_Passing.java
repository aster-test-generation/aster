/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TimeUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToUnixTime_NotNull_shhB0() {
	    FileTime fileTime = FileTime.from(1234567890, TimeUnit.SECONDS);
	    long expected = 1234567890;
	    long actual = TimeUtils.toUnixTime(fileTime);
	    assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsUnixTime14_SLhR13() {
		FileTime time = FileTime.fromMillis(1633046400011L);
		boolean result = TimeUtils.isUnixTime(time);
		Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToFileTime16_jdNj15() {
		Date date = new Date();
		FileTime fileTime = FileTimes.toFileTime(date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testTruncateToHundredNanos_oFRp0() {
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        FileTime truncatedFileTime =TimeUtils.truncateToHundredNanos(fileTime);
        assertEquals(truncatedFileTime.toInstant().getNano() % 100, 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToNtfsTime_eKLR0() {
	    long javaTime = 1630521600000L; // 2021-08-31T00:00:00.000Z
	    long ntfsTime =TimeUtils.toNtfsTime(javaTime);
	    assertEquals(132537600000000000L, ntfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToNtfsTimeWithNegativeJavaTime_fidO1() {
	    long javaTime = -1000L;
	    long ntfsTime =TimeUtils.toNtfsTime(javaTime);
	    assertEquals(-10000000L, ntfsTime);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsUnixTime_LowestAcceptableValue_zLam0_DIZB0() {
	    assertTrue(TimeUtils.isUnixTime(Integer.MIN_VALUE));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsUnixTime_HighestAcceptableValue_lYwC1_uUAX0() {
	    assertTrue(TimeUtils.isUnixTime(2147483647));
}
}