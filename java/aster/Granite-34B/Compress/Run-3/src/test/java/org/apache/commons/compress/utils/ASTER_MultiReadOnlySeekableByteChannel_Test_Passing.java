/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MultiReadOnlySeekableByteChannel_Test_Passing {
    private SeekableByteChannel mockChannel;
    private List<SeekableByteChannel> channels;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForSeekableByteChannels_XEQm0() throws Exception {
        SeekableByteChannel[] channels = new SeekableByteChannel[0];
        SeekableByteChannel result = MultiReadOnlySeekableByteChannel.forSeekableByteChannels(channels);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForSeekableByteChannels2_oyaS1() throws Exception {
        SeekableByteChannel[] channels = new SeekableByteChannel[1];
        SeekableByteChannel result = MultiReadOnlySeekableByteChannel.forSeekableByteChannels(channels);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForSeekableByteChannels3_Qrti2() throws Exception {
        SeekableByteChannel[] channels = new SeekableByteChannel[2];
        SeekableByteChannel result = MultiReadOnlySeekableByteChannel.forSeekableByteChannels(channels);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForSeekableByteChannels4_bbUY3() throws Exception {
        SeekableByteChannel[] channels = new SeekableByteChannel[3];
        SeekableByteChannel result = MultiReadOnlySeekableByteChannel.forSeekableByteChannels(channels);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForSeekableByteChannels5_AcLH4() throws Exception {
        SeekableByteChannel[] channels = new SeekableByteChannel[4];
        SeekableByteChannel result = MultiReadOnlySeekableByteChannel.forSeekableByteChannels(channels);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForSeekableByteChannels6_gxtR5() throws Exception {
        SeekableByteChannel[] channels = new SeekableByteChannel[5];
        SeekableByteChannel result = MultiReadOnlySeekableByteChannel.forSeekableByteChannels(channels);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForSeekableByteChannels7_GqfL6() throws Exception {
        SeekableByteChannel[] channels = new SeekableByteChannel[6];
        SeekableByteChannel result = MultiReadOnlySeekableByteChannel.forSeekableByteChannels(channels);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForSeekableByteChannels8_eHjS7() throws Exception {
        SeekableByteChannel[] channels = new SeekableByteChannel[7];
        SeekableByteChannel result = MultiReadOnlySeekableByteChannel.forSeekableByteChannels(channels);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForSeekableByteChannels9_DKZI8() throws Exception {
        SeekableByteChannel[] channels = new SeekableByteChannel[8];
        SeekableByteChannel result = MultiReadOnlySeekableByteChannel.forSeekableByteChannels(channels);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForSeekableByteChannels10_oYvw9() throws Exception {
        SeekableByteChannel[] channels = new SeekableByteChannel[9];
        SeekableByteChannel result = MultiReadOnlySeekableByteChannel.forSeekableByteChannels(channels);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncate_PgTl0() throws Exception {
        List<SeekableByteChannel> channels = new ArrayList<>();
        MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(channels);
        long size = 100;
        SeekableByteChannel result = channel.truncate(size);
        assertEquals(result, null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisOpen_Dkgc0() throws Exception {
    List<SeekableByteChannel> channels = new ArrayList<>();
    MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(channels);
    boolean expected = channels.stream().allMatch(SeekableByteChannel::isOpen);
    boolean actual = multiReadOnlySeekableByteChannel.isOpen();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisOpenWithMockData_rrJT1() throws Exception {
    List<SeekableByteChannel> channels = new ArrayList<>();
    SeekableByteChannel channel1 = mock(SeekableByteChannel.class);
    SeekableByteChannel channel2 = mock(SeekableByteChannel.class);
    channels.add(channel1);
    channels.add(channel2);
    when(channel1.isOpen()).thenReturn(true);
    when(channel2.isOpen()).thenReturn(true);
    MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(channels);
    boolean expected = channels.stream().allMatch(SeekableByteChannel::isOpen);
    boolean actual = multiReadOnlySeekableByteChannel.isOpen();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisOpenWithMockData2_aOeQ2() throws Exception {
    List<SeekableByteChannel> channels = new ArrayList<>();
    SeekableByteChannel channel1 = mock(SeekableByteChannel.class);
    SeekableByteChannel channel2 = mock(SeekableByteChannel.class);
    channels.add(channel1);
    channels.add(channel2);
    when(channel1.isOpen()).thenReturn(false);
    when(channel2.isOpen()).thenReturn(true);
    MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(channels);
    boolean expected = channels.stream().allMatch(SeekableByteChannel::isOpen);
    boolean actual = multiReadOnlySeekableByteChannel.isOpen();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisOpenWithMockData3_dOaX3() throws Exception {
    List<SeekableByteChannel> channels = new ArrayList<>();
    SeekableByteChannel channel1 = mock(SeekableByteChannel.class);
    SeekableByteChannel channel2 = mock(SeekableByteChannel.class);
    channels.add(channel1);
    channels.add(channel2);
    when(channel1.isOpen()).thenReturn(true);
    when(channel2.isOpen()).thenReturn(false);
    MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(channels);
    boolean expected = channels.stream().allMatch(SeekableByteChannel::isOpen);
    boolean actual = multiReadOnlySeekableByteChannel.isOpen();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisOpenWithMockData4_DKPe4() throws Exception {
    List<SeekableByteChannel> channels = new ArrayList<>();
    SeekableByteChannel channel1 = mock(SeekableByteChannel.class);
    SeekableByteChannel channel2 = mock(SeekableByteChannel.class);
    channels.add(channel1);
    channels.add(channel2);
    when(channel1.isOpen()).thenReturn(false);
    when(channel2.isOpen()).thenReturn(false);
    MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(channels);
    boolean expected = channels.stream().allMatch(SeekableByteChannel::isOpen);
    boolean actual = multiReadOnlySeekableByteChannel.isOpen();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_MOkY0() throws Exception {
        List<SeekableByteChannel> channels = new ArrayList<>();
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(channels);
        ByteBuffer src = ByteBuffer.allocate(10);
        try {
            multiReadOnlySeekableByteChannel.write(src);
            fail("Expected NonWritableChannelException");
        } catch (NonWritableChannelException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testForFilesWithNullFiles_zgkO1_1() throws Exception {
    final IOException exception = assertThrows(IOException.class, () -> {
      MultiReadOnlySeekableByteChannel.forFiles((File[]) null);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testForFilesWithEmptyFiles_tfbd2_1() throws Exception {
    final IOException exception = assertThrows(IOException.class, () -> {
      MultiReadOnlySeekableByteChannel.forFiles(new File[0]);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition_whenNewPositionIsNegative_GrMr0() throws Exception {
        MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(null);
        try {
            channel.position(-1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Negative position: -1", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition_whenChannelIsClosed_OOps1() throws Exception {
        MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(null);
        channel.close();
        try {
            channel.position(0);
            fail("Expected ClosedChannelException");
        } catch (ClosedChannelException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition_whenNewPositionIsZero_goIZ2() throws Exception {
        MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(null);
        channel.position(0);
        assertEquals(0, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition_whenNewPositionIsSmallerThanSize_fEPX3() throws Exception {
        MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(null);
        channel.position(10);
        assertEquals(10, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition_whenNewPositionIsLargerThanSize_cSeu4() throws Exception {
        MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(null);
        channel.position(100);
        assertEquals(100, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition_whenNewPositionIsLargerThanTotalSize_Vrli5() throws Exception {
        MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(null);
        channel.position(200);
        assertEquals(200, channel.position());
    }
}