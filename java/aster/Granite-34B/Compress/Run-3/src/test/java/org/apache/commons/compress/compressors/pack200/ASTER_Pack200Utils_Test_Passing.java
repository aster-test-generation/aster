/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200Utils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithInvalidJarFile_wMTz3() throws IOException {
    final File from = new File("invalid.jar");
    final File to = new File("to.jar");
    Map<String, String> props = new HashMap<>();
    props.put("key1", "value1");
    props.put("key2", "value2");
    try {
        Pack200Utils.normalize(from, to, props);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_dKsM1() throws IOException {
    File jar = new File("input.jar");
    Map<String, String> props = new HashMap<>();
    props.put("key1", "value1");
    props.put("key2", "value2");
   Pack200Utils.normalize(jar, props);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithEmptyProps_LyCe2() throws IOException {
    File jar = new File("input.jar");
    Map<String, String> props = new HashMap<>();
   Pack200Utils.normalize(jar, props);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNormalize_jiCE1_DVcU0() throws IOException {
		final File from = new File("from");
		final File to = new File("to");
		Pack200Utils.normalize(from, to, null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNormalizeWithOutput_xFsV2_oLBl0() throws IOException {
		File input = new File("input.jar");
		File output = new File("output.jar");
		Pack200Utils.normalize(input, output, null);
		Assertions.assertEquals(100L, output.length(), "Normalized file size");
	}
}