/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipSplitReadOnlySeekableByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForFiles_aqls0() throws IOException {
        File lastSegmentFile = new File("lastSegmentFile");
        Iterable<File> files = new ArrayList<>();
        SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForFilesWithNullFiles_FZfi1() {
        File lastSegmentFile = new File("lastSegmentFile");
        Iterable<File> files = null;
        try {
            ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
            fail("Expected IOException");
        } catch (IOException e) {
            assertTrue(true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForFilesWithNullLastSegmentFile_UqmD2() {
        File lastSegmentFile = null;
        Iterable<File> files = new ArrayList<>();
        try {
            ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
            fail("Expected IOException");
        } catch (IOException e) {
            assertTrue(true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForFilesWithEmptyFiles_svuk3() {
        File lastSegmentFile = new File("lastSegmentFile");
        Iterable<File> files = new ArrayList<>();
        try {
            ZipSplitReadOnlySeekableByteChannel.forFiles(lastSegmentFile, files);
            fail("Expected IOException");
        } catch (IOException e) {
            assertTrue(true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForPaths_HCrD0() throws IOException {
        List<Path> paths = new ArrayList<>();
        OpenOption[] openOptions = {};
        SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forPaths(paths, openOptions);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForPathsWithNullPaths_qFDH1() throws IOException {
        List<Path> paths = null;
        OpenOption[] openOptions = {};
        try {
            ZipSplitReadOnlySeekableByteChannel.forPaths(paths, openOptions);
            fail("Expected IOException");
        } catch (IOException e) {
            assertEquals("paths must not be null", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForOrderedSeekableByteChannels_ppjL0() throws IOException {
    SeekableByteChannel lastSegmentChannel = mock(SeekableByteChannel.class);
    Iterable<SeekableByteChannel> channels = mock(Iterable.class);
    SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(lastSegmentChannel, channels);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForOrderedSeekableByteChannels2_PeXA1() throws IOException {
    SeekableByteChannel lastSegmentChannel = mock(SeekableByteChannel.class);
    Iterable<SeekableByteChannel> channels = mock(Iterable.class);
    SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(lastSegmentChannel, channels);
    verify(lastSegmentChannel, times(1)).position();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForOrderedSeekableByteChannels3_ejps2() throws IOException {
    SeekableByteChannel lastSegmentChannel = mock(SeekableByteChannel.class);
    Iterable<SeekableByteChannel> channels = mock(Iterable.class);
    SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(lastSegmentChannel, channels);
    verify(lastSegmentChannel, times(1)).size();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForOrderedSeekableByteChannels4_eJwN3() throws IOException {
    SeekableByteChannel lastSegmentChannel = mock(SeekableByteChannel.class);
    Iterable<SeekableByteChannel> channels = mock(Iterable.class);
    SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(lastSegmentChannel, channels);
    verify(lastSegmentChannel, times(1)).close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForOrderedSeekableByteChannels5_Ahcz4() throws IOException {
    SeekableByteChannel lastSegmentChannel = mock(SeekableByteChannel.class);
    Iterable<SeekableByteChannel> channels = mock(Iterable.class);
    SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(lastSegmentChannel, channels);
    verify(lastSegmentChannel, times(1)).read(any(ByteBuffer.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForOrderedSeekableByteChannels6_mIUr5() throws IOException {
    SeekableByteChannel lastSegmentChannel = mock(SeekableByteChannel.class);
    Iterable<SeekableByteChannel> channels = mock(Iterable.class);
    SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(lastSegmentChannel, channels);
    verify(lastSegmentChannel, times(1)).write(any(ByteBuffer.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForOrderedSeekableByteChannels7_lKqk6() throws IOException {
    SeekableByteChannel lastSegmentChannel = mock(SeekableByteChannel.class);
    Iterable<SeekableByteChannel> channels = mock(Iterable.class);
    SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(lastSegmentChannel, channels);
    verify(lastSegmentChannel, times(1)).truncate(anyLong());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForOrderedSeekableByteChannels_aNNO0() throws IOException {
    SeekableByteChannel[] channels = new SeekableByteChannel[2];
    channels[0] = mock(SeekableByteChannel.class);
    channels[1] = mock(SeekableByteChannel.class);
    SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channels);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForOrderedSeekableByteChannels2_bSWE1() throws IOException {
    SeekableByteChannel[] channels = new SeekableByteChannel[1];
    channels[0] = mock(SeekableByteChannel.class);
    SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channels);
    assertEquals(channels[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForFilesWithNullFiles_CEUY0_1() {
        IOException e = assertThrows(IOException.class, () -> ZipSplitReadOnlySeekableByteChannel.forFiles(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForFilesWithNoFiles_sXyD1() throws IOException {
        SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles();
        assertNotNull(channel);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForFilesWithOneFile_QNin2() throws IOException {
        File file = mock(File.class);
        Path path = mock(Path.class);
        SeekableByteChannel channel = mock(SeekableByteChannel.class);
        when(file.toPath()).thenReturn(path);
        when(ZipSplitReadOnlySeekableByteChannel.forPaths(path)).thenReturn(channel);
        SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forFiles(file);
        assertEquals(channel, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildFromLastSplitSegment_qBVk0() throws IOException {
    File lastSegmentFile = new File("path/to/last/segment/file");
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentFile);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForFilesWithNullFiles_CEUY0() {
        IOException e = assertThrows(IOException.class, () -> ZipSplitReadOnlySeekableByteChannel.forFiles(null));
        assertEquals("files must not be null", e.getMessage());
    }
}