/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.IOException;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NewAttributeBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_Tkko0() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 2));
    int[] backwardsCalls = {1, 2, 3, 4};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_withDefaultLayout_AJYY1() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 2, true));
    int[] backwardsCalls = {1, 2, 3, 4};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_withNoBackwardsCalls_hXWY2() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 2));
    int[] backwardsCalls = {};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_withNullBackwardsCalls_xAqk3() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 2));
    newAttributeBands.setBackwardsCalls(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_Otnx0() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 2));
    newAttributeBands.setBackwardsCalls(new int[]{1, 2, 3, 4});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls2_msOS1() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 2, true));
    newAttributeBands.setBackwardsCalls(new int[]{1, 2, 3, 4});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls3_rgdi2() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 2));
    newAttributeBands.setBackwardsCalls(new int[]{1, 2, 3, 4, 5});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls4_moGw3() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 2, true));
    newAttributeBands.setBackwardsCalls(new int[]{1, 2, 3, 4, 5});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_4_mvuE3() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 2, true));
    int[] backwardsCalls = {1, 2, 3};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_withNullArray_fYEA1() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 2));
    int[] backwardsCalls = null;
    newAttributeBands.setBackwardsCalls(backwardsCalls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_withShortArray_pjkv2() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 2));
    int[] backwardsCalls = {1, 2};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_withLongArray_FURD3() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 2));
    int[] backwardsCalls = {1, 2, 3, 4, 5};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls_nrKn0() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        int[] backwardsCalls = {1, 2, 3, 4};
        newAttributeBands.setBackwardsCalls(backwardsCalls);
        assertEquals(1, newAttributeBands.getBackwardsCallCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls2_mKOB1() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        int[] backwardsCalls = {1, 1, 1, 1};
        newAttributeBands.setBackwardsCalls(backwardsCalls);
        assertEquals(4, newAttributeBands.getBackwardsCallCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls3_trrd2() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        int[] backwardsCalls = {0, 0, 0, 0};
        newAttributeBands.setBackwardsCalls(backwardsCalls);
        assertEquals(0, newAttributeBands.getBackwardsCallCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls4_ogod3() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        int[] backwardsCalls = {5, 5, 5, 5};
        newAttributeBands.setBackwardsCalls(backwardsCalls);
        assertEquals(20, newAttributeBands.getBackwardsCallCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_XHlx0() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 2));
    int[] backwardsCalls = new int[3];
    newAttributeBands.setBackwardsCalls(backwardsCalls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCodec_0_pCtS0() throws Exception {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
    BHSDCodec result = newAttributeBands.getCodec("layoutElement");
    assertEquals(Codec.BRANCH5, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCodec_1_iOaI1() throws Exception {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 1));
    BHSDCodec result = newAttributeBands.getCodec("layoutElement");
    assertEquals(Codec.BCI5, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCodec_2_hOOp2() throws Exception {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 2, "layout", 2));
    BHSDCodec result = newAttributeBands.getCodec("layoutElement");
    assertEquals(Codec.SIGNED5, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCodec_3_VBIk3() throws Exception {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 3, "layout", 3));
    BHSDCodec result = newAttributeBands.getCodec("layoutElement");
    assertEquals(Codec.BYTE1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCodec_4_LdHM4() throws Exception {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 4, "layout", 4));
    BHSDCodec result = newAttributeBands.getCodec("layoutElement");
    assertEquals(Codec.UNSIGNED5, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCodec_5_KgRB5() throws Exception {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 5, "layout", 5));
    BHSDCodec result = newAttributeBands.getCodec("layoutElement");
    assertEquals(Codec.BRANCH5, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCodec_6_EMnh6() throws Exception {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 6, "layout", 6));
    BHSDCodec result = newAttributeBands.getCodec("layoutElement");
    assertEquals(Codec.BCI5, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCodec_7_MZMR7() throws Exception {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 7, "layout", 7));
    BHSDCodec result = newAttributeBands.getCodec("layoutElement");
    assertEquals(Codec.SIGNED5, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCodec_8_dnvx8() throws Exception {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 8, "layout", 8));
    BHSDCodec result = newAttributeBands.getCodec("layoutElement");
    assertEquals(Codec.BYTE1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCodec_9_mEwy9() throws Exception {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 9, "layout", 9));
    BHSDCodec result = newAttributeBands.getCodec("layoutElement");
    assertEquals(Codec.UNSIGNED5, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCodec_10_adCX10() throws Exception {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 10, "layout", 10));
    BHSDCodec result = newAttributeBands.getCodec("layoutElement");
    assertEquals(Codec.BRANCH5, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getCodec_11_OZJr11() throws Exception {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 11, "layout", 11));
    BHSDCodec result = newAttributeBands.getCodec("layoutElement");
    assertEquals(Codec.BCI5, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpack_poEX0() throws IOException, Pack200Exception {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        newAttributeBands.unpack();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBackwardsCallCount_uTJc0() throws Exception {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        int backwardsCallCount = newAttributeBands.getBackwardsCallCount();
    }
}