/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.function.Function;
import java.util.zip.ZipEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveInputStream_Test_Passing {
ZipArchiveInputStream ziparchiveinputstream;
private byte[] skipBuf = new byte[1024];
private long uncompressedCount;
private boolean hitCentralDirectory;
private boolean useUnicodeExtraFields;
private boolean closed;
private boolean hasDataDescriptor;
private int entriesRead;
private InputStream inputStream;
ZipArchiveEntry zae;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureAndLength_PLEX0() throws Exception {
    byte[] signature = new byte[10];
    int length = 10;
    boolean result = ZipArchiveInputStream.matches(signature, length);
    assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureAndLength1_reCe1() throws Exception {
    byte[] signature = new byte[10];
    int length = 10;
    boolean result = ZipArchiveInputStream.matches(signature, length);
    assertEquals(false, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNextEntry() throws Exception{
        ziparchiveinputstream = mock(ZipArchiveInputStream.class);
        when(ziparchiveinputstream.getNextZipEntry()).thenReturn(new ZipArchiveEntry());
        ZipArchiveEntry entry = ziparchiveinputstream.getNextEntry();
        assertNotNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_UOer0() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry entry = zais.getNextEntry();
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStoredEntry_HJeO0() throws Exception {
        ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        zis.getNextEntry();
        assertEquals(0, zis.getCompressedCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnknownEntry_QRML6() throws Exception {
        ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        zis.getNextEntry();
        assertEquals(-1, zis.getCompressedCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_Fwdt0() throws IOException {
        ZipArchiveInputStream zin = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        zin.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithParams_IDti1() throws IOException {
        ZipArchiveInputStream zin = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
        zin.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryWithNoEntry_aXwA0() throws IOException {
    final ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    final ZipArchiveEntry entry = zais.getNextZipEntry();
    Assertions.assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextZipEntryWithNoInputStream_FrAV0() throws IOException {
        ZipArchiveInputStream zin = new ZipArchiveInputStream(null);
        assertNull(zin.getNextZipEntry());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryWithNoEntry_oywP0() throws IOException {
    ZipArchiveInputStream zin = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry entry = zin.getNextZipEntry();
    Assertions.assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryWithOneEntry_CCZA1_1() throws IOException {
    byte[] data = new byte[] {
        'a', 'b', 'c', 'd',
    };
    ZipArchiveInputStream zin = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    ZipArchiveEntry entry = zin.getNextZipEntry();
    Assertions.assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryWithOneEntry_CCZA1_2() throws IOException {
    byte[] data = new byte[] {
        'a', 'b', 'c', 'd',
    };
    ZipArchiveInputStream zin = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    ZipArchiveEntry entry = zin.getNextZipEntry();
    Assertions.assertEquals("abcd", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraFieldSupport_sOeZ0() throws Exception {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    Function<ZipShort, ZipExtraField> extraFieldSupport = (zipShort) -> null;
    ZipArchiveInputStream result = zais.setExtraFieldSupport(extraFieldSupport);
    assertEquals(result, zais);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getUncompressedCountTest1_eXrD0() throws Exception {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    assertEquals(0, zais.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getUncompressedCountTest2_IzLD1() throws Exception {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    assertEquals(0, zais.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getUncompressedCountTest3_Rtrr2() throws Exception {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true);
    assertEquals(0, zais.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getUncompressedCountTest4_VcQu3() throws Exception {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true);
    assertEquals(0, zais.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getUncompressedCountTest5_Jthx4() throws Exception {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
    assertEquals(0, zais.getUncompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanReadEntryDataWithZipArchiveEntry_wyGr0() throws Exception {
        ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertTrue(zais.canReadEntryData(entry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanReadEntryDataWithNullEntry_tOgM2() throws Exception {
        ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        assertTrue(!zais.canReadEntryData(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanReadEntryDataWithUnsupportedEntry_IZiH3() throws Exception {
        ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setMethod(ZipEntry.DEFLATED);
        assertTrue(!zais.canReadEntryData(entry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanReadEntryDataWithSupportedEntry_LXYP4() throws Exception {
        ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setMethod(ZipEntry.STORED);
        assertTrue(zais.canReadEntryData(entry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testread() throws Exception{
        ziparchiveinputstream = mock(ZipArchiveInputStream.class);
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        when(ziparchiveinputstream.read(buffer, offset, length)).thenReturn(10);
        assertEquals(10, ziparchiveinputstream.read(buffer, offset, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetAndLengthAndEntryWithUnsupportedMethod5_nTZq7() throws IOException {
    final byte[] buffer = new byte[10];
    final int offset = 2;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testReadWithOffsetAndLength_UORG0() throws IOException {
		ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
		byte[] buffer = new byte[10];
		int read = zais.read(buffer, 0, 10);
		assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testReadWithOffsetAndLengthAndClosedStream_Yxwy1() throws IOException {
		ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
		zais.close();
		byte[] buffer = new byte[10];
		try {
			zais.read(buffer, 0, 10);
			fail("Expected IOException");
		} catch (IOException expected) {
		}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testReadWithOffsetAndLengthAndNoEntry_ORNE2() throws IOException {
		ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
		byte[] buffer = new byte[10];
		int read = zais.read(buffer, 0, 10);
		assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testReadWithOffsetAndLengthOnAnEntryWithUnsupportedCompressionMethod8_twwb11() throws IOException {
		byte[] buffer = new byte[10];
		int offset = 2;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_spQZ0() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1024];
    int read = zais.read(buffer, 0, buffer.length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffset_zzlW1() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1024];
    int read = zais.read(buffer, 10, buffer.length);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithLength_NkbM2() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1024];
    int read = zais.read(buffer, 0, 10);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetAndLength_UanT3() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1024];
    int read = zais.read(buffer, 5, 10);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadAfterClose_UbbA4() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.close();
    byte[] buffer = new byte[1024];
    int read = zais.read(buffer, 0, buffer.length);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNegativeOffset_RDua5() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1024];
    try {
        zais.read(buffer, -1, buffer.length);
        fail("Expected an IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNegativeLength_xGso6() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1024];
    try {
        zais.read(buffer, 0, -1);
        fail("Expected an IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetGreaterThanBufferLength_ecMp7() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1024];
    try {
        zais.read(buffer, buffer.length + 1, buffer.length);
        fail("Expected an IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithLengthGreaterThanBufferLength_BUkG8() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1024];
    try {
        zais.read(buffer, 0, buffer.length + 1);
        fail("Expected an IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryWithOneEntry_CCZA1() throws IOException {
    byte[] data = new byte[] {
        'a', 'b', 'c', 'd',
    };
    ZipArchiveInputStream zin = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    ZipArchiveEntry entry = zin.getNextZipEntry();
    Assertions.assertNotNull(entry);
    Assertions.assertEquals("abcd", entry.getName());
}
}