/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.deflate;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DeflateParameters_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompressionLevel_jzZH0() throws Exception {
        DeflateParameters deflateParameters = new DeflateParameters();
        int compressionLevel = deflateParameters.getCompressionLevel();
        System.out.println(compressionLevel);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWithZlibHeader_true_Mpvn0() throws Exception {
        DeflateParameters deflateParameters = new DeflateParameters();
        deflateParameters.setWithZlibHeader(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWithZlibHeader_false_lhsm1() throws Exception {
        DeflateParameters deflateParameters = new DeflateParameters();
        deflateParameters.setWithZlibHeader(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressionLevel_ValidInput_PlJP0() throws Exception {
        DeflateParameters deflateParameters = new DeflateParameters();
        int compressionLevel = 5;
        deflateParameters.setCompressionLevel(compressionLevel);
        assertEquals(compressionLevel, deflateParameters.getCompressionLevel());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressionLevel_InvalidInput_BelowMinimum_EOaJ1_1() throws Exception {
        DeflateParameters deflateParameters = new DeflateParameters();
        int compressionLevel = -1;
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,
            () -> deflateParameters.setCompressionLevel(compressionLevel));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressionLevel_InvalidInput_AboveMaximum_BeMQ2_1() throws Exception {
        DeflateParameters deflateParameters = new DeflateParameters();
        int compressionLevel = 10;
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,
            () -> deflateParameters.setCompressionLevel(compressionLevel));}
}