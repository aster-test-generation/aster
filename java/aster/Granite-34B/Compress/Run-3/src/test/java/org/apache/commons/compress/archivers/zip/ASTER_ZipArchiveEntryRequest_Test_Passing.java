/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.InputStream;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveEntryRequest_Test_Passing {
private ZipArchiveEntry zipArchiveEntry;
ZipArchiveEntryRequest ziparchiveentryrequest;
private InputStreamSupplier payloadSupplier;
private int method;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateZipArchiveEntryRequest_1() throws Exception{
        zipArchiveEntry = mock(ZipArchiveEntry.class);
        payloadSupplier = mock(InputStreamSupplier.class);
        ziparchiveentryrequest = ZipArchiveEntryRequest.createZipArchiveEntryRequest(zipArchiveEntry, payloadSupplier);
        InputStream payloadStream = ziparchiveentryrequest.getPayloadStream();
        int method = ziparchiveentryrequest.getMethod();
        assertEquals(payloadStream, payloadSupplier.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateZipArchiveEntryRequest_2() throws Exception{
        zipArchiveEntry = mock(ZipArchiveEntry.class);
        payloadSupplier = mock(InputStreamSupplier.class);
        ziparchiveentryrequest = ZipArchiveEntryRequest.createZipArchiveEntryRequest(zipArchiveEntry, payloadSupplier);
        InputStream payloadStream = ziparchiveentryrequest.getPayloadStream();
        int method = ziparchiveentryrequest.getMethod();
        assertEquals(method, zipArchiveEntry.getMethod());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMethod() throws Exception{
        ziparchiveentryrequest = mock(ZipArchiveEntryRequest.class);
        method = 1;
        when(ziparchiveentryrequest.getMethod()).thenReturn(method);
        int actualMethod = ziparchiveentryrequest.getMethod();
        assertEquals(method, actualMethod);
    }
}