/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void fileTypeTest1_udWE0() throws Exception {
		assertEquals(CpioConstants.S_IFMT, CpioUtil.fileType(CpioConstants.S_IFMT));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void fileTypeTest2_rboj1() throws Exception {
		assertEquals(0, CpioUtil.fileType(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long_wKsj0() throws Exception {
    byte[] number = new byte[0];
    boolean swapHalfWord = false;
    long expected = 0;
    long actual = CpioUtil.byteArray2long(number, swapHalfWord);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long1_NGQL1() throws Exception {
    byte[] number = new byte[2];
    boolean swapHalfWord = false;
    long expected = 0;
    long actual = CpioUtil.byteArray2long(number, swapHalfWord);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long2_DTNn2() throws Exception {
    byte[] number = new byte[2];
    boolean swapHalfWord = true;
    long expected = 0;
    long actual = CpioUtil.byteArray2long(number, swapHalfWord);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long3_bsNR3() throws Exception {
    byte[] number = new byte[4];
    boolean swapHalfWord = false;
    long expected = 0;
    long actual = CpioUtil.byteArray2long(number, swapHalfWord);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long4_KXyK4() throws Exception {
    byte[] number = new byte[4];
    boolean swapHalfWord = true;
    long expected = 0;
    long actual = CpioUtil.byteArray2long(number, swapHalfWord);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long5_PkXM5() throws Exception {
    byte[] number = new byte[6];
    boolean swapHalfWord = false;
    long expected = 0;
    long actual = CpioUtil.byteArray2long(number, swapHalfWord);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long6_BCLB6() throws Exception {
    byte[] number = new byte[6];
    boolean swapHalfWord = true;
    long expected = 0;
    long actual = CpioUtil.byteArray2long(number, swapHalfWord);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long7_Tqbu7() throws Exception {
    byte[] number = new byte[8];
    boolean swapHalfWord = false;
    long expected = 0;
    long actual = CpioUtil.byteArray2long(number, swapHalfWord);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long8_stfd8() throws Exception {
    byte[] number = new byte[8];
    boolean swapHalfWord = true;
    long expected = 0;
    long actual = CpioUtil.byteArray2long(number, swapHalfWord);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long9_LREF9() throws Exception {
    byte[] number = new byte[10];
    boolean swapHalfWord = false;
    long expected = 0;
    long actual = CpioUtil.byteArray2long(number, swapHalfWord);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testByteArray2long10_rfQU10() throws Exception {
    byte[] number = new byte[10];
    boolean swapHalfWord = true;
    long expected = 0;
    long actual = CpioUtil.byteArray2long(number, swapHalfWord);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLong2ByteArray_twDw0() throws Exception {
        long number = 0x1234567890ABCDEFL;
        int length = 8;
        boolean swapHalfWord = false;
        byte[] expected = {0x12, 0x34, 0x56, 0x78, (byte) 0x90, (byte) 0xAB, (byte) 0xCD, (byte) 0xEF};
        byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLong2ByteArrayWithSwapHalfWord_EMnG1() throws Exception {
        long number = 0x1234567890ABCDEFL;
        int length = 8;
        boolean swapHalfWord = true;
        byte[] expected = {(byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, 0x78, 0x56, 0x34, 0x12};
        byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLong2ByteArrayWithLength3_abyW2() throws Exception {
        long number = 0x1234567890ABCDEFL;
        int length = 3;
        boolean swapHalfWord = false;
        byte[] expected = {(byte) 0x90, (byte) 0xAB, (byte) 0xCD};
        byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLong2ByteArrayWithLength9_oukH3() throws Exception {
        long number = 0x1234567890ABCDEFL;
        int length = 9;
        boolean swapHalfWord = false;
        byte[] expected = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLong2ByteArrayWithLength1_YuPy4() throws Exception {
        long number = 0x1234567890ABCDEFL;
        int length = 1;
        boolean swapHalfWord = false;
        byte[] expected = {(byte) 0x90};
        byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLong2ByteArrayWithLength7_pozx5() throws Exception {
        long number = 0x1234567890ABCDEFL;
        int length = 7;
        boolean swapHalfWord = false;
        byte[] expected = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
        assertArrayEquals(expected, actual);
    }
}