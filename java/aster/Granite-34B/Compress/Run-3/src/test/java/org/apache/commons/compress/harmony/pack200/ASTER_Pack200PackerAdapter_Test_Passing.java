/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.IOException;
import java.util.jar.JarFile;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200PackerAdapter_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFirePropertyChange_Icyo0() throws IOException {
        Pack200PackerAdapter packerAdapter = new Pack200PackerAdapter();
        packerAdapter.firePropertyChange("propertyName", "oldValue", "newValue");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFirePropertyChangeWithNullnewValue_whRt1() throws IOException {
        Pack200PackerAdapter packerAdapter = new Pack200PackerAdapter();
        packerAdapter.firePropertyChange("propertyName", "oldValue", null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFirePropertyChangeWithEmptynewValue_BjZC2() throws IOException {
        Pack200PackerAdapter packerAdapter = new Pack200PackerAdapter();
        packerAdapter.firePropertyChange("propertyName", "oldValue", "");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullOutputStream_ESGb2() throws Exception {
        Pack200PackerAdapter adapter = new Pack200PackerAdapter();
        JarFile jarFile = new JarFile("input.jar");
        try {
            adapter.pack(jarFile, null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Must specify both input and output streams", e.getMessage());
        }
    }
}