/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPString_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getNestedClassFileEntries_GlTv0() throws Exception {
        CPUTF8 utf8 = new CPUTF8("test");
        CPString cpString = new CPString(utf8, 0);
        ClassFileEntry[] result = cpString.getNestedClassFileEntries();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getNestedClassFileEntries_coverage_ncEL1() throws Exception {
        CPUTF8 utf8 = new CPUTF8("test");
        CPString cpString = new CPString(utf8, 0);
        cpString.getNestedClassFileEntries();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testWriteBody_JRSB0() throws IOException {
        CPUTF8 utf8 = new CPUTF8("test");
        CPString cpString = new CPString(utf8, 0);
        DataOutputStream dos = new DataOutputStream(System.out);
        cpString.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_BxWh0() throws Exception {
        CPUTF8 utf8 = new CPUTF8("string");
        CPString cpString = new CPString(utf8, 0);
        int actual = cpString.hashCode();
        int expected = 0; // Replace with the expected hash code value
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_WJjn1() throws Exception {
        CPUTF8 utf8 = new CPUTF8("utf8", 0);
        CPString cpString = new CPString(utf8, 1);
        int actual = cpString.hashCode();
        int expected = 0; // Replace with the expected hash code value
        assert actual == expected;
    }
}