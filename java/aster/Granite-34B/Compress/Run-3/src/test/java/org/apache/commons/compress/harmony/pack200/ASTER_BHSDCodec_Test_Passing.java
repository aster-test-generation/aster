/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BHSDCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameObject_oqFc0() throws Exception {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertEquals(true, codec.equals(codec));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNullObject_wmin1() throws Exception {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertEquals(false, codec.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentObjectType_wrHa2() throws Exception {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertEquals(false, codec.equals(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameValues_BOtp3() throws Exception {
    BHSDCodec codec1 = new BHSDCodec(1, 2, 3, 4);
    BHSDCodec codec2 = new BHSDCodec(1, 2, 3, 4);
    assertEquals(true, codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentValues_LKrK4() throws Exception {
    BHSDCodec codec1 = new BHSDCodec(1, 2, 3, 4);
    BHSDCodec codec2 = new BHSDCodec(5, 6, 7, 8);
    assertEquals(false, codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentParameterOrder_baFI5() throws Exception {
    BHSDCodec codec1 = new BHSDCodec(1, 2, 3, 4);
    BHSDCodec codec2 = new BHSDCodec(1, 2, 4, 3);
    assertEquals(false, codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithAllZeroValues_FzTG6() throws Exception {
    BHSDCodec codec1 = new BHSDCodec(0, 0, 0, 0);
    BHSDCodec codec2 = new BHSDCodec(0, 0, 0, 0);
    assertEquals(true, codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithAllMaxValues_exmC7() throws Exception {
    BHSDCodec codec1 = new BHSDCodec(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
    BHSDCodec codec2 = new BHSDCodec(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
    assertEquals(true, codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLargest_XpVw0() throws Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 3, 4);
        long result = bHSDCodec.largest();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLargest2_PnMe1() throws Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 3);
        long result = bHSDCodec.largest();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLargest3_FdDj2() throws Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2);
        long result = bHSDCodec.largest();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSmallest_XubE0() throws Exception {
        BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
        long actual = codec.smallest();
        long expected = 0; // Replace with the expected value
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetB1_YKMd0() throws Exception {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 2);
        assertEquals(1, bhsdCodec.getB());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetB2_nwPd1() throws Exception {
        BHSDCodec bhsdCodec = new BHSDCodec(3, 4, 5, 6);
        assertEquals(3, bhsdCodec.getB());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetB3_aqQG2() throws Exception {
        BHSDCodec bhsdCodec = new BHSDCodec(7, 8, 9);
        assertEquals(7, bhsdCodec.getB());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetB4_DsLB3() throws Exception {
        BHSDCodec bhsdCodec = new BHSDCodec(10, 11);
        assertEquals(10, bhsdCodec.getB());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetB5_Xsdw4() throws Exception {
        BHSDCodec bhsdCodec = new BHSDCodec(12, 13, 14, 15);
        assertEquals(12, bhsdCodec.getB());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetB6_bYZJ5() throws Exception {
        BHSDCodec bhsdCodec = new BHSDCodec(16, 17, 18);
        assertEquals(16, bhsdCodec.getB());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetB7_ltoO6() throws Exception {
        BHSDCodec bhsdCodec = new BHSDCodec(19, 20);
        assertEquals(19, bhsdCodec.getB());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetB8_FgRF7() throws Exception {
        BHSDCodec bhsdCodec = new BHSDCodec(21, 22, 23, 24);
        assertEquals(21, bhsdCodec.getB());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetB9_ZkgQ8() throws Exception {
        BHSDCodec bhsdCodec = new BHSDCodec(25, 26, 27);
        assertEquals(25, bhsdCodec.getB());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetB10_EnGb9() throws Exception {
        BHSDCodec bhsdCodec = new BHSDCodec(28, 29);
        assertEquals(28, bhsdCodec.getB());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_b_h_urNT0() throws Exception {
        final BHSDCodec bHSDCodec = new BHSDCodec(1, 2);
        assertEquals("(1,2)", bHSDCodec.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_b_h_s_d_pkkf1() throws Exception {
        final BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 3, 4);
        assertEquals("(1,2,3,4)", bHSDCodec.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_b_h_s_sHVJ2() throws Exception {
        final BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 3);
        assertEquals("(1,2,3)", bHSDCodec.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_b_h_d_cgrV3() throws Exception {
        final BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 0, 4);
        assertEquals("(1,2,4)", bHSDCodec.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSignedWhenSIsNonZero_QwKZ0() throws Exception {
        BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
        boolean result = codec.isSigned();
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSignedWhenSIsZero_LpIv1() throws Exception {
        BHSDCodec codec = new BHSDCodec(1, 2, 0, 4);
        boolean result = codec.isSigned();
        assertEquals(false, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDeltaWhenDIsNonZero_wlrS0() throws Exception {
    BHSDCodec bhsdCodec = new BHSDCodec(1, 2, 3, 4);
    assertTrue(bhsdCodec.isDelta());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDeltaWhenDIsZero_pTVE1() throws Exception {
    BHSDCodec bhsdCodec = new BHSDCodec(1, 2, 3, 0);
    assertFalse(bhsdCodec.isDelta());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_LUMy0() throws Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(0, 0);
        assertEquals(0, bHSDCodec.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_KvVO1() throws Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(0, 0, 1, 1);
        assertEquals(10, bHSDCodec.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode3_ntez2() throws Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(0, 0, 1);
        assertEquals(7, bHSDCodec.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCardinality_eyhZ0_1() throws Exception {
        BHSDCodec codec1 = new BHSDCodec(1, 2);
        BHSDCodec codec2 = new BHSDCodec(3, 4, 5, 6);
        BHSDCodec codec3 = new BHSDCodec(7, 8, 9);
        assertEquals(10, codec1.cardinality());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCardinality_eyhZ0_2() throws Exception {
        BHSDCodec codec1 = new BHSDCodec(1, 2);
        BHSDCodec codec2 = new BHSDCodec(3, 4, 5, 6);
        BHSDCodec codec3 = new BHSDCodec(7, 8, 9);
        assertEquals(11, codec2.cardinality());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCardinality_eyhZ0_3() throws Exception {
        BHSDCodec codec1 = new BHSDCodec(1, 2);
        BHSDCodec codec2 = new BHSDCodec(3, 4, 5, 6);
        BHSDCodec codec3 = new BHSDCodec(7, 8, 9);
        assertEquals(12, codec3.cardinality());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodesWithValidValue_xuqC0() throws Exception {
        BHSDCodec codec = new BHSDCodec(10, 2);
        boolean result = codec.encodes(123);
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodesWithInvalidValue_nRZI1() throws Exception {
        BHSDCodec codec = new BHSDCodec(10, 2);
        boolean result = codec.encodes(1234);
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodesWithBoundaryValues_xJzh2() throws Exception {
        BHSDCodec codec = new BHSDCodec(10, 2);
        boolean result1 = codec.encodes(Long.MIN_VALUE);
        boolean result2 = codec.encodes(Long.MAX_VALUE);
        assert result1 && result2;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetS_Pztc0() throws Exception {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 2, 3, 4);
        assertEquals(3, bhsdCodec.getS());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSWithTwoParameterConstructor_YMmy2() throws Exception {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 2);
        assertEquals(0, bhsdCodec.getS());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ZbfR0() throws Exception {
        BHSDCodec codec = new BHSDCodec(1, 2);
        int value = 1;
        int last = 0;
        try {
            byte[] encoded = codec.encode(value, last);
            assertTrue(encoded.length == 1);
            assertTrue(encoded[0] == 1);
        } catch (Pack200Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithDelta_WZRZ1() throws Exception {
        BHSDCodec codec = new BHSDCodec(1, 2, 0, 1);
        int value = 1;
        int last = 0;
        try {
            byte[] encoded = codec.encode(value, last);
            assertTrue(encoded.length == 1);
            assertTrue(encoded[0] == 1);
        } catch (Pack200Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSigned_IOJy2() throws Exception {
        BHSDCodec codec = new BHSDCodec(1, 2, 1);
        int value = -1;
        int last = 0;
        try {
            byte[] encoded = codec.encode(value, last);
            assertTrue(encoded.length == 1);
            assertTrue(encoded[0] == 1);
        } catch (Pack200Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithException_UpVR3() throws Exception {
        BHSDCodec codec = new BHSDCodec(1, 2);
        int value = 3;
        int last = 0;
        try {
            codec.encode(value, last);
            fail("Expected Pack200Exception");
        } catch (Pack200Exception e) {
            assertTrue(e.getMessage().contains("does not encode the value"));
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithException2_mMDI4() throws Exception {
        BHSDCodec codec = new BHSDCodec(1, 2);
        int value = -1;
        int last = 0;
        try {
            codec.encode(value, last);
            fail("Expected Pack200Exception");
        } catch (Pack200Exception e) {
            assertTrue(e.getMessage().contains("unable to encode"));
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH_vfOb0() throws Exception {
    BHSDCodec bhsdCodec = new BHSDCodec(1, 2, 3, 4);
    int actual = bhsdCodec.getH();
    int expected = 2;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH2_DPQE1() throws Exception {
    BHSDCodec bhsdCodec = new BHSDCodec(1, 2);
    int actual = bhsdCodec.getH();
    int expected = 2;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH3_ocAI2() throws Exception {
    BHSDCodec bhsdCodec = new BHSDCodec(1, 2, 3);
    int actual = bhsdCodec.getH();
    int expected = 2;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_wryB0() throws Pack200Exception {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 2);
        byte[] expected = new byte[]{0, 0};
        assertArrayEquals(expected, bhsdCodec.encode(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_yYni1() throws Pack200Exception {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 2, 3, 4);
        byte[] expected = new byte[]{0, 0};
        assertArrayEquals(expected, bhsdCodec.encode(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_NcEF2() throws Pack200Exception {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 2, 3);
        byte[] expected = new byte[]{0, 0};
        assertArrayEquals(expected, bhsdCodec.encode(0));
    }
}