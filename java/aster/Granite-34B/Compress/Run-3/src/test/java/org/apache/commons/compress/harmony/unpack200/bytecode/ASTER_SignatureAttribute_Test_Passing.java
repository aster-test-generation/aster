/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SignatureAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_STRI0() throws Exception {
        CPUTF8 utf8 = new CPUTF8("utf8");
        SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
        String actual = signatureAttribute.toString();
        String expected = "Signature: " + utf8;
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithGlobalIndex_suFZ1() throws Exception {
        CPUTF8 utf8 = new CPUTF8("utf8", 10);
        SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
        String actual = signatureAttribute.toString();
        String expected = "Signature: " + utf8;
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullCPUTF8_GsmW2() throws Exception {
        CPUTF8 utf8 = null;
        SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
        String actual = signatureAttribute.toString();
        String expected = "Signature: null";
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyCPUTF8_etdI3() throws Exception {
        CPUTF8 utf8 = new CPUTF8("");
        SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
        String actual = signatureAttribute.toString();
        String expected = "Signature: " + utf8;
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNegativeGlobalIndex_MdOW4() throws Exception {
        CPUTF8 utf8 = new CPUTF8("utf8", -1);
        SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
        String actual = signatureAttribute.toString();
        String expected = "Signature: " + utf8;
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithZeroGlobalIndex_WSBc5() throws Exception {
        CPUTF8 utf8 = new CPUTF8("utf8", 0);
        SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
        String actual = signatureAttribute.toString();
        String expected = "Signature: " + utf8;
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithPositiveGlobalIndex_IGaa6() throws Exception {
        CPUTF8 utf8 = new CPUTF8("utf8", 1);
        SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
        String actual = signatureAttribute.toString();
        String expected = "Signature: " + utf8;
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithMaxIntGlobalIndex_LqVC7() throws Exception {
        CPUTF8 utf8 = new CPUTF8("utf8", Integer.MAX_VALUE);
        SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
        String actual = signatureAttribute.toString();
        String expected = "Signature: " + utf8;
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithMinIntGlobalIndex_rCVS8() throws Exception {
        CPUTF8 utf8 = new CPUTF8("utf8", Integer.MIN_VALUE);
        SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
        String actual = signatureAttribute.toString();
        String expected = "Signature: " + utf8;
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithRandomGlobalIndex_TEFp9() throws Exception {
        CPUTF8 utf8 = new CPUTF8("utf8", 12345);
        SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
        String actual = signatureAttribute.toString();
        String expected = "Signature: " + utf8;
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNestedClassFileEntries_sbWB0_1() throws Exception {
        CPUTF8 utf8 = new CPUTF8("utf8");
        SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
        ClassFileEntry[] nestedClassFileEntries = signatureAttribute.getNestedClassFileEntries();
        assertEquals(2, nestedClassFileEntries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNestedClassFileEntries_sbWB0_2() throws Exception {
        CPUTF8 utf8 = new CPUTF8("utf8");
        SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
        ClassFileEntry[] nestedClassFileEntries = signatureAttribute.getNestedClassFileEntries();
        assertEquals(utf8, nestedClassFileEntries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNestedClassFileEntries_sbWB0_3() throws Exception {
        CPUTF8 utf8 = new CPUTF8("utf8");
        SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
        ClassFileEntry[] nestedClassFileEntries = signatureAttribute.getNestedClassFileEntries();
        assertEquals(utf8, nestedClassFileEntries[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLengthTest_bNya0() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("string");
        SignatureAttribute signatureAttribute = new SignatureAttribute(cputf8);
        int length = signatureAttribute.getLength();
        assert length == 2;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLengthTest_coverage_2_mpCw2() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("utf8", 10);
        SignatureAttribute signatureAttribute = new SignatureAttribute(cputf8);
        int length = signatureAttribute.getLength();
        assert length == 2;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testWriteBody_Urww0() throws IOException {
        CPUTF8 utf8 = new CPUTF8("utf8");
        SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
        DataOutputStream dos = new DataOutputStream(System.out);
        signatureAttribute.writeBody(dos);
    }
}