/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeLayout_Test_Passing {
private String layout;
AttributeLayout attributelayout;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCallCount_rIMB0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        attributeLayout.setBackwardsCallCount(3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCallCountWithIsDefault_jjSd1() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2, true);
        attributeLayout.setBackwardsCallCount(3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches1_YwBt0() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
    boolean result = attributeLayout.matches(3L);
    assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches2_BXbh1() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2, true);
    boolean result = attributeLayout.matches(3L);
    assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLayout_bzFw0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        assertEquals("layout", attributeLayout.getLayout());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLayoutWithIsDefault_dtHa1() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 3, "layout", 4, true);
        assertEquals("layout", attributeLayout.getLayout());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDefaultLayoutTrue_Ukgx0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2, true);
        assertTrue(attributeLayout.isDefaultLayout());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDefaultLayoutFalse_KNmW1() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 3, "layout", 4, false);
        assertTrue(!attributeLayout.isDefaultLayout());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_dEKk0_1() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool pool = new SegmentConstantPool(bands);
        ClassFileEntry entry1 = pool.getValue(123, 456L);
        ClassFileEntry entry2 = pool.getValue(789, 987L);
        ClassFileEntry entry3 = pool.getValue(456, 123L);
        assertNotNull(entry1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_dEKk0_2() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool pool = new SegmentConstantPool(bands);
        ClassFileEntry entry1 = pool.getValue(123, 456L);
        ClassFileEntry entry2 = pool.getValue(789, 987L);
        ClassFileEntry entry3 = pool.getValue(456, 123L);
        assertNotNull(entry2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_dEKk0_3() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool pool = new SegmentConstantPool(bands);
        ClassFileEntry entry1 = pool.getValue(123, 456L);
        ClassFileEntry entry2 = pool.getValue(789, 987L);
        ClassFileEntry entry3 = pool.getValue(456, 123L);
        assertNotNull(entry3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_layoutIsStar_xmQy0() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "*", 2);
    int actual = attributeLayout.numBackwardsCallables();
    assertEquals(1, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_layoutIsNotStar_dYkq1() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
    int actual = attributeLayout.numBackwardsCallables();
    assertEquals(2, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Fiql0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        assertEquals("1: name", attributeLayout.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithIsDefault_AOIh1() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2, true);
        assertEquals("1: name", attributeLayout.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithAllFields_wImo0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        assertEquals(37 * (37 * (37 * (37 + "name".hashCode()) + "layout".hashCode()) + 2) + 1, attributeLayout.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithAllFieldsAndIsDefault_oVtM1() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2, true);
        assertEquals(37 * (37 * (37 * (37 * (37 + "name".hashCode()) + "layout".hashCode()) + 2) + 1) + 1, attributeLayout.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_arEM2() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout(null, 1, "layout", 2);
        assertEquals(37 * (37 * (37 + 0) + "layout".hashCode()) + 2, attributeLayout.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullLayout_QqwR3() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, null, 2);
        assertEquals(37 * (37 * (37 + "name".hashCode()) + 0) + 2, attributeLayout.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_RgzP0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        assertEquals("name", attributeLayout.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithIsDefault_nacn1() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 3, "layout", 4, true);
        assertEquals("name", attributeLayout.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContext_mbSp0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        assertEquals(1, attributeLayout.getContext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContextWithIsDefaultParam_nuNI1() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2, true);
        assertEquals(1, attributeLayout.getContext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIndex_SNDa0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        assertEquals(2, attributeLayout.getIndex());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIndexWithIsDefault_lvaa1() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 3, "layout", 4, true);
        assertEquals(4, attributeLayout.getIndex());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_AqjM0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
        ClassFileEntry entry = attributeLayout.getValue(100, pool);
        assertNotNull(entry);
    }
}