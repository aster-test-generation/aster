/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SourceFileAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_0_xYwB0() throws Exception {
    CPUTF8 name0 = new CPUTF8("UTF8");
    SourceFileAttribute sourceFileAttribute0 = new SourceFileAttribute(name0);
    CPUTF8 name1 = new CPUTF8("UTF8");
    SourceFileAttribute sourceFileAttribute1 = new SourceFileAttribute(name1);
    boolean result = sourceFileAttribute0.equals(sourceFileAttribute1);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNestedClassFileEntriesTest_NYdt0_1() throws Exception {
        CPUTF8 utf8 = new CPUTF8("UTF-8");
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(utf8);
        ClassFileEntry[] classFileEntries = sourceFileAttribute.getNestedClassFileEntries();
        assertEquals(2, classFileEntries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNestedClassFileEntriesTest_NYdt0_2() throws Exception {
        CPUTF8 utf8 = new CPUTF8("UTF-8");
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(utf8);
        ClassFileEntry[] classFileEntries = sourceFileAttribute.getNestedClassFileEntries();
        assertEquals(utf8, classFileEntries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNestedClassFileEntriesTest_NYdt0_3() throws Exception {
        CPUTF8 utf8 = new CPUTF8("UTF-8");
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(utf8);
        ClassFileEntry[] classFileEntries = sourceFileAttribute.getNestedClassFileEntries();
        assertEquals(utf8, classFileEntries[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPUTF8_String_inHt0() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("test");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPUTF8_String_int_lHNv1() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("test", 10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_nmFV2() throws Exception {
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(new CPUTF8("test"));
        int length = sourceFileAttribute.getLength();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSourceFileAttribute_INKF0() throws Exception {
        CPUTF8 utf8 = new CPUTF8("test");
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(utf8);
        boolean result = sourceFileAttribute.isSourceFileAttribute();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSourceFileAttributeWithGlobalIndex_cCRE1() throws Exception {
        CPUTF8 utf8 = new CPUTF8("test", 10);
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(utf8);
        boolean result = sourceFileAttribute.isSourceFileAttribute();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSourceFileAttribute_XqfP2() throws Exception {
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(null);
        boolean result = sourceFileAttribute.isSourceFileAttribute();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSourceFileAttributeWithInvalidName_bivX6() throws Exception {
        CPUTF8 utf8 = new CPUTF8("");
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(utf8);
        boolean result = sourceFileAttribute.isSourceFileAttribute();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSourceFileAttributeWithInvalidNameAndGlobalIndex_xwqP7() throws Exception {
        CPUTF8 utf8 = new CPUTF8("", 10);
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(utf8);
        boolean result = sourceFileAttribute.isSourceFileAttribute();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSourceFileAttributeWithNullNameAndGlobalIndex_iUfS8() throws Exception {
        CPUTF8 utf8 = new CPUTF8(null, 10);
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(utf8);
        boolean result = sourceFileAttribute.isSourceFileAttribute();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsSourceFileAttributeWithValidNameAndInvalidGlobalIndex_oJva10() throws Exception {
        CPUTF8 utf8 = new CPUTF8("test", -1);
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(utf8);
        boolean result = sourceFileAttribute.isSourceFileAttribute();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBody_ycDV0() throws IOException {
        CPUTF8 utf8 = new CPUTF8("UTF-8");
        SourceFileAttribute attribute = new SourceFileAttribute(utf8);
        DataOutputStream dos = new DataOutputStream(System.out);
        attribute.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAttributeName_WhenValidInput_SetsAttributeName_qUAl0() throws Exception {
        CPUTF8 cpUTF8Value = new CPUTF8("ValidName");
        SourceFileAttribute.setAttributeName(cpUTF8Value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAttributeName_WhenNullInput_SetsAttributeNameToNull_vxPn1() throws Exception {
        CPUTF8 cpUTF8Value = null;
        SourceFileAttribute.setAttributeName(cpUTF8Value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAttributeName_WhenEmptyInput_SetsAttributeNameToEmpty_OPUG2() throws Exception {
        CPUTF8 cpUTF8Value = new CPUTF8("");
        SourceFileAttribute.setAttributeName(cpUTF8Value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_pHpv0() throws Exception {
        CPUTF8 name = new CPUTF8("name");
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
        int actual = sourceFileAttribute.hashCode();
        int expected = 31 + (name == null ? 0 : name.hashCode());
        assert actual == expected;
    }
}