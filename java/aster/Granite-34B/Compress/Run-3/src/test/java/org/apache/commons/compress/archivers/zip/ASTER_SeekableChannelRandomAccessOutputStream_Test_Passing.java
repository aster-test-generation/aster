/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SeekableChannelRandomAccessOutputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteFully2_Wtik1_Gebp0() throws IOException {
    SeekableByteChannel channel = mock(SeekableByteChannel.class);
    SeekableChannelRandomAccessOutputStream stream = new SeekableChannelRandomAccessOutputStream(channel);
    byte[] b = new byte[10];
    int off = 0;
    int len = 10;
    long position = 0;
    stream.writeFully(b, off, len, position);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition_nRpK0_FYlJ0() throws IOException {
        SeekableChannelRandomAccessOutputStream stream = new SeekableChannelRandomAccessOutputStream(null);
        assertEquals(0, stream.position());
    }
}