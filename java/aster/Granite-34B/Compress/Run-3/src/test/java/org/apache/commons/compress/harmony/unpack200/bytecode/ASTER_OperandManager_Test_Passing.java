/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_OperandManager_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextCaseValues_NuWb0() throws Exception {
        int[] bcCaseCount = new int[10];
        int[] bcCaseValue = new int[10];
        int[] bcByte = new int[10];
        int[] bcShort = new int[10];
        int[] bcLocal = new int[10];
        int[] bcLabel = new int[10];
        int[] bcIntRef = new int[10];
        int[] bcFloatRef = new int[10];
        int[] bcLongRef = new int[10];
        int[] bcDoubleRef = new int[10];
        int[] bcStringRef = new int[10];
        int[] bcClassRef = new int[10];
        int[] bcFieldRef = new int[10];
        int[] bcMethodRef = new int[10];
        int[] bcIMethodRef = new int[10];
        int[] bcThisField = new int[10];
        int[] bcSuperField = new int[10];
        int[] bcThisMethod = new int[10];
        int[] bcSuperMethod = new int[10];
        int[] bcInitRef = new int[10];
        int[] wideByteCodes = new int[10];
        OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
        int result1 = operandManager.nextCaseValues();
        int result2 = operandManager.nextCaseValues();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisFieldRef_WHGm0() throws Exception {
    final int[] bcCaseCount = new int[0];
    final int[] bcCaseValue = new int[0];
    final int[] bcByte = new int[0];
    final int[] bcShort = new int[0];
    final int[] bcLocal = new int[0];
    final int[] bcLabel = new int[0];
    final int[] bcIntRef = new int[0];
    final int[] bcFloatRef = new int[0];
    final int[] bcLongRef = new int[0];
    final int[] bcDoubleRef = new int[0];
    final int[] bcStringRef = new int[0];
    final int[] bcClassRef = new int[0];
    final int[] bcFieldRef = new int[0];
    final int[] bcMethodRef = new int[0];
    final int[] bcIMethodRef = new int[0];
    final int[] bcThisField = new int[0];
    final int[] bcSuperField = new int[0];
    final int[] bcThisMethod = new int[0];
    final int[] bcSuperMethod = new int[0];
    final int[] bcInitRef = new int[0];
    final int[] wideByteCodes = new int[0];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextThisFieldRef();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextLocal_tFfy0() throws Exception {
        final int[] bcCaseCount = new int[10];
        final int[] bcCaseValue = new int[10];
        final int[] bcByte = new int[10];
        final int[] bcShort = new int[10];
        final int[] bcLocal = new int[10];
        final int[] bcLabel = new int[10];
        final int[] bcIntRef = new int[10];
        final int[] bcFloatRef = new int[10];
        final int[] bcLongRef = new int[10];
        final int[] bcDoubleRef = new int[10];
        final int[] bcStringRef = new int[10];
        final int[] bcClassRef = new int[10];
        final int[] bcFieldRef = new int[10];
        final int[] bcMethodRef = new int[10];
        final int[] bcIMethodRef = new int[10];
        final int[] bcThisField = new int[10];
        final int[] bcSuperField = new int[10];
        final int[] bcThisMethod = new int[10];
        final int[] bcSuperMethod = new int[10];
        final int[] bcInitRef = new int[10];
        final int[] wideByteCodes = new int[10];
        OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
        int expected = bcLocal[0];
        int actual = operandManager.nextLocal();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextCaseCount_SawL0_1() throws Exception {
        int[] bcCaseCount = {1, 2, 3};
        int[] bcCaseValue = {4, 5, 6};
        int[] bcByte = {7, 8, 9};
        int[] bcShort = {10, 11, 12};
        int[] bcLocal = {13, 14, 15};
        int[] bcLabel = {16, 17, 18};
        int[] bcIntRef = {19, 20, 21};
        int[] bcFloatRef = {22, 23, 24};
        int[] bcLongRef = {25, 26, 27};
        int[] bcDoubleRef = {28, 29, 30};
        int[] bcStringRef = {31, 32, 33};
        int[] bcClassRef = {34, 35, 36};
        int[] bcFieldRef = {37, 38, 39};
        int[] bcMethodRef = {40, 41, 42};
        int[] bcIMethodRef = {43, 44, 45};
        int[] bcThisField = {46, 47, 48};
        int[] bcSuperField = {49, 50, 51};
        int[] bcThisMethod = {52, 53, 54};
        int[] bcSuperMethod = {55, 56, 57};
        int[] bcInitRef = {58, 59, 60};
        int[] wideByteCodes = {61, 62, 63};
        OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
        assertEquals(1, operandManager.nextCaseCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextCaseCount_SawL0_2() throws Exception {
        int[] bcCaseCount = {1, 2, 3};
        int[] bcCaseValue = {4, 5, 6};
        int[] bcByte = {7, 8, 9};
        int[] bcShort = {10, 11, 12};
        int[] bcLocal = {13, 14, 15};
        int[] bcLabel = {16, 17, 18};
        int[] bcIntRef = {19, 20, 21};
        int[] bcFloatRef = {22, 23, 24};
        int[] bcLongRef = {25, 26, 27};
        int[] bcDoubleRef = {28, 29, 30};
        int[] bcStringRef = {31, 32, 33};
        int[] bcClassRef = {34, 35, 36};
        int[] bcFieldRef = {37, 38, 39};
        int[] bcMethodRef = {40, 41, 42};
        int[] bcIMethodRef = {43, 44, 45};
        int[] bcThisField = {46, 47, 48};
        int[] bcSuperField = {49, 50, 51};
        int[] bcThisMethod = {52, 53, 54};
        int[] bcSuperMethod = {55, 56, 57};
        int[] bcInitRef = {58, 59, 60};
        int[] wideByteCodes = {61, 62, 63};
        OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
        assertEquals(2, operandManager.nextCaseCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextCaseCount_SawL0_3() throws Exception {
        int[] bcCaseCount = {1, 2, 3};
        int[] bcCaseValue = {4, 5, 6};
        int[] bcByte = {7, 8, 9};
        int[] bcShort = {10, 11, 12};
        int[] bcLocal = {13, 14, 15};
        int[] bcLabel = {16, 17, 18};
        int[] bcIntRef = {19, 20, 21};
        int[] bcFloatRef = {22, 23, 24};
        int[] bcLongRef = {25, 26, 27};
        int[] bcDoubleRef = {28, 29, 30};
        int[] bcStringRef = {31, 32, 33};
        int[] bcClassRef = {34, 35, 36};
        int[] bcFieldRef = {37, 38, 39};
        int[] bcMethodRef = {40, 41, 42};
        int[] bcIMethodRef = {43, 44, 45};
        int[] bcThisField = {46, 47, 48};
        int[] bcSuperField = {49, 50, 51};
        int[] bcThisMethod = {52, 53, 54};
        int[] bcSuperMethod = {55, 56, 57};
        int[] bcInitRef = {58, 59, 60};
        int[] wideByteCodes = {61, 62, 63};
        OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
        assertEquals(3, operandManager.nextCaseCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSuperFieldRef_jXEc0() throws Exception {
        int[] bcCaseCount = new int[0];
        int[] bcCaseValue = new int[0];
        int[] bcByte = new int[0];
        int[] bcShort = new int[0];
        int[] bcLocal = new int[0];
        int[] bcLabel = new int[0];
        int[] bcIntRef = new int[0];
        int[] bcFloatRef = new int[0];
        int[] bcLongRef = new int[0];
        int[] bcDoubleRef = new int[0];
        int[] bcStringRef = new int[0];
        int[] bcClassRef = new int[0];
        int[] bcFieldRef = new int[0];
        int[] bcMethodRef = new int[0];
        int[] bcIMethodRef = new int[0];
        int[] bcThisField = new int[0];
        int[] bcSuperField = new int[0];
        int[] bcThisMethod = new int[0];
        int[] bcSuperMethod = new int[0];
        int[] bcInitRef = new int[0];
        int[] wideByteCodes = new int[0];
        OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
        int result = operandManager.nextSuperFieldRef();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCurrentClass_YsxU0() throws Exception {
        final int[] bcCaseCount = new int[0];
        final int[] bcCaseValue = new int[0];
        final int[] bcByte = new int[0];
        final int[] bcShort = new int[0];
        final int[] bcLocal = new int[0];
        final int[] bcLabel = new int[0];
        final int[] bcIntRef = new int[0];
        final int[] bcFloatRef = new int[0];
        final int[] bcLongRef = new int[0];
        final int[] bcDoubleRef = new int[0];
        final int[] bcStringRef = new int[0];
        final int[] bcClassRef = new int[0];
        final int[] bcFieldRef = new int[0];
        final int[] bcMethodRef = new int[0];
        final int[] bcIMethodRef = new int[0];
        final int[] bcThisField = new int[0];
        final int[] bcSuperField = new int[0];
        final int[] bcThisMethod = new int[0];
        final int[] bcSuperMethod = new int[0];
        final int[] bcInitRef = new int[0];
        final int[] wideByteCodes = new int[0];
        OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
        operandManager.setCurrentClass("test");
        assertEquals("test", operandManager.getCurrentClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextWideByteCode_xyMs0_1() throws Exception {
        final int[] bcCaseCount = {};
        final int[] bcCaseValue = {};
        final int[] bcByte = {};
        final int[] bcShort = {};
        final int[] bcLocal = {};
        final int[] bcLabel = {};
        final int[] bcIntRef = {};
        final int[] bcFloatRef = {};
        final int[] bcLongRef = {};
        final int[] bcDoubleRef = {};
        final int[] bcStringRef = {};
        final int[] bcClassRef = {};
        final int[] bcFieldRef = {};
        final int[] bcMethodRef = {};
        final int[] bcIMethodRef = {};
        final int[] bcThisField = {};
        final int[] bcSuperField = {};
        final int[] bcThisMethod = {};
        final int[] bcSuperMethod = {};
        final int[] bcInitRef = {};
        final int[] wideByteCodes = {1, 2, 3};
        OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
        assertEquals(1, operandManager.nextWideByteCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextWideByteCode_xyMs0_2() throws Exception {
        final int[] bcCaseCount = {};
        final int[] bcCaseValue = {};
        final int[] bcByte = {};
        final int[] bcShort = {};
        final int[] bcLocal = {};
        final int[] bcLabel = {};
        final int[] bcIntRef = {};
        final int[] bcFloatRef = {};
        final int[] bcLongRef = {};
        final int[] bcDoubleRef = {};
        final int[] bcStringRef = {};
        final int[] bcClassRef = {};
        final int[] bcFieldRef = {};
        final int[] bcMethodRef = {};
        final int[] bcIMethodRef = {};
        final int[] bcThisField = {};
        final int[] bcSuperField = {};
        final int[] bcThisMethod = {};
        final int[] bcSuperMethod = {};
        final int[] bcInitRef = {};
        final int[] wideByteCodes = {1, 2, 3};
        OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
        assertEquals(2, operandManager.nextWideByteCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextWideByteCode_xyMs0_3() throws Exception {
        final int[] bcCaseCount = {};
        final int[] bcCaseValue = {};
        final int[] bcByte = {};
        final int[] bcShort = {};
        final int[] bcLocal = {};
        final int[] bcLabel = {};
        final int[] bcIntRef = {};
        final int[] bcFloatRef = {};
        final int[] bcLongRef = {};
        final int[] bcDoubleRef = {};
        final int[] bcStringRef = {};
        final int[] bcClassRef = {};
        final int[] bcFieldRef = {};
        final int[] bcMethodRef = {};
        final int[] bcIMethodRef = {};
        final int[] bcThisField = {};
        final int[] bcSuperField = {};
        final int[] bcThisMethod = {};
        final int[] bcSuperMethod = {};
        final int[] bcInitRef = {};
        final int[] wideByteCodes = {1, 2, 3};
        OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
        assertEquals(3, operandManager.nextWideByteCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNewClass_lclc0() throws Exception {
    final int[] bcCaseCount = new int[0];
    final int[] bcCaseValue = new int[0];
    final int[] bcByte = new int[0];
    final int[] bcShort = new int[0];
    final int[] bcLocal = new int[0];
    final int[] bcLabel = new int[0];
    final int[] bcIntRef = new int[0];
    final int[] bcFloatRef = new int[0];
    final int[] bcLongRef = new int[0];
    final int[] bcDoubleRef = new int[0];
    final int[] bcStringRef = new int[0];
    final int[] bcClassRef = new int[0];
    final int[] bcFieldRef = new int[0];
    final int[] bcMethodRef = new int[0];
    final int[] bcIMethodRef = new int[0];
    final int[] bcThisField = new int[0];
    final int[] bcSuperField = new int[0];
    final int[] bcThisMethod = new int[0];
    final int[] bcSuperMethod = new int[0];
    final int[] bcInitRef = new int[0];
    final int[] wideByteCodes = new int[0];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    operandManager.setNewClass("NewClass");
    assertEquals("NewClass", operandManager.newClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextDoubleRefCoverage_fUkI1() throws Exception {
    final int[] bcCaseCount = new int[10];
    final int[] bcCaseValue = new int[10];
    final int[] bcByte = new int[10];
    final int[] bcShort = new int[10];
    final int[] bcLocal = new int[10];
    final int[] bcLabel = new int[10];
    final int[] bcIntRef = new int[10];
    final int[] bcFloatRef = new int[10];
    final int[] bcLongRef = new int[10];
    final int[] bcDoubleRef = new int[10];
    final int[] bcStringRef = new int[10];
    final int[] bcClassRef = new int[10];
    final int[] bcFieldRef = new int[10];
    final int[] bcMethodRef = new int[10];
    final int[] bcIMethodRef = new int[10];
    final int[] bcThisField = new int[10];
    final int[] bcSuperField = new int[10];
    final int[] bcThisMethod = new int[10];
    final int[] bcSuperMethod = new int[10];
    final int[] bcInitRef = new int[10];
    final int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    operandManager.nextDoubleRef();
    operandManager.nextDoubleRef();
    operandManager.nextDoubleRef();
    operandManager.nextDoubleRef();
    operandManager.nextDoubleRef();
    operandManager.nextDoubleRef();
    operandManager.nextDoubleRef();
    operandManager.nextDoubleRef();
    operandManager.nextDoubleRef();
    operandManager.nextDoubleRef();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextClassRef_lbmZ0() throws Exception {
        int[] bcCaseCount = new int[10];
        int[] bcCaseValue = new int[10];
        int[] bcByte = new int[10];
        int[] bcShort = new int[10];
        int[] bcLocal = new int[10];
        int[] bcLabel = new int[10];
        int[] bcIntRef = new int[10];
        int[] bcFloatRef = new int[10];
        int[] bcLongRef = new int[10];
        int[] bcDoubleRef = new int[10];
        int[] bcStringRef = new int[10];
        int[] bcClassRef = new int[10];
        int[] bcFieldRef = new int[10];
        int[] bcMethodRef = new int[10];
        int[] bcIMethodRef = new int[10];
        int[] bcThisField = new int[10];
        int[] bcSuperField = new int[10];
        int[] bcThisMethod = new int[10];
        int[] bcSuperMethod = new int[10];
        int[] bcInitRef = new int[10];
        int[] wideByteCodes = new int[10];
        OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
        int result = operandManager.nextClassRef();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextLongRef_PiTg0() throws Exception {
        int[] bcCaseCount = new int[10];
        int[] bcCaseValue = new int[10];
        int[] bcByte = new int[10];
        int[] bcShort = new int[10];
        int[] bcLocal = new int[10];
        int[] bcLabel = new int[10];
        int[] bcIntRef = new int[10];
        int[] bcFloatRef = new int[10];
        int[] bcLongRef = new int[10];
        int[] bcDoubleRef = new int[10];
        int[] bcStringRef = new int[10];
        int[] bcClassRef = new int[10];
        int[] bcFieldRef = new int[10];
        int[] bcMethodRef = new int[10];
        int[] bcIMethodRef = new int[10];
        int[] bcThisField = new int[10];
        int[] bcSuperField = new int[10];
        int[] bcThisMethod = new int[10];
        int[] bcSuperMethod = new int[10];
        int[] bcInitRef = new int[10];
        int[] wideByteCodes = new int[10];
        OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
        int expected = bcLongRef[0];
        int actual = operandManager.nextLongRef();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextIMethodRef_MdlV0() throws Exception {
        final int[] bcCaseCount = new int[10];
        final int[] bcCaseValue = new int[10];
        final int[] bcByte = new int[10];
        final int[] bcShort = new int[10];
        final int[] bcLocal = new int[10];
        final int[] bcLabel = new int[10];
        final int[] bcIntRef = new int[10];
        final int[] bcFloatRef = new int[10];
        final int[] bcLongRef = new int[10];
        final int[] bcDoubleRef = new int[10];
        final int[] bcStringRef = new int[10];
        final int[] bcClassRef = new int[10];
        final int[] bcFieldRef = new int[10];
        final int[] bcMethodRef = new int[10];
        final int[] bcIMethodRef = new int[10];
        final int[] bcThisField = new int[10];
        final int[] bcSuperField = new int[10];
        final int[] bcThisMethod = new int[10];
        final int[] bcSuperMethod = new int[10];
        final int[] bcInitRef = new int[10];
        final int[] wideByteCodes = new int[10];
        OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
        int result = operandManager.nextIMethodRef();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSuperMethodRef_pJjN0() throws Exception {
        int[] bcCaseCount = new int[10];
        int[] bcCaseValue = new int[10];
        int[] bcByte = new int[10];
        int[] bcShort = new int[10];
        int[] bcLocal = new int[10];
        int[] bcLabel = new int[10];
        int[] bcIntRef = new int[10];
        int[] bcFloatRef = new int[10];
        int[] bcLongRef = new int[10];
        int[] bcDoubleRef = new int[10];
        int[] bcStringRef = new int[10];
        int[] bcClassRef = new int[10];
        int[] bcFieldRef = new int[10];
        int[] bcMethodRef = new int[10];
        int[] bcIMethodRef = new int[10];
        int[] bcThisField = new int[10];
        int[] bcSuperField = new int[10];
        int[] bcThisMethod = new int[10];
        int[] bcSuperMethod = new int[10];
        int[] bcInitRef = new int[10];
        int[] wideByteCodes = new int[10];
        OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
        int result = operandManager.nextSuperMethodRef();
        assertEquals(0, result);
    }
}