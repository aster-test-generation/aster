/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMA2Decoder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionsAsPropertiesTest_dictSize1_HEZR1() throws Exception {
        LZMA2Decoder lzma2Decoder = new LZMA2Decoder();
        Object opts = new Object(); // Initialize opts with dictSize = 1
        byte[] expected = { (byte) ((19 - 0) * 2 + 0) };
        byte[] actual = lzma2Decoder.getOptionsAsProperties(opts);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionsAsPropertiesTest_dictSize2_yeFC2() throws Exception {
        LZMA2Decoder lzma2Decoder = new LZMA2Decoder();
        Object opts = new Object(); // Initialize opts with dictSize = 2
        byte[] expected = { (byte) ((19 - 1) * 2 + 0) };
        byte[] actual = lzma2Decoder.getOptionsAsProperties(opts);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionsAsPropertiesTest_dictSize1_afmt5() throws Exception {
        LZMA2Decoder lzma2Decoder = new LZMA2Decoder();
        Object opts = new Object(); // Initialize opts with dictSize = 1
        byte[] expected = { (byte) ((19 - 0) * 2 + 1) };
        byte[] actual = lzma2Decoder.getOptionsAsProperties(opts);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionsAsPropertiesTest_dictSize2_zWQM6() throws Exception {
        LZMA2Decoder lzma2Decoder = new LZMA2Decoder();
        Object opts = new Object(); // Initialize opts with dictSize = 2
        byte[] expected = { (byte) ((19 - 0) * 2 + 1) };
        byte[] actual = lzma2Decoder.getOptionsAsProperties(opts);
        assertArrayEquals(expected, actual);
    }
}