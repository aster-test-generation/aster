/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMAUtils_Test_Passing {
	{
	}
	{
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchesWithLengthShorterThanHeaderMagic_uUAR0() throws Exception {
		byte[] signature = new byte[10];
		int length = 9;
		boolean result =LZMAUtils.matches(signature, length);
		assertTrue(!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchesWithLengthEqualThanHeaderMagic_ZDEO1() throws Exception {
		byte[] signature = new byte[10];
		int length = 10;
		boolean result =LZMAUtils.matches(signature, length);
		assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchesWithLengthLongerThanHeaderMagic_PlJC2() throws Exception {
		byte[] signature = new byte[10];
		int length = 11;
		boolean result =LZMAUtils.matches(signature, length);
		assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchesWithSignatureHavingDifferentValuesThanHeaderMagic_PZKP3() throws Exception {
		byte[] signature = new byte[10];
		for (int i = 0; i < signature.length; i++) {
			signature[i] = (byte) (i + 1);
		}
		int length = 10;
		boolean result =LZMAUtils.matches(signature, length);
		assertTrue(!result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUncompressedFilename_HVbf0() throws Exception {
		assertEquals("test.txt",LZMAUtils.getUncompressedFilename("test.txt.lzma"));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUncompressedFilenameWithPath_PpTq1() throws Exception {
		assertEquals("path/test.txt",LZMAUtils.getUncompressedFilename("path/test.txt.lzma"));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUncompressedFilenameWithNoLZMAExtension_leFp2() throws Exception {
		assertEquals("test.txt",LZMAUtils.getUncompressedFilename("test.txt"));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUncompressedFilenameWithNoExtension_ELfy3() throws Exception {
		assertEquals("test",LZMAUtils.getUncompressedFilename("test"));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUncompressedFilenameWithNullInput_tAFk4() throws Exception {
		assertEquals(null,LZMAUtils.getUncompressedFilename(null));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUncompressedFilenameWithEmptyInput_btkU5() throws Exception {
		assertEquals("",LZMAUtils.getUncompressedFilename(""));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsCompressedFilename17_eRzQ17() throws Exception {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getCompressedFilename_withValidFileName_laLB0() throws Exception {
		assertEquals("compressed_file.txt",LZMAUtils.getCompressedFilename("file.txt"));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getCompressedFilename_withEmptyFileName_idiV2() throws Exception {
		assertEquals("compressed_.txt",LZMAUtils.getCompressedFilename(""));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getCompressedFilename_withNullFileName_grRK3() throws Exception {
		assertEquals("compressed_.txt",LZMAUtils.getCompressedFilename(null));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUncompressedFileName_sfIu0() throws Exception {
		String fileName = "test.lzma";
		String expected = "test";
		String actual = LZMAUtils.getUncompressedFileName(fileName);
		Assertions.assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUncompressedFileNameWithNoCompression_fArd1() throws Exception {
		String fileName = "test.txt";
		String expected = "test.txt";
		String actual = LZMAUtils.getUncompressedFileName(fileName);
		Assertions.assertEquals(expected, actual);
	}
}