/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.File;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Files;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.zip.CRC32;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZOutputFile_Test_Passing {
private SeekableByteChannel channel;
private boolean finished;
private CRC32 crc32 = new CRC32();
SevenZOutputFile sevenzoutputfile;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetContentCompressionBCJARMMThumbFilter_niuD11() throws Exception {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        SevenZMethod method = SevenZMethod.BCJ_ARM_THUMB_FILTER;
        sevenZOutputFile.setContentCompression(method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithByteArray_NIWz0() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        byte[] data = "Hello, World!".getBytes();
        sevenZOutputFile.write(data, 0, data.length);
        sevenZOutputFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithFileAndPassword_yxOU3() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
        byte[] data = "Hello, World!".getBytes();
        sevenZOutputFile.write(data, 0, data.length);
        sevenZOutputFile.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinish_jiZj0() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), new char[0]);
        sevenZOutputFile.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_rkCp0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    sevenZOutputFile.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithNullPassword_RAGP2() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), null);
        sevenZOutputFile.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithException_MviV2() throws Exception {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
        sevenZOutputFile.finish();
        try {
            sevenZOutputFile.finish();
            fail("Expected IOException");
        } catch (IOException e) {
            assertEquals("This archive has already been finished", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void finish_with_null_password_should_throw_exception_lQxQ1() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), null);
        IOException exception = assertThrows(IOException.class, sevenZOutputFile::finish);
        String expectedMessage = "password cannot be null";
        String actualMessage = exception.getMessage();
        assert actualMessage != null;
        assert actualMessage.contains(expectedMessage);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void finish_with_null_channel_should_throw_exception_qnru2() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile((SeekableByteChannel) null);
        IOException exception = assertThrows(IOException.class, sevenZOutputFile::finish);
        String expectedMessage = "channel cannot be null";
        String actualMessage = exception.getMessage();
        assert actualMessage != null;
        assert actualMessage.contains(expectedMessage);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void finish_with_null_password_and_null_channel_should_throw_exception_Ijvy3() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile((SeekableByteChannel) null, null);
        IOException exception = assertThrows(IOException.class, sevenZOutputFile::finish);
        String expectedMessage = "password cannot be null";
        String actualMessage = exception.getMessage();
        assert actualMessage != null;
        assert actualMessage.contains(expectedMessage);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_kPqX0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
    sevenZOutputFile.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithPassword_lcZi1() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
    sevenZOutputFile.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveEntry_rSbT0_1() throws IOException {
        File inputFile = new File("test.txt");
        String entryName = "test.txt";
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(inputFile, entryName);
        assertEquals(entry.getName(), entryName);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveEntry_rSbT0_2() throws IOException {
        File inputFile = new File("test.txt");
        String entryName = "test.txt";
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(inputFile, entryName);
        assertEquals(entry.getLastModifiedTime(), Files.readAttributes(inputFile.toPath(), BasicFileAttributes.class).lastModifiedTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testclose() throws Exception{
        channel = mock(SeekableByteChannel.class);
        finished = false;
        sevenzoutputfile = new SevenZOutputFile(channel);
        sevenzoutputfile.close();
        verify(channel, times(1)).close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_oxFR0() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        sevenZOutputFile.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithPassword_FHvT1() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
        sevenZOutputFile.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntryWithFileAndPassword_TgZe0() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
        sevenZOutputFile.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntryWithFile_hQuf7() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        sevenZOutputFile.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntryWithFileAndPasswordForLineCoverage_FAYt8() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
        sevenZOutputFile.closeArchiveEntry();
        sevenZOutputFile.closeArchiveEntry();
        sevenZOutputFile.closeArchiveEntry();
        sevenZOutputFile.closeArchiveEntry();
        sevenZOutputFile.closeArchiveEntry();
        sevenZOutputFile.closeArchiveEntry();
        sevenZOutputFile.closeArchiveEntry();
        sevenZOutputFile.closeArchiveEntry();
        sevenZOutputFile.closeArchiveEntry();
        sevenZOutputFile.closeArchiveEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveEntry_rSbT0() throws IOException {
        File inputFile = new File("test.txt");
        String entryName = "test.txt";
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(inputFile, entryName);
        assertEquals(entry.getName(), entryName);
        assertEquals(entry.getLastModifiedTime(), Files.readAttributes(inputFile.toPath(), BasicFileAttributes.class).lastModifiedTime());
    }
}