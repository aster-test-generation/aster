/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AnnotationDefaultAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAttributeNameWithDuplicateValue_tJKy3_3() throws Exception {
        CPUTF8 cpUTF8Value1 = new CPUTF8("Test");
        CPUTF8 cpUTF8Value2 = new CPUTF8("Test");
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value1);
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value2);
        assertEquals(cpUTF8Value1.hashCode(), cpUTF8Value2.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAttributeNameWithDuplicateValue_tJKy3_4() throws Exception {
        CPUTF8 cpUTF8Value1 = new CPUTF8("Test");
        CPUTF8 cpUTF8Value2 = new CPUTF8("Test");
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value1);
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value2);
        assertEquals(cpUTF8Value1.toString(), cpUTF8Value2.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAttributeNameWithDuplicateValue_tJKy3_5() throws Exception {
        CPUTF8 cpUTF8Value1 = new CPUTF8("Test");
        CPUTF8 cpUTF8Value2 = new CPUTF8("Test");
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value1);
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value2);
        assertEquals(cpUTF8Value1.underlyingString(), cpUTF8Value2.underlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAttributeNameWithDuplicateValue_tJKy3_6() throws Exception {
        CPUTF8 cpUTF8Value1 = new CPUTF8("Test");
        CPUTF8 cpUTF8Value2 = new CPUTF8("Test");
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value1);
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value2);
        assertEquals(cpUTF8Value1.equals(cpUTF8Value2), cpUTF8Value2.equals(cpUTF8Value1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAttributeNameWithDifferentValue_PLuD4_3() throws Exception {
        CPUTF8 cpUTF8Value1 = new CPUTF8("Test1");
        CPUTF8 cpUTF8Value2 = new CPUTF8("Test2");
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value1);
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value2);
        assertNotEquals(cpUTF8Value1.hashCode(), cpUTF8Value2.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAttributeNameWithDifferentValue_PLuD4_4() throws Exception {
        CPUTF8 cpUTF8Value1 = new CPUTF8("Test1");
        CPUTF8 cpUTF8Value2 = new CPUTF8("Test2");
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value1);
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value2);
        assertNotEquals(cpUTF8Value1.toString(), cpUTF8Value2.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAttributeNameWithDifferentValue_PLuD4_5() throws Exception {
        CPUTF8 cpUTF8Value1 = new CPUTF8("Test1");
        CPUTF8 cpUTF8Value2 = new CPUTF8("Test2");
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value1);
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value2);
        assertNotEquals(cpUTF8Value1.underlyingString(), cpUTF8Value2.underlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAttributeNameWithDifferentValue_PLuD4_6() throws Exception {
        CPUTF8 cpUTF8Value1 = new CPUTF8("Test1");
        CPUTF8 cpUTF8Value2 = new CPUTF8("Test2");
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value1);
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value2);
        assertNotEquals(cpUTF8Value1.equals(cpUTF8Value2), cpUTF8Value2.equals(cpUTF8Value1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAttributeNameWithGlobalIndex_mTdK5() throws Exception {
        CPUTF8 cpUTF8Value = new CPUTF8("Test", 1);
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value);
        assertEquals(1, cpUTF8Value.getGlobalIndex());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAttributeNameWithNullGlobalIndex_oiGI6() throws Exception {
        CPUTF8 cpUTF8Value = new CPUTF8("Test");
        AnnotationDefaultAttribute.setAttributeName(cpUTF8Value);
        assertEquals(-1, cpUTF8Value.getGlobalIndex());
    }
}