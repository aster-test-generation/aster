/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.xz;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XZUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureAndLength_ihKl0() throws Exception {
    byte[] signature = new byte[] {0x58, 0x5a, 0x00, 0x00};
    int length = 4;
    boolean expected = true;
    boolean actual = XZUtils.matches(signature, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureAndLengthWhenLengthIsLessThanHeaderMagicLength_RLYp1() throws Exception {
    byte[] signature = new byte[] {0x58, 0x5a, 0x00, 0x00};
    int length = 3;
    boolean expected = false;
    boolean actual = XZUtils.matches(signature, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithSignatureAndLengthWhenSignatureAndHeaderMagicAreNotMatching_YCHk2() throws Exception {
    byte[] signature = new byte[] {0x58, 0x5a, 0x00, 0x01};
    int length = 4;
    boolean expected = false;
    boolean actual = XZUtils.matches(signature, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilename_FSnD0() throws Exception {
    String fileName = "test.tar.xz";
    String expected = "test.tar";
    String actual = XZUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithNoXZSuffix_LvOQ1() throws Exception {
    String fileName = "test.tar";
    String expected = "test.tar";
    String actual = XZUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithEmptyFileName_gFzd2() throws Exception {
    String fileName = "";
    String expected = "";
    String actual = XZUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithNullFileName_aFwr3() throws Exception {
    String fileName = null;
    String expected = null;
    String actual = XZUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithInvalidFileName_EBJy4() throws Exception {
    String fileName = "test.tar.gz";
    String expected = null;
    String actual = XZUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithMultipleXZSuffix_XUgw5() throws Exception {
    String fileName = "test.tar.xz.zip";
    String expected = null;
    String actual = XZUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getCompressedFilename_withValidFileName_tPvO0() throws Exception {
		String fileName = "test.txt";
		String expected = "test.txt.xz";
		String actual = XZUtils.getCompressedFilename(fileName);
		assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getCompressedFilename_withInvalidFileName_eiNB1() throws Exception {
		String fileName = "test";
		String expected = "test.xz";
		String actual = XZUtils.getCompressedFilename(fileName);
		assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getCompressedFilename_withEmptyFileName_Cqpj2() throws Exception {
		String fileName = "";
		String expected = ".xz";
		String actual = XZUtils.getCompressedFilename(fileName);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUncompressedFileName_QiXV0() throws Exception {
    String fileName = "example.xz";
    String expected = "example";
    String actual =XZUtils.getUncompressedFileName(fileName);
    Assertions.assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUncompressedFileNameWithNoCompression_pDMo1() throws Exception {
    String fileName = "example.txt";
    String expected = "example.txt";
    String actual =XZUtils.getUncompressedFileName(fileName);
    Assertions.assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUncompressedFileNameWithInvalidExtension_dMRR2() throws Exception {
    String fileName = "example.zip";
    String expected = "example.zip";
    String actual =XZUtils.getUncompressedFileName(fileName);
    Assertions.assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUncompressedFileNameWithNoExtension_oHJA3() throws Exception {
    String fileName = "example";
    String expected = "example";
    String actual =XZUtils.getUncompressedFileName(fileName);
    Assertions.assertEquals(expected, actual);
}
}