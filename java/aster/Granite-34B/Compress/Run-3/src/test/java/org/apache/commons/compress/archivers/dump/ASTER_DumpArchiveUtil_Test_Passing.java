/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.io.IOException;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCalculateChecksum_LHlv0() {
        byte[] buffer = new byte[1024]; // assuming buffer size is 1024
        int expectedChecksum = 12345; // replace with actual expected checksum
        int actualChecksum = DumpArchiveUtil.calculateChecksum(buffer);
        assertEquals(expectedChecksum, actualChecksum);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCalculateChecksumWithEmptyBuffer_xiRq1() {
        byte[] buffer = new byte[0];
        int expectedChecksum = 0;
        int actualChecksum = DumpArchiveUtil.calculateChecksum(buffer);
        assertEquals(expectedChecksum, actualChecksum);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert64_tyfd0() {
        byte[] buffer = new byte[8];
        int offset = 0;
        long expected = ByteUtils.fromLittleEndian(buffer, offset, 8);
        long actual = DumpArchiveUtil.convert64(buffer, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetIno14_IGgI13() {
		byte[] buffer = new byte[100];
		int result = DumpArchiveUtil.getIno(buffer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testConvert16_lBmC0() {
		byte[] buffer = new byte[2];
		int offset = 0;
		int expected = (int) ByteUtils.fromLittleEndian(buffer, offset, 2);
		int actual = DumpArchiveUtil.convert16(buffer, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testConvert16WithOffset_vXMx1() {
		byte[] buffer = new byte[4];
		int offset = 2;
		int expected = (int) ByteUtils.fromLittleEndian(buffer, offset, 2);
		int actual = DumpArchiveUtil.convert16(buffer, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testConvert16WithNegativeOffset_wdUp2() {
		byte[] buffer = new byte[2];
		int offset = -1;
		int expected = (int) ByteUtils.fromLittleEndian(buffer, offset, 2);
		int actual = DumpArchiveUtil.convert16(buffer, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testConvert16WithNullBuffer_eXHg3() {
		byte[] buffer = null;
		int offset = 0;
		int expected = (int) ByteUtils.fromLittleEndian(buffer, offset, 2);
		int actual = DumpArchiveUtil.convert16(buffer, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testConvert16WithEmptyBuffer_XuyM4() {
		byte[] buffer = new byte[0];
		int offset = 0;
		int expected = (int) ByteUtils.fromLittleEndian(buffer, offset, 2);
		int actual = DumpArchiveUtil.convert16(buffer, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testConvert16WithInvalidOffset_MIiU5() {
		byte[] buffer = new byte[2];
		int offset = 3;
		int expected = (int) ByteUtils.fromLittleEndian(buffer, offset, 2);
		int actual = DumpArchiveUtil.convert16(buffer, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testConvert16WithInvalidNegativeOffset_rEhK6() {
		byte[] buffer = new byte[2];
		int offset = -2;
		int expected = (int) ByteUtils.fromLittleEndian(buffer, offset, 2);
		int actual = DumpArchiveUtil.convert16(buffer, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testConvert16WithInvalidLength_OPec7() {
		byte[] buffer = new byte[2];
		int offset = 1;
		int expected = (int) ByteUtils.fromLittleEndian(buffer, offset, 3);
		int actual = DumpArchiveUtil.convert16(buffer, offset);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert32_ZVWf0() {
        byte[] buffer = new byte[4];
        int offset = 0;
        int expected = (int) ByteUtils.fromLittleEndian(buffer, offset, 4);
        int actual = DumpArchiveUtil.convert32(buffer, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert32WithOffset_Nnps1() {
        byte[] buffer = new byte[4];
        int offset = 1;
        int expected = (int) ByteUtils.fromLittleEndian(buffer, offset, 3);
        int actual = DumpArchiveUtil.convert32(buffer, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert32WithNegativeOffset_Qglk2() {
        byte[] buffer = new byte[4];
        int offset = -1;
        int expected = (int) ByteUtils.fromLittleEndian(buffer, 0, 4);
        int actual = DumpArchiveUtil.convert32(buffer, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert32WithEmptyBuffer_FPsd3() {
        byte[] buffer = new byte[0];
        int offset = 0;
        int expected = (int) ByteUtils.fromLittleEndian(buffer, offset, 4);
        int actual = DumpArchiveUtil.convert32(buffer, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert32WithNullBuffer_QoPA4() {
        byte[] buffer = null;
        int offset = 0;
        int expected = (int) ByteUtils.fromLittleEndian(new byte[4], offset, 4);
        int actual = DumpArchiveUtil.convert32(buffer, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert32WithNegativeOffsetAndEmptyBuffer_njIO5() {
        byte[] buffer = new byte[0];
        int offset = -1;
        int expected = (int) ByteUtils.fromLittleEndian(buffer, 0, 4);
        int actual = DumpArchiveUtil.convert32(buffer, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert32WithNegativeOffsetAndNullBuffer_pVFn6() {
        byte[] buffer = null;
        int offset = -1;
        int expected = (int) ByteUtils.fromLittleEndian(new byte[4], 0, 4);
        int actual = DumpArchiveUtil.convert32(buffer, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert32WithOffsetAndEmptyBuffer_dmsY7() {
        byte[] buffer = new byte[0];
        int offset = 2;
        int expected = (int) ByteUtils.fromLittleEndian(buffer, offset, 4);
        int actual = DumpArchiveUtil.convert32(buffer, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert32WithOffsetAndNullBuffer_XBIp8() {
        byte[] buffer = null;
        int offset = 2;
        int expected = (int) ByteUtils.fromLittleEndian(new byte[4], offset, 4);
        int actual = DumpArchiveUtil.convert32(buffer, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyWithNullBuffer_nXKq0() {
    byte[] buffer = null;
    boolean actual = DumpArchiveUtil.verify(buffer);
    boolean expected = false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyWithValidBuffer_HhJT1() {
    byte[] buffer = new byte[32];
    buffer[24] = 0x01;
    buffer[25] = 0x02;
    buffer[26] = 0x03;
    buffer[27] = 0x04;
    boolean actual = DumpArchiveUtil.verify(buffer);
    boolean expected = true;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyWithInvalidMagicNumber_EpKZ2() {
    byte[] buffer = new byte[32];
    buffer[24] = 0x00;
    buffer[25] = 0x00;
    buffer[26] = 0x00;
    buffer[27] = 0x00;
    boolean actual = DumpArchiveUtil.verify(buffer);
    boolean expected = false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyWithInvalidChecksum_hTmB3() {
    byte[] buffer = new byte[32];
    buffer[24] = 0x01;
    buffer[25] = 0x02;
    buffer[26] = 0x03;
    buffer[27] = 0x04;
    buffer[28] = 0x00;
    buffer[29] = 0x00;
    buffer[30] = 0x00;
    buffer[31] = 0x00;
    boolean actual = DumpArchiveUtil.verify(buffer);
    boolean expected = false;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_fWGL0_tzXW0() throws IOException {
        ZipEncoding encoding = ZipEncodingHelper.getZipEncoding("UTF8");
        byte[] b = new byte[] {0, 1, 2, 3};
        int offset = 0;
        int len = 4;
        String expected = "Valid input";
        String actual = DumpArchiveUtil.decode(encoding, b, offset, len);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidInput_rCGo1_XZll0() {
        ZipEncoding encoding = ZipEncodingHelper.getZipEncoding("UTF8");
        byte[] b = new byte[] {0, 1, 2, 3};
        int offset = 3;
        int len = 2;
        try {
            DumpArchiveUtil.decode(encoding, b, offset, len);
        } catch (IOException e) {
            assertEquals("Invalid offset/length combination", e.getMessage());
        }
    }
}