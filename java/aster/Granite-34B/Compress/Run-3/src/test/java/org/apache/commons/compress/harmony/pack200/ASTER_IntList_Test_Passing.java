/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IntList_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithEmptyList_BFJn0() throws Exception {
        IntList list = new IntList();
        assertTrue(list.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithPopulatedList_QdCC1() throws Exception {
        IntList list = new IntList(10);
        list.add(5);
        assertFalse(list.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_HvrS0() throws Exception {
    IntList list = new IntList(10);
    IntList list2 = new IntList(5);
    list2.add(1);
    list2.add(2);
    list2.add(3);
    list.addAll(list2);
    int[] expected = {1, 2, 3};
    assertArrayEquals(expected, list.toArray());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll2_LZGh1() throws Exception {
    IntList list = new IntList(10);
    IntList list2 = new IntList(5);
    list2.add(1);
    list2.add(2);
    list2.add(3);
    list.addAll(list2);
    list.add(4);
    list.add(5);
    list.add(6);
    list.add(7);
    list.add(8);
    list.add(9);
    list.add(10);
    list.add(11);
    list.add(12);
    list.add(13);
    list.add(14);
    list.add(15);
    int[] expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
    assertArrayEquals(expected, list.toArray());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWithValidLocation_PRCI0() throws Exception {
    IntList intList = new IntList(10);
    int actual = intList.get(5);
    int expected = 0; // Replace 0 with the expected value
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWithLocationZero_hdzy3() throws Exception {
    IntList intList = new IntList(10);
    int actual = intList.get(0);
    int expected = 0; // Replace 0 with the expected value
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWithLastLocation_wFaa4() throws Exception {
    IntList intList = new IntList(10);
    int actual = intList.get(9);
    int expected = 0; // Replace 0 with the expected value
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToArray_zMJG0() throws Exception {
        IntList intList = new IntList(10);
        int[] expected = new int[10];
        assertArrayEquals(expected, intList.toArray());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToArrayWithEmptyList_QmGk1() throws Exception {
        IntList intList = new IntList();
        int[] expected = new int[0];
        assertArrayEquals(expected, intList.toArray());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToArrayWithSingletonList_ZqWV2() throws Exception {
        IntList intList = new IntList();
        intList.add(1);
        int[] expected = new int[1];
        expected[0] = 1;
        assertArrayEquals(expected, intList.toArray());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToArrayWithMultipleElements_Vlgp3() throws Exception {
        IntList intList = new IntList();
        intList.add(1);
        intList.add(2);
        intList.add(3);
        int[] expected = new int[3];
        expected[0] = 1;
        expected[1] = 2;
        expected[2] = 3;
        assertArrayEquals(expected, intList.toArray());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_validLocation_APuo0() throws Exception {
        IntList intList = new IntList(10);
        int result = intList.remove(5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_invalidLocation_jYMn1() throws Exception {
        IntList intList = new IntList(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_firstLocation_AJNB2() throws Exception {
        IntList intList = new IntList(10);
        int result = intList.remove(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_lastLocation_ryMc3() throws Exception {
        IntList intList = new IntList(10);
        int result = intList.remove(9);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_emptyList_GSJv5() throws Exception {
        IntList intList = new IntList();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_QVtl0() throws Exception {
        IntList intList = new IntList(10);
        boolean result = intList.add(5);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddWithNegativeNumber_VdlF1() throws Exception {
        IntList intList = new IntList(10);
        boolean result = intList.add(-5);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIncrementWithValidLocation_zXRG0() throws Exception {
        IntList intList = new IntList(10);
        intList.increment(5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_YEUo0() throws Exception {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    intList.add(1, 2);
    intList.add(2, 3);
    intList.add(3, 4);
    intList.add(4, 5);
    intList.add(5, 6);
    intList.add(6, 7);
    intList.add(7, 8);
    intList.add(8, 9);
    intList.add(9, 10);
    assertEquals(10, intList.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd2_QNAr1() throws Exception {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    intList.add(1, 2);
    intList.add(2, 3);
    intList.add(3, 4);
    intList.add(4, 5);
    intList.add(5, 6);
    intList.add(6, 7);
    intList.add(7, 8);
    intList.add(8, 9);
    intList.add(9, 10);
    intList.add(10, 11);
    assertEquals(11, intList.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd3_OEFb2() throws Exception {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    intList.add(1, 2);
    intList.add(2, 3);
    intList.add(3, 4);
    intList.add(4, 5);
    intList.add(5, 6);
    intList.add(6, 7);
    intList.add(7, 8);
    intList.add(8, 9);
    intList.add(9, 10);
    intList.add(10, 11);
    intList.add(11, 12);
    assertEquals(12, intList.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd4_bTPI3() throws Exception {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    intList.add(1, 2);
    intList.add(2, 3);
    intList.add(3, 4);
    intList.add(4, 5);
    intList.add(5, 6);
    intList.add(6, 7);
    intList.add(7, 8);
    intList.add(8, 9);
    intList.add(9, 10);
    intList.add(10, 11);
    intList.add(11, 12);
    intList.add(12, 13);
    assertEquals(13, intList.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd5_wNnM4() throws Exception {
    IntList intList = new IntList(10);
    intList.add(0, 1);
    intList.add(1, 2);
    intList.add(2, 3);
    intList.add(3, 4);
    intList.add(4, 5);
    intList.add(5, 6);
    intList.add(6, 7);
    intList.add(7, 8);
    intList.add(8, 9);
    intList.add(9, 10);
    intList.add(10, 11);
    intList.add(11, 12);
    intList.add(12, 13);
    intList.add(13, 14);
    assertEquals(14, intList.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_1_Nymp0() throws Exception {
        IntList intList = new IntList(10);
        intList.add(0, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_2_qLrp1() throws Exception {
        IntList intList = new IntList(10);
        intList.add(1, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_3_gtIc2() throws Exception {
        IntList intList = new IntList(10);
        intList.add(2, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_4_pFCC3() throws Exception {
        IntList intList = new IntList(10);
        intList.add(3, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_5_kxTy4() throws Exception {
        IntList intList = new IntList(10);
        intList.add(4, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_6_GXoh5() throws Exception {
        IntList intList = new IntList(10);
        intList.add(5, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_7_xooc6() throws Exception {
        IntList intList = new IntList(10);
        intList.add(6, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_8_tlES7() throws Exception {
        IntList intList = new IntList(10);
        intList.add(7, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_9_IsEO8() throws Exception {
        IntList intList = new IntList(10);
        intList.add(8, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_10_OHhT9() throws Exception {
        IntList intList = new IntList(10);
        intList.add(9, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_11_ZVNQ10() throws Exception {
        IntList intList = new IntList(10);
        intList.add(10, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_12_Ryzc11() throws Exception {
        IntList intList = new IntList(10);
        intList.add(11, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClear_kywW0() throws Exception {
        IntList intList = new IntList(10);
        intList.clear();
        assertEquals(0, intList.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClearWithEmptyList_JEBe1() throws Exception {
        IntList intList = new IntList();
        intList.clear();
        assertEquals(0, intList.size());
    }
}