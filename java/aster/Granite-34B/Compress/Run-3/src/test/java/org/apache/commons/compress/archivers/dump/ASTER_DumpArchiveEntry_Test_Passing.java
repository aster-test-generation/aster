/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessTime_noZl0() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        Date date = new Date();
        entry.setAccessTime(date);
        assertEquals(date.getTime(), entry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessTimeWithNull_FSpQ1() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        entry.setAccessTime(null);
        assertEquals(0, entry.getAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ACNB0() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertEquals("name", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithIno_fAAI1() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.FILE);
        assertEquals("name", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime_iAEN0() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        Date date = new Date();
        entry.setCreationTime(date);
        assertEquals(date.getTime(), entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNullDate_Mfzi1() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        entry.setCreationTime(null);
        assertEquals(0, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNegativeTime_xJim2() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        Date date = new Date(-1);
        entry.setCreationTime(date);
        assertEquals(-1, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithZeroTime_jeiF3() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        Date date = new Date(0);
        entry.setCreationTime(date);
        assertEquals(0, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithPositiveTime_JAjk4() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        Date date = new Date(1);
        entry.setCreationTime(date);
        assertEquals(1, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithMaxTime_fEdA5() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        Date date = new Date(Long.MAX_VALUE);
        entry.setCreationTime(date);
        assertEquals(Long.MAX_VALUE, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithMinTime_BmMO6() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        Date date = new Date(Long.MIN_VALUE);
        entry.setCreationTime(date);
        assertEquals(Long.MIN_VALUE, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithRandomTime_NlBu7() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        Date date = new Date(1234567890);
        entry.setCreationTime(date);
        assertEquals(1234567890, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNegativeRandomTime_bRqG8() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        Date date = new Date(-1234567890);
        entry.setCreationTime(date);
        assertEquals(-1234567890, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Object_reflexive_HRLM0() throws Exception {
    final DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    assertEquals(true, entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Object_symmetric_VFvL1_1() throws Exception {
    final DumpArchiveEntry entry1 = new DumpArchiveEntry("name", "simpleName");
    final DumpArchiveEntry entry2 = new DumpArchiveEntry("name", "simpleName");
    assertEquals(true, entry1.equals(entry2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Object_symmetric_VFvL1_2() throws Exception {
    final DumpArchiveEntry entry1 = new DumpArchiveEntry("name", "simpleName");
    final DumpArchiveEntry entry2 = new DumpArchiveEntry("name", "simpleName");
    assertEquals(true, entry2.equals(entry1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Object_transitive_rEyU2_1() throws Exception {
    final DumpArchiveEntry entry1 = new DumpArchiveEntry("name", "simpleName");
    final DumpArchiveEntry entry2 = new DumpArchiveEntry("name", "simpleName");
    final DumpArchiveEntry entry3 = new DumpArchiveEntry("name", "simpleName");
    assertEquals(true, entry1.equals(entry2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Object_transitive_rEyU2_2() throws Exception {
    final DumpArchiveEntry entry1 = new DumpArchiveEntry("name", "simpleName");
    final DumpArchiveEntry entry2 = new DumpArchiveEntry("name", "simpleName");
    final DumpArchiveEntry entry3 = new DumpArchiveEntry("name", "simpleName");
    assertEquals(true, entry2.equals(entry3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Object_transitive_rEyU2_3() throws Exception {
    final DumpArchiveEntry entry1 = new DumpArchiveEntry("name", "simpleName");
    final DumpArchiveEntry entry2 = new DumpArchiveEntry("name", "simpleName");
    final DumpArchiveEntry entry3 = new DumpArchiveEntry("name", "simpleName");
    assertEquals(true, entry1.equals(entry3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Object_null_VnUr3() throws Exception {
    final DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    assertEquals(false, entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Object_otherClass_wlVM4() throws Exception {
    final DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    assertEquals(false, entry.equals(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Object_differentName_GKmA5() throws Exception {
    final DumpArchiveEntry entry1 = new DumpArchiveEntry("name1", "simpleName");
    final DumpArchiveEntry entry2 = new DumpArchiveEntry("name2", "simpleName");
    assertEquals(false, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Object_differentSimpleName_eWQu6() throws Exception {
    final DumpArchiveEntry entry1 = new DumpArchiveEntry("name", "simpleName1");
    final DumpArchiveEntry entry2 = new DumpArchiveEntry("name", "simpleName2");
    assertEquals(false, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setOffsetTest_tsNB0() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setOffset(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getGenerationTest2_uucF1() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(0, entry.getGeneration());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setVolumeTest_qzrN0() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setVolume(100);
        assert dumpArchiveEntry.getVolume() == 100;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setVolumeTest_MinVolume_mkzm1() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setVolume(0);
        assert dumpArchiveEntry.getVolume() == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setVolumeTest_MaxVolume_zTFF2() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setVolume(Integer.MAX_VALUE);
        assert dumpArchiveEntry.getVolume() == Integer.MAX_VALUE;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setVolumeTest_NegativeVolume_dLnk3() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setVolume(-1);
        assert dumpArchiveEntry.getVolume() == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setVolumeTest_VolumeAfterSettingVolume_vVAg4() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setVolume(100);
        dumpArchiveEntry.setVolume(200);
        assert dumpArchiveEntry.getVolume() == 200;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setVolumeTest_VolumeAfterSettingNegativeVolume_gsDy5() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setVolume(100);
        dumpArchiveEntry.setVolume(-1);
        assert dumpArchiveEntry.getVolume() == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setVolumeTest_VolumeAfterSettingMaxVolume_dQzA6() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setVolume(100);
        dumpArchiveEntry.setVolume(Integer.MAX_VALUE);
        assert dumpArchiveEntry.getVolume() == Integer.MAX_VALUE;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setVolumeTest_VolumeAfterSettingMinVolume_oanA7() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setVolume(100);
        dumpArchiveEntry.setVolume(0);
        assert dumpArchiveEntry.getVolume() == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setVolumeTest_VolumeAfterSettingVolumeToNegativeVolume_xAcs8() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setVolume(100);
        dumpArchiveEntry.setVolume(0);
        dumpArchiveEntry.setVolume(-1);
        assert dumpArchiveEntry.getVolume() == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setVolumeTest_VolumeAfterSettingVolumeToMaxVolume_dIWi9() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setVolume(100);
        dumpArchiveEntry.setVolume(0);
        dumpArchiveEntry.setVolume(Integer.MAX_VALUE);
        assert dumpArchiveEntry.getVolume() == Integer.MAX_VALUE;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetSimpleName_pJeR0() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setSimpleName("newSimpleName");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetSimpleNameCoverage_cSbX1() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setSimpleName(null);
        dumpArchiveEntry.setSimpleName("");
        dumpArchiveEntry.setSimpleName("simpleName");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_jFOK0() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        DumpArchiveEntry.TYPE type = DumpArchiveEntry.TYPE.FILE;
        entry.setType(type);
        assertEquals(type, entry.getType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWhiteout_UAfI1() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        DumpArchiveEntry.TYPE type = DumpArchiveEntry.TYPE.WHITEOUT;
        entry.setType(type);
        assertEquals(type, entry.getType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeSocket_WUnY2() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        DumpArchiveEntry.TYPE type = DumpArchiveEntry.TYPE.SOCKET;
        entry.setType(type);
        assertEquals(type, entry.getType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeLink_actJ3() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        DumpArchiveEntry.TYPE type = DumpArchiveEntry.TYPE.LINK;
        entry.setType(type);
        assertEquals(type, entry.getType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeBlkdev_ZyNo5() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        DumpArchiveEntry.TYPE type = DumpArchiveEntry.TYPE.BLKDEV;
        entry.setType(type);
        assertEquals(type, entry.getType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeDirectory_lcXZ6() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        DumpArchiveEntry.TYPE type = DumpArchiveEntry.TYPE.DIRECTORY;
        entry.setType(type);
        assertEquals(type, entry.getType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeChrdev_sfml7() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        DumpArchiveEntry.TYPE type = DumpArchiveEntry.TYPE.CHRDEV;
        entry.setType(type);
        assertEquals(type, entry.getType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeFifo_kaHd8() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        DumpArchiveEntry.TYPE type = DumpArchiveEntry.TYPE.FIFO;
        entry.setType(type);
        assertEquals(type, entry.getType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeUnknown_emOC9() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        DumpArchiveEntry.TYPE type = DumpArchiveEntry.TYPE.UNKNOWN;
        entry.setType(type);
        assertEquals(type, entry.getType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSimpleName_DumpArchiveEntry_String_AbgR0() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        assertEquals("simpleName", dumpArchiveEntry.getSimpleName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNlinkTest1_MFhP1() throws Exception {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    int result = dumpArchiveEntry.getNlink();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId_vOmq0() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.FILE);
        assertEquals(123, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupIdWithNoType_KvNa1() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupIdWithNullName_dhug2() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry(null, "simpleName");
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupIdWithEmptyName_wrpc3() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("", "simpleName");
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupIdWithNullSimpleName_OMsL4() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", null);
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupIdWithEmptySimpleName_ACzz5() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "");
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NullName_Xhqe0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName(null);
    assertEquals(null, entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_EmptyName_Mjlb1() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName("");
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_ValidName_kWgz2() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName("test.txt");
    assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NameWithDirectorySeparator_JsTx3() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName("test/test.txt");
    assertEquals("test/test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NameWithCurrentDirectory_qnKL4() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName("./test.txt");
    assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NameWithParentDirectory_GtjC5() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName("../test.txt");
    assertEquals("../test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NameWithMultipleParentDirectories_VGTo6() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName("../../test.txt");
    assertEquals("../../test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NameWithDirectorySeparatorAtEnd_LWOF7() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName("test/test.txt/");
    assertEquals("test/test.txt/", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NameWithDirectorySeparatorAtStart_SQVx8() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName("/test/test.txt");
    assertEquals("/test/test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NameWithDirectorySeparatorAtBothEnds_HmsX9() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName("/test/test.txt/");
    assertEquals("/test/test.txt/", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NameWithMultipleDirectorySeparators_nEZy10() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName("test//test.txt");
    assertEquals("test/test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NameWithMultipleDirectorySeparatorsAtBothEnds_bOmu11() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName("test//test.txt//");
    assertEquals("test/test.txt/", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NameWithMultipleDirectorySeparatorsAtStart_CSWJ12() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName("///test/test.txt");
    assertEquals("/test/test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NameWithMultipleDirectorySeparatorsAtEnd_nKKJ13() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName("test/test.txt///");
    assertEquals("test/test.txt/", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NameWithMultipleDirectorySeparatorsAtBothEndsAndInMiddle_fiyk14() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName("test///test.txt///");
    assertEquals("test/test.txt/", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NameWithMultipleDirectorySeparatorsAtBothEndsAndInMiddle_WithCurrentDirectory_Feqw15() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName("./test///test.txt///");
    assertEquals("test/test.txt/", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NameWithMultipleDirectorySeparatorsAtBothEndsAndInMiddle_WithParentDirectory_HOZn16() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName("../test///test.txt///");
    assertEquals("../test/test.txt/", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NameWithMultipleDirectorySeparatorsAtBothEndsAndInMiddle_WithParentDirectory_WithCurrentDirectory_VuGe17() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    entry.setName(".././test///test.txt///");
    assertEquals("../test/test.txt/", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithCoverage_RtTm1() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        entry.setSize(0L);
        entry.setSize(1L);
        entry.setSize(Long.MAX_VALUE);
        entry.setSize(Long.MIN_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNlinkTest_YTgT0() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setNlink(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNlinkTest_GsbZ1() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setNlink(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNlinkTest_npyE2() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setNlink(-1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNlinkTest_WBkw3() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setNlink(Integer.MAX_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNlinkTest_yXWQ4() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setNlink(Integer.MIN_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNlinkTest_swna5() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setNlink(100);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNlinkTest_zMyk6() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setNlink(50);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNlinkTest_BFwM7() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setNlink(200);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNlinkTest_WwZg8() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setNlink(150);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNlinkTest_yCrV9() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setNlink(250);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNlinkTest_xDvm11() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setNlink(225);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNlinkTest_VmIc12() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setNlink(275);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNlinkTest_FoZd13() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setNlink(300);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSparseRecordWithZeroIndex_vQSh0() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.FILE);
        boolean result = entry.isSparseRecord(0);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSparseRecordWithNonZeroIndex_hdKo1() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.FILE);
        boolean result = entry.isSparseRecord(1);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_Yysa0() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.FILE);
        assertEquals(123, entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithWhiteoutType_CPkO1() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.WHITEOUT);
        assertEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithSocketType_OjCm2() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.SOCKET);
        assertEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithLinkType_OxvX3() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.LINK);
        assertEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithBlkdevType_TFla5() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.BLKDEV);
        assertEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithDirectoryType_VwbK6() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.DIRECTORY);
        assertEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithChrdevType_JAZK7() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.CHRDEV);
        assertEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithFifoType_wkyx8() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.FIFO);
        assertEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithUnknownType_Wcdq9() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.UNKNOWN);
        assertEquals(0, entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUserIdTest_XjCP0() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        dumpArchiveEntry.setUserId(1000);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderCountWithNoType_oMLf1() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(0, entry.getHeaderCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_Wkyh0() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.FILE);
        assertEquals(DumpArchiveEntry.TYPE.FILE, entry.getType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_WHITEOUT_PgKt1() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.WHITEOUT);
        assertEquals(DumpArchiveEntry.TYPE.WHITEOUT, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_SOCKET_fZKC2() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.SOCKET);
        assertEquals(DumpArchiveEntry.TYPE.SOCKET, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_LINK_XiLG3() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.LINK);
        assertEquals(DumpArchiveEntry.TYPE.LINK, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_BLKDEV_LaQw5() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.BLKDEV);
        assertEquals(DumpArchiveEntry.TYPE.BLKDEV, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_DIRECTORY_Ygog6() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.DIRECTORY);
        assertEquals(DumpArchiveEntry.TYPE.DIRECTORY, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_CHRDEV_LNEn7() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.CHRDEV);
        assertEquals(DumpArchiveEntry.TYPE.CHRDEV, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_FIFO_JkjE8() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.FIFO);
        assertEquals(DumpArchiveEntry.TYPE.FIFO, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_UNKNOWN_UpYE9() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.UNKNOWN);
        assertEquals(DumpArchiveEntry.TYPE.UNKNOWN, entry.getType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_PVHp0() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        Date date = new Date();
        entry.setLastModifiedDate(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCoverage_AdiP1() throws Exception {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeleted_BYoU1() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        entry.setDeleted(false);
        assertEquals(false, entry.isDeleted());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOriginalNameTest_PECN0() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertEquals("simpleName", entry.getOriginalName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderHolesWithNoType_DvST6() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, null);
        assertEquals(0, entry.getHeaderHoles());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolumeWithNullType_jcAp2() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, null);
        int volume = entry.getVolume();
        assertTrue(volume == 0);
    }
}