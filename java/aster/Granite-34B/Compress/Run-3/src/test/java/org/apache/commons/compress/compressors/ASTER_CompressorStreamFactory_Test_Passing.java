/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.util.Set;
import java.util.SortedMap;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Set;
import java.util.SortedMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CompressorStreamFactory_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getCompressorInputStreamProvidersTest1_vDMM0() {
    CompressorStreamFactory obj1 = new CompressorStreamFactory();
    obj1.getCompressorInputStreamProviders();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getCompressorInputStreamProvidersTest2_JOZl1() {
    CompressorStreamFactory obj2 = new CompressorStreamFactory(true);
    obj2.getCompressorInputStreamProviders();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getCompressorInputStreamProvidersTest3_rSQf2() {
    CompressorStreamFactory obj3 = new CompressorStreamFactory(true, 1024);
    obj3.getCompressorInputStreamProviders();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getCompressorInputStreamProvidersTest4_djHG3() {
    CompressorStreamFactory obj4 = new CompressorStreamFactory(false);
    obj4.getCompressorInputStreamProviders();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getCompressorInputStreamProvidersTest5_RldO4() {
    CompressorStreamFactory obj5 = new CompressorStreamFactory(false, 1024);
    obj5.getCompressorInputStreamProviders();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBzip2_WPwL0() {
        assertEquals("BZIP2", CompressorStreamFactory.getBzip2());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompressorStreamFactoryDefaultConstructor_dQKF1() {
        new CompressorStreamFactory();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompressorStreamFactoryDecompressUntilEOFConstructor_zssV2() {
        new CompressorStreamFactory(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompressorStreamFactoryDecompressUntilEOFMemoryLimitInKbConstructor_RHzn3() {
        new CompressorStreamFactory(true, 1024);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressorOutputStreamProvidersDefault_ugyy0() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertNotNull(providers);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressorOutputStreamProvidersWithDecompressUntilEOF_FSNd1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertNotNull(providers);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressorOutputStreamProvidersWithMemoryLimit_OGta2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertNotNull(providers);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableCompressorOutputStreamProvidersWithCoverage_GfBn1() {
        CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLZ4Framed_fdmg0() {
        assertEquals("LZ4_FRAMED", CompressorStreamFactory.getLZ4Framed());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLZ4Framed1_xMdZ1() {
        assertEquals("LZ4_FRAMED", new CompressorStreamFactory(true).getLZ4Framed());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLZ4Framed2_zLKA2() {
        assertEquals("LZ4_FRAMED", new CompressorStreamFactory(true, 1024).getLZ4Framed());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLZ4Framed3_udyj3() {
        assertEquals("LZ4_FRAMED", new CompressorStreamFactory().getLZ4Framed());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getGzipTest_PHNU0() {
    assertEquals("gzip", CompressorStreamFactory.getGzip());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getGzipTest1_MfeF1() {
    assertEquals("gzip", new CompressorStreamFactory().getGzip());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getGzipTest2_VWxd2() {
    assertEquals("gzip", new CompressorStreamFactory(true).getGzip());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getGzipTest3_iaSk3() {
    assertEquals("gzip", new CompressorStreamFactory(true, 1024).getGzip());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getGzipTest4_BQWW4() {
    assertEquals("gzip", new CompressorStreamFactory(false).getGzip());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getGzipTest5_dYnZ5() {
    assertEquals("gzip", new CompressorStreamFactory(false, 1024).getGzip());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDecompressConcatenatedTest1_vdxZ0() {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
    boolean bool0 = compressorStreamFactory0.getDecompressConcatenated();
    assertEquals(false, bool0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDecompressConcatenatedTest2_FKPL1() {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true);
    boolean bool0 = compressorStreamFactory0.getDecompressConcatenated();
    assertEquals(true, bool0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDecompressConcatenatedTest3_Xuma2() {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false, 1);
    boolean bool0 = compressorStreamFactory0.getDecompressConcatenated();
    assertEquals(false, bool0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDecompressConcatenatedTest4_Fcqo3() {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true, 2);
    boolean bool0 = compressorStreamFactory0.getDecompressConcatenated();
    assertEquals(true, bool0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDecompressConcatenatedTest5_gbTe4() {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false, 2);
    boolean bool0 = compressorStreamFactory0.getDecompressConcatenated();
    assertEquals(false, bool0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDecompressConcatenatedTest6_liUe5() {
    CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true, 1);
    boolean bool0 = compressorStreamFactory0.getDecompressConcatenated();
    assertEquals(true, bool0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLzma_nApH0() {
        assertEquals("LZMA", CompressorStreamFactory.getLzma());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLzmaWithDecompressUntilEOF_QiWP1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        assertEquals("LZMA", CompressorStreamFactory.getLzma());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLzmaWithMemoryLimit_AGqY2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
        assertEquals("LZMA", CompressorStreamFactory.getLzma());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getSnappyRawTest_egUD0() {
    assertEquals("snappy_raw", CompressorStreamFactory.getSnappyRaw());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamCompressorNames_sYSA0_1() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertEquals(compressorNames.size(), 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamCompressorNames_sYSA0_2() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains(CompressorStreamFactory.GZIP));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamCompressorNames_sYSA0_3() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains(CompressorStreamFactory.BZIP2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamCompressorNames_sYSA0_4() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains(CompressorStreamFactory.XZ));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamCompressorNames_sYSA0_5() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains(CompressorStreamFactory.LZMA));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamCompressorNames_sYSA0_6() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains(CompressorStreamFactory.PACK200));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamCompressorNames_sYSA0_7() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains(CompressorStreamFactory.DEFLATE));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamCompressorNames_sYSA0_8() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains(CompressorStreamFactory.SNAPPY_FRAMED));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamCompressorNames_sYSA0_9() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains(CompressorStreamFactory.LZ4_BLOCK));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamCompressorNames_sYSA0_10() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains(CompressorStreamFactory.LZ4_FRAMED));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamCompressorNames_sYSA0_11() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains(CompressorStreamFactory.ZSTANDARD));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDefaultConstructor_TDNv0() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        assertEquals(false, factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOneArgConstructor_JHCR1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        assertEquals(true, factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTwoArgConstructor_NZGG2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        assertEquals(true, factory.getDecompressUntilEOF());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPack200_wHaf0() {
        assertEquals("PACK200", CompressorStreamFactory.getPack200());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPack200WithCoverage_LQVF1_1() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        String pack200 = factory.getPack200();
        assertNotNull(pack200);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPack200WithCoverage_LQVF1_2() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        String pack200 = factory.getPack200();
        assertEquals("PACK200", pack200);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLZ4BlockTest_PEKk0() {
	assertEquals("LZ4_BLOCK", CompressorStreamFactory.getLZ4Block());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLZ4BlockTest1_hIkv1() {
	assertEquals("LZ4_BLOCK", new CompressorStreamFactory(true).getLZ4Block());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLZ4BlockTest2_KGNG2() {
	assertEquals("LZ4_BLOCK", new CompressorStreamFactory(true, 1024).getLZ4Block());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getLZ4BlockTest3_ZrVY3() {
	assertEquals("LZ4_BLOCK", new CompressorStreamFactory().getLZ4Block());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDeflate_Whlv0() {
        assertEquals("DEFLATE", CompressorStreamFactory.getDeflate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyFramed_YBxb0() {
    assertEquals("snappyframed", CompressorStreamFactory.getSnappyFramed());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyFramedWithCoverage_KLmT1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    for (int i = 0; i < 100; i++) {
        String compressor = factory.getSnappyFramed();
        if (compressor.equals("snappyframed")) {
            assertTrue(true);
        } else {
            fail("compressor should be snappyframed");
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getBrotliTest1_xzZd0() {
        String result = CompressorStreamFactory.getBrotli();
        assert result.equals("BROTLI");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetXz_yWCo0() {
        assertEquals("XZ", CompressorStreamFactory.getXz());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflate64_xqBF0_jOUq0() {
    String result = CompressorStreamFactory.getDeflate64();
    assertEquals("DEFLATE64", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamCompressorNames_sYSA0() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertEquals(compressorNames.size(), 10);
        assertTrue(compressorNames.contains(CompressorStreamFactory.GZIP));
        assertTrue(compressorNames.contains(CompressorStreamFactory.BZIP2));
        assertTrue(compressorNames.contains(CompressorStreamFactory.XZ));
        assertTrue(compressorNames.contains(CompressorStreamFactory.LZMA));
        assertTrue(compressorNames.contains(CompressorStreamFactory.PACK200));
        assertTrue(compressorNames.contains(CompressorStreamFactory.DEFLATE));
        assertTrue(compressorNames.contains(CompressorStreamFactory.SNAPPY_FRAMED));
        assertTrue(compressorNames.contains(CompressorStreamFactory.LZ4_BLOCK));
        assertTrue(compressorNames.contains(CompressorStreamFactory.LZ4_FRAMED));
        assertTrue(compressorNames.contains(CompressorStreamFactory.ZSTANDARD));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPack200WithCoverage_LQVF1() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        String pack200 = factory.getPack200();
        assertNotNull(pack200);
        assertEquals("PACK200", pack200);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetXzWithCoverage_zjru1() {
        assertEquals("XZ", CompressorStreamFactory.getXz());
        assertEquals("XZ", CompressorStreamFactory.getXz());
    }
}