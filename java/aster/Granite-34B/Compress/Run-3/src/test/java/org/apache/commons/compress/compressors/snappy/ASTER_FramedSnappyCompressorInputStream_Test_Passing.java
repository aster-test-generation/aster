/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.snappy;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FramedSnappyCompressorInputStream_Test_Passing {
    private byte[] oneByte = new byte[1];    
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmask_PbUj0_1() throws Exception {
        assertEquals(0, FramedSnappyCompressorInputStream.unmask(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmask_PbUj0_2() throws Exception {
        assertEquals(1, FramedSnappyCompressorInputStream.unmask(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmask_PbUj0_3() throws Exception {
        assertEquals(Long.MAX_VALUE, FramedSnappyCompressorInputStream.unmask(Long.MAX_VALUE));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmask_PbUj0_4() throws Exception {
        assertEquals(Long.MIN_VALUE, FramedSnappyCompressorInputStream.unmask(Long.MIN_VALUE));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_QCNQ0() throws IOException {
        InputStream in = null;
        FramedSnappyCompressorInputStream tested = new FramedSnappyCompressorInputStream(in);
        tested.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_withDialect_yYfx1() throws IOException {
        InputStream in = null;
        FramedSnappyDialect dialect = FramedSnappyDialect.STANDARD;
        FramedSnappyCompressorInputStream tested = new FramedSnappyCompressorInputStream(in, dialect);
        tested.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_withBlockSizeAndDialect_hhSv2() throws IOException {
        InputStream in = null;
        int blockSize = 1024;
        FramedSnappyDialect dialect = FramedSnappyDialect.STANDARD;
        FramedSnappyCompressorInputStream tested = new FramedSnappyCompressorInputStream(in, blockSize, dialect);
        tested.close();
    }
}