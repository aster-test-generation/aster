/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SegmentConstantPool_Test_Passing {
SegmentConstantPool segmentconstantpool;
private SegmentConstantPoolArrayCache arrayCache = new SegmentConstantPoolArrayCache();
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testmatchSpecificPoolEntryIndex() throws Exception{
        segmentconstantpool = new SegmentConstantPool(new CpBands(new Segment()));
        String[] nameArray = new String[]{"a", "b", "c"};
        String compareString = "a";
        int desiredIndex = 0;
        int result = segmentconstantpool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatches_0_gVGJ0() throws Exception {
    String regexString = ".*";
    String compareString = ".*";
    boolean expected = true;
    boolean actual = SegmentConstantPool.regexMatches(regexString, compareString);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassPoolEntry_xEDP0_1() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        ConstantPoolEntry entry = segmentConstantPool.getClassPoolEntry("ClassName");
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_1_rOnk0() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] primaryArray = new String[]{"a", "b", "c"};
        String[] secondaryArray = new String[]{"x", "y", "z"};
        String primaryCompareString = "b";
        String secondaryCompareRegex = "y";
        int desiredIndex = 0;
        int result = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_2_zsFt1() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] primaryArray = new String[]{"a", "b", "c"};
        String[] secondaryArray = new String[]{"x", "y", "z"};
        String primaryCompareString = "a";
        String secondaryCompareRegex = "x";
        int desiredIndex = 1;
        int result = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_3_IZzD2() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] primaryArray = new String[]{"a", "b", "c"};
        String[] secondaryArray = new String[]{"x", "y", "z"};
        String primaryCompareString = "c";
        String secondaryCompareRegex = "z";
        int desiredIndex = 2;
        int result = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_4_Soio3() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] primaryArray = new String[]{"a", "b", "c"};
        String[] secondaryArray = new String[]{"x", "y", "z"};
        String primaryCompareString = "b";
        String secondaryCompareRegex = "y";
        int desiredIndex = 1;
        int result = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_5_swZD4() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] primaryArray = new String[]{"a", "b", "c"};
        String[] secondaryArray = new String[]{"x", "y", "z"};
        String primaryCompareString = "a";
        String secondaryCompareRegex = "x";
        int desiredIndex = 0;
        int result = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_ZEAd0() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] nameArray = new String[]{"name1", "name2", "name3"};
        String compareString = "name2";
        int desiredIndex = 1;
        int result = segmentConstantPool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
        assert result == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitMethodPoolEntry_WfFu0_1() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        int cp = 1;
        long value = 100L;
        String desiredClassName = "ClassName";
        ConstantPoolEntry entry = segmentConstantPool.getInitMethodPoolEntry(cp, value, desiredClassName);
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitMethodPoolEntry_WfFu0_2() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        int cp = 1;
        long value = 100L;
        String desiredClassName = "ClassName";
        ConstantPoolEntry entry = segmentConstantPool.getInitMethodPoolEntry(cp, value, desiredClassName);
        assertEquals(1, entry.getGlobalIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitMethodPoolEntry_WfFu0_3() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        int cp = 1;
        long value = 100L;
        String desiredClassName = "ClassName";
        ConstantPoolEntry entry = segmentConstantPool.getInitMethodPoolEntry(cp, value, desiredClassName);
        assertEquals((byte) 1, entry.getTag());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitMethodPoolEntry_WfFu0_4() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        int cp = 1;
        long value = 100L;
        String desiredClassName = "ClassName";
        ConstantPoolEntry entry = segmentConstantPool.getInitMethodPoolEntry(cp, value, desiredClassName);
        assertEquals(1, entry.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitMethodPoolEntryWithException_mkfv1() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        int cp = 2; // CP_METHOD + 1
        long value = 100L;
        String desiredClassName = "ClassName";
        try {
            segmentConstantPool.getInitMethodPoolEntry(cp, value, desiredClassName);
            fail("Expected Pack200Exception");
        } catch (Pack200Exception e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassSpecificPoolEntry_pTpi0_1() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        int cp = 1;
        long desiredIndex = 10;
        String desiredClassName = "java.lang.Object";
        ConstantPoolEntry entry = segmentConstantPool.getClassSpecificPoolEntry(cp, desiredIndex, desiredClassName);
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassSpecificPoolEntry_pTpi0_2() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        int cp = 1;
        long desiredIndex = 10;
        String desiredClassName = "java.lang.Object";
        ConstantPoolEntry entry = segmentConstantPool.getClassSpecificPoolEntry(cp, desiredIndex, desiredClassName);
        assertEquals(1, entry.getGlobalIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassSpecificPoolEntry_pTpi0_3() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        int cp = 1;
        long desiredIndex = 10;
        String desiredClassName = "java.lang.Object";
        ConstantPoolEntry entry = segmentConstantPool.getClassSpecificPoolEntry(cp, desiredIndex, desiredClassName);
        assertEquals(1, entry.getTag());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassSpecificPoolEntry_pTpi0_4() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        int cp = 1;
        long desiredIndex = 10;
        String desiredClassName = "java.lang.Object";
        ConstantPoolEntry entry = segmentConstantPool.getClassSpecificPoolEntry(cp, desiredIndex, desiredClassName);
        assertEquals(1, entry.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassSpecificPoolEntryWithCoverage_SoQZ1_1() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        int cp = 1;
        long desiredIndex = 10;
        String desiredClassName = "java.lang.Object";
        ConstantPoolEntry entry = segmentConstantPool.getClassSpecificPoolEntry(cp, desiredIndex, desiredClassName);
        desiredIndex = 20;
        entry = segmentConstantPool.getClassSpecificPoolEntry(cp, desiredIndex, desiredClassName);
        desiredClassName = "java.lang.String";
        entry = segmentConstantPool.getClassSpecificPoolEntry(cp, desiredIndex, desiredClassName);
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassSpecificPoolEntryWithCoverage_SoQZ1_2() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        int cp = 1;
        long desiredIndex = 10;
        String desiredClassName = "java.lang.Object";
        ConstantPoolEntry entry = segmentConstantPool.getClassSpecificPoolEntry(cp, desiredIndex, desiredClassName);
        desiredIndex = 20;
        entry = segmentConstantPool.getClassSpecificPoolEntry(cp, desiredIndex, desiredClassName);
        desiredClassName = "java.lang.String";
        entry = segmentConstantPool.getClassSpecificPoolEntry(cp, desiredIndex, desiredClassName);
        assertEquals(1, entry.getGlobalIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassSpecificPoolEntryWithCoverage_SoQZ1_3() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        int cp = 1;
        long desiredIndex = 10;
        String desiredClassName = "java.lang.Object";
        ConstantPoolEntry entry = segmentConstantPool.getClassSpecificPoolEntry(cp, desiredIndex, desiredClassName);
        desiredIndex = 20;
        entry = segmentConstantPool.getClassSpecificPoolEntry(cp, desiredIndex, desiredClassName);
        desiredClassName = "java.lang.String";
        entry = segmentConstantPool.getClassSpecificPoolEntry(cp, desiredIndex, desiredClassName);
        assertEquals(1, entry.getTag());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassSpecificPoolEntryWithCoverage_SoQZ1_4() throws Exception {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        int cp = 1;
        long desiredIndex = 10;
        String desiredClassName = "java.lang.Object";
        ConstantPoolEntry entry = segmentConstantPool.getClassSpecificPoolEntry(cp, desiredIndex, desiredClassName);
        desiredIndex = 20;
        entry = segmentConstantPool.getClassSpecificPoolEntry(cp, desiredIndex, desiredClassName);
        desiredClassName = "java.lang.String";
        entry = segmentConstantPool.getClassSpecificPoolEntry(cp, desiredIndex, desiredClassName);
        assertEquals(1, entry.hashCode());}
}