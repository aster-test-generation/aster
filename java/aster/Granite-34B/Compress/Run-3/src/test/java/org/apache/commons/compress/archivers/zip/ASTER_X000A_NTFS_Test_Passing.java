/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipException;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X000A_NTFS_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryDataTest_DhQL0() {
        X000A_NTFS x000A_ntfs = new X000A_NTFS();
        byte[] expected = x000A_ntfs.getLocalFileDataData();
        byte[] actual = x000A_ntfs.getCentralDirectoryData();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessFileTime_VGMN0() {
        X000A_NTFS ntfs = new X000A_NTFS();
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        ntfs.setAccessFileTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLocalFileDataLengthTest_FHds0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipShort actual = x000A_NTFS.getLocalFileDataLength();
        ZipShort expected = new ZipShort(4 + 2 + 2 + 3 * 8);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueTest_hUTb1() {
        byte[] bytes = new byte[10];
        int offset = 5;
        int expected = 0;
        int actual = ZipShort.getValue(bytes, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesTest_uMuJ2() {
        int value = 10;
        byte[] expected = new byte[2];
        byte[] actual = ZipShort.getBytes(value);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesTest_MlXQ3() {
        int value = 0;
        byte[] expected = new byte[2];
        byte[] actual = ZipShort.getBytes(value);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesTest_geQj4() {
        int value = 65535;
        byte[] expected = new byte[] { -1, -1 };
        byte[] actual = ZipShort.getBytes(value);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesTest_lwpf5() {
        int value = 32767;
        byte[] expected = new byte[] { -1, 127 };
        byte[] actual = ZipShort.getBytes(value);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesTest_XygL6() {
        int value = 1;
        byte[] expected = new byte[] { 0, 1 };
        byte[] actual = ZipShort.getBytes(value);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesTest_TRLk8() {
        int value = 256;
        byte[] expected = new byte[] { 1, 0 };
        byte[] actual = ZipShort.getBytes(value);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesTest_uMig9() {
        int value = 65534;
        byte[] expected = new byte[] { -2, -1 };
        byte[] actual = ZipShort.getBytes(value);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLengthTest_Lbou0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        assertEquals(x000A_NTFS.getLocalFileDataLength(), x000A_NTFS.getCentralDirectoryLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCreateFileTimeTest_qlap0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        assertEquals(null, x000A_NTFS.getCreateFileTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAccessFileTime_YpTj0() {
        X000A_NTFS ntfs = new X000A_NTFS();
        FileTime fileTime = ntfs.getAccessFileTime();
        assertNotNull(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateTime_Uvky0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger t = new ZipEightByteInteger(1234567890);
        x000A_NTFS.setCreateTime(t);
        assertEquals(t, x000A_NTFS.getCreateTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateTimeWithNull_RyPD1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger t = null;
        x000A_NTFS.setCreateTime(t);
        assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getCreateTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_equals_null_CtCm0() {
    X000A_NTFS x000a = new X000A_NTFS();
    X000A_NTFS x000b = null;
    Assertions.assertFalse(x000a.equals(x000b));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_equals_self_FfUv1() {
    X000A_NTFS x000a = new X000A_NTFS();
    Assertions.assertTrue(x000a.equals(x000a));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_TJQG0() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] data = new byte[10];
    int offset = 0;
    int length = 10;
    x000A_NTFS.parseFromLocalFileData(data, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData2_uOqI1() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] data = new byte[10];
    int offset = 1;
    int length = 10;
    x000A_NTFS.parseFromLocalFileData(data, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData3_OZvT2() throws ZipException {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] data = new byte[10];
    int offset = 0;
    int length = 9;
    x000A_NTFS.parseFromLocalFileData(data, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTime_Ekez0() {
        X000A_NTFS ntf = new X000A_NTFS();
        Date d = new Date();
        ntf.setCreateJavaTime(d);
        assertEquals(ntf.getCreateJavaTime(), d);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setModifyJavaTimeTest_XTtm0() {
    X000A_NTFS x000A_ntfs = new X000A_NTFS();
    Date d = new Date();
    x000A_ntfs.setModifyJavaTime(d);
    assertEquals(x000A_ntfs.getModifyJavaTime(), d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setModifyJavaTimeTest2_FWEA1() {
    X000A_NTFS x000A_ntfs = new X000A_NTFS();
    Date d = new Date(0L);
    x000A_ntfs.setModifyJavaTime(d);
    assertEquals(x000A_ntfs.getModifyJavaTime(), d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setModifyJavaTimeTest3_SGko2() {
    X000A_NTFS x000A_ntfs = new X000A_NTFS();
    Date d = new Date(System.currentTimeMillis());
    x000A_ntfs.setModifyJavaTime(d);
    assertEquals(x000A_ntfs.getModifyJavaTime(), d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setModifyJavaTimeTest4_ijxD3() {
    X000A_NTFS x000A_ntfs = new X000A_NTFS();
    Date d = new Date(System.currentTimeMillis() + 1000L);
    x000A_ntfs.setModifyJavaTime(d);
    assertEquals(x000A_ntfs.getModifyJavaTime(), d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setModifyJavaTimeTest5_spKF4() {
    X000A_NTFS x000A_ntfs = new X000A_NTFS();
    Date d = new Date(System.currentTimeMillis() - 1000L);
    x000A_ntfs.setModifyJavaTime(d);
    assertEquals(x000A_ntfs.getModifyJavaTime(), d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setModifyJavaTimeTest6_PUzh5() {
    X000A_NTFS x000A_ntfs = new X000A_NTFS();
    Date d = new Date(System.currentTimeMillis() + 60000L);
    x000A_ntfs.setModifyJavaTime(d);
    assertEquals(x000A_ntfs.getModifyJavaTime(), d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setModifyJavaTimeTest7_HAdU6() {
    X000A_NTFS x000A_ntfs = new X000A_NTFS();
    Date d = new Date(System.currentTimeMillis() - 60000L);
    x000A_ntfs.setModifyJavaTime(d);
    assertEquals(x000A_ntfs.getModifyJavaTime(), d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setModifyJavaTimeTest8_dLWR7() {
    X000A_NTFS x000A_ntfs = new X000A_NTFS();
    Date d = new Date(System.currentTimeMillis() + 3600000L);
    x000A_ntfs.setModifyJavaTime(d);
    assertEquals(x000A_ntfs.getModifyJavaTime(), d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setModifyJavaTimeTest9_CMOO8() {
    X000A_NTFS x000A_ntfs = new X000A_NTFS();
    Date d = new Date(System.currentTimeMillis() - 3600000L);
    x000A_ntfs.setModifyJavaTime(d);
    assertEquals(x000A_ntfs.getModifyJavaTime(), d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_LpZp0() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		assertEquals("0x000A Zip Extra Field: Modify:[] Access:[] Create:[] ", x000A_NTFS.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateFileTime_rxOJ0() {
        X000A_NTFS ntfs = new X000A_NTFS();
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        ntfs.setCreateFileTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseFromCentralDirectoryData_Vbei0_1() throws ZipException {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        x000A_NTFS.parseFromCentralDirectoryData(buffer, offset, length);
        assertEquals( ZipEightByteInteger.ZERO, x000A_NTFS.getModifyTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseFromCentralDirectoryData_Vbei0_2() throws ZipException {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        x000A_NTFS.parseFromCentralDirectoryData(buffer, offset, length);
        assertEquals( ZipEightByteInteger.ZERO, x000A_NTFS.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseFromCentralDirectoryData_Vbei0_3() throws ZipException {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        x000A_NTFS.parseFromCentralDirectoryData(buffer, offset, length);
        assertEquals( ZipEightByteInteger.ZERO, x000A_NTFS.getCreateTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessTime_NgIM0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger t = new ZipEightByteInteger(1234567890L);
        x000A_NTFS.setAccessTime(t);
        assertEquals(t, x000A_NTFS.getAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessTime_Null_ONMv1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger t = null;
        x000A_NTFS.setAccessTime(t);
        assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessTime_NegativeValue_OvDz2() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger t = new ZipEightByteInteger(-1234567890L);
        x000A_NTFS.setAccessTime(t);
        assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_EDdQ0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger result = x000A_NTFS.getCreateTime();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTimeWithCoverage_avoH1_2() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger result = x000A_NTFS.getCreateTime();
    assertEquals(result, x000A_NTFS.getCreateTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTimeWithCoverage_avoH1_3() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger result = x000A_NTFS.getCreateTime();
    assertEquals(result.hashCode(), x000A_NTFS.getCreateTime().hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTimeWithCoverage_avoH1_4() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger result = x000A_NTFS.getCreateTime();
    assertNotEquals(result, new Object());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTimeWithCoverage_avoH1_5() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger result = x000A_NTFS.getCreateTime();
    assertNotEquals(result.hashCode(), new Object().hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_1_Qhcg0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger t = new ZipEightByteInteger(new byte[8], 0);
    x000A_NTFS.setModifyTime(t);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_3_aYXx2() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger t = new ZipEightByteInteger(1L);
    x000A_NTFS.setModifyTime(t);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_4_tAEQ3() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger t = new ZipEightByteInteger(new byte[8]);
    x000A_NTFS.setModifyTime(t);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_5_GyIO4() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger t = null;
    x000A_NTFS.setModifyTime(t);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_6_KgBH5() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger t = ZipEightByteInteger.ZERO;
    x000A_NTFS.setModifyTime(t);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAccessTime_iofJ0() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		ZipEightByteInteger accessTime = x000A_NTFS.getAccessTime();
		assertEquals(accessTime, x000A_NTFS.getAccessTime());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyFileTime_VsOb0() {
        X000A_NTFS ntfs = new X000A_NTFS();
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        ntfs.setModifyFileTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTimeWithNullDate_lykp1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        x000A_NTFS.setAccessJavaTime(null);
        assertEquals(x000A_NTFS.getAccessTime(), 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue_OoIm0_XwRi0() {
        byte[] bytes = new byte[8];
        int offset = 0;
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(0);
        long actual = zipEightByteInteger.getLongValue(bytes, offset);
        assertEquals(0, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue2_ktgd2_LOJH0() {
        byte[] bytes = new byte[8];
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
        long actual = zipEightByteInteger.getLongValue();
        assertEquals(0, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_jedI3_ennB0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(0);
        byte[] actual = zipEightByteInteger.getBytes();
        assertNotEquals(null, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_BQDs5_wBrI0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(0);
        int actual = zipEightByteInteger.hashCode();
        assertEquals(0, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue3_wpVX6_ceXo0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(0);
        long actual = zipEightByteInteger.getLongValue();
        assertEquals(0, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBytesTest_XMQJ7_UPwi0() {
        int value = 255;
        byte[] expected = new byte[] { (byte) -1, (byte) 255 };
        byte[] actual = ZipShort.getBytes(value);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithAccessJavaTime_lPjB2_emmq0() {
        X000A_NTFS file = new X000A_NTFS();
        file.setAccessJavaTime(new Date());
        int expected = file.hashCode();
        assertEquals(expected, file.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetHeaderId_xTsM0_reoo0() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		ZipShort expected = x000A_NTFS.HEADER_ID;
		ZipShort actual = x000A_NTFS.getHeaderId();
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetHeaderIdCoverage_NAVp1_gFVl0_1() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		ZipShort expected = X000A_NTFS.HEADER_ID;
		ZipShort actual = x000A_NTFS.getHeaderId();
		assertEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetHeaderIdCoverage_NAVp1_gFVl0_2() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		ZipShort expected = X000A_NTFS.HEADER_ID;
		ZipShort actual = x000A_NTFS.getHeaderId();
		assertEquals(expected.hashCode(), actual.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetHeaderIdCoverage_NAVp1_gFVl0_3() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		ZipShort expected = X000A_NTFS.HEADER_ID;
		ZipShort actual = x000A_NTFS.getHeaderId();
		assertEquals(expected.getBytes(), actual.getBytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetHeaderIdCoverage_NAVp1_gFVl0_4() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		ZipShort expected = X000A_NTFS.HEADER_ID;
		ZipShort actual = x000A_NTFS.getHeaderId();
		assertEquals(expected.getValue(), actual.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetHeaderIdCoverage_NAVp1_gFVl0_5() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		ZipShort expected = X000A_NTFS.HEADER_ID;
		ZipShort actual = x000A_NTFS.getHeaderId();
		assertEquals(expected.getValue(expected.getBytes()), actual.getValue(actual.getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetHeaderIdCoverage_NAVp1_gFVl0_6() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		ZipShort expected = X000A_NTFS.HEADER_ID;
		ZipShort actual = x000A_NTFS.getHeaderId();
		assertEquals(expected.getValue(expected.getBytes(), 0), actual.getValue(actual.getBytes(), 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAccessJavaTime_JFDZ0_XHhf0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        x000A_NTFS.setAccessTime(new ZipEightByteInteger(1234567890L));
        Date expected = FileTimes.ntfsTimeToDate(1234567890L);
        Date actual = x000A_NTFS.getAccessJavaTime();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTime_PLOF0_YwHC0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date d = new Date();
        x000A_NTFS.setAccessJavaTime(d);
        assertEquals(x000A_NTFS.getAccessJavaTime(), d);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTimeWithInvalidDate_yINN2_bhSu0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date d = new Date(Long.MAX_VALUE);
        x000A_NTFS.setAccessJavaTime(d);
        assertEquals(x000A_NTFS.getAccessJavaTime(), d);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testparseFromCentralDirectoryData_Vbei0() throws ZipException {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        x000A_NTFS.parseFromCentralDirectoryData(buffer, offset, length);
        assertEquals( ZipEightByteInteger.ZERO, x000A_NTFS.getModifyTime());
        assertEquals( ZipEightByteInteger.ZERO, x000A_NTFS.getAccessTime());
        assertEquals( ZipEightByteInteger.ZERO, x000A_NTFS.getCreateTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTimeWithCoverage_avoH1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipEightByteInteger result = x000A_NTFS.getCreateTime();
    assertNotNull(result);
    assertEquals(result, x000A_NTFS.getCreateTime());
    assertEquals(result.hashCode(), x000A_NTFS.getCreateTime().hashCode());
    assertNotEquals(result, new Object());
    assertNotEquals(result.hashCode(), new Object().hashCode());
}
}