/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Set;
import java.util.SortedMap;
import org.apache.commons.compress.utils.Sets;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Set;
import java.util.SortedMap;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ArchiveStreamFactory_Test_Passing {
private volatile String entryEncoding;
ArchiveStreamFactory archivestreamfactory;
InputStream inputStream;
ArchiveEntry archiveEntry;
ArchiveInputStream archiveInputStream;
@Mock
	String archiverName;
@Mock
	InputStream in;
@Mock
	ArchiveException archiveException;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testcreateArchiveInputStream() throws Exception {
		archivestreamfactory = new ArchiveStreamFactory();
		when(archivestreamfactory.createArchiveInputStream(archiverName, in)).thenThrow(archiveException);
		Assertions.assertThrows(ArchiveException.class, () -> archivestreamfactory.createArchiveInputStream(archiverName, in));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchiveInputStreamProviders_wwtn0() throws Exception {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
        SortedMap<String, ArchiveStreamProvider> archiveInputStreamProviders = archiveStreamFactory.getArchiveInputStreamProviders();
        assertNotNull(archiveInputStreamProviders);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchiveInputStreamProvidersWithEncoding_jYdX1() throws Exception {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("UTF-8");
        SortedMap<String, ArchiveStreamProvider> archiveInputStreamProviders = archiveStreamFactory.getArchiveInputStreamProviders();
        assertNotNull(archiveInputStreamProviders);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInputStreamArchiveNames_zDsa0() throws Exception {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
        Set<String> expected = Sets.newHashSet("AR", "ARJ", "ZIP", "TAR", "JAR", "CPIO", "DUMP", "SEVEN_Z");
        assertEquals(expected, archiveStreamFactory.getInputStreamArchiveNames());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInputStreamArchiveNamesWithEncoding_Comk1() throws Exception {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("UTF-8");
        Set<String> expected = Sets.newHashSet("AR", "ARJ", "ZIP", "TAR", "JAR", "CPIO", "DUMP", "SEVEN_Z");
        assertEquals(expected, archiveStreamFactory.getInputStreamArchiveNames());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveInputStreamProviders_aPTi0() throws Exception {
        SortedMap<String, ArchiveStreamProvider> map = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
        assertNotNull(map);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveInputStreamProvidersCoverage_SVyK1() throws Exception {
        ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void createArchiveOutputStreamWithNullOutputStream_RwqP7() throws ArchiveException {
	    final ArchiveStreamFactory asf = new ArchiveStreamFactory();
	    try {
	        asf.createArchiveOutputStream(ArchiveStreamFactory.ZIP, null);
	        fail("Expected ArchiveException");
	    } catch (final ArchiveException e) {
	    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEntryEncoding_zyBN0() throws Exception {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
        archiveStreamFactory.setEntryEncoding("UTF-8");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEntryEncodingWithEncoding_kAig1() throws Exception {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("UTF-8");
        archiveStreamFactory.setEntryEncoding("UTF-8");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDetect_ZYlN0() throws ArchiveException, IOException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        InputStream in = new ByteArrayInputStream("test".getBytes());
        String result = ArchiveStreamFactory.detect(in);
        assertEquals("TAR", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDetectWithMarkSupported_eAwY1() throws ArchiveException, IOException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        InputStream in = new ByteArrayInputStream("test".getBytes());
        in.mark(4);
        String result = ArchiveStreamFactory.detect(in);
        assertEquals("TAR", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDetectWithNullStream_KAQR2() throws ArchiveException, IOException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        try {
            ArchiveStreamFactory.detect((InputStream) null);
            fail("Expected ArchiveException");
        } catch (ArchiveException e) {
            assertTrue(true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDetectWithMarkUnsupported_KEFj3() throws ArchiveException, IOException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        InputStream in = new ByteArrayInputStream("test".getBytes());
        try {
            ArchiveStreamFactory.detect(in);
            fail("Expected ArchiveException");
        } catch (ArchiveException e) {
            assertTrue(true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchiveOutputStreamProviders_gjMn0() throws Exception {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
        SortedMap<String, ArchiveStreamProvider> archiveOutputStreamProviders = archiveStreamFactory.getArchiveOutputStreamProviders();
        assertNotNull(archiveOutputStreamProviders);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchiveOutputStreamProvidersWithEncoding_YNod1() throws Exception {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("UTF-8");
        SortedMap<String, ArchiveStreamProvider> archiveOutputStreamProviders = archiveStreamFactory.getArchiveOutputStreamProviders();
        assertNotNull(archiveOutputStreamProviders);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntryEncoding_lHQx0() throws Exception {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("UTF-8");
        assertEquals("UTF-8", archiveStreamFactory.getEntryEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntryEncodingDefaultConstructor_FckR1() throws Exception {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
        assertEquals(null, archiveStreamFactory.getEntryEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProviders_YYVe0() throws Exception {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> result = archiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProvidersWithEncoding_Rhoc1() throws Exception {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> result = archiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertNotNull(result);
}
}