/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JarMarker_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testparseFromCentralDirectoryData_sdqB0() throws ZipException {
    JarMarker jarMarker = new JarMarker();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    jarMarker.parseFromCentralDirectoryData(buffer, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testparseFromCentralDirectoryData_NullBuffer_EQRz1() throws ZipException {
    JarMarker jarMarker = new JarMarker();
    byte[] buffer = null;
    int offset = 0;
    int length = 10;
    jarMarker.parseFromCentralDirectoryData(buffer, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testparseFromCentralDirectoryData_NegativeOffset_tvHs2() throws ZipException {
    JarMarker jarMarker = new JarMarker();
    byte[] buffer = new byte[10];
    int offset = -1;
    int length = 10;
    jarMarker.parseFromCentralDirectoryData(buffer, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testparseFromCentralDirectoryData_NegativeLength_guRf3() throws ZipException {
    JarMarker jarMarker = new JarMarker();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = -1;
    jarMarker.parseFromCentralDirectoryData(buffer, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testparseFromCentralDirectoryData_InvalidOffsetAndLength_ibNt4() throws ZipException {
    JarMarker jarMarker = new JarMarker();
    byte[] buffer = new byte[10];
    int offset = 10;
    int length = 10;
    jarMarker.parseFromCentralDirectoryData(buffer, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testparseFromCentralDirectoryData_InvalidBuffer_Tufu5() throws ZipException {
    JarMarker jarMarker = new JarMarker();
    byte[] buffer = new byte[10];
    int offset = 1;
    int length = 10;
    jarMarker.parseFromCentralDirectoryData(buffer, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testparseFromCentralDirectoryData_NullJarMarker_HYLv7() throws ZipException {
    JarMarker jarMarker = null;
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    jarMarker.parseFromCentralDirectoryData(buffer, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData_WithLengthZero_rFjF0() throws Exception {
        JarMarker jarMarker = new JarMarker();
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        try {
            jarMarker.parseFromLocalFileData(data, offset, length);
        } catch (ZipException e) {
            fail("JarMarker doesn't expect any data");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData_WithLengthNonZero_pyEG1() throws Exception {
        JarMarker jarMarker = new JarMarker();
        byte[] data = new byte[1];
        int offset = 0;
        int length = 1;
        try {
            jarMarker.parseFromLocalFileData(data, offset, length);
            fail("JarMarker doesn't expect any data");
        } catch (ZipException e) {
            assertTrue(true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCentralDirectoryData_UfYJ0() throws Exception {
        JarMarker jarMarker = new JarMarker();
        byte[] expected = ByteUtils.EMPTY_BYTE_ARRAY;
        byte[] actual = jarMarker.getCentralDirectoryData();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCentralDirectoryDataWithCoverage_pbZk1_1() throws Exception {
        JarMarker jarMarker = new JarMarker();
        byte[] expected = ByteUtils.EMPTY_BYTE_ARRAY;
        byte[] actual = jarMarker.getCentralDirectoryData();
        expected = new byte[100];
        actual = jarMarker.getCentralDirectoryData();
        expected = new byte[50];
        actual = jarMarker.getCentralDirectoryData();
        assertArrayEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderId_MkSp0() throws Exception {
        JarMarker jarMarker = new JarMarker();
        ZipShort zipShort = jarMarker.getHeaderId();
        assertEquals(zipShort, JarMarker.ID);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderIdCoverage_RmMg1_2() throws Exception {
        JarMarker jarMarker = new JarMarker();
        ZipShort zipShort = jarMarker.getHeaderId();
        assertEquals(zipShort, jarMarker.getHeaderId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataLength_RHmU0() throws Exception {
        JarMarker jarMarker = new JarMarker();
        ZipShort zipShort = jarMarker.getLocalFileDataLength();
        assertEquals(null, zipShort);
    }
}