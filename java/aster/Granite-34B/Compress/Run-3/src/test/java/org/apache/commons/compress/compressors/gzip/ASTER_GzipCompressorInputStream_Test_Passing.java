/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithValidSignatureAndLength_Xqbb0() throws Exception {
        byte[] signature = {31, -117};
        int length = 2;
        assertTrue(GzipCompressorInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithInvalidSignatureAndLength_GrnG1() throws Exception {
        byte[] signature = {31, 123};
        int length = 2;
        assertFalse(GzipCompressorInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithInvalidSignatureButValidLength_ReeT2() throws Exception {
        byte[] signature = {31, 123};
        int length = 3;
        assertFalse(GzipCompressorInputStream.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithValidSignatureButInvalidLength_ruXf3() throws Exception {
        byte[] signature = {31, -117};
        int length = 1;
        assertFalse(GzipCompressorInputStream.matches(signature, length));
    }
}