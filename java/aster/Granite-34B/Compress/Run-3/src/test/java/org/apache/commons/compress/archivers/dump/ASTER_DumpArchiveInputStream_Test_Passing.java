/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Queue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DumpArchiveInputStream_Test_Passing {
private long entrySize;
private Map<Integer, Dirent> names = new HashMap<>();
private boolean hasHitEOF;
private long filepos;
private Queue<DumpArchiveEntry> queue;
private DumpArchiveEntry active;
private byte[] readBuf = new byte[DumpArchiveConstants.TP_SIZE];
private int readIdx;
private long entryOffset;
private int recordOffset;
DumpArchiveInputStream dumparchiveinputstream;
DumpArchiveEntry entry;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithLength32_fktR0() {
        byte[] buffer = new byte[32];
        assertTrue(DumpArchiveInputStream.matches(buffer, 32));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithLength64_xotj1() {
        byte[] buffer = new byte[64];
        assertTrue(DumpArchiveInputStream.matches(buffer, 64));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithLength128_JsAc2() {
        byte[] buffer = new byte[128];
        assertTrue(DumpArchiveInputStream.matches(buffer, 128));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithLength256_zRRF3() {
        byte[] buffer = new byte[256];
        assertTrue(DumpArchiveInputStream.matches(buffer, 256));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNextEntry() throws Exception{
        dumparchiveinputstream = mock(DumpArchiveInputStream.class);
        entrySize = 0L;
        hasHitEOF = false;
        filepos = 0L;
        queue = new LinkedList<>();
        active = mock(DumpArchiveEntry.class);
        readIdx = 0;
        entryOffset = 0L;
        recordOffset = 0;
        when(dumparchiveinputstream.getNextEntry()).thenReturn(active);
        DumpArchiveEntry entry = dumparchiveinputstream.getNextEntry();
        verify(dumparchiveinputstream, times(1)).getNextEntry();
        assertEquals(active, entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextDumpEntry_dFjH0_ylPt0() throws Exception {
        DumpArchiveInputStream object = new DumpArchiveInputStream(Mockito.mock(InputStream.class));
        DumpArchiveEntry result = object.getNextDumpEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextDumpEntryWithEncoding_lWXC1_tffi0() throws Exception {
        DumpArchiveInputStream object = new DumpArchiveInputStream(Mockito.mock(InputStream.class), "encoding");
        DumpArchiveEntry result = object.getNextDumpEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_cpPk0_oLiG0() throws Exception {
        DumpArchiveInputStream object = new DumpArchiveInputStream(Mockito.mock(InputStream.class));
        object.close();
    }
}