/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.snappy;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FramedSnappyCompressorOutputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMask_MiJK0() throws Exception {
        long x = 1234567890L;
        long expected = 9876543210L;
        long actual = FramedSnappyCompressorOutputStream.mask(x);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMaskWithNegativeValue_JXPO1() throws Exception {
        long x = -1234567890L;
        long expected = 6172839450L;
        long actual = FramedSnappyCompressorOutputStream.mask(x);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMaskWithZeroValue_nWEQ2() throws Exception {
        long x = 0L;
        long expected = 134217728L;
        long actual = FramedSnappyCompressorOutputStream.mask(x);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMaskWithMaxValue_LBVo3() throws Exception {
        long x = Long.MAX_VALUE;
        long expected = 9223372036854775807L;
        long actual = FramedSnappyCompressorOutputStream.mask(x);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMaskWithMinValue_iwAu4() throws Exception {
        long x = Long.MIN_VALUE;
        long expected = -9223372036854775808L;
        long actual = FramedSnappyCompressorOutputStream.mask(x);
        assertEquals(expected, actual);
    }
}