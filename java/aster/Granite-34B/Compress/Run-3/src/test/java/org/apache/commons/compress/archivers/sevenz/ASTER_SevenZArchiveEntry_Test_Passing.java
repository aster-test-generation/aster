/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.nio.file.attribute.FileTime;
import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.Random;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZArchiveEntry_Test_Passing {
private Iterable<? extends SevenZMethodConfiguration> contentMethods;
SevenZArchiveEntry sevenzarchiveentry;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_mUEA0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
        assertNotNull(methods);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_withoutContentMethods_TWfl2_2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
        assertFalse(methods.iterator().hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_withNullContentMethods_Rrpi4_1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setContentMethods((SevenZMethodConfiguration) null);
        Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
        assertNotNull(methods);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_withNullContentMethods_Rrpi4_2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setContentMethods((SevenZMethodConfiguration) null);
        Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
        assertFalse(methods.iterator().hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_withEmptyArrayContentMethods_hwTt5_1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setContentMethods();
        Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
        assertNotNull(methods);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_withEmptyArrayContentMethods_hwTt5_2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setContentMethods();
        Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
        assertFalse(methods.iterator().hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetHasCrc_CPGg0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCrc(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetHasCrcFalse_JaTL1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCrc(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasCreationDate_Oxpl0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasCreationDate(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasCreationDateFalse_bHDh1() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasCreationDate(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_otNd0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessDate(1234567890L);
    assertEquals(1234567890L, entry.getAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_0_LfrY1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessDate(0L);
    assertEquals(0L, entry.getAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_1_Esdb2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessDate(1L);
    assertEquals(1L, entry.getAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_99_UwXC4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessDate(99L);
    assertEquals(99L, entry.getAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_SvGr0_1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName(null);
        entry.setName("");
        entry.setName("test.txt");
        assertEquals(null, entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_SvGr0_2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName(null);
        entry.setName("");
        entry.setName("test.txt");
        assertEquals("", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_SvGr0_3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName(null);
        entry.setName("");
        entry.setName("test.txt");
        assertEquals("test.txt", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasAccessDate_qthD0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasAccessDate(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasAccessDateFalse_QhZq1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasAccessDate(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_ezRF0() {
    long ntfsTime = 0L;
    Date expected = FileTimes.ntfsTimeToDate(ntfsTime);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTimeWithMaxLongValue_KVRz1() {
    long ntfsTime = Long.MAX_VALUE;
    Date expected = FileTimes.ntfsTimeToDate(ntfsTime);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTimeWithMinLongValue_IeXZ2() {
    long ntfsTime = Long.MIN_VALUE;
    Date expected = FileTimes.ntfsTimeToDate(ntfsTime);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTimeWithRandomLongValue_JfMe3() {
    long ntfsTime = new Random().nextLong();
    Date expected = FileTimes.ntfsTimeToDate(ntfsTime);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetHasLastModifiedDate_BMpg0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasLastModifiedDate(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetHasLastModifiedDateFalse_Rdpf1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasLastModifiedDate(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrc_BUoe0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(12345);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithZeroValue_nawJ1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithNegativeValue_uczL2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(-1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithMaximumValue_ZPHe3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(Integer.MAX_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithMinimumValue_HDul4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(Integer.MIN_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithRandomValue_fnYg5() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(123);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithInvalidValue_UZUn6() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(100000);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithBoundaryValue_DYGz7() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(Integer.MAX_VALUE - 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithBoundaryValueMinusOne_vVOZ9() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(Integer.MIN_VALUE + 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test1_OzGn0() {
		SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
		sevenZArchiveEntry.setHasLastModifiedDate(true);
		assertTrue(sevenZArchiveEntry.getHasLastModifiedDate());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test2_XZhI1() {
		SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
		sevenZArchiveEntry.setHasLastModifiedDate(false);
		assertTrue(!sevenZArchiveEntry.getHasLastModifiedDate());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_jyiw0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setDirectory(true);
    assertTrue(sevenZArchiveEntry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory2_orXd1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setDirectory(false);
    assertFalse(sevenZArchiveEntry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_hVmh0() {
	SevenZArchiveEntry entry = new SevenZArchiveEntry();
	Date date = entry.getLastModifiedDate();
	assertNotNull(date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDateCoverage_UYIk1() {
	SevenZArchiveEntry entry = new SevenZArchiveEntry();
	Date date = FileTimes.toDate(entry.getLastModifiedTime());
	assertNotNull(date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAntiItem_WfuE0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAntiItem(true);
        assertEquals(true, entry.isAntiItem());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAntiItemFalse_JgLe1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAntiItem(false);
        assertEquals(false, entry.isAntiItem());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDate_FSPy0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date creationDate = new Date();
        entry.setCreationDate(creationDate);
        assertEquals(creationDate, entry.getCreationDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDateWithNull_vNWM1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCreationDate(null);
        assertEquals(null, entry.getCreationDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void hasStreamTest1_ZqfE0() {
		SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
		boolean bool0 = sevenZArchiveEntry0.hasStream();
		assertTrue(bool0);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getHasAccessDate_whenHasAccessDate_thenReturnsTrue_EKwA0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasAccessDate(true);
    assertTrue(sevenZArchiveEntry.getHasAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getHasAccessDate_whenNoAccessDate_thenReturnsFalse_ZdtE1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasAccessDate(false);
    assertFalse(sevenZArchiveEntry.getHasAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetAccessTimeWithNonNullFileTime_aNcg0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        entry.setAccessTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetAccessTimeWithNullFileTime_IBeL1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAccessTime(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetHasStreamTrue_JyCU0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasStream(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetHasStreamFalse_IikX1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasStream(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasWindowsAttributes_KAMe0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasWindowsAttributes(true);
        assertEquals(true, entry.getHasWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasWindowsAttributesFalse_jEFF1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasWindowsAttributes(false);
        assertEquals(false, entry.getHasWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNameTest_BPJE0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test.txt");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNameTest_NullName_lHFf1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNameTest_EmptyName_JvAs2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNameTest_LongName_Pvce3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("ThisIsAReallyLongFileNameThatWillProbablyCauseErrors");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNameTest_InvalidName_VCdq4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("Invalid*FileName");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNameTest_DuplicateName_rBFL5() {
        SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
        entry1.setName("test.txt");
        SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
        entry2.setName("test.txt");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNameTest_UnicodeName_XrxK6() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test\u00E9.txt");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNameTest_SpecialCharactersName_BuLB7() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test#1.txt");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNameTest_NumericName_GBQN8() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("123.txt");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNameTest_TabName_CKDy10() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test\tfile.txt");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrcValue_igbG0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrcValue(123456L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrcValueWithZeroValue_XnoV1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrcValue(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrcValueWithNegativeValue_ZcLG2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrcValue(-123456L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedSize_UsPy0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedSize(100L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedSizeWithZeroValue_YTyj1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedSize(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedSizeWithNegativeValue_RSlN2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedSize(-100L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedSizeWithMaxLongValue_iLaU3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedSize(Long.MAX_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedSizeWithMinLongValue_NQtD4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedSize(Long.MIN_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_PteS0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(100);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeZero_eHFk1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeNegative_hYMi2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(-100);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeMaxLong_NaNv3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(Long.MAX_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeMinLong_sfwo4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(Long.MIN_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_QCfw0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName(null);
        assertEquals(0, entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNonNullName_Ldmc1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("testName");
        assertEquals(entry.getName().hashCode(), entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJavaTimeToNtfsTime_MVCR0() {
        Date date = new Date(1234567890);
        long expected = FileTimes.toNtfsTime(date);
        long actual = SevenZArchiveEntry.javaTimeToNtfsTime(date);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDate_gfQe0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date date = new Date();
        entry.setAccessDate(date);
        assertEquals(date, entry.getAccessDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDateWithNull_hUke1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAccessDate(null);
        assertEquals(null, entry.getAccessDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCrc_oVZD0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrc(12345);
        assertEquals(12345, entry.getCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCrcWithNegativeValue_uZXI1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrc(-1);
        assertEquals(-1, entry.getCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCrcWithZeroValue_OfkR2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrc(0);
        assertEquals(0, entry.getCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getHasCreationDate_0_WcBR0() throws Exception {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasCreationDate();
    assertEquals(false, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getHasCreationDate_1_dIPT1() throws Exception {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasCreationDate(true);
    boolean result = sevenZArchiveEntry.getHasCreationDate();
    assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getHasCreationDate_2_OOWt2() throws Exception {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasCreationDate(false);
    boolean result = sevenZArchiveEntry.getHasCreationDate();
    assertEquals(false, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcValue_LCRZ0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrcValue(123456L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcValueWithZeroValue_VnOT1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrcValue(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcValueWithNegativeValue_FxgY2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrcValue(-123456L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_VTPA0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date date = new Date();
        entry.setLastModifiedDate(date);
        assertEquals(date, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateWithMaxDate_afXw1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date date = new Date(Long.MAX_VALUE);
        entry.setLastModifiedDate(date);
        assertEquals(date, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateWithMinDate_umRh2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date date = new Date(Long.MIN_VALUE);
        entry.setLastModifiedDate(date);
        assertEquals(date, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasCrc_cbuo0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCrc(true);
        assertEquals(true, entry.getHasCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNoCrc_mpaf1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCrc(false);
        assertEquals(false, entry.getHasCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDirectory_TAhr0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setDirectory(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDirectoryFalse_PZLP1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setDirectory(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessDate_zHhC0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        assertEquals(FileTimes.toDate(entry.getAccessTime()), entry.getAccessDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessDateCoverage_XGAc1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.getAccessDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCreationDate_hcdL0() {
		SevenZArchiveEntry entry = new SevenZArchiveEntry();
		entry.setCreationDate(1234567890L);
		assertEquals(1234567890L, entry.getCreationDate());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCreationDateMaxLongValue_aPht1() {
		SevenZArchiveEntry entry = new SevenZArchiveEntry();
		entry.setCreationDate(Long.MAX_VALUE);
		assertEquals(Long.MAX_VALUE, entry.getCreationDate());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCreationDateMinLongValue_oJWs2() {
		SevenZArchiveEntry entry = new SevenZArchiveEntry();
		entry.setCreationDate(Long.MIN_VALUE);
		assertEquals(Long.MIN_VALUE, entry.getCreationDate());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCreationDateZero_RPOg3() {
		SevenZArchiveEntry entry = new SevenZArchiveEntry();
		entry.setCreationDate(0L);
		assertEquals(0L, entry.getCreationDate());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCreationDateNegativeValue_fbCT4() {
		SevenZArchiveEntry entry = new SevenZArchiveEntry();
		entry.setCreationDate(-1234567890L);
		assertEquals(-1234567890L, entry.getCreationDate());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCrcTest_jovo0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrc(12345);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCrcTest_MinIntValue_LZSm1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrc(Integer.MIN_VALUE);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCrcTest_Zero_NwwX2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrc(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCrcTest_MaxValue_qQTa3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrc(Integer.MAX_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetContentMethods() throws Exception{
        sevenzarchiveentry = new SevenZArchiveEntry();
        contentMethods = Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.COPY), new SevenZMethodConfiguration(SevenZMethod.LZMA));
        sevenzarchiveentry.setContentMethods(contentMethods);
        verify(sevenzarchiveentry, times(1)).setContentMethods(contentMethods);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetContentMethods_DzvG0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        SevenZMethodConfiguration method1 = new SevenZMethodConfiguration(SevenZMethod.COPY);
        SevenZMethodConfiguration method2 = new SevenZMethodConfiguration(SevenZMethod.LZMA);
        entry.setContentMethods(method1, method2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetContentMethodsCoverage_fRYW1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        SevenZMethodConfiguration method = new SevenZMethodConfiguration(SevenZMethod.COPY);
        entry.setContentMethods(method);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCompressedCrcValueTest_aNvy0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        long expected = 0; // Replace with the expected value
        long actual = entry.getCompressedCrcValue();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCompressedCrcValueTest_1_YROf1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(1);
        long expected = 1;
        long actual = entry.getCompressedCrcValue();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCompressedCrcValueTest_2_JMFX2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(2);
        long expected = 2;
        long actual = entry.getCompressedCrcValue();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCompressedCrcValueTest_3_bZFw3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(3);
        long expected = 3;
        long actual = entry.getCompressedCrcValue();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCompressedCrcValueTest_4_fQly4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(4);
        long expected = 4;
        long actual = entry.getCompressedCrcValue();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCompressedCrcValueTest_5_kJpZ5() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(5);
        long expected = 5;
        long actual = entry.getCompressedCrcValue();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCompressedCrcValueTest_6_SSKx6() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(6);
        long expected = 6;
        long actual = entry.getCompressedCrcValue();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCompressedCrcValueTest_7_JxXt7() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(7);
        long expected = 7;
        long actual = entry.getCompressedCrcValue();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCompressedCrcValueTest_8_dzQD8() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(8);
        long expected = 8;
        long actual = entry.getCompressedCrcValue();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWindowsAttributes_MzIY0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(0);
        int attributes = entry.getWindowsAttributes();
        org.junit.jupiter.api.Assertions.assertEquals(0, attributes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWindowsAttributesWithNegativeValue_UtUj1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(-1);
        int attributes = entry.getWindowsAttributes();
        org.junit.jupiter.api.Assertions.assertEquals(-1, attributes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWindowsAttributesWithPositiveValue_gAbK2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(1);
        int attributes = entry.getWindowsAttributes();
        org.junit.jupiter.api.Assertions.assertEquals(1, attributes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWindowsAttributesWithMaxIntValue_KxxF3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(Integer.MAX_VALUE);
        int attributes = entry.getWindowsAttributes();
        org.junit.jupiter.api.Assertions.assertEquals(Integer.MAX_VALUE, attributes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWindowsAttributesWithMinIntValue_yAZx4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(Integer.MIN_VALUE);
        int attributes = entry.getWindowsAttributes();
        org.junit.jupiter.api.Assertions.assertEquals(Integer.MIN_VALUE, attributes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWindowsAttributes_qUpE0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWindowsAttributesWithZero_ZiHS1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWindowsAttributesWithNegativeNumber_cjZG2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(-1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWindowsAttributesWithMaxIntValue_cDDD3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(Integer.MAX_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWindowsAttributesWithMinIntValue_trvV4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(Integer.MIN_VALUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasWindowsAttributesTrue_qKjO0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasWindowsAttributes(true);
        assertTrue(entry.getHasWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasWindowsAttributesFalse_chdd1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasWindowsAttributes(false);
        assertFalse(entry.getHasWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_withMultipleContentMethods_ZVJf3_THFT0_1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        SevenZMethodConfiguration method1 = new SevenZMethodConfiguration(SevenZMethod.COPY);
        SevenZMethodConfiguration method2 = new SevenZMethodConfiguration(SevenZMethod.COPY);
        entry.setContentMethods(method1, method2);
        Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
        Iterator<? extends SevenZMethodConfiguration> iterator = methods.iterator();
        assertNotNull(methods);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_withMultipleContentMethods_ZVJf3_THFT0_2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        SevenZMethodConfiguration method1 = new SevenZMethodConfiguration(SevenZMethod.COPY);
        SevenZMethodConfiguration method2 = new SevenZMethodConfiguration(SevenZMethod.COPY);
        entry.setContentMethods(method1, method2);
        Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
        Iterator<? extends SevenZMethodConfiguration> iterator = methods.iterator();
        assertTrue(iterator.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_withMultipleContentMethods_ZVJf3_THFT0_3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        SevenZMethodConfiguration method1 = new SevenZMethodConfiguration(SevenZMethod.COPY);
        SevenZMethodConfiguration method2 = new SevenZMethodConfiguration(SevenZMethod.COPY);
        entry.setContentMethods(method1, method2);
        Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
        Iterator<? extends SevenZMethodConfiguration> iterator = methods.iterator();
        assertEquals(method1, iterator.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_withMultipleContentMethods_ZVJf3_THFT0_5() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        SevenZMethodConfiguration method1 = new SevenZMethodConfiguration(SevenZMethod.COPY);
        SevenZMethodConfiguration method2 = new SevenZMethodConfiguration(SevenZMethod.COPY);
        entry.setContentMethods(method1, method2);
        Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
        Iterator<? extends SevenZMethodConfiguration> iterator = methods.iterator();
        assertEquals(method2, iterator.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_withMultipleContentMethods_ZVJf3_THFT0_6() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        SevenZMethodConfiguration method1 = new SevenZMethodConfiguration(SevenZMethod.COPY);
        SevenZMethodConfiguration method2 = new SevenZMethodConfiguration(SevenZMethod.COPY);
        entry.setContentMethods(method1, method2);
        Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
        Iterator<? extends SevenZMethodConfiguration> iterator = methods.iterator();
        assertFalse(iterator.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTimeWithNullFileTime_Isdc1_ojea0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setLastModifiedTime(null);
        assertTrue(!entry.getHasWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNotNullFileTime_qygT0_IBOd0_1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        entry.setCreationTime(time);
        assertTrue(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNotNullFileTime_qygT0_IBOd0_2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        entry.setCreationTime(time);
        assertTrue(entry.getCreationDate().equals(time));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNullFileTime_lQtd1_KaNQ0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCreationTime(null);
        assertTrue(!entry.getHasWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompressedCrc_whenCompressedCrcIs1_xtUn1_Vtpy0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(1);
        assertEquals(1, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompressedCrc_whenCompressedCrcIsMaxInt_oErE2_vNWC0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAntiItemTrue_fwEq0_iuHg0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAntiItem(true);
        boolean result = entry.isAntiItem();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAntiItemFalse_rbfg1_StyQ0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAntiItem(false);
        boolean result = entry.isAntiItem();
        org.junit.jupiter.api.Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_SwHm0_PtNl0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(100);
        long size = entry.getSize();
        org.junit.jupiter.api.Assertions.assertEquals(100, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithNegativeValue_demW1_ezvs0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(-100);
        long size = entry.getSize();
        org.junit.jupiter.api.Assertions.assertEquals(-100, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithZeroValue_RnwL2_dapJ0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(0);
        long size = entry.getSize();
        assertEquals(0, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_withoutContentMethods_TWfl2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
        assertNotNull(methods);
        assertFalse(methods.iterator().hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_withNullContentMethods_Rrpi4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setContentMethods((SevenZMethodConfiguration) null);
        Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
        assertNotNull(methods);
        assertFalse(methods.iterator().hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_withEmptyArrayContentMethods_hwTt5() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setContentMethods();
        Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
        assertNotNull(methods);
        assertFalse(methods.iterator().hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_SvGr0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName(null);
        assertEquals(null, entry.getName());
        entry.setName("");
        assertEquals("", entry.getName());
        entry.setName("test.txt");
        assertEquals("test.txt", entry.getName());
    }
}