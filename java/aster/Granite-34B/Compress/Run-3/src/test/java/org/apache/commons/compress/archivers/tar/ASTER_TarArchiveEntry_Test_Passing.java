/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.io.IOException;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveEntry_Test_Passing {
TarArchiveEntry tararchiveentry;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_TarArchiveEntry_GybR4() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new File("file1"), "fileName1");
        assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClassObject_TarArchiveEntry_PMBU5() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new File("file1"), "fileName1");
        assertFalse(entry.equals(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentFileName_TarArchiveEntry_xTqF6() throws Exception {
        TarArchiveEntry entry1 = new TarArchiveEntry(new File("file1"), "fileName1");
        TarArchiveEntry entry2 = new TarArchiveEntry(new File("file1"), "fileName2");
        assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentFile_TarArchiveEntry_qpzR7() throws Exception {
        TarArchiveEntry entry1 = new TarArchiveEntry(new File("file1"), "fileName1");
        TarArchiveEntry entry2 = new TarArchiveEntry(new File("file2"), "fileName1");
        assertFalse(entry1.equals(entry2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithHeaderBuf_JGAV6() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[1024]);
        Date lastModifiedDate = tarArchiveEntry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithNameAndLinkFlag_ftuy7() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt", (byte) 0);
        Date lastModifiedDate = tarArchiveEntry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithNameAndLinkFlagAndPreserveAbsolutePath_JOFx8() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt", (byte) 0, true);
        Date lastModifiedDate = tarArchiveEntry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLinkTrue_uuWV0() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("name", (byte) 1);
        assertTrue(entry.isLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLinkFalse_jWxX1() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("name", (byte) 0);
        assertFalse(entry.isLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDescendent_FpzN0_1() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("dir/file.txt");
        assertTrue(entry.isDescendent(new TarArchiveEntry("dir")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDescendent_FpzN0_2() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("dir/file.txt");
        assertTrue(entry.isDescendent(new TarArchiveEntry("dir/")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDescendent_FpzN0_3() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("dir/file.txt");
        assertTrue(entry.isDescendent(new TarArchiveEntry("dir/subdir")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDescendent_FpzN0_4() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("dir/file.txt");
        assertTrue(entry.isDescendent(new TarArchiveEntry("dir/subdir/")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDescendent_FpzN0_5() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("dir/file.txt");
        assertTrue(entry.isDescendent(new TarArchiveEntry("dir/file.txt")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDescendent_FpzN0_6() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("dir/file.txt");
        assertTrue(entry.isDescendent(new TarArchiveEntry("dir/file.txt/")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDescendent_FpzN0_7() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("dir/file.txt");
        assertTrue(entry.isDescendent(new TarArchiveEntry("dir/file.txt/subfile.txt")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDescendent_FpzN0_8() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("dir/file.txt");
        assertTrue(entry.isDescendent(new TarArchiveEntry("dir/file.txt/subfile.txt/")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDescendent_FpzN0_9() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("dir/file.txt");
        assertTrue(entry.isDescendent(new TarArchiveEntry("dir/file.txt/subfile.txt/subfile.txt")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDescendent_FpzN0_10() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("dir/file.txt");
        assertTrue(entry.isDescendent(new TarArchiveEntry("dir/file.txt/subfile.txt/subfile.txt/")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_CVvt1() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
        assertEquals(entry.getName().hashCode(), entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUserName_OLUZ1() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("testName");
        tarArchiveEntry.setUserName("testUser");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastAccessTime_KCvm0() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
        FileTime lastAccessTime = entry.getLastAccessTime();
        assertNotNull(lastAccessTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastAccessTimeWithName_hrAJ6() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt");
        FileTime lastAccessTime = entry.getLastAccessTime();
        assertNotNull(lastAccessTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastAccessTimeWithNameAndLinkFlag_jTMD7() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0);
        FileTime lastAccessTime = entry.getLastAccessTime();
        assertNotNull(lastAccessTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastAccessTimeWithNameAndLinkFlagAndPreserveAbsolutePath_YCVl8() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0, true);
        FileTime lastAccessTime = entry.getLastAccessTime();
        assertNotNull(lastAccessTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWhenFileExistsAndIsRegularFile_QpUW0() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
        boolean result = entry.isFile();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWhenFileExistsAndIsDirectory_JGRw1() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new File("test"), "test");
        boolean result = entry.isFile();
        assertTrue(!result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWhenFileDoesNotExist_bgak2() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new File("nonexistent.txt"), "nonexistent.txt");
        boolean result = entry.isFile();
        assertTrue(!result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWhenNameEndsWithSlash_JvsS5() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("test/");
        boolean result = entry.isFile();
        assertTrue(!result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsGNULongLinkEntry_AUHl0() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("name", (byte) 1);
        assertTrue(entry.isGNULongLinkEntry());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsGNULongLinkEntry2_ZYdT1() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("name", (byte) 2);
        assertTrue(!entry.isGNULongLinkEntry());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTime_MMQQ1() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name");
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        tarArchiveEntry.setLastModifiedTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWhenFileExistsAndIsDirectory_bBru0() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new File("test"), "test");
        boolean result = entry.isDirectory();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWhenFileExistsAndIsNotDirectory_GoJV1() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new File("test"), "test");
        boolean result = entry.isDirectory();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWhenNameEndsWithSlash_wqyM4() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("test/");
        boolean result = entry.isDirectory();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWhenNotPaxHeaderAndNotGlobalPaxHeader_uWQm5() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("test");
        boolean result = entry.isDirectory();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPaxGNUSparse_TrMb0() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
        assertTrue(entry.isPaxGNUSparse());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPaxHeaderWithPaxExtendedHeaderLowercase_uWOV0() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("name", (byte) 'L');
        assertTrue(entry.isPaxHeader());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPaxHeaderWithPaxExtendedHeaderUppercase_ddRG1() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("name", (byte) 'K');
        assertTrue(entry.isPaxHeader());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPaxHeaderWithNonPaxExtendedHeader_jRBe2() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("name", (byte) 'A');
        assertFalse(entry.isPaxHeader());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_gXKo0() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
        assertEquals(0, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_mPXr1() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
        entry.setUserId(1000);
        assertEquals(1000, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_nSJq2() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
        entry.setUserId(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_okEn3() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
        entry.setUserId(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_nCpb4() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
        entry.setUserId(-1);
        assertEquals(-1, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_XtEL5() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
        entry.setUserId(0);
        assertEquals(0, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_mfwz6() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
        entry.setUserId(1);
        assertEquals(1, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_ozLF7() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
        entry.setUserId(2);
        assertEquals(2, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_EqmA8() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
        entry.setUserId(3);
        assertEquals(3, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_zgVh9() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
        entry.setUserId(4);
        assertEquals(4, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_zfEU10() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
        entry.setUserId(5);
        assertEquals(5, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_AAWN11() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
        entry.setUserId(6);
        assertEquals(6, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDevMinor_szyc0() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
        int devMinor = entry.getDevMinor();
        assertEquals(0, devMinor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDevMinorWithFile_pImZ1() throws IOException {
        File file = new File("test.txt");
        TarArchiveEntry entry = new TarArchiveEntry(file, "test.txt");
        int devMinor = entry.getDevMinor();
        assertEquals(0, devMinor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDevMinorWithHeaderBuf_ormI8() throws IOException {
        byte[] headerBuf = new byte[512];
        TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
        int devMinor = entry.getDevMinor();
        assertEquals(0, devMinor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDevMinorWithNameAndLinkFlag_kGOu9() throws Exception {
        String name = "test.txt";
        byte linkFlag = 0;
        TarArchiveEntry entry = new TarArchiveEntry(name, linkFlag);
        int devMinor = entry.getDevMinor();
        assertEquals(0, devMinor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDevMinorWithNameAndLinkFlagAndPreserveAbsolutePath_Onhe10() throws Exception {
        String name = "test.txt";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = true;
        TarArchiveEntry entry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        int devMinor = entry.getDevMinor();
        assertEquals(0, devMinor);
}
}