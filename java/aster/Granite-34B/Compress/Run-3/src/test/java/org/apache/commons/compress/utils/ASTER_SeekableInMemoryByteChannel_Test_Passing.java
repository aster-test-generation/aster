/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SeekableInMemoryByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray_dJxT0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        byte[] expected = new byte[10];
        assertEquals(expected, channel.array());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayWithNoArgument_VLKR1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        byte[] expected = new byte[0];
        assertEquals(expected, channel.array());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayWithByteArrayArgument_BeGp2() {
        byte[] data = new byte[5];
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
        assertEquals(data, channel.array());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testTruncateWithPositionExceedingNewSize_NZni4() {
		SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
		try {
			channel.position(100);
			channel.truncate(50);
			assertEquals(50, channel.position());
		} catch (IOException e) {
			fail("Unexpected exception");
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen_WhenChannelIsClosed_ReturnsFalse_uncr1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        channel.close();
        assertFalse(channel.isOpen());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteAfterChannelIsClosed_DAVK3() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.close();
    ByteBuffer buffer = ByteBuffer.allocate(5);
    buffer.put(new byte[] { 1, 2, 3, 4, 5 });
    buffer.flip();
    try {
        channel.write(buffer);
        fail("Expected ClosedChannelException");
    } catch (ClosedChannelException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithNegativePosition_WNbH2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        ByteBuffer buffer = ByteBuffer.allocate(10);
        buffer.put("Hello, World!".getBytes());
        buffer.position(-1);
        buffer.flip();
        try {
            channel.write(buffer);
            fail("Expected exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        } catch (IOException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithNegativeLimit_qqew3() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        ByteBuffer buffer = ByteBuffer.allocate(10);
        buffer.put("Hello, World!".getBytes());
        buffer.limit(-1);
        buffer.flip();
        try {
            channel.write(buffer);
            fail("Expected exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        } catch (IOException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testPosition_aUAS0() throws IOException {
		SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
		channel.position(5);
		assertEquals(5, channel.position());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testPosition_whenPositionIsNegative_gEPm1() {
		SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
		try {
			channel.position(-1);
			fail("Exception expected");
		} catch (IOException e) {
			assertTrue(e.getMessage().contains("Position has to be in range 0.."));
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testPosition_whenPositionIsGreaterThanMaxValue_frnf2() {
		SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
		try {
			channel.position(Integer.MAX_VALUE + 1L);
			fail("Exception expected");
		} catch (IOException e) {
			assertTrue(e.getMessage().contains("Position has to be in range 0.."));
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition_aEeC0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        assertEquals(0, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionWithConstructor_aAaI1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
        assertEquals(0, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionAftertruncate_goTA4() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
        channel.truncate(5);
        assertEquals(5, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_FVlv0() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        ByteBuffer buffer = ByteBuffer.allocate(10);
        int bytesRead = channel.read(buffer);
        assertEquals(10, bytesRead);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithNoData_OYKK1() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        ByteBuffer buffer = ByteBuffer.allocate(10);
        int bytesRead = channel.read(buffer);
        assertEquals(-1, bytesRead);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithInsufficientSpaceInBuffer_hfiP2() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        ByteBuffer buffer = ByteBuffer.allocate(1000);
        int bytesRead = channel.read(buffer);
        assertEquals(100, bytesRead);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_EyCG0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        assertEquals(100, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithNoArgumentConstructor_Znsv1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        assertEquals(0, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithByteArrayArgumentConstructor_CtPN2() {
        byte[] data = new byte[50];
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
        assertEquals(50, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testTruncateWithNegativeSize_ZQhW2_RUEN0() {
		SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			channel.truncate(-100);
		});
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testTruncateWithSizeExceedingIntegerMaxValue_GJdv3_XQAX0() {
		SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			channel.truncate(Integer.MAX_VALUE + 1L);
		});
	}
}