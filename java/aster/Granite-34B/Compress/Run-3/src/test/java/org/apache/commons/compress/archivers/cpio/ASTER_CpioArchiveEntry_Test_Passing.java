/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBlockDeviceTrue_mEmM0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertTrue(entry.isBlockDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBlockDeviceFalse_mUGA1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertFalse(entry.isBlockDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChksum_hmVA0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
        assertEquals(0xFFFFFFFFL, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getTimeTest_HqWY0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        long time = entry.getTime();
        assertEquals(0, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getTimeTestWithFormat_fqZX1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
        long time = entry.getTime();
        assertEquals(100L, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getTimeTestWithFile_FIbx3() {
        File file = new File("input.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "entryName");
        long time = entry.getTime();
        assertEquals(file.lastModified(), time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setGID_shouldSetGID_hkXP0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setGID(123);
        assert entry.getGID() == 123;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getAlignmentBoundaryTest_Qsgc0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        int alignmentBoundary = entry.getAlignmentBoundary();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getAlignmentBoundaryWithFormatTest_nyBA1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
        int alignmentBoundary = entry.getAlignmentBoundary();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName2_bWID1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNetworkTrue_COGH0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
        assertTrue(entry.isNetwork());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNetworkFalse_nqlh1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 0L);
        assertFalse(entry.isNetwork());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMaj_PKnP0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        long result = entry.getRemoteDeviceMaj();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMajWithFormatAndName_USNK1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "name");
        long result = entry.getRemoteDeviceMaj();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMajWithFormatNameAndSize_VQHF2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 3, "name", 100L);
        long result = entry.getRemoteDeviceMaj();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMajWithFormatName_VGVy5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 5, "name");
        long result = entry.getRemoteDeviceMaj();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMajWithFormatinputFileAndEntryName_FOOY6() {
        File file = new File("input.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 6, file, "entryName");
        long result = entry.getRemoteDeviceMaj();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMajWithFormatNameAndSize_RQHO7() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 7, "name", 100L);
        long result = entry.getRemoteDeviceMaj();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMajWithinputFileAndEntryName_Czak8() {
        File file = new File("input.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "entryName");
        long result = entry.getRemoteDeviceMaj();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setRemoteDeviceMajTest_zyiC0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setRemoteDeviceMaj(100L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setRemoteDeviceMajTest2_ROzP1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 100L);
        entry.setRemoteDeviceMaj(200L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMin_HmMm0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertEquals(0, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMinWithSize_lEIJ1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "name", 100L);
        assertEquals(0, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMinWithName_UdjA4() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMinWithFile_Lrbm5() {
        File file = new File("input.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "entryName");
        assertEquals(0, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMinWithFormatAndFile_BOtx6() {
        File file = new File("input.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 4, file, "entryName");
        assertEquals(0, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMinWithNameAndSize_OKeH7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
        assertEquals(0, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_EeYz0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 100L);
        Date date = entry.getLastModifiedDate();
        assertEquals(new Date(1000 * entry.getTime()), date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithFile_nxYB1() {
        File file = new File("input.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "entryName");
        Date date = entry.getLastModifiedDate();
        assertEquals(new Date(1000 * entry.getTime()), date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDevice_arqX0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
        assertEquals(100L, entry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID_oVUN0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertEquals(0, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUIDWithSize_qfxg1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
        assertEquals(0, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUIDWithFile_pnkq5() {
        File file = new File("test.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "test");
        assertEquals(0, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUIDWithFormatName_JXaG6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
        assertEquals(0, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUIDWithFormatNameAndFile_tYar9() {
        File file = new File("test.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, file, "test");
        assertEquals(0, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMajWithFile_KSKI5() {
    File file = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(file, new String("name"));
    long deviceMaj = entry.getDeviceMaj();
    assertEquals(0, deviceMaj);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat_KfGi0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertEquals((short) 1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormatWithSize_DyUa1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
        assertEquals((short) 1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormatWithName_pSSG4() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals((short) 0, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormatWithFile_tPNe5() {
        File file = new File("input.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "entryName");
        assertEquals((short) 0, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormatWithNameAndSize_HqfG6() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
        assertEquals((short) 0, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksum_HnOd0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setChksum(123456L);
        assertEquals(123456L & 0xFFFFFFFFL, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksumWithNegativeValue_uGGz1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setChksum(-123456L);
        assertEquals(-123456L & 0xFFFFFFFFL, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksumWithOverflowValue_eSmb2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setChksum(1234567890123456789L);
        assertEquals(1234567890123456789L & 0xFFFFFFFFL, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDevice_cMGE0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        long device = entry.getDevice();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDevice_hDxi1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 100L);
        long device = entry.getDevice();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDevice_iQMv2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        long device = entry.getDevice();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDevice_VmbV5() {
        short format = 0;
        String name = "name";
        CpioArchiveEntry entry = new CpioArchiveEntry(format, name);
        long device = entry.getDevice();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDevice_RzCK6() {
        short format = 0;
        File file = new File("inputFile");
        String entryName = "entryName";
        CpioArchiveEntry entry = new CpioArchiveEntry(format, file, entryName);
        long device = entry.getDevice();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDevice_mCbk7() {
        String name = "name";
        long size = 100L;
        CpioArchiveEntry entry = new CpioArchiveEntry(name, size);
        long device = entry.getDevice();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDevice_tUyr8() {
        File file = new File("inputFile");
        String entryName = "entryName";
        CpioArchiveEntry entry = new CpioArchiveEntry(file, entryName);
        long device = entry.getDevice();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMin_TOTQ0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        long expected = 0; // Replace with the expected value
        long actual = entry.getDeviceMin();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMinWithFormat_XiTT1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
        long expected = 0; // Replace with the expected value
        long actual = entry.getDeviceMin();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMinWithFormatAndName_xijI4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
        long expected = 0; // Replace with the expected value
        long actual = entry.getDeviceMin();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMinWithFormatAndFile_ugkN5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("input"), "entry");
        long expected = 0; // Replace with the expected value
        long actual = entry.getDeviceMin();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMinWithNameAndSize_sXSH6() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
        long expected = 0; // Replace with the expected value
        long actual = entry.getDeviceMin();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMinWithFile_bMya7() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("input"), "entry");
        long expected = 0; // Replace with the expected value
        long actual = entry.getDeviceMin();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithNullName_Wecj0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((String) null);
        assertEquals(0, entry.getHeaderPadCount(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithEmptyName_zVdN1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("");
        assertEquals(0, entry.getHeaderPadCount(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithNonEmptyNameAndNullCharset_IpTP2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(0, entry.getHeaderPadCount(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithNonEmptyNameAndCharset_txIm3() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(4, entry.getHeaderPadCount(Charset.forName("UTF-8")));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithNegativeNameLength_rhpx4() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(0, entry.getHeaderPadCount(-1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithZeroNameLength_zVTm5() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(0, entry.getHeaderPadCount(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithPositiveNameLength_Uudg6() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(4, entry.getHeaderPadCount(4));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPipeWithPipeMode_DuaI0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertTrue(entry.isPipe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPipeWithoutPipeMode_ifUX1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertFalse(entry.isPipe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMin_KWwi0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        entry.setDeviceMin(100L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMinWithFile_HYMt1() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("test.txt"), "testEntry");
        entry.setDeviceMin(200L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSize_yfib0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithFormatAndName_Ihxd1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithFormatName_Ijyf5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithFormatinputFileAndEntryName_xkYo6() {
        File file = new File("test");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, file, "test");
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithinputFileAndEntryName_XXdP8() {
        File file = new File("test");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "test");
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNameTest1_HXdX0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setName("test");
        assert entry.getName().equals("test");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNameTest2_Jlof1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100L);
        entry.setName("test2");
        assert entry.getName().equals("test2");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNameTest3_icdO2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        entry.setName("test3");
        assert entry.getName().equals("test3");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNameTest6_UcjD5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        entry.setName("test6");
        assert entry.getName().equals("test6");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNameTest7_xEkT6() {
        File file = new File("test.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, file, "test");
        entry.setName("test7");
        assert entry.getName().equals("test7");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNameTest8_gSIE7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test", 100L);
        entry.setName("test8");
        assert entry.getName().equals("test8");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNameTest9_jjoa8() {
        File file = new File("test.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "test");
        entry.setName("test9");
        assert entry.getName().equals("test9");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRegularFile_ModeIsRegularFile_TpKd0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0100644);
        assertTrue(entry.isRegularFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRegularFile_ModeIsNotRegularFile_IpTw1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0100666);
        assertFalse(entry.isRegularFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSize_invalidSize_throwsException_pTgI1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        try {
            entry.setSize(-1);
        } catch (IllegalArgumentException e) {
            assert e.getMessage().equals("Invalid entry size <-1>");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSize_exceedsMaximumSize_throwsException_RoyT2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        try {
            entry.setSize(0x100000000L);
        } catch (IllegalArgumentException e) {
            assert e.getMessage().equals("Invalid entry size <2147483648>");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDevice_TAol0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(100L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceWithFile_AiAv1() throws IOException {
        File file = new File("test.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "testEntry");
        entry.setDevice(100L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSocket_AIkt0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertTrue(entry.isSocket());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSocketWithSize_neFN1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
        assertTrue(entry.isSocket());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithFile_hmdb1() {
    File file = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry(file, "test");
    assertEquals(file.lastModified(), entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_ZdSl0() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "file1.txt", 1024L);
        CpioArchiveEntry entry2 = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "file2.txt", 2048L);
        assertEquals(entry1.hashCode(), entry2.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_AuXc1() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("file1.txt");
        CpioArchiveEntry entry2 = new CpioArchiveEntry("file2.txt");
        assertEquals(entry1.hashCode(), entry2.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_snnB2() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "file1.txt");
        CpioArchiveEntry entry2 = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "file2.txt");
        assertEquals(entry1.hashCode(), entry2.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_sFQq3() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, new File("file1.txt"), "entry1");
        CpioArchiveEntry entry2 = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, new File("file2.txt"), "entry2");
        assertEquals(entry1.hashCode(), entry2.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_SPYt6() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry(new File("file1.txt"), "entry1");
        CpioArchiveEntry entry2 = new CpioArchiveEntry(new File("file2.txt"), "entry2");
        assertEquals(entry1.hashCode(), entry2.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_sBBG7() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("file1.txt", 1024L);
        CpioArchiveEntry entry2 = new CpioArchiveEntry("file2.txt", 2048L);
        assertEquals(entry1.hashCode(), entry2.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTime_IiUj0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setTime(123456789L);
        assertEquals(123456789L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithFile_Lwni1() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("test.txt"), "test.txt");
        entry.setTime(123456789L);
        assertEquals(123456789L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataPadCountWithZeroAlignmentBoundary_toxE0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getDataPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetHeaderPadCountWithZeroAlignmentBoundary_awsy0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        int padCount = entry.getHeaderPadCount(100);
        org.junit.jupiter.api.Assertions.assertEquals(0, padCount);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetHeaderPadCountWithNonZeroAlignmentBoundaryAndNameSize_AzvB1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100);
        int padCount = entry.getHeaderPadCount(100);
        org.junit.jupiter.api.Assertions.assertEquals(10, padCount);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetHeaderPadCountWithNonZeroAlignmentBoundaryAndNoNameSize_Iryg2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        int padCount = entry.getHeaderPadCount(0);
        org.junit.jupiter.api.Assertions.assertEquals(11, padCount);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetHeaderPadCountWithNonZeroAlignmentBoundaryAndNameSizeAndRemainder_yibX3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100);
        int padCount = entry.getHeaderPadCount(101);
        org.junit.jupiter.api.Assertions.assertEquals(9, padCount);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount_YeKH0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithSize_CJoa1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100L);
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithFormatAndName_dvBW4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithFormatAndFile_XaHP5() {
        File file = new File("test.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, file, "test");
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithFile_thvd6() {
        File file = new File("test.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "test");
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountWithNameAndSize_bSvg7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test", 100L);
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDevice_GZOR0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setRemoteDevice(100L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceWithFile_bfBT1() throws IOException {
        File inputFile = new File("example.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "entryName");
        entry.setRemoteDevice(200L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUIDTest1_ISSm0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setUID(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUIDTest2_CAVs1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0);
        entry.setUID(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUIDTest3_JhqM2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        entry.setUID(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUIDTest6_ssYC5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        entry.setUID(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUIDTest7_xKTp6() {
        File file = new File("inputFile");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "entryName");
        entry.setUID(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUIDTest8_ZLyl7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0);
        entry.setUID(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUIDTest9_Qnwm8() {
        File file = new File("inputFile");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, file, "entryName");
        entry.setUID(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMode_shouldThrowExceptionForInvalidMode_mVoE8() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID_nbmq0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGIDWithSize_KANf1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
        assertEquals(0, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGIDWithFile_qnPR4() {
        File file = new File("inputFile");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "entryName");
        assertEquals(0, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGIDWithFormatNameAndSize_zqxX5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 3, "name", 200L);
        assertEquals(0, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGIDWithFormatName_qMNy6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 4, "name");
        assertEquals(0, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_toGO0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertEquals(0, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithSizeParameter_KLgl1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
        assertEquals(100, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithFormatName_JGgm4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
        assertEquals(0, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithFormatFileAndEntryName_GtzY5() {
        File file = new File("test.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, file, "test");
        assertEquals(file.length(), entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithNameAndSizeParameter_Wikz6() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test", 100L);
        assertEquals(100, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithFileAndEntryName_alZR7() {
        File file = new File("test.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "test");
        assertEquals(file.length(), entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfLinks_YDbv0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setNumberOfLinks(100L);
    assertEquals(100L, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfLinksWithNegativeValue_ISXg1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setNumberOfLinks(-100L);
    assertEquals(-100L, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfLinksWithZeroValue_IAdP2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setNumberOfLinks(0L);
    assertEquals(0L, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumberOfLinksWhenNlinkIsZeroAndEntryIsDirectory_NRMn0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0);
        assertEquals(2, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumberOfLinksWhenNlinkIsZeroAndEntryIsNotDirectory_EENR1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 0);
        assertEquals(1, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumberOfLinksWhenNlinkIsNonZero_pXGq2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "name", 10);
        assertEquals(10, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetRemoteDeviceMin_myGH0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        entry.setRemoteDeviceMin(100);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetRemoteDeviceMinWithFile_EMBT1() throws IOException {
        File inputFile = new File("example.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "entryName");
        entry.setRemoteDeviceMin(200);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInode_aCUA0_pUdA0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setInode(100L);
    assertEquals(100L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInodeWithNegativeValue_sZCH1_iPky0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setInode(-1L);
    assertEquals(-1L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInodeWithZeroValue_zMgF2_ZTTX0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2);
    entry.setInode(0L);
    assertEquals(0L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInodeWithMaxLongValue_gxSq3_TjeD0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setInode(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInodeWithMinLongValue_cctJ4_UiTO0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setInode(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGIDWithFormatNameAndFile_HVln7_KwpA0() {
        File file = new File("inputFile");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 5, "name", file.length());
        assertEquals(0, entry.getGID());
    }
}