/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.Collections;
import java.util.List;
import org.apache.commons.compress.harmony.unpack200.Segment;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassConstantPool_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEntries_zMLw0() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        List<ClassFileEntry> entries = classConstantPool.entries();
        assertEquals(Collections.emptyList(), entries);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void resolveTest_LLDn0() throws Exception {
    Segment segment = new Segment();
    ClassConstantPool classConstantPool = new ClassConstantPool();
    classConstantPool.resolve(segment);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSortClassPoolWithNoEntries_vyHc0() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        classConstantPool.sortClassPool();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddNestedEntries_1_pGWh0() throws Exception {
    ClassConstantPool classConstantPool = new ClassConstantPool();
    classConstantPool.addNestedEntries();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithNullEntry_TtlS3() throws Exception {
    ClassConstantPool classConstantPool = new ClassConstantPool();
    ClassFileEntry entry = null;
    ClassFileEntry result = classConstantPool.add(entry);
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddWithNestedEntries_NullEntry_KvFf1() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        ClassFileEntry entry = null;
        ClassFileEntry result = classConstantPool.addWithNestedEntries(entry);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_bxhl0() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int expectedSize = 10; // Replace with the expected size
        assertEquals(expectedSize, classConstantPool.size());
    }
}