/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.archivers.ArchiveException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArjArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ZeNP0() {
    byte[] signature = new byte[2];
    signature[0] = (byte) 0xff;
    signature[1] = (byte) 0xff;
    assertTrue(ArjArchiveInputStream.matches(signature, 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithLengthOne_qloW1() {
    byte[] signature = new byte[1];
    signature[0] = (byte) 0xff;
    assertTrue(ArjArchiveInputStream.matches(signature, 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithLengthZero_JTNO2() {
    byte[] signature = new byte[0];
    assertTrue(ArjArchiveInputStream.matches(signature, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithLengthThree_BVNn3() {
    byte[] signature = new byte[3];
    signature[0] = (byte) 0xff;
    signature[1] = (byte) 0xff;
    signature[2] = (byte) 0xff;
    assertTrue(ArjArchiveInputStream.matches(signature, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithLengthFour_ELFU4() {
    byte[] signature = new byte[4];
    signature[0] = (byte) 0xff;
    signature[1] = (byte) 0xff;
    signature[2] = (byte) 0xff;
    signature[3] = (byte) 0xff;
    assertTrue(ArjArchiveInputStream.matches(signature, 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithLengthFive_xVFU5() {
    byte[] signature = new byte[5];
    signature[0] = (byte) 0xff;
    signature[1] = (byte) 0xff;
    signature[2] = (byte) 0xff;
    signature[3] = (byte) 0xff;
    signature[4] = (byte) 0xff;
    assertTrue(ArjArchiveInputStream.matches(signature, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithLengthSix_qWXp6() {
    byte[] signature = new byte[6];
    signature[0] = (byte) 0xff;
    signature[1] = (byte) 0xff;
    signature[2] = (byte) 0xff;
    signature[3] = (byte) 0xff;
    signature[4] = (byte) 0xff;
    signature[5] = (byte) 0xff;
    assertTrue(ArjArchiveInputStream.matches(signature, 6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithLengthSeven_kNsq7() {
    byte[] signature = new byte[7];
    signature[0] = (byte) 0xff;
    signature[1] = (byte) 0xff;
    signature[2] = (byte) 0xff;
    signature[3] = (byte) 0xff;
    signature[4] = (byte) 0xff;
    signature[5] = (byte) 0xff;
    signature[6] = (byte) 0xff;
    assertTrue(ArjArchiveInputStream.matches(signature, 7));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithLengthEight_DdDf8() {
    byte[] signature = new byte[8];
    signature[0] = (byte) 0xff;
    signature[1] = (byte) 0xff;
    signature[2] = (byte) 0xff;
    signature[3] = (byte) 0xff;
    signature[4] = (byte) 0xff;
    signature[5] = (byte) 0xff;
    signature[6] = (byte) 0xff;
    signature[7] = (byte) 0xff;
    assertTrue(ArjArchiveInputStream.matches(signature, 8));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithValidInputStream_DLqn0() throws ArchiveException, IOException {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[10]));
        ArjArchiveEntry arjArchiveEntry = arjArchiveInputStream.getNextEntry();
        assertNull(arjArchiveEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithNullInputStream_WweV1() throws ArchiveException, IOException {
        try {
            new ArjArchiveInputStream(null);
            fail("Expected ArchiveException");
        } catch (ArchiveException e) {
            assertTrue(true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithClosedInputStream_Qsse2() throws ArchiveException, IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[10]);
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        inputStream.close();
        try {
            arjArchiveInputStream.getNextEntry();
            fail("Expected IOException");
        } catch (IOException e) {
            assertTrue(true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithNegativeSize_SWvi3() throws ArchiveException, IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[10]);
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        try {
            arjArchiveInputStream.getNextEntry();
            fail("Expected IOException");
        } catch (IOException e) {
            assertTrue(true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithValidLocalFileHeader_rnOG5() throws ArchiveException, IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[10]);
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        ArjArchiveEntry arjArchiveEntry = arjArchiveInputStream.getNextEntry();
        assertEquals(0, arjArchiveEntry.getHostOs());
        assertEquals(0, arjArchiveEntry.getMode());
        assertEquals("", arjArchiveEntry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithNullLocalFileHeader_QbrZ6() throws ArchiveException, IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[10]);
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        ArjArchiveEntry arjArchiveEntry = arjArchiveInputStream.getNextEntry();
        assertNull(arjArchiveEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithNegativeLocalFileHeaderSize_fUok8() throws ArchiveException, IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[10]);
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        ArjArchiveEntry arjArchiveEntry = arjArchiveInputStream.getNextEntry();
        try {
            arjArchiveInputStream.getNextEntry();
            fail("Expected IOException");
        } catch (IOException e) {
            assertTrue(true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithZeroLocalFileHeaderSize_UPxz9() throws ArchiveException, IOException {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArjArchiveInputStream_TMMp0() throws ArchiveException {
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        assertNotNull(arjArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArjArchiveInputStreamWithCharsetName_DTFO1() throws ArchiveException {
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        String charsetName = "UTF-8";
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream, charsetName);
        assertNotNull(arjArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_QhUF0() throws ArchiveException, IOException {
        InputStream inputStream = mock(InputStream.class);
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        arjArchiveInputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithException_kNbk1() throws ArchiveException, IOException {
        InputStream inputStream = mock(InputStream.class);
        doThrow(new IOException()).when(inputStream).close();
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        try {
            arjArchiveInputStream.close();
            fail("Exception expected");
        } catch (IOException e) {
            assertTrue(true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithValidLocalFileHeader_rnOG5_1() throws ArchiveException, IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[10]);
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        ArjArchiveEntry arjArchiveEntry = arjArchiveInputStream.getNextEntry();
        assertEquals(0, arjArchiveEntry.getHostOs());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithValidLocalFileHeader_rnOG5_2() throws ArchiveException, IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[10]);
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        ArjArchiveEntry arjArchiveEntry = arjArchiveInputStream.getNextEntry();
        assertEquals(0, arjArchiveEntry.getMode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryWithValidLocalFileHeader_rnOG5_3() throws ArchiveException, IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[10]);
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        ArjArchiveEntry arjArchiveEntry = arjArchiveInputStream.getNextEntry();
        assertEquals("", arjArchiveEntry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_withStoredMethod_shouldReturnEntryWithCorrectValues_xtoQ0_hMOK0() throws IOException {
        ArjArchiveInputStream archiveInputStream = null;
        try {
            archiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
            ArjArchiveEntry entry = archiveInputStream.getNextEntry();
            assertEquals(0, entry.getLastModifiedDate().getTime());
            assertEquals(0, entry.getSize());
            assertEquals(0, entry.getHostOs());
            assertEquals(0, entry.hashCode());
            assertEquals(0, entry.getUnixMode());
            assertEquals("", entry.getName());
            assertEquals(0, entry.getMode());
        } catch (ArchiveException e) {
            e.printStackTrace();
        } finally {
            if (archiveInputStream != null) {
                archiveInputStream.close();
            }
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_OneEntry_mvWt1_nfmI0() throws IOException {
        final byte[] data = new byte[] {
        };
        try {
            final ArjArchiveInputStream ais = new ArjArchiveInputStream(new ByteArrayInputStream(data));
            assertNotNull(ais.getNextEntry());
        } catch (ArchiveException e) {
            fail("ArchiveException should not be thrown");
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextEntryTest1_oumf0_iGQr0() throws IOException {
    ArjArchiveInputStream obj = null;
    try {
        obj = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    } catch (ArchiveException e) {
        e.printStackTrace();
    }
    ArjArchiveEntry result = obj.getNextEntry();
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextEntryTest2_DeQd1_owSG0() throws IOException {
    ArjArchiveInputStream obj = null;
    try {
        obj = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    } catch (ArchiveException e) {
        e.printStackTrace();
    }
    obj.getNextEntry();
    obj.close();
    ArjArchiveEntry result = obj.getNextEntry();
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextEntryTest4_ShSH3_oqIy0() throws IOException {
    ArjArchiveInputStream obj = null;
    try {
        obj = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    } catch (ArchiveException e) {
        e.printStackTrace();
    }
    obj.getNextEntry();
    obj.close();
    obj.getNextEntry();
    obj.getNextEntry();
    ArjArchiveEntry result = obj.getNextEntry();
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_WithInputStream_AHME1_UnUS0() throws ArchiveException, IOException {
        byte[] bytes = new byte[100];
        InputStream inputStream = new ByteArrayInputStream(bytes);
        ArjArchiveInputStream archiveInputStream = new ArjArchiveInputStream(inputStream);
        archiveInputStream.getNextEntry();
        archiveInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntry_WithInputStreamAndCharsetName_yHoF2_ddsO0() throws ArchiveException, IOException {
        byte[] bytes = new byte[100];
        InputStream inputStream = new ByteArrayInputStream(bytes);
        ArjArchiveInputStream archiveInputStream = new ArjArchiveInputStream(inputStream, "UTF-8");
        assertNotNull(archiveInputStream.getNextEntry());
        archiveInputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchiveComment_NPRu0_xGAS0() {
        ArjArchiveInputStream arjArchiveInputStream = null;
        try {
            arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        } catch (ArchiveException e) {
            e.printStackTrace();
        }
        assertEquals(null, arjArchiveInputStream.getArchiveComment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchiveCommentWithCharset_PacH1_RlOE0() {
        try {
            ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
            assertEquals(null, arjArchiveInputStream.getArchiveComment());
        } catch (ArchiveException e) {
            fail("Exception not expected");
        }
    }
}