/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ResourceAlignmentExtraField_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResourceAlignmentExtraField_zCJf0_1() throws Exception {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1, true);
        assertEquals(1, resourceAlignmentExtraField.getAlignment());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResourceAlignmentExtraField2_fcNA1_1() throws Exception {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1);
        assertEquals(1, resourceAlignmentExtraField.getAlignment());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResourceAlignmentExtraField3_EUqZ2_1() throws Exception {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField();
        assertEquals(0, resourceAlignmentExtraField.getAlignment());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResourceAlignmentExtraField4_ydCW3_1() throws Exception {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1, true, 1);
        assertEquals(1, resourceAlignmentExtraField.getAlignment());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllowMethodChange_CHNC0() throws Exception {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1, true);
        boolean actual = resourceAlignmentExtraField.allowMethodChange();
        boolean expected = true;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllowMethodChange2_iVSQ1() throws Exception {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1);
        boolean actual = resourceAlignmentExtraField.allowMethodChange();
        boolean expected = false;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllowMethodChange3_brDl2() throws Exception {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField();
        boolean actual = resourceAlignmentExtraField.allowMethodChange();
        boolean expected = false;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllowMethodChange4_NJjX3() throws Exception {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1, true, 1);
        boolean actual = resourceAlignmentExtraField.allowMethodChange();
        boolean expected = true;
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryData_defaultValues_AiNt0() throws Exception {
        ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField();
        byte[] expected = ZipShort.getBytes(0);
        assertArrayEquals(expected, extraField.getCentralDirectoryData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryData_withAlignment_bBLo1() throws Exception {
        ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField(16);
        byte[] expected = ZipShort.getBytes(16);
        assertArrayEquals(expected, extraField.getCentralDirectoryData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetHeaderId_UELS0() throws Exception {
		ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1, true);
		ZipShort result = resourceAlignmentExtraField.getHeaderId();
		assertEquals(result, ZipShort.getBytes(1));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetHeaderId2_njak1() throws Exception {
		ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1, true, 1);
		ZipShort result = resourceAlignmentExtraField.getHeaderId();
		assertEquals(result, ZipShort.getBytes(1));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetHeaderId3_dwHn2() throws Exception {
		ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1);
		ZipShort result = resourceAlignmentExtraField.getHeaderId();
		assertEquals(result, ZipShort.getBytes(1));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetHeaderId4_xTLk3() throws Exception {
		ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField();
		ZipShort result = resourceAlignmentExtraField.getHeaderId();
		assertEquals(result, ZipShort.getBytes(0));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetLocalFileDataLength_RFbo0() throws Exception {
		ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1, true, 2);
		ZipShort zipShort = resourceAlignmentExtraField.getLocalFileDataLength();
		assertEquals(new ZipShort(4), zipShort);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetLocalFileDataLength_wkqS1() throws Exception {
		ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1, true);
		ZipShort zipShort = resourceAlignmentExtraField.getLocalFileDataLength();
		assertEquals(new ZipShort(3), zipShort);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetLocalFileDataLength_ySoL2() throws Exception {
		ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1);
		ZipShort zipShort = resourceAlignmentExtraField.getLocalFileDataLength();
		assertEquals(new ZipShort(2), zipShort);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetLocalFileDataLength_XAie3() throws Exception {
		ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField();
		ZipShort zipShort = resourceAlignmentExtraField.getLocalFileDataLength();
		assertEquals(new ZipShort(1), zipShort);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLengthTest_mAUH0() throws Exception {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1, true);
        ZipShort expected = new ZipShort(ResourceAlignmentExtraField.BASE_SIZE);
        ZipShort actual = resourceAlignmentExtraField.getCentralDirectoryLength();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLengthTest_GgAB1() throws Exception {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1, true, 1);
        ZipShort expected = new ZipShort(ResourceAlignmentExtraField.BASE_SIZE);
        ZipShort actual = resourceAlignmentExtraField.getCentralDirectoryLength();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLengthTest_gNHW2() throws Exception {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(1);
        ZipShort expected = new ZipShort(ResourceAlignmentExtraField.BASE_SIZE);
        ZipShort actual = resourceAlignmentExtraField.getCentralDirectoryLength();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCentralDirectoryLengthTest_atbj3() throws Exception {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField();
        ZipShort expected = new ZipShort(ResourceAlignmentExtraField.BASE_SIZE);
        ZipShort actual = resourceAlignmentExtraField.getCentralDirectoryLength();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData_WhenLengthIsShort_ThrowsZipException_uTOg0_1() throws Exception {
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 9;
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField();
        Exception exception = org.junit.jupiter.api.Assertions.assertThrows(ZipException.class,
                () -> resourceAlignmentExtraField.parseFromCentralDirectoryData(buffer, offset, length));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLocalFileDataData_withAlignmentAndAllowMethodChangeFlags_returnsCorrectData_GeVn0() throws Exception {
        ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField(16, true);
        byte[] expectedData = {0x10, 0x00, 0x00, 0x00, 0x01, 0x00};
        assertArrayEquals(expectedData, extraField.getLocalFileDataData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLocalFileDataData_withOnlyAlignmentFlag_returnsCorrectData_Msem1() throws Exception {
        ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField(16);
        byte[] expectedData = {0x10, 0x00, 0x00, 0x00};
        assertArrayEquals(expectedData, extraField.getLocalFileDataData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLocalFileDataData_withDefaultValues_returnsCorrectData_ToJH2() throws Exception {
        ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField();
        byte[] expectedData = {0x00, 0x00, 0x00, 0x00};
        assertArrayEquals(expectedData, extraField.getLocalFileDataData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLocalFileDataData_withAllParameters_returnsCorrectData_LIXi3() throws Exception {
        ResourceAlignmentExtraField extraField = new ResourceAlignmentExtraField(16, true, 4);
        byte[] expectedData = {0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00};
        assertArrayEquals(expectedData, extraField.getLocalFileDataData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignment_MPri0() throws Exception {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(16, true);
        short alignment = resourceAlignmentExtraField.getAlignment();
        assertEquals(16, alignment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentWithNoArgs_pScD1() throws Exception {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField();
        short alignment = resourceAlignmentExtraField.getAlignment();
        assertEquals(0, alignment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentWithArgs_atHM2() throws Exception {
        ResourceAlignmentExtraField resourceAlignmentExtraField = new ResourceAlignmentExtraField(32, false, 8);
        short alignment = resourceAlignmentExtraField.getAlignment();
        assertEquals(32, alignment);
    }
}