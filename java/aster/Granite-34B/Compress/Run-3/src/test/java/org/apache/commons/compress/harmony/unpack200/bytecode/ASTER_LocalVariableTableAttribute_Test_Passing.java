/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.Segment;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToString_gDym0() throws Exception {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(1, new int[]{1}, new int[]{2}, new CPUTF8[]{new CPUTF8("name1")}, new CPUTF8[]{new CPUTF8("descriptor1")}, new int[]{3});
        assertEquals("LocalVariableTable: 1 variables", attribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getNestedClassFileEntries_1_LOTh0_1() throws Exception {
        LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(1, new int[]{1, 2}, new int[]{3, 4}, new CPUTF8[]{new CPUTF8("a"), new CPUTF8("b")}, new CPUTF8[]{new CPUTF8("c"), new CPUTF8("d")}, new int[]{5, 6});
        ClassFileEntry[] nestedClassFileEntries = localVariableTableAttribute.getNestedClassFileEntries();
        assertNotNull(nestedClassFileEntries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getNestedClassFileEntries_1_LOTh0_2() throws Exception {
        LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(1, new int[]{1, 2}, new int[]{3, 4}, new CPUTF8[]{new CPUTF8("a"), new CPUTF8("b")}, new CPUTF8[]{new CPUTF8("c"), new CPUTF8("d")}, new int[]{5, 6});
        ClassFileEntry[] nestedClassFileEntries = localVariableTableAttribute.getNestedClassFileEntries();
        assertEquals(2, nestedClassFileEntries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getNestedClassFileEntries_2_MiZQ1_1() throws Exception {
        LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(2, new int[]{1, 2, 3, 4}, new int[]{5, 6, 7, 8}, new CPUTF8[]{new CPUTF8("a"), new CPUTF8("b"), new CPUTF8("c"), new CPUTF8("d")}, new CPUTF8[]{new CPUTF8("e"), new CPUTF8("f"), new CPUTF8("g"), new CPUTF8("h")}, new int[]{9, 10, 11, 12});
        ClassFileEntry[] nestedClassFileEntries = localVariableTableAttribute.getNestedClassFileEntries();
        assertNotNull(nestedClassFileEntries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getNestedClassFileEntries_2_MiZQ1_2() throws Exception {
        LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(2, new int[]{1, 2, 3, 4}, new int[]{5, 6, 7, 8}, new CPUTF8[]{new CPUTF8("a"), new CPUTF8("b"), new CPUTF8("c"), new CPUTF8("d")}, new CPUTF8[]{new CPUTF8("e"), new CPUTF8("f"), new CPUTF8("g"), new CPUTF8("h")}, new int[]{9, 10, 11, 12});
        ClassFileEntry[] nestedClassFileEntries = localVariableTableAttribute.getNestedClassFileEntries();
        assertEquals(4, nestedClassFileEntries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getStartPCsTest_KCBz0() throws Exception {
        LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(1, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2"), new CPUTF8("descriptor3")}, new int[]{7, 8, 9});
        int[] startPCs = localVariableTableAttribute.getStartPCs();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getLengthTest_attU0() throws Exception {
        LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(1, new int[]{1}, new int[]{2}, new CPUTF8[]{new CPUTF8("name1")}, new CPUTF8[]{new CPUTF8("descriptor1")}, new int[]{1});
        int actual = localVariableTableAttribute.getLength();
        int expected = 2 + 10 * 1;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getLengthTest_EUlX1() throws Exception {
        LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(2, new int[]{2}, new int[]{4}, new CPUTF8[]{new CPUTF8("name2"), new CPUTF8("name3")}, new CPUTF8[]{new CPUTF8("descriptor2"), new CPUTF8("descriptor3")}, new int[]{2, 3});
        int actual = localVariableTableAttribute.getLength();
        int expected = 2 + 10 * 2;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getLengthTest_sxHk2() throws Exception {
        LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(3, new int[]{3}, new int[]{6}, new CPUTF8[]{new CPUTF8("name4"), new CPUTF8("name5"), new CPUTF8("name6")}, new CPUTF8[]{new CPUTF8("descriptor4"), new CPUTF8("descriptor5"), new CPUTF8("descriptor6")}, new int[]{4, 5, 6});
        int actual = localVariableTableAttribute.getLength();
        int expected = 2 + 10 * 3;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getLengthTest_oJKn3() throws Exception {
        LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(4, new int[]{4}, new int[]{8}, new CPUTF8[]{new CPUTF8("name7"), new CPUTF8("name8"), new CPUTF8("name9"), new CPUTF8("name10")}, new CPUTF8[]{new CPUTF8("descriptor7"), new CPUTF8("descriptor8"), new CPUTF8("descriptor9"), new CPUTF8("descriptor10")}, new int[]{7, 8, 9, 10});
        int actual = localVariableTableAttribute.getLength();
        int expected = 2 + 10 * 4;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getLengthTest_agFP4() throws Exception {
        LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(5, new int[]{5}, new int[]{10}, new CPUTF8[]{new CPUTF8("name11"), new CPUTF8("name12"), new CPUTF8("name13"), new CPUTF8("name14"), new CPUTF8("name15")}, new CPUTF8[]{new CPUTF8("descriptor11"), new CPUTF8("descriptor12"), new CPUTF8("descriptor13"), new CPUTF8("descriptor14"), new CPUTF8("descriptor15")}, new int[]{11, 12, 13, 14, 15});
        int actual = localVariableTableAttribute.getLength();
        int expected = 2 + 10 * 5;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenumberWithNegativeStopIndex_zyJj3() throws Pack200Exception {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(1, new int[]{10}, new int[]{20}, new CPUTF8[1], new CPUTF8[1], new int[]{30});
        List<Integer> byteCodeOffsets = Arrays.asList(-5);
        try {
            attribute.renumber(byteCodeOffsets);
        } catch (Pack200Exception e) {
            assertEquals("Error renumbering bytecode indexes", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_tiis2() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        Segment segment = new Segment();
        classConstantPool.resolve(segment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testWriteBody_cMcA0() throws IOException {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(10, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2"), new CPUTF8("descriptor3")}, new int[]{7, 8, 9});
        DataOutputStream dos = new DataOutputStream(System.out);
        attribute.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testWriteBodyWithEmptyArrays_bIPK1() throws IOException {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(0, new int[]{}, new int[]{}, new CPUTF8[]{}, new CPUTF8[]{}, new int[]{});
        DataOutputStream dos = new DataOutputStream(System.out);
        attribute.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAttributeName_WhenValidInput_SetsAttributeName_BjUE0() throws Exception {
        CPUTF8 cpUTF8Value = new CPUTF8("validName");
        LocalVariableTableAttribute.setAttributeName(cpUTF8Value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAttributeName_WhenNullInput_SetsAttributeNameToNull_wtki1() throws Exception {
        CPUTF8 cpUTF8Value = null;
        LocalVariableTableAttribute.setAttributeName(cpUTF8Value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAttributeName_WhenEmptyInput_SetsAttributeNameToEmpty_Lpmn2() throws Exception {
        CPUTF8 cpUTF8Value = new CPUTF8("");
        LocalVariableTableAttribute.setAttributeName(cpUTF8Value);
    }
}