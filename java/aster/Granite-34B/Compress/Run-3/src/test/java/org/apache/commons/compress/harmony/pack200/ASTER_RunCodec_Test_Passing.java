/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_RunCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBCodec_yxST0_1() throws Exception {
    RunCodec runCodec = new RunCodec(1, new BHSDCodec(1, 1), new BHSDCodec(1, 2));
    Codec codec = runCodec.getBCodec();
    assertNotNull(codec);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBCodec_yxST0_2() throws Exception {
    RunCodec runCodec = new RunCodec(1, new BHSDCodec(1, 1), new BHSDCodec(1, 2));
    Codec codec = runCodec.getBCodec();
    assertTrue(codec instanceof BHSDCodec);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBCodecWithCoverage_Zvuu1_1() throws Exception {
    RunCodec runCodec = new RunCodec(1, new BHSDCodec(1, 2, 3, 4), new BHSDCodec(1, 2, 3));
    Codec codec = runCodec.getBCodec();
    assertNotNull(codec);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBCodecWithCoverage_Zvuu1_2() throws Exception {
    RunCodec runCodec = new RunCodec(1, new BHSDCodec(1, 2, 3, 4), new BHSDCodec(1, 2, 3));
    Codec codec = runCodec.getBCodec();
    assertTrue(codec instanceof BHSDCodec);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_nEJp0() throws Exception {
        RunCodec rc = new RunCodec(1, new BHSDCodec(1, 1), new BHSDCodec(1, 1));
        assertEquals(rc.getACodec().getClass(), BHSDCodec.class);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_Skoy1() throws Exception {
        RunCodec rc = new RunCodec(1, new BHSDCodec(1, 1, 0, 0), new BHSDCodec(1, 1, 1, 1));
        assertEquals(rc.getACodec().getClass(), BHSDCodec.class);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_ZFTE2() throws Exception {
        RunCodec rc = new RunCodec(1, new BHSDCodec(1, 1, 0), new BHSDCodec(1, 1));
        assertEquals(rc.getACodec().getClass(), BHSDCodec.class);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_FKBr0() throws Exception {
        BHSDCodec aCodec = new BHSDCodec(1, 2);
        BHSDCodec bCodec = new BHSDCodec(3, 4);
        RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
        assertEquals("RunCodec[k=5;aCodec=BHSDCodec[b=1;h=2];bCodec=BHSDCodec[b=3;h=4]]", runCodec.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_DYAn0() throws Pack200Exception {
        BHSDCodec aCodec = new BHSDCodec(1, 2);
        BHSDCodec bCodec = new BHSDCodec(3, 4);
        RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
        byte[] expected = new byte[]{6, 7};
        byte[] actual = runCodec.encode(8, 9);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeException_XZLE1_1() throws Exception {
        BHSDCodec aCodec = new BHSDCodec(1, 2);
        BHSDCodec bCodec = new BHSDCodec(3, 4);
        RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
        Pack200Exception exception = assertThrows(Pack200Exception.class, () -> runCodec.encode(8, 9));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_dYJZ0() throws Pack200Exception {
        BHSDCodec aCodec = new BHSDCodec(1, 2);
        BHSDCodec bCodec = new BHSDCodec(3, 4);
        RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
        byte[] result = runCodec.encode(6);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetK_hqxN0() throws Exception {
        BHSDCodec aCodec = new BHSDCodec(1, 2);
        BHSDCodec bCodec = new BHSDCodec(3, 4);
        RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
        assertEquals(5, runCodec.getK());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKWithFullCoverage_lUMQ1() throws Exception {
        BHSDCodec aCodec = new BHSDCodec(1, 2, 3, 4);
        BHSDCodec bCodec = new BHSDCodec(5, 6, 7);
        RunCodec runCodec = new RunCodec(8, aCodec, bCodec);
        assertEquals(8, runCodec.getK());
    }
}