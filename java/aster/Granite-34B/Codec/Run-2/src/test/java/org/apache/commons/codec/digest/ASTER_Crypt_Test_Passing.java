/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Crypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSalt_NTvL1() {
        String key = "password";
        String salt = "salt";
        String expected = "sa3tHJ3/KuYvI";
        String actual = Crypt.crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSalt_bNZG1() {
        byte[] keyBytes = new byte[]{0x00, 0x01, 0x02, 0x03};
        String salt = "salt";
        String expected = "sa7JkdUVApjKU";
        String actual = Crypt.crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_mHdc2() {
        String key = "key";
        String salt = null;
        String expected = null;
        String actual = Crypt.crypt(key, salt);
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSha512Salt_AQJM1() {
        byte[] keyBytes = new byte[0];
        String salt = Sha2Crypt.SHA512_PREFIX + "salt";
        String actual = Crypt.crypt(keyBytes, salt);
        String expected = Sha2Crypt.sha512Crypt(keyBytes, salt);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSha256Salt_xzHB2() {
        byte[] keyBytes = new byte[0];
        String salt = Sha2Crypt.SHA256_PREFIX + "salt";
        String actual = Crypt.crypt(keyBytes, salt);
        String expected = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMd5Salt_WYol3() {
        byte[] keyBytes = new byte[0];
        String salt = Md5Crypt.MD5_PREFIX + "salt";
        String actual = Crypt.crypt(keyBytes, salt);
        String expected = Md5Crypt.md5Crypt(keyBytes, salt);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithUnknownSalt_CyFc4() {
        byte[] keyBytes = new byte[0];
        String salt = "unknown";
        String actual = Crypt.crypt(keyBytes, salt);
        String expected = UnixCrypt.crypt(keyBytes, salt);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLineCoverage_YfKw5() {
        byte[] keyBytes = new byte[0];
        String salt = null;
        Crypt.crypt(keyBytes, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBranchCoverage_jvRy6() {
        byte[] keyBytes = new byte[0];
        String salt = null;
        if (salt == null) {
            Crypt.crypt(keyBytes, salt);
        }
    }
}