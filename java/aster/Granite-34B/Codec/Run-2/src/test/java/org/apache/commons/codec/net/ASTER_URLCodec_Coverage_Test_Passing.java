/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNull_gAGr0() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.decode(null, "UTF-8");
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNotNull_XBjP1() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.decode("hello", "UTF-8");
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPlusSign_pqTr0() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] input = "a+b".getBytes();
        byte[] expected = "a b".getBytes();
        assertArrayEquals(expected, codec.decodeUrl(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithEscapeChar_aRfk1() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] input = "a%20b".getBytes();
        byte[] expected = "a b".getBytes();
        assertArrayEquals(expected, codec.decodeUrl(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithNegativeValue_FAgy0() {
        URLCodec codec = new URLCodec();
        byte[] input = new byte[]{-1, -2, -3};
        byte[] expected = new byte[]{'%', 'F', 'F', '%', 'F', 'E', '%', 'F', 'D'};
        assertArrayEquals(expected, codec.encodeUrl(null, input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_gUxU1() throws org.apache.commons.codec.DecoderException {
        URLCodec codec = new URLCodec();
        byte[] input = new byte[0]; // Replace with actual input
        Object result = codec.decode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_qcml2() throws org.apache.commons.codec.DecoderException {
        URLCodec codec = new URLCodec();
        String input = ""; // Replace with actual input
        Object result = codec.decode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedType_BWRm3() throws org.apache.commons.codec.DecoderException {
        URLCodec codec = new URLCodec();
        Object input = new Object(); // Replace with actual input
        try {
            codec.decode(input);
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedEncoding1_Flow2() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_KYwB0() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        Object obj = null;
        Object actual = urlCodec.encode(obj);
        Object expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_CjNx2() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        Object obj = "";
        Object actual = urlCodec.encode(obj);
        Object expected = urlCodec.encode((String) obj);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedType_rMhJ3() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        Object obj = new Object();
        try {
            urlCodec.encode(obj);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Objects of type " + obj.getClass().getName() + " cannot be URL encoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedEncoding_GPKQ1_ZpSq0() {
        URLCodec urlCodec = new URLCodec();
        assertThrows(UnsupportedEncodingException.class, () -> urlCodec.encode("test", "test"));
    }
}