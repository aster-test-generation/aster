/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BinaryCodec_Test_Failing {
    private static final byte[] EMPTY_BYTE_ARRAY = new byte[0];

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_uRAx0() {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] raw = new byte[]{0, 1, 0, 1, 0, 1, 0, 1};
        byte[] expected = new byte[]{48, 49, 48, 49, 48, 49, 48, 49};
        assertArrayEquals(expected, binaryCodec.encode(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_eaip0() throws EncoderException {
        BinaryCodec binaryCodec = new BinaryCodec();
        Object raw = new byte[]{0, 1, 2, 3};
        Object expected = new char[]{'0', '1', '2', '3'};
        Object actual = binaryCodec.encode(raw);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyArray_AvKw1() throws EncoderException {
        BinaryCodec binaryCodec = new BinaryCodec();
        Object raw = new byte[]{};
        Object expected = new char[]{};
        Object actual = binaryCodec.encode(raw);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_qwoy0() {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] ascii = new byte[]{0, 1, 0, 1, 0, 1, 0, 1};
        byte[] expected = new byte[]{0, 1, 0, 1, 0, 1, 0, 1};
        assertArrayEquals(expected, binaryCodec.decode(ascii));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullArray_ndML2() {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] ascii = null;
        try {
            binaryCodec.decode(ascii);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Input array cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_SingleBit_hVny1() {
        byte[] ascii = {'0'};
        byte[] expected = {0};
        assertArrayEquals(expected, BinaryCodec.fromAscii(ascii));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_InvalidInput_APFA2_1() {
        char[] input1 = "0123456789".toCharArray();
        byte[] expected1 = new byte[0];
        byte[] actual1 = BinaryCodec.fromAscii(input1);
        char[] input2 = new char[]{0x01, 0x02, 0x03};
        byte[] expected2 = new byte[0];
        byte[] actual2 = BinaryCodec.fromAscii(input2);
        assertArrayEquals(expected1, actual1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_EASQ0() {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] ascii = new byte[]{65, 66, 67};
        byte[] expected = new byte[]{65, 66, 67};
        assertArrayEquals(expected, binaryCodec.decode(ascii));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString10_niTq9() {
        byte[] raw = new byte[9];
        assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", BinaryCodec.toAsciiString(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString11_ylFG10() {
        byte[] raw = new byte[10];
        assertEquals("0000000000", BinaryCodec.toAsciiString(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytesWithMultipleBytes_FaKD2() {
        byte[] raw = {0x01, 0x02, 0x03};
        byte[] expected = {'0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '1'};
        byte[] actual = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_iAaN2() {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] raw = null;
        byte[] expected = null;
        assertArrayEquals(expected, binaryCodec.encode(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_AlternatingBits_vgsh4_fid1() {
        byte[] ascii = {'0', '1', '0', '1', '0', '1', '0', '1'};
        byte[] expected = {45};
        assertArrayEquals(expected, BinaryCodec.fromAscii(ascii));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_InvalidInput_APFA2() {
        char[] input1 = "0123456789".toCharArray();
        byte[] expected1 = new byte[0];
        byte[] actual1 = BinaryCodec.fromAscii(input1);
        assertArrayEquals(expected1, actual1);
        char[] input2 = new char[]{0x01, 0x02, 0x03};
        byte[] expected2 = new byte[0];
        byte[] actual2 = BinaryCodec.fromAscii(input2);
        assertArrayEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString2_FFmk1_fid1() {
        byte[] raw = new byte[1];
        assertEquals("\u0000", BinaryCodec.toAsciiString(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString3_Kiuf2_fid1() {
        byte[] raw = new byte[2];
        assertEquals("\u0000\u0000", BinaryCodec.toAsciiString(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString4_aENQ3_fid1() {
        byte[] raw = new byte[3];
        assertEquals("\u0000\u0000\u0000", BinaryCodec.toAsciiString(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString5_hTHj4_fid1() {
        byte[] raw = new byte[4];
        assertEquals("\u0000\u0000\u0000\u0000", BinaryCodec.toAsciiString(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString6_GFQd5_fid1() {
        byte[] raw = new byte[5];
        assertEquals("\u0000\u0000\u0000\u0000\u0000", BinaryCodec.toAsciiString(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString7_FVWb6_fid1() {
        byte[] raw = new byte[6];
        assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", BinaryCodec.toAsciiString(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString8_cnAN7_fid1() {
        byte[] raw = new byte[7];
        assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", BinaryCodec.toAsciiString(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString9_pGSs8_fid1() {
        byte[] raw = new byte[8];
        assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", BinaryCodec.toAsciiString(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString11_ylFG10_fid1() {
        byte[] raw = new byte[10];
        assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", BinaryCodec.toAsciiString(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString12_Vihq11_fid1() {
        byte[] raw = new byte[11];
        assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", BinaryCodec.toAsciiString(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString13_zJfr12_fid1() {
        byte[] raw = new byte[12];
        assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", BinaryCodec.toAsciiString(raw));
    }
}