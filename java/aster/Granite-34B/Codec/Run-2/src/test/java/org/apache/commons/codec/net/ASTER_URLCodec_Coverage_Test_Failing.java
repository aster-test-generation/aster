/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncoding2_gfSr2() throws DecoderException {
        URLCodec codec = new URLCodec();
        String decoded = codec.decode("test");
        Assertions.assertNull(decoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithPositiveValue_yNAk1() {
        URLCodec codec = new URLCodec();
        byte[] input = new byte[]{1, 2, 3};
        byte[] expected = new byte[]{'1', '2', '3'};
        assertArrayEquals(expected, codec.encodeUrl(null, input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_zbgB1() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        Object obj = new byte[]{};
        Object actual = urlCodec.encode(obj);
        Object expected = urlCodec.encode((byte[]) obj);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedEncoding1_Flow2_fid2() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        assertEquals(null, urlCodec.encode("test"));
    }
}