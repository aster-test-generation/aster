/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.File;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HmacUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable2_gENH1() {
        String name = "hmac";
        boolean actual = HmacUtils.isAvailable(name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable4_fhNA3() {
        String name = "hmac";
        boolean actual = HmacUtils.isAvailable(name);
        assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacTest_yuyB0() throws java.io.IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        File valueToDigest = new File("valueToDigest");
        try {
            hmacUtils.hmac(valueToDigest);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_oDxG0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        Mac mac = hmacUtils.getHmacSha384("key".getBytes());
        assertEquals(mac.getAlgorithm(), "HmacSHA384");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha512Hex_test1_sEQg0() {
        byte[] key = new byte[]{0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b};
        byte[] valueToDigest = new byte[]{0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65};
        String expected = "7641c48a3b4aa8f887c07b3e83f96affb89c978fed8c96fcbbf4ad596eebfe496f9f16da6cd080ba393c6f365ad72b50d15c71bfb1d6b81f66a911786c6ce932";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_auXI0_YxRB0() {
        HmacAlgorithms name = HmacAlgorithms.HMAC_SHA_256;
        try {
            Mac.getInstance(name.getName());
        } catch (NoSuchAlgorithmException e) {
            fail("Should not throw exception");
        }
        assertTrue(HmacUtils.isAvailable(name));
    }
}