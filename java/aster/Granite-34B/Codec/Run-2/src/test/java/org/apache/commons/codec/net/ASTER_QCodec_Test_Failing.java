/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_BwEj1() throws DecoderException {
        QCodec qCodec = new QCodec();
        String input = "Hello, World!";
        Object result = qCodec.decode(input);
        Assertions.assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks_NLtO0() {
        QCodec qCodec1 = new QCodec(Charset.defaultCharset());
        QCodec qCodec2 = new QCodec("UTF-8");
        QCodec qCodec3 = new QCodec();
        assert qCodec1.isEncodeBlanks() == true;
        assert qCodec2.isEncodeBlanks() == true;
        assert qCodec3.isEncodeBlanks() == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_VMSu0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String input = "Hello World";
        String expected = "Hello World";
        assertEquals(expected, qCodec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_vtJh0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "source string";
        assertEquals("encoded string", qCodec.encode(sourceStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_kfQm1() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "source string";
        assertEquals("encoded string", qCodec.encode(sourceStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetObj_BFFT2() throws EncoderException {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        String sourceStr = "source string";
        assertEquals("encoded string", qCodec.encode(sourceStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidInput_VsgB1() {
        QCodec qCodec = new QCodec();
        String sourceStr = null;
        Charset sourceCharset = null;
        try {
            qCodec.encode(sourceStr, sourceCharset);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullCharset_QWNg3() {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello, World!";
        Charset sourceCharset = null;
        try {
            qCodec.encode(sourceStr, sourceCharset);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedCharset_Lgcf4() {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello, World!";
        Charset sourceCharset = Charset.forName("Unsupported-Charset");
        try {
            qCodec.encode(sourceStr, sourceCharset);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNoBlanks_kIDA0() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] expected = new byte[]{1, 2, 3};
        assertArrayEquals(expected, qCodec.doEncoding(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithBlanks_pBJp1() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] expected = new byte[]{1, 2, 3};
        assertArrayEquals(expected, qCodec.doEncoding(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithPrintableChars_vaPV4() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{33, 35, 60, 62, 95};
        byte[] expected = new byte[]{33, 35, 60, 62, 95};
        assertArrayEquals(expected, qCodec.doEncoding(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNonPrintableChars_JOLu5() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{0, 10, 13, 32, 127};
        byte[] expected = new byte[]{48, 49, 50, 51, 52};
        assertArrayEquals(expected, qCodec.doEncoding(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidCharset_hXtj1() {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            qCodec.encode("Hello, World!", "InvalidCharset");
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Charset 'InvalidCharset' is not supported", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_GmVV2() {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            qCodec.encode(null, "UTF-8");
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Source string must not be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedCharset_PCVx4() {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            qCodec.encode("Hello, World!", "UnsupportedCharset");
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Charset 'UnsupportedCharset' is not supported", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithUnsupportedEncoding_cOyB3() {
        QCodec qCodec = new QCodec("UnsupportedEncoding");
        byte[] inputBytes = "This is a test".getBytes();
        try {
            qCodec.doDecoding(inputBytes);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(e.getCause() instanceof UnsupportedEncodingException);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_YuYo0() throws DecoderException {
        QCodec qCodec = new QCodec();
        String str = "test";
        assertEquals("test", qCodec.decode(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode2_LjVP1() throws DecoderException {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        String str = "test";
        assertEquals("test", qCodec.decode(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode3_pqEi2() throws DecoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String str = "test";
        assertEquals("test", qCodec.decode(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_BwEj1_fid1() throws DecoderException {
        QCodec qCodec = new QCodec();
        String input = "Hello, World!";
        String result = qCodec.decode(input);
        Assertions.assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_VMSu0_fid1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String input = "=?UTF-8?Q?Hello World?=";
        String expected = "=?UTF-8?Q?Hello World?=";
        assertEquals(expected, qCodec.encode(input));
    }
}