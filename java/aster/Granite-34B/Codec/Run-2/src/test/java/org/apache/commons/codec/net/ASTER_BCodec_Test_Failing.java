/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_bytes_is_not_null_bAJk1() {
        BCodec bCodec = new BCodec(Charset.defaultCharset(), CodecPolicy.LENIENT);
        byte[] expected = new byte[]{0, 1, 2, 3};
        byte[] actual = bCodec.doDecoding(expected);
        actual = new byte[0];
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_mQoe0() throws DecoderException {
        BCodec bCodec = new BCodec();
        String value = "value";
        assertEquals("decodedValue", bCodec.decode(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_BnDz1() throws DecoderException {
        BCodec bCodec = new BCodec(Charset.defaultCharset());
        String value = "value";
        assertEquals("decodedValue", bCodec.decode(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetAndPolicy_AAxI2() throws DecoderException {
        BCodec bCodec = new BCodec(Charset.defaultCharset(), CodecPolicy.STRICT);
        String value = "value";
        assertEquals("decodedValue", bCodec.decode(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetName_mAjJ3() throws DecoderException {
        BCodec bCodec = new BCodec("charsetName");
        String value = "value";
        assertEquals("decodedValue", bCodec.decode(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_Uazs0() throws DecoderException {
        BCodec bCodec = new BCodec("UTF-8");
        String value = "Hello, World!";
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        assertEquals(expected, bCodec.decode(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithBytes_PXXK1() throws DecoderException {
        BCodec bCodec = new BCodec("UTF-8");
        byte[] value = "Hello, World!".getBytes();
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        assertEquals(expected, bCodec.decode(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_UKPF1() throws EncoderException {
        BCodec bCodec = new BCodec("UTF-8");
        assertEquals("=?UTF-8?B?SGVsbG8gV29ybGQ=?=", bCodec.encode("=?UTF-8?B?SGVsbG8gV29ybGQ=?="));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_Yexx2() throws EncoderException {
        BCodec bCodec = new BCodec();
        assertEquals("=?UTF-8?B?SGVsbG8gV29ybGQ=?=", bCodec.encode("=?UTF-8?B?SGVsbG8gV29ybGQ=?="));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_WivL2() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.defaultCharset());
        assertEquals("result", bCodec.encode("source", Charset.defaultCharset()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithLenientPolicy_tmiU1_cSQr0() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        String encodedText = bCodec.encode("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", "UTF-8");
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedCharset_CeUU2_qFnO0_1() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        Exception exception = org.junit.jupiter.api.Assertions.assertThrows(EncoderException.class, () -> {
            bCodec.encode("Hello, World!", "ISO-8859-1");
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_bytes_is_not_null_bAJk1_fid1() {
        BCodec bCodec = new BCodec(Charset.defaultCharset(), CodecPolicy.LENIENT);
        byte[] expected = new byte[]{0, 1, 2, 3};
        byte[] actual = bCodec.doDecoding(expected);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_UKPF1_fid1() throws EncoderException {
        BCodec bCodec = new BCodec("UTF-8");
        assertEquals("Hello World", bCodec.encode("Hello World"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_Yexx2_fid1() throws EncoderException {
        BCodec bCodec = new BCodec();
        assertEquals("Hello World", bCodec.encode("Hello World"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QQla0_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.defaultCharset(), CodecPolicy.STRICT);
        assertEquals("result", bCodec.encode("source", Charset.defaultCharset()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_WivL2_fid1() throws EncoderException {
        BCodec bCodec = new BCodec("charsetName");
        assertEquals("result", bCodec.encode("source", Charset.defaultCharset()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode4_mbtP3_fid1() throws EncoderException {
        BCodec bCodec = new BCodec();
        assertEquals("result", bCodec.encode("source", Charset.defaultCharset()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithLenientPolicy_tmiU1_cSQr0_fid2() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        String encodedText = bCodec.encode("Hello, World!", "UTF-8");
        assertEquals("Hello, World!", encodedText);
    }
}