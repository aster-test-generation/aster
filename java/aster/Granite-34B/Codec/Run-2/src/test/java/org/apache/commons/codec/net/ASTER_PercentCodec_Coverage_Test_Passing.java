/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PercentCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNull_vwTJ0() throws DecoderException {
        PercentCodec percentCodec = new PercentCodec();
        Object actual = percentCodec.decode(null);
        Object expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_XvRW1() throws DecoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[0];
        Object actual = percentCodec.decode(input);
        Object expected = null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArrayInput_QOFr3() throws DecoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[10];
        Object actual = percentCodec.decode(input);
        Object expected = null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_gXIf0() throws org.apache.commons.codec.EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        Object obj = null;
        Object result = percentCodec.encode(obj);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUnsupportedType_WvDH2() throws org.apache.commons.codec.EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        Object obj = new Object();
        try {
            percentCodec.encode(obj);
            Assertions.fail("Expected EncoderException");
        } catch (EncoderException e) {
            Assertions.assertEquals("Objects of type " + obj.getClass().getName() + " cannot be Percent encoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithBytesAndPlusForSpace_gRCn1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{0x01, 0x02, 0x03}, true);
        byte[] bytes = new byte[]{0x01, 0x02, 0x03};
        byte[] actual = percentCodec.encode(bytes);
        byte[] expected = new byte[]{0x25, 0x30, 0x31, 0x25, 0x30, 0x32, 0x25, 0x30, 0x33};
        assertArrayEquals(expected, actual);
    }
}