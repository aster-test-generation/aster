/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Md5Crypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithSalt_lEFI0() {
        String key = "password";
        String salt = "salt";
        String expected = "$apr1$salt$Xxd1irWT9ycqoYxGFn4cb.";
        String actual = Md5Crypt.apr1Crypt(key.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithLongPassword_ueNj2() {
        String key = "ThisIsAVeryLongPasswordThatExceedsTheStandardLimit";
        String salt = "salt";
        String expected = "$apr1$salt$wqh6s4IZ.nmQ0jtcdO9dT.";
        String actual = Md5Crypt.apr1Crypt(key.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_GSld0() {
        String keyBytes = "password";
        String salt = "salt";
        String expected = "$apr1$salt$Xxd1irWT9ycqoYxGFn4cb.";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithDifferentSalt_AgAL2() {
        String keyBytes = "password";
        String salt = "diff_salt";
        String expected = "$apr1$salt$4X.Y/g.S6Z7";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyKeyBytes_Dpfi1() {
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            Md5Crypt.md5Crypt(new byte[0], "salt", "$1$", new Random());
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithInvalidSalt_tRkT2() {
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            Md5Crypt.md5Crypt("key".getBytes(), "invalid_salt", "$1$", new Random());
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithValidInput_ukdn3_1() {
        String result = Md5Crypt.md5Crypt("key".getBytes(), null, "$1$", new Random());
        Assertions.assertTrue(result.startsWith("$1$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithValidInput_ukdn3_2() {
        String result = Md5Crypt.md5Crypt("key".getBytes(), null, "$1$", new Random());
        Assertions.assertTrue(result.length() == 34);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithInvalidPrefix_wPRB9() {
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            Md5Crypt.md5Crypt("key".getBytes(), "salt", "invalid_prefix", new Random());
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithSalt_UCZQ1() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String salt = "$1$RandomSalt$";
        String expected = "$1$RandomSa$OmdVOkz14DbYaI0n1KlR4/";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithLongSalt_JPRz2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String salt = "$1$RandomSalt$RandomSalt$";
        String expected = "$1$RandomSa$OmdVOkz14DbYaI0n1KlR4/";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithShortSalt_LRTt3() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String salt = "$1$RandomSalt";
        String expected = "$1$RandomSa$OmdVOkz14DbYaI0n1KlR4/";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithValidInput_ukdn3() {
        String result = Md5Crypt.md5Crypt("key".getBytes(), null, "$1$", new Random());
        Assertions.assertTrue(result.startsWith("$1$"));
        Assertions.assertTrue(result.length() == 34);
    }
}