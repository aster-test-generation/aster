/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuotedPrintableCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_AKgc0_1() {
        BitSet printable1 = new BitSet();
        byte[] bytes1 = new byte[]{0x41, 0x42, 0x43};
        byte[] expected1 = new byte[]{0x41, 0x42, 0x43};
        BitSet printable2 = new BitSet();
        byte[] bytes2 = new byte[]{0x20, 0x3D, 0x3F};
        byte[] expected2 = new byte[]{0x3D, 0x3D, 0x3D, 0x3F};
        BitSet printable3 = new BitSet();
        byte[] bytes3 = new byte[]{0x20, 0x3D, 0x3F, 0x0D, 0x0A};
        byte[] expected3 = new byte[]{0x3D, 0x3D, 0x3D, 0x3F, 0x3D, 0x3D, 0x0D, 0x0A};
        assertArrayEquals(expected1, QuotedPrintableCodec.encodeQuotedPrintable(printable1, bytes1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_AKgc0_2() {
        BitSet printable1 = new BitSet();
        byte[] bytes1 = new byte[]{0x41, 0x42, 0x43};
        byte[] expected1 = new byte[]{0x41, 0x42, 0x43};
        BitSet printable2 = new BitSet();
        byte[] bytes2 = new byte[]{0x20, 0x3D, 0x3F};
        byte[] expected2 = new byte[]{0x3D, 0x3D, 0x3D, 0x3F};
        BitSet printable3 = new BitSet();
        byte[] bytes3 = new byte[]{0x20, 0x3D, 0x3F, 0x0D, 0x0A};
        byte[] expected3 = new byte[]{0x3D, 0x3D, 0x3D, 0x3F, 0x3D, 0x3D, 0x0D, 0x0A};
        assertArrayEquals(expected2, QuotedPrintableCodec.encodeQuotedPrintable(printable2, bytes2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_AKgc0_3() {
        BitSet printable1 = new BitSet();
        byte[] bytes1 = new byte[]{0x41, 0x42, 0x43};
        byte[] expected1 = new byte[]{0x41, 0x42, 0x43};
        BitSet printable2 = new BitSet();
        byte[] bytes2 = new byte[]{0x20, 0x3D, 0x3F};
        byte[] expected2 = new byte[]{0x3D, 0x3D, 0x3D, 0x3F};
        BitSet printable3 = new BitSet();
        byte[] bytes3 = new byte[]{0x20, 0x3D, 0x3F, 0x0D, 0x0A};
        byte[] expected3 = new byte[]{0x3D, 0x3D, 0x3D, 0x3F, 0x3D, 0x3D, 0x0D, 0x0A};
        assertArrayEquals(expected3, QuotedPrintableCodec.encodeQuotedPrintable(printable3, bytes3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArrayInput_bZEG1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]".getBytes();
        Object decoded = codec.decode(input);
        assertEquals("[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]", decoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_BitSet_byte_array_boolean_21_tHpB2() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[20];
        boolean strict = true;
        byte[] expected = new byte[20];
        for (int i = 0; i < 20; i++) {
            expected[i] = 33;
        }
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_okYe1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] obj = new byte[]{1, 2, 3};
        Object result = codec.encode(obj);
        assertEquals("[61, 48, 49, 61, 48, 50, 61, 48, 51]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedCharset_mFhI6_1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("Unsupported-Charset");
        String obj = "Hello, World!";
        UnsupportedCharsetException exception = assertThrows(UnsupportedCharsetException.class, () -> codec.encode(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithException_Hzgk3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = new byte[]{49, 50, 51};
        assertThrows(DecoderException.class, () -> codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithBitSet_xXbe4() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        BitSet printable = new BitSet(256);
        printable.set('H');
        printable.set('e');
        printable.set('l');
        printable.set('o');
        byte[] input = "Hello, World!".getBytes();
        byte[] expected = "Hello, World!".getBytes();
        assertArrayEquals(expected, codec.encodeQuotedPrintable(printable, input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithBitSetAndStrictMode_tFHF5() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        BitSet printable = new BitSet(256);
        printable.set('H');
        printable.set('e');
        printable.set('l');
        printable.set('o');
        byte[] input = "Hello, World!".getBytes();
        byte[] expected = "Hello, World!".getBytes();
        assertArrayEquals(expected, codec.encodeQuotedPrintable(printable, input, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSourceStrNotNullAndSourceCharsetNull_NiUB7() throws DecoderException, UnsupportedEncodingException {
        final QuotedPrintableCodec codec = new QuotedPrintableCodec();
        final String sourceStr = "This is a test";
        final String sourceCharset = null;
        try {
            codec.decode(sourceStr, sourceCharset);
            fail("Expected DecoderException");
        } catch (final DecoderException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_gRHx0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        assertArrayEquals(expected, codec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_ivAm1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.defaultCharset());
        byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        assertArrayEquals(expected, codec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetName_slsj2() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        assertArrayEquals(expected, codec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetAndStrict_zPbc3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.defaultCharset(), true);
        byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        assertArrayEquals(expected, codec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrict_HWRE4() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        assertArrayEquals(expected, codec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableBitSetByteArrayBoolean2_bXuZ2() throws Exception {
        final BitSet printable = null;
        final byte[] bytes = new byte[1];
        final boolean strict = false;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        Assertions.assertArrayEquals(new byte[1], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableBitSetByteArrayBoolean3_VLOd3() throws Exception {
        final BitSet printable = null;
        final byte[] bytes = new byte[100];
        final boolean strict = false;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        Assertions.assertArrayEquals(new byte[100], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableBitSetByteArrayBoolean5_NrlU5() throws Exception {
        final BitSet printable = null;
        final byte[] bytes = new byte[0];
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        Assertions.assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableBitSetByteArrayBoolean6_EfLl6() throws Exception {
        final BitSet printable = null;
        final byte[] bytes = new byte[1];
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        Assertions.assertArrayEquals(new byte[1], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableBitSetByteArrayBoolean7_NpeC7() throws Exception {
        final BitSet printable = null;
        final byte[] bytes = new byte[100];
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        Assertions.assertArrayEquals(new byte[100], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableBitSetByteArrayBoolean10_CXaL10() throws Exception {
        final BitSet printable = new BitSet();
        final byte[] bytes = new byte[1];
        final boolean strict = false;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        Assertions.assertArrayEquals(new byte[1], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest_gWVI0_fid1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertEquals("US-ASCII", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetWithStrictTest_vtst3_fid1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        assertEquals("US-ASCII", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_dISa0_fid1() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "This is a test string";
        String sourceCharset = "UTF-8";
        String expected = "This=20is=20a=20test=20string";
        assertEquals(expected, codec.encode(sourceStr, sourceCharset));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrictMode_MDLO1_fid1() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "This is a test string";
        String sourceCharset = "UTF-8";
        String expected = "This=20is=20a=20test=20string";
        assertEquals(expected, codec.encode(sourceStr, sourceCharset));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArrayInput_bZEG1_fid1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "Hello World".getBytes();
        Object decoded = codec.decode(input);
        assertEquals("Hello World", decoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_okYe1_fid1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] obj = new byte[]{1, 2, 3};
        Object result = codec.encode(obj);
        assertEquals("AQID", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_AKgc0() {
        BitSet printable1 = new BitSet();
        byte[] bytes1 = new byte[]{0x41, 0x42, 0x43};
        byte[] expected1 = new byte[]{0x41, 0x42, 0x43};
        assertArrayEquals(expected1, QuotedPrintableCodec.encodeQuotedPrintable(printable1, bytes1));
        BitSet printable2 = new BitSet();
        byte[] bytes2 = new byte[]{0x20, 0x3D, 0x3F};
        byte[] expected2 = new byte[]{0x3D, 0x3D, 0x3D, 0x3F};
        assertArrayEquals(expected2, QuotedPrintableCodec.encodeQuotedPrintable(printable2, bytes2));
        BitSet printable3 = new BitSet();
        byte[] bytes3 = new byte[]{0x20, 0x3D, 0x3F, 0x0D, 0x0A};
        byte[] expected3 = new byte[]{0x3D, 0x3D, 0x3D, 0x3F, 0x3D, 0x3D, 0x0D, 0x0A};
        assertArrayEquals(expected3, QuotedPrintableCodec.encodeQuotedPrintable(printable3, bytes3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedCharset_mFhI6() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("Unsupported-Charset");
        String obj = "Hello, World!";
        UnsupportedCharsetException exception = assertThrows(UnsupportedCharsetException.class, () -> codec.encode(obj));
        assertEquals("Unsupported-Charset", exception.getCharsetName());
    }
}