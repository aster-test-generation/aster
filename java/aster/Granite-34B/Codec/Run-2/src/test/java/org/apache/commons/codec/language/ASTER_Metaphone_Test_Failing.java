/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Metaphone_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMaxCodeLen_whenGivenNegativeValue_shouldThrowException_LXYR1() {
        Metaphone metaphone = new Metaphone();
        int maxCodeLen = -1;
        Exception exception = org.junit.jupiter.api.Assertions.assertThrows(IllegalArgumentException.class, () -> metaphone.setMaxCodeLen(maxCodeLen));
        assert exception.getMessage().equals("maxCodeLen must be greater than 0");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMaxCodeLen_whenGivenZero_shouldThrowException_pRAw2() {
        Metaphone metaphone = new Metaphone();
        int maxCodeLen = 0;
        Exception exception = org.junit.jupiter.api.Assertions.assertThrows(IllegalArgumentException.class, () -> metaphone.setMaxCodeLen(maxCodeLen));
        assert exception.getMessage().equals("maxCodeLen must be greater than 0");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqualWithDifferentLength_LHUe2() {
        Metaphone metaphone = new Metaphone();
        String str1 = "test";
        String str2 = "testa";
        boolean expected = false;
        boolean actual = metaphone.isMetaphoneEqual(str1, str2);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_XUOx0_1() {
        Metaphone metaphone = new Metaphone();
        assertEquals("ALEXANDER", metaphone.encode("Alexander"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_XUOx0_2() {
        Metaphone metaphone = new Metaphone();
        assertEquals("THOMAS", metaphone.encode("Thomas"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_XUOx0_3() {
        Metaphone metaphone = new Metaphone();
        assertEquals("DAVID", metaphone.encode("David"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_XUOx0_4() {
        Metaphone metaphone = new Metaphone();
        assertEquals("DUNCAN", metaphone.encode("Duncan"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_XUOx0_5() {
        Metaphone metaphone = new Metaphone();
        assertEquals("WILLIAM", metaphone.encode("William"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_XUOx0_6() {
        Metaphone metaphone = new Metaphone();
        assertEquals("MARTIN", metaphone.encode("Martin"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_XUOx0_7() {
        Metaphone metaphone = new Metaphone();
        assertEquals("LEE", metaphone.encode("Lee"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_XUOx0_8() {
        Metaphone metaphone = new Metaphone();
        assertEquals("WALTER", metaphone.encode("Walter"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_XUOx0_9() {
        Metaphone metaphone = new Metaphone();
        assertEquals("GRANT", metaphone.encode("Grant"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_XUOx0_10() {
        Metaphone metaphone = new Metaphone();
        assertEquals("HARRIS", metaphone.encode("Harris"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone_UbwE0_15() {
        Metaphone metaphone = new Metaphone();
        assertEquals("K", metaphone.metaphone("kn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone_UbwE0_16() {
        Metaphone metaphone = new Metaphone();
        assertEquals("G", metaphone.metaphone("gn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone_UbwE0_17() {
        Metaphone metaphone = new Metaphone();
        assertEquals("P", metaphone.metaphone("pn"));
    }
}