/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MatchRatingApproachEncoder_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonantsWithNullName_btEP1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals("", encoder.removeDoubleConsonants(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowelNull_tfkR2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isVowel(null));
    }

    @Test
    @Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing2_Ndvg1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.leftToRightThenRightToLeftProcessing("test", "test1");
        Assertions.assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanName_rmyh0_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John-Doe";
        String expected = "JOHNEOE";
        assertEquals(expected, encoder.cleanName(name));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanNameWithAccents_RgsS1_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Jos";
        String expected = "JOSE";
        assertEquals(expected, encoder.cleanName(name));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowelsWithVowels_ildx1_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Johnny";
        String expected = "Jhnny";
        assertEquals(expected, encoder.removeVowels(name));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing1_DozZ0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.leftToRightThenRightToLeftProcessing("test", "test");
        Assertions.assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing3_zAPC2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.leftToRightThenRightToLeftProcessing("test", "test12");
        Assertions.assertEquals(2, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing5_CdPr4() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.leftToRightThenRightToLeftProcessing("test", "test1234");
        Assertions.assertEquals(4, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing6_dzQj5() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.leftToRightThenRightToLeftProcessing("test", "test12345");
        Assertions.assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCleanedName_zqDL3_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encodedName = encoder.encode("John");
        assertEquals("Jhn", encodedName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_1_FjTC0_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "";
        String expected = "aeiou";
        assertEquals(expected, encoder.removeAccents(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_2_NfYM1_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "";
        String expected = "AEIOU";
        assertEquals(expected, encoder.removeAccents(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_7_Qoxe6_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "";
        String expected = "auo";
        assertEquals(expected, encoder.removeAccents(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_8_XbEW7_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "";
        String expected = "AUO";
        assertEquals(expected, encoder.removeAccents(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_9_hanH8() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "";
        String expected = "c";
        assertEquals(expected, encoder.removeAccents(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_10_rdRN9() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "";
        String expected = "C";
        assertEquals(expected, encoder.removeAccents(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_isEncodeEquals_001_LVDd0_fid1() {
        MatchRatingApproachEncoder m = new MatchRatingApproachEncoder();
        boolean actual = m.isEncodeEquals("a", "a");
        boolean expected = true;
        assertEquals(expected, actual);
    }
}