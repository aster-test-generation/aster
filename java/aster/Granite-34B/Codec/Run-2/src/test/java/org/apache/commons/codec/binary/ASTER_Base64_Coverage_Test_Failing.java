/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base64_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_bPYy0() {
        Base64 base64 = new Base64();
        assertTrue(base64.isInAlphabet((byte) 65));
        assertTrue(base64.isInAlphabet((byte) 90));
        assertTrue(base64.isInAlphabet((byte) 97));
        assertTrue(base64.isInAlphabet((byte) 122));
        assertTrue(base64.isInAlphabet((byte) 48));
        assertTrue(base64.isInAlphabet((byte) 57));
        assertTrue(base64.isInAlphabet((byte) 43));
        assertTrue(base64.isInAlphabet((byte) 47));
        assertTrue(base64.isInAlphabet((byte) 61));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithInputArrayNotTooBig_ccMY1() {
        byte[] binaryData = new byte[10];
        int maxResultSize = 50;
        Base64 b64 = new Base64(true);
        long len = b64.getEncodedLength(binaryData);
        byte[] encodedData = b64.encode(binaryData);
        assertEquals(len, encodedData.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isArrayByteBase64_test1_ePfc0() {
        byte[] arrayOctet = new byte[10];
        boolean expected = true;
        boolean actual = Base64.isArrayByteBase64(arrayOctet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_1_xHlU0() {
        assertTrue(Base64.isBase64((byte) 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_2_cwfe1() {
        assertTrue(Base64.isBase64((byte) 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_3_yqcT2() {
        assertTrue(Base64.isBase64((byte) -1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_4_xFeN3() {
        assertTrue(Base64.isBase64((byte) 2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_5_axFf4() {
        assertTrue(Base64.isBase64((byte) 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_6_Wuak5() {
        assertTrue(Base64.isBase64((byte) 4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_7_nQVB6() {
        assertTrue(Base64.isBase64((byte) 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_8_PROX7() {
        assertTrue(Base64.isBase64((byte) 6));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_9_zjdh8() {
        assertTrue(Base64.isBase64((byte) 7));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_10_Upac9() {
        assertTrue(Base64.isBase64((byte) 8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_11_bqbm10() {
        assertTrue(Base64.isBase64((byte) 9));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_12_nVBQ11() {
        assertTrue(Base64.isBase64((byte) 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_13_bNhF12() {
        assertTrue(Base64.isBase64((byte) 11));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_14_AvWb13() {
        assertTrue(Base64.isBase64((byte) 12));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_15_KqEE14() {
        assertTrue(Base64.isBase64((byte) 13));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_16_LOlU15() {
        assertTrue(Base64.isBase64((byte) 14));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_17_uOmG16() {
        assertTrue(Base64.isBase64((byte) 15));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_18_xlCJ17() {
        assertTrue(Base64.isBase64((byte) 16));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_19_jmAH18() {
        assertTrue(Base64.isBase64((byte) 17));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_20_aZBg19() {
        assertTrue(Base64.isBase64((byte) 18));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_21_CAJS20() {
        assertTrue(Base64.isBase64((byte) 19));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_22_OMes21() {
        assertTrue(Base64.isBase64((byte) 20));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_23_BDwa22() {
        assertTrue(Base64.isBase64((byte) 21));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_24_cBwQ23() {
        assertTrue(Base64.isBase64((byte) 22));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_25_Recr24() {
        assertTrue(Base64.isBase64((byte) 23));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_bPYy0_9_fid3() {
        Base64 base64 = new Base64();
        assertTrue(base64.isInAlphabet((byte) 61));
    }
}