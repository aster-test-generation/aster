/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Hex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeHex_MNAG0() {
        byte[] data = new byte[0];
        char[] result = Hex.encodeHex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeHex2_hzYI1() {
        byte[] data = new byte[0];
        char[] result = Hex.encodeHex(data, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeHex3_rYun2() {
        byte[] data = new byte[0];
        char[] result = Hex.encodeHex(data, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_VTkV0() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F};
        char[] toDigits = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        char[] expected = new char[]{'0', '0', '0', 'F', '3', 'F'};
        char[] actual = Hex.encodeHex(data, toDigits);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_Hokx1() {
        Hex hex = new Hex(new String("UTF-16"));
        assertEquals("UTF-16", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_OnZR2() {
        Hex hex = new Hex();
        assertEquals("UTF-8", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_SyyO0() {
        byte[] data = new byte[10];
        int dataOffset = 0;
        int dataLen = 10;
        boolean toLowerCase = true;
        char[] out = new char[20];
        int outOffset = 0;
        Hex.encodeHex(data, dataOffset, dataLen, toLowerCase, out, outOffset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_KteT0() {
        ByteBuffer data = ByteBuffer.allocate(10);
        String result = Hex.encodeHexString(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString2_ywXs1() {
        byte[] data = new byte[10];
        String result = Hex.encodeHexString(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_1() throws DecoderException {
        assertEquals(0, Hex.toDigit('0', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_2() throws DecoderException {
        assertEquals(1, Hex.toDigit('1', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_3() throws DecoderException {
        assertEquals(2, Hex.toDigit('2', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_4() throws DecoderException {
        assertEquals(3, Hex.toDigit('3', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_5() throws DecoderException {
        assertEquals(4, Hex.toDigit('4', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_6() throws DecoderException {
        assertEquals(5, Hex.toDigit('5', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_7() throws DecoderException {
        assertEquals(6, Hex.toDigit('6', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_8() throws DecoderException {
        assertEquals(7, Hex.toDigit('7', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_9() throws DecoderException {
        assertEquals(8, Hex.toDigit('8', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_10() throws DecoderException {
        assertEquals(9, Hex.toDigit('9', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_11() throws DecoderException {
        assertEquals(10, Hex.toDigit('a', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_12() throws DecoderException {
        assertEquals(11, Hex.toDigit('b', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_13() throws DecoderException {
        assertEquals(12, Hex.toDigit('c', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_14() throws DecoderException {
        assertEquals(13, Hex.toDigit('d', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_15() throws DecoderException {
        assertEquals(14, Hex.toDigit('e', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_16() throws DecoderException {
        assertEquals(15, Hex.toDigit('f', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_17() throws DecoderException {
        assertEquals(10, Hex.toDigit('A', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_18() throws DecoderException {
        assertEquals(11, Hex.toDigit('B', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_19() throws DecoderException {
        assertEquals(12, Hex.toDigit('C', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_20() throws DecoderException {
        assertEquals(13, Hex.toDigit('D', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_21() throws DecoderException {
        assertEquals(14, Hex.toDigit('E', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0_22() throws DecoderException {
        assertEquals(15, Hex.toDigit('F', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_vyUd0() {
        final ByteBuffer data = ByteBuffer.allocate(10);
        boolean toLowerCase = true;
        String result = Hex.encodeHexString(data, toLowerCase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString2_qBgM1() {
        final byte[] data = new byte[10];
        boolean toLowerCase = false;
        String result = Hex.encodeHexString(data, toLowerCase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString3_dPNM2() {
        final byte[] data = new byte[10];
        String result = Hex.encodeHexString(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString4_zrDu3() {
        final ByteBuffer data = ByteBuffer.allocate(10);
        String result = Hex.encodeHexString(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmptyArray_XWhA2() {
        Hex hex = new Hex();
        byte[] array = new byte[0];
        byte[] expected = new byte[0];
        assertArrayEquals(expected, hex.encode(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidObject_iKZZ4() {
        final Hex hex = new Hex();
        final Object object = new Object();
        try {
            hex.decode(object);
            fail("Expected DecoderException");
        } catch (final DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithEvenLengthInput_iDYK0_1() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[8];
        int outOffset = 0;
        int result = Hex.decodeHex(data, out, outOffset);
        assertNotEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithEvenLengthInput_iDYK0_2() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[8];
        int outOffset = 0;
        int result = Hex.decodeHex(data, out, outOffset);
        assertNotEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithEvenLengthInput_iDYK0_3() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[8];
        int outOffset = 0;
        int result = Hex.decodeHex(data, out, outOffset);
        assertEquals(8, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithOddLengthInput_NvcN1() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G'};
        byte[] out = new byte[8];
        int outOffset = 0;
        try {
            Hex.decodeHex(data, out, outOffset);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("Odd number of characters.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithInsufficientOutputArray_XftP2() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[7];
        int outOffset = 0;
        try {
            Hex.decodeHex(data, out, outOffset);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("Output array is not large enough to accommodate decoded data.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCharsetTest4_Ooxq3() {
        final String charsetName = "ISO-8859-1";
        final Charset charset = Charset.forName(charsetName);
        final Hex hex = new Hex(charset);
        assertEquals(charset, hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCharsetTest5_TVjN4() {
        final String charsetName = "windows-1252";
        final Charset charset = Charset.forName(charsetName);
        final Hex hex = new Hex(charset);
        assertEquals(charset, hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCharsetTest6_euDJ5() {
        final String charsetName = "UTF-8";
        final Hex hex = new Hex(charsetName);
        assertEquals(Charset.forName(charsetName), hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCharsetTest7_mDrS6() {
        final String charsetName = "UTF-16";
        final Hex hex = new Hex(charsetName);
        assertEquals(Charset.forName(charsetName), hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCharsetTest8_BugT7() {
        final String charsetName = "UTF-32";
        final Hex hex = new Hex(charsetName);
        assertEquals(Charset.forName(charsetName), hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCharsetTest9_RGzQ8() {
        final String charsetName = "ISO-8859-1";
        final Hex hex = new Hex(charsetName);
        assertEquals(Charset.forName(charsetName), hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCharsetTest10_XiPP9() {
        final String charsetName = "windows-1252";
        final Hex hex = new Hex(charsetName);
        assertEquals(Charset.forName(charsetName), hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCharsetTest11_rsXq10() {
        final Hex hex = new Hex();
        assertEquals(Charset.defaultCharset(), hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexStringCoverage_YKUT1_PMPL0() {
        byte[] data = new byte[]{0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77, (byte) 0x88, (byte) 0x99};
        boolean toLowerCase = true;
        Hex hex = new Hex();
        String actual = hex.encodeHexString(data, toLowerCase);
        assert actual != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_wMfA0_kZGe0() {
        byte[] data = new byte[]{0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77, (byte) 0x88, (byte) 0x99};
        boolean toLowerCase = true;
        String expected = "00112233445566778899";
        String actual = Hex.encodeHexString(data, toLowerCase);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_UyOz0_yflZ0() {
        byte[] data = new byte[]{0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77, (byte) 0x88, (byte) 0x99};
        String expected = "00112233445566778899";
        String actual = Hex.encodeHexString(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexStringWithCharset_zQPR1_LxNy0() {
        byte[] data = new byte[]{0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77, (byte) 0x88, (byte) 0x99};
        String expected = "00112233445566778899";
        Hex hex = new Hex("UTF-8");
        String actual = hex.encodeHexString(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexStringWithCharsetObject_HKub2_UwtK0() {
        byte[] data = new byte[]{0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77, (byte) 0x88, (byte) 0x99};
        String expected = "00112233445566778899";
        Hex hex = new Hex(Charset.forName("UTF-8"));
        String actual = hex.encodeHexString(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString4_AdNV3_rwXL0() {
        String data = "123456";
        String result = Hex.encodeHexString(data.getBytes());
        assertEquals("313233343536", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_pMLg0() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F};
        char[] out = new char[6];
        Hex.encodeHex(data, 0, data.length, true, out, 0);
        Assertions.assertEquals("000f3f", new String(out));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex2_riLa1() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F};
        char[] out = new char[6];
        Hex.encodeHex(data, 0, data.length, false, out, 0);
        Assertions.assertEquals("000F3F", new String(out));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCharsetTest1_uETu0() {
        final String charsetName = "UTF-8";
        final Charset charset = Charset.forName(charsetName);
        final Hex hex = new Hex(charset);
        assertEquals(charset, hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCharsetTest2_IpNx1() {
        final String charsetName = "UTF-16";
        final Charset charset = Charset.forName(charsetName);
        final Hex hex = new Hex(charset);
        assertEquals(charset, hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCharsetTest3_aeVG2() {
        final String charsetName = "UTF-32";
        final Charset charset = Charset.forName(charsetName);
        final Hex hex = new Hex(charset);
        assertEquals(charset, hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_Acjs0() throws DecoderException {
        assertEquals(0, Hex.toDigit('0', 0));
        assertEquals(1, Hex.toDigit('1', 0));
        assertEquals(2, Hex.toDigit('2', 0));
        assertEquals(3, Hex.toDigit('3', 0));
        assertEquals(4, Hex.toDigit('4', 0));
        assertEquals(5, Hex.toDigit('5', 0));
        assertEquals(6, Hex.toDigit('6', 0));
        assertEquals(7, Hex.toDigit('7', 0));
        assertEquals(8, Hex.toDigit('8', 0));
        assertEquals(9, Hex.toDigit('9', 0));
        assertEquals(10, Hex.toDigit('a', 0));
        assertEquals(11, Hex.toDigit('b', 0));
        assertEquals(12, Hex.toDigit('c', 0));
        assertEquals(13, Hex.toDigit('d', 0));
        assertEquals(14, Hex.toDigit('e', 0));
        assertEquals(15, Hex.toDigit('f', 0));
        assertEquals(10, Hex.toDigit('A', 0));
        assertEquals(11, Hex.toDigit('B', 0));
        assertEquals(12, Hex.toDigit('C', 0));
        assertEquals(13, Hex.toDigit('D', 0));
        assertEquals(14, Hex.toDigit('E', 0));
        assertEquals(15, Hex.toDigit('F', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithEvenLengthInput_iDYK0() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[8];
        int outOffset = 0;
        int result = Hex.decodeHex(data, out, outOffset);
        assertNotEquals(0, result);
        assertNotEquals(-1, result);
        assertEquals(8, result);
    }
}