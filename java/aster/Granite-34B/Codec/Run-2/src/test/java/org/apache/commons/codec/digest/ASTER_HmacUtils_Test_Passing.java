/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HmacUtils_Test_Passing {
    private static String bytesToHex(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_eoQv0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key).hmacHex(valueToDigest);
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_uvTY0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = HmacUtils.hmacSha512Hex(key, valueToDigest);
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_sGnI0() {
        byte[] key = new byte[]{0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b};
        byte[] valueToDigest = "Hi There".getBytes();
        String expected = "675b0b3a1b4ddf4e124872da6c2f632bfed957e9";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_xtdx0() {
        byte[] key = new byte[]{0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b};
        byte[] valueToDigest = "Hi There".getBytes();
        String expected = "9294727a3638bb1c13f48ef8158bfc9d";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_wtyJ0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("19fce7c225381ea446738019472fc2835a53dc59604fe6e39b70b8525dda997d", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("05e7be9b69af4228bf184965ba4d9cca", resultMD5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_2() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("db0cf14221234108d75aa9a10ff7f459d934fb75", resultSHA1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_3() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("613301f9a964155ca495f189cf6a51e8874144fdfeeac503a76ce2f4", resultSHA224);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_4() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("19fce7c225381ea446738019472fc2835a53dc59604fe6e39b70b8525dda997d", resultSHA256);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_5() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("06033628cccfbb7ed0b91f0aeeee422e566eee5f653993d775f37ce31db7f08b67f9267948b4aa2d6c2ca9d367c8939d", resultSHA384);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_6() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("1b7a0dffd88f80d8499ba4f014ed94ccdc185564eddd9fac6cdca3efeea9f2f8ebb77cfa95e6d43d7c7f56cd693e4ab58e3d1d99b02ef51d0bc4659de86c4380", resultSHA512);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_ONxe0() {
        byte[] key = new byte[]{0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b};
        byte[] valueToDigest = "Hi There".getBytes();
        String expected = "492ce020fe2534a5789dc3848806c78f4f6711397f08e7e7a12ca5a4483c8aa6";
        String actual = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_RbOv0_1() {
        assertEquals("01433efd5f16327ea4b31144572c67f6", HmacUtils.hmacMd5Hex("key", "value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHmacSha1Test2_gEvm1() {
        byte[] key = new byte[10];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHmacSha1Test3_SoSf2() {
        byte[] key = new byte[20];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHmacSha1Test4_HCKh3() {
        byte[] key = new byte[30];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHmacSha1Test5_QZvb4() {
        byte[] key = new byte[40];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHmacSha1Test6_lmiE5() {
        byte[] key = new byte[50];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHmacSha1Test7_ukEf6() {
        byte[] key = new byte[60];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHmacSha1Test8_pyXW7() {
        byte[] key = new byte[70];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHmacSha1Test9_jpba8() {
        byte[] key = new byte[80];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHmacSha1Test10_OFyW9() {
        byte[] key = new byte[90];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_Jzlc0() {
        String expected = "06033628cccfbb7ed0b91f0aeeee422e566eee5f653993d775f37ce31db7f08b67f9267948b4aa2d6c2ca9d367c8939d";
        String actual = HmacUtils.hmacSha384Hex("key", "valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_pxLS0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("19fce7c225381ea446738019472fc2835a53dc59604fe6e39b70b8525dda997d", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_SOGD1_1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest".getBytes());
        assertEquals("05e7be9b69af4228bf184965ba4d9cca", resultMD5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_SOGD1_2() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest".getBytes());
        assertEquals("db0cf14221234108d75aa9a10ff7f459d934fb75", resultSHA1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_SOGD1_3() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest".getBytes());
        assertEquals("613301f9a964155ca495f189cf6a51e8874144fdfeeac503a76ce2f4", resultSHA224);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_SOGD1_4() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest".getBytes());
        assertEquals("19fce7c225381ea446738019472fc2835a53dc59604fe6e39b70b8525dda997d", resultSHA256);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_SOGD1_5() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest".getBytes());
        assertEquals("06033628cccfbb7ed0b91f0aeeee422e566eee5f653993d775f37ce31db7f08b67f9267948b4aa2d6c2ca9d367c8939d", resultSHA384);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_SOGD1_6() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest".getBytes());
        assertEquals("1b7a0dffd88f80d8499ba4f014ed94ccdc185564eddd9fac6cdca3efeea9f2f8ebb77cfa95e6d43d7c7f56cd693e4ab58e3d1d99b02ef51d0bc4659de86c4380", resultSHA512);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentKeys_Jkaj2_1() {
        HmacUtils hmacUtils1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key1");
        String result1 = hmacUtils1.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtils2 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key2");
        String result2 = hmacUtils2.hmacHex("valueToDigest".getBytes());
        assertEquals("168ee7cad83bb1144fbc05e3186782d787175bf1ae13b2a98bc90f2c52298780", result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentKeys_Jkaj2_2() {
        HmacUtils hmacUtils1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key1");
        String result1 = hmacUtils1.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtils2 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key2");
        String result2 = hmacUtils2.hmacHex("valueToDigest".getBytes());
        assertEquals("5d72f42c6b622ce87346ee654b6e7262a57dc26478e55fcf80afa53dc4bba8a3", result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentValuesToDigest_SRIz3_1() {
        HmacUtils hmacUtils1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String result1 = hmacUtils1.hmacHex("value1ToDigest".getBytes());
        HmacUtils hmacUtils2 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String result2 = hmacUtils2.hmacHex("value2ToDigest".getBytes());
        assertEquals("c2019701aa776ba394bb8c87ca95eba70600fce691e43d9616bcd6d9c743d84f", result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentValuesToDigest_SRIz3_2() {
        HmacUtils hmacUtils1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String result1 = hmacUtils1.hmacHex("value1ToDigest".getBytes());
        HmacUtils hmacUtils2 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String result2 = hmacUtils2.hmacHex("value2ToDigest".getBytes());
        assertEquals("b554c87b80cce19b685fed8e6eb6d35e0ffe6815b723fdf87c8f1dbae15d8f10", result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_NsXJ0() {
        byte[] key = new byte[]{0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b};
        Mac mac = HmacUtils.getHmacMd5(key);
        assertEquals("9294727a3638bb1c13f48ef8158bfc9d", bytesToHex(mac.doFinal("Hi There".getBytes())));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_GBic0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        byte[] valueToDigest = new byte[]{0, 1, 2, 3};
        byte[] expected = hmacUtils.hmac(valueToDigest);
        byte[] actual = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha512HexTest_phta0() {
        String expected = "1b7a0dffd88f80d8499ba4f014ed94ccdc185564eddd9fac6cdca3efeea9f2f8ebb77cfa95e6d43d7c7f56cd693e4ab58e3d1d99b02ef51d0bc4659de86c4380";
        String actual = HmacUtils.hmacSha512Hex("key", "valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha512HexTestWithEmptyValueToDigest_jbnq2() {
        String expected = "84fa5aa0279bbc473267d05a53ea03310a987cecc4c1535ff29b6d76b8f1444a728df3aadb89d4a9a6709e1998f373566e8f824a8ca93b1821f0b69bc2a2f65e";
        String actual = HmacUtils.hmacSha512Hex("key", "");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha512HexTestWithNullValueToDigest_loAG4() {
        String expected = "84fa5aa0279bbc473267d05a53ea03310a987cecc4c1535ff29b6d76b8f1444a728df3aadb89d4a9a6709e1998f373566e8f824a8ca93b1821f0b69bc2a2f65e";
        String actual = HmacUtils.hmacSha512Hex("key", null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha256HexTest1_KXcV0() {
        String expected = "a0e79a3e8a2e9a3e8a2e9a3e8a2e9a3e8a2e9a3e8a2e9a3e8a2e9a3e8a2e9a3e";
        String actual = HmacUtils.hmacSha256Hex("key", "valueToDigest");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha256HexTest2_ppzX1() {
        String expected = "19fce7c225381ea446738019472fc2835a53dc59604fe6e39b70b8525dda997d";
        String actual = HmacUtils.hmacSha256Hex("key", "valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_JVff1() {
        byte[] key = new byte[1];
        Mac mac = HmacUtils.getInitializedMac("HmacSHA256", key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_knfw3() {
        byte[] key = new byte[1];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_256, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_ioDd5_dgyh0() {
        String key = "key";
        Mac mac = HmacUtils.getInitializedMac("HmacSHA256", key.getBytes());
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacTest_JoRd0_eGUO0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        byte[] valueToDigest = new byte[10];
        byte[] expected = hmacUtils.hmac(valueToDigest);
        byte[] actual = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_oBuX0_1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("05e7be9b69af4228bf184965ba4d9cca", resultMD5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_oBuX0_2() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("db0cf14221234108d75aa9a10ff7f459d934fb75", resultSHA1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_oBuX0_3() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("613301f9a964155ca495f189cf6a51e8874144fdfeeac503a76ce2f4", resultSHA224);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_oBuX0_4() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("19fce7c225381ea446738019472fc2835a53dc59604fe6e39b70b8525dda997d", resultSHA256);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_oBuX0_5() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("06033628cccfbb7ed0b91f0aeeee422e566eee5f653993d775f37ce31db7f08b67f9267948b4aa2d6c2ca9d367c8939d", resultSHA384);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_oBuX0_6() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("1b7a0dffd88f80d8499ba4f014ed94ccdc185564eddd9fac6cdca3efeea9f2f8ebb77cfa95e6d43d7c7f56cd693e4ab58e3d1d99b02ef51d0bc4659de86c4380", resultSHA512);
    }
}