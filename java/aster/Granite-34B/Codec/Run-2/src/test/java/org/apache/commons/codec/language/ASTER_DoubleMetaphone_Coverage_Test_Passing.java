/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DoubleMetaphone_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringObject_KGie0() throws org.apache.commons.codec.EncoderException {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        try {
            doubleMetaphone.encode(123);
        } catch (EncoderException e) {
            assertEquals("DoubleMetaphone encode parameter is not of type String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringObject_wJxf1() throws org.apache.commons.codec.EncoderException {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals(doubleMetaphone.doubleMetaphone("test"), doubleMetaphone.encode("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCC1_vhpE0() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "bacchus";
        String expected = "K";
        String actual = d.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCC2_YoNQ1() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "accident";
        String expected = "KS";
        String actual = d.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCC3_SOjM2() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "accede";
        String expected = "AKST";
        String actual = d.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCC4_OJUn3() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "succeed";
        String expected = "SKST";
        String actual = d.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCC5_CfqD4() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "bacci";
        String expected = "PX";
        String actual = d.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCC6_JhwO5() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "bertucci";
        String expected = "PRTX";
        String actual = d.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCC7_eCUm6() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "bellocchio";
        String expected = "PLX";
        String actual = d.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleZ1_lBGI0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "zhao";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleZ2_hdMe1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Zhang";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleZ3_YGfe2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ZI";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleZ4_ZkkQ3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ZA";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleZ5_DDlA4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ZO";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleZ6_kZXq5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ZI";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleZ7_PHte6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ZA";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_ybUs0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_1_yaMh0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "VAN";
        boolean alternate = true;
        String expected = "FN";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_2_Rlqb1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "VON";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_3_vbyw2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "SCH";
        boolean alternate = true;
        String expected = "S";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_4_heCb3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ORCHES";
        boolean alternate = true;
        String expected = "ARKS";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_5_pNtM4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ARCHIT";
        boolean alternate = true;
        String expected = "ARKT";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_6_hWvu5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ORCHID";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_7_EFkF6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "T";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_8_YwAG7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "S";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_9_FJaU8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "A";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_10_zPNv9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "O";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_11_Tdpg10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "U";
        boolean alternate = true;
        String expected = "A";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_12_reYs11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "E";
        boolean alternate = true;
        String expected = "A";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_case1_hfkx0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "school";
        boolean alternate = true;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        String expected = "SKL";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_case2_VNTq1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "schooner";
        boolean alternate = true;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        String expected = "SKNR";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_case3_tjMx2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "schermerhorn";
        boolean alternate = true;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        String expected = "SKRM";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_case4_tWBR3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "schenker";
        boolean alternate = true;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        String expected = "SKNK";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_case5_lrfn4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "smith";
        boolean alternate = true;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        String expected = "XMT";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_case6_cfxf5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "snider";
        boolean alternate = true;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        String expected = "XNTR";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_case7_Brfw6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sc";
        boolean alternate = true;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        String expected = "SK";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_michael_DnnJ0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Michael";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "MKL";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH0_mdIT1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "chemistry";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "KMST";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_ezYS2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "chorus";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "KRS";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_containsMC_oDVM3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "MCallister";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "MKLS";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_containsCHAE_alternate_QNvu6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "MCallister";
        String actual = doubleMetaphone.doubleMetaphone(value, true);
        String expected = "MKLS";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_containsCHAE_start_jYVN7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHAE";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "X";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_containsCHAE_start_alternate_mSXc8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHAE";
        String actual = doubleMetaphone.doubleMetaphone(value, true);
        String expected = "X";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJ1_xsfC0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "JOSE";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJ2_xjLN1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "SAN ";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJ3_mIeT2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "SAN ";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_michael_akMG0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Michael";
        String expected = "MXL";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH0_jbCO1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHEMISTRY";
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_gBhy2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHEMISTRY";
        String expected = "KMST";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_index_gt_0_aaqi3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHEMISTRY";
        String expected = "XKX";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_contains_MC_Dmnx4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "MCCLELLAND";
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_contains_MC_and_index_gt_0_EQDu5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "MCCLELLAND";
        String expected = "MKLL";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_contains_MC_and_index_eq_0_BFIV6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "MCCLELLAND";
        String expected = "X";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_contains_CHAE_ZuuQ7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHAE";
        String expected = "X";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_contains_CHAE_and_index_gt_0_mdhz8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHAE";
        String expected = "XK";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_AesV0() {
        DoubleMetaphone d = new DoubleMetaphone();
        assertEquals("K", d.doubleMetaphone("CK", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_FzVb1() {
        DoubleMetaphone d = new DoubleMetaphone();
        assertEquals("S", d.doubleMetaphone("CI", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_HlhB2() {
        DoubleMetaphone d = new DoubleMetaphone();
        assertEquals("S", d.doubleMetaphone("CIO", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_RyCB3() {
        DoubleMetaphone d = new DoubleMetaphone();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_WDcE4() {
        DoubleMetaphone d = new DoubleMetaphone();
        assertEquals("S", d.doubleMetaphone("CIA", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_vjjF7() {
        DoubleMetaphone d = new DoubleMetaphone();
        assertEquals("K", d.doubleMetaphone("CC", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test10_hCNT9() {
        DoubleMetaphone d = new DoubleMetaphone();
        assertEquals("K", d.doubleMetaphone("CG", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test11_UJGx10() {
        DoubleMetaphone d = new DoubleMetaphone();
        assertEquals("K", d.doubleMetaphone("CQ", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test14_lIvh13() {
        DoubleMetaphone d = new DoubleMetaphone();
        assertEquals("S", d.doubleMetaphone("CIE", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_NJNH0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "island";
        boolean alternate = true;
        String expected = "XSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_iMQl1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "isle";
        boolean alternate = true;
        String expected = "XSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_mNeG2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "carlisle";
        boolean alternate = true;
        String expected = "KRLSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_qZdD3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "carlysle";
        boolean alternate = true;
        String expected = "KRLSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_DFll4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sugar-";
        boolean alternate = true;
        String expected = "SKR";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_GIWa5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "smith";
        boolean alternate = true;
        String expected = "XMT";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_leVD6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "snider";
        boolean alternate = true;
        String expected = "SKNDR";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_wQyg7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "resnais";
        boolean alternate = true;
        String expected = "RSNS";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test9_OEyF8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "artois";
        boolean alternate = true;
        String expected = "ARTS";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test10_oikl9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "island";
        boolean alternate = false;
        String expected = "ALNT";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test11_wKkj10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "isle";
        boolean alternate = false;
        String expected = "AL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test12_XZyz11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "carlisle";
        boolean alternate = false;
        String expected = "KRLL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test13_VLWe12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "carlysle";
        boolean alternate = false;
        String expected = "KRLL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_handleS_line1_EBia0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "island";
        boolean alternate = true;
        String expected = "ALNT";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_handleS_line4_QcjF3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sugar-";
        boolean alternate = false;
        String expected = "XKR";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_handleS_line5_jtXN4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sh";
        boolean alternate = true;
        String expected = "X";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_handleS_line6_dTOv5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sh";
        boolean alternate = false;
        String expected = "X";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_handleS_line8_nCUW7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sio";
        boolean alternate = false;
        String expected = "S";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_handleS_line10_fSGd9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sia";
        boolean alternate = false;
        String expected = "S";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }
}