/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DaitchMokotoffSoundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_SNmc0() throws EncoderException {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String input = "example";
        String expected = soundex.encode(input);
        assertEquals(expected, soundex.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringObject_VjYs1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        Object input = 123;
        try {
            soundex.encode(input);
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringAndFolding_YhJK2() throws EncoderException {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
        String input = "example";
        String expected = soundex.encode(input);
        assertEquals(expected, soundex.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_1_TLGf0_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String source = "Ashcraft";
        String expected = "A261";
        String actual = soundex.soundex(source);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_2_ydXe1_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String source = "Ashcroft";
        String expected = "049730|045973";
        String actual = soundex.soundex(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_lguH0_1_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("000000", soundex.soundex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_lguH0_3_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("764530|764453", soundex.soundex("Woonsocket"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithFolding_jxIV1_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
        assertEquals("764530|764453", soundex.soundex("Woonsocket"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_vIFe0_2_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("000000", soundex.encode(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_vIFe0_3_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("000000", soundex.encode("  \t\n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_vIFe0_4_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("000000", soundex.encode("A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_vIFe0_5_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("000000", soundex.encode("A\n"));
    }
}