/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base64_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger_JWRg0() {
        byte[] pArray = new byte[0];
        BigInteger expected = new BigInteger("0");
        BigInteger actual = Base64.decodeInteger(pArray);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_gAuT0() {
        String base64String = "SGVsbG8gV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        assertArrayEquals(expected, Base64.decodeBase64(base64String));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithLineLength_WXdc1() {
        String base64String = "SGVsbG8gV29ybGQh\n";
        byte[] expected = "Hello World!".getBytes();
        assertArrayEquals(expected, Base64.decodeBase64(base64String));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_sgdL0_1() {
        assertTrue(Base64.isBase64(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_sgdL0_2() {
        assertTrue(Base64.isBase64("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_sgdL0_3() {
        assertTrue(Base64.isBase64("ab"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_sgdL0_4() {
        assertTrue(Base64.isBase64("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_sgdL0_5() {
        assertTrue(Base64.isBase64("abcd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_sgdL0_6() {
        assertTrue(Base64.isBase64("abcde"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_sgdL0_7() {
        assertTrue(Base64.isBase64("abcdef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_sgdL0_8() {
        assertTrue(Base64.isBase64("abcdefg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_sgdL0_9() {
        assertTrue(Base64.isBase64("abcdefgh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_sgdL0_10() {
        assertTrue(Base64.isBase64("abcdefghi"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_0_WEew0() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet((byte) 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_1_etJw1() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.LENIENT);
        assertFalse(base64.isInAlphabet((byte) 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_2_dkhY2() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet((byte) 2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_3_tXBb3() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.LENIENT);
        assertFalse(base64.isInAlphabet((byte) 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_0_EgZt0() {
        assertFalse(Base64.isBase64((byte) 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_1_cwOC1() {
        assertFalse(Base64.isBase64((byte) 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_2_CwRq2() {
        assertFalse(Base64.isBase64((byte) 2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_3_YYzn3() {
        assertFalse(Base64.isBase64((byte) 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_4_sUuq4() {
        assertFalse(Base64.isBase64((byte) 4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeWithEmptyArray_WSRV1() {
        byte[] binaryData = new byte[0];
        byte[] expected = new byte[0];
        assertArrayEquals(expected, Base64.encodeBase64URLSafe(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeWithNull_bIlj2() {
        byte[] binaryData = null;
        byte[] expected = null;
        assertArrayEquals(expected, Base64.encodeBase64URLSafe(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBase64_pTnD1() {
        Base64 base64 = new Base64();
        assertNotNull(base64);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBase64IntByteArray_Cqcs2() {
        int lineLength = 0;
        byte[] lineSeparator = new byte[0];
        Base64 base64 = new Base64(lineLength, lineSeparator);
        assertNotNull(base64);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBase64IntByteArrayBoolean_BYrb3() {
        int lineLength = 0;
        byte[] lineSeparator = new byte[0];
        boolean urlSafe = false;
        Base64 base64 = new Base64(lineLength, lineSeparator, urlSafe);
        assertNotNull(base64);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBase64Boolean_JfpY4() {
        boolean urlSafe = false;
        Base64 base64 = new Base64(urlSafe);
        assertNotNull(base64);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBase64Int_aGkC5() {
        int lineLength = 0;
        Base64 base64 = new Base64(lineLength);
        assertNotNull(base64);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBase64IntByteArrayBooleanCodecPolicy_YNJC6() {
        int lineLength = 0;
        byte[] lineSeparator = new byte[0];
        boolean urlSafe = false;
        CodecPolicy decodingPolicy = CodecPolicy.LENIENT;
        Base64 base64 = new Base64(lineLength, lineSeparator, urlSafe, decodingPolicy);
        assertNotNull(base64);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorDefault_HkdE0() {
        Base64 base64 = new Base64();
        byte[] expected = null;
        byte[] actual = base64.getLineSeparator();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithLineLengthAndUrlSafe_SyMR2() {
        Base64 base64 = new Base64(10, new byte[0], true);
        byte[] expected = new byte[0];
        byte[] actual = base64.getLineSeparator();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithLineLengthAndUrlSafeAndDecodingPolicy_nVPt3() {
        Base64 base64 = new Base64(10, new byte[0], true, CodecPolicy.STRICT);
        byte[] expected = new byte[0];
        byte[] actual = base64.getLineSeparator();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithLineLengthAndLineSeparator_kqJp4() {
        Base64 base64 = new Base64(10, new byte[0]);
        byte[] expected = new byte[0];
        byte[] actual = base64.getLineSeparator();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_ptUw0_1() {
        byte[] arrayOctet = new byte[10];
        for (int i = 0; i < 10; i++) {
            arrayOctet[i] = (byte) i;
        }
        arrayOctet[0] = 10;
        assertFalse(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase642_MwXd1_1() {
        byte[] arrayOctet = new byte[10];
        for (int i = 0; i < 10; i++) {
            arrayOctet[i] = (byte) i;
        }
        arrayOctet[0] = 10;
        arrayOctet[0] = 100;
        assertFalse(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithEmptyArray_Nftp0() {
        byte[] binaryData = {};
        byte[] expected = {};
        assertArrayEquals(expected, Base64.encodeBase64(binaryData, false, false, Integer.MAX_VALUE));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithUrlSafeAndDecodingPolicy_VxYc8_xNpy0() {
        Base64 base64 = new Base64(0, null, true, CodecPolicy.STRICT);
        byte[] expected = null;
        byte[] actual = base64.getLineSeparator();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase643_VLjV2_JmrC0() {
        byte[] arrayOctet = new byte[10];
        for (int i = 0; i < 10; i++) {
            arrayOctet[i] = (byte) i;
        }
        arrayOctet[0] = -56;
        assertFalse(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase644_AxEz3_oyok0_1() {
        byte[] arrayOctet = new byte[10];
        for (int i = 0; i < 10; i++) {
            arrayOctet[i] = (byte) i;
        }
        arrayOctet[0] = (byte) 100;
        arrayOctet[0] = (byte) 10000;
        assertFalse(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_sgdL0() {
        assertTrue(Base64.isBase64(""));
        assertTrue(Base64.isBase64("a"));
        assertTrue(Base64.isBase64("ab"));
        assertTrue(Base64.isBase64("abc"));
        assertTrue(Base64.isBase64("abcd"));
        assertTrue(Base64.isBase64("abcde"));
        assertTrue(Base64.isBase64("abcdef"));
        assertTrue(Base64.isBase64("abcdefg"));
        assertTrue(Base64.isBase64("abcdefgh"));
        assertTrue(Base64.isBase64("abcdefghi"));
    }
}