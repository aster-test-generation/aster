/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base32_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_0_kZIS0() {
        Base32 base32 = new Base32();
        byte octet = 0;
        boolean result = base32.isInAlphabet(octet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_1_QrVY1() {
        Base32 base32 = new Base32();
        byte octet = 1;
        boolean result = base32.isInAlphabet(octet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_2_DQsq2() {
        Base32 base32 = new Base32();
        byte octet = 2;
        boolean result = base32.isInAlphabet(octet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_3_OSuX3() {
        Base32 base32 = new Base32();
        byte octet = 3;
        boolean result = base32.isInAlphabet(octet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_krrJ0() {
        Base32 base32 = new Base32(10, new byte[]{'\r', '\n'}, true, (byte) 0, CodecPolicy.STRICT);
        assertArrayEquals(new byte[]{'\r', '\n'}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator2_gKpS1() {
        Base32 base32 = new Base32(10, new byte[]{'\r', '\n'}, true, (byte) 0, CodecPolicy.LENIENT);
        assertArrayEquals(new byte[]{'\r', '\n'}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator3_CkeQ2() {
        Base32 base32 = new Base32(10, new byte[]{'\r', '\n'}, true, (byte) 0);
        assertArrayEquals(new byte[]{'\r', '\n'}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator4_rZat3() {
        Base32 base32 = new Base32(10, new byte[]{'\r', '\n'}, true);
        assertArrayEquals(new byte[]{'\r', '\n'}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator5_XZep4() {
        Base32 base32 = new Base32(10, new byte[]{'\r', '\n'});
        assertArrayEquals(new byte[]{'\r', '\n'}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator7_yJTB6() {
        Base32 base32 = new Base32();
        assertArrayEquals(null, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNoInput_FiEW0() {
        final byte[] input = {};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithOneByteInput_BYaA1_1() {
        final byte[] input = {0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(1, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithFourBytesInput_TQPf4_1() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
    }
}