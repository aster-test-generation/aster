/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PercentCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_JKXJ0() throws DecoderException {
        PercentCodec percentCodec = new PercentCodec();
        Object obj = new Object();
        Object result = percentCodec.decode(obj);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoEncoding_VtNL0_1() throws EncoderException {
        final byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        PercentCodec percentCodec = new PercentCodec();
        byte[] result = percentCodec.encode(bytes);
        assertNotEquals(result, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncoding_gnhj1_1() throws EncoderException {
        final byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 32};
        PercentCodec percentCodec = new PercentCodec();
        byte[] result = percentCodec.encode(bytes);
        assertNotEquals(result, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_VpBw2_Gkkj0() {
        PercentCodec codec = new PercentCodec("!@#$%^&*()".getBytes(), false);
        byte[] input = "This is a test".getBytes();
        byte[] expected = "This%20is%20a%20test".getBytes();
        try {
            assertArrayEquals(expected, codec.encode(input));
        } catch (EncoderException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAllSpecialChars_pdxs3_rSqO0() {
        PercentCodec codec = new PercentCodec("!@#$%^&*()".getBytes(), true);
        byte[] input = "This !is@ a #test$".getBytes();
        byte[] expected = "This%20!is%40%20a%20%23test%24".getBytes();
        try {
            assertArrayEquals(expected, codec.encode(input));
        } catch (EncoderException e) {
            fail("An unexpected exception was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_ZdvW2_EcRt0() {
        PercentCodec percentCodec = new PercentCodec("!@#$%^&*()".getBytes(), false);
        byte[] bytes = "hello!@world".getBytes();
        byte[] expected = "hello%21%40world".getBytes();
        assertThrows(EncoderException.class, () -> percentCodec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncoding_hDie1_YAjz0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = "This is a test".getBytes();
        byte[] expected = "This%20is%20a%20test".getBytes();
        try {
            assertArrayEquals(expected, percentCodec.encode(input));
        } catch (EncoderException e) {
            fail("Exception not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAllSpecialChars_bJNW3_eOKx0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{-1, 0, 127};
        byte[] expected = new byte[]{-1, 0, 127};
        try {
            assertArrayEquals(expected, percentCodec.encode(bytes));
        } catch (EncoderException e) {
            fail("Exception not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_JwSF3_SfoK0() {
        PercentCodec percentCodec = new PercentCodec("!@#$%^&*()".getBytes(), false);
        byte[] input = "This is a test".getBytes();
        byte[] expected = "This%20is%20a%20t!%40%23%24%25%5E%26*()est".getBytes();
        try {
            assertArrayEquals(expected, percentCodec.encode(input));
        } catch (EncoderException e) {
            fail("Exception not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_kwDJ4_lkMT0() {
        PercentCodec codec = new PercentCodec(new byte[]{0, 1, 2, 3, 4, 5}, false);
        byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 32, 33};
        byte[] expected = new byte[]{37, 33, 34, 35, 36, 37, 32, 33};
        byte[] result = null;
        try {
            result = codec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAllParameters_qYkv5_dqHE0() {
        PercentCodec codec = new PercentCodec(new byte[]{0, 1, 2, 3, 4, 5}, true);
        byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 32, 33};
        byte[] expected = new byte[]{37, 33, 34, 35, 36, 37, 43, 33};
        byte[] result = null;
        try {
            result = codec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode1_SjQI1_fid1() throws DecoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[0];
        Object result = percentCodec.decode(bytes);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncoding_gnhj1_2_fid1() throws EncoderException {
        final byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 32};
        PercentCodec percentCodec = new PercentCodec();
        byte[] result = percentCodec.encode(bytes);
        assertTrue(result.length > bytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_rLQf2_2_fid1() throws EncoderException {
        final byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 32};
        PercentCodec percentCodec = new PercentCodec(null, true);
        byte[] result = percentCodec.encode(bytes);
        assertTrue(result.length > bytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoEncoding_VtNL0() throws EncoderException {
        final byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        PercentCodec percentCodec = new PercentCodec();
        byte[] result = percentCodec.encode(bytes);
        assertNotEquals(result, bytes);
        assertEquals(result.length, bytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncoding_gnhj1() throws EncoderException {
        final byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 32};
        PercentCodec percentCodec = new PercentCodec();
        byte[] result = percentCodec.encode(bytes);
        assertNotEquals(result, bytes);
        assertTrue(result.length > bytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_rLQf2() throws EncoderException {
        final byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 32};
        PercentCodec percentCodec = new PercentCodec(null, true);
        byte[] result = percentCodec.encode(bytes);
        assertNotEquals(result, bytes);
        assertTrue(result.length > bytes.length);
    }
}