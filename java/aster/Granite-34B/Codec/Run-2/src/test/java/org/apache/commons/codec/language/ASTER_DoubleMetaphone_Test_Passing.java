/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DoubleMetaphone_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_CmFJ0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "test";
        Object expected = doubleMetaphone.doubleMetaphone(input);
        Object actual = doubleMetaphone.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonString_mNkB1_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        Object input = 123;
        EncoderException exception =
        org.junit.jupiter.api.Assertions.assertThrows(EncoderException.class, () -> doubleMetaphone.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcharAtWithValidIndex_xyyL0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "example";
        int index = 2;
        char expected = 'a';
        char actual = doubleMetaphone.charAt(value, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcharAtWithInvalidIndex_JBlO1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "example";
        int index = 10;
        char expected = Character.MIN_VALUE;
        char actual = doubleMetaphone.charAt(value, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcharAtWithNegativeIndex_jkWt2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "example";
        int index = -1;
        char expected = Character.MIN_VALUE;
        char actual = doubleMetaphone.charAt(value, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_dzMt1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("TST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNullInput_DEVI2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = null;
        boolean alternate = true;
        String expected = null;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithInvalidInput_GXiV4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "123";
        boolean alternate = true;
        String expected = "";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSingleLetterInput_lpBx3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("A", doubleMetaphone.encode("A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_jRWB0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        doubleMetaphone.setMaxCodeLen(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLenWithZero_wzgH1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        doubleMetaphone.setMaxCodeLen(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLenWithNegativeNumber_mqtY2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        doubleMetaphone.setMaxCodeLen(-1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLenWithMaximumValue_ySfj3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        doubleMetaphone.setMaxCodeLen(Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLenWithMinimumValue_AoLh4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        doubleMetaphone.setMaxCodeLen(Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsWithInvalidInput_iqdF1() {
        String value = "example";
        int start = 0;
        int length = 6;
        String[] criteria = {"ex", "amp", "e"};
        assertFalse(DoubleMetaphone.contains(value, start, length, criteria));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsWithEmptyCriteria_ELrI2() {
        String value = "example";
        int start = 0;
        int length = 6;
        String[] criteria = {};
        assertFalse(DoubleMetaphone.contains(value, start, length, criteria));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsWithNegativeStart_SuwP3() {
        String value = "example";
        int start = -1;
        int length = 6;
        String[] criteria = {"ex", "ampl", "e"};
        assertFalse(DoubleMetaphone.contains(value, start, length, criteria));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsWithStartExceedingLength_mHoc5() {
        String value = "example";
        int start = 6;
        int length = 6;
        String[] criteria = {"ex", "ampl", "e"};
        assertFalse(DoubleMetaphone.contains(value, start, length, criteria));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_EZjD0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "test";
        String value2 = "test";
        boolean alternate = true;
        boolean expected = true;
        boolean actual = doubleMetaphone.isDoubleMetaphoneEqual(value1, value2, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual2_JoTw1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "test";
        String value2 = "test";
        boolean alternate = false;
        boolean expected = true;
        boolean actual = doubleMetaphone.isDoubleMetaphoneEqual(value1, value2, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleR_fDLK10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone12_jxmC11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_1_HGKx0() {
        String value = "A";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_7_HzXi6() {
        String value = "B";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("P", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_8_NCUT7() {
        String value = "C";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_9_ocgB8() {
        String value = "D";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("T", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_10_esNx9() {
        String value = "F";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("F", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_11_nhep10() {
        String value = "G";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_13_HcEW12() {
        String value = "J";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("J", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_14_kJFm13() {
        String value = "K";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_15_JLOL14() {
        String value = "L";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("L", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_1_JISl1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "A";
        boolean alternate = false;
        String expected = "A";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_2_OhFM2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "AA";
        boolean alternate = false;
        String expected = "A";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_7_VVJr7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "B";
        boolean alternate = false;
        String expected = "P";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_8_Ribj8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "BB";
        boolean alternate = false;
        String expected = "P";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_9_BNwb9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "C";
        boolean alternate = false;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_10_UwQq10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CC";
        boolean alternate = false;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_1_TUKs0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = false;
        String expected = "TST";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_2_AsDH1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = true;
        String expected = "TST";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_12_iqIW11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = true;
        String expected = "TST";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_12_UIyN11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = false;
        String expected = "TST";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Yvdy1_1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("APK", doubleMetaphone.doubleMetaphone("APK", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxCodeLen_QznJ0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        int expected = 4; // Replace with the expected value
        int actual = doubleMetaphone.getMaxCodeLen();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonString_mNkB1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        Object input = 123;
        EncoderException exception =
        org.junit.jupiter.api.Assertions.assertThrows(EncoderException.class, () -> doubleMetaphone.encode(input));
        assertEquals("DoubleMetaphone encode parameter is not of type String", exception.getMessage());
    }
}