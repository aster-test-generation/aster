/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Hex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_DZEM0() {
        byte[] data = new byte[]{0x00, 0x0F, (byte) 0xF0, (byte) 0xFF};
        boolean toLowerCase = true;
        char[] expected = new char[]{'0', 'f', 'f', '0', 'f', 'f'};
        char[] actual = Hex.encodeHex(data, toLowerCase);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Cfvx0() {
        Hex hex = new Hex("UTF-8");
        ByteBuffer array = ByteBuffer.allocate(10);
        byte[] expected = hex.encode(array);
        byte[] actual = new byte[10];
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_wVAT1() {
        Hex hex = new Hex(Charset.defaultCharset());
        ByteBuffer array = ByteBuffer.allocate(10);
        byte[] expected = hex.encode(array);
        byte[] actual = new byte[10];
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_koKP2() {
        Hex hex = new Hex();
        ByteBuffer array = ByteBuffer.allocate(10);
        byte[] expected = hex.encode(array);
        byte[] actual = new byte[10];
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_vPSS0() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F, (byte) 0xFF};
        char[] expected = new char[]{'0', '0', '0', '0', '3', '0', '0', '0'};
        char[] actual = Hex.encodeHex(data, 0, data.length, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithOffset_FvMs1() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F, (byte) 0xFF};
        char[] expected = new char[]{'0', '0', '3', '0', '0', '0'};
        char[] actual = Hex.encodeHex(data, 1, data.length - 1, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithCustomCase_IXDS2() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F, (byte) 0xFF};
        char[] expected = new char[]{'0', '0', '0', '0', '3', 'F', 'F', 'F'};
        char[] actual = Hex.encodeHex(data, 0, data.length, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_IVag0() {
        byte[] data = new byte[]{0x00, 0x0F, (byte) 0xF0, (byte) 0xFF};
        char[] expected = new char[]{'0', '0', 'F', 'F', '0', 'F', 'F', '0', 'F', 'F'};
        char[] actual = Hex.encodeHex(data, 0, data.length, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithOffsetAndLength_rpiE1() {
        byte[] data = new byte[]{0x00, 0x0F, (byte) 0xF0, (byte) 0xFF};
        char[] expected = new char[]{'F', 'F', '0', 'F', 'F'};
        char[] actual = Hex.encodeHex(data, 1, 3, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithDifferentCase_cMxk2() {
        byte[] data = new byte[]{0x00, 0x0F, (byte) 0xF0, (byte) 0xFF};
        char[] expected = new char[]{'0', '0', 'f', 'f', '0', 'f', 'f', '0', 'f', 'f'};
        char[] actual = Hex.encodeHex(data, 0, data.length, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_TAVF0() throws DecoderException {
        Hex hex = new Hex(StandardCharsets.UTF_8);
        ByteBuffer buffer = ByteBuffer.allocate(10);
        buffer.put("Hello, World!".getBytes(StandardCharsets.UTF_8));
        buffer.flip();
        byte[] expected = hex.decode(buffer);
        byte[] actual = hex.decode(buffer);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_LVgU0() {
        final String charsetName = "UTF-8";
        final Hex hex = new Hex(charsetName);
        final String expected = "Hex[charsetName=" + charsetName + "]";
        assertEquals(expected, hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithCharset_bqoc1() {
        final Charset charset = Charset.forName("UTF-8");
        final Hex hex = new Hex(charset);
        final String expected = "Hex[charsetName=" + charset.name() + "]";
        assertEquals(expected, hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringDefault_uZcK2() {
        final Hex hex = new Hex();
        final String expected = "org.apache.commons.codec.binary.Hex@58e9555c[charsetName=UTF-8]";
        assertEquals(expected, hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteBuffer_pVec1() {
        Hex hex = new Hex();
        ByteBuffer input = ByteBuffer.wrap("Hello, World!".getBytes());
        Object result = hex.encode(input);
        assertEquals("[B@2aa4aaa6", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_nBgz2() {
        Hex hex = new Hex();
        byte[] input = "Hello, World!".getBytes();
        Object result = hex.encode(input);
        assertEquals("[B@7b69de91", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_ktpe0_1() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(10);
        char[] toDigits = new char[16];
        char[] expected = new char[10];
        byteBuffer.put((byte) 0xFF);
        byteBuffer.flip();
        byteBuffer.clear();
        byteBuffer.put((byte) 0x100);
        byteBuffer.flip();
        assertArrayEquals(expected, Hex.encodeHex(byteBuffer, toDigits));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jVLQ0() {
        Hex hex = new Hex("UTF-8");
        byte[] array = "Hello, World!".getBytes();
        byte[] expected = "48656C6C6F2C20576F726C6421".getBytes();
        assertArrayEquals(expected, hex.encode(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_eLWp1() {
        Hex hex = new Hex(StandardCharsets.UTF_16BE);
        byte[] array = "Hello, World!".getBytes(StandardCharsets.UTF_16BE);
        byte[] expected = "520065006C006C006F002C00200057006F0072006C0064002100".getBytes(StandardCharsets.UTF_16BE);
        assertArrayEquals(expected, hex.encode(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_yCHa0() throws DecoderException {
        final Hex hex = new Hex();
        final Object object = "test";
        final Object result = hex.decode(object);
        assertEquals(new byte[]{0x74, 0x65, 0x73, 0x74}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_SGIy1() throws DecoderException {
        final Hex hex = new Hex();
        final Object object = new byte[]{0x00, 0x01, 0x02};
        final Object result = hex.decode(object);
        byte[] expected = {0x00, 0x01, 0x02};
        assertArrayEquals(expected, (byte[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteBuffer_ueeC2() throws DecoderException {
        final Hex hex = new Hex();
        final Object object = ByteBuffer.allocate(3);
        final Object result = hex.decode(object);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_KGjW0() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] expected = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        assertArrayEquals(expected, Hex.decodeHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithOffset_xlML1() throws DecoderException {
        char[] data = new char[]{'1', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] output = new byte[16];
        byte[] expected = new byte[]{0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
        Hex.decodeHex(data, output, 4);
        assertArrayEquals(expected, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithOddLength_AIHj2() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G'};
        byte[] expected = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        assertArrayEquals(expected, Hex.decodeHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithValidInput_Ihkw3_4() throws DecoderException {
        char[] data = new char[]{'1', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[8];
        int outOffset = 0;
        int result = Hex.decodeHex(data, out, outOffset);
        assertEquals(0x00, out[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_nUsN0_MvWj0() {
        Hex hex = new Hex("UTF-8");
        String input = "Hello, World!";
        try {
            Object result = hex.encode(input);
            assertEquals("[C@24fe7ed8", result.toString());
        } catch (EncoderException e) {
            fail("Exception not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_vPSS0_fid1() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F, (byte) 0xFF};
        char[] expected = new char[]{'0', '0', 'F', 'F', '3', 'F', 'F', 'F'};
        char[] actual = Hex.encodeHex(data, 0, data.length, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithOffset_FvMs1_fid1() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F, (byte) 0xFF};
        char[] expected = new char[]{'F', 'F', '3', 'F', 'F', 'F'};
        char[] actual = Hex.encodeHex(data, 1, data.length - 1, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithCustomCase_IXDS2_fid1() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F, (byte) 0xFF};
        char[] expected = new char[]{'0', '0', 'f', 'f', '3', 'F', 'F', 'F'};
        char[] actual = Hex.encodeHex(data, 0, data.length, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringDefault_uZcK2_fid1() {
        final Hex hex = new Hex();
        final String expected = "Hex[charsetName=UTF-8]";
        assertEquals(expected, hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeHex_THDR0() {
        ByteBuffer data = ByteBuffer.allocate(10);
        char[] result = Hex.encodeHex(data);
        char[] expected = new char[20];
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteBuffer_pVec1_fid1() {
        Hex hex = new Hex();
        ByteBuffer input = ByteBuffer.wrap("Hello, World!".getBytes());
        Object result = hex.encode(input);
        assertEquals("48656C6C6F2C20576F726C6421", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_nBgz2_fid1() {
        Hex hex = new Hex();
        byte[] input = "Hello, World!".getBytes();
        Object result = hex.encode(input);
        assertEquals("48656C6C6F2C20576F726C6421", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_eLWp1_fid1() {
        Hex hex = new Hex(StandardCharsets.UTF_16BE);
        byte[] array = "Hello, World!".getBytes(StandardCharsets.UTF_16BE);
        byte[] expected = "480065006C006C006F002C00200057006F0072006C0064002100".getBytes(StandardCharsets.UTF_16BE);
        assertArrayEquals(expected, hex.encode(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_yCHa0_fid1() throws DecoderException {
        final Hex hex = new Hex();
        final Object object = "test";
        final Object result = hex.decode(object);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_SGIy1_fid1() throws DecoderException {
        final Hex hex = new Hex();
        final Object object = new byte[]{0x00, 0x01, 0x02};
        final Object result = hex.decode(object);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteBuffer_ueeC2_fid1() throws DecoderException {
        final Hex hex = new Hex();
        final Object object = ByteBuffer.allocate(3);
        final Object result = hex.decode(object);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithOffset_xlML1_fid1() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] output = new byte[16];
        byte[] expected = new byte[]{0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
        Hex.decodeHex(data, output, 4);
        assertArrayEquals(expected, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithValidInput_Ihkw3_4_fid1() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[8];
        int outOffset = 0;
        int result = Hex.decodeHex(data, out, outOffset);
        assertEquals(0x00, out[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithValidInput_Ihkw3_5() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[8];
        int outOffset = 0;
        int result = Hex.decodeHex(data, out, outOffset);
        assertEquals(0x01, out[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithValidInput_Ihkw3_6() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[8];
        int outOffset = 0;
        int result = Hex.decodeHex(data, out, outOffset);
        assertEquals(0x23, out[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithValidInput_Ihkw3_7() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[8];
        int outOffset = 0;
        int result = Hex.decodeHex(data, out, outOffset);
        assertEquals(0x45, out[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithValidInput_Ihkw3_8() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[8];
        int outOffset = 0;
        int result = Hex.decodeHex(data, out, outOffset);
        assertEquals(0x67, out[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithValidInput_Ihkw3_9() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[8];
        int outOffset = 0;
        int result = Hex.decodeHex(data, out, outOffset);
        assertEquals(0x89, out[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithValidInput_Ihkw3_10() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[8];
        int outOffset = 0;
        int result = Hex.decodeHex(data, out, outOffset);
        assertEquals(0xAB, out[6]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithValidInput_Ihkw3_11() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[8];
        int outOffset = 0;
        int result = Hex.decodeHex(data, out, outOffset);
        assertEquals(0xCD, out[7]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithNegativeOutOffset_kXFt4() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[8];
        int outOffset = -1;
        try {
            Hex.decodeHex(data, out, outOffset);
            fail("IndexOutOfBoundsException expected");
        } catch (IndexOutOfBoundsException e) {
            assertEquals("Out offset cannot be negative.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex3_FeQK2() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F};
        char[] out = new char[6];
        Hex.encodeHex(data, 0, data.length, true, out, 2);
        Assertions.assertEquals("000f3f", new String(out));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex4_inyc3() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F};
        char[] out = new char[6];
        Hex.encodeHex(data, 0, data.length, false, out, 2);
        Assertions.assertEquals("000F3F", new String(out));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex5_LNIw4() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F};
        char[] out = new char[6];
        Hex.encodeHex(data, 1, 2, true, out, 0);
        Assertions.assertEquals("0f3f", new String(out));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex6_Lygb5() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F};
        char[] out = new char[6];
        Hex.encodeHex(data, 1, 2, false, out, 0);
        Assertions.assertEquals("0F3F", new String(out));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex7_vhvh6() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F};
        char[] out = new char[6];
        Hex.encodeHex(data, 1, 2, true, out, 2);
        Assertions.assertEquals("0f3f", new String(out));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex8_Klen7() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F};
        char[] out = new char[6];
        Hex.encodeHex(data, 1, 2, false, out, 2);
        Assertions.assertEquals("0F3F", new String(out));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_nUsN0_MvWj0_fid1() {
        Hex hex = new Hex("UTF-8");
        String input = "Hello, World!";
        try {
            Object result = hex.encode(input);
            assertEquals("48656C6C6F2C20576F726C6421", result.toString());
        } catch (EncoderException e) {
            fail("Exception not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_ktpe0() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(10);
        char[] toDigits = new char[16];
        char[] expected = new char[10];
        byteBuffer.put((byte) 0xFF);
        byteBuffer.flip();
        assertArrayEquals(expected, Hex.encodeHex(byteBuffer, toDigits));
        byteBuffer.clear();
        byteBuffer.put((byte) 0x100);
        byteBuffer.flip();
        assertArrayEquals(expected, Hex.encodeHex(byteBuffer, toDigits));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithValidInput_Ihkw3() throws DecoderException {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[8];
        int outOffset = 0;
        int result = Hex.decodeHex(data, out, outOffset);
        assertNotEquals(0, result);
        assertNotEquals(-1, result);
        assertEquals(8, result);
        assertEquals(0x00, out[0]);
        assertEquals(0x01, out[1]);
        assertEquals(0x23, out[2]);
        assertEquals(0x45, out[3]);
        assertEquals(0x67, out[4]);
        assertEquals(0x89, out[5]);
        assertEquals(0xAB, out[6]);
        assertEquals(0xCD, out[7]);
    }
}