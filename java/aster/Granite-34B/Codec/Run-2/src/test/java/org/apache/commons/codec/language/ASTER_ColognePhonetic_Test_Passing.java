/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ColognePhonetic_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_vmNS0() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String input = "Hello";
        Object expected = new ColognePhonetic().encode(input);
        Object actual = colognePhonetic.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonString_hMoK1() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        Object input = 123;
        try {
            colognePhonetic.encode(input);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("This method's parameter was expected to be of the type " + String.class.getName() + ". But actually it was of the type " + input.getClass().getName() + ".", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_qgOs0() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "Mller";
        String text2 = "Mueller";
        boolean expected = true;
        boolean actual = colognePhonetic.isEncodeEqual(text1, text2);
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_1_rabR0() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text = "A";
        String expected = "0";
        String actual = colognePhonetic.colognePhonetic(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_2_UOJX1() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text = "B";
        String expected = "1";
        String actual = colognePhonetic.colognePhonetic(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_3_CTuE2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text = "C";
        String expected = "8";
        String actual = colognePhonetic.colognePhonetic(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_4_hKyQ3() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text = "D";
        String expected = "2";
        String actual = colognePhonetic.colognePhonetic(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_5_odml4() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text = "E";
        String expected = "0";
        String actual = colognePhonetic.colognePhonetic(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_6_ZubU5() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text = "F";
        String expected = "3";
        String actual = colognePhonetic.colognePhonetic(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_7_yZQc6() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text = "G";
        String expected = "4";
        String actual = colognePhonetic.colognePhonetic(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_8_UwLP7() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text = "H";
        String expected = "";
        String actual = colognePhonetic.colognePhonetic(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_9_rUWu8() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text = "I";
        String expected = "0";
        String actual = colognePhonetic.colognePhonetic(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_10_glzb9() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text = "J";
        String expected = "0";
        String actual = colognePhonetic.colognePhonetic(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_11_XrTz10() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text = "K";
        String expected = "4";
        String actual = colognePhonetic.colognePhonetic(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_12_zKKc11() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text = "L";
        String expected = "5";
        String actual = colognePhonetic.colognePhonetic(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_1_UFce0_fid2() {
        final ColognePhonetic colognePhonetic = new ColognePhonetic();
        final String text = "ABC";
        final String expected = "018";
        final String actual = colognePhonetic.colognePhonetic(text);
        assertEquals(expected, actual);
    }
}