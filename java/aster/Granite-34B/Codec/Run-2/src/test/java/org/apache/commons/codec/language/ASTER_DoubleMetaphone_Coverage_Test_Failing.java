/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DoubleMetaphone_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCC1_vhpE0_fid2() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "bacchus";
        String expected = "K";
        String actual = d.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCC2_YoNQ1_fid2() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "accident";
        String expected = "KS";
        String actual = d.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCC3_SOjM2_fid2() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "accede";
        String expected = "KS";
        String actual = d.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCC4_OJUn3_fid2() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "succeed";
        String expected = "KS";
        String actual = d.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCC5_CfqD4_fid2() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "bacci";
        String expected = "X";
        String actual = d.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCC6_JhwO5_fid2() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "bertucci";
        String expected = "X";
        String actual = d.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCC7_eCUm6_fid2() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "bellocchio";
        String expected = "X";
        String actual = d.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithIndexEqualsLengthMinusOneAndNotSlavoGermanicAndContainsIEAndNotContainsMEAndMA_hPdZ0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "value";
        boolean alternate = true;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        String expected = "expected";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithIndexEqualsLengthMinusOneAndNotSlavoGermanicAndNotContainsIEAndNotContainsMEAndMA_xFhI1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "value";
        boolean alternate = false;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        String expected = "expected";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_1_yaMh0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "VAN";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_2_Rlqb1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "VON";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_3_vbyw2_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "SCH";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_4_heCb3_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ORCHES";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_5_pNtM4_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ARCHIT";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_6_hWvu5_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ORCHID";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_7_EFkF6_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "T";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_8_YwAG7_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "S";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_9_FJaU8_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "A";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_10_zPNv9_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "O";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_11_Tdpg10_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "U";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_12_reYs11_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "E";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_case1_hfkx0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "school";
        boolean alternate = true;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        String expected = "SK";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_case2_VNTq1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "schooner";
        boolean alternate = true;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        String expected = "SK";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_case3_tjMx2_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "schermerhorn";
        boolean alternate = true;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        String expected = "XSK";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_case4_tWBR3_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "schenker";
        boolean alternate = true;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        String expected = "SK";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_case5_lrfn4_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "smith";
        boolean alternate = true;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        String expected = "SK";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_case6_cfxf5_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "snider";
        boolean alternate = true;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        String expected = "SK";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_michael_DnnJ0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Michael";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "KXZ";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH0_mdIT1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "chemistry";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "K";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH1_ezYS2_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "chorus";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "K";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_containsMC_oDVM3_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "MCallister";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "K";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_containsCHAE_ZJih5_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "MCallister";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "KXZ";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_containsCHAE_alternate_QNvu6_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "MCallister";
        String actual = doubleMetaphone.doubleMetaphone(value, true);
        String expected = "KXZ";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_containsCHAE_start_jYVN7_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHAE";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "KXZ";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_containsCHAE_start_alternate_mSXc8_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHAE";
        String actual = doubleMetaphone.doubleMetaphone(value, true);
        String expected = "KXZ";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_michael_akMG0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Michael";
        String expected = "MXL";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_conditionCH0_jbCO1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHEMISTRY";
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_index_gt_0_aaqi3_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHEMISTRY";
        String expected = "XKX";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_contains_MC_Dmnx4_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "MCCLELLAND";
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_contains_MC_and_index_gt_0_EQDu5_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "MCCLELLAND";
        String expected = "XK";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_contains_MC_and_index_eq_0_BFIV6_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "MCCLELLAND";
        String expected = "X";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_contains_CHAE_ZuuQ7_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHAE";
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_contains_CHAE_and_index_gt_0_mdhz8_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHAE";
        String expected = "XK";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_FzVb1_fid2() {
        DoubleMetaphone d = new DoubleMetaphone();
        assertEquals("K", d.doubleMetaphone("CI", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_HlhB2_fid2() {
        DoubleMetaphone d = new DoubleMetaphone();
        assertEquals("KS", d.doubleMetaphone("CIO", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_RyCB3_fid2() {
        DoubleMetaphone d = new DoubleMetaphone();
        assertEquals("KS", d.doubleMetaphone("CIE", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_WDcE4_fid2() {
        DoubleMetaphone d = new DoubleMetaphone();
        assertEquals("KS", d.doubleMetaphone("CIA", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_xsbe5_fid2() {
        DoubleMetaphone d = new DoubleMetaphone();
        assertEquals("K", d.doubleMetaphone("CE", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_qIGm6_fid2() {
        DoubleMetaphone d = new DoubleMetaphone();
        assertEquals("K", d.doubleMetaphone("CY", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_NJNH0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "island";
        boolean alternate = true;
        String expected = "XSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_iMQl1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "isle";
        boolean alternate = true;
        String expected = "XSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_mNeG2_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "carlisle";
        boolean alternate = true;
        String expected = "KRLSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_qZdD3_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "carlysle";
        boolean alternate = true;
        String expected = "KRLSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_DFll4_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sugar-";
        boolean alternate = true;
        String expected = "XSG";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_GIWa5_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "smith";
        boolean alternate = true;
        String expected = "SKMT";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_leVD6_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "snider";
        boolean alternate = true;
        String expected = "SKNDR";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_wQyg7_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "resnais";
        boolean alternate = true;
        String expected = "RSKNS";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test10_oikl9_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "island";
        boolean alternate = false;
        String expected = "XSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test11_wKkj10_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "isle";
        boolean alternate = false;
        String expected = "XSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test12_XZyz11_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "carlisle";
        boolean alternate = false;
        String expected = "KRLSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test13_VLWe12_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "carlysle";
        boolean alternate = false;
        String expected = "KRLSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_handleS_line3_NiZv2_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sugar-";
        boolean alternate = true;
        String expected = "XSK";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_handleS_line4_QcjF3_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sugar-";
        boolean alternate = false;
        String expected = "XSK";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_handleS_line7_PSQT6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sio";
        boolean alternate = true;
        String expected = "S";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_handleS_line9_Eyma8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sia";
        boolean alternate = true;
        String expected = "S";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_handleS_line11_NTfV10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sian";
        boolean alternate = true;
        String expected = "S";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }
}