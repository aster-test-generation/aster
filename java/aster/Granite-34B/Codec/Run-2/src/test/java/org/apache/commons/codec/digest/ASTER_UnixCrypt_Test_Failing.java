/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnixCrypt_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithoutOriginal_yolj1() {
        byte[] original = null;
        String expected = UnixCrypt.crypt(original);
        assertEquals("expectedResult", expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSalt_BXJm0() {
        String original = "password";
        String salt = "$1$";
        String expected = "$1$";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithoutSalt_NAFO1() {
        String original = "password";
        String salt = "";
        String expected = "";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullOriginal_rTJS2() {
        String original = null;
        String salt = "$1$";
        String expected = null;
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNull_bbmK1() {
        String original = null;
        String expected = null;
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidSalt_rmav4() {
        byte[] original = new byte[8];
        String salt = "12";
        try {
            UnixCrypt.crypt(original, salt);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid salt value: 12", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSaltLengthMoreThanTwo_vJGw6() {
        byte[] original = new byte[8];
        String salt = "abc";
        try {
            UnixCrypt.crypt(original, salt);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid salt value: abc", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithoutSalt_LwkI1() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{0, 1, 2, 3, 4, 5, 6, 7};
        String actual = unixCrypt.crypt(original, null);
        String expected = "K0bh7b35u1hrU";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidSalt_Hofh2() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{0, 1, 2, 3, 4, 5, 6, 7};
        String salt = "12";
        try {
            unixCrypt.crypt(original, salt);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid salt value: 12", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_rcqh4() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{0, 1, 2, 3, 4, 5, 6, 7};
        String salt = null;
        String actual = unixCrypt.crypt(original, salt);
        String expected = "qX0.2A1NdfKfg";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginalAndSalt_PrNh0() {
        byte[] original = {};
        String salt = "";
        String expected = "";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLength1AndSaltLength1_ANsP1() {
        byte[] original = {0x00};
        String salt = "a";
        String expected = "a";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLength2AndSaltLength1_PDlD4() {
        byte[] original = {0x00, 0x01};
        String salt = "a";
        String expected = "aa";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLength3AndSaltLength1_hkvO7() {
        byte[] original = {0x00, 0x01, 0x02};
        String salt = "a";
        String expected = "aa";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalOfLength0AndSaltStartingWith0_yGEA0() {
        byte[] original = {};
        String salt = "0";
        UnixCrypt unixCrypt = new UnixCrypt();
        String result = unixCrypt.crypt(original, salt);
        assertEquals("0", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalOfLength0AndSaltStartingWith1_yscl1() {
        byte[] original = {};
        String salt = "1";
        UnixCrypt unixCrypt = new UnixCrypt();
        String result = unixCrypt.crypt(original, salt);
        assertEquals("1", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalOfLength0AndSaltStartingWith2_McGK2() {
        byte[] original = {};
        String salt = "2";
        UnixCrypt unixCrypt = new UnixCrypt();
        String result = unixCrypt.crypt(original, salt);
        assertEquals("2", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalOfLength0AndSaltStartingWith3_FWln3() {
        byte[] original = {};
        String salt = "3";
        UnixCrypt unixCrypt = new UnixCrypt();
        String result = unixCrypt.crypt(original, salt);
        assertEquals("3", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalOfLength0AndSaltStartingWith4_qeoV4() {
        byte[] original = {};
        String salt = "4";
        UnixCrypt unixCrypt = new UnixCrypt();
        String result = unixCrypt.crypt(original, salt);
        assertEquals("4", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalOfLength0AndSaltStartingWith5_uyKj5() {
        byte[] original = {};
        String salt = "5";
        UnixCrypt unixCrypt = new UnixCrypt();
        String result = unixCrypt.crypt(original, salt);
        assertEquals("5", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalOfLength0AndSaltStartingWith6_owKG6() {
        byte[] original = {};
        String salt = "6";
        UnixCrypt unixCrypt = new UnixCrypt();
        String result = unixCrypt.crypt(original, salt);
        assertEquals("6", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalOfLength0AndSaltStartingWith7_xIOp7() {
        byte[] original = {};
        String salt = "7";
        UnixCrypt unixCrypt = new UnixCrypt();
        String result = unixCrypt.crypt(original, salt);
        assertEquals("7", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalOfLength0AndSaltStartingWith8_OPzc8() {
        byte[] original = {};
        String salt = "8";
        UnixCrypt unixCrypt = new UnixCrypt();
        String result = unixCrypt.crypt(original, salt);
        assertEquals("8", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalOfLength0AndSaltStartingWith9_Gmcu9() {
        byte[] original = {};
        String salt = "9";
        UnixCrypt unixCrypt = new UnixCrypt();
        String result = unixCrypt.crypt(original, salt);
        assertEquals("9", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalOfLength1AndSaltStartingWith0_ogFH10() {
        byte[] original = {0};
        String salt = "0";
        UnixCrypt unixCrypt = new UnixCrypt();
        String result = unixCrypt.crypt(original, salt);
        assertEquals("0", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalOfLength1AndSaltStartingWith1_UrbR11() {
        byte[] original = {0};
        String salt = "1";
        UnixCrypt unixCrypt = new UnixCrypt();
        String result = unixCrypt.crypt(original, salt);
        assertEquals("1", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalOfLength1AndSaltStartingWith2_oyxq12() {
        byte[] original = {0};
        String salt = "2";
        UnixCrypt unixCrypt = new UnixCrypt();
        String result = unixCrypt.crypt(original, salt);
        assertEquals("2", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalOfLength1AndSaltStartingWith3_stui13() {
        byte[] original = {0};
        String salt = "3";
        UnixCrypt unixCrypt = new UnixCrypt();
        String result = unixCrypt.crypt(original, salt);
        assertEquals("3", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidSalt_WZzO1() {
        final String invalidSalt = "invalid";
        final String expected = "Invalid salt value: " + invalidSalt;
        final String actual = UnixCrypt.crypt(new byte[8], invalidSalt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_HDLl3() {
        final String expected = "E4Fb5xZfm95gc";
        final String actual = UnixCrypt.crypt(new byte[0], null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithShortOriginal_UgCj4() {
        final byte[] original = {0x01, 0x02};
        final String expected = "5fOsVFOINLlUU";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_MoVj5() {
        final byte[] original = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09};
        final String expected = "HRkMN1DQ5yINs";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthOne_ckVM6() {
        final byte[] original = {0x01};
        final String expected = "2nARHPU37Ez0M";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthTwo_TBMz7() {
        final byte[] original = {0x01, 0x02};
        final String expected = "ar7Spp9Pa66t2";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthThree_fbCT8() {
        final byte[] original = {0x01, 0x02, 0x03};
        final String expected = "F.nToHzS6MVT6";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthFour_eeAu9() {
        final byte[] original = {0x01, 0x02, 0x03, 0x04};
        final String expected = "HBmaGoq7uS/NQ";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthFive_DFkC10() {
        final byte[] original = {0x01, 0x02, 0x03, 0x04, 0x05};
        final String expected = "EkT2UN50ePrPk";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthSix_fyxR11() {
        final byte[] original = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06};
        final String expected = "P./e8tn9NEFjQ";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthSeven_XTsi12() {
        final byte[] original = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
        final String expected = "1zZ/tZeFb7.4M";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_YDvd3_fid1() {
        String original = "password";
        String salt = null;
        String expected = null;
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmpty_PYVM2() {
        String original = "";
        String expected = "";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSalt_DPcW0_fid1() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{0, 1, 2, 3, 4, 5, 6, 7};
        String salt = "ab";
        String actual = unixCrypt.crypt(original, salt);
        String expected = "abx.4,4,4,4,4,4,4,4,4";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithoutSalt_LwkI1_fid1() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{0, 1, 2, 3, 4, 5, 6, 7};
        String actual = unixCrypt.crypt(original, null);
        String expected = ".x.4,4,4,4,4,4,4,4,4";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_rcqh4_fid1() {
        UnixCrypt unixCrypt = new UnixCrypt();
        byte[] original = new byte[]{0, 1, 2, 3, 4, 5, 6, 7};
        String salt = null;
        String actual = unixCrypt.crypt(original, salt);
        String expected = ".x.4,4,4,4,4,4,4,4,4";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_crypt_0_aNJw0_fid1() throws Exception {
        byte[] original = new byte[0];
        String salt = "aa";
        String expected = "aa";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_crypt_1_QsCs1_fid1() throws Exception {
        byte[] original = new byte[0];
        String salt = "ab";
        String expected = "ab";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_crypt_2_bfvf2() throws Exception {
        byte[] original = new byte[0];
        String salt = "ac";
        String expected = "ac";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_crypt_3_otIy3_fid1() throws Exception {
        byte[] original = new byte[0];
        String salt = "ad";
        String expected = "ad";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_crypt_4_wSEK4_fid1() throws Exception {
        byte[] original = new byte[0];
        String salt = "ae";
        String expected = "ae";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_crypt_5_YmnX5_fid1() throws Exception {
        byte[] original = new byte[0];
        String salt = "af";
        String expected = "af";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_crypt_6_fJCQ6_fid1() throws Exception {
        byte[] original = new byte[0];
        String salt = "ag";
        String expected = "ag";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_crypt_7_EIIk7_fid1() throws Exception {
        byte[] original = new byte[0];
        String salt = "ah";
        String expected = "ah";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_crypt_8_GKmi8_fid1() throws Exception {
        byte[] original = new byte[0];
        String salt = "ai";
        String expected = "ai";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_crypt_9_YAtG9_fid1() throws Exception {
        byte[] original = new byte[0];
        String salt = "aj";
        String expected = "aj";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLength1AndSaltLength2_NpXS2_fid1() {
        byte[] original = {0x00};
        String salt = "ab";
        String expected = "ab";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLength1AndSaltLength3_UZSf3_fid1() {
        byte[] original = {0x00};
        String salt = "abc";
        String expected = "abc";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLength2AndSaltLength1_PDlD4_fid1() {
        byte[] original = {0x00, 0x01};
        String salt = "a";
        String expected = "a";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLength2AndSaltLength2_aWzu5_fid1() {
        byte[] original = {0x00, 0x01};
        String salt = "ab";
        String expected = "ab";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLength2AndSaltLength3_NAhe6_fid1() {
        byte[] original = {0x00, 0x01};
        String salt = "abc";
        String expected = "abc";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLength3AndSaltLength1_hkvO7_fid1() {
        byte[] original = {0x00, 0x01, 0x02};
        String salt = "a";
        String expected = "a";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLength3AndSaltLength2_NpUz8_fid1() {
        byte[] original = {0x00, 0x01, 0x02};
        String salt = "ab";
        String expected = "ab";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLength3AndSaltLength3_fHEu9_fid1() {
        byte[] original = {0x00, 0x01, 0x02};
        String salt = "abc";
        String expected = "abc";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_QjYz2_fid1() {
        final String validSalt = "ab";
        final String expected = "ab";
        final String actual = UnixCrypt.crypt(new byte[8], validSalt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_HDLl3_fid1() {
        final String expected = "aa";
        final String actual = UnixCrypt.crypt(new byte[0], null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithShortOriginal_UgCj4_fid1() {
        final byte[] original = {0x01, 0x02};
        final String expected = "aa";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_MoVj5_fid1() {
        final byte[] original = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09};
        final String expected = "aa";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthOne_ckVM6_fid1() {
        final byte[] original = {0x01};
        final String expected = "aa";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthThree_fbCT8_fid1() {
        final byte[] original = {0x01, 0x02, 0x03};
        final String expected = "aa";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthFour_eeAu9_fid1() {
        final byte[] original = {0x01, 0x02, 0x03, 0x04};
        final String expected = "aa";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthFive_DFkC10_fid1() {
        final byte[] original = {0x01, 0x02, 0x03, 0x04, 0x05};
        final String expected = "aa";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthSix_fyxR11_fid1() {
        final byte[] original = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06};
        final String expected = "aa";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthSeven_XTsi12_fid1() {
        final byte[] original = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
        final String expected = "aa";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidSalt_fkEQ1_fid1() {
        byte[] original = new byte[0];
        String salt = "12";
        String expected = "AA";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual.substring(0, 2));
    }
}