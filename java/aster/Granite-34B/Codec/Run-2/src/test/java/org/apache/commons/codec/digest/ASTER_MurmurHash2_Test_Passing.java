/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash2_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_EBeA0() {
        String text = "This is a test string";
        int from = 0;
        int length = 10;
        long expected = MurmurHash2.hash64(text.substring(from, from + length));
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_kSae0() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 123;
        int expected = -990084970; // Replace with the expected hash value
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_Sutj1() {
        byte[] data = new byte[0];
        int length = 0;
        int seed = 123;
        int expected = 500891937; // Replace with the expected hash value for empty data
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Gdik0() {
        String text = "Hello, World!";
        int from = 0;
        int length = 13;
        int expected = -1363720210; // Replace with the expected hash value
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }
}