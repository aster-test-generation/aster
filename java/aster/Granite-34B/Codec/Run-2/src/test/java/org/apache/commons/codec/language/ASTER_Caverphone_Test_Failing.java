/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Caverphone_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Hkmv0() {
        Caverphone caverphone = new Caverphone();
        assertEquals("000000", caverphone.encode("Caverphone"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
        assertEquals("000000", caverphone.encode("caverphone"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Hkmv0_1() {
        Caverphone caverphone = new Caverphone();
        assertEquals("000000", caverphone.encode("Caverphone"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Hkmv0_2() {
        Caverphone caverphone = new Caverphone();
        assertEquals("000000", caverphone.encode("caverphone"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Hkmv0_3() {
        Caverphone caverphone = new Caverphone();
        assertEquals("000000", caverphone.encode("CAVERPHONE"));
    }
}