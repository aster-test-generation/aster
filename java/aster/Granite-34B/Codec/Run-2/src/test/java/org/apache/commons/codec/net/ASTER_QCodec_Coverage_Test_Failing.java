/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_tpZn1() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        Object result = qCodec.decode("test");
        assert result instanceof String;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNonStringObject_nJvW2() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        Object result = qCodec.decode(new Object());
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidString_yXYq3() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        Object result = qCodec.decode("invalid");
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyObject_bQUW4() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        Object result = qCodec.decode("");
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_hDhU1() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        Object actual = qCodec.encode("=?UTF-8?Q?Hello World?=");
        Assertions.assertEquals("=?UTF-8?Q?Hello World?=", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringObject_lKxH2() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        Object actual = qCodec.encode(123);
        Assertions.assertEquals("Objects of type java.lang.Integer cannot be encoded using Q codec", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidCharsetName_lTXJ3() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec("invalid-charset");
        Object actual = qCodec.encode("Hello World");
        Assertions.assertEquals("Hello World", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidCharsetName_bxbL4() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        Object actual = qCodec.encode("=?UTF-8?Q?Hello World?=");
        Assertions.assertEquals("=?UTF-8?Q?Hello World?=", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_hDhU1_fid1() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        Object actual = qCodec.encode("Hello World");
        Assertions.assertEquals("Hello World", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidCharsetName_bxbL4_fid1() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        Object actual = qCodec.encode("Hello World");
        Assertions.assertEquals("Hello World", actual);
    }
}