/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DigestUtils_Test_Passing {
    {
    }

    {
    }

    {
    }

    {
    }

    {
    }

    {
    }

    {
    }

    {
    }

    {
    }

    {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMethod1_hBNN0() {
        MessageDigest messageDigest = DigestUtils.getSha1Digest();
        assertEquals(messageDigest.getAlgorithm(), MessageDigestAlgorithms.SHA_1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMethod2_mTuA1() {
        MessageDigest messageDigest = DigestUtils.getSha1Digest();
        assertEquals(messageDigest.getDigestLength(), 20);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_coverage_lqYz1() {
        DigestUtils digestUtils = new DigestUtils("SHA-512/224");
        byte[] input = new byte[]{1, 2, 3}; // Replace with actual input value
        byte[] actual = digestUtils.sha512_224(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testShaHexCoverage_uYhR1() {
        String data = "";
        String actual = DigestUtils.shaHex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_mTfO0() {
        byte[] data = new byte[0];
        String expected = DigestUtils.sha3_512Hex(data);
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex1_HeQK1() {
        byte[] data = new byte[1];
        String expected = DigestUtils.sha3_512Hex(data);
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex2_DAkA2() {
        byte[] data = new byte[2];
        String expected = DigestUtils.sha3_512Hex(data);
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex3_OSNO3() {
        byte[] data = new byte[3];
        String expected = DigestUtils.sha3_512Hex(data);
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex4_ShOq4() {
        byte[] data = new byte[4];
        String expected = DigestUtils.sha3_512Hex(data);
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex5_CkUK5() {
        byte[] data = new byte[5];
        String expected = DigestUtils.sha3_512Hex(data);
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex6_KJhX6() {
        byte[] data = new byte[6];
        String expected = DigestUtils.sha3_512Hex(data);
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex7_UgOF7() {
        byte[] data = new byte[7];
        String expected = DigestUtils.sha3_512Hex(data);
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex8_IVRp8() {
        byte[] data = new byte[8];
        String expected = DigestUtils.sha3_512Hex(data);
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex9_sXEm9() {
        byte[] data = new byte[9];
        String expected = DigestUtils.sha3_512Hex(data);
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex10_XhDe10() {
        byte[] data = new byte[10];
        String expected = DigestUtils.sha3_512Hex(data);
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex11_nUtS11() {
        byte[] data = new byte[11];
        String expected = DigestUtils.sha3_512Hex(data);
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex12_rTZo12() {
        byte[] data = new byte[12];
        String expected = DigestUtils.sha3_512Hex(data);
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex13_gzMI13() {
        byte[] data = new byte[13];
        String expected = DigestUtils.sha3_512Hex(data);
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_FTnj0() {
        MessageDigest messageDigest = DigestUtils.getSha3_224Digest();
        assertEquals(messageDigest.getAlgorithm(), MessageDigestAlgorithms.SHA3_224);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_niBq1() {
        MessageDigest messageDigest = DigestUtils.getSha3_224Digest();
        assertEquals(messageDigest.getDigestLength(), 28);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testTimeout_UKHD1() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithEmptyData_vEUO1() {
        String data = "";
        String expected = "d41d8cd98f00b204e9800998ecf8427e";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_rWfT0() {
        MessageDigest digest = DigestUtils.getSha256Digest();
        assertNotNull(digest);
        assertEquals(MessageDigestAlgorithms.SHA_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256DigestWithBranchCoverage_eFtm1() {
        MessageDigest digest = DigestUtils.getDigest(MessageDigestAlgorithms.SHA_256);
        assertNotNull(digest);
        assertEquals(MessageDigestAlgorithms.SHA_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSha3_256Digest_coverage_dLec1() {
        MessageDigest digest = DigestUtils.getDigest("SHA-384");
        assertEquals("SHA-384", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_sGwt0() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = digestUtils.digest(data);
        byte[] actual = digestUtils.digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSha512_256Digest_xUiV0() {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        assertEquals(MessageDigestAlgorithms.SHA_512_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_empty_gXTd1() {
        String data = "";
        String expected = "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_LELH0() {
        byte[] data = new byte[0]; // initialize data
        byte[] result = DigestUtils.sha3_256(data);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithEmptyArray_tcdW3() throws IOException {
        String expected = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        String actual = DigestUtils.sha1Hex(new byte[0]);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSha1Hex_PUoM9() {
        byte[] data = new byte[524288];
        String actual = DigestUtils.sha1Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMethod1_lLnu0() {
        MessageDigest messageDigest = DigestUtils.getMd5Digest();
        assertNotNull(messageDigest);
        assertEquals("MD5", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSha384Digest_vBic0() {
        MessageDigest digest = DigestUtils.getSha384Digest();
        assertEquals("SHA-384", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSha3_512Digest_vIcZ0() {
        MessageDigest digest = DigestUtils.getSha3_512Digest();
        assertEquals(MessageDigestAlgorithms.SHA3_512, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_384Digest_UIKu0() {
        MessageDigest messageDigest = DigestUtils.getSha3_384Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_ClbQ0_1() {
        assertEquals("da39a3ee5e6b4b0d3255bfef95601890afd80709", DigestUtils.sha1Hex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_ClbQ0_2() {
        assertEquals("86f7e437faa5a7fce15d1ddcb9eaeaea377667b8", DigestUtils.sha1Hex("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigestWithString_pXeT1() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_XWsx0_1() {
        assertEquals("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", DigestUtils.sha256Hex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_RjIG0_1() {
        assertEquals("da39a3ee5e6b4b0d3255bfef95601890afd80709", DigestUtils.shaHex("".getBytes()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_rWfT0_1() {
        MessageDigest digest = DigestUtils.getSha256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_rWfT0_2() {
        MessageDigest digest = DigestUtils.getSha256Digest();
        assertEquals(MessageDigestAlgorithms.SHA_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256DigestWithBranchCoverage_eFtm1_1() {
        MessageDigest digest = DigestUtils.getDigest(MessageDigestAlgorithms.SHA_256);
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256DigestWithBranchCoverage_eFtm1_2() {
        MessageDigest digest = DigestUtils.getDigest(MessageDigestAlgorithms.SHA_256);
        assertEquals(MessageDigestAlgorithms.SHA_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMethod1_lLnu0_1() {
        MessageDigest messageDigest = DigestUtils.getMd5Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMethod1_lLnu0_2() {
        MessageDigest messageDigest = DigestUtils.getMd5Digest();
        assertEquals("MD5", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithConstructor_LlJl1_dhpH0() {
        MessageDigest messageDigest = DigestUtils.getSha256Digest();
        byte[] data = new byte[10];
        byte[] expected = messageDigest.digest(data);
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        byte[] actual = digestUtils.digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_PcNQ0_CACG0() throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        String valueToDigest = "example";
        MessageDigest result = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertEquals(messageDigest, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_PfeL0_CTzs0() {
        MessageDigest messageDigest = DigestUtils.getSha256Digest();
        byte[] valueToDigest = new byte[10];
        MessageDigest result = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertEquals(messageDigest, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigestWithMessageDigest_MmNr2_uHOp0() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("MD5");
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        MessageDigest returnedMessageDigest = digestUtils.getMessageDigest();
        assertEquals(messageDigest, returnedMessageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_EZmy0_iSmz0() {
        byte[] data = new byte[]{0x61, 0x62, 0x63};
        String expected = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithStringAndConstructor_WCex3_IULG0() throws NoSuchAlgorithmException {
        String name = "MD5";
        byte[] data = new byte[10];
        byte[] expected = MessageDigest.getInstance(name).digest(data);
        DigestUtils digestUtils = new DigestUtils(name);
        byte[] actual = digestUtils.digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDigest_with_null_algorithm_and_defaultMessageDigest_RYRO2_UYEH0() {
        MessageDigest defaultMessageDigest = null;
        try {
            defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            fail("Error while getting MessageDigest instance");
        }
        MessageDigest actual = DigestUtils.getDigest(null, defaultMessageDigest);
        assertEquals(defaultMessageDigest, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_TuDS0_fid2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = "Hello, World!";
        String expected = "dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f";
        assertEquals(expected, digestUtils.digestAsHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_EmptyData_xjFg2_fid2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = "";
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        assertEquals(expected, digestUtils.digestAsHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_xPJz0_fid2() {
        byte[] data = new byte[]{0x01, 0x02, 0x03};
        String expected = "ab99dd40cf4e0ccb06f7260bd53593affab3ad5a887a261c09266f1f";
        assertEquals(expected, DigestUtils.sha512_224Hex(data));
    }
}