/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Soundex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength_PuCX0() {
        Soundex soundex = new Soundex();
        assertEquals(0, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithMapping_VomB1() {
        Soundex soundex = new Soundex("mapping");
        assertEquals(0, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithMappingAndSpecialCaseHW_jTFo2() {
        Soundex soundex = new Soundex("mapping", true);
        assertEquals(0, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithMappingArray_ukLM3() {
        Soundex soundex = new Soundex(new char[]{'a', 'b', 'c'});
        assertEquals(0, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithMapping_IBDa1() throws EncoderException {
        Soundex soundex = new Soundex("mapping");
        String input = "example";
        Object result = soundex.encode(input);
        assertEquals("E251", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCaseHW_ONdd2() throws EncoderException {
        Soundex soundex = new Soundex("mapping", true);
        String input = "example";
        Object result = soundex.encode(input);
        assertEquals("E251", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_HnJg0_3() {
        Soundex soundex = new Soundex();
        assertEquals("A261", soundex.encode("Jones"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_HnJg0_4() {
        Soundex soundex = new Soundex();
        assertEquals("M362", soundex.encode("Miller"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_HnJg0_5() {
        Soundex soundex = new Soundex();
        assertEquals("R163", soundex.encode("Robinson"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_bzbE0() throws EncoderException {
        Soundex soundex = new Soundex();
        String s1 = "hello";
        String s2 = "hallo";
        int expected = 1;
        int actual = soundex.difference(s1, s2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceWithMapping_gpwn1() throws EncoderException {
        Soundex soundex = new Soundex("mapping");
        String s1 = "hello";
        String s2 = "hallo";
        int expected = 1;
        int actual = soundex.difference(s1, s2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceWithSpecialCaseHW_sXWN2() throws EncoderException {
        Soundex soundex = new Soundex("mapping", true);
        String s1 = "hello";
        String s2 = "hallo";
        int expected = 1;
        int actual = soundex.difference(s1, s2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceWithMappingArray_ANGO3() throws EncoderException {
        Soundex soundex = new Soundex(new char[]{'a', 'b', 'c'});
        String s1 = "hello";
        String s2 = "hallo";
        int expected = 1;
        int actual = soundex.difference(s1, s2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithTwoSimilarLetters_ReturnsSimilarDigits_AErY3() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("AA");
        assertEquals("A100", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithThreeSimilarLetters_ReturnsSimilarDigits_yefR4() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("AAA");
        assertEquals("A200", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithFourSimilarLetters_ReturnsSimilarDigits_BZUt5() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("AAAA");
        assertEquals("A300", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithFiveSimilarLetters_ReturnsSimilarDigits_SkjO6() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("AAAAA");
        assertEquals("A400", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithThreeDifferentLetters_ReturnsDifferentDigits_QEnz7() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABC");
        assertEquals("A1B2", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithThreeSimilarAndOneDifferentLetter_ReturnsSimilarAndDifferentDigits_ZnTS8() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("AAB");
        assertEquals("A1B0", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithThreeSimilarAndOneDifferentLetterAndOneSilentMarker_ReturnsSimilarAndDifferentDigits_xuMk9() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("AA0");
        assertEquals("A100", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithMappingArray_bsFR3_GhoA0() throws EncoderException {
        Soundex soundex = new Soundex(new char[]{'a', 'b', 'c'});
        String input = "example";
        Object result = soundex.encode(input);
        assertEquals("E251", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithThreeSimilarAndOneDifferentLetterAndOneSpecialCaseHW_ReturnsSimilarAndDifferentDigits_VQVr10_thVN0() {
        Soundex soundex = new Soundex("012301200224", true);
        String result = soundex.soundex("AA0HW");
        assertEquals("A100", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithThreeSimilarAndOneDifferentLetterAndOneSpecialCaseHWAndOneSilentMarker_ReturnsSimilarAndDifferentDigits_ktMY11_CuHx0() {
        Soundex soundex = new Soundex("012301200224", true);
        String result = soundex.soundex("AA0HW0");
        assertEquals("A100", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_HnJg0() {
        Soundex soundex = new Soundex();
        assertEquals("S530", soundex.encode("Smith"));
        assertEquals("W452", soundex.encode("Williams"));
        assertEquals("A261", soundex.encode("Jones"));
        assertEquals("M362", soundex.encode("Miller"));
        assertEquals("R163", soundex.encode("Robinson"));
    }
}