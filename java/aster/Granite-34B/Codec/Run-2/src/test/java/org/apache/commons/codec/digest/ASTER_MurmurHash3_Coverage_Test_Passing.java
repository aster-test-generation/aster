/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.binary.StringUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash3_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_dFtC0() {
        final String data = "some data";
        final byte[] bytes = StringUtils.getBytesUtf8(data);
        int result = MurmurHash3.hash32(bytes, 0, bytes.length, MurmurHash3.DEFAULT_SEED);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_EPNb1() {
        final String data = "some other data";
        final byte[] bytes = StringUtils.getBytesUtf8(data);
        int result = MurmurHash3.hash32(bytes, 0, bytes.length, MurmurHash3.DEFAULT_SEED);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_FGNi0() {
        byte[] data = new byte[15];
        int offset = 0;
        int length = 15;
        int seed = 10;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithOffset_zzhU1() {
        byte[] data = new byte[15];
        int offset = 5;
        int length = 10;
        int seed = 10;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLength_opJo2() {
        byte[] data = new byte[15];
        int offset = 0;
        int length = 5;
        int seed = 10;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithSeed_ameD3() {
        byte[] data = new byte[15];
        int offset = 0;
        int length = 15;
        int seed = 20;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithAllParameters_Qtki4() {
        byte[] data = new byte[15];
        int offset = 5;
        int length = 10;
        int seed = 20;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_1_bRwg0() {
        byte[] data = new byte[15];
        int offset = 0;
        int length = 15;
        int seed = 0;
        long[] expected = {0, 0};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_2_ikQF1() {
        byte[] data = new byte[14];
        int offset = 0;
        int length = 14;
        int seed = 0;
        long[] expected = {0, 0};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_3_QVlZ2() {
        byte[] data = new byte[13];
        int offset = 0;
        int length = 13;
        int seed = 0;
        long[] expected = {0, 0};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_4_tqJD3() {
        byte[] data = new byte[12];
        int offset = 0;
        int length = 12;
        int seed = 0;
        long[] expected = {0, 0};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_5_gbjr4() {
        byte[] data = new byte[11];
        int offset = 0;
        int length = 11;
        int seed = 0;
        long[] expected = {0, 0};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_6_OLXE5() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 0;
        long[] expected = {0, 0};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_cSVV0_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int expected = -1127693702;
        int actual = MurmurHash3.hash32(data, length);
        assertEquals(expected, actual);
    }
}