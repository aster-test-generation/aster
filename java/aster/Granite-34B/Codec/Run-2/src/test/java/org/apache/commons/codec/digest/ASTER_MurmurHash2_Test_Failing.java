/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash2_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_uqkY0() {
        byte[] data = new byte[0];
        int length = 0;
        long expected = 0xe17a1465;
        long actual = MurmurHash2.hash64(data, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_DAEf0() {
        byte[] data = new byte[0];
        int length = 0;
        int expected = 0x9747b28c;
        int actual = MurmurHash2.hash32(data, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLength_zzjH1() {
        byte[] data = new byte[10];
        int length = 10;
        int expected = 0x9747b28c;
        int actual = MurmurHash2.hash32(data, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLengthAndSeed_UCYF2() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 12345;
        int expected = 0x12345;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_withEmptyText_TRtt1() {
        String text = "";
        int from = 275646681;
        int length = 275646681;
        int expected = 275646681; // Replace with the expected hash value
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_withNullText_BBmc2() {
        String text = null;
        int from = 0;
        int length = 0;
        int expected = 0; // Replace with the expected hash value
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_withInvalidFromIndex_kgYO3() {
        String text = "Hello, World!";
        int from = -1;
        int length = 13;
        int expected = 0; // Replace with the expected hash value
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_withInvalidLength_IDGM4() {
        String text = "Hello, World!";
        int from = 0;
        int length = -1;
        int expected = 0; // Replace with the expected hash value
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_withInvalidFromAndLength_JVUy5() {
        String text = "Hello, World!";
        int from = -1;
        int length = -1;
        int expected = 0; // Replace with the expected hash value
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_kSae0_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 123;
        int expected = 12345; // Replace with the expected hash value
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_Sutj1_fid1() {
        byte[] data = new byte[0];
        int length = 0;
        int seed = 123;
        int expected = 12345; // Replace with the expected hash value for empty data
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_rmtc0() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 123;
        long expected = 1234567890; // replace with the expected hash value
        long actual = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithEmptyData_wvoG1() {
        byte[] data = new byte[0];
        int length = 0;
        int seed = 123;
        long expected = 1234567890; // replace with the expected hash value for empty data
        long actual = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Gdik0_fid1() {
        String text = "Hello, World!";
        int from = 0;
        int length = 13;
        int expected = 123456789; // Replace with the expected hash value
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_withEmptyText_TRtt1_fid1() {
        String text = "";
        int from = 0;
        int length = 0;
        int expected = 0; // Replace with the expected hash value
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }
}