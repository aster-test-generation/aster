/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_SoundexUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncoded_null_null_GpDb0() {
        String es1 = null;
        String es2 = null;
        int actual = SoundexUtils.differenceEncoded(es1, es2);
        assertEquals(0, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncoded_empty_empty_zXzr1() {
        String es1 = "";
        String es2 = "";
        int actual = SoundexUtils.differenceEncoded(es1, es2);
        assertEquals(0, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncoded_equal_strings_RhEu2() {
        String es1 = "test";
        String es2 = "test";
        int actual = SoundexUtils.differenceEncoded(es1, es2);
        assertEquals(4, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isEmpty_return_true_when_cs_is_null_AtUg0() {
        final CharSequence cs = null;
        final boolean actual = SoundexUtils.isEmpty(cs);
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isEmpty_return_true_when_cs_length_is_zero_OqmG1() {
        final CharSequence cs = "";
        final boolean actual = SoundexUtils.isEmpty(cs);
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isEmpty_return_false_when_cs_length_is_not_zero_AlJH2() {
        final CharSequence cs = "a";
        final boolean actual = SoundexUtils.isEmpty(cs);
        assertFalse(actual);
    }
}