/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RefinedSoundex_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WhenInputIsNullOrEmpty_ThenReturnNullOrEmpty_qkKa0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String input1 = null;
        String input2 = "";
        String output1 = refinedSoundex.soundex(input1);
        String output2 = refinedSoundex.soundex(input2);
        assert (output1 == null);
        assert (output2.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringObject_OFom0() throws EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        Object obj = new Object();
        try {
            refinedSoundex.encode(obj);
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringObject_WXLw1() throws EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        Object obj = "test";
        Object result = refinedSoundex.encode(obj);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMappingCodeWithInvalidInput_iMXn0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        char result = refinedSoundex.getMappingCode('1');
        assertEquals(0, result);
    }
}