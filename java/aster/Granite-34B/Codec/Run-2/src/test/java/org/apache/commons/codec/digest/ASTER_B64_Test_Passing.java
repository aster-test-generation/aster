/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.security.SecureRandom;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_B64_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testB64from24bit_opuQ0() {
        byte b2 = 0;
        byte b1 = 0;
        byte b0 = 0;
        int outLen = 0;
        StringBuilder buffer = new StringBuilder();
        B64.b64from24bit(b2, b1, b0, outLen, buffer);
        assertEquals("", buffer.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSalt_gZYH0() {
        String salt = B64.getRandomSalt(16);
        assertEquals(16, salt.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSaltWithSecureRandom_YEYB1() {
        SecureRandom random = new SecureRandom();
        String salt = B64.getRandomSalt(16, random);
        assertEquals(16, salt.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSaltWithZeroNum_fUqI3() {
        String salt = B64.getRandomSalt(0);
        assertEquals("", salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSaltWithNumGreaterThan33_oYXe4() {
        String salt = B64.getRandomSalt(33);
        assertEquals(33, salt.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSalt_waFF0() {
        final int num = 10;
        Random random = new Random();
        String salt = B64.getRandomSalt(num, random);
        assertEquals(10, salt.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSaltWithZeroLength_wOLS1() {
        final int num = 0;
        Random random = new Random();
        String salt = B64.getRandomSalt(num, random);
        assertEquals(0, salt.length());
    }
}