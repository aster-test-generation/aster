/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base64_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytesWithBitLengthNotDivisibleByEightAndBitLengthDividedByEightPlusOneEqualsBitlenDividedByEight_NqAY0() {
        BigInteger bigInt = new BigInteger("1234567890");
        Base64 base64 = new Base64(10, new byte[]{10}, true, CodecPolicy.STRICT);
        byte[] result = base64.toIntegerBytes(bigInt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytesWithBitLengthDivisibleByEight_KQsA1() {
        BigInteger bigInt = new BigInteger("1234567890");
        Base64 base64 = new Base64(10, new byte[]{10}, true, CodecPolicy.LENIENT);
        byte[] result = base64.toIntegerBytes(bigInt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_bPYy0_1() {
        Base64 base64 = new Base64();
        assertTrue(base64.isInAlphabet((byte) 65));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_bPYy0_2() {
        Base64 base64 = new Base64();
        assertTrue(base64.isInAlphabet((byte) 90));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_bPYy0_3() {
        Base64 base64 = new Base64();
        assertTrue(base64.isInAlphabet((byte) 97));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_bPYy0_4() {
        Base64 base64 = new Base64();
        assertTrue(base64.isInAlphabet((byte) 122));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_bPYy0_5() {
        Base64 base64 = new Base64();
        assertTrue(base64.isInAlphabet((byte) 48));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_bPYy0_6() {
        Base64 base64 = new Base64();
        assertTrue(base64.isInAlphabet((byte) 57));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_bPYy0_7() {
        Base64 base64 = new Base64();
        assertTrue(base64.isInAlphabet((byte) 43));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_bPYy0_8() {
        Base64 base64 = new Base64();
        assertTrue(base64.isInAlphabet((byte) 47));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_bPYy0_9() {
        Base64 base64 = new Base64();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithInputArrayTooBig_rLuX0() {
        byte[] binaryData = new byte[100];
        int maxResultSize = 50;
        Base64 b64 = new Base64(true);
        long len = b64.getEncodedLength(binaryData);
        try {
            b64.encode(binaryData);
        } catch (IllegalArgumentException e) {
            assertEquals("Input array too big, the output array would be bigger (" + len + ") than the specified maximum size of " + maxResultSize, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isArrayByteBase64_test2_ETik1() {
        byte[] arrayOctet = new byte[10];
        boolean expected = false;
        boolean actual = Base64.isArrayByteBase64(arrayOctet);
        assertEquals(expected, actual);
    }
}