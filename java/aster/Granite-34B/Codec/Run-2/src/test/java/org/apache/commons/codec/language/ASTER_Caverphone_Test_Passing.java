/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Caverphone_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EabG0() throws EncoderException {
        Caverphone caverphone = new Caverphone();
        String input = "input";
        Object expected = caverphone.caverphone(input);
        Object actual = caverphone.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringInput_jExj2() {
        Caverphone caverphone = new Caverphone();
        Object input = new Object();
        try {
            caverphone.encode(input);
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to Caverphone encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_fYKG0() {
        Caverphone caverphone = new Caverphone();
        String str1 = "caverphone";
        String str2 = "caverphone";
        boolean expected = true;
        boolean actual = caverphone.isCaverphoneEqual(str1, str2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Hkmv0_1_fid2() {
        Caverphone caverphone = new Caverphone();
        assertEquals("KFFN111111", caverphone.encode("Caverphone"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Hkmv0_2_fid2() {
        Caverphone caverphone = new Caverphone();
        assertEquals("KFFN111111", caverphone.encode("caverphone"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Hkmv0_3_fid2() {
        Caverphone caverphone = new Caverphone();
        assertEquals("KFFN111111", caverphone.encode("CAVERPHONE"));
    }
}