/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Nysiis_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDefaultConstructor_MwqS0() {
        Nysiis nysiis = new Nysiis();
        assertTrue(nysiis.isStrict());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictTrueConstructor_EGMy1() {
        Nysiis nysiis = new Nysiis(true);
        assertTrue(nysiis.isStrict());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictFalseConstructor_gCuc2() {
        Nysiis nysiis = new Nysiis(false);
        assertFalse(nysiis.isStrict());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonString_XNGe1() {
        Nysiis nysiis = new Nysiis();
        Object input = new Object();
        try {
            nysiis.encode(input);
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to Nysiis encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_Null_sRix0() {
        Nysiis nysiis = new Nysiis();
        assertEquals(null, nysiis.nysiis(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_Empty_QcKr1() {
        Nysiis nysiis = new Nysiis();
        assertEquals("", nysiis.nysiis(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_OneLetter_PENw2() {
        Nysiis nysiis = new Nysiis();
        assertEquals("A", nysiis.nysiis("A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_TwoLetters_mKAV3() {
        Nysiis nysiis = new Nysiis();
        assertEquals("AB", nysiis.nysiis("AB"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_ThreeLetters_DQFa4() {
        Nysiis nysiis = new Nysiis();
        assertEquals("ABC", nysiis.nysiis("ABC"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_FourLetters_vfyX5() {
        Nysiis nysiis = new Nysiis();
        assertEquals("ABCD", nysiis.nysiis("ABCD"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_DXgk0_fid1() {
        Nysiis nysiis = new Nysiis();
        assertEquals("INPATS", nysiis.encode("input string"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrictParameter_XCML1_fid1() {
        Nysiis nysiis = new Nysiis(true);
        assertEquals("INPATS", nysiis.encode("input string"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_hDkN0_fid1() throws EncoderException {
        Nysiis nysiis = new Nysiis();
        String input = "inputString";
        String expected = "INPATS";
        String actual = (String) nysiis.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrictTrue_JbmP2_fid1() throws EncoderException {
        Nysiis nysiis = new Nysiis(true);
        String input = "inputString";
        String expected = "INPATS";
        String actual = (String) nysiis.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrictFalse_CSRs3_fid1() throws EncoderException {
        Nysiis nysiis = new Nysiis(false);
        String input = "inputString";
        String expected = "INPATSTRANG";
        String actual = (String) nysiis.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_SixLetters_afqL7_fid1() {
        Nysiis nysiis = new Nysiis();
        assertEquals("ABCDAF", nysiis.nysiis("ABCDAF"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_1_OVpk0_fid1() {
        Nysiis nysiis = new Nysiis();
        String str = "New York";
        String expected = "NAYARC";
        String actual = nysiis.nysiis(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_2_Ncgr1_fid1() {
        Nysiis nysiis = new Nysiis();
        String str = "New Jersey";
        String expected = "NAJARS";
        String actual = nysiis.nysiis(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_3_BUyn2_fid1() {
        Nysiis nysiis = new Nysiis();
        String str = "Newark";
        String expected = "NARC";
        String actual = nysiis.nysiis(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_4_rpyC3_fid1() {
        Nysiis nysiis = new Nysiis();
        String str = "New Haven";
        String expected = "NAHAVA";
        String actual = nysiis.nysiis(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_5_hxLc4_fid1() {
        Nysiis nysiis = new Nysiis();
        String str = "New Brunswick";
        String expected = "NABRAN";
        String actual = nysiis.nysiis(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_6_YkKt5_fid1() {
        Nysiis nysiis = new Nysiis();
        String str = "New Castle";
        String expected = "NACAST";
        String actual = nysiis.nysiis(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_7_TMHQ6_fid1() {
        Nysiis nysiis = new Nysiis();
        String str = "Newport News";
        String expected = "NAPART";
        String actual = nysiis.nysiis(str);
        assertEquals(expected, actual);
    }
}