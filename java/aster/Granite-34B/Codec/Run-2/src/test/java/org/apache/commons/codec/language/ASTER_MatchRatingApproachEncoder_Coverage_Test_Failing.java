/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MatchRatingApproachEncoder_Coverage_Test_Failing {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants_oOMS0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Ashok";
        String replacedName = encoder.removeDoubleConsonants(name);
        assert (replacedName.equals("Ashok"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonantsWithDoubleConsonant_daev1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Ashokk";
        String replacedName = encoder.removeDoubleConsonants(name);
        assert (replacedName.equals("Ashok"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonantsWithNoDoubleConsonant_dnTm2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "AshokA";
        String replacedName = encoder.removeDoubleConsonants(name);
        assert (replacedName.equals("AshokA"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_null_krgW0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String actual = encoder.removeAccents(null);
        String expected = null;
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_withAccents_RytO2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String actual = encoder.removeAccents("");
        String expected = "aeiou";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_invalidName_BNDZ4() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encoded = encoder.encode("Invalid Name");
        assertEquals("", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_leftToRightThenRightToLeftProcessing_name1LtRStart_equals_name2RtLStart_sJiB1_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.leftToRightThenRightToLeftProcessing("test1", "test1");
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_leftToRightThenRightToLeftProcessing_strA_length_equals_strB_length_puRf4_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.leftToRightThenRightToLeftProcessing("test", "test");
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_isEncodeEquals_name1_not_equals_name2_LHUn9_fid1() {
        String name1 = "test";
        String name2 = "test2";
        boolean actual = encoder.isEncodeEquals(name1, name2);
        assertFalse(actual);
    }
}