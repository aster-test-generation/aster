/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Crypt_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullKey_eaoP1() {
        String key = null;
        String salt = "salt";
        String expected = null;
        String actual = Crypt.crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptySalt_zbTl4() {
        String key = "key";
        String salt = "";
        String expected = "";
        String actual = Crypt.crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSalt_NTvL1_fid1() {
        String key = "password";
        String salt = "salt";
        String expected = "encryptedPasswordWithSalt";
        String actual = Crypt.crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSalt_bNZG1_fid1() {
        byte[] keyBytes = new byte[]{0x00, 0x01, 0x02, 0x03};
        String salt = "salt";
        String expected = "crypt(byte[], String)";
        String actual = Crypt.crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_eMwb0() {
        String key = "key";
        String salt = "salt";
        String expected = "expected";
        String actual = Crypt.crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_mHdc2_fid1() {
        String key = "key";
        String salt = null;
        String expected = null;
        String actual = Crypt.crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyKey_NtdW3() {
        String key = "";
        String salt = "salt";
        String expected = "";
        String actual = Crypt.crypt(key, salt);
        assertEquals(expected, actual);
    }
}