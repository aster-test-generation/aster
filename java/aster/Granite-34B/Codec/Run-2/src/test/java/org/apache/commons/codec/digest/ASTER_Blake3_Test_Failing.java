/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Blake3_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHash_jcHZ0() {
        byte[] key = new byte[32];
        Blake3 blake3 = Blake3.initKeyedHash(key);
        assertEquals(blake3.toString(), "org.apache.commons.codec.digest.Blake3@415e8786");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithValidKey_laCr2() {
        byte[] key = new byte[32];
        Blake3 blake3 = Blake3.initKeyedHash(key);
        assertEquals("Blake3{engineState=EngineState{flags=1, key=byte[32], counter=0, block=byte[64], blockLen=0, compressor=null}}", blake3.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithNullContext_psnj1() {
        byte[] kdfContext = null;
        Blake3 blake3 = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(blake3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash_NhCv0() {
        byte[] data = new byte[]{0x00, 0x01, 0x02, 0x03};
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04}; // Replace with the expected hash value
        byte[] actual = Blake3.hash(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashWithEmptyData_UrJN1() {
        byte[] data = new byte[0];
        byte[] expected = new byte[]{0x00, 0x00, 0x00, 0x00}; // Replace with the expected hash value for empty data
        byte[] actual = Blake3.hash(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashWithNullData_hdPk2() {
        byte[] data = null;
        byte[] expected = new byte[]{0x00, 0x00, 0x00, 0x00}; // Replace with the expected hash value for null data
        byte[] actual = Blake3.hash(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHash_QvYs0() {
        byte[] key = new byte[32];
        Blake3 blake3 = Blake3.initKeyedHash(key);
        assertEquals(blake3.toString(), "Blake3{state=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], flags=2, pos=0, count=0, blocklen=-29, keylen=0, compressor=null}");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeyedHash_uqEm0() {
        byte[] key = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
        byte[] data = new byte[]{32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63};
        byte[] expected = new byte[]{64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95};
        byte[] actual = Blake3.keyedHash(key, data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithNullArgument_hxGu1() {
        byte[] kdfContext = null;
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithInvalidArgument_HXMU4() {
        byte[] kdfContext = new byte[11]; // replace with actual value
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_wtPo0_anqR0() {
        Blake3 blake3 = Blake3.initKeyDerivationFunction(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9});
        byte[] input = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        int offset = 0;
        int length = 5;
        blake3.update(input, offset, length);
        byte[] expected = new byte[]{0, 1, 2, 3, 4};
        byte[] actual = blake3.hash(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHash_jcHZ0_fid1() {
        byte[] key = new byte[32];
        Blake3 blake3 = Blake3.initKeyedHash(key);
        assertEquals(blake3.toString(), "Blake3{hashLength=64, key=byte[32], flags=16}");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHash_QvYs0_fid1() {
        byte[] key = new byte[32];
        Blake3 blake3 = Blake3.initKeyedHash(key);
        assertEquals(blake3.toString(), "Blake3{state=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], flags=2, pos=0, count=0, blocklen=64, keylen=0, compressor=null}");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithNullKey_FlcT0() {
        byte[] key = null;
        Throwable exception = assertThrows(NullPointerException.class, () -> Blake3.initKeyedHash(key));
        assertEquals("key must not be null", exception.getMessage());
    }
}