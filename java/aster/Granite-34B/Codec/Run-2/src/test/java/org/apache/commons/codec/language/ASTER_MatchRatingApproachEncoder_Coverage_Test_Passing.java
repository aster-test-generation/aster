/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MatchRatingApproachEncoder_Coverage_Test_Passing {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringObject_uhEK0() throws org.apache.commons.codec.EncoderException {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        Object nonStringObject = new Object();
        try {
            encoder.encode(nonStringObject);
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringObject_kXft1() throws org.apache.commons.codec.EncoderException {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String stringObject = "test";
        Object encodedObject = encoder.encode(stringObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_empty_XxqS1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String actual = encoder.removeAccents("");
        String expected = "";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_noAccents_pONN3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String actual = encoder.removeAccents("aeiou");
        String expected = "aeiou";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_null_pIgL0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encoded = encoder.encode(null);
        assertEquals("", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_empty_DrQC1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encoded = encoder.encode("");
        assertEquals("", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_length1_LiSP3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encoded = encoder.encode("A");
        assertEquals("", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_leftToRightThenRightToLeftProcessing_i_greater_name2Size_WaFJ0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.leftToRightThenRightToLeftProcessing("test1", "test");
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_leftToRightThenRightToLeftProcessing_name1LtRStart_equals_name2RtLStart_sJiB1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.leftToRightThenRightToLeftProcessing("test1", "test1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_leftToRightThenRightToLeftProcessing_strA_length_less_strB_length_MhVB3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.leftToRightThenRightToLeftProcessing("test", "test1");
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_leftToRightThenRightToLeftProcessing_strA_length_equals_strB_length_puRf4() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.leftToRightThenRightToLeftProcessing("test", "test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_isEncodeEquals_name1_null_FWLd0() {
        String name1 = null;
        String name2 = "test";
        boolean actual = encoder.isEncodeEquals(name1, name2);
        assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_isEncodeEquals_name1_empty_HpmO1() {
        String name1 = "";
        String name2 = "test";
        boolean actual = encoder.isEncodeEquals(name1, name2);
        assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_isEncodeEquals_name2_null_Gyop3() {
        String name1 = "test";
        String name2 = null;
        boolean actual = encoder.isEncodeEquals(name1, name2);
        assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_isEncodeEquals_name2_empty_Wbcl4() {
        String name1 = "test";
        String name2 = "";
        boolean actual = encoder.isEncodeEquals(name1, name2);
        assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_isEncodeEquals_name1_length_1_yQII6() {
        String name1 = "a";
        String name2 = "test";
        boolean actual = encoder.isEncodeEquals(name1, name2);
        assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_isEncodeEquals_name2_length_1_eKfS7() {
        String name1 = "test";
        String name2 = "a";
        boolean actual = encoder.isEncodeEquals(name1, name2);
        assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_isEncodeEquals_name1_equals_name2_JFhM8() {
        String name1 = "test";
        String name2 = "test";
        boolean actual = encoder.isEncodeEquals(name1, name2);
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_isEncodeEquals_name1_not_equals_name2_LHUn9() {
        String name1 = "test";
        String name2 = "test2";
        boolean actual = encoder.isEncodeEquals(name1, name2);
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_isEncodeEquals_name1_cleanName_SlKb10() {
        String name1 = "test";
        String name2 = "test";
        encoder.cleanName(name1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_isEncodeEquals_name2_cleanName_TfcL11() {
        String name1 = "test";
        String name2 = "test";
        encoder.cleanName(name2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_isEncodeEquals_name1_removeVowels_yiCT12() {
        String name1 = "test";
        String name2 = "test";
        encoder.removeVowels(name1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_isEncodeEquals_name2_removeVowels_difV13() {
        String name1 = "test";
        String name2 = "test";
        encoder.removeVowels(name2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_isEncodeEquals_name1_removeDoubleConsonants_FljT14() {
        String name1 = "test";
        String name2 = "test";
        encoder.removeDoubleConsonants(name1);
    }
}