/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HmacUtils_Test_Failing {
    private static String bytesToHex(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHmacSha256_with_null_parameter_sDJb1() {
        final byte[] key = null;
        final Mac mac = HmacUtils.getHmacSha256(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_HDmN0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String result = hmacUtils.hmacHex(new File("valueToDigest"));
        assertEquals("expectedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexCoverage_jSLX1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        hmacUtils.hmacHex(new File("valueToDigest"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_1_kKcQ0() {
        byte[] expected = {1, 2, 3};
        byte[] actual = HmacUtils.hmacSha512("key", "valueToDigest");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_2_MMbS1() {
        byte[] expected = {4, 5, 6};
        byte[] actual = HmacUtils.hmacSha512("key2", "valueToDigest2");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacTest_JoRd0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        ByteBuffer valueToDigest = ByteBuffer.allocate(10);
        byte[] expected = hmacUtils.hmac(valueToDigest);
        byte[] actual = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_DnEb0() {
        String key = "my_secret_key";
        String valueToDigest = "my_value_to_digest";
        byte[] expected = { /* expected result */ };
        byte[] actual = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacTest1_YxUS0() throws IOException {
        File valueToDigest = new File("testFile.txt");
        byte[] expected = new HmacUtils().hmac(valueToDigest);
        byte[] actual = new HmacUtils().hmac(valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacTest2_siTD1() throws IOException {
        File valueToDigest = new File("testFile2.txt");
        byte[] expected = new HmacUtils().hmac(valueToDigest);
        byte[] actual = new HmacUtils().hmac(valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_NkCV0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        byte[] hmac = hmacUtils.hmac("valueToDigest");
        assertArrayEquals(new byte[]{1, 2, 3}, hmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac2_WLgw1() {
        HmacUtils hmacUtils = new HmacUtils("algorithm", "key");
        byte[] hmac = hmacUtils.hmac("valueToDigest");
        assertArrayEquals(new byte[]{4, 5, 6}, hmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac3_PuJj2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, new byte[]{1, 2, 3});
        byte[] hmac = hmacUtils.hmac("valueToDigest");
        assertArrayEquals(new byte[]{7, 8, 9}, hmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac4_ljlm3() {
        HmacUtils hmacUtils = new HmacUtils("algorithm", new byte[]{4, 5, 6});
        byte[] hmac = hmacUtils.hmac("valueToDigest");
        assertArrayEquals(new byte[]{10, 11, 12}, hmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacMd5Test_srdk0() {
        byte[] expected = {-10, 108, 100, -115, -103, 105, -51, -108, 116, -103, -109, -108, -118, 101, -100, -119, 103, -108, -103, 104};
        byte[] actual = HmacUtils.hmacMd5("key", "valueToDigest");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHmacSha512_with_null_parameter_Wypl1() {
        byte[] key = null;
        Mac mac = HmacUtils.getHmacSha512(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHmacSha512_with_empty_byte_array_parameter_RoQG2() {
        byte[] key = new byte[]{};
        Mac mac = HmacUtils.getHmacSha512(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHmacSha1Test1_eXlF0() {
        byte[] key = new byte[0];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getInitializedMac_1_NZMQ0() {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_MD5;
        byte[] key = new byte[0];
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getInitializedMac_2_aNSg1() {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_1;
        byte[] key = new byte[0];
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getInitializedMac_3_EFrE2() {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_224;
        byte[] key = new byte[0];
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getInitializedMac_4_elJK3() {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        byte[] key = new byte[0];
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getInitializedMac_5_Xsmz4() {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_384;
        byte[] key = new byte[0];
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getInitializedMac_6_rVpG5() {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_512;
        byte[] key = new byte[0];
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha256_WhenCalledWithValidInputs_ReturnsExpectedOutput_Bvnb0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        byte[] expectedOutput = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] actualOutput = HmacUtils.hmacSha256(key, valueToDigest);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha256_WhenCalledWithEmptyKey_ReturnsExpectedOutput_eBcQ1() {
        String key = "";
        String valueToDigest = "valueToDigest";
        byte[] expectedOutput = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] actualOutput = HmacUtils.hmacSha256(key, valueToDigest);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha256_WhenCalledWithEmptyValueToDigest_ReturnsExpectedOutput_Ycyz2() {
        String key = "key";
        String valueToDigest = "";
        byte[] expectedOutput = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] actualOutput = HmacUtils.hmacSha256(key, valueToDigest);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha256_WhenCalledWithEmptyKeyAndEmptyValueToDigest_ReturnsExpectedOutput_vzhs3() {
        String key = "";
        String valueToDigest = "";
        byte[] expectedOutput = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] actualOutput = HmacUtils.hmacSha256(key, valueToDigest);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha512HexTestWithEmptyKey_WbFa1() {
        String expected = "123456";
        String actual = HmacUtils.hmacSha512Hex("", "valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha512HexTestWithNullKey_mCwC3() {
        String expected = "123456";
        String actual = HmacUtils.hmacSha512Hex(null, "valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha384HexTest_nullKey_SuqG1() {
        String key = null;
        String valueToDigest = "valueToDigest";
        String expected = "expected";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha384HexTest_emptyKey_TbcH3() {
        String key = "";
        String valueToDigest = "valueToDigest";
        String expected = "expected";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_Tlrx0() {
        byte[] key = new byte[0];
        Mac mac = HmacUtils.getInitializedMac("HmacSHA256", key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_TZAi2() {
        byte[] key = new byte[0];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_256, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_qxEX0_MzDK0() throws NoSuchAlgorithmException, InvalidKeyException {
        Mac hmacSha256 = Mac.getInstance("HmacSHA256");
        hmacSha256.init(new SecretKeySpec(new byte[]{0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b}, "HmacSHA256"));
        Mac result = HmacUtils.updateHmac(hmacSha256, "Hi There");
        assertEquals("javax.crypto.Mac@1d90eb8c", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_NkCV0_vcnX0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        byte[] hmac = hmacUtils.hmac("valueToDigest".getBytes());
        assertArrayEquals(new byte[]{1, 2, 3}, hmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac4_ljlm3_sHxu0() {
        HmacUtils hmacUtils = new HmacUtils("algorithm", new byte[]{4, 5, 6});
        byte[] hmac = hmacUtils.hmac("valueToDigest".getBytes());
        assertArrayEquals(new byte[]{10, 11, 12}, hmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac3_PuJj2_ZDOn0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, new byte[]{1, 2, 3});
        byte[] hmac = hmacUtils.hmac("valueToDigest".getBytes());
        assertArrayEquals(new byte[]{7, 8, 9}, hmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_qSnI0_HeUp0() {
        byte[] key = new byte[]{0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b};
        byte[] valueToDigest = new byte[]{0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65};
        byte[] expected = new byte[]{(byte) 0x87, (byte) 0xaa, (byte) 0x7c, (byte) 0xde, (byte) 0xa5, (byte) 0xef, (byte) 0x61, (byte) 0x9d, (byte) 0x4f, (byte) 0xf0, (byte) 0xb4, (byte) 0x24, (byte) 0x1a, (byte) 0x1d, (byte) 0x6c, (byte) 0xb0, (byte) 0x23, (byte) 0x79, (byte) 0xf4, (byte) 0xe2, (byte) 0xd5, (byte) 0xf5, (byte) 0x14, (byte) 0x5a, (byte) 0x55, (byte) 0x9b, (byte) 0x9c, (byte) 0xc3, (byte) 0x13, (byte) 0x80, (byte) 0x2f, (byte) 0x29, (byte) 0x52};
        assertArrayEquals(expected, HmacUtils.hmacSha512(key, valueToDigest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_DnEb0_SWhl0() {
        String key = "my_secret_key";
        byte[] valueToDigest = "my_value_to_digest".getBytes();
        byte[] expected = new byte[]{ /* expected result */ };
        byte[] actual = HmacUtils.hmacSha384(key.getBytes(), valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_xLkF1_mGOG0() {
        byte[] key = new byte[]{0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b};
        byte[] valueToDigest = "Hi There".getBytes();
        byte[] expected = {(byte) 0x8d, (byte) 0xa4, (byte) 0xe7, (byte) 0x75, (byte) 0xa5, (byte) 0x63, (byte) 0xc1, (byte) 0x8f, (byte) 0x71, (byte) 0x5f, (byte) 0x80, (byte) 0x2a, (byte) 0x06, (byte) 0x3c, (byte) 0x5a, (byte) 0x31, (byte) 0xb8, (byte) 0xa1, (byte) 0x1f, (byte) 0x5c, (byte) 0x5e, (byte) 0xe1, (byte) 0x87, (byte) 0x9e, (byte) 0xc3, (byte) 0x45, (byte) 0x4e, (byte) 0x5f, (byte) 0x3c, (byte) 0x73, (byte) 0x8d, (byte) 0x2d};
        byte[] actual = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_cUpx0_QHaG0() {
        byte[] key = new byte[]{0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b};
        byte[] valueToDigest = "Hi There".getBytes();
        byte[] expected = {(byte) 0x92, (byte) 0x94, (byte) 0x72, (byte) 0x7a, (byte) 0x36, (byte) 0x38, (byte) 0xb3, (byte) 0x4c, (byte) 0xb0, (byte) 0x0f, (byte) 0xd5, (byte) 0x0e, (byte) 0x60, (byte) 0x52, (byte) 0x0b, (byte) 0x02, (byte) 0x6d, (byte) 0x73, (byte) 0x36, (byte) 0xc3, (byte) 0x3f, (byte) 0x71, (byte) 0x5f, (byte) 0x89, (byte) 0x7f, (byte) 0x9b, (byte) 0x3b, (byte) 0x3c, (byte) 0x2d, (byte) 0x28, (byte) 0x74, (byte) 0x63};
        byte[] actual = HmacUtils.hmacMd5(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_sGnI0_fid1() {
        byte[] key = new byte[]{0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b};
        byte[] valueToDigest = "Hi There".getBytes();
        String expected = "b617318655057264e28bc0b6fb378c8ef146be00";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_xtdx0_fid1() {
        byte[] key = new byte[]{0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b};
        byte[] valueToDigest = "Hi There".getBytes();
        String expected = "9294727a3638bb1c13f48ef8158bf039";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_wtyJ0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("expectedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_1_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("expectedResultMD5", resultMD5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_2_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("expectedResultSHA1", resultSHA1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_3_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("expectedResultSHA224", resultSHA224);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_4_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("expectedResultSHA256", resultSHA256);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_5_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("expectedResultSHA384", resultSHA384);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_6_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("expectedResultSHA512", resultSHA512);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_ONxe0_fid1() {
        byte[] key = new byte[]{0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b};
        byte[] valueToDigest = "Hi There".getBytes();
        String expected = "b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7";
        String actual = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_RbOv0_1_fid1() {
        assertEquals("1234567890", HmacUtils.hmacMd5Hex("key", "value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_RbOv0_2_fid1() {
        assertEquals("098f6bcd4621d373cade4e832627b4f6", HmacUtils.hmacMd5Hex("key", "value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_RbOv0_3_fid1() {
        assertEquals("9e107d9d372bb6826bd81d3542a419d6", HmacUtils.hmacMd5Hex("key", "value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_RbOv0_4_fid1() {
        assertEquals("d174ab98d277d9f5a5611c2c9f419d9f", HmacUtils.hmacMd5Hex("key", "value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_RbOv0_5_fid1() {
        assertEquals("5764f5b047cd67b2d3e4e74e33121e62", HmacUtils.hmacMd5Hex("key", "value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_RbOv0_6_fid1() {
        assertEquals("f2c6d7e8e7c7c9c7c9c7c9c7c9c7c9c7", HmacUtils.hmacMd5Hex("key", "value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithByteBuffer_tLdh0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        ByteBuffer valueToDigest = ByteBuffer.allocate(10);
        String expected = "expected";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithString_yvlp1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String valueToDigest = "valueToDigest";
        String expected = "expected";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithBytes_tcgV2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        byte[] valueToDigest = new byte[10];
        String expected = "expected";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_Jzlc0_fid1() {
        String expected = "3a854166ac5d9f023f54d517d0b39db8442c2137";
        String actual = HmacUtils.hmacSha384Hex("key", "valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_pxLS0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_SOGD1_1_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedResultMD5", resultMD5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_SOGD1_2_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedResultSHA1", resultSHA1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_SOGD1_3_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedResultSHA224", resultSHA224);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_SOGD1_4_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedResultSHA256", resultSHA256);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_SOGD1_5_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedResultSHA384", resultSHA384);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_SOGD1_6_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedResultSHA512", resultSHA512);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentKeys_Jkaj2_1_fid1() {
        HmacUtils hmacUtils1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key1");
        String result1 = hmacUtils1.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtils2 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key2");
        String result2 = hmacUtils2.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedResult1", result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentKeys_Jkaj2_2_fid1() {
        HmacUtils hmacUtils1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key1");
        String result1 = hmacUtils1.hmacHex("valueToDigest".getBytes());
        HmacUtils hmacUtils2 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key2");
        String result2 = hmacUtils2.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedResult2", result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentValuesToDigest_SRIz3_1_fid1() {
        HmacUtils hmacUtils1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String result1 = hmacUtils1.hmacHex("value1ToDigest".getBytes());
        HmacUtils hmacUtils2 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String result2 = hmacUtils2.hmacHex("value2ToDigest".getBytes());
        assertEquals("expectedResult1", result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentValuesToDigest_SRIz3_2_fid1() {
        HmacUtils hmacUtils1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String result1 = hmacUtils1.hmacHex("value1ToDigest".getBytes());
        HmacUtils hmacUtils2 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String result2 = hmacUtils2.hmacHex("value2ToDigest".getBytes());
        assertEquals("expectedResult2", result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_NsXJ0_fid1() {
        byte[] key = new byte[]{0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b};
        Mac mac = HmacUtils.getHmacMd5(key);
        assertEquals("9294727a3638bb1c13f48ef8158b05a0", bytesToHex(mac.doFinal("Hi There".getBytes())));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha512HexTest_phta0_fid1() {
        String expected = "123456";
        String actual = HmacUtils.hmacSha512Hex("key", "valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha512HexTestWithEmptyValueToDigest_jbnq2_fid1() {
        String expected = "123456";
        String actual = HmacUtils.hmacSha512Hex("key", "");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha512HexTestWithNullValueToDigest_loAG4_fid1() {
        String expected = "123456";
        String actual = HmacUtils.hmacSha512Hex("key", null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha384HexTest_pmam0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = "expected";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha384HexTest_nullValueToDigest_kVPS2() {
        String key = "key";
        String valueToDigest = null;
        String expected = "expected";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha384HexTest_emptyValueToDigest_fusL4() {
        String key = "key";
        String valueToDigest = "";
        String expected = "expected";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha384HexTest_whiteSpaceKey_oYcA7() {
        String key = "  \t\r\n";
        String valueToDigest = "valueToDigest";
        String expected = "expected";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha384HexTest_whiteSpaceValueToDigest_UsYJ8() {
        String key = "key";
        String valueToDigest = "  \t\r\n";
        String expected = "expected";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacSha256HexTest1_KXcV0_fid1() {
        String expected = "a0e79a3e8a2e9a3e8a2e9a3e8a2e9a3e8a2e9a3e8a2e9a3e8a2e9a3e8a2e9a3e";
        String actual = HmacUtils.hmacSha256Hex("key", "valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_qxEX0_MzDK0_fid1() throws NoSuchAlgorithmException, InvalidKeyException {
        Mac hmacSha256 = Mac.getInstance("HmacSHA256");
        hmacSha256.init(new SecretKeySpec(new byte[]{0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b}, "HmacSHA256"));
        Mac result = HmacUtils.updateHmac(hmacSha256, "Hi There");
        assertEquals("3a854166ac5d9f023f54d517d0b39db846e73006", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_oBuX0_1_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("expectedResultMD5", resultMD5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_oBuX0_2_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("expectedResultSHA1", resultSHA1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_oBuX0_3_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("expectedResultSHA224", resultSHA224);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_oBuX0_4_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("expectedResultSHA256", resultSHA256);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_oBuX0_5_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("expectedResultSHA384", resultSHA384);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_jAyB1_oBuX0_6_fid1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest");
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest");
        assertEquals("expectedResultSHA512", resultSHA512);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_RbOv0() {
        assertEquals("1234567890", HmacUtils.hmacMd5Hex("key", "value"));
        assertEquals("098f6bcd4621d373cade4e832627b4f6", HmacUtils.hmacMd5Hex("key", "value"));
        assertEquals("9e107d9d372bb6826bd81d3542a419d6", HmacUtils.hmacMd5Hex("key", "value"));
        assertEquals("d174ab98d277d9f5a5611c2c9f419d9f", HmacUtils.hmacMd5Hex("key", "value"));
        assertEquals("5764f5b047cd67b2d3e4e74e33121e62", HmacUtils.hmacMd5Hex("key", "value"));
        assertEquals("f2c6d7e8e7c7c9c7c9c7c9c7c9c7c9c7", HmacUtils.hmacMd5Hex("key", "value"));
        assertEquals("d174ab98d277d9f5a5611c2c9f419d9f", HmacUtils.hmacMd5Hex("key", "value"));
        assertEquals("5764f5b047cd67b2d3e4e74e33121e62", HmacUtils.hmacMd5Hex("key", "value"));
        assertEquals("f2c6d7e8e7c7c9c7c9c7c9c7c9c7c9c7", HmacUtils.hmacMd5Hex("key", "value"));
        assertEquals("d174ab98d277d9f5a5611c2c9f419d9f", HmacUtils.hmacMd5Hex("key", "value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithms_SOGD1() {
        HmacUtils hmacUtilsMD5 = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String resultMD5 = hmacUtilsMD5.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedResultMD5", resultMD5);
        HmacUtils hmacUtilsSHA1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String resultSHA1 = hmacUtilsSHA1.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedResultSHA1", resultSHA1);
        HmacUtils hmacUtilsSHA224 = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String resultSHA224 = hmacUtilsSHA224.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedResultSHA224", resultSHA224);
        HmacUtils hmacUtilsSHA256 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String resultSHA256 = hmacUtilsSHA256.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedResultSHA256", resultSHA256);
        HmacUtils hmacUtilsSHA384 = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String resultSHA384 = hmacUtilsSHA384.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedResultSHA384", resultSHA384);
        HmacUtils hmacUtilsSHA512 = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String resultSHA512 = hmacUtilsSHA512.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedResultSHA512", resultSHA512);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentKeys_Jkaj2() {
        HmacUtils hmacUtils1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key1");
        String result1 = hmacUtils1.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedResult1", result1);
        HmacUtils hmacUtils2 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key2");
        String result2 = hmacUtils2.hmacHex("valueToDigest".getBytes());
        assertEquals("expectedResult2", result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentValuesToDigest_SRIz3() {
        HmacUtils hmacUtils1 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String result1 = hmacUtils1.hmacHex("value1ToDigest".getBytes());
        assertEquals("expectedResult1", result1);
        HmacUtils hmacUtils2 = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String result2 = hmacUtils2.hmacHex("value2ToDigest".getBytes());
        assertEquals("expectedResult2", result2);
    }
}