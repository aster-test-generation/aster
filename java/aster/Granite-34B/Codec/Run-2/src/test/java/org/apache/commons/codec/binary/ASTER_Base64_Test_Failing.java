/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base64_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger2_JuWM1() {
        byte[] pArray = new byte[10];
        BigInteger expected = new BigInteger("1234567890");
        BigInteger actual = Base64.decodeInteger(pArray);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger3_IOSi2() {
        byte[] pArray = new byte[20];
        BigInteger expected = new BigInteger("12345678901234567890");
        BigInteger actual = Base64.decodeInteger(pArray);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInteger_KuqX0() {
        BigInteger bigInteger = new BigInteger("1234567890");
        byte[] expected = new byte[]{49, 50, 51, 52, 53, 54, 55, 56, 57, 48};
        byte[] actual = Base64.encodeInteger(bigInteger);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeIntegerWithNull_Bhxv1() {
        BigInteger bigInteger = null;
        byte[] expected = null;
        byte[] actual = Base64.encodeInteger(bigInteger);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String_RLcT0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        String encodedString = Base64.encodeBase64String(binaryData);
        assertEquals("AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJipOYk5qTnqOfo6CgoSGhoeIiYqTkpOak56jn6OgoaKjpKWmp6ipqqusra6vsLGys7S1tre4ubq7vL2+v8DBwsPExcbHyMnKy8zNzs/Q0dLT1NXW19jZ2tvc3d7f4OHg4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w=="
        , encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes_brpz0() {
        BigInteger bigInt = new BigInteger("1234567890");
        byte[] expected = {0, 0, 0, 0, 0, 0, 45, -120};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytesWithNegativeValue_SuIY1() {
        BigInteger bigInt = new BigInteger("-1234567890");
        byte[] expected = {0, 0, 0, 0, 0, 0, -109, 8};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytesWithZeroValue_ObHE2() {
        BigInteger bigInt = new BigInteger("0");
        byte[] expected = {0};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytesWithMaxIntValue_JCOS3() {
        BigInteger bigInt = new BigInteger("2147483647");
        byte[] expected = {0, 127, 127, 127};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytesWithMinIntValue_Nnjt4() {
        BigInteger bigInt = new BigInteger("-2147483648");
        byte[] expected = {0, -128, -128, -128};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_dQHo0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};
        assertArrayEquals(expected, Base64.encodeBase64URLSafe(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_gAmi0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = true;
        boolean urlSafe = true;
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_2_dRCZ1() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = false;
        boolean urlSafe = false;
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_3_xdAY2() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = true;
        boolean urlSafe = false;
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_4_zBQn3() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = false;
        boolean urlSafe = true;
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_pkQw0() {
        byte[] base64Data = new byte[]{49, 50, 51};
        byte[] expected = new byte[]{49, 50, 51};
        assertArrayEquals(expected, Base64.decodeBase64(base64Data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_2_SzRi1() {
        byte[] base64Data = new byte[]{49, 50, 51};
        byte[] expected = new byte[]{49, 50, 51};
        assertArrayEquals(expected, new Base64(1, new byte[]{49}, true, CodecPolicy.STRICT).decode(base64Data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_3_XfrI2() {
        byte[] base64Data = new byte[]{49, 50, 51};
        byte[] expected = new byte[]{49, 50, 51};
        assertArrayEquals(expected, new Base64(1, new byte[]{49}, true).decode(base64Data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_4_EWko3() {
        byte[] base64Data = new byte[]{49, 50, 51};
        byte[] expected = new byte[]{49, 50, 51};
        assertArrayEquals(expected, new Base64(1, new byte[]{49}, false).decode(base64Data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_5_DClY4() {
        byte[] base64Data = new byte[]{49, 50, 51};
        byte[] expected = new byte[]{49, 50, 51};
        assertArrayEquals(expected, new Base64(1, new byte[]{49}).decode(base64Data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_6_mxVN5() {
        byte[] base64Data = new byte[]{49, 50, 51};
        byte[] expected = new byte[]{49, 50, 51};
        assertArrayEquals(expected, new Base64(1).decode(base64Data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_7_njtG6() {
        byte[] base64Data = new byte[]{49, 50, 51};
        byte[] expected = new byte[]{49, 50, 51};
        assertArrayEquals(expected, new Base64().decode(base64Data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_BfPR0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        assertArrayEquals(expected, Base64.encodeBase64(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithLineLength_bODr1() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        Base64 base64 = new Base64(5);
        assertArrayEquals(expected, base64.encodeBase64(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithUrlSafe_XRyz2() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        Base64 base64 = new Base64(true);
        assertArrayEquals(expected, base64.encodeBase64(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithLineLengthAndUrlSafe_nqIX3() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        Base64 base64 = new Base64(5, new byte[]{'\n'}, true);
        assertArrayEquals(expected, base64.encodeBase64(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithLineLengthAndUrlSafeAndDecodingPolicy_qOvG4() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        Base64 base64 = new Base64(5, new byte[]{'\n'}, true, CodecPolicy.LENIENT);
        assertArrayEquals(expected, base64.encodeBase64(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_xHiz0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = true;
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_urlSafe_gOFO1() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = true;
        boolean urlSafe = true;
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_vUww0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        byte[] actual = Base64.encodeBase64Chunked(binaryData);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_urlSafe_IPDG1() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        Base64 base64 = new Base64(true);
        byte[] actual = base64.encodeBase64Chunked(binaryData);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_lineLength_Omsf2() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        Base64 base64 = new Base64(5);
        byte[] actual = base64.encodeBase64Chunked(binaryData);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_lineLengthAndSeparator_CuWH3() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        Base64 base64 = new Base64(5, new byte[]{13, 10});
        byte[] actual = base64.encodeBase64Chunked(binaryData);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_lineLengthAndSeparatorAndUrlSafe_crgo4() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        Base64 base64 = new Base64(5, new byte[]{13, 10}, true);
        byte[] actual = base64.encodeBase64Chunked(binaryData);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString_jLDo0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        String encodedString = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals("AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJipOYk5qTnqOfo6CgoSGhoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w=="
        , encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithLineLengthAndSeparator_btPn0() {
        Base64 base64 = new Base64(8, new byte[]{'\r', '\n'});
        byte[] input = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        String expected = "AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUm\r\n" +
        "Njg6Ozw9PkBCR URFRkZGR0hJSktMTU5PUFFSU1RVVldYWVpbXF1eX2\r\n" +
        "BhcXFycnKCopKy0tLS0uLi4uLikqKysrKy8vLzAxMjM0NTY3ODk6O0\r\n" +
        "BCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYXFxcnJycnp6\r\n" +
        "enp6SkpKS0tLS0tLS0uLi4uLikqKystLS0tLS0tLS0tLS0tLS0tLS0t\r\n" +
        "LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0=\r\n";
        assertEquals(expected, base64.encodeToString(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUrlSafe_lvkN1() {
        Base64 base64 = new Base64(true);
        byte[] input = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        String expected = "AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUm\n" +
        "Njg6Ozw9PkBCRURFRkZGR0hJSktMTU5PUFFSU1RVVldYWVpbXF1eX2\n" +
        "BhcXFycnKCopKy0tLS0uLi4uLikqKysrKy8vLzAxMjM0NTY3ODk6O0\n" +
        "BCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYXFxcnJycnp6\n" +
        "enp6SkpKS0tLS0tLS0uLi4uLikqKystLS0tLS0tLS0tLS0tLS0tLS0t\n" +
        "LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0=\n";
        assertEquals(expected, base64.encodeToString(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_lineLength_urlSafe_decodingPolicy_ZMqH4_EzcP0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = true;
        int lineLength = 5;
        boolean urlSafe = true;
        CodecPolicy decodingPolicy = CodecPolicy.STRICT;
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        Base64 base64 = new Base64(lineLength, null, urlSafe, decodingPolicy);
        byte[] actual = base64.encode(binaryData);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytesWithMaxIntValue_JCOS3_fid2() {
        BigInteger bigInt = new BigInteger("2147483647");
        byte[] expected = {0, 0, 0, 127};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytesWithMinIntValue_Nnjt4_fid2() {
        BigInteger bigInt = new BigInteger("-2147483648");
        byte[] expected = {0, 0, 0, -128};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_0_WEew0_fid2() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet((byte) 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_1_etJw1_fid2() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.LENIENT);
        assertTrue(base64.isInAlphabet((byte) 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_2_dkhY2_fid2() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet((byte) 2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_3_tXBb3_fid2() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.LENIENT);
        assertTrue(base64.isInAlphabet((byte) 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_0_EgZt0_fid2() {
        assertTrue(Base64.isBase64((byte) 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_1_cwOC1_fid2() {
        assertTrue(Base64.isBase64((byte) 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_2_CwRq2_fid2() {
        assertTrue(Base64.isBase64((byte) 2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_3_YYzn3_fid2() {
        assertTrue(Base64.isBase64((byte) 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_4_sUuq4_fid2() {
        assertTrue(Base64.isBase64((byte) 4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBase64IntByteArrayBooleanCodecPolicy_YNJC6_fid2() {
        int lineLength = 0;
        byte[] lineSeparator = new byte[0];
        boolean urlSafe = false;
        CodecPolicy decodingPolicy = null;
        Base64 base64 = new Base64(lineLength, lineSeparator, urlSafe, decodingPolicy);
        assertNotNull(base64);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithLineLength_AKmh1() {
        Base64 base64 = new Base64(10);
        byte[] expected = null;
        byte[] actual = base64.getLineSeparator();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithUrlSafe_mWLN7() {
        Base64 base64 = new Base64(true);
        byte[] expected = null;
        byte[] actual = base64.getLineSeparator();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_ptUw0_1_fid2() {
        byte[] arrayOctet = new byte[10];
        for (int i = 0; i < 10; i++) {
            arrayOctet[i] = (byte) i;
        }
        arrayOctet[0] = 10;
        assertTrue(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase642_MwXd1_1_fid2() {
        byte[] arrayOctet = new byte[10];
        for (int i = 0; i < 10; i++) {
            arrayOctet[i] = (byte) i;
        }
        arrayOctet[0] = 10;
        arrayOctet[0] = 100;
        assertTrue(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase643_VLjV2_JmrC0_fid2() {
        byte[] arrayOctet = new byte[10];
        for (int i = 0; i < 10; i++) {
            arrayOctet[i] = (byte) i;
        }
        arrayOctet[0] = -56;
        assertTrue(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase644_AxEz3_oyok0_1_fid2() {
        byte[] arrayOctet = new byte[10];
        for (int i = 0; i < 10; i++) {
            arrayOctet[i] = (byte) i;
        }
        arrayOctet[0] = (byte) 100;
        arrayOctet[0] = (byte) 10000;
        assertTrue(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_ptUw0() {
        byte[] arrayOctet = new byte[10];
        for (int i = 0; i < 10; i++) {
            arrayOctet[i] = (byte) i;
        }
        assertTrue(Base64.isBase64(arrayOctet));
        arrayOctet[0] = 10;
        assertFalse(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase642_MwXd1() {
        byte[] arrayOctet = new byte[10];
        for (int i = 0; i < 10; i++) {
            arrayOctet[i] = (byte) i;
        }
        arrayOctet[0] = 10;
        assertTrue(Base64.isBase64(arrayOctet));
        arrayOctet[0] = 100;
        assertFalse(Base64.isBase64(arrayOctet));
    }
}