/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DigestUtils_Test_Failing {
    {
    }

    {
    }

    {
    }

    {
    }

    {
    }

    {
    }

    {
    }

    {
    }

    {
    }

    {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_IULW0() {
        byte[] expected = {1, 2, 3}; // Replace with the expected result
        byte[] actual = DigestUtils.sha3_384("data");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_RcVK0() {
        byte[] expected = new byte[]{1, 2, 3}; // Replace with actual expected value
        byte[] actual = DigestUtils.sha512_224("input");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_CRNm0() {
        byte[] data = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3841_jGbd1() {
        byte[] data = new byte[1];
        byte[] expected = new byte[1];
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3842_Dxdh2() {
        byte[] data = new byte[2];
        byte[] expected = new byte[2];
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3843_UIay3() {
        byte[] data = new byte[3];
        byte[] expected = new byte[3];
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3844_Ypml4() {
        byte[] data = new byte[4];
        byte[] expected = new byte[4];
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3845_FwPU5() {
        byte[] data = new byte[5];
        byte[] expected = new byte[5];
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3846_qJKi6() {
        byte[] data = new byte[6];
        byte[] expected = new byte[6];
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3847_mcin7() {
        byte[] data = new byte[7];
        byte[] expected = new byte[7];
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3848_uVYv8() {
        byte[] data = new byte[8];
        byte[] expected = new byte[8];
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3849_lUHl9() {
        byte[] data = new byte[9];
        byte[] expected = new byte[9];
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha38410_JPuO10() {
        byte[] data = new byte[10];
        byte[] expected = new byte[10];
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha38411_KOWg11() {
        byte[] data = new byte[11];
        byte[] expected = new byte[11];
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha38412_kLeO12() {
        byte[] data = new byte[12];
        byte[] expected = new byte[12];
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha38413_zOdc13() {
        byte[] data = new byte[13];
        byte[] expected = new byte[13];
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_PjYW0() {
        byte[] expected = new byte[64];
        byte[] actual = DigestUtils.sha3_512("data");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testShaHex_ZmPS0() {
        String data = "example data";
        String expected = "expected result";
        String actual = DigestUtils.shaHex(data);
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_XWsx0() {
        assertEquals("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", DigestUtils.sha256Hex(""));
        assertEquals("68656c6c6f", DigestUtils.sha256Hex("hello"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSha384Hex_CLFs0() {
        String data = "data";
        String expected = "expected";
        String actual = DigestUtils.sha384Hex(data);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_BZGS0() {
        assertEquals("31d6cf51a2ac33b8", DigestUtils.md2Hex("test"));
        assertEquals("7f83b1657ff1fc53", DigestUtils.md2Hex("hello"));
        assertEquals("03d9d313c6b8e302", DigestUtils.md2Hex("world"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_RjIG0() {
        assertEquals("da39a3ee5e6b4b0d3255bfef95601890afd80709", DigestUtils.shaHex("".getBytes()));
        assertEquals("86f7e437faa5a7ce9d41c957f1c131bb474b66d4", DigestUtils.shaHex("abc".getBytes()));
        assertEquals("c9a9f3d76192e23b1d561a4f0d7a36e2e6d5d412", DigestUtils.shaHex("message digest".getBytes()));
        assertEquals("d852c7322a403b32b4c4c5c7f1d8d2c7322a403b32b4c4c5c7f1d8d2", DigestUtils.shaHex("abcdefghijklmnopqrstuvwxyz".getBytes()));
        assertEquals("f3d2d0c7b6a3a36a6a24a3b2a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3", DigestUtils.shaHex("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".getBytes()));
        assertEquals("a3d2d0c7b6a3a36a6a24a3b2a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3", DigestUtils.shaHex("12345678901234567890123456789012345678901234567890123456789012345678901234567890".getBytes()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_aGDD0() {
        byte[] data = new byte[]{0x01, 0x02, 0x03};
        String expected = "309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f989dd35bc5ff499670da34255b45b0cfbc8621832b36c3e69a6e2a904c5";
        assertEquals(expected, DigestUtils.sha512Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_OImZ0() {
        byte[] data = new byte[]{0, 1, 2, 3};
        byte[] expected = new byte[]{4, 5, 6, 7};
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_Vydc0() {
        byte[] data = new byte[0];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_yIsy0() {
        byte[] data = new byte[0];
        assertEquals("", DigestUtils.sha3_384Hex(data));
        data = new byte[]{0x61};
        assertEquals("c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470", DigestUtils.sha3_384Hex(data));
        data = new byte[]{0x61, 0x62};
        assertEquals("2c23146a63a29a32b8319816b34c0f568b537e104e39d1b8f0b2b9c5", DigestUtils.sha3_384Hex(data));
        data = new byte[]{0x61, 0x62, 0x63};
        assertEquals("b751850b1a57168a5693cd924b6b096e08f621827444f70d884f5d0240d2712e10e116e9192af3c91a7ec57647e3934057340b4cf408d5a56592f8274", DigestUtils.sha3_384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_FtGi0() {
        byte[] data = new byte[]{0x01, 0x02, 0x03};
        byte[] expected = new byte[]{0x01, 0x02, 0x03};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_2_IOsu1() {
        byte[] data = new byte[]{0x04, 0x05, 0x06};
        byte[] expected = new byte[]{0x04, 0x05, 0x06};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_3_wEiz2() {
        byte[] data = new byte[]{0x07, 0x08, 0x09};
        byte[] expected = new byte[]{0x07, 0x08, 0x09};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_4_eNLg3() {
        byte[] data = new byte[]{0x0a, 0x0b, 0x0c};
        byte[] expected = new byte[]{0x0a, 0x0b, 0x0c};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_5_XFsj4() {
        byte[] data = new byte[]{0x0d, 0x0e, 0x0f};
        byte[] expected = new byte[]{0x0d, 0x0e, 0x0f};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_6_ETqb5() {
        byte[] data = new byte[]{0x10, 0x11, 0x12};
        byte[] expected = new byte[]{0x10, 0x11, 0x12};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_7_qjon6() {
        byte[] data = new byte[]{0x13, 0x14, 0x15};
        byte[] expected = new byte[]{0x13, 0x14, 0x15};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_8_hDKr7() {
        byte[] data = new byte[]{0x16, 0x17, 0x18};
        byte[] expected = new byte[]{0x16, 0x17, 0x18};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_9_aTmB8() {
        byte[] data = new byte[]{0x19, 0x1a, 0x1b};
        byte[] expected = new byte[]{0x19, 0x1a, 0x1b};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_fxqv0() {
        byte[] data = new byte[]{0x01, 0x02, 0x03};
        String expected = "202cb962ac59075b964b07152d234b70";
        assertEquals(expected, DigestUtils.md2Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithEmptyData_FCuD1() {
        byte[] data = new byte[0];
        String expected = "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f";
        assertEquals(expected, DigestUtils.md2Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_qjRU0() {
        byte[] data = new byte[]{0x01, 0x02, 0x03};
        byte[] expected = new byte[]{0x02, 0x01, 0x03};
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_ryYJ0() {
        byte[] data = new byte[]{0x01, 0x02, 0x03};
        String expected = "66c4a0aa75c8d72a9d434b6b80a711564925571b785d2d8a2d4a8cc0a6f3a5a3";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_itVD0() {
        byte[] input = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
        byte[] actual = DigestUtils.sha512(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithEmptyArray_CzTe1() {
        byte[] input = new byte[0];
        byte[] expected = new byte[]{10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
        byte[] actual = DigestUtils.sha512(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithNullArray_yNOh2() {
        byte[] input = null;
        byte[] expected = new byte[]{10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
        byte[] actual = DigestUtils.sha512(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_IwJg0() {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = ByteBuffer.allocate(10);
        byte[] expected = new byte[10];
        byte[] actual = digestUtils.digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithName_vwBI2() {
        DigestUtils digestUtils = new DigestUtils("MD5");
        ByteBuffer data = ByteBuffer.allocate(10);
        byte[] expected = new byte[10];
        byte[] actual = digestUtils.digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_ePFi0() {
        String data = "example";
        String expected = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_sTNH0() {
        String data = "example";
        String expected = "9e107d9d372bb6826bd81d3542a419d6";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithNullData_oOlw2() {
        String data = null;
        String expected = "d41d8cd98f00b204e9800998ecf8427e";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_vWna0() {
        String data = "test";
        byte[] expected = {4, 109, -100, 124, 100, -107, -6, -118, -107, 110, 117, -51, -107, 115, 113, -100, -10, -119, -107, 107, -107, 109, -100, 124, 100, -107, -6, -118, -107, 110, 117, -51, -107, 115, 113, -100, -10, -119, -107, 107};
        byte[] actual = DigestUtils.sha512_256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_hBCG0() {
        String data = "test";
        byte[] expected = {10, -103, -107, 104, 122, -51, -126, -10, 115, -10, -121, -108, -118, 10, 106, 110, 101, -119, -106, -102};
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_NLAK0() {
        byte[] input = new byte[]{0x01, 0x02, 0x03};
        byte[] expected = new byte[]{0x00, 0x01, 0x02};
        byte[] actual = DigestUtils.sha512_256(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_coverage_tROG1() {
        byte[] input = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha512_256(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_coverage_2_eerR2() {
        byte[] input = new byte[]{0x01, 0x02, 0x03};
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha512_256(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_coverage_3_bsNy3() {
        byte[] input = new byte[0];
        byte[] expected = new byte[]{0x00, 0x01, 0x02};
        byte[] actual = DigestUtils.sha512_256(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_nullInput_gnvq1() {
        String input = null;
        String expectedOutput = "expected output";
        String actualOutput = DigestUtils.sha3_384Hex(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_emptyInput_fFub2() {
        String input = "";
        String expectedOutput = "expected output";
        String actualOutput = DigestUtils.sha3_384Hex(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_nonEmptyInput_VIKw6() {
        String input = "input data";
        String expectedOutput = "expected output";
        String actualOutput = DigestUtils.sha3_384Hex(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_nkLt0() {
        byte[] data = new byte[0];
        String expected = "43f9f1731c9731cfdf511c09d1b0a7593e69e607f0b1c0f0f0d9b0b1f0f0f0f0";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_GGOp0() {
        byte[] data = new byte[0];
        byte[] expected = {-75, -115, -113, -106, 106, -106, -107, 102, -103, -106, -106, -106, -106, -106, -106, -106};
        assertArrayEquals(expected, DigestUtils.md5(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSha3_256Digest_ujZn0() {
        MessageDigest digest = DigestUtils.getSha3_256Digest();
        assertEquals("SHA-384", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_kCgg0() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = "Hello, World!".getBytes();
        String expected = "7509e572e81c7c729729d21f33e36330";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithCoverage_eWkH1() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = new byte[0];
        String expected = "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_sygf0() {
        String data = "test";
        String expected = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_null_mOKC2() {
        String data = null;
        String expected = "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullInputStream_XsHn1() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        IOException exception = assertThrows(IOException.class, () -> digestUtils.digest((InputStream) null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullInputStream_RfoE4() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        IOException exception = assertThrows(IOException.class, () -> digestUtils.updateDigest(digestUtils.getMessageDigest(), (InputStream) null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithNullArray_tOPW4() throws IOException {
        String expected = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        String actual = DigestUtils.sha1Hex((byte[]) null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithMessageDigest_DrkA5() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
        String expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3";
        String actual = DigestUtils.sha1Hex(messageDigest.digest("test".getBytes()));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_MlVu0() {
        assertEquals("6b4e03423667db5f", DigestUtils.sha3_224Hex(""));
        assertEquals("a69f73cc07198d80", DigestUtils.sha3_224Hex("a"));
        assertEquals("6a2d407e9a4b5f1c", DigestUtils.sha3_224Hex("ab"));
        assertEquals("e74e82f5a3f3a0c7", DigestUtils.sha3_224Hex("abc"));
        assertEquals("e9c6d914c4b8d9b2", DigestUtils.sha3_224Hex("abcd"));
        assertEquals("c72a3f0f7a36a3a6", DigestUtils.sha3_224Hex("abcde"));
        assertEquals("8a2d0e65a90471f1", DigestUtils.sha3_224Hex("abcdef"));
        assertEquals("c61a1d2e4b0e9c0a", DigestUtils.sha3_224Hex("abcdefg"));
        assertEquals("e4a3f51c4d675a9d", DigestUtils.sha3_224Hex("abcdefgh"));
        assertEquals("3a985da74fe225b2", DigestUtils.sha3_224Hex("abcdefghi"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_HQUf0() {
        assertEquals("1234567890", DigestUtils.sha512Hex("1234567890"));
        assertEquals("098f6bcd4621d373cade4e832627b4f6", DigestUtils.sha512Hex("123456789"));
        assertEquals("e718483d0ce769644e2e42c7bc15b4638e1f98b13b2044285632a803a0", DigestUtils.sha512Hex("12345678"));
        assertEquals("206a9d66055d537ec84051a0171a115e", DigestUtils.sha512Hex("1234567"));
        assertEquals("0b4c4ce5f52c419330d1925559f91a9e", DigestUtils.sha512Hex("123456"));
        assertEquals("67c623a8b6e44e5a31d1b8b8a752a75a", DigestUtils.sha512Hex("12345"));
        assertEquals("a8d79a00b204e6738a063f0787272922", DigestUtils.sha512Hex("1234"));
        assertEquals("c672b8d1ef56ed28ab87c3622c511406", DigestUtils.sha512Hex("123"));
        assertEquals("ddaf35a193617abacc417349ae204131", DigestUtils.sha512Hex("12"));
        assertEquals("861844d6704e8573fec34d967e20bcfe", DigestUtils.sha512Hex("1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithMinData_ickL5() {
        byte[] data = new byte[1];
        assertEquals("d41d8cd98f00b204e9800998ecf8427e", DigestUtils.md5Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_QDxj0() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        ByteBuffer data = ByteBuffer.allocate(10);
        String actual = digestUtils.digestAsHex(data);
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithEmptyByteBuffer_QYlY1() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        ByteBuffer data = ByteBuffer.allocate(0);
        String actual = digestUtils.digestAsHex(data);
        String expected = "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithNullByteBuffer_yNNh2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        ByteBuffer data = null;
        String actual = digestUtils.digestAsHex(data);
        String expected = "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithDifferentByteBuffer_OUti3() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        ByteBuffer data = ByteBuffer.allocate(100);
        String actual = digestUtils.digestAsHex(data);
        String expected = "50f63b9d1b1d9c2a1e4d6a3d3c1c3e3d3b9d1b1d9c2a1e4d6a3d3c1c3e3d3b";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithDifferentDigestUtils_jEwr4() {
        DigestUtils digestUtils = new DigestUtils("SHA-512");
        ByteBuffer data = ByteBuffer.allocate(10);
        String actual = digestUtils.digestAsHex(data);
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithDifferentDigestUtilsAndByteBuffer_EIkc5() {
        DigestUtils digestUtils = new DigestUtils("SHA-512");
        ByteBuffer data = ByteBuffer.allocate(100);
        String actual = digestUtils.digestAsHex(data);
        String expected = "50f63b9d1b1d9c2a1e4d6a3d3c1c3e3d3b9d1b1d9c2a1e4d6a3d3c1c3e3d3b";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_JZbl0() {
        byte[] data = new byte[0];
        byte[] expected = new byte[20];
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_1_ABXj1() {
        byte[] data = new byte[1];
        byte[] expected = new byte[20];
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_2_QrCB2() {
        byte[] data = new byte[2];
        byte[] expected = new byte[20];
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_3_mjRF3() {
        byte[] data = new byte[3];
        byte[] expected = new byte[20];
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_4_lrIZ4() {
        byte[] data = new byte[4];
        byte[] expected = new byte[20];
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_5_qyaN5() {
        byte[] data = new byte[5];
        byte[] expected = new byte[20];
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_6_XPjm6() {
        byte[] data = new byte[6];
        byte[] expected = new byte[20];
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_7_KoVQ7() {
        byte[] data = new byte[7];
        byte[] expected = new byte[20];
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_8_SJGi8() {
        byte[] data = new byte[8];
        byte[] expected = new byte[20];
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_9_fXUG9() {
        byte[] data = new byte[9];
        byte[] expected = new byte[20];
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_10_zpnP10() {
        byte[] data = new byte[10];
        byte[] expected = new byte[20];
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_11_MlTE11() {
        byte[] data = new byte[11];
        byte[] expected = new byte[20];
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_12_IXVc12() {
        byte[] data = new byte[12];
        byte[] expected = new byte[20];
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_13_HPpz13() {
        byte[] data = new byte[13];
        byte[] expected = new byte[20];
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_14_ZNDi14() {
        byte[] data = new byte[14];
        byte[] expected = new byte[20];
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_xNpu0() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String result = digestUtils.digestAsHex(new File("test.txt"));
        assertEquals("expectedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_with_default_constructor_Ocks2() throws IOException {
        DigestUtils digestUtils = new DigestUtils();
        String result = digestUtils.digestAsHex(new File("test.txt"));
        assertEquals("expectedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_with_empty_file_NHJw4() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String result = digestUtils.digestAsHex(new File("empty.txt"));
        assertEquals("expectedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_with_non_existent_file_MkfS5() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String result = digestUtils.digestAsHex(new File("nonExistentFile.txt"));
        assertEquals("expectedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_with_invalid_input_lXae6() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String result = digestUtils.digestAsHex(new File("invalidInput.txt"));
        assertEquals("expectedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_with_empty_string_tsFv7() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String result = digestUtils.digestAsHex("");
        assertEquals("expectedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_with_invalid_string_EFrv9() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String result = digestUtils.digestAsHex("invalidString");
        assertEquals("expectedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_TuDS0() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = "Hello, World!";
        String expected = "7509e5bda0c762d2bac7f90d758b5b2263fa01ccbc542ab5e3df163be08e6ca9";
        assertEquals(expected, digestUtils.digestAsHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_NullData_tDBJ1() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = null;
        String expected = null;
        assertEquals(expected, digestUtils.digestAsHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_EmptyData_xjFg2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = "";
        String expected = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        assertEquals(expected, digestUtils.digestAsHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_xPJz0() {
        byte[] data = new byte[]{0x01, 0x02, 0x03};
        String expected = "e3d0c7806a33234191873523cd8d0c0f";
        assertEquals(expected, DigestUtils.sha512_224Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_ClbQ0_3() {
        assertEquals("e9d71f5ee7c92d6dc9e92ffdad17b8bd49418f98", DigestUtils.sha1Hex("ab"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_ClbQ0_4() {
        assertEquals("1c8aff950685c2ed47a35d281b62d31b276b6457", DigestUtils.sha1Hex("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_ClbQ0_5() {
        assertEquals("3a81ozen384of1dp0cv Friendz!0", DigestUtils.sha1Hex("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest_OWeK0() {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_aWmE0() {
        String data = "example";
        byte[] expected = new byte[]{4, 114, -45, -121, -111, 112, -111, -122, -107, 102, -107, -10, -10, -119, 122, -118, -107, -10, -10, -119, 122, -118, -107, -10, -10, -119, 122, -118};
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1WithEmptyData_itUF1() {
        String data = "";
        byte[] expected = new byte[]{2, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128};
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1WithNullData_lKcg2() {
        String data = null;
        byte[] expected = new byte[]{2, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128};
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullArgument_RwIu0() {
        try {
            DigestUtils.getDigest(null);
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
            assertNotNull(e.getMessage());
            assertTrue(e.getMessage().contains("algorithm"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyArgument_rbwA1() {
        try {
            DigestUtils.getDigest("");
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
            assertNotNull(e.getMessage());
            assertTrue(e.getMessage().contains("algorithm"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_XWsx0_2() {
        assertEquals("68656c6c6f", DigestUtils.sha256Hex("hello"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_BZGS0_1() {
        assertEquals("31d6cf51a2ac33b8", DigestUtils.md2Hex("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_BZGS0_2() {
        assertEquals("7f83b1657ff1fc53", DigestUtils.md2Hex("hello"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_BZGS0_3() {
        assertEquals("03d9d313c6b8e302", DigestUtils.md2Hex("world"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_RjIG0_2() {
        assertEquals("86f7e437faa5a7ce9d41c957f1c131bb474b66d4", DigestUtils.shaHex("abc".getBytes()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_RjIG0_3() {
        assertEquals("c9a9f3d76192e23b1d561a4f0d7a36e2e6d5d412", DigestUtils.shaHex("message digest".getBytes()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_RjIG0_4() {
        assertEquals("d852c7322a403b32b4c4c5c7f1d8d2c7322a403b32b4c4c5c7f1d8d2", DigestUtils.shaHex("abcdefghijklmnopqrstuvwxyz".getBytes()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_RjIG0_5() {
        assertEquals("f3d2d0c7b6a3a36a6a24a3b2a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3", DigestUtils.shaHex("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".getBytes()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_RjIG0_6() {
        assertEquals("a3d2d0c7b6a3a36a6a24a3b2a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3", DigestUtils.shaHex("12345678901234567890123456789012345678901234567890123456789012345678901234567890".getBytes()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_MlVu0_1() {
        assertEquals("6b4e03423667db5f", DigestUtils.sha3_224Hex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_MlVu0_2() {
        assertEquals("a69f73cc07198d80", DigestUtils.sha3_224Hex("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_MlVu0_3() {
        assertEquals("6a2d407e9a4b5f1c", DigestUtils.sha3_224Hex("ab"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_MlVu0_4() {
        assertEquals("e74e82f5a3f3a0c7", DigestUtils.sha3_224Hex("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_MlVu0_5() {
        assertEquals("e9c6d914c4b8d9b2", DigestUtils.sha3_224Hex("abcd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_MlVu0_6() {
        assertEquals("c72a3f0f7a36a3a6", DigestUtils.sha3_224Hex("abcde"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_MlVu0_7() {
        assertEquals("8a2d0e65a90471f1", DigestUtils.sha3_224Hex("abcdef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_MlVu0_8() {
        assertEquals("c61a1d2e4b0e9c0a", DigestUtils.sha3_224Hex("abcdefg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_MlVu0_9() {
        assertEquals("e4a3f51c4d675a9d", DigestUtils.sha3_224Hex("abcdefgh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_MlVu0_10() {
        assertEquals("3a985da74fe225b2", DigestUtils.sha3_224Hex("abcdefghi"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_tfXa0_eGBj0() {
        assertEquals("6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4", DigestUtils.sha512_224Hex("abc"));
    }

    @Test
    public void testIsAvailableWithUnsupportedAlgorithm_vLQP5_qVqI1() {
        Assertions.assertThrows(NoSuchAlgorithmException.class, () -> DigestUtils.isAvailable("unsupported-algorithm"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_EmptyData_xjFg2_jdgu0() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = "";
        String expected = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        assertEquals(expected, digestUtils.digestAsHex(data.getBytes()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_JFOZ0_hTeA0() {
        byte[] input = new byte[]{0x61, 0x62, 0x63};
        byte[] expected = new byte[]{(byte) 0xa6, (byte) 0x6e, (byte) 0x2b, (byte) 0xd2, (byte) 0x8b, (byte) 0x67, (byte) 0x6f, (byte) 0xe9, (byte) 0x9a, (byte) 0x83, (byte) 0x15, (byte) 0xa0, (byte) 0x3c, (byte) 0x71, (byte) 0x59, (byte) 0x6f, (byte) 0x80, (byte) 0xa4, (byte) 0x86, (byte) 0x1e, (byte) 0x3d, (byte) 0x7e, (byte) 0xf5, (byte) 0x4e, (byte) 0x32, (byte) 0x09, (byte) 0x30, (byte) 0x21, (byte) 0x2f, (byte) 0x99, (byte) 0x9b, (byte) 0x9f};
        byte[] actual = DigestUtils.sha3_512(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_uuWp0_jOyu0() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        File data = new File("test.txt");
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithMessageDigestAndOffset_TuPZ6_pSrf0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
        String expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3";
        String actual = DigestUtils.sha1Hex(Arrays.copyOfRange(messageDigest.digest("test".getBytes()), 0, 20));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_with_MessageDigest_JjET1_vcpH0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        String result = digestUtils.digestAsHex(new File("test.txt"));
        assertEquals("expectedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDigest_with_algorithm_and_defaultMessageDigest_Ictz0_vCIF0() throws NoSuchAlgorithmException {
        MessageDigest defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        MessageDigest actual = DigestUtils.getDigest("SHA-256", defaultMessageDigest);
        assertEquals(defaultMessageDigest, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1WithNullData_lKcg2_Uhkv0() {
        String data = null;
        byte[] expected = new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        byte[] actual = DigestUtils.sha1(data);
        Assertions.assertArrayEquals(expected, actual);
    }
}