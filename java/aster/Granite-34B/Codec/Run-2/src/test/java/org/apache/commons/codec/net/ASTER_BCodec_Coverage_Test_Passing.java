/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.apache.commons.codec.binary.Base64;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeException_eYDr1_1() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        String value = "value";
        DecoderException exception = assertThrows(DecoderException.class, () -> bCodec.decode(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNonString_eVfi1() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        Object value = 123;
        try {
            bCodec.decode(value);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_Livi0() throws EncoderException {
        BCodec bCodec = new BCodec();
        String value = "value";
        Object result = bCodec.encode(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonString_hZKF1() throws EncoderException {
        BCodec bCodec = new BCodec();
        Object value = new Object();
        try {
            bCodec.encode(value);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_bytes_is_null_dPnJ0() {
        BCodec bCodec = new BCodec();
        byte[] bytes = null;
        byte[] expected = null;
        byte[] actual = bCodec.doEncoding(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_bytes_not_null_XGSW1() {
        BCodec bCodec = new BCodec();
        byte[] bytes = new byte[]{0, 1, 2, 3};
        byte[] expected = Base64.encodeBase64(bytes);
        byte[] actual = bCodec.doEncoding(bytes);
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedCharsetException_wqOO0() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        String strSource = "source";
        String sourceCharset = "charset";
        try {
            bCodec.encode(strSource, sourceCharset);
            fail("Expected exception: EncoderException");
        } catch (EncoderException e) {
            assertTrue(true);
        }
    }
}