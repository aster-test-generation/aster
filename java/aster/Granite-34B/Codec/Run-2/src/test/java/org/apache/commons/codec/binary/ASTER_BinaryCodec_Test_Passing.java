/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BinaryCodec_Test_Passing {
    private static final byte[] EMPTY_BYTE_ARRAY = new byte[0];

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithNullArray_bFQS0() {
        byte[] array = null;
        assertTrue(BinaryCodec.isEmpty(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithEmptyArray_QKli1() {
        byte[] array = new byte[0];
        assertTrue(BinaryCodec.isEmpty(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithNonEmptyArray_hYki2() {
        byte[] array = new byte[10];
        assertTrue(!BinaryCodec.isEmpty(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtoByteArrayWithNullInput_ATxR1() {
        BinaryCodec binaryCodec = new BinaryCodec();
        String ascii = null;
        byte[] expected = EMPTY_BYTE_ARRAY;
        byte[] actual = binaryCodec.toByteArray(ascii);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyArray_FsFs1() {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] raw = new byte[]{};
        byte[] expected = new byte[]{};
        assertArrayEquals(expected, binaryCodec.encode(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyArray_HsgY1() {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] ascii = new byte[]{};
        byte[] expected = new byte[]{};
        assertArrayEquals(expected, binaryCodec.decode(ascii));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_EmptyArray_MpdY0() {
        byte[] ascii = {};
        byte[] expected = {};
        assertArrayEquals(expected, BinaryCodec.fromAscii(ascii));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_AllZeros_NKls2() {
        byte[] ascii = {'0', '0', '0', '0', '0', '0', '0', '0'};
        byte[] expected = {0};
        assertArrayEquals(expected, BinaryCodec.fromAscii(ascii));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_AllOnes_QbwG3() {
        byte[] ascii = {'1', '1', '1', '1', '1', '1', '1', '1'};
        byte[] expected = {-1};
        assertArrayEquals(expected, BinaryCodec.fromAscii(ascii));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_AlternatingBits_vgsh4() {
        byte[] ascii = {'0', '1', '0', '1', '0', '1', '0', '1'};
        byte[] expected = {85};
        assertArrayEquals(expected, BinaryCodec.fromAscii(ascii));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_NullOrEmptyInput_Byat0_1() {
        char[] input1 = null;
        byte[] expected1 = new byte[0];
        byte[] actual1 = BinaryCodec.fromAscii(input1);
        char[] input2 = new char[0];
        byte[] expected2 = new byte[0];
        byte[] actual2 = BinaryCodec.fromAscii(input2);
        assertArrayEquals(expected1, actual1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_NullOrEmptyInput_Byat0_2() {
        char[] input1 = null;
        byte[] expected1 = new byte[0];
        byte[] actual1 = BinaryCodec.fromAscii(input1);
        char[] input2 = new char[0];
        byte[] expected2 = new byte[0];
        byte[] actual2 = BinaryCodec.fromAscii(input2);
        assertArrayEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_ValidInput_ogmo1_1() {
        char[] input1 = "00000000".toCharArray();
        byte[] expected1 = new byte[]{0x00};
        byte[] actual1 = BinaryCodec.fromAscii(input1);
        char[] input2 = "11111111".toCharArray();
        byte[] expected2 = new byte[]{(byte) 0xFF};
        byte[] actual2 = BinaryCodec.fromAscii(input2);
        char[] input3 = "10101010".toCharArray();
        byte[] expected3 = new byte[]{(byte) 0xAA};
        byte[] actual3 = BinaryCodec.fromAscii(input3);
        assertArrayEquals(expected1, actual1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_ValidInput_ogmo1_2() {
        char[] input1 = "00000000".toCharArray();
        byte[] expected1 = new byte[]{0x00};
        byte[] actual1 = BinaryCodec.fromAscii(input1);
        char[] input2 = "11111111".toCharArray();
        byte[] expected2 = new byte[]{(byte) 0xFF};
        byte[] actual2 = BinaryCodec.fromAscii(input2);
        char[] input3 = "10101010".toCharArray();
        byte[] expected3 = new byte[]{(byte) 0xAA};
        byte[] actual3 = BinaryCodec.fromAscii(input3);
        assertArrayEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_ValidInput_ogmo1_3() {
        char[] input1 = "00000000".toCharArray();
        byte[] expected1 = new byte[]{0x00};
        byte[] actual1 = BinaryCodec.fromAscii(input1);
        char[] input2 = "11111111".toCharArray();
        byte[] expected2 = new byte[]{(byte) 0xFF};
        byte[] actual2 = BinaryCodec.fromAscii(input2);
        char[] input3 = "10101010".toCharArray();
        byte[] expected3 = new byte[]{(byte) 0xAA};
        byte[] actual3 = BinaryCodec.fromAscii(input3);
        assertArrayEquals(expected3, actual3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_InvalidInput_APFA2_2() {
        char[] input1 = "0123456789".toCharArray();
        byte[] expected1 = new byte[0];
        byte[] actual1 = BinaryCodec.fromAscii(input1);
        char[] input2 = new char[]{0x01, 0x02, 0x03};
        byte[] expected2 = new byte[0];
        byte[] actual2 = BinaryCodec.fromAscii(input2);
        assertArrayEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNull_fXgX1() {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] expected = new byte[0];
        assertArrayEquals(expected, binaryCodec.decode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidInput_XIFj3() {
        BinaryCodec binaryCodec = new BinaryCodec();
        try {
            binaryCodec.decode(new Object());
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArrayForBranchCoverage_zUfs4() {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] ascii = new byte[]{65, 66, 67};
        binaryCodec.decode(ascii);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullForBranchCoverage_BpAZ5() {
        BinaryCodec binaryCodec = new BinaryCodec();
        binaryCodec.decode(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidInputForBranchCoverage_YKCr7() {
        BinaryCodec binaryCodec = new BinaryCodec();
        try {
            binaryCodec.decode(new Object());
        } catch (DecoderException e) {
            assertEquals("argument not a byte array", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString_JTyx0() {
        byte[] raw = new byte[0];
        assertEquals("", BinaryCodec.toAsciiString(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString2_FFmk1() {
        byte[] raw = new byte[1];
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString3_Kiuf2() {
        byte[] raw = new byte[2];
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString4_aENQ3() {
        byte[] raw = new byte[3];
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString5_hTHj4() {
        byte[] raw = new byte[4];
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString6_GFQd5() {
        byte[] raw = new byte[5];
        assertEquals("0000000000000000000000000000000000000000", BinaryCodec.toAsciiString(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString7_FVWb6() {
        byte[] raw = new byte[6];
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString8_cnAN7() {
        byte[] raw = new byte[7];
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString9_pGSs8() {
        byte[] raw = new byte[8];
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString12_Vihq11() {
        byte[] raw = new byte[11];
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString13_zJfr12() {
        byte[] raw = new byte[12];
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString14_pjie13() {
        byte[] raw = new byte[13];
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytesWithEmptyArray_cdQI0() {
        byte[] raw = {};
        byte[] expected = {};
        byte[] actual = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytesWithSingleByte_GJec1() {
        byte[] raw = {0x00};
        byte[] expected = {'0', '0', '0', '0', '0', '0', '0', '0'};
        byte[] actual = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_NullOrEmptyInput_Byat0() {
        char[] input1 = null;
        byte[] expected1 = new byte[0];
        byte[] actual1 = BinaryCodec.fromAscii(input1);
        assertArrayEquals(expected1, actual1);
        char[] input2 = new char[0];
        byte[] expected2 = new byte[0];
        byte[] actual2 = BinaryCodec.fromAscii(input2);
        assertArrayEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_ValidInput_ogmo1() {
        char[] input1 = "00000000".toCharArray();
        byte[] expected1 = new byte[]{0x00};
        byte[] actual1 = BinaryCodec.fromAscii(input1);
        assertArrayEquals(expected1, actual1);
        char[] input2 = "11111111".toCharArray();
        byte[] expected2 = new byte[]{(byte) 0xFF};
        byte[] actual2 = BinaryCodec.fromAscii(input2);
        assertArrayEquals(expected2, actual2);
        char[] input3 = "10101010".toCharArray();
        byte[] expected3 = new byte[]{(byte) 0xAA};
        byte[] actual3 = BinaryCodec.fromAscii(input3);
        assertArrayEquals(expected3, actual3);
    }
}