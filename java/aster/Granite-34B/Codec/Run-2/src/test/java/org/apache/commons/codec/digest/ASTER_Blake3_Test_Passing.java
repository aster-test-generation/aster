/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.Arrays;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Blake3_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithNullKey_FlcT0_1() {
        byte[] key = null;
        Throwable exception = assertThrows(NullPointerException.class, () -> Blake3.initKeyedHash(key));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithInvalidKeyLength_nptd1_1() {
        byte[] key = new byte[31];
        Throwable exception = assertThrows(IllegalArgumentException.class, () -> Blake3.initKeyedHash(key));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunction_VvIC0() {
        byte[] kdfContext = new byte[]{1, 2, 3};
        Blake3 blake3 = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(blake3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithEmptyContext_ZcNO2() {
        byte[] kdfContext = new byte[0];
        Blake3 blake3 = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(blake3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithValidContext_NHAk3() {
        byte[] kdfContext = new byte[]{1, 2, 3};
        Blake3 blake3 = Blake3.initKeyDerivationFunction(kdfContext);
        assertEquals(32, blake3.hash(new byte[0]).length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunction_hWLM0() {
        byte[] kdfContext = new byte[10]; // replace with actual value
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithEmptyArgument_EOmf2() {
        byte[] kdfContext = new byte[0]; // replace with actual value
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithRandomArgument_frEz5() {
        byte[] kdfContext = new byte[10]; // replace with actual value
        new Random().nextBytes(kdfContext);
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithMaxArgument_rwuW6() {
        byte[] kdfContext = new byte[10]; // replace with actual value
        Arrays.fill(kdfContext, Byte.MAX_VALUE);
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithMinArgument_bQII7() {
        byte[] kdfContext = new byte[10]; // replace with actual value
        Arrays.fill(kdfContext, Byte.MIN_VALUE);
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithNegativeArgument_kGWE8() {
        byte[] kdfContext = new byte[10]; // replace with actual value
        Arrays.fill(kdfContext, (byte) -1);
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithPositiveArgument_hdHE9() {
        byte[] kdfContext = new byte[10]; // replace with actual value
        Arrays.fill(kdfContext, (byte) 1);
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithZeroArgument_KGWp10() {
        byte[] kdfContext = new byte[10]; // replace with actual value
        Arrays.fill(kdfContext, (byte) 0);
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithHalfArgument_Hzos11() {
        byte[] kdfContext = new byte[10]; // replace with actual value
        Arrays.fill(kdfContext, (byte) 127);
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithFullArgument_SsZI12() {
        byte[] kdfContext = new byte[10]; // replace with actual value
        Arrays.fill(kdfContext, (byte) 255);
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithCustomArgument_fmXv13() {
        byte[] kdfContext = new byte[10];
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalize_ERIw0_beym0() {
        Blake3 blake3 = Blake3.initKeyDerivationFunction(new byte[0]);
        byte[] out = new byte[64];
        int offset = 0;
        int length = 64;
        blake3.doFinalize(out, offset, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithInvalidKeyLength_nptd1() {
        byte[] key = new byte[31];
        Throwable exception = assertThrows(IllegalArgumentException.class, () -> Blake3.initKeyedHash(key));
        assertEquals("Blake3 keys must be 32 bytes", exception.getMessage());
    }
}