/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.StandardCharsets;
import java.nio.charset.UnsupportedCharsetException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuotedPrintableCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrict_jJWE0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "Hello, World!";
        String expected = "Hello, World!";
        assertEquals(expected, codec.encode(sourceStr, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutStrict_gcVm1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(false);
        String sourceStr = "Hello, World!";
        String expected = "Hello, World!";
        assertEquals(expected, codec.encode(sourceStr, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_DIpU0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "test string";
        String result = codec.decode(sourceStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_dFWO1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String sourceStr = "test string";
        String result = codec.decode(sourceStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStrict_KLFx3() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "test string";
        String result = codec.decode(sourceStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest_gWVI0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetWithCharsetTest_XhJI1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetWithCharsetNameTest_SqYD2() throws IllegalCharsetNameException, UnsupportedCharsetException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-16");
        assertEquals("UTF-16", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetWithStrictTest_vtst3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetWithCharsetAndStrictTest_EUbh4() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharset_MbJv0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.defaultCharset());
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithString_xaSB1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        assertEquals(Charset.forName("UTF-8"), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithBoolean_hMEo2() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharsetAndBoolean_yTDq3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.defaultCharset(), true);
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithoutParameter_Xzvm4() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_dISa0() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "This is a test string";
        String sourceCharset = "UTF-8";
        String expected = "This is a test string";
        assertEquals(expected, codec.encode(sourceStr, sourceCharset));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrictMode_MDLO1() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "This is a test string";
        String sourceCharset = "UTF-8";
        String expected = "This is a test string";
        assertEquals(expected, codec.encode(sourceStr, sourceCharset));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStringInput_DWWV2() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "Hello World";
        Object decoded = codec.decode(input);
        assertEquals("Hello World", decoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStrictMode_QrbT4() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String input = "Hello World";
        Object decoded = codec.decode(input);
        assertEquals("Hello World", decoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_FSJm5() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String input = "Hello World";
        Object decoded = codec.decode(input);
        assertEquals("Hello World", decoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_dwpU0() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello, World!";
        String expected = "Hello, World!";
        assertEquals(expected, codec.encode(sourceStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_jjBs1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String sourceStr = "Hello, World!";
        String expected = "Hello, World!";
        assertEquals(expected, codec.encode(sourceStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrictMode_jJcR2() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "Hello, World!";
        String expected = "Hello, World!";
        assertEquals(expected, codec.encode(sourceStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedObjectType_VwTa3_1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object obj = new Object();
        EncoderException exception = assertThrows(EncoderException.class, () -> codec.encode(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_Igqu0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = new byte[]{49, 50, 51};
        byte[] expected = new byte[]{49, 50, 51};
        assertArrayEquals(expected, codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_hfDI1() throws DecoderException, UnsupportedCharsetException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        byte[] input = new byte[]{49, 50, 51};
        byte[] expected = new byte[]{49, 50, 51};
        assertArrayEquals(expected, codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStrictMode_qNkJ2() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        byte[] input = new byte[]{49, 50, 51};
        byte[] expected = new byte[]{49, 50, 51};
        assertArrayEquals(expected, codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_yifm0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "Hello, World!".getBytes();
        byte[] expected = "Hello, World!".getBytes();
        assertArrayEquals(expected, codec.encodeQuotedPrintable(null, input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithStrictMode_bqzo1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "Hello, World!".getBytes();
        byte[] expected = "Hello, World!".getBytes();
        assertArrayEquals(expected, codec.encodeQuotedPrintable(null, input, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithCustomCharset_BtRJ2() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        byte[] input = "Hello, World!".getBytes();
        byte[] expected = "Hello, World!".getBytes();
        assertArrayEquals(expected, codec.encodeQuotedPrintable(null, input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithCustomCharsetAndStrictMode_Jndg3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        byte[] input = "Hello, World!".getBytes();
        byte[] expected = "Hello, World!".getBytes();
        assertArrayEquals(expected, codec.encodeQuotedPrintable(null, input, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_mqeL0() throws DecoderException, UnsupportedEncodingException {
        final QuotedPrintableCodec codec = new QuotedPrintableCodec();
        final String sourceStr = "This is a test";
        final String sourceCharset = "UTF-8";
        final String expected = "This is a test";
        final String actual = codec.decode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_FDjv1() throws DecoderException, UnsupportedEncodingException {
        final QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        final String sourceStr = "This is a test";
        final String sourceCharset = "UTF-8";
        final String expected = "This is a test";
        final String actual = codec.decode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetAndStrict_xyVK2() throws DecoderException, UnsupportedEncodingException {
        final QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        final String sourceStr = "This is a test";
        final String sourceCharset = "UTF-8";
        final String expected = "This is a test";
        final String actual = codec.decode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetName_dXrt3() throws DecoderException, UnsupportedEncodingException {
        final QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        final String sourceStr = "This is a test";
        final String sourceCharset = "UTF-8";
        final String expected = "This is a test";
        final String actual = codec.decode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStrict_RXrj5() throws DecoderException, UnsupportedEncodingException {
        final QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        final String sourceStr = "This is a test";
        final String sourceCharset = "UTF-8";
        final String expected = "This is a test";
        final String actual = codec.decode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSourceStrNull_efmt6() throws DecoderException, UnsupportedEncodingException {
        final QuotedPrintableCodec codec = new QuotedPrintableCodec();
        final String sourceStr = null;
        final String sourceCharset = "UTF-8";
        final String expected = null;
        final String actual = codec.decode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableBitSetByteArrayBoolean0_nnki0() throws Exception {
        final BitSet printable = null;
        final byte[] bytes = null;
        final boolean strict = false;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableBitSetByteArrayBoolean1_cbUr1() throws Exception {
        final BitSet printable = null;
        final byte[] bytes = new byte[0];
        final boolean strict = false;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        Assertions.assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableBitSetByteArrayBoolean4_LXWe4() throws Exception {
        final BitSet printable = null;
        final byte[] bytes = null;
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableBitSetByteArrayBoolean8_kHKi8() throws Exception {
        final BitSet printable = new BitSet();
        final byte[] bytes = null;
        final boolean strict = false;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableBitSetByteArrayBoolean9_fTNv9() throws Exception {
        final BitSet printable = new BitSet();
        final byte[] bytes = new byte[0];
        final boolean strict = false;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        Assertions.assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetAndStrictMode_UHwF6_FCeS0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        String input = "Hello World";
        Object decoded = codec.decode(input);
        assertEquals("Hello World", decoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetAndStrictMode_qgRq3_mGPE0() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        String sourceStr = "Hello, World!";
        String expected = "Hello, World!";
        assertEquals(expected, codec.encode(sourceStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullObject_TNmm0_ptrL0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object obj = null;
        Object result = null;
        try {
            result = codec.encode(obj);
        } catch (EncoderException e) {
            fail("Unexpected exception");
        }
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetAndStrict_cXgz2_rciC0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_8, true);
        String sourceStr = "test string";
        String result = codec.decode(sourceStr);
        assertEquals(sourceStr, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_XWva0_EvyM0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = null;
        byte[] expected = null;
        byte[] actual = codec.decode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedObjectType_VwTa3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object obj = new Object();
        EncoderException exception = assertThrows(EncoderException.class, () -> codec.encode(obj));
        assertEquals("Objects of type " + obj.getClass().getName() + " cannot be quoted-printable encoded", exception.getMessage());
    }
}