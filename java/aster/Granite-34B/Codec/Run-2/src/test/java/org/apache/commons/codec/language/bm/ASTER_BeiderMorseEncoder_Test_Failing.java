/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BeiderMorseEncoder_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuleType_RULES_KIxK2() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setRuleType(RuleType.RULES);
        assertEquals(RuleType.RULES, encoder.getRuleType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_HAMp0() throws EncoderException {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String source = "Hello, World!";
        String expected = ".... . .-.. .-.. ---  .-- --- .-. .-.. -..";
        assertEquals(expected, encoder.encode(source));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNumbers_myVl1() throws EncoderException {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String source = "12345";
        String expected = "..--- ...-- ..--- ..--- ...--";
        assertEquals(expected, encoder.encode(source));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameTypeTest_withNullNameType_znHY3() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        NameType nameType = null;
        assertEquals(nameType, encoder.getNameType());
    }
}