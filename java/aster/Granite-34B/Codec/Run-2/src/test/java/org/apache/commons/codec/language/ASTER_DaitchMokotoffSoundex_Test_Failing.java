/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DaitchMokotoffSoundex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_1_TLGf0() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String source = "Ashcraft";
        String expected = "A261";
        String actual = soundex.soundex(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_2_ydXe1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String source = "Ashcroft";
        String expected = "A261";
        String actual = soundex.soundex(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_lguH0_1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("0000", soundex.soundex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_lguH0_2() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("0000", soundex.soundex(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_lguH0_3() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("W630", soundex.soundex("Woonsocket"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithFolding_jxIV1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
        assertEquals("W630", soundex.soundex("Woonsocket"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithBranching_ALVF2() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("W630|W630", soundex.soundex("Woonsocket"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_vIFe0_1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("0000", soundex.encode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_vIFe0_2() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("0000", soundex.encode(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_vIFe0_3() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("0000", soundex.encode("  \t\n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_vIFe0_4() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("A000", soundex.encode("A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_vIFe0_5() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("A000", soundex.encode("A\n"));
    }
}