/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Sha2Crypt_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithRandomSalt_FUGh1() {
        byte[] keyBytes = "password".getBytes();
        String expected = "$6$fvnGAvZv$aNPh0KkG3Xb2ui6sLWbPPEfIb9TFNiDT5tT8ArUVShB1rQqKK4u30W4n/Vov0KBgM.iKLzqiQBcsOyvtHGNDb.";
        assertEquals(expected, Sha2Crypt.sha512Crypt(keyBytes, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_IgIW0() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String expected = "$5$vktAO3DJ$WNGFCacAqNyW1IFl9hE6/wpnFRJ5SVDC23agkE/UFa/";
        String actual = Sha2Crypt.sha256Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithSalt_ArXE2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String salt = "usesomesillystri";
        String expected = "$5$rounds=60000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21";
        String actual = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_TUQv0() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String expected = "$6$6GGAU0tZ$WMv/lWq6PkZJbLPQJ81AlfinM0B/3jwbcXrL9I5yLc7tNsqnNCx1CRaSL5DpfpRliT2X18ojeT0ALBbl62c9Q0";
        String actual = Sha2Crypt.sha512Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithPrefix_WaFX2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String prefix = "test";
        String expected = "$6$test$rounds=656000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21";
        String actual = Sha2Crypt.sha512Crypt(keyBytes, prefix);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithNoSalt_OPhY1_rpTX0() {
        byte[] keyBytes = "password".getBytes();
        String expected = "$5$o0bzVcwi$41tD5otsZzYIb1dHtyM1.9SniHhQJsF05gBtPKifiY9";
        assertEquals(expected, Sha2Crypt.sha256Crypt(keyBytes, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithRounds_sfpb1_Pkbw0() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String expected = "$5$rounds=10000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21";
        String actual = Sha2Crypt.sha256Crypt(keyBytes, "10000");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithSalt_XhcQ1_fid2() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$6$12345678$";
        String result = Sha2Crypt.sha512Crypt(keyBytes, salt, new Random());
        assertEquals(128, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_aelb0_fid2() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$6$rounds=5000$usesomesillystri$";
        String expected = "$6$rounds=5000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21";
        assertEquals(expected, Sha2Crypt.sha512Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithRandomSalt_FUGh1_fid2() {
        byte[] keyBytes = "password".getBytes();
        String expected = "$6$rounds=5000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21";
        assertEquals(expected, Sha2Crypt.sha512Crypt(keyBytes, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_IgIW0_fid2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String expected = "$5$rounds=60000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21";
        String actual = Sha2Crypt.sha256Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_TUQv0_fid2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String expected = "$6$rounds=656000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21";
        String actual = Sha2Crypt.sha512Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithNoSalt_OPhY1_rpTX0_fid3() {
        byte[] keyBytes = "password".getBytes();
        String expected = "$5$rounds=5000$usesomesillystringforsalt$D4G5f18o79A3G.SpecIFic.S0ft.W0rd";
        assertEquals(expected, Sha2Crypt.sha256Crypt(keyBytes, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_emtY0_OXZf0_fid3() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$12345678$";
        String expected = "$5$12345678$5B8vYYiY.CVt1RPanelsMQ.i";
        assertEquals(expected, Sha2Crypt.sha256Crypt(keyBytes, salt));
    }
}