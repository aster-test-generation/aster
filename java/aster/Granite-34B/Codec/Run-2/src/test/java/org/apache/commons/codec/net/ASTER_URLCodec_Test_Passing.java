/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getEncoding_1_ZjbJ0() {
        URLCodec urlCodec = new URLCodec("UTF-8");
        assertEquals("UTF-8", urlCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getEncoding_2_CXcW1() {
        URLCodec urlCodec = new URLCodec();
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_PwdJ0() throws DecoderException {
        final String charset = "UTF-8";
        final String str = "Hello World";
        final URLCodec codec = new URLCodec(charset);
        assertEquals(str, codec.decode(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithoutCharset_hXWY1() throws DecoderException {
        final String str = "Hello World";
        final URLCodec codec = new URLCodec();
        assertEquals(str, codec.decode(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_hZIJ0() {
        URLCodec urlCodec = new URLCodec("UTF-8");
        assertEquals("UTF-8", urlCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_nkvp0() throws Exception {
        final String charset = "UTF-8";
        final String str = "Hello World";
        final URLCodec codec = new URLCodec(charset);
        final String encoded = codec.encode(str);
        assertEquals("Hello+World", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutCharset_lZTX1() throws Exception {
        final String str = "Hello World";
        final URLCodec codec = new URLCodec();
        final String encoded = codec.encode(str);
        assertEquals("Hello+World", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_eCVq0() throws DecoderException, UnsupportedEncodingException {
        URLCodec codec = new URLCodec("UTF-8");
        String input = "Hello%20World";
        String expected = "Hello World";
        String actual = codec.decode(input, "UTF-8");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithInvalidPercentSign_RgKl3() {
        final byte[] bytes = "a%2g".getBytes();
        final DecoderException exception = assertThrows(DecoderException.class, () -> URLCodec.decodeUrl(bytes));
        final String expectedMessage = "Invalid URL encoding: ";
        final String actualMessage = exception.getMessage();
        assert actualMessage.contains(expectedMessage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithInvalidPercentSign2_ALAf4() {
        final byte[] bytes = "a%2".getBytes();
        final DecoderException exception = assertThrows(DecoderException.class, () -> URLCodec.decodeUrl(bytes));
        final String expectedMessage = "Invalid URL encoding: ";
        final String actualMessage = exception.getMessage();
        assert actualMessage.contains(expectedMessage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_DZCw0() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String encodedString = urlCodec.encode("Hello World", "UTF-8");
        assertEquals("Hello+World", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutCharset_tjJZ1() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String encodedString = urlCodec.encode("Hello World", "US-ASCII");
        assertEquals("Hello+World", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNullString_YQUV2() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String encodedString = urlCodec.encode(null, "UTF-8");
        assertTrue(encodedString == null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInvalidcharset_VmPu4() {
        URLCodec urlCodec = new URLCodec();
        try {
            urlCodec.encode("Hello World", "Invalid-Charset");
        } catch (UnsupportedEncodingException e) {
            assertEquals("Invalid-Charset", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithNullBytes_BYdS0() {
        assertArrayEquals(null, URLCodec.encodeUrl(null, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithEmptyBytes_NnDc1() {
        assertArrayEquals(new byte[0], URLCodec.encodeUrl(null, new byte[0]));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlsafeAndBytes_TXJT2() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] bytes = new byte[]{'a', 'b', 'c'};
        assertArrayEquals(new byte[]{'a', 'b', 'c'}, URLCodec.encodeUrl(urlsafe, bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithBytes_xEDZ3() {
        byte[] bytes = new byte[]{'a', 'b', 'c'};
        assertArrayEquals(new byte[]{'a', 'b', 'c'}, URLCodec.encodeUrl(null, bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_RjEr0_JBQu0() throws DecoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        byte[] expected = {0x41, 0x42, 0x43};
        byte[] actual = urlCodec.decode("ABC".getBytes());
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNoCharset_DjlK1_GvYb0() throws DecoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] expected = {0x41, 0x42, 0x43};
        byte[] actual = urlCodec.decode("ABC".getBytes());
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithNull_OJPb0_nJER0() {
        final byte[] bytes = null;
        final byte[] actual;
        try {
            actual = URLCodec.decodeUrl(bytes);
        } catch (final DecoderException e) {
            fail("An unexpected exception occurred.", e);
            return;
        }
        final byte[] expected = null;
        assertArrayEquals(expected, actual);
    }
}