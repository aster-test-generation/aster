/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base32_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithOneByteInput_BYaA1_2() {
        final byte[] input = {0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithTwoBytesInput_Zuhx2_2() {
        final byte[] input = {0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithTwoBytesInput_Zuhx2_3() {
        final byte[] input = {0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithThreeBytesInput_gzIP3_2() {
        final byte[] input = {0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithThreeBytesInput_gzIP3_3() {
        final byte[] input = {0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithThreeBytesInput_gzIP3_4() {
        final byte[] input = {0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_0_kZIS0_fid2() {
        Base32 base32 = new Base32();
        byte octet = 0;
        boolean result = base32.isInAlphabet(octet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_1_QrVY1_fid2() {
        Base32 base32 = new Base32();
        byte octet = 1;
        boolean result = base32.isInAlphabet(octet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_2_DQsq2_fid2() {
        Base32 base32 = new Base32();
        byte octet = 2;
        boolean result = base32.isInAlphabet(octet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_3_OSuX3_fid2() {
        Base32 base32 = new Base32();
        byte octet = 3;
        boolean result = base32.isInAlphabet(octet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator6_qRBO5() {
        Base32 base32 = new Base32(10);
        assertArrayEquals(null, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithTwoBytesInput_Zuhx2_1() {
        final byte[] input = {0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithThreeBytesInput_gzIP3_1() {
        final byte[] input = {0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithFourBytesInput_TQPf4_1_fid2() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(4, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithFourBytesInput_TQPf4_2() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithFourBytesInput_TQPf4_3() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithFourBytesInput_TQPf4_4() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithFourBytesInput_TQPf4_5() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithFiveBytesInput_geqn5_1() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(5, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithFiveBytesInput_geqn5_2() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithFiveBytesInput_geqn5_3() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithFiveBytesInput_geqn5_4() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithFiveBytesInput_geqn5_5() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithFiveBytesInput_geqn5_6() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSixBytesInput_xsFA6_1() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(6, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSixBytesInput_xsFA6_2() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSixBytesInput_xsFA6_3() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSixBytesInput_xsFA6_4() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSixBytesInput_xsFA6_5() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSixBytesInput_xsFA6_6() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSixBytesInput_xsFA6_7() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(0x00, result[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithOneByteInput_BYaA1() {
        final byte[] input = {0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(1, result.length);
        Assertions.assertEquals(0x00, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithTwoBytesInput_Zuhx2() {
        final byte[] input = {0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(2, result.length);
        Assertions.assertEquals(0x00, result[0]);
        Assertions.assertEquals(0x00, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithThreeBytesInput_gzIP3() {
        final byte[] input = {0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(3, result.length);
        Assertions.assertEquals(0x00, result[0]);
        Assertions.assertEquals(0x00, result[1]);
        Assertions.assertEquals(0x00, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithFourBytesInput_TQPf4() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(4, result.length);
        Assertions.assertEquals(0x00, result[0]);
        Assertions.assertEquals(0x00, result[1]);
        Assertions.assertEquals(0x00, result[2]);
        Assertions.assertEquals(0x00, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithFiveBytesInput_geqn5() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(5, result.length);
        Assertions.assertEquals(0x00, result[0]);
        Assertions.assertEquals(0x00, result[1]);
        Assertions.assertEquals(0x00, result[2]);
        Assertions.assertEquals(0x00, result[3]);
        Assertions.assertEquals(0x00, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSixBytesInput_xsFA6() {
        final byte[] input = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        final Base32 base32 = new Base32();
        final byte[] result = base32.decode(input);
        Assertions.assertEquals(6, result.length);
        Assertions.assertEquals(0x00, result[0]);
        Assertions.assertEquals(0x00, result[1]);
        Assertions.assertEquals(0x00, result[2]);
        Assertions.assertEquals(0x00, result[3]);
        Assertions.assertEquals(0x00, result[4]);
        Assertions.assertEquals(0x00, result[5]);
    }
}