/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.security.MessageDigest;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DigestUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_PupM0() {
        DigestUtils digestUtils = new DigestUtils("SHA");
        String data = "test";
        byte[] result = digestUtils.sha(data);
        byte[] expected = digestUtils.sha1(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_KLdv0() {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getSha1Digest();
        assertEquals(messageDigest.getAlgorithm(), "SHA-1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_biYI2() {
        DigestUtils digestUtils = new DigestUtils("SHA-1");
        MessageDigest messageDigest = digestUtils.getSha1Digest();
        assertEquals(messageDigest.getAlgorithm(), "SHA-1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_DAAc0() {
        DigestUtils digestUtils = new DigestUtils();
        String messageDigestAlgorithm = "SHA-256";
        boolean actual = DigestUtils.isAvailable(messageDigestAlgorithm);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable2_hVnH1() {
        DigestUtils digestUtils = new DigestUtils();
        String messageDigestAlgorithm = "SHA-1";
        boolean actual = DigestUtils.isAvailable(messageDigestAlgorithm);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable3_doNH2() {
        DigestUtils digestUtils = new DigestUtils();
        String messageDigestAlgorithm = "SHA-384";
        boolean actual = DigestUtils.isAvailable(messageDigestAlgorithm);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable4_HlNd3() {
        DigestUtils digestUtils = new DigestUtils();
        String messageDigestAlgorithm = "SHA-512";
        boolean actual = DigestUtils.isAvailable(messageDigestAlgorithm);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable5_LxCQ4() {
        DigestUtils digestUtils = new DigestUtils();
        String messageDigestAlgorithm = "SHA-224";
        boolean actual = DigestUtils.isAvailable(messageDigestAlgorithm);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_sha_9_GhYS8() {
        byte[] data = new byte[1000000000];
        DigestUtils digestUtils = new DigestUtils("SHA");
        byte[] result = digestUtils.sha(data);
        byte[] expected = new byte[20];
        assertEquals(expected, result);
    }
}