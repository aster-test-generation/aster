/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNull_McWj0() throws DecoderException {
        QCodec qCodec = new QCodec();
        Object result = qCodec.decode(null);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getEncoding_QCodecWithCharset_ReturnsCorrectEncoding_nNQU0() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        assertEquals("Q", qCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getEncoding_QCodecWithString_ReturnsCorrectEncoding_VAsx1() {
        QCodec qCodec = new QCodec("UTF-8");
        assertEquals("Q", qCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getEncoding_QCodecWithoutParameters_ReturnsCorrectEncoding_wznZ2() {
        QCodec qCodec = new QCodec();
        assertEquals("Q", qCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanks_GWtP0() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanks2_Iqba1() {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        qCodec.setEncodeBlanks(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanks3_dcoW2() {
        QCodec qCodec = new QCodec("UTF-8");
        qCodec.setEncodeBlanks(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_NvGX1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String input = null;
        String expected = null;
        assertEquals(expected, qCodec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNull_yopO2() {
        QCodec qCodec = new QCodec();
        byte[] bytes = null;
        byte[] expected = null;
        assertArrayEquals(expected, qCodec.doEncoding(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithEmptyArray_AcWA3() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[0];
        byte[] expected = new byte[0];
        assertArrayEquals(expected, qCodec.doEncoding(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithNoUnderscores_llgD1_viUu0() throws DecoderException {
        QCodec qCodec = new QCodec();
        byte[] inputBytes = "This is a test".getBytes();
        byte[] expectedBytes = "This is a test".getBytes();
        byte[] decodedBytes = qCodec.doDecoding(inputBytes);
        assertArrayEquals(expectedBytes, decodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithUnderscores_DrUh2_fuMQ0() throws DecoderException {
        QCodec qCodec = new QCodec();
        byte[] inputBytes = "This_is_a_test".getBytes();
        byte[] expectedBytes = "This is a test".getBytes();
        byte[] decodedBytes = qCodec.doDecoding(inputBytes);
        assertArrayEquals(expectedBytes, decodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithEmptyInput_zdxQ5_FKHE0() throws DecoderException {
        QCodec qCodec = new QCodec();
        byte[] inputBytes = new byte[0];
        byte[] expectedBytes = new byte[0];
        byte[] decodedBytes = qCodec.doDecoding(inputBytes);
        assertArrayEquals(expectedBytes, decodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithCustomCharset_cMhe4_gAht0() throws DecoderException {
        QCodec qCodec = new QCodec(StandardCharsets.UTF_16);
        byte[] inputBytes = "This is a test".getBytes(StandardCharsets.UTF_16);
        byte[] expectedBytes = "This is a test".getBytes(StandardCharsets.UTF_16);
        byte[] decodedBytes = qCodec.doDecoding(inputBytes);
        assertArrayEquals(expectedBytes, decodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_vtJh0_fid1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "source string";
        assertEquals("=?UTF-8?Q?source string?=", qCodec.encode(sourceStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_kfQm1_fid1() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "source string";
        assertEquals("=?UTF-8?Q?source string?=", qCodec.encode(sourceStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetObj_BFFT2_fid1() throws EncoderException {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        String sourceStr = "source string";
        assertEquals("=?UTF-8?Q?source string?=", qCodec.encode(sourceStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidCharset_hXtj1_fid1() {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            qCodec.encode("Hello, World!", "InvalidCharset");
            fail("Expected EncoderException");
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedCharset_PCVx4_fid1() {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            qCodec.encode("Hello, World!", "UnsupportedCharset");
            fail("Expected EncoderException");
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_YuYo0_fid1() throws DecoderException {
        QCodec qCodec = new QCodec();
        String str = "test";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode2_LjVP1_fid1() throws DecoderException {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        String str = "test";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode3_pqEi2_fid1() throws DecoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String str = "test";
    }
}