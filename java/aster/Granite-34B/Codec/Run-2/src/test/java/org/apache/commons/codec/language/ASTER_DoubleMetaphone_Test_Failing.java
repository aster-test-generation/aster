/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DoubleMetaphone_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Yvdy1_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("ABC", doubleMetaphone.doubleMetaphone("ABC", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Yvdy1_2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("XYZ", doubleMetaphone.doubleMetaphone("XYZ", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_AKpF0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = true;
        String expected = "primary";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_FAcf1_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("T500", doubleMetaphone.doubleMetaphone("test", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_FAcf1_2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("T500", doubleMetaphone.doubleMetaphone("TEST", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_FAcf1_3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("T500", doubleMetaphone.doubleMetaphone("tEst", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_FAcf1_4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("T500", doubleMetaphone.doubleMetaphone("t3st", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_FAcf1_5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("T500", doubleMetaphone.doubleMetaphone("t3st", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxCodeLen_QznJ0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        int expected = 0; // Replace with the expected value
        int actual = doubleMetaphone.getMaxCodeLen();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_WwDe0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = true;
        String expected = "KNTS";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEmptyInput_WhPW3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "";
        boolean alternate = true;
        String expected = "";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_tdGQ0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("encodedValue", doubleMetaphone.encode("inputValue"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_QhPB1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("", doubleMetaphone.encode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyInput_DsQe2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("", doubleMetaphone.encode(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_ppEt0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = true;
        String expected = "tet";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsWithValidInput_OTBV0() {
        String value = "example";
        int start = 0;
        int length = 6;
        String[] criteria = {"ex", "ampl", "e"};
        assertTrue(DoubleMetaphone.contains(value, start, length, criteria));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsWithNegativeLength_klfF4() {
        String value = "example";
        int start = 0;
        int length = -1;
        String[] criteria = {"ex", "ampl", "e"};
        assertFalse(DoubleMetaphone.contains(value, start, length, criteria));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_FRok0() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "test";
        String expected = "test";
        String actual = d.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone1_DCao1() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "test";
        String expected = "test";
        String actual = d.doubleMetaphone(value, true);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_0_HxJH0()
    {
        String value = "value";
        boolean alternate = true;
        String expected = "expected";
        String actual = new DoubleMetaphone().doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_1_HGxk1()
    {
        String value = "value";
        boolean alternate = false;
        String expected = "expected";
        String actual = new DoubleMetaphone().doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone2_gdZL1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = false;
        String expected = "KNTS";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_2_TXXE1() {
        String value = "E";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("E", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_3_mFrT2() {
        String value = "I";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("I", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_4_dtFJ3() {
        String value = "O";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("O", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_5_eGJt4() {
        String value = "U";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("U", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_6_UyJv5() {
        String value = "Y";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("Y", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_12_ypCw11() {
        String value = "H";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("H", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_0_UUiY0() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "value";
        boolean alternate = true;
        String expected = "expected";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_1_HrUf1() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "value";
        boolean alternate = false;
        String expected = "expected";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_0_MnLO0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = true;
        String expected = "T3ST";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_1_hkCy1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = false;
        String expected = "T3ST";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_yhoT0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone2_inpP1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_0_mVVd0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "";
        boolean alternate = false;
        String expected = "";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_3_uDwA3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "AE";
        boolean alternate = false;
        String expected = "E";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_4_olPg4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "AEIO";
        boolean alternate = false;
        String expected = "EIO";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_5_EKro5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "AEIOU";
        boolean alternate = false;
        String expected = "EIOU";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_6_gydA6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "AEIOUY";
        boolean alternate = false;
        String expected = "EIOU";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_11_BHKb10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Y";
        boolean alternate = true;
        String expected = "Y";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_String_boolean_001_xAza0_EzKY0() throws Exception {
        String value = "DoubleMetaphone";
        boolean alternate = false;
        String expected = "DTLMNTF";
        String actual = new DoubleMetaphone().doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_String_boolean_002_YGpA1_gOxD0() throws Exception {
        String value = "DoubleMetaphone";
        boolean alternate = true;
        String expected = "DTLMNTF";
        String actual = new DoubleMetaphone().doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_lxRS0_LeWZ0() {
        String value = "test";
        boolean alternate = true;
        String expected = "t3st";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Yvdy1_2_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("SS", doubleMetaphone.doubleMetaphone("SS", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Yvdy1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("ABC", doubleMetaphone.doubleMetaphone("ABC", true));
        assertEquals("XYZ", doubleMetaphone.doubleMetaphone("XYZ", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_FAcf1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("T500", doubleMetaphone.doubleMetaphone("test", false));
        assertEquals("T500", doubleMetaphone.doubleMetaphone("TEST", false));
        assertEquals("T500", doubleMetaphone.doubleMetaphone("tEst", false));
        assertEquals("T500", doubleMetaphone.doubleMetaphone("t3st", false));
        assertEquals("T500", doubleMetaphone.doubleMetaphone("t3st", true));
    }
}