/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Soundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_MOsY0() throws EncoderException {
        Soundex soundex = new Soundex();
        String input = "example";
        Object result = soundex.encode(input);
        assertEquals("E251", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_HnJg0_1() {
        Soundex soundex = new Soundex();
        assertEquals("S530", soundex.encode("Smith"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_HnJg0_2() {
        Soundex soundex = new Soundex();
        assertEquals("W452", soundex.encode("Williams"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithNullInput_ReturnsNull_Jhgl0() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithEmptyInput_ReturnsEmpty_ExoE1() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithSingleLetterInput_ReturnsSingleLetter_jWSP2() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("A");
        assertEquals("A000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength_PuCX4() {
        Soundex soundex = new Soundex();
        assertEquals(4, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithMapping_VomB1_fid1() {
        Soundex soundex = new Soundex("mapping");
        assertEquals(4, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithMappingAndSpecialCaseHW_jTFo2_fid1() {
        Soundex soundex = new Soundex("mapping", true);
        assertEquals(4, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithMappingArray_ukLM3_fid1() {
        Soundex soundex = new Soundex(new char[]{'a', 'b', 'c'});
        assertEquals(4, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_HnJg0_3_fid1() {
        Soundex soundex = new Soundex();
        assertEquals("J520", soundex.encode("Jones"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_HnJg0_4_fid1() {
        Soundex soundex = new Soundex();
        assertEquals("M460", soundex.encode("Miller"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_HnJg0_5_fid1() {
        Soundex soundex = new Soundex();
        assertEquals("R152", soundex.encode("Robinson"));
    }

    @Test
    @Timeout(value = 4, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_bzbE0_fid1() throws EncoderException {
        Soundex soundex = new Soundex();
        String s1 = "hello";
        String s2 = "hallo";
        int expected = 4;
        int actual = soundex.difference(s1, s2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithTwoSimilarLetters_ReturnsSimilarDigits_AErY3_fid1() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("AA");
        assertEquals("A000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithThreeSimilarLetters_ReturnsSimilarDigits_yefR4_fid1() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("AAA");
        assertEquals("A000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithFourSimilarLetters_ReturnsSimilarDigits_BZUt5_fid1() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("AAAA");
        assertEquals("A000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithFiveSimilarLetters_ReturnsSimilarDigits_SkjO6_fid1() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("AAAAA");
        assertEquals("A000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithThreeDifferentLetters_ReturnsDifferentDigits_QEnz7_fid1() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABC");
        assertEquals("A120", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithThreeSimilarAndOneDifferentLetter_ReturnsSimilarAndDifferentDigits_ZnTS8_fid1() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("AAB");
        assertEquals("A100", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithThreeSimilarAndOneDifferentLetterAndOneSilentMarker_ReturnsSimilarAndDifferentDigits_xuMk9_fid1() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("AA0");
        assertEquals("A000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithThreeSimilarAndOneDifferentLetterAndOneSpecialCaseHW_ReturnsSimilarAndDifferentDigits_VQVr10_thVN0_fid1() {
        Soundex soundex = new Soundex("012301200224", true);
        String result = soundex.soundex("AA0HW");
        assertEquals("A000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithThreeSimilarAndOneDifferentLetterAndOneSpecialCaseHWAndOneSilentMarker_ReturnsSimilarAndDifferentDigits_ktMY11_CuHx0_fid1() {
        Soundex soundex = new Soundex("012301200224", true);
        String result = soundex.soundex("AA0HW0");
        assertEquals("A000", result);
    }
}