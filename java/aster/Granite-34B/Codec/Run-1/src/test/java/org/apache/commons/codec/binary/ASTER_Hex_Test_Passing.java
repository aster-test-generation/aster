/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Hex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithOddNumberOfCharacters_NnSa1() {
        char[] data = new char[]{'a', 'b', 'c', 'd', 'e', 'f', 'g'};
        byte[] out = new byte[3];
        int outOffset = 1;
        try {
            Hex.decodeHex(data, out, outOffset);
        } catch (DecoderException e) {
            assertEquals("Odd number of characters.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithInsufficientOutputArraySize_bQTq2() {
        char[] data = new char[]{'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] out = new byte[2];
        int outOffset = 1;
        try {
            Hex.decodeHex(data, out, outOffset);
        } catch (DecoderException e) {
            assertEquals("Output array is not large enough to accommodate decoded data.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithLineCoverage_fiQu2() {
        byte[] data = new byte[]{0x00, 0x0F, (byte) 0xF0, (byte) 0xFF};
        char[] encoded = Hex.encodeHex(data);
        assert encoded.length == 8;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_kXhv0() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F, (byte) 0xFF};
        char[] expected = new char[]{'0', '0', '0', 'f', '3', 'f', 'f', 'f'};
        char[] actual = Hex.encodeHex(data, 0, data.length, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithCustomCase_CkNr2() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F, (byte) 0xFF};
        char[] expected = new char[]{'0', '0', '0', 'F', '3', 'F', 'F', 'F'};
        char[] actual = Hex.encodeHex(data, 0, data.length, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_lASh0() {
        Hex hex = new Hex("UTF-8");
        ByteBuffer array = ByteBuffer.allocate(10);
        byte[] result = hex.encode(array);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_ygzC1() {
        Hex hex = new Hex("UTF-16");
        ByteBuffer array = ByteBuffer.allocate(10);
        byte[] result = hex.encode(array);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_Okic2() {
        Hex hex = new Hex();
        ByteBuffer array = ByteBuffer.allocate(10);
        byte[] result = hex.encode(array);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_BIuz0() throws EncoderException {
        final Hex hex = new Hex("UTF-8");
        final Object object = "Hello, World!";
        final Object encodedObject = hex.encode(object);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitWithDecoderException_UzgK1_1() {
        DecoderException exception = assertThrows(DecoderException.class, () -> Hex.toDigit('g', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithInvalidLength_kjEh1_1() {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E'};
        DecoderException exception = assertThrows(DecoderException.class, () -> Hex.decodeHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithInvalidCharacter_wgcl2_1() {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'G'};
        DecoderException exception = assertThrows(DecoderException.class, () -> Hex.decodeHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStandardCharset_cpDv0() throws DecoderException {
        final Hex hex = new Hex(StandardCharsets.UTF_8);
        final ByteBuffer buffer = ByteBuffer.wrap("48656C6C6F".getBytes());
        final byte[] expected = "Hello".getBytes();
        assertArrayEquals(expected, hex.decode(buffer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyBuffer_TfUD2() throws DecoderException {
        final Hex hex = new Hex();
        final ByteBuffer buffer = ByteBuffer.allocate(0);
        final byte[] expected = new byte[0];
        assertArrayEquals(expected, hex.decode(buffer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_hRlW0() {
        final String charsetName = "UTF-8";
        final Hex hex = new Hex(charsetName);
        assertEquals(charsetName, hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_wzeL1() {
        final String charsetName = "UTF-16";
        final Hex hex = new Hex(charsetName);
        assertEquals(charsetName, hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_fFLi2() {
        final String charsetName = "UTF-32";
        final Hex hex = new Hex(charsetName);
        assertEquals(charsetName, hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_SDNX4() {
        final String charsetName = "ISO-8859-1";
        final Hex hex = new Hex(charsetName);
        assertEquals(charsetName, hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_EsKp0() {
        ByteBuffer data = ByteBuffer.allocate(10);
        String result = Hex.encodeHexString(data);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString2_pjPT1() {
        ByteBuffer data = ByteBuffer.allocate(10);
        String result = Hex.encodeHexString(data);
        Assertions.assertEquals(result.length(), 20);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString10_QTbZ9() {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put((byte) 0x00);
        data.put((byte) 0xFF);
        String result = Hex.encodeHexString(data);
        Assertions.assertEquals(result, "0000000000000000");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithString_aDuw1() {
        final String charsetName = "UTF-8";
        final Hex hex = new Hex(charsetName);
        assertEquals(Charset.forName(charsetName), hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithoutParameter_Vzvr2() {
        final Hex hex = new Hex();
        assertEquals(Charset.defaultCharset(), hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_UHlI0() throws DecoderException {
        String data = "48656C6C6F";
        byte[] expected = "Hello".getBytes();
        assertArrayEquals(expected, Hex.decodeHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithCharsetObj_UrjQ2() throws DecoderException {
        String data = "48656C6C6F";
        Charset charset = Charset.forName("UTF-8");
        byte[] expected = "Hello".getBytes(charset);
        assertArrayEquals(expected, new Hex(charset).decodeHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithEmptyData_XNiQ3() throws DecoderException {
        String data = "";
        byte[] expected = new byte[0];
        assertArrayEquals(expected, Hex.decodeHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_HSzS0() {
        ByteBuffer data = ByteBuffer.allocate(10);
        char[] result = Hex.encodeHex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithCharset_kvuk1() {
        ByteBuffer data = ByteBuffer.allocate(10);
        Hex hex = new Hex("UTF-8");
        char[] result = hex.encodeHex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidChar_AWIp2_1() {
        Hex hex = new Hex("UTF-8");
        byte[] array = "48656C6C6X".getBytes();
        DecoderException exception = assertThrows(DecoderException.class, () -> hex.decode(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidLength_DFvJ3_1() {
        Hex hex = new Hex("UTF-8");
        byte[] array = "48656C6".getBytes();
        DecoderException exception = assertThrows(DecoderException.class, () -> hex.decode(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_bdsT0() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(10);
        char[] toDigits = new char[16];
        char[] result = Hex.encodeHex(byteBuffer, toDigits);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithNoArgs_yZlp3() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(10);
        char[] result = Hex.encodeHex(byteBuffer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithNullToDigits_rcNx5() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(10);
        try {
            Hex.encodeHex(byteBuffer, null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_GmRh0_yCUe0() {
        byte[] data = new byte[]{0x00, 0x0F, (byte) 0xF0};
        char[] toDigits = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        char[] expected = new char[]{'0', '0', '0', 'F', 'F', '0'};
        char[] actual = Hex.encodeHex(data, toDigits);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithCharset_whAi1_eSgU0() throws DecoderException {
        String data = "48656C6C6F";
        String charsetName = "UTF-8";
        byte[] expected = "Hello".getBytes(Charset.forName(charsetName));
        assertArrayEquals(expected, new Hex(charsetName).decodeHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_czRt0_Loax0() {
        Hex hex = new Hex("UTF-8");
        byte[] array = "48656C6C6F".getBytes();
        byte[] expected = "Hello".getBytes();
        try {
            assertArrayEquals(expected, hex.decode(array));
        } catch (DecoderException e) {
            fail("An unexpected exception occurred", e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithInvalidLength_kjEh1_zGOW0_1() {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E'};
        DecoderException exception = Assertions.assertThrows(DecoderException.class, () -> Hex.decodeHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_UHlI0_zLbt0() throws DecoderException {
        String data = "48656C6C6F";
        byte[] expected = "Hello".getBytes();
        assertArrayEquals(expected, Hex.decodeHex(data.toCharArray()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithCharsetObj_UrjQ2_Jzfg0() throws DecoderException {
        String data = "48656C6C6F";
        Charset charset = Charset.forName("UTF-8");
        byte[] expected = "Hello".getBytes(charset);
        assertArrayEquals(expected, new Hex(charset).decodeHex(data.toCharArray()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidChar_AWIp2_HRhg0_1() {
        Hex hex = new Hex("UTF-8");
        byte[] array = "48656C6C6X".getBytes();
        DecoderException exception = Assertions.assertThrows(DecoderException.class, () -> hex.decode(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidLength_DFvJ3_DpCT0_1() {
        Hex hex = new Hex("UTF-8");
        byte[] array = "48656C6".getBytes();
        DecoderException exception = Assertions.assertThrows(DecoderException.class, () -> hex.decode(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexStringWithEmptyData_pjiV2() {
        byte[] data = new byte[0];
        String expected = "";
        assertEquals(expected, Hex.encodeHexString(data, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeHex_XHai0() {
        byte[] data = new byte[0];
        int dataOffset = 0;
        int dataLen = 0;
        boolean toLowerCase = true;
        char[] out = new char[0];
        int outOffset = 0;
        Hex.encodeHex(data, dataOffset, dataLen, toLowerCase, out, outOffset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharset_DvfG0() {
        final Charset charset = Charset.defaultCharset();
        final Hex hex = new Hex(charset);
        assertEquals(charset, hex.getCharset());
    }
}