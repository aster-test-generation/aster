/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Sha2Crypt_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithSaltNull_RQJg0() {
        Sha2Crypt obj = new Sha2Crypt();
        String salt = null;
        String result = obj.sha256Crypt("password".getBytes(), salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithInvalidSalt_wqhy1() {
        Sha2Crypt obj = new Sha2Crypt();
        String salt = "invalidsalt";
        assertThrows(IllegalArgumentException.class, () -> obj.sha256Crypt("password".getBytes(), salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithRoundsCustom_OSSH2() {
        Sha2Crypt obj = new Sha2Crypt();
        String salt = "$5$rounds=10000$usesomesillystri$";
        String result = obj.sha256Crypt("password".getBytes(), salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithKeyLengthMoreThanBlocksize_UFQz3() {
        Sha2Crypt obj = new Sha2Crypt();
        String salt = "$5$rounds=5000$usesomesillystri$";
        String result = obj.sha256Crypt("passwordpassword".getBytes(), salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithSaltLengthMoreThanBlocksize_uhaV4() {
        Sha2Crypt obj = new Sha2Crypt();
        String salt = "$5$rounds=5000$usesomesillystriusesomesillystri$";
        String result = obj.sha256Crypt("password".getBytes(), salt);
        assertEquals("$5$rounds=5000$usesomesillystri$He9TcIYLQzxRlVVQwQf4Ow.yBkXnzcP6Z3BUg9EKp.0", result);
    }
}