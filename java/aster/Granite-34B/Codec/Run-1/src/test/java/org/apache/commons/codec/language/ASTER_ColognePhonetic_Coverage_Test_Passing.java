/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_ColognePhonetic_Coverage_Test_Passing {
    ColognePhonetic colognePhonetic = new ColognePhonetic();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringParameter_pJlu0() throws org.apache.commons.codec.EncoderException {
        String input = "Hello";
        Object expected = new ColognePhonetic().encode(input);
        Object actual = colognePhonetic.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringParameter_OmEi1() throws org.apache.commons.codec.EncoderException {
        Object input = 123;
        try {
            colognePhonetic.encode(input);
        } catch (EncoderException e) {
            assertEquals("This method's parameter was expected to be of the type " + String.class.getName() + ". But actually it was of the type " + input.getClass().getName() + ".", e.getMessage());
        }
    }
}