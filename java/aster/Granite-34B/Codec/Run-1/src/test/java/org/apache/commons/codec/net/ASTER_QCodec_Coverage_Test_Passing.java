/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_bytes_null_zQKy0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = null;
        byte[] result = qCodec.doDecoding(bytes);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_bytes_hasUnderscores_true_qlLP1() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        byte[] result = qCodec.doDecoding(bytes);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_XJae0() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        Object obj = null;
        Object actual = qCodec.encode(obj);
        Object expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_vCtP1() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        Object obj = "test";
        Object actual = qCodec.encode(obj);
        Object expected = "test";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringObject_RRfG2() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        Object obj = new Object();
        try {
            qCodec.encode(obj);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Objects of type " + obj.getClass().getName() + " cannot be encoded using Q codec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncoderException_WXBE1() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        try {
            qCodec.encode("sourceString", "unsupportedCharset");
        } catch (EncoderException e) {
            assertEquals("unsupportedCharset", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithoutBlanks_MKVq1_rbdW0() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(false);
        byte[] bytes = new byte[]{'a', 'b', 'c'};
        byte[] expected = new byte[]{'a', 'b', 'c'};
        assertArrayEquals(expected, qCodec.doEncoding(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithBlanks_LHPb0_FFVt0() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        byte[] bytes = new byte[]{'a', 'b', 'c'};
        byte[] expected = new byte[]{'a', 'b', 'c'};
        assertArrayEquals(expected, qCodec.doEncoding(bytes));
    }
}