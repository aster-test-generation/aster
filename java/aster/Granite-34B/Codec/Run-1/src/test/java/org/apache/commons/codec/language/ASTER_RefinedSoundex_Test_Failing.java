/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_RefinedSoundex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_OneLetter_SsxW2() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("A");
        assertEquals("A000", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_TwoLetters_AGNF3() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("AB");
        assertEquals("A100", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_ThreeLetters_tpZk4() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("ABC");
        assertEquals("A120", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_FourLetters_DIcD5() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("ABCD");
        assertEquals("A120", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_FiveLetters_NpWn6() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("ABCDE");
        assertEquals("A123", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_SixLetters_HGuX7() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("ABCDEF");
        assertEquals("A123", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_SevenLetters_DJab8() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("ABCDEFG");
        assertEquals("A123", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_EightLetters_vZSl9() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("ABCDEFGH");
        assertEquals("A123", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_NineLetters_jtPV10() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("ABCDEFGHI");
        assertEquals("A123", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_TenLetters_EBqt11() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("ABCDEFGHIJ");
        assertEquals("A123", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_BuKL0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.encode("test");
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithMapping_gBne1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        String result = refinedSoundex.encode("test");
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithArray_uPFM2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex(new char[]{'a', 'b', 'c'});
        String result = refinedSoundex.encode("test");
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMappingCodeWithInvalidMapping_QDnb5() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("invalidMapping");
        char actualMappingCode = refinedSoundex.getMappingCode('A');
        char expectedMappingCode = 0;
        Assertions.assertEquals(expectedMappingCode, actualMappingCode);
    }
}