/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BeiderMorseEncoder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMaxPhonemesTest_eADE0() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        beiderMorseEncoder.setMaxPhonemes(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMaxPhonemesTest_YbvL1() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        beiderMorseEncoder.setMaxPhonemes(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMaxPhonemesTest_heus2() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        beiderMorseEncoder.setMaxPhonemes(Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMaxPhonemesTest_eAyS3() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        beiderMorseEncoder.setMaxPhonemes(Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMaxPhonemesTest_XGtp4() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        beiderMorseEncoder.setMaxPhonemes(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMaxPhonemesTest_ajMO5() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        beiderMorseEncoder.setMaxPhonemes(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMaxPhonemesTest_mbVG6() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        beiderMorseEncoder.setMaxPhonemes(-1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMaxPhonemesTest_coaQ7() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        beiderMorseEncoder.setMaxPhonemes(1000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMaxPhonemesTest_vQBd8() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        beiderMorseEncoder.setMaxPhonemes(10000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMaxPhonemesTest_FAGl9() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        beiderMorseEncoder.setMaxPhonemes(100000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMaxPhonemesTest_Iqiy10() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        beiderMorseEncoder.setMaxPhonemes(1000000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMaxPhonemesTest_uCeO11() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        beiderMorseEncoder.setMaxPhonemes(10000000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameType_AwXw0() {
        BeiderMorseEncoder bme = new BeiderMorseEncoder();
        bme.setNameType(NameType.ASHKENAZI);
        assertEquals(NameType.ASHKENAZI, bme.getNameType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameTypeWithGeneric_HjEK1() {
        BeiderMorseEncoder bme = new BeiderMorseEncoder();
        bme.setNameType(NameType.GENERIC);
        assertEquals(NameType.GENERIC, bme.getNameType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameTypeWithSephardic_mfPq2() {
        BeiderMorseEncoder bme = new BeiderMorseEncoder();
        bme.setNameType(NameType.SEPHARDIC);
        assertEquals(NameType.SEPHARDIC, bme.getNameType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuleType_APPROX_PVgV0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setRuleType(RuleType.APPROX);
        assertEquals(RuleType.APPROX, encoder.getRuleType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuleType_EXACT_Lzfu1() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setRuleType(RuleType.EXACT);
        assertEquals(RuleType.EXACT, encoder.getRuleType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType_mplJ0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        RuleType expected = encoder.getRuleType();
        assertEquals(expected, RuleType.values()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat_PJUs0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        assertTrue(encoder.isConcat());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameTypeTest_GTcV0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        NameType nameType = encoder.getNameType();
        assertEquals(NameType.class, nameType.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setConcatTest_olwN0() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        beiderMorseEncoder.setConcat(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setConcatTest2_SRVS1() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        beiderMorseEncoder.setConcat(false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullSource_Zqdy0_iYWi0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String encoded = null;
        try {
            encoded = encoder.encode(null);
        } catch (EncoderException e) {
            fail("An unexpected exception occurred.", e);
        }
        assertEquals(null, encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_fZgA0_fid2() throws EncoderException {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String source = "Hello, World!";
        String expected = "YlYvYrlt|YlYvorlt|YlovYrlt|Ylovorlt|ilYvYrlt|ilYvorlt|ilovYrlt|ilovorlt|ilovurlt|iloworlt|xilovorlt|xilovurlt|xiloworlt";
        assertEquals(expected, encoder.encode(source));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNumbers_SoTt1_fid2() throws EncoderException {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String source = "12345";
        String expected = "";
        assertEquals(expected, encoder.encode(source));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonNullSource_GlFr1_ijrM0_fid2() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String source = "Hello, World!";
        String encoded = null;
        try {
            encoded = encoder.encode(source);
        } catch (EncoderException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        assertEquals("YlYvYrlt|YlYvorlt|YlovYrlt|Ylovorlt|ilYvYrlt|ilYvorlt|ilovYrlt|ilovorlt|ilovurlt|iloworlt|xilovorlt|xilovurlt|xiloworlt", encoded);
    }
}