/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Caverphone1_Test {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NullInput_ReturnsSixOnes_rrnV0() {
        Caverphone1 caverphone1 = new Caverphone1();
        String actual = caverphone1.encode(null);
        assertEquals("111111", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyInput_ReturnsSixOnes_mbuD1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String actual = caverphone1.encode("");
        assertEquals("111111", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SimpleInput_ReturnsExpectedOutput_cImr2() {
        Caverphone1 caverphone1 = new Caverphone1();
        String actual = caverphone1.encode("caverphone");
        assertEquals("KFKRFN", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_mgHZ0() throws EncoderException {
        Caverphone1 caverphone1 = new Caverphone1();
        String str1 = "encode";
        String str2 = "encode";
        boolean expected = true;
        boolean actual = caverphone1.isEncodeEqual(str1, str2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual2_BChr1() throws EncoderException {
        Caverphone1 caverphone1 = new Caverphone1();
        String str1 = "encode";
        String str2 = "encoded";
        boolean expected = false;
        boolean actual = caverphone1.isEncodeEqual(str1, str2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidInput_nZTA0() throws EncoderException {
        Caverphone1 caverphone1 = new Caverphone1();
        String input = "validInput";
        Object expected = caverphone1.encode(input);
        Object actual = caverphone1.encode(input);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidInput_qogH1() throws EncoderException {
        Caverphone1 caverphone1 = new Caverphone1();
        Object source = 123;
        Assertions.assertThrows(EncoderException.class, () -> caverphone1.encode(source));
    }
}