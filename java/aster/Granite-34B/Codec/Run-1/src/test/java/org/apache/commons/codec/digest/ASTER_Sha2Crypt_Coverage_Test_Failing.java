/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Sha2Crypt_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithSaltNull_RQJg0_fid2() {
        Sha2Crypt obj = new Sha2Crypt();
        String salt = null;
        String result = obj.sha256Crypt("password".getBytes(), salt);
        assertEquals("$5$rounds=5000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithRoundsCustom_OSSH2_fid2() {
        Sha2Crypt obj = new Sha2Crypt();
        String salt = "$5$rounds=10000$usesomesillystri$";
        String result = obj.sha256Crypt("password".getBytes(), salt);
        assertEquals("$5$rounds=10000$usesomesillystri$1nuna.6i.2t.2l1.1l1t2.2s2t2n2n2.1s2.2p2r2p2r2.1p2s2s2p2.1s2", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithKeyLengthMoreThanBlocksize_UFQz3_fid2() {
        Sha2Crypt obj = new Sha2Crypt();
        String salt = "$5$rounds=5000$usesomesillystri$";
        String result = obj.sha256Crypt("passwordpassword".getBytes(), salt);
        assertEquals("$5$rounds=5000$usesomesillystri$1nuna.6i.2t.2l1.1l1t2.2s2t2n2n2.1s2.2p2r2p2r2.1p2s2s2p2.1s2", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithSaltLengthMoreThanBlocksize_uhaV4_fid2() {
        Sha2Crypt obj = new Sha2Crypt();
        String salt = "$5$rounds=5000$usesomesillystriusesomesillystri$";
        String result = obj.sha256Crypt("password".getBytes(), salt);
        assertEquals("$5$rounds=5000$usesomesillystriusesomesillystri$1nuna.6i.2t.2l1.1l1t2.2s2t2n2n2.1s2.2p2r2p2r2.1p2s2s2p2.1s2", result);
    }
}