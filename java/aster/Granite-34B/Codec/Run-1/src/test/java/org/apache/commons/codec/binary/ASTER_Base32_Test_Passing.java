/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base32_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWith0_oaUv0() {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet((byte) 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWith255_Dpcg1() {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet((byte) 255));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWith256_ikLU2() {
        Base32 base32 = new Base32();
        assertTrue(!base32.isInAlphabet((byte) 256));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithNegativeValue_tTTq3() {
        Base32 base32 = new Base32();
        assertTrue(!base32.isInAlphabet((byte) -1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStrictPolicy_VVVV5() {
        Base32 base32 = new Base32(0, new byte[]{'\n'}, false, (byte) '=', CodecPolicy.STRICT);
        String input = "ABCDEF====";
        try {
            base32.decode(input);
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_OeZv0() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{0, 1, 2, 3};
        assertEquals("AAAQEAY=", base32.encodeAsString(pArray));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsStringWithHex_GiHX3() {
        Base32 base32 = new Base32(true);
        byte[] pArray = new byte[]{0, 1, 2, 3};
        assertEquals("000G40O=", base32.encodeAsString(pArray));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsStringWithPadding_JNgF4() {
        Base32 base32 = new Base32(true, (byte) '=');
        byte[] pArray = new byte[]{0, 1, 2, 3};
        assertEquals("000G40O=", base32.encodeAsString(pArray));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isInAlphabet_WithStringParameter_ReturnsTrue_kDff0() {
        Base32 base32 = new Base32();
        String basen = "test";
        boolean actual = base32.isInAlphabet(basen);
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isInAlphabet_WithStringParameter_ReturnsTrue_ForLineLength_ffym2() {
        Base32 base32 = new Base32(10);
        String basen = "test";
        boolean actual = base32.isInAlphabet(basen);
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isInAlphabet_WithStringParameter_ReturnsTrue_ForLineLengthAndLineSeparator_yEUL4() {
        Base32 base32 = new Base32(10, new byte[]{0x0A});
        String basen = "test";
        boolean actual = base32.isInAlphabet(basen);
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isInAlphabet_WithStringParameter_ReturnsFalse_ForLineLengthAndLineSeparator_rMNS5() {
        Base32 base32 = new Base32(10, new byte[]{0x0A});
        String basen = "test";
        boolean actual = base32.isInAlphabet(basen);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isInAlphabet_WithStringParameter_ReturnsTrue_ForLineLengthAndLineSeparatorAndUseHex_Miop6() {
        Base32 base32 = new Base32(10, new byte[]{0x0A}, true);
        String basen = "test";
        boolean actual = base32.isInAlphabet(basen);
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isInAlphabet_WithStringParameter_ReturnsFalse_ForLineLengthAndLineSeparatorAndUseHex_MYhL7() {
        Base32 base32 = new Base32(10, new byte[]{0x0A}, true);
        String basen = "test";
        boolean actual = base32.isInAlphabet(basen);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isInAlphabet_WithStringParameter_ReturnsTrue_ForLineLengthAndLineSeparatorAndUseHexAndPadding_etDk8() {
        Base32 base32 = new Base32(10, new byte[]{0x0A}, true, (byte) 0x3D);
        String basen = "test";
        boolean actual = base32.isInAlphabet(basen);
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isInAlphabet_WithStringParameter_ReturnsFalse_ForLineLengthAndLineSeparatorAndUseHexAndPadding_zpQJ9() {
        Base32 base32 = new Base32(10, new byte[]{0x0A}, true, (byte) 0x3D);
        String basen = "test";
        boolean actual = base32.isInAlphabet(basen);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isInAlphabet_WithStringParameter_ReturnsTrue_ForUseHex_mSRs10() {
        Base32 base32 = new Base32(true);
        String basen = "test";
        boolean actual = base32.isInAlphabet(basen);
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isInAlphabet_WithStringParameter_ReturnsFalse_ForLineLength_xUiS13() {
        Base32 base32 = new Base32(10);
        String basen = "test";
        boolean actual = base32.isInAlphabet(basen);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLengthWithNullArray_nFAf0() {
        byte[] array = null;
        int expected = 0;
        int actual = Base32.toLength(array);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLengthWithNonNullArray_MBuV1() {
        byte[] array = new byte[5];
        int expected = 5;
        int actual = Base32.toLength(array);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_wVhm0() {
        Base32 base32 = new Base32();
        byte[] array = new byte[10];
        assertEquals(16, base32.getEncodedLength(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLengthWithLineLength_Xeac1() {
        Base32 base32 = new Base32(8);
        byte[] array = new byte[10];
        assertEquals(20, base32.getEncodedLength(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLengthWithLineLengthAndSeparator_wqiB2() {
        Base32 base32 = new Base32(8, new byte[]{'\r', '\n'});
        byte[] array = new byte[10];
        assertEquals(20, base32.getEncodedLength(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLengthWithHex_luHZ3() {
        Base32 base32 = new Base32(true);
        byte[] array = new byte[10];
        assertEquals(16, base32.getEncodedLength(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLengthWithCustomPadding_SrMy4() {
        Base32 base32 = new Base32(true, (byte) '$');
        byte[] array = new byte[10];
        assertEquals(16, base32.getEncodedLength(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLengthWithAllOptions_aWKd5() {
        Base32 base32 = new Base32(8, new byte[]{'\r', '\n'}, true, (byte) '$', CodecPolicy.LENIENT);
        byte[] array = new byte[10];
        assertEquals(20, base32.getEncodedLength(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyArray_zoMG0() {
        Base32 base32 = new Base32();
        byte[] input = {};
        byte[] expected = {};
        assertArrayEquals(expected, base32.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize_kqSk0() {
        Base32 base32 = new Base32();
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLength_axSm1() {
        Base32 base32 = new Base32(10);
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLengthAndSeparator_mQDT2() {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLengthAndSeparatorAndUseHex_VBSV3() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true);
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLengthAndSeparatorAndUseHexAndPadding_bBMc4() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '=', CodecPolicy.LENIENT);
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithUseHex_tRWs5() {
        Base32 base32 = new Base32(true);
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLengthAndSeparatorAndUseHexAndPadding_wPHG6() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '=');
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithPad_TaGB8() {
        Base32 base32 = new Base32((byte) '=');
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithUseHexAndPadding_ddmT9() {
        Base32 base32 = new Base32(true, (byte) '=');
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithArrayOctetAndAllowWSPad_LnTu0() {
        Base32 base32 = new Base32(true);
        byte[] arrayOctet = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};
        assertFalse(base32.isInAlphabet(arrayOctet, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithArrayOctetAndNotAllowWSPad_nEPs1() {
        Base32 base32 = new Base32(true);
        byte[] arrayOctet = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};
        assertFalse(base32.isInAlphabet(arrayOctet, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_rsAR0() {
        Base32 base32 = new Base32();
        byte[] array = new byte[]{0, 1, 2, 3};
        String encodedString = base32.encodeToString(array);
        assertEquals("AAAQEAY=", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToStringWithHex_zFjT3() {
        Base32 base32 = new Base32(true);
        byte[] array = new byte[]{0, 1, 2, 3};
        String encodedString = base32.encodeToString(array);
        assertEquals("000G40O=", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToStringWithPadding_TIoA4() {
        Base32 base32 = new Base32(false, (byte) '=');
        byte[] array = new byte[]{0, 1, 2, 3};
        String encodedString = base32.encodeToString(array);
        assertEquals("AAAQEAY=", encodedString);
    }
}