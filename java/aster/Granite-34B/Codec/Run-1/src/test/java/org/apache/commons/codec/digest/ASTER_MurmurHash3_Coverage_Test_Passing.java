/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash3_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithTestCase1_Adpf0() {
        byte[] data = new byte[100];
        int offset = 0;
        int length = 100;
        int seed = 12345;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithTestCase2_wnQI1() {
        byte[] data = new byte[100];
        int offset = 10;
        int length = 90;
        int seed = 54321;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithTestCase3_TxcG2() {
        byte[] data = new byte[1000];
        int offset = 50;
        int length = 500;
        int seed = 98765;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithTestCase4_sIJI3() {
        byte[] data = new byte[10000];
        int offset = 100;
        int length = 1000;
        int seed = 54321;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithTestCase5_MkMM4() {
        byte[] data = new byte[100000];
        int offset = 500;
        int length = 5000;
        int seed = 12345;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithTestCase6_DYKO5() {
        byte[] data = new byte[1000000];
        int offset = 1000;
        int length = 10000;
        int seed = 98765;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithTestCase7_rRbb6() {
        byte[] data = new byte[10000000];
        int offset = 5000;
        int length = 50000;
        int seed = 54321;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithTestCase8_FVrh7() {
        byte[] data = new byte[100000000];
        int offset = 10000;
        int length = 100000;
        int seed = 12345;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithTestCase9_sPxA8() {
        byte[] data = new byte[1000000000];
        int offset = 50000;
        int length = 500000;
        int seed = 98765;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hash128x64Test10_Djki9() {
        byte[] data = new byte[10];
        int offset = 5;
        int length = 10;
        int seed = 2;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_ArEv0_fid1() {
        String data = "someString";
        int expected = -1080935288;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_ivcS1_fid1() {
        String data = "someOtherString";
        int expected = -2067072272;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }
}