/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_SoundexUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDifferenceEncoded_BothNull_VmzX0() {
        assertEquals(0, SoundexUtils.differenceEncoded(null, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDifferenceEncoded_FirstNull_Kzyv1() {
        assertEquals(0, SoundexUtils.differenceEncoded(null, "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDifferenceEncoded_SecondNull_RNkS2() {
        assertEquals(0, SoundexUtils.differenceEncoded("test", null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDifferenceEncoded_BothEmpty_HztO3() {
        assertEquals(0, SoundexUtils.differenceEncoded("", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDifferenceEncoded_FirstEmpty_vrcT4() {
        assertEquals(0, SoundexUtils.differenceEncoded("", "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDifferenceEncoded_SecondEmpty_bfWL5() {
        assertEquals(0, SoundexUtils.differenceEncoded("test", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDifferenceEncoded_FirstShorter_weSw6() {
        assertEquals(1, SoundexUtils.differenceEncoded("a", "ab"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDifferenceEncoded_SecondShorter_oamk7() {
        assertEquals(1, SoundexUtils.differenceEncoded("ab", "a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDifferenceEncoded_BothEqual_cWMJ8() {
        assertEquals(2, SoundexUtils.differenceEncoded("ab", "ab"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDifferenceEncoded_BothDifferent_LuhV9() {
        assertEquals(0, SoundexUtils.differenceEncoded("ab", "cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDifferenceEncoded_BothLonger_WDWK10() {
        assertEquals(2, SoundexUtils.differenceEncoded("abcd", "abef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCleanWithEmptyInput_CFRW0() {
        assertEquals("", SoundexUtils.clean(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCleanWithNoLetters_Qfyh1() {
        assertEquals("", SoundexUtils.clean("123"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCleanWithOnlyLetters_YUwJ2() {
        assertEquals("ABC", SoundexUtils.clean("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCleanWithLettersAndNumbers_YpvF3() {
        assertEquals("ABC", SoundexUtils.clean("a1b2c3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCleanWithSpecialCharacters_gSgY4() {
        assertEquals("ABC", SoundexUtils.clean("!@#a$%b^&c*()"));
    }
}