/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode2_ScKi1() throws DecoderException {
        BCodec bCodec = new BCodec("UTF-8");
        String result = bCodec.decode("value");
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode3_FLis2() throws DecoderException {
        BCodec bCodec = new BCodec();
        String result = bCodec.decode("value");
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_pmsy2() throws EncoderException {
        BCodec bCodec = new BCodec("charsetName");
        String encoded = bCodec.encode("source", Charset.defaultCharset());
        assertEquals("encoded", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_wIcv1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        String strSource = "=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=";
        String encodedString = bCodec.encode(strSource);
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringCharset_GfqY2() throws EncoderException {
        BCodec bCodec = new BCodec("UTF-8");
        String strSource = "=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=";
        String encodedString = bCodec.encode(strSource);
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoArgs_SjTK3() throws EncoderException {
        BCodec bCodec = new BCodec();
        String strSource = "=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=";
        String encodedString = bCodec.encode(strSource);
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_NDWQ1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        assertEquals("=?UTF-8?B?SGVsbG8gV29ybGQ=?=", bCodec.encodeText("=?UTF-8?B?SGVsbG8gV29ybGQ=?=", "UTF-8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidText_bRmw1() throws DecoderException, UnsupportedEncodingException {
        final BCodec bCodec = new BCodec();
        final String actual = bCodec.decodeText("Invalid Text");
        final String expected = null;
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithValidText_deWB2() throws DecoderException, UnsupportedEncodingException {
        final BCodec bCodec = new BCodec();
        final String actual = bCodec.decodeText("Valid Text");
        final String expected = "Valid Text";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithEmptyText_pwOk3() throws DecoderException, UnsupportedEncodingException {
        final BCodec bCodec = new BCodec();
        final String actual = bCodec.decodeText("");
        final String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidCharset_jJhH4() throws DecoderException, UnsupportedEncodingException {
        final BCodec bCodec = new BCodec();
        final String actual = bCodec.decodeText("Invalid Charset");
        final String expected = "Invalid Charset";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidEncoding_ceAv5() throws DecoderException, UnsupportedEncodingException {
        final BCodec bCodec = new BCodec();
        final String actual = bCodec.decodeText("Invalid Encoding");
        final String expected = "Invalid Encoding";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidData_OfUP6() throws DecoderException, UnsupportedEncodingException {
        final BCodec bCodec = new BCodec();
        final String actual = bCodec.decodeText("Invalid Data");
        final String expected = "Invalid Data";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNullText_epcC2() throws EncoderException {
        final BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        try {
            bCodec.encodeText(null, StandardCharsets.UTF_8);
            fail("EncoderException expected");
        } catch (final EncoderException e) {
            assertEquals("Text to encode cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_mdPv0_GSIH0() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String strSource = "=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=";
        String encodedString = bCodec.encode(strSource);
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_uKeD0() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.defaultCharset(), CodecPolicy.STRICT);
        String encoded = bCodec.encode("source", Charset.defaultCharset());
        assertEquals("encoded", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_pzSY1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.defaultCharset());
        String encoded = bCodec.encode("source", Charset.defaultCharset());
        assertEquals("encoded", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_mbfB3() throws EncoderException {
        BCodec bCodec = new BCodec();
        String encoded = bCodec.encode("source", Charset.defaultCharset());
        assertEquals("encoded", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_wIcv1_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        String strSource = "Hello, World!";
        String encodedString = bCodec.encode(strSource);
        assertEquals("Hello, World!", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringCharset_GfqY2_fid1() throws EncoderException {
        BCodec bCodec = new BCodec("UTF-8");
        String strSource = "Hello, World!";
        String encodedString = bCodec.encode(strSource);
        assertEquals("Hello, World!", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoArgs_SjTK3_fid1() throws EncoderException {
        BCodec bCodec = new BCodec();
        String strSource = "Hello, World!";
        String encodedString = bCodec.encode(strSource);
        assertEquals("Hello, World!", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_NDWQ1_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        assertEquals("Hello World", bCodec.encodeText("Hello World", "UTF-8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidText_bRmw1_fid1() throws DecoderException, UnsupportedEncodingException {
        final BCodec bCodec = new BCodec();
        final String actual = bCodec.decodeText("Invalid Text");
        final String expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithValidText_deWB2_fid1() throws DecoderException, UnsupportedEncodingException {
        final BCodec bCodec = new BCodec();
        final String actual = bCodec.decodeText("Valid Text");
        final String expected = "Expected Text";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithEmptyText_pwOk3_fid1() throws DecoderException, UnsupportedEncodingException {
        final BCodec bCodec = new BCodec();
        final String actual = bCodec.decodeText("");
        final String expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidCharset_jJhH4_fid1() throws DecoderException, UnsupportedEncodingException {
        final BCodec bCodec = new BCodec();
        final String actual = bCodec.decodeText("Invalid Charset");
        final String expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidEncoding_ceAv5_fid1() throws DecoderException, UnsupportedEncodingException {
        final BCodec bCodec = new BCodec();
        final String actual = bCodec.decodeText("Invalid Encoding");
        final String expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidData_OfUP6_fid1() throws DecoderException, UnsupportedEncodingException {
        final BCodec bCodec = new BCodec();
        final String actual = bCodec.decodeText("Invalid Data");
        final String expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithValidData_fHoO7() throws DecoderException, UnsupportedEncodingException {
        final BCodec bCodec = new BCodec();
        final String actual = bCodec.decodeText("Valid Data");
        final String expected = "Expected Data";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_pMVR0() throws EncoderException {
        final BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        final String text = "Hello World";
        final String encodedText = bCodec.encodeText(text, StandardCharsets.UTF_8);
        assertTrue(encodedText.startsWith(BCodec.PREFIX));
        assertTrue(encodedText.endsWith(BCodec.POSTFIX));
        assertTrue(encodedText.contains(StandardCharsets.UTF_8.name()));
        assertTrue(encodedText.contains(bCodec.getEncoding()));
        assertTrue(encodedText.contains(text));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithLenientPolicy_Vkoa1() throws EncoderException {
        final BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        final String text = "Hello World";
        final String encodedText = bCodec.encodeText(text, StandardCharsets.UTF_8);
        assertTrue(encodedText.startsWith(BCodec.PREFIX));
        assertTrue(encodedText.endsWith(BCodec.POSTFIX));
        assertTrue(encodedText.contains(StandardCharsets.UTF_8.name()));
        assertTrue(encodedText.contains(bCodec.getEncoding()));
        assertTrue(encodedText.contains(text));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_pMVR0_5_fid2() throws EncoderException {
        final BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        final String text = "Hello World";
        final String encodedText = bCodec.encodeText(text, StandardCharsets.UTF_8);
        assertTrue(encodedText.contains(text));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithLenientPolicy_Vkoa1_5_fid2() throws EncoderException {
        final BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        final String text = "Hello World";
        final String encodedText = bCodec.encodeText(text, StandardCharsets.UTF_8);
        assertTrue(encodedText.contains(text));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_WithInvalidInput_tZwy1_vzwb0() {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        byte[] input = "Invalid Input".getBytes();
        byte[] expected = null;
        byte[] actual = bCodec.doDecoding(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_mdPv0_GSIH0_fid2() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        String encodedString = bCodec.encode(strSource);
        assertEquals("Hello, World!", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_Pwpo0_MXjn0_fid2() {
        BCodec bCodec = new BCodec("UTF-8");
        String input = "Hello, World!";
        Object expected = "SGVsbG8sIFdvcmxkIQ==";
        Object actual = null;
        try {
            actual = bCodec.encode(input);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }
}