/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QuotedPrintableCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncoding_XHWl6() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "This is a test string";
        String sourceCharset = "UTF-16";
        UnsupportedEncodingException exception = assertThrows(UnsupportedEncodingException.class, () -> codec.decode(sourceStr, sourceCharset));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_bKAH1() throws EncoderException {
        QuotedPrintableCodec qp = new QuotedPrintableCodec();
        byte[] input = "[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]".getBytes();
        assertEquals("[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]", qp.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithPrintableBitSetAndBytesAndStrict_RADb0() {
        BitSet printable = new BitSet(256);
        byte[] bytes = new byte[]{1, 2, 3};
        boolean strict = true;
        byte[] expected = new byte[]{1, 2, 3};
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithPrintableBitSetAndBytesAndNotStrict_Sgbl1() {
        BitSet printable = new BitSet(256);
        byte[] bytes = new byte[]{1, 2, 3};
        boolean strict = false;
        byte[] expected = new byte[]{1, 2, 3};
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithPrintableBitSetAndBytesAndNullStrict_zaxV2() {
        BitSet printable = new BitSet(256);
        byte[] bytes = new byte[]{1, 2, 3};
        Boolean strict = null;
        byte[] expected = new byte[]{1, 2, 3};
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithPrintableBitSetAndNullBytesAndNullStrict_BzYo5() {
        BitSet printable = new BitSet(256);
        byte[] bytes = null;
        Boolean strict = null;
        byte[] expected = null;
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNullPrintableBitSetAndBytesAndStrict_BNbF6() {
        BitSet printable = null;
        byte[] bytes = new byte[]{1, 2, 3};
        boolean strict = true;
        byte[] expected = new byte[]{1, 2, 3};
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNullPrintableBitSetAndBytesAndNotStrict_lDRC7() {
        BitSet printable = null;
        byte[] bytes = new byte[]{1, 2, 3};
        boolean strict = false;
        byte[] expected = new byte[]{1, 2, 3};
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNullPrintableBitSetAndBytesAndNullStrict_IINT8() {
        BitSet printable = null;
        byte[] bytes = new byte[]{1, 2, 3};
        Boolean strict = null;
        byte[] expected = new byte[]{1, 2, 3};
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithPrintableBitSetAndBytesAndStrict_mXPb0() {
        BitSet printable = new BitSet(256);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        boolean strict = true;
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithPrintableBitSetAndBytesAndNotStrict_erHr1() {
        BitSet printable = new BitSet(256);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        boolean strict = false;
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidInput_YWKS6() {
        final byte[] bytes = {};
        try {
            new QuotedPrintableCodec().decode(bytes);
            fail("DecoderException expected");
        } catch (final DecoderException ignore) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidInputAndCharset_zQJx7() {
        final byte[] bytes = {};
        try {
            new QuotedPrintableCodec(Charset.defaultCharset()).decode(bytes);
            fail("DecoderException expected");
        } catch (final DecoderException ignore) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidInputAndCharsetName_jhVt8() {
        final byte[] bytes = {};
        try {
            new QuotedPrintableCodec("UTF-8").decode(bytes);
            fail("DecoderException expected");
        } catch (final DecoderException ignore) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidInputAndStrict_NQEG9() {
        final byte[] bytes = {};
        try {
            new QuotedPrintableCodec(true).decode(bytes);
            fail("DecoderException expected");
        } catch (final DecoderException ignore) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidInputAndCharsetAndStrict_OQPM10() {
        final byte[] bytes = {};
        try {
            new QuotedPrintableCodec(Charset.defaultCharset(), true).decode(bytes);
            fail("DecoderException expected");
        } catch (final DecoderException ignore) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_fzJD0() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "This is a test string";
        String expected = "This=20is=20a=20test=20string";
        assertEquals(expected, codec.encode(sourceStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_mLQh1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String sourceStr = "This is a test string";
        String expected = "This=20is=20a=20test=20string";
        assertEquals(expected, codec.encode(sourceStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrictMode_MaSD2() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "This is a test string";
        String expected = "This=20is=20a=20test=20string";
        assertEquals(expected, codec.encode(sourceStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSourceStrAndSourceCharset_HrfV0() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "This is a test string";
        String sourceCharset = "UTF-8";
        String expected = "This=20is=20a=20test=20string";
        String actual = codec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSourceStrAndSourceCharsetAndStrict_MvaT1() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "This is a test string";
        String sourceCharset = "UTF-8";
        String expected = "This=20is=20a=20test=20string";
        String actual = codec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSourceStrAndSourceCharsetAndCharset_OVZn2() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        String sourceStr = "This is a test string";
        String sourceCharset = "UTF-8";
        String expected = "This=20is=20a=20test=20string";
        String actual = codec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSourceStrAndSourceCharsetAndCharsetName_Sqcr3() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String sourceStr = "This is a test string";
        String sourceCharset = "UTF-8";
        String expected = "This=20is=20a=20test=20string";
        String actual = codec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSourceStrAndSourceCharsetAndCharsetAndStrict_dXyw4() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        String sourceStr = "This is a test string";
        String sourceCharset = "UTF-8";
        String expected = "This=20is=20a=20test=20string";
        String actual = codec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSourceStrAndSourceCharsetAndCharsetAndStrict2_gikw6() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), false);
        String sourceStr = "This is a test string";
        String sourceCharset = "UTF-8";
        String expected = "This=20is=20a=20test=20string";
        String actual = codec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithEscapeChar_FqIh3_PkgN0() throws DecoderException {
        byte[] input = "This=0D=0Ais a test".getBytes();
        byte[] expected = "This\ris a test".getBytes();
        byte[] actual = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_Rxfh1_fid1() throws DecoderException {
        final QuotedPrintableCodec codec = new QuotedPrintableCodec();
        final byte[] bytes = new byte[]{1, 2, 3};
        assertEquals(null, codec.decode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_nOeo2_fid1() throws DecoderException {
        final QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertEquals(null, codec.decode(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_bKAH1_fid1() throws EncoderException {
        QuotedPrintableCodec qp = new QuotedPrintableCodec();
        byte[] input = "Hello World!".getBytes();
        assertEquals("Hello World!", qp.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrictTrue_PTKj0_fid1() {
        QuotedPrintableCodec qp = new QuotedPrintableCodec(true);
        String sourceStr = "This is a test string";
        String expected = "This=20is=20a=20test=20string";
        assertEquals(expected, qp.encode(sourceStr, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_MNey2_fid1() {
        QuotedPrintableCodec qp = new QuotedPrintableCodec(StandardCharsets.ISO_8859_1);
        String sourceStr = "This is a test string";
        String expected = "This=20is=20a=20test=20string";
        assertEquals(expected, qp.encode(sourceStr, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetName_rKoQ3_fid1() {
        QuotedPrintableCodec qp = new QuotedPrintableCodec("ISO-8859-1");
        String sourceStr = "This is a test string";
        String expected = "This=20is=20a=20test=20string";
        assertEquals(expected, qp.encode(sourceStr, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutCharset_iJuw4_fid1() {
        QuotedPrintableCodec qp = new QuotedPrintableCodec();
        String sourceStr = "This is a test string";
        String expected = "This=20is=20a=20test=20string";
        assertEquals(expected, qp.encode(sourceStr, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetAndStrictTrue_iNDS5_fid1() {
        QuotedPrintableCodec qp = new QuotedPrintableCodec(StandardCharsets.ISO_8859_1, true);
        String sourceStr = "This is a test string";
        String expected = "This=20is=20a=20test=20string";
        assertEquals(expected, qp.encode(sourceStr, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithInvalidEscapeChar_pBfX4() {
        byte[] input = "This=0Gis a test".getBytes();
        DecoderException exception = assertThrows(DecoderException.class, () -> QuotedPrintableCodec.decodeQuotedPrintable(input));
        assertEquals("Invalid quoted-printable encoding", exception.getMessage());
    }
}