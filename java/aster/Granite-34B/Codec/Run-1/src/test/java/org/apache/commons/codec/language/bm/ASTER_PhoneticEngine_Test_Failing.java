/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PhoneticEngine_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLang_whenNameTypeIsSephardicAndRuleTypeIsRulesAndConcatenateIsTrueAndMaxPhonemesIs10_thenReturnsLang_fQzK2() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.RULES, true, 10);
        Lang lang = phoneticEngine.getLang();
        assertEquals(Lang.class, lang.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType_Ienc0_1() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        phoneticEngine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, false);
        assertEquals(RuleType.APPROX, phoneticEngine.getRuleType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_HUIL0() {
        PhoneticEngine pe = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 5);
        String actual = pe.encode("Arya");
        String expected = "A.R.Y.A";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoMaxPhonemes_MxDG1() {
        PhoneticEngine pe = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true);
        String actual = pe.encode("Arya");
        String expected = "A.R.Y.A";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoConcatenate_VAOi2() {
        PhoneticEngine pe = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, false, 5);
        String actual = pe.encode("Arya");
        String expected = "ARIA";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoMaxPhonemesAndNoConcatenate_PzAs3() {
        PhoneticEngine pe = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, false);
        String actual = pe.encode("Arya");
        String expected = "ARIA";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithGenericNameType_ZHmO4() {
        PhoneticEngine pe = new PhoneticEngine(NameType.GENERIC, RuleType.APPROX, true, 5);
        String actual = pe.encode("Arya");
        String expected = "A.R.Y.A";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSephardicNameType_sWQI5() {
        PhoneticEngine pe = new PhoneticEngine(NameType.SEPHARDIC, RuleType.APPROX, true, 5);
        String actual = pe.encode("Arya");
        String expected = "A.R.Y.A";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithExactRuleType_mOpr6() {
        PhoneticEngine pe = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true, 5);
        String actual = pe.encode("Arya");
        String expected = "A.R.Y.A";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoMaxPhonemesAndExactRuleType_NQDT7() {
        PhoneticEngine pe = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true);
        String actual = pe.encode("Arya");
        String expected = "A.R.Y.A";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoConcatenateAndExactRuleType_AyBb8() {
        PhoneticEngine pe = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, false, 5);
        String actual = pe.encode("Arya");
        String expected = "ARIA";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoMaxPhonemesNoConcatenateAndExactRuleType_YwDp9() {
        PhoneticEngine pe = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, false);
        String actual = pe.encode("Arya");
        String expected = "ARIA";
        assertEquals(expected, actual);
    }
}