/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Md5Crypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithKeyBytesSaltPrefixAndRandom_weCA0() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String salt = "$1$abcde$";
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithKeyBytesSaltPrefixAndNoRandom_kTwE1() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String salt = "$1$abcde$";
        String prefix = "$1$";
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithKeyBytesNoSaltPrefixAndRandom_mveA2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String salt = null;
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_jhsp0() {
        String key = "password";
        String expected = "$apr1$12345678$9876543210";
        String actual = Md5Crypt.apr1Crypt(key);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptCoverage_OhZG1() {
        String key = "password";
        String actual = Md5Crypt.apr1Crypt(key);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithPrefix_iAYq1() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String prefix = "$1$RandomSalt$";
        String expected = "$1$RandomSa$OmdVOkz14DbYaI0n1KlR4/";
        String actual = Md5Crypt.md5Crypt(keyBytes, prefix);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_uupz0() {
        String key = "password";
        String salt = "salt";
        String expected = "$apr1$salt$Xxd1irWT9ycqoYxGFn4cb.";
        String actual = Md5Crypt.apr1Crypt(key, salt);
        Assertions.assertEquals(expected, actual);
    }
}