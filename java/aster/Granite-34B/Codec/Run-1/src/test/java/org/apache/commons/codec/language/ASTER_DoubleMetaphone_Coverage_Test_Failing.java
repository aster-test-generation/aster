/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DoubleMetaphone_Coverage_Test_Failing {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleZ2_MVXe1() {
        String value = "Z hang";
        boolean alternate = true;
        assertEquals("J", doubleMetaphone.doubleMetaphone(value, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleZ3_YxFN2() {
        String value = "Z hang";
        boolean alternate = false;
        assertEquals("S", doubleMetaphone.doubleMetaphone(value, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleZ4_rtXB3() {
        String value = "Z hang";
        boolean alternate = true;
        assertEquals("S", doubleMetaphone.doubleMetaphone(value, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleZ5_kSBN4() {
        String value = "Z hang";
        boolean alternate = false;
        assertEquals("TS", doubleMetaphone.doubleMetaphone(value, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleZ6_yUeL5() {
        String value = "Z hang";
        boolean alternate = true;
        assertEquals("TS", doubleMetaphone.doubleMetaphone(value, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_1_UbRD0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("CHAE", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_2_jdoq1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("CHAE", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJ1_IUvS0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("H", doubleMetaphone.doubleMetaphone("JOSE", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJ2_mGfv1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("SAN ", doubleMetaphone.doubleMetaphone("SAN ", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleL_oOvY0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("LL", doubleMetaphone.doubleMetaphone("LL", false));
        assertEquals("L", doubleMetaphone.doubleMetaphone("LL", true));
        assertEquals("L", doubleMetaphone.doubleMetaphone("L", false));
        assertEquals("L", doubleMetaphone.doubleMetaphone("L", true));
        assertEquals("LL", doubleMetaphone.doubleMetaphone("LLL", false));
        assertEquals("LL", doubleMetaphone.doubleMetaphone("LLL", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConditionL0_IOoU1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("L", doubleMetaphone.doubleMetaphone("ALL", false));
        assertEquals("L", doubleMetaphone.doubleMetaphone("ALL", true));
        assertEquals("L", doubleMetaphone.doubleMetaphone("ASL", false));
        assertEquals("L", doubleMetaphone.doubleMetaphone("ASL", true));
        assertEquals("L", doubleMetaphone.doubleMetaphone("OSL", false));
        assertEquals("L", doubleMetaphone.doubleMetaphone("OSL", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleAEIOUY_TEVC4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("A", doubleMetaphone.doubleMetaphone("A", false));
        assertEquals("A", doubleMetaphone.doubleMetaphone("A", true));
        assertEquals("E", doubleMetaphone.doubleMetaphone("E", false));
        assertEquals("E", doubleMetaphone.doubleMetaphone("E", true));
        assertEquals("I", doubleMetaphone.doubleMetaphone("I", false));
        assertEquals("I", doubleMetaphone.doubleMetaphone("I", true));
        assertEquals("O", doubleMetaphone.doubleMetaphone("O", false));
        assertEquals("O", doubleMetaphone.doubleMetaphone("O", true));
        assertEquals("U", doubleMetaphone.doubleMetaphone("U", false));
        assertEquals("U", doubleMetaphone.doubleMetaphone("U", true));
        assertEquals("Y", doubleMetaphone.doubleMetaphone("Y", false));
        assertEquals("Y", doubleMetaphone.doubleMetaphone("Y", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleC1_PhvE0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CAESAR";
        boolean alternate = true;
        String expected = "S";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleC8_FcBY7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CIO";
        boolean alternate = true;
        String expected = "S";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleC9_XKWR8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CIE";
        boolean alternate = true;
        String expected = "S";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleC10_grhj9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CIA";
        boolean alternate = true;
        String expected = "S";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAEIOUY_LYXS1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "AEIOUY";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "E";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCHI_YzmB9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHI";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "K";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCHR_XJxC10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHR";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "K";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCHU_ciWs11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHU";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "K";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS1_ApPm0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "island";
        boolean alternate = true;
        String expected = "XSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS2_kzDm1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "isle";
        boolean alternate = true;
        String expected = "XSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS3_IVmy2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "carlisle";
        boolean alternate = true;
        String expected = "KRLSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS4_SrcL3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "carlysle";
        boolean alternate = true;
        String expected = "KRLSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS5_TtjH4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sugar-";
        boolean alternate = true;
        String expected = "XSR";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS6_tYwk5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "smith";
        boolean alternate = true;
        String expected = "SKMT";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS7_VYQj6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "snider";
        boolean alternate = true;
        String expected = "SKNDR";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS8_LCsT7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "schmidt";
        boolean alternate = true;
        String expected = "SKMT";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS9_EfDr8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "schneider";
        boolean alternate = true;
        String expected = "SKNDR";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS10_FTNk9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "resnais";
        boolean alternate = true;
        String expected = "RSKNS";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleL_oOvY0_1_fid3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("LL", doubleMetaphone.doubleMetaphone("LL", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConditionL0_IOoU1_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("L", doubleMetaphone.doubleMetaphone("ALL", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConditionL0_IOoU1_2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("L", doubleMetaphone.doubleMetaphone("ALL", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConditionL0_IOoU1_3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("L", doubleMetaphone.doubleMetaphone("ASL", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConditionL0_IOoU1_4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("L", doubleMetaphone.doubleMetaphone("ASL", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConditionL0_IOoU1_5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("L", doubleMetaphone.doubleMetaphone("OSL", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConditionL0_IOoU1_6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("L", doubleMetaphone.doubleMetaphone("OSL", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleAEIOUY_TEVC4_3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("E", doubleMetaphone.doubleMetaphone("E", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleAEIOUY_TEVC4_4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("E", doubleMetaphone.doubleMetaphone("E", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleAEIOUY_TEVC4_5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("I", doubleMetaphone.doubleMetaphone("I", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleAEIOUY_TEVC4_6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("I", doubleMetaphone.doubleMetaphone("I", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleAEIOUY_TEVC4_7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("O", doubleMetaphone.doubleMetaphone("O", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleAEIOUY_TEVC4_8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("O", doubleMetaphone.doubleMetaphone("O", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleAEIOUY_TEVC4_9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("U", doubleMetaphone.doubleMetaphone("U", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleAEIOUY_TEVC4_10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("U", doubleMetaphone.doubleMetaphone("U", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleAEIOUY_TEVC4_11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("Y", doubleMetaphone.doubleMetaphone("Y", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleAEIOUY_TEVC4_12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("Y", doubleMetaphone.doubleMetaphone("Y", true));
    }
}