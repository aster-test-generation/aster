/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_RefinedSoundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_Null_UTCz0() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex(null);
        assertEquals(null, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_Empty_TyOm1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("");
        assertEquals("", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_iyZJ0() throws EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String s1 = "example";
        String s2 = "example";
        int expected = SoundexUtils.difference(refinedSoundex, s1, s2);
        int actual = refinedSoundex.difference(s1, s2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringParameter_EntT0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String input = "example";
        Object expected = refinedSoundex.soundex(input);
        Object actual = refinedSoundex.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringParameter_bwVG1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        Object input = 123;
        EncoderException exception = assertThrows(EncoderException.class, () -> refinedSoundex.encode(input));
        assertEquals("Parameter supplied to RefinedSoundex encode is not of type java.lang.String", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullParameter_Kkjf2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        Object input = null;
        EncoderException exception = assertThrows(EncoderException.class, () -> refinedSoundex.encode(input));
        assertEquals("Parameter supplied to RefinedSoundex encode is not of type java.lang.String", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_hgFk3() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.encode(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmpty_AYXd4() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.encode("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMappingCodeWithValidInput_vHCJ0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("01230120022455012623010202");
        char actualMappingCode = refinedSoundex.getMappingCode('A');
        char expectedMappingCode = '0';
        Assertions.assertEquals(expectedMappingCode, actualMappingCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMappingCodeWithInvalidInput_mRHm1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("01230120022455012623010202");
        char actualMappingCode = refinedSoundex.getMappingCode('1');
        char expectedMappingCode = 0;
        Assertions.assertEquals(expectedMappingCode, actualMappingCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMappingCodeWithBoundaryInput_LcJi2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("01230120022455012623010202");
        char actualMappingCode = refinedSoundex.getMappingCode('Z');
        char expectedMappingCode = '2';
        Assertions.assertEquals(expectedMappingCode, actualMappingCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMappingCodeWithEmptyMapping_Skgx3() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("");
        char actualMappingCode = refinedSoundex.getMappingCode('A');
        char expectedMappingCode = 0;
        Assertions.assertEquals(expectedMappingCode, actualMappingCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_OneLetter_SsxW2_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("A");
        assertEquals("A0", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_TwoLetters_AGNF3_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("AB");
        assertEquals("A01", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_ThreeLetters_tpZk4_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("ABC");
        assertEquals("A013", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_FourLetters_DIcD5_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("ABCD");
        assertEquals("A0136", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_FiveLetters_NpWn6_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("ABCDE");
        assertEquals("A01360", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_SixLetters_HGuX7_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("ABCDEF");
        assertEquals("A013602", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_SevenLetters_DJab8_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("ABCDEFG");
        assertEquals("A0136024", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_EightLetters_vZSl9_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("ABCDEFGH");
        assertEquals("A01360240", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_NineLetters_jtPV10_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("ABCDEFGHI");
        assertEquals("A01360240", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_TenLetters_EBqt11_fid1() {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex("ABCDEFGHIJ");
        assertEquals("A013602404", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringParameter_bwVG1_1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        Object input = 123;
        EncoderException exception = assertThrows(EncoderException.class, () -> refinedSoundex.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullParameter_Kkjf2_1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        Object input = null;
        EncoderException exception = assertThrows(EncoderException.class, () -> refinedSoundex.encode(input));
    }
}