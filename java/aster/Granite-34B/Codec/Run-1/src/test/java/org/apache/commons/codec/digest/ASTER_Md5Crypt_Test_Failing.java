/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Md5Crypt_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_YgWv0() {
        byte[] keyBytes = new byte[10]; // Replace with actual byte array
        String expected = "$apr1$CHXab6lG$6Ess4R24hjfHLZnPP6NRQ/"; // Replace with expected result
        String actual = Md5Crypt.apr1Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithKeyBytesNoSaltPrefixAndNoRandom_AHaR3() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String salt = null;
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals("$1$5nep5N9.5Yq5", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNoKeyBytesSaltPrefixAndRandom_XNMj4() {
        byte[] keyBytes = null;
        String salt = "$1$abcde$";
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals("$1$abcde$5nep5N9.5Yq5", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNoKeyBytesSaltPrefixAndNoRandom_FHWw5() {
        byte[] keyBytes = null;
        String salt = "$1$abcde$";
        String prefix = "$1$";
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, null);
        assertEquals("$1$abcde$5nep5N9.5Yq5", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNoKeyBytesNoSaltPrefixAndRandom_LyOh6() {
        byte[] keyBytes = null;
        String salt = null;
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals("$1$5nep5N9.5Yq5", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNoKeyBytesNoSaltPrefixAndNoRandom_evVG7() {
        byte[] keyBytes = null;
        String salt = null;
        String prefix = "$1$";
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, null);
        assertEquals("$1$5nep5N9.5Yq5", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_MPhO0() {
        byte[] keyBytes = new byte[]{0x00, 0x01, 0x02, 0x03};
        String salt = "$1$";
        String prefix = "";
        String expected = "$1$";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithSalt_LdWv1() {
        byte[] keyBytes = new byte[]{0x00, 0x01, 0x02, 0x03};
        String salt = "$1$";
        String prefix = "prefix";
        String expected = "$1$prefix";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_aeaV0() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String expected = "$1$/OJeGFIS$RgBqU.K4Mq6iFfogw7MJp.";
        String actual = Md5Crypt.md5Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithSalt_fYxv1() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String salt = "$1$<salt>$";
        String expected = "$1$<salt>$<hash>";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithSalt_wVgA0() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$1$12345678$";
        String expected = "$apr1$12345678$";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithoutSalt_aKWx1() {
        byte[] keyBytes = "password".getBytes();
        String salt = null;
        String expected = "$apr1$UHpeNt0O$XWuD02qWzj9mGG0Zv3IRb/";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithLongSalt_yYsC2() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$1$12345678$12345678";
        String expected = "$apr1$12345678$12345678";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_xYBU0() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        Random random = new Random();
        String expected = "$1$rTs1vt3Q$C2emJTa.o7fOBR27un7Al/";
        String actual = Md5Crypt.md5Crypt(keyBytes, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyPrefix_pUFu3() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String prefix = "";
        String expected = "MD5($1$RandomSalt$RandomString)";
        String actual = Md5Crypt.md5Crypt(keyBytes, prefix);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_TwMj0() {
        byte[] keyBytes = new byte[10];
        Random random = new Random();
        String actual = Md5Crypt.apr1Crypt(keyBytes, random);
        String expected = "$apr1$8hWbc/dZ$2I9LMqRBHPcUaE6jblr2B0";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_YgWv0_fid2() {
        byte[] keyBytes = new byte[10]; // Replace with actual byte array
        String expected = "expectedResult"; // Replace with expected result
        String actual = Md5Crypt.apr1Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithKeyBytesSaltPrefixAndRandom_weCA0_fid2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String salt = "$1$abcde$";
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals("$1$abcde$5nep5N9.5Yq5", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithKeyBytesSaltPrefixAndNoRandom_kTwE1_fid2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String salt = "$1$abcde$";
        String prefix = "$1$";
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, null);
        assertEquals("$1$abcde$5nep5N9.5Yq5", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithKeyBytesNoSaltPrefixAndNoRandom_AHaR3_fid2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String salt = null;
        String prefix = "$1$";
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, null);
        assertEquals("$1$5nep5N9.5Yq5", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_jhsp0_fid2() {
        String key = "password";
        String expected = "$apr1$12345678$9876543210";
        String actual = Md5Crypt.apr1Crypt(key);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_aeaV0_fid2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String expected = "$1$<salt>$<hash>";
        String actual = Md5Crypt.md5Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithoutSalt_aKWx1_fid2() {
        byte[] keyBytes = "password".getBytes();
        String salt = null;
        String expected = "$apr1$12345678$";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_xYBU0_fid2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        Random random = new Random();
        String expected = "MD5($1$RandomSalt$RandomString)";
        String actual = Md5Crypt.md5Crypt(keyBytes, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithPrefix_iAYq1_fid2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03};
        String prefix = "$1$RandomSalt$";
        String expected = "MD5($1$RandomSalt$RandomString)";
        String actual = Md5Crypt.md5Crypt(keyBytes, prefix);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_TwMj0_fid2() {
        byte[] keyBytes = new byte[10];
        Random random = new Random();
        String actual = Md5Crypt.apr1Crypt(keyBytes, random);
        String expected = "expected result";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_uupz0_fid2() {
        String key = "password";
        String salt = "salt";
        String expected = "$apr1$salt$5Tj.v.6v.4w";
        String actual = Md5Crypt.apr1Crypt(key, salt);
        Assertions.assertEquals(expected, actual);
    }
}