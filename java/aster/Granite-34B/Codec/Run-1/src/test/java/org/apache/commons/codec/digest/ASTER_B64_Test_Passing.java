/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.security.SecureRandom;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_B64_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSalt_FdKT0_1() {
        assertEquals(16, B64.getRandomSalt(16).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSalt_FdKT0_2() {
        assertEquals(20, B64.getRandomSalt(20).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSalt_FdKT0_3() {
        assertEquals(32, B64.getRandomSalt(32).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSaltWithSecureRandom_TVDL1_1() {
        assertEquals(16, B64.getRandomSalt(16, new SecureRandom()).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSaltWithSecureRandom_TVDL1_2() {
        assertEquals(20, B64.getRandomSalt(20, new SecureRandom()).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSaltWithSecureRandom_TVDL1_3() {
        assertEquals(32, B64.getRandomSalt(32, new SecureRandom()).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSaltWithZeroInput_wIqm3_1() {
        assertEquals(0, B64.getRandomSalt(0).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSaltWithLargeInput_DDvt4_1() {
        assertEquals(1024, B64.getRandomSalt(1024).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSaltWithLargeInput_DDvt4_2() {
        assertEquals(2048, B64.getRandomSalt(2048).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSaltWithLargeInput_DDvt4_3() {
        assertEquals(4096, B64.getRandomSalt(4096).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSaltWithInsufficientMemory_lyqH5() {
        try {
            B64.getRandomSalt(1024 * 1024 * 1024);
        } catch (OutOfMemoryError e) {
            assertEquals("Insufficient memory to generate salt", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSaltWithInsufficientMemoryAndSecureRandom_lnfs6() {
        try {
            B64.getRandomSalt(1024 * 1024 * 1024, new SecureRandom());
        } catch (OutOfMemoryError e) {
            assertEquals("Insufficient memory to generate salt", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSalt_Mvrc0() {
        final int num = 10;
        Random random = new Random();
        String salt = B64.getRandomSalt(num, random);
        assertEquals(10, salt.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSaltWithZeroNum_gxqN2() {
        final int num = 0;
        Random random = new Random();
        String salt = B64.getRandomSalt(num, random);
        assertEquals("", salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testB64from24bit_DaFI0() {
        byte b2 = 0;
        byte b1 = 0;
        byte b0 = 0;
        int outLen = 0;
        StringBuilder buffer = new StringBuilder();
        B64.b64from24bit(b2, b1, b0, outLen, buffer);
        assertEquals("", buffer.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testB64from24bitWithValues_Uocn1() {
        byte b2 = 1;
        byte b1 = 2;
        byte b0 = 3;
        int outLen = 4;
        StringBuilder buffer = new StringBuilder();
        B64.b64from24bit(b2, b1, b0, outLen, buffer);
        assertEquals("16E.", buffer.toString());
    }
}