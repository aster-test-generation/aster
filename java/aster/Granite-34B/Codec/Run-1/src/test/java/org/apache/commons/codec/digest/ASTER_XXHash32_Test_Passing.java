/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_XXHash32_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void update_with_valid_input_should_update_state_AEJf0() {
        XXHash32 hash = new XXHash32(0);
        byte[] input = new byte[]{1, 2, 3, 4};
        hash.update(input, 0, input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void update_with_invalid_input_should_not_update_state_RLjR1() {
        XXHash32 hash = new XXHash32(0);
        byte[] input = new byte[]{1, 2, 3, 4};
        hash.update(input, 0, -1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void update_with_null_input_should_throw_exception_YOsI2() {
        XXHash32 hash = new XXHash32(0);
        byte[] input = null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void update_with_empty_input_should_not_update_state_IHRz3() {
        XXHash32 hash = new XXHash32(0);
        byte[] input = new byte[0];
        hash.update(input, 0, input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_gPSU0() {
        XXHash32 hash = new XXHash32(0);
        hash.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetWithNoArgs_NAWf1() {
        XXHash32 hash = new XXHash32();
        hash.reset();
    }
}