/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Blake3_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHash_hbdr0() {
        byte[] key = new byte[32];
        Blake3 blake3 = Blake3.initKeyedHash(key);
        assertNotNull(blake3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithNullKey_fNUD1() {
        byte[] key = null;
        Assertions.assertThrows(NullPointerException.class, () -> Blake3.initKeyedHash(key));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithInvalidKeyLength_TuUv2() {
        byte[] key = new byte[16];
        Assertions.assertThrows(IllegalArgumentException.class, () -> Blake3.initKeyedHash(key));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunction_wPhX0() {
        byte[] kdfContext = new byte[10]; // Replace with actual input
        Blake3 blake3 = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(blake3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunction_bsLc0() {
        byte[] kdfContext = new byte[10];
        Blake3.initKeyDerivationFunction(kdfContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithEmptyArgument_PHvB2() {
        byte[] kdfContext = new byte[0];
        Blake3.initKeyDerivationFunction(kdfContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithNonEmptyArgument_Jnfr3() {
        byte[] kdfContext = new byte[10];
        kdfContext[0] = 1;
        kdfContext[1] = 2;
        kdfContext[2] = 3;
        kdfContext[3] = 4;
        kdfContext[4] = 5;
        kdfContext[5] = 6;
        kdfContext[6] = 7;
        kdfContext[7] = 8;
        kdfContext[8] = 9;
        kdfContext[9] = 10;
        Blake3.initKeyDerivationFunction(kdfContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithMaxArgument_zHgp4() {
        byte[] kdfContext = new byte[10];
        kdfContext[0] = -1;
        kdfContext[1] = -1;
        kdfContext[2] = -1;
        kdfContext[3] = -1;
        kdfContext[4] = -1;
        kdfContext[5] = -1;
        kdfContext[6] = -1;
        kdfContext[7] = -1;
        kdfContext[8] = -1;
        kdfContext[9] = -1;
        Blake3.initKeyDerivationFunction(kdfContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithMinArgument_RMyd5() {
        byte[] kdfContext = new byte[10];
        kdfContext[0] = 0;
        kdfContext[1] = 0;
        kdfContext[2] = 0;
        kdfContext[3] = 0;
        kdfContext[4] = 0;
        kdfContext[5] = 0;
        kdfContext[6] = 0;
        kdfContext[7] = 0;
        kdfContext[8] = 0;
        kdfContext[9] = 0;
        Blake3.initKeyDerivationFunction(kdfContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithRandomArgument_PZAA6() {
        byte[] kdfContext = new byte[10];
        new Random().nextBytes(kdfContext);
        Blake3.initKeyDerivationFunction(kdfContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithMultipleArguments_TSfI7() {
        byte[] kdfContext1 = new byte[10];
        byte[] kdfContext2 = new byte[10];
        byte[] kdfContext3 = new byte[10];
        byte[] kdfContext4 = new byte[10];
        byte[] kdfContext5 = new byte[10];
        new Random().nextBytes(kdfContext1);
        new Random().nextBytes(kdfContext2);
        new Random().nextBytes(kdfContext3);
        new Random().nextBytes(kdfContext4);
        new Random().nextBytes(kdfContext5);
        Blake3.initKeyDerivationFunction(kdfContext1);
        Blake3.initKeyDerivationFunction(kdfContext2);
        Blake3.initKeyDerivationFunction(kdfContext3);
        Blake3.initKeyDerivationFunction(kdfContext4);
        Blake3.initKeyDerivationFunction(kdfContext5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_NVzt0_TacG0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] input = new byte[]{0x01, 0x02, 0x03};
        Blake3 result = blake3.update(input);
        assertEquals(blake3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithOffset_zyYf1_sVCl0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] input = new byte[]{0x01, 0x02, 0x03};
        int offset = 1;
        Blake3 result = blake3.update(input, offset, input.length - offset);
        assertEquals(blake3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithOffsetAndLength_tnWn2_MTZk0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] input = new byte[]{0x01, 0x02, 0x03};
        int offset = 1;
        int length = 2;
        Blake3 result = blake3.update(input, offset, length);
        assertEquals(blake3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_ExhL7_FnYn0() {
        byte[] in = new byte[70];
        int offset = 60;
        int length = 10;
        Blake3 blake3 = Blake3.initHash();
        blake3.update(in, offset, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_uBXg8_cdHN0() {
        byte[] in = new byte[80];
        int offset = 70;
        int length = 10;
        Blake3 blake3 = Blake3.initHash();
        blake3.update(in, offset, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_yaoz9_pCVU0() {
        byte[] in = new byte[90];
        int offset = 80;
        int length = 10;
        Blake3 blake3 = Blake3.initHash();
        blake3.update(in, offset, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_TdRI10_hyXy0() {
        byte[] in = new byte[100];
        int offset = 90;
        int length = 10;
        Blake3 blake3 = Blake3.initHash();
        blake3.update(in, offset, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_kzaP12_pqcF0() {
        byte[] in = new byte[120];
        int offset = 110;
        int length = 10;
        Blake3 blake3 = Blake3.initHash();
        blake3.update(in, offset, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_btmE13_ALAL0() {
        byte[] in = new byte[130];
        int offset = 120;
        int length = 10;
        Blake3 blake3 = Blake3.initHash();
        blake3.update(in, offset, length);
    }
}