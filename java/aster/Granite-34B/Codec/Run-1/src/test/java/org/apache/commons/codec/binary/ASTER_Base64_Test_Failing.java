/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base64_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes_POvV0() {
        BigInteger bigInt = new BigInteger("1234567890");
        byte[] result = Base64.toIntegerBytes(bigInt);
        byte[] expected = {0, 0, 0, 0, 0, 0, 45, -61};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes2_tUYi1() {
        BigInteger bigInt = new BigInteger("12345678901234567890");
        byte[] result = Base64.toIntegerBytes(bigInt);
        byte[] expected = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, -61};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_Yijg0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        assertArrayEquals(expected, Base64.encodeBase64Chunked(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64ChunkedWithLineLength_OtCp1() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        Base64 base64 = new Base64(5);
        assertArrayEquals(expected, base64.encodeBase64Chunked(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64ChunkedWithUrlSafe_XzOf2() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        Base64 base64 = new Base64(true);
        assertArrayEquals(expected, base64.encodeBase64Chunked(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64ChunkedWithLineLengthAndUrlSafe_CNZD3() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        Base64 base64 = new Base64(5, new byte[]{'\n'}, true);
        assertArrayEquals(expected, base64.encodeBase64Chunked(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64ChunkedWithLineLengthAndUrlSafeAndDecodingPolicy_YnrP4() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        Base64 base64 = new Base64(5, new byte[]{'\n'}, true, CodecPolicy.LENIENT);
        assertArrayEquals(expected, base64.encodeBase64Chunked(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeStringWithLineLength_zyLK1() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        String encodedString = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals("AQID\nBAU=", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_bRjf0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        assertArrayEquals(expected, Base64.encodeBase64(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithLineLength_OshJ1() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        Base64 base64 = new Base64(5);
        assertArrayEquals(expected, base64.encodeBase64(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithUrlSafe_tvaH2() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        Base64 base64 = new Base64(true);
        assertArrayEquals(expected, base64.encodeBase64(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInteger_sgga0() {
        BigInteger bigInteger = new BigInteger("1234567890");
        byte[] expected = new byte[]{49, 50, 51, 52, 53, 54, 55, 56, 57, 48};
        byte[] actual = Base64.encodeInteger(bigInteger);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeIntegerWithNullBigInteger_vHWH1() {
        BigInteger bigInteger = null;
        byte[] expected = null;
        byte[] actual = Base64.encodeInteger(bigInteger);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeIntegerWithNegativeBigInteger_LVJb2() {
        BigInteger bigInteger = new BigInteger("-1234567890");
        byte[] expected = new byte[]{-49, -50, -51, -52, -53, -54, -55, -56, -57, -48};
        byte[] actual = Base64.encodeInteger(bigInteger);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeIntegerWithZeroBigInteger_ZDUT3() {
        BigInteger bigInteger = new BigInteger("0");
        byte[] expected = new byte[]{48};
        byte[] actual = Base64.encodeInteger(bigInteger);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeIntegerWithMaxBigInteger_rHrR4() {
        BigInteger bigInteger = new BigInteger("170141183460469231731687303715884105727");
        byte[] expected = new byte[]{49, 55, 48, 49, 52, 49, 49, 56, 51, 52, 54, 48, 52, 54, 57, 50, 51, 49, 55, 51, 49, 54, 56, 55, 51, 48, 51, 55, 49, 53, 56, 56, 52, 49, 48, 53, 55, 50, 55};
        byte[] actual = Base64.encodeInteger(bigInteger);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_eIWq0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = true;
        boolean urlSafe = true;
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_2_NsYC1() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = true;
        boolean urlSafe = false;
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_3_lcBv2() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = false;
        boolean urlSafe = true;
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_4_Iltr3() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = false;
        boolean urlSafe = false;
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_YnbU0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = true;
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_2_oQwo1() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = false;
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_oBaZ0() {
        byte[] base64Data = new byte[]{65, 66, 67};
        byte[] expected = new byte[]{65, 66, 67};
        assertArrayEquals(expected, Base64.decodeBase64(base64Data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithLineLength_PgwH1() {
        byte[] base64Data = new byte[]{65, 66, 67};
        byte[] expected = new byte[]{65, 66, 67};
        assertArrayEquals(expected, new Base64(10).decodeBase64(base64Data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithUrlSafe_YSUB2() {
        byte[] base64Data = new byte[]{65, 66, 67};
        byte[] expected = new byte[]{65, 66, 67};
        assertArrayEquals(expected, new Base64(true).decodeBase64(base64Data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithLineLengthAndUrlSafe_gHOX3() {
        byte[] base64Data = new byte[]{65, 66, 67};
        byte[] expected = new byte[]{65, 66, 67};
        assertArrayEquals(expected, new Base64(10, new byte[]{10}, true).decodeBase64(base64Data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithDecodingPolicy_teFV4() {
        byte[] base64Data = new byte[]{65, 66, 67};
        byte[] expected = new byte[]{65, 66, 67};
        assertArrayEquals(expected, new Base64(10, new byte[]{10}, true, CodecPolicy.STRICT).decodeBase64(base64Data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_DiSw0() {
        byte[] binaryData = new byte[]{1, 2, 3};
        boolean isChunked = true;
        boolean urlSafe = true;
        int maxResultSize = 100;
        byte[] expected = new byte[]{49, 50, 51};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_isChunked_zgBO2() {
        byte[] binaryData = new byte[]{1, 2, 3};
        boolean isChunked = false;
        boolean urlSafe = true;
        int maxResultSize = 100;
        byte[] expected = new byte[]{49, 50, 51};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_urlSafe_ohrd3() {
        byte[] binaryData = new byte[]{1, 2, 3};
        boolean isChunked = true;
        boolean urlSafe = false;
        int maxResultSize = 100;
        byte[] expected = new byte[]{49, 50, 51};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_0_Xjsz0() {
        byte[] arrayOctet = null;
        boolean result = Base64.isBase64(arrayOctet);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_GCit0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        assertArrayEquals(expected, Base64.encodeBase64URLSafe(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_AYwU1() {
        Base64 base64 = new Base64(0, new byte[0]);
        byte[] pArray = new byte[10];
        long expected = 0;
        long actual = base64.getEncodedLength(pArray);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonEmptyArray_qhFa1() {
        Base64 base64 = new Base64();
        byte[] input = {0, 1, 2, 3};
        byte[] expected = {48, 49, 50, 51};
        byte[] actual = base64.encode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize_jVRG0() {
        Base64 base64 = new Base64();
        assertEquals(1024, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLength_ZUSj1() {
        Base64 base64 = new Base64(10);
        assertEquals(1024, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLengthAndSeparator_lLEj2() {
        Base64 base64 = new Base64(10, new byte[]{'\n'});
        assertEquals(1024, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithUrlSafe_AuqQ3() {
        Base64 base64 = new Base64(true);
        assertEquals(1024, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLengthAndSeparatorAndUrlSafe_QPfQ4() {
        Base64 base64 = new Base64(10, new byte[]{'\n'}, true);
        assertEquals(1024, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLengthAndSeparatorAndUrlSafeAndDecodingPolicy_FVZd5() {
        Base64 base64 = new Base64(10, new byte[]{'\n'}, true, CodecPolicy.STRICT);
        assertEquals(1024, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithArrayOctetAndNotAllowWSPad_OOOq1() {
        Base64 base64 = new Base64(0, new byte[0], false);
        byte[] arrayOctet = new byte[1];
        arrayOctet[0] = 65;
        boolean result = base64.isInAlphabet(arrayOctet, false);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithArrayOctetAndNotAllowWSPadAndNotisInAlphabet_wcuU3() {
        Base64 base64 = new Base64(0, new byte[0], false);
        byte[] arrayOctet = new byte[1];
        arrayOctet[0] = 66;
        boolean result = base64.isInAlphabet(arrayOctet, false);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithArrayOctetAndAllowWSPadAndOctetIsPad_Fboz4() {
        Base64 base64 = new Base64(0, new byte[0], false);
        byte[] arrayOctet = new byte[1];
        arrayOctet[0] = 61;
        boolean result = base64.isInAlphabet(arrayOctet, true);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithArrayOctetAndNotAllowWSPadAndOctetIsPad_vcgI5() {
        Base64 base64 = new Base64(0, new byte[0], false);
        byte[] arrayOctet = new byte[1];
        arrayOctet[0] = 61;
        boolean result = base64.isInAlphabet(arrayOctet, false);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithArrayOctetAndAllowWSPadAndOctetIsWhitespace_VvpK6() {
        Base64 base64 = new Base64(0, new byte[0], false);
        byte[] arrayOctet = new byte[1];
        arrayOctet[0] = 32;
        boolean result = base64.isInAlphabet(arrayOctet, true);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithArrayOctetAndNotAllowWSPadAndOctetIsWhitespace_WkVX7() {
        Base64 base64 = new Base64(0, new byte[0], false);
        byte[] arrayOctet = new byte[1];
        arrayOctet[0] = 32;
        boolean result = base64.isInAlphabet(arrayOctet, false);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToStringWithArrayAndLineLength_nYDh1() {
        Base64 base64 = new Base64(10);
        byte[] array = new byte[10];
        assertEquals("", base64.encodeToString(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToStringWithArrayAndLineLengthAndLineSeparator_cHUE2() {
        Base64 base64 = new Base64(10, new byte[0]);
        byte[] array = new byte[10];
        assertEquals("", base64.encodeToString(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToStringWithArrayAndLineLengthAndLineSeparatorAndUrlSafe_FiSj3() {
        Base64 base64 = new Base64(10, new byte[0], true);
        byte[] array = new byte[10];
        assertEquals("", base64.encodeToString(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToStringWithArrayAndLineLengthAndLineSeparatorAndUrlSafeAndDecodingPolicy_saYX4() {
        Base64 base64 = new Base64(10, new byte[0], true, CodecPolicy.STRICT);
        byte[] array = new byte[10];
        assertEquals("", base64.encodeToString(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_yGSa0() throws DecoderException {
        Base64 base64 = new Base64();
        byte[] input = "Hello, World!".getBytes();
        byte[] expected = "SGVsbG8sIFdvcmxkIQ==".getBytes();
        assertArrayEquals(expected, base64.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithLineLength_kIfu4() throws DecoderException {
        Base64 base64 = new Base64(76);
        byte[] input = "Hello, World!".getBytes();
        byte[] expected = "SGVsbG8sIFdvcmxkIQ==".getBytes();
        assertArrayEquals(expected, base64.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUrlSafe_xqlK5() throws DecoderException {
        Base64 base64 = new Base64(true);
        byte[] input = "Hello, World!".getBytes();
        byte[] expected = "SGVsbG8sIFdvcmxkIQ==".getBytes();
        assertArrayEquals(expected, base64.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithLineLengthAndSeparator_bFHD6() throws DecoderException {
        Base64 base64 = new Base64(76, "\n".getBytes());
        byte[] input = "Hello, World!".getBytes();
        byte[] expected = "SGVsbG8sIFdvcmxkIQ==".getBytes();
        assertArrayEquals(expected, base64.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithLineLengthAndSeparatorAndUrlSafe_IUNw7() throws DecoderException {
        Base64 base64 = new Base64(76, "\n".getBytes(), true);
        byte[] input = "Hello, World!".getBytes();
        byte[] expected = "SGVsbG8sIFdvcmxkIQ==".getBytes();
        assertArrayEquals(expected, base64.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithLineLengthAndSeparatorAndUrlSafeAndPolicy_hRkB8() throws DecoderException {
        Base64 base64 = new Base64(76, "\n".getBytes(), true, CodecPolicy.LENIENT);
        byte[] input = "Hello, World!".getBytes();
        byte[] expected = "SGVsbG8sIFdvcmxkIQ==".getBytes();
        assertArrayEquals(expected, base64.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonEmptyArray_hxto1() {
        Base64 base64 = new Base64();
        byte[] input = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = {48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        byte[] actual = base64.encode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCodecPolicy_1_FNPi0() {
        Base64 base64 = new Base64();
        assertEquals(base64.getCodecPolicy(), CodecPolicy.STRICT);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCodecPolicy_2_MkVJ1() {
        Base64 base64 = new Base64(10);
        assertEquals(base64.getCodecPolicy(), CodecPolicy.STRICT);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCodecPolicy_3_KozW2() {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3});
        assertEquals(base64.getCodecPolicy(), CodecPolicy.STRICT);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCodecPolicy_4_NIFo3() {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3}, true);
        assertEquals(base64.getCodecPolicy(), CodecPolicy.STRICT);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCodecPolicy_10_wIlc9() {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3}, false);
        assertEquals(base64.getCodecPolicy(), CodecPolicy.STRICT);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_2_MPYE1() {
        Base64 base64 = new Base64();
        byte[] pArray = new byte[10];
        byte[] expected = new byte[10];
        assertArrayEquals(expected, base64.decode(pArray));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_1_bUVH0() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[0];
        boolean result = base64.containsAlphabetOrPad(arrayOctet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_2_eTha1() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.LENIENT);
        byte[] arrayOctet = new byte[0];
        boolean result = base64.containsAlphabetOrPad(arrayOctet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_3_gpta2() {
        Base64 base64 = new Base64(0, new byte[0], false);
        byte[] arrayOctet = new byte[0];
        boolean result = base64.containsAlphabetOrPad(arrayOctet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_4_yiSP3() {
        Base64 base64 = new Base64(0, new byte[0]);
        byte[] arrayOctet = new byte[0];
        boolean result = base64.containsAlphabetOrPad(arrayOctet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_5_GXLM4() {
        Base64 base64 = new Base64();
        byte[] arrayOctet = new byte[0];
        boolean result = base64.containsAlphabetOrPad(arrayOctet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithLineLengthAndUrlSafe_gXIE3_JatV0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        Base64 base64 = new Base64(5, new byte[0], true);
        assertArrayEquals(expected, base64.encodeBase64(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithLineLengthAndUrlSafeAndDecodingPolicy_vHAs4_SNRA0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        Base64 base64 = new Base64(5, new byte[]{10}, true, CodecPolicy.LENIENT);
        assertArrayEquals(expected, base64.encodeBase64(binaryData));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithLineLengthAndSeparator_iUfe3_NUjd0() throws EncoderException {
        Base64 base64 = new Base64(76, new byte[]{13, 10});
        byte[] input = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        assertArrayEquals(expected, base64.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithLineLengthAndSeparatorAndUrlSafe_bGyw4_WvAf0() throws EncoderException {
        Base64 base64 = new Base64(76, new byte[]{13, 10}, true);
        byte[] input = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        assertArrayEquals(expected, base64.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe4_rKQy3_fid2() {
        Base64 base64 = new Base64(10, new byte[10]);
        assertTrue(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe5_dXVX4_fid2() {
        Base64 base64 = new Base64(10);
        assertTrue(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe6_SVuu5_fid2() {
        Base64 base64 = new Base64();
        assertTrue(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String_lAby0_fid2() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        String encodedString = Base64.encodeBase64String(binaryData);
        assertEquals("AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJipOYk5qTnqOso6yjrKOs46zDrOOs46zjrOOs46zjrOOs46zjrA==", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString_Lawu0_fid2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        String encodedString = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals("AQIDBAU=", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeStringWithUrlSafe_KBiN2_fid2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        String encodedString = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals("AQID-BAU=", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_0_nNgT0_fid2() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet((byte) 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_1_vWUL1_fid2() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.LENIENT);
        assertTrue(base64.isInAlphabet((byte) 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_2_yPqs2_fid2() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet((byte) 2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_3_QVqB3_fid2() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.LENIENT);
        assertTrue(base64.isInAlphabet((byte) 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_4_QBNG4_fid2() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet((byte) 4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_5_lFkI5_fid2() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.LENIENT);
        assertTrue(base64.isInAlphabet((byte) 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_6_WFEu6_fid2() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet((byte) 6));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_7_Pokh7_fid2() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.LENIENT);
        assertTrue(base64.isInAlphabet((byte) 7));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_8_JENu8_fid2() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet((byte) 8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_9_Yatu9_fid2() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.LENIENT);
        assertTrue(base64.isInAlphabet((byte) 9));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_10_ALbA10_fid2() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet((byte) 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_11_JtBc11_fid2() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.LENIENT);
        assertTrue(base64.isInAlphabet((byte) 11));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_12_sSlf12_fid2() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet((byte) 12));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_13_wgFP13_fid2() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.LENIENT);
        assertTrue(base64.isInAlphabet((byte) 13));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_14_dBzv14_fid2() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet((byte) 14));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_15_aZsE15_fid2() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.LENIENT);
        assertTrue(base64.isInAlphabet((byte) 15));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isArrayByteBase64Test_DCdp0_fid2() {
        byte[] arrayOctet = new byte[10];
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithArrayOctetAndAllowWSPadAndNotisInAlphabet_KMLJ2_fid2() {
        Base64 base64 = new Base64(0, new byte[0], false);
        byte[] arrayOctet = new byte[1];
        arrayOctet[0] = 66;
        boolean result = base64.isInAlphabet(arrayOctet, true);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_maxResultSize_CiGg4() {
        byte[] binaryData = new byte[]{1, 2, 3};
        boolean isChunked = true;
        boolean urlSafe = true;
        int maxResultSize = 2;
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,
        () -> Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize));
        assertEquals("Input array too big, the output array would be bigger (" + 3 + ") than the specified maximum size of " + 2,
        exception.getMessage());
    }
}