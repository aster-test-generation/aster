/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_StringUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8_SEtc0() {
        byte[] bytes = new byte[]{65, 66, 67};
        String expected = new String(bytes, StandardCharsets.UTF_8);
        String actual = StringUtils.newStringUtf8(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16WithNullInput_vgQH1() {
        String input = null;
        byte[] expected = null;
        assertArrayEquals(expected, StringUtils.getBytesUtf16(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBytesIso8859_1_FHCM0() {
        String input = "Hello, World!";
        byte[] expected = {72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33};
        assertArrayEquals(expected, StringUtils.getBytesIso8859_1(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBytesIso8859_1WithNullInput_DVNH1() {
        String input = null;
        byte[] expected = null;
        assertArrayEquals(expected, StringUtils.getBytesIso8859_1(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Le_AHYk0() {
        String input = "Hello, World!";
        byte[] expected = {0x48, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x2C, 0x00, 0x20, 0x00, 0x57, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x21, 0x00};
        byte[] actual = StringUtils.getBytesUtf16Le(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16LeWithNullInput_rycn1() {
        String input = null;
        byte[] expected = null;
        byte[] actual = StringUtils.getBytesUtf16Le(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16LeWithEmptyInput_JmOv2() {
        String input = "";
        byte[] expected = {};
        byte[] actual = StringUtils.getBytesUtf16Le(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Le_oIyZ0() {
        byte[] bytes = new byte[]{0x48, 0x65, 0x6C, 0x6C, 0x6F};
        String expected = new String(bytes, StandardCharsets.UTF_16LE);
        String actual = StringUtils.newStringUtf16Le(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16_cihl0() {
        byte[] bytes = new byte[]{0, 1, 2, 3};
        String expected = new String(bytes, StandardCharsets.UTF_16);
        String actual = StringUtils.newStringUtf16(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8_ZFto0() {
        String input = "Hello, World!";
        ByteBuffer expected = ByteBuffer.wrap(input.getBytes(StandardCharsets.UTF_8));
        ByteBuffer actual = StringUtils.getByteBufferUtf8(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8NullInput_XZLp1() {
        String input = null;
        ByteBuffer expected = null;
        ByteBuffer actual = StringUtils.getByteBufferUtf8(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1_DQTZ0() {
        byte[] bytes = new byte[]{65, 66, 67};
        String expected = new String(bytes, StandardCharsets.ISO_8859_1);
        String actual = StringUtils.newStringIso8859_1(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1WithNullBytes_FfqH1() {
        byte[] bytes = null;
        String expected = null;
        String actual = StringUtils.newStringIso8859_1(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUsAscii_lZIY0() {
        String input = "Hello, World!";
        byte[] expected = {72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33};
        byte[] actual = StringUtils.getBytesUsAscii(input);
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUsAsciiNullInput_FqId1() {
        String input = null;
        byte[] expected = null;
        byte[] actual = StringUtils.getBytesUsAscii(input);
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUsAsciiEmptyInput_BCQR2() {
        String input = "";
        byte[] expected = {};
        byte[] actual = StringUtils.getBytesUsAscii(input);
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringWithValidInputs_cYzd0() {
        String expected = "Hello World";
        byte[] bytes = expected.getBytes();
        String actual = StringUtils.newString(bytes, "UTF-8");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringWithInvalidInputs_Ekdw1() {
        byte[] bytes = null;
        String charsetName = "UTF-16";
        try {
            StringUtils.newString(bytes, charsetName);
        } catch (Exception e) {
            assertEquals("UTF-16: null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUncheckedWithValidInput_Kdns0() {
        String input = "Hello, World!";
        String charsetName = "UTF-8";
        byte[] expected = new byte[]{72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33};
        byte[] actual = StringUtils.getBytesUnchecked(input, charsetName);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUncheckedWithNullInput_lYPY1() {
        String input = null;
        String charsetName = "UTF-8";
        byte[] expected = null;
        byte[] actual = StringUtils.getBytesUnchecked(input, charsetName);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUncheckedWithUnsupportedCharset_DnTH2() {
        String input = "Hello, World!";
        String charsetName = "InvalidCharset";
        try {
            StringUtils.getBytesUnchecked(input, charsetName);
            fail("Expected IllegalStateException");
        } catch (IllegalStateException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8_vZob0() {
        String input = "Hello, World!";
        byte[] expected = {72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33};
        assertArrayEquals(expected, StringUtils.getBytesUtf8(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8NullInput_cuxS1() {
        String input = null;
        byte[] expected = null;
        assertArrayEquals(expected, StringUtils.getBytesUtf8(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Be_PhNs0() {
        byte[] bytes = new byte[]{0, 1, 2, 3};
        String expected = new String(bytes, StandardCharsets.UTF_16BE);
        String actual = StringUtils.newStringUtf16Be(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAscii_ZjqN0() {
        byte[] bytes = new byte[]{65, 66, 67};
        String actual = StringUtils.newStringUsAscii(bytes);
        String expected = new String(bytes, StandardCharsets.US_ASCII);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAsciiWithNullInput_yNGJ1() {
        byte[] bytes = null;
        String actual = StringUtils.newStringUsAscii(bytes);
        String expected = null;
        assertEquals(expected, actual);
    }
}