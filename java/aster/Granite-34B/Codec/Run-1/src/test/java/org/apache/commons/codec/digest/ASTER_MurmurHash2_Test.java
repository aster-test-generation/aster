/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash2_Test {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_CYxy0() {
        byte[] data = new byte[0];
        int length = 0;
        long expected = 0xe17a1465;
        long actual = MurmurHash2.hash64(data, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithLength_nfcT1() {
        byte[] data = new byte[10];
        int length = 10;
        long expected = 0xe17a1465;
        long actual = MurmurHash2.hash64(data, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithNullData_ojWW5() {
        byte[] data = null;
        int length = 0;
        long expected = 0xe17a1465;
        long actual = MurmurHash2.hash64(data, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithNegativeLength_YVKc7() {
        byte[] data = new byte[10];
        int length = -1;
        long expected = 0xe17a1465;
        long actual = MurmurHash2.hash64(data, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_nxCQ0() {
        byte[] data = new byte[]{0, 1, 2, 3};
        int length = 4;
        int seed = 0;
        int expected = -1044475917;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_TZIf1() {
        byte[] data = new byte[0];
        int length = 0;
        int seed = 123;
        int expected = 123;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_zApx0() {
        String text = "Hello, World!";
        int from = 0;
        int length = 13;
        long expected = -4802337536393885937L;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_withEmptyText_xeLq1() {
        String text = "";
        int from = 0;
        int length = 0;
        long expected = 0L;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_withNullText_KVzJ2() {
        String text = null;
        int from = 0;
        int length = 0;
        long expected = 0L;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_withNegativeFrom_DWsL3() {
        String text = "Hello, World!";
        int from = -1;
        int length = 13;
        long expected = -4802337536393885937L;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_withNegativeLength_wZGW4() {
        String text = "Hello, World!";
        int from = 0;
        int length = -1;
        long expected = 0L;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_withFromGreaterThanLength_rygb5() {
        String text = "Hello, World!";
        int from = 14;
        int length = 13;
        long expected = 0L;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_withEmptyText_andNegativeFrom_qxkm6() {
        String text = "";
        int from = -1;
        int length = 0;
        long expected = 0L;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_withEmptyText_andNegativeLength_lqdY7() {
        String text = "";
        int from = 0;
        int length = -1;
        long expected = 0L;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_withEmptyText_andFromGreaterThanLength_gvJH8() {
        String text = "";
        int from = 1;
        int length = 0;
        long expected = 0L;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_VsUJ0() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 123;
        long expected = 1234567890; // Replace with the expected hash value
        long actual = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithEmptyData_ERGA1() {
        byte[] data = new byte[0];
        int length = 0;
        int seed = 123;
        long expected = 1234567890; // Replace with the expected hash value for empty data
        long actual = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, actual);
    }
}