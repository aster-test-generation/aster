/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CharSequenceUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesWithStringAndString_AbES0() {
        String s1 = "Hello";
        String s2 = "hello";
        boolean result = CharSequenceUtils.regionMatches(s1, true, 0, s2, 0, 5);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesWithStringAndStringBuilder_tZXI1() {
        String s1 = "Hello";
        StringBuilder s2 = new StringBuilder("hello");
        boolean result = CharSequenceUtils.regionMatches(s1, true, 0, s2, 0, 5);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesWithStringBuilderAndString_cAYX2() {
        StringBuilder s1 = new StringBuilder("Hello");
        String s2 = "hello";
        boolean result = CharSequenceUtils.regionMatches(s1, true, 0, s2, 0, 5);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesWithStringBuilderAndStringBuilder_YvNJ3() {
        StringBuilder s1 = new StringBuilder("Hello");
        StringBuilder s2 = new StringBuilder("hello");
        boolean result = CharSequenceUtils.regionMatches(s1, true, 0, s2, 0, 5);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesWithStringAndStringAndFalse_vbjn4() {
        String s1 = "Hello";
        String s2 = "hello";
        boolean result = CharSequenceUtils.regionMatches(s1, false, 0, s2, 0, 5);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesWithStringAndStringBuilderAndFalse_NOeb5() {
        String s1 = "Hello";
        StringBuilder s2 = new StringBuilder("hello");
        boolean result = CharSequenceUtils.regionMatches(s1, false, 0, s2, 0, 5);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesWithStringBuilderAndStringAndFalse_yZgu6() {
        StringBuilder s1 = new StringBuilder("Hello");
        String s2 = "hello";
        boolean result = CharSequenceUtils.regionMatches(s1, false, 0, s2, 0, 5);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesWithStringBuilderAndStringBuilderAndFalse_JFfJ7() {
        StringBuilder s1 = new StringBuilder("Hello");
        StringBuilder s2 = new StringBuilder("hello");
        boolean result = CharSequenceUtils.regionMatches(s1, false, 0, s2, 0, 5);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesWithStringAndStringAndStart_hPnq8() {
        String s1 = "Hello";
        String s2 = "llo";
        boolean result = CharSequenceUtils.regionMatches(s1, true, 2, s2, 0, 3);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesWithStringAndStringBuilderAndStart_QcaO9() {
        String s1 = "Hello";
        StringBuilder s2 = new StringBuilder("llo");
        boolean result = CharSequenceUtils.regionMatches(s1, true, 2, s2, 0, 3);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesWithStringBuilderAndStringAndStart_QCSn10() {
        StringBuilder s1 = new StringBuilder("Hello");
        String s2 = "llo";
        boolean result = CharSequenceUtils.regionMatches(s1, true, 2, s2, 0, 3);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesWithStringBuilderAndStringBuilderAndStart_FfRL11() {
        StringBuilder s1 = new StringBuilder("Hello");
        StringBuilder s2 = new StringBuilder("llo");
        boolean result = CharSequenceUtils.regionMatches(s1, true, 2, s2, 0, 3);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatchesWithStringAndStringAndStartAndFalse_amnB12_fid1() {
        String s1 = "Hello";
        String s2 = "llo";
        boolean result = CharSequenceUtils.regionMatches(s1, false, 2, s2, 0, 3);
        assertTrue(result);
    }
}