/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Crypt_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSha512Salt_UoFD1() {
        byte[] keyBytes = new byte[]{0x00, 0x01, 0x02, 0x03};
        String salt = Sha2Crypt.SHA512_PREFIX + "salt";
        String expected = Sha2Crypt.sha512Crypt(keyBytes, salt);
        String actual = Crypt.crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSha256Salt_ExuV2() {
        byte[] keyBytes = new byte[]{0x00, 0x01, 0x02, 0x03};
        String salt = Sha2Crypt.SHA256_PREFIX + "salt";
        String expected = Sha2Crypt.sha256Crypt(keyBytes, salt);
        String actual = Crypt.crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMd5Salt_OLgV3() {
        byte[] keyBytes = new byte[]{0x00, 0x01, 0x02, 0x03};
        String salt = Md5Crypt.MD5_PREFIX + "salt";
        String expected = Md5Crypt.md5Crypt(keyBytes, salt);
        String actual = Crypt.crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullKey_rbdL1() {
        String key = null;
        String salt = "salt";
        String expected = null;
        String actual = Crypt.crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptySalt_YsZn4() {
        String key = "key";
        String salt = "";
        String expected = "";
        String actual = Crypt.crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyKeyAndSalt_GTOs7() {
        String key = "";
        String salt = "";
        String expected = "";
        String actual = Crypt.crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullKeyAndSalt_LNKx8() {
        String key = null;
        String salt = null;
        String expected = null;
        String actual = Crypt.crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptySalt_RMdX1() {
        byte[] keyBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        String expected = "CRYPT_OUTPUT_WITH_EMPTY_SALT";
        String actual = Crypt.crypt(keyBytes, "");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSalt_vOrS2() {
        byte[] keyBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        String salt = "my_salt";
        String expected = "CRYPT_OUTPUT_WITH_SALT";
        String actual = Crypt.crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_acOr0() {
        String key = "key";
        String salt = "salt";
        String expected = "expected";
        String actual = Crypt.crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyKey_GAbW2() {
        String key = "";
        String salt = "salt";
        String expected = "";
        String actual = Crypt.crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_dNRJ3_fid2() {
        String key = "key";
        String salt = null;
        String expected = null;
        String actual = Crypt.crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonNullKey_cwoS1() {
        String key = "test";
        String expected = Crypt.crypt(key, null);
        assertEquals(expected, "test");
    }
}