/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullString_sray4() {
        QCodec qCodec = new QCodec();
        String str = null;
        try {
            qCodec.decode(str);
        } catch (DecoderException e) {
            assertEquals("String to be decoded cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getEncoding_QCodecWithCharset_Q_tNHI0() {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        assertEquals("Q", qCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getEncoding_QCodecWithString_Q_mKMK1() {
        QCodec qCodec = new QCodec("UTF-8");
        assertEquals("Q", qCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getEncoding_QCodecWithoutParameter_Q_soZB2() {
        QCodec qCodec = new QCodec();
        assertEquals("Q", qCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUnsupportedType_gvhR2() {
        QCodec qCodec = new QCodec();
        Object input = 123;
        try {
            qCodec.decode(input);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Objects of type"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingNull_iSgU0() {
        QCodec qCodec = new QCodec();
        byte[] bytes = null;
        byte[] result = qCodec.doEncoding(bytes);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingEmpty_ZItB1() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[0];
        byte[] result = qCodec.doEncoding(bytes);
        assert result.length == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_MsmQ0() throws EncoderException {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        String sourceStr = "source string";
        String expected = qCodec.encode(sourceStr, Charset.defaultCharset());
        assertEquals(expected, qCodec.encode(sourceStr, Charset.defaultCharset()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_PhvY2() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "source string";
        String expected = qCodec.encode(sourceStr, qCodec.getCharset());
        assertEquals(expected, qCodec.encode(sourceStr, qCodec.getCharset()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanks_Zixk0() {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        qCodec.setEncodeBlanks(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanksWithStringConstructor_Qsxw1() {
        QCodec qCodec = new QCodec("UTF-8");
        qCodec.setEncodeBlanks(false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanksWithoutConstructor_uJaF2() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks_OPzU0() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        assert qCodec.isEncodeBlanks();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks2_QGdO1() {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        qCodec.setEncodeBlanks(false);
        assert !qCodec.isEncodeBlanks();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks3_vwsY2() {
        QCodec qCodec = new QCodec("UTF-8");
        qCodec.setEncodeBlanks(true);
        assert qCodec.isEncodeBlanks();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ymkS0() throws EncoderException {
        QCodec qCodec = new QCodec();
        assertEquals(null, qCodec.encode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_bXwa1() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        assertEquals(null, qCodec.encode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharsetConstructor_pqsv0() {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        assertEquals(Charset.defaultCharset(), qCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithStringConstructor_rPiI1() {
        QCodec qCodec = new QCodec("UTF-8");
        assertEquals(Charset.forName("UTF-8"), qCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithNoConstructor_uaDg2() {
        QCodec qCodec = new QCodec();
        assertEquals(Charset.defaultCharset(), qCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNullText_GxEH2() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String encodedText = qCodec.encodeText(null, "UTF-8");
        assertEquals(null, encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_Bmog0() {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        assertEquals(Charset.defaultCharset().name(), qCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_TnjC1() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        assertEquals("UTF-8", qCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_YHIc2() {
        QCodec qCodec = new QCodec();
        assertEquals(Charset.defaultCharset().name(), qCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_NQZg3() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-16"));
        assertEquals("UTF-16", qCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_QCIW4() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-32"));
        assertEquals("UTF-32", qCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_twDY5() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-16BE"));
        assertEquals("UTF-16BE", qCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_ErMx6() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-16LE"));
        assertEquals("UTF-16LE", qCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_tOxZ8() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-32BE"));
        assertEquals("UTF-32BE", qCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_JMHU9() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-32LE"));
        assertEquals("UTF-32LE", qCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeText_yipq0() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        String text = "=?US-ASCII?Q?Keith_Moore?=";
        String decodedText = qCodec.decodeText(text);
        assertEquals("Keith Moore", decodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidInput_JeSQ3_1() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        String text = "Invalid input";
        DecoderException exception = assertThrows(DecoderException.class, () -> qCodec.decodeText(text));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithNullInput_JVWb4() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        String decodedText = qCodec.decodeText(null);
        assertEquals(null, decodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidString_dswR3_fid1() {
        QCodec qCodec = new QCodec();
        String str = "RFC 1522 violation: malformed encoded content";
        try {
            qCodec.decode(str);
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: malformed encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithCharset_HpGU1_fid1() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
        String text = "=?UTF-8?Q?Caf=C3=A9_d'Avignon?=";
        String decodedText = qCodec.decodeText(text);
        assertEquals("Café d'Avignon", decodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidInput_JeSQ3() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        String text = "Invalid input";
        DecoderException exception = assertThrows(DecoderException.class, () -> qCodec.decodeText(text));
        assertTrue(exception.getMessage().contains("RFC 1522 violation: malformed encoded content"));
    }
}