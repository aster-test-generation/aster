/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.file.Files;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DigestUtils_Test_Failing {
    private String bytesToHex(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }

    {
    }

    {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_fsja0() {
        byte[] data = new byte[0];
        byte[] expected = new byte[48];
        assertArrayEquals(expected, DigestUtils.sha384(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_1_QMGn1() {
        byte[] data = new byte[1];
        byte[] expected = new byte[48];
        expected[0] = -128;
        assertArrayEquals(expected, DigestUtils.sha384(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_2_iLST2() {
        byte[] data = new byte[2];
        byte[] expected = new byte[48];
        expected[0] = -128;
        expected[1] = 0;
        assertArrayEquals(expected, DigestUtils.sha384(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_3_WYXR3() {
        byte[] data = new byte[3];
        byte[] expected = new byte[48];
        expected[0] = -128;
        expected[1] = 0;
        expected[2] = 0;
        assertArrayEquals(expected, DigestUtils.sha384(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_4_BhVq4() {
        byte[] data = new byte[4];
        byte[] expected = new byte[48];
        expected[0] = -128;
        expected[1] = 0;
        expected[2] = 0;
        expected[3] = 0;
        assertArrayEquals(expected, DigestUtils.sha384(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_5_Gnou5() {
        byte[] data = new byte[5];
        byte[] expected = new byte[48];
        expected[0] = -128;
        expected[1] = 0;
        expected[2] = 0;
        expected[3] = 0;
        expected[4] = 0;
        assertArrayEquals(expected, DigestUtils.sha384(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_6_Beot6() {
        byte[] data = new byte[6];
        byte[] expected = new byte[48];
        expected[0] = -128;
        expected[1] = 0;
        expected[2] = 0;
        expected[3] = 0;
        expected[4] = 0;
        expected[5] = 0;
        assertArrayEquals(expected, DigestUtils.sha384(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_7_WMwJ7() {
        byte[] data = new byte[7];
        byte[] expected = new byte[48];
        expected[0] = -128;
        expected[1] = 0;
        expected[2] = 0;
        expected[3] = 0;
        expected[4] = 0;
        expected[5] = 0;
        expected[6] = 0;
        assertArrayEquals(expected, DigestUtils.sha384(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithString_MbNq2() throws IOException {
        String expected = "d16fb36f0911f878998c136191af705e";
        String actual = DigestUtils.md5Hex("test");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithNullInputStream_rcAj6() throws IOException {
        String expected = "d41d8cd98f00b204e9800998ecf8427e";
        String actual = DigestUtils.md5Hex((InputStream) null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_lfRv0() {
        byte[] data = new byte[]{1, 2, 3};
        String expected = "66ef7655c3086c78f980d131bc7733d1d7be525b26e0b3b361a0a6c0d7364140";
        assertEquals(expected, DigestUtils.sha256Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256HexWithNullData_xOeM2() {
        byte[] data = null;
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        assertEquals(expected, DigestUtils.sha256Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestUtils2_Txpl2() throws Throwable {
        new DigestUtils("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestUtils3_dldZ3() throws Throwable {
        new DigestUtils((String) null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_pBhr0() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = "Hello, World!";
        String expected = "7509e5bda0c762d2bac7f90d758b5b2263fa01ccbc542ab5e3df163be08e6ca9";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithNullData_hduZ2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = null;
        String expected = "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithLongData_eUxz3() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.";
        String expected = "c68f7d4e6c2303e0120a673206074f5f0e4e820f8e196121e345976e583c01f7";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_Xscj0() {
        byte[] data = new byte[0];
        String expected = "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dCC1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26";
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSha3_512Digest_1_Iwgz0() {
        MessageDigest result = DigestUtils.getSha3_512Digest();
        assertEquals(MessageDigestAlgorithms.SHA3_512, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_emptyInput_VEgx2() {
        assertEquals("expected_result", DigestUtils.sha1Hex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_nonEmptyInput_YNnW6() {
        assertEquals("expected_result", DigestUtils.sha1Hex("input_data"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullDigest_Sspv1() throws IOException {
        MessageDigest digest = null;
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        MessageDigest result = DigestUtils.updateDigest(digest, data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_3_fZkG3() throws IOException {
        final byte[] data = new byte[0];
        assertEquals("a753c1017af833be6de9d4a24f34a1870c26a7e73b14e110e25a7d1f0a36e4423b5b5d43a13a2e6453c0c7830b37d32c", DigestUtils.sha3_384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_4_iFTm4() throws IOException {
        final byte[] data = new byte[1000];
        assertEquals("3a985da74fe225b2045c172d6bd390bd855f086e3e9d525b46bfcf0d32b88e3e04e6240a0558ac1466171202f71f9a54", DigestUtils.sha3_384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_5_yeEq5() throws IOException {
        final byte[] data = new byte[1000000];
        assertEquals("a69f73cc3184a13f469d425c47a726e9f6dd14d4f7d72ab50e5b976f7f3d308f05768054c5343d9866f8e4a90401a0c3", DigestUtils.sha3_384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_teST0() {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = ByteBuffer.allocate(10);
        byte[] expected = new byte[10];
        byte[] actual = digestUtils.digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithName_BnLL2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        ByteBuffer data = ByteBuffer.allocate(10);
        byte[] expected = new byte[10];
        byte[] actual = digestUtils.digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_doGd1() {
        MessageDigest messageDigest = DigestUtils.getSha3_384Digest();
        assertEquals(384, messageDigest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_NuPH2() {
        MessageDigest messageDigest = DigestUtils.getSha3_384Digest();
        assertEquals("SHA-384", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_XzUA3() {
        MessageDigest messageDigest = DigestUtils.getSha3_384Digest();
        assertEquals(64, messageDigest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_AIfl0() {
        String data = "hello";
        byte[] expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_empty_OZpG1() {
        String data = "";
        byte[] expected = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32};
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSha3_224Digest_SiKD0() {
        MessageDigest digest = DigestUtils.getSha3_224Digest();
        assertEquals("SHA-3-224", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_yABr0() {
        byte[] data = new byte[0];
        assertEquals("", DigestUtils.sha3_384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_VIWQ1() {
        byte[] data = new byte[1];
        assertEquals("a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dCC1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26", DigestUtils.sha3_384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_fXmn2() {
        byte[] data = new byte[256];
        assertEquals("2c23146a63a29defa90c9a945b4b4c794e5f4f7e2a9c45e4e7a53d226c0f26a1d3c751b261b334c2b954d5e63a29423a92b92f9a09d5a0e7330a1b0c9a72b83f", DigestUtils.sha3_384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_GZYu3() {
        byte[] data = new byte[1024];
        assertEquals("2c23146a63a29defa90c9a945b4b4c794e5f4f7e2a9c45e4e7a53d226c0f26a1d3c751b261b334c2b954d5e63a29423a92b92f9a09d5a0e7330a1b0c9a72b83f", DigestUtils.sha3_384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_OHJc4() {
        byte[] data = new byte[8192];
        assertEquals("2c23146a63a29defa90c9a945b4b4c794e5f4f7e2a9c45e4e7a53d226c0f26a1d3c751b261b334c2b954d5e63a29423a92b92f9a09d5a0e7330a1b0c9a72b83f", DigestUtils.sha3_384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_KuhM0() {
        byte[] expected = new byte[64];
        byte[] actual = DigestUtils.sha3_512("data");
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_Bxfm0_1() {
        assertEquals("03d0c153d45f39f8e552534a36c91852", DigestUtils.md2Hex("test".getBytes()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_Bxfm0_2() {
        assertEquals("500d7e73b0b1b67a4e40f1f7be9f5b4d", DigestUtils.md2Hex("hello".getBytes()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_Bxfm0_3() {
        assertEquals("d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f", DigestUtils.md2Hex("".getBytes()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_VRmD0() {
        String data = "example";
        String expected = "e4d909c290d0fb1ca068ffaddf22cbd0";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_TABx0() {
        String data = "example";
        String expected = "104f2f7a74589741e881e0c0e8a52a5f3c5e7d9e04e0a1a60c6b0f6f0f4f0f4f";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithEmptyData_WPdR1() {
        String data = "";
        String expected = "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithNullData_nUIR2() {
        String data = null;
        String expected = "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_mnGj0() {
        String data = "example data";
        String expected = "expected result";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithNull_RSfI1() {
        String data = null;
        String expected = "expected result";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithEmpty_xVfp2() {
        String data = "";
        String expected = "expected result";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithLongString_LpRK3() {
        String data = "long string data";
        String expected = "expected result";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithSpecialCharacters_nxYJ4() {
        String data = "special characters data";
        String expected = "expected result";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithUnicode_wQbI5() {
        String data = "unicode data";
        String expected = "expected result";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithNegativeTestCase_xnDD6() {
        String data = "negative test case";
        String expected = "expected result";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithBoundaryValues_mhgV7() {
        String data = "boundary values";
        String expected = "expected result";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithEdgeCases_QpHw8() {
        String data = "edge cases";
        String expected = "expected result";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithRandomTestCases_onUg9() {
        String data = "random test cases";
        String expected = "expected result";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithMultipleTestCases_eSyu10_1() {
        String data1 = "test case 1";
        String data2 = "test case 2";
        String data3 = "test case 3";
        String expected1 = "expected result 1";
        String expected2 = "expected result 2";
        String expected3 = "expected result 3";
        String actual1 = DigestUtils.sha384Hex(data1);
        String actual2 = DigestUtils.sha384Hex(data2);
        String actual3 = DigestUtils.sha384Hex(data3);
        assertEquals(expected1, actual1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithMultipleTestCases_eSyu10_2() {
        String data1 = "test case 1";
        String data2 = "test case 2";
        String data3 = "test case 3";
        String expected1 = "expected result 1";
        String expected2 = "expected result 2";
        String expected3 = "expected result 3";
        String actual1 = DigestUtils.sha384Hex(data1);
        String actual2 = DigestUtils.sha384Hex(data2);
        String actual3 = DigestUtils.sha384Hex(data3);
        assertEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithMultipleTestCases_eSyu10_3() {
        String data1 = "test case 1";
        String data2 = "test case 2";
        String data3 = "test case 3";
        String expected1 = "expected result 1";
        String expected2 = "expected result 2";
        String expected3 = "expected result 3";
        String actual1 = DigestUtils.sha384Hex(data1);
        String actual2 = DigestUtils.sha384Hex(data2);
        String actual3 = DigestUtils.sha384Hex(data3);
        assertEquals(expected3, actual3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_SHLg0() {
        byte[] data = new byte[]{0x01, 0x02, 0x03};
        String expected = "309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f989dd35bc5ff499670da34255b45b0cfbc86218a787c153e361a94ed8b83";
        assertEquals(expected, DigestUtils.sha512Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_XcmJ0() {
        byte[] data = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_1_BRnu1() {
        byte[] data = new byte[1];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_2_Vpgr2() {
        byte[] data = new byte[2];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_3_lhSC3() {
        byte[] data = new byte[3];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_4_tkqF4() {
        byte[] data = new byte[4];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_5_ZNpJ5() {
        byte[] data = new byte[5];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_6_rign6() {
        byte[] data = new byte[6];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_7_VPzs7() {
        byte[] data = new byte[7];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_8_JMLH8() {
        byte[] data = new byte[8];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_9_dUNy9() {
        byte[] data = new byte[9];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_10_YeMs10() {
        byte[] data = new byte[10];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_11_wfeO11() {
        byte[] data = new byte[11];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_12_FPRt12() {
        byte[] data = new byte[12];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_13_BKhx13() {
        byte[] data = new byte[13];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_1_TKGa0() {
        byte[] input = new byte[]{1, 2, 3};
        byte[] expected = new byte[]{1, 2, 3};
        byte[] actual = DigestUtils.sha512(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_2_xSOa1() {
        byte[] input = new byte[]{4, 5, 6};
        byte[] expected = new byte[]{4, 5, 6};
        byte[] actual = DigestUtils.sha512(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_JDrG0() {
        byte[] data = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_1_fcst1() {
        byte[] data = new byte[1];
        byte[] expected = new byte[1];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_2_NFsF2() {
        byte[] data = new byte[2];
        byte[] expected = new byte[2];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_3_bLNb3() {
        byte[] data = new byte[3];
        byte[] expected = new byte[3];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_4_lapm4() {
        byte[] data = new byte[4];
        byte[] expected = new byte[4];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_5_rbGU5() {
        byte[] data = new byte[5];
        byte[] expected = new byte[5];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_6_AKrn6() {
        byte[] data = new byte[6];
        byte[] expected = new byte[6];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_7_zgCz7() {
        byte[] data = new byte[7];
        byte[] expected = new byte[7];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_8_NvEk8() {
        byte[] data = new byte[8];
        byte[] expected = new byte[8];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_9_HKiG9() {
        byte[] data = new byte[9];
        byte[] expected = new byte[9];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_10_KIVV10() {
        byte[] data = new byte[10];
        byte[] expected = new byte[10];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_11_ilxU11() {
        byte[] data = new byte[11];
        byte[] expected = new byte[11];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_12_EIMN12() {
        byte[] data = new byte[12];
        byte[] expected = new byte[12];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_vcvg0() throws IOException {
        byte[] expected = null;
        InputStream data = null;
        byte[] actual = DigestUtils.md5(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_meAX0_1() {
        byte[] data = new byte[0];
        data = new byte[]{0x61};
        data = new byte[]{0x61, 0x62};
        data = new byte[]{0x61, 0x62, 0x63};
        data = new byte[]{0x61, 0x62, 0x63, 0x64};
        assertEquals("c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470", DigestUtils.sha3_256Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_meAX0_3() {
        byte[] data = new byte[0];
        data = new byte[]{0x61};
        data = new byte[]{0x61, 0x62};
        data = new byte[]{0x61, 0x62, 0x63};
        data = new byte[]{0x61, 0x62, 0x63, 0x64};
        assertEquals("66c4a0aa75c8d72a9d4500b78b3b36a4f4c0382f24e28332a83a36101045d1d7", DigestUtils.sha3_256Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_meAX0_4() {
        byte[] data = new byte[0];
        data = new byte[]{0x61};
        data = new byte[]{0x61, 0x62};
        data = new byte[]{0x61, 0x62, 0x63};
        data = new byte[]{0x61, 0x62, 0x63, 0x64};
        assertEquals("8a516868747dec58e219b56d032b0b1b3c3d3e3e3e3e3e3e3e3e3e3e3e3e3e3e", DigestUtils.sha3_256Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_meAX0_5() {
        byte[] data = new byte[0];
        data = new byte[]{0x61};
        data = new byte[]{0x61, 0x62};
        data = new byte[]{0x61, 0x62, 0x63};
        data = new byte[]{0x61, 0x62, 0x63, 0x64};
        assertEquals("a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3", DigestUtils.sha3_256Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_NKWx0() {
        byte[] data = new byte[]{0x01, 0x02, 0x03};
        String expected = "32ec01ec4a6dac72c0ab96fb34c0b5d1";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_ZhaH1() {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assertEquals(64, digest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_ooKu3() {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assertEquals("SHA-512/224", digest.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestString_HHDX1_1() {
        String data = "test string";
        byte[] digest = new DigestUtils().digest(data);
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestString_HHDX1_2() {
        String data = "test string";
        byte[] digest = new DigestUtils().digest(data);
        assertEquals(32, digest.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestMultipleTimes_KeSk3() {
        String data = "test string";
        byte[] digest1 = new DigestUtils().digest(data);
        byte[] digest2 = new DigestUtils().digest(data);
        assertArrayEquals(digest1, digest2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithEmptyData_rGYZ4_1() {
        byte[] data = new byte[0];
        byte[] digest = new DigestUtils().digest(data);
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithEmptyData_rGYZ4_2() {
        byte[] data = new byte[0];
        byte[] digest = new DigestUtils().digest(data);
        assertEquals(32, digest.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_XxYK0() {
        byte[] expected = new byte[]{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF};
        byte[] actual = DigestUtils.sha384("test");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_2_wcmJ1() {
        byte[] expected = new byte[]{0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0};
        byte[] actual = DigestUtils.sha384("test2");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_3_BRop2() {
        byte[] expected = new byte[]{0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x1};
        byte[] actual = DigestUtils.sha384("test3");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_4_TPUK3() {
        byte[] expected = new byte[]{0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x1, 0x2};
        byte[] actual = DigestUtils.sha384("test4");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_5_Gkoz4() {
        byte[] expected = new byte[]{0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x1, 0x2, 0x3};
        byte[] actual = DigestUtils.sha384("test5");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_6_bsfz5() {
        byte[] expected = new byte[]{0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x1, 0x2, 0x3, 0x4};
        byte[] actual = DigestUtils.sha384("test6");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_7_TNtg6() {
        byte[] expected = new byte[]{0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5};
        byte[] actual = DigestUtils.sha384("test7");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_IGBI0() {
        String data = "example";
        String expected = "5e884898da28047151d0e56f8dc6292773603d0bb9f3cd22b3b39d219db938cc9e445e320cd3b6c914426d22722f9c5e8e4b5a3b3f1c607b0b8a3a2e0b";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_null_rffT1() {
        String data = null;
        byte[] expected = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_kuxa0() {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{
        (byte) 0x90, (byte) 0x01, (byte) 0x50, (byte) 0x98,
        (byte) 0x3c, (byte) 0xd2, (byte) 0x4f, (byte) 0xb0,
        (byte) 0xd6, (byte) 0x96, (byte) 0x3f, (byte) 0x7d,
        (byte) 0x28, (byte) 0xe1, (byte) 0x7f, (byte) 0x72
        };
        assertArrayEquals(expected, DigestUtils.md5(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_QqEp0() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = "Hello, World!".getBytes();
        String expected = "7509e5bda0c762d2bac7f90d758b5b2263fa01ccbc542ab5e3df163be08e6ca9";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_UlLN0() {
        byte[] data = new byte[]{0x01, 0x02, 0x03};
        String expected = "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithEmptyData_ABob1() {
        byte[] data = new byte[0];
        String expected = "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877e5a12a424414501260a4031d6";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_GmrG0() {
        byte[] input = new byte[]{0x01, 0x02, 0x03};
        byte[] expected = new byte[]{(byte) 0xa9, (byte) 0x4a, (byte) 0x8f, (byte) 0xe5, (byte) 0xcc, (byte) 0xb1, (byte) 0x9b, (byte) 0xa6, (byte) 0x1c, (byte) 0x4c, (byte) 0x08, (byte) 0x73, (byte) 0xd3, (byte) 0x91, (byte) 0xe9, (byte) 0x87, (byte) 0x98, (byte) 0x2f, (byte) 0x5d};
        assertArrayEquals(expected, DigestUtils.sha1(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_mdvS0() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = digestUtils.digest("data");
        byte[] expected = new byte[0];
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithString_oTNz2() {
        DigestUtils digestUtils = new DigestUtils("name");
        byte[] result = digestUtils.digest("data");
        byte[] expected = new byte[0];
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_tolI0() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = digestUtils.digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_NeDG0_1() {
        assertEquals("6b4e03423667db5f", DigestUtils.sha3_224Hex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_NeDG0_2() {
        assertEquals("a69f73cc07198d80", DigestUtils.sha3_224Hex("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_NeDG0_3() {
        assertEquals("167f00d852c7179e", DigestUtils.sha3_224Hex("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_NeDG0_4() {
        assertEquals("a9f046567a9d4e25", DigestUtils.sha3_224Hex("message digest"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_NeDG0_5() {
        assertEquals("0e6d02c13c385a6a", DigestUtils.sha3_224Hex("abcdefghijklmnopqrstuvwxyz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_NeDG0_6() {
        assertEquals("d69335b93325192e", DigestUtils.sha3_224Hex("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_NeDG0_7() {
        assertEquals("2a9d6e614207b70e", DigestUtils.sha3_224Hex("12345678901234567890123456789012345678901234567890123456789012345678901234567890"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_jWqP0() throws IOException {
        DigestUtils digestUtils = new DigestUtils();
        File data = new File("test.txt");
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_withString_DeNP2() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        File data = new File("test.txt");
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_PIim0_lWju0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        File file = new File("test.txt");
        byte[] expected = Files.readAllBytes(file.toPath());
        byte[] actual = DigestUtils.digest(messageDigest, file);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_DheC2_bwZW0() throws IOException {
        byte[] expected = {-48, -109, -106, -108, 100, -102, -104, 108, 100, -102, -104, 108, 100, -102, -104, 108};
        byte[] actual = DigestUtils.md2("test".getBytes());
        assertTrue(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_XgUL0_cANN0() {
        byte[] data = new byte[]{0x01, 0x02, 0x03};
        byte[] expected = new byte[]{(byte) 0x23, (byte) 0x09, (byte) 0x7d, (byte) 0x22, (byte) 0x34, (byte) 0x05, (byte) 0xd8, (byte) 0x22, (byte) 0x86, (byte) 0x42, (byte) 0xa4, (byte) 0x77, (byte) 0x8d, (byte) 0x23, (byte) 0x9e, (byte) 0x5c, (byte) 0x03, (byte) 0x8b, (byte) 0x3a, (byte) 0x7f, (byte) 0x98, (byte) 0x7f, (byte) 0x94, (byte) 0x49, (byte) 0x0a, (byte) 0x5c, (byte) 0x9e, (byte) 0x7e, (byte) 0x6a, (byte) 0x9c, (byte) 0x02};
        assertArrayEquals(expected, DigestUtils.sha256(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_SqyE0_fkFm0() throws IOException {
        String input = "Hello, World!";
        byte[] expected = {-54, 107, -108, -108, -100, -103, -124, -111, 114, -100, -108, -111, -106, -117, -109, -103, 100, 116, -103, 107};
        byte[] actual = DigestUtils.md2(input.getBytes());
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_1_QMGn1_KgPz0() {
        byte[] data = new byte[1];
        byte[] expected = new byte[64];
        expected[0] = (byte) 0x80;
        assertArrayEquals(expected, DigestUtils.getSha512_256Digest().digest(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_3_WXR3_hMkm0() {
        byte[] data = new byte[3];
        byte[] expected = new byte[48];
        expected[0] = (byte) 0x80;
        expected[1] = 0;
        expected[2] = 0;
        expected[3] = 0;
        expected[4] = 0;
        expected[5] = 0;
        expected[6] = 0;
        expected[7] = 0;
        expected[8] = 0;
        expected[9] = 0;
        expected[10] = 0;
        expected[11] = 0;
        expected[12] = 0;
        expected[13] = 0;
        expected[14] = 0;
        expected[15] = 0;
        expected[16] = 0;
        expected[17] = 0;
        expected[18] = 0;
        expected[19] = 0;
        expected[20] = 0;
        expected[21] = 0;
        expected[22] = 0;
        expected[23] = 0;
        expected[24] = 0;
        expected[25] = 0;
        expected[26] = 0;
        expected[27] = 0;
        expected[28] = 0;
        expected[29] = 0;
        expected[30] = 0;
        expected[31] = 0;
        expected[32] = 0;
        expected[33] = 0;
        expected[34] = 0;
        expected[35] = 0;
        expected[36] = 0;
        expected[37] = 0;
        expected[38] = 0;
        expected[39] = 0;
        expected[40] = 0;
        expected[41] = 0;
        expected[42] = 0;
        expected[43] = 0;
        expected[44] = 0;
        expected[45] = 0;
        expected[46] = 0;
        expected[47] = 0;
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_4_BhVq4_IxgX0() {
        byte[] data = new byte[4];
        byte[] expected = new byte[48];
        expected[0] = (byte) 0x80;
        expected[1] = 0;
        expected[2] = 0;
        expected[3] = 0;
        expected[4] = 0;
        expected[5] = 0;
        expected[6] = 0;
        expected[7] = 0;
        expected[8] = 0;
        expected[9] = 0;
        expected[10] = 0;
        expected[11] = 0;
        expected[12] = 0;
        expected[13] = 0;
        expected[14] = 0;
        expected[15] = 0;
        expected[16] = 0;
        expected[17] = 0;
        expected[18] = 0;
        expected[19] = 0;
        expected[20] = 0;
        expected[21] = 0;
        expected[22] = 0;
        expected[23] = 0;
        expected[24] = 0;
        expected[25] = 0;
        expected[26] = 0;
        expected[27] = 0;
        expected[28] = 0;
        expected[29] = 0;
        expected[30] = 0;
        expected[31] = 0;
        expected[32] = 0;
        expected[33] = 0;
        expected[34] = 0;
        expected[35] = 0;
        expected[36] = 0;
        expected[37] = 0;
        expected[38] = 0;
        expected[39] = 0;
        expected[40] = 0;
        expected[41] = 0;
        expected[42] = 0;
        expected[43] = 0;
        expected[44] = 0;
        expected[45] = 0;
        expected[46] = 0;
        expected[47] = 0;
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_5_Gnou5_zhUY0() {
        byte[] data = new byte[5];
        byte[] expected = new byte[48];
        expected[0] = (byte) 0x80;
        expected[1] = 0;
        expected[2] = 0;
        expected[3] = 0;
        expected[47] = 0;
        byte[] actual = DigestUtils.sha384(data);
        actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_6_Beot6_hZvG0() {
        byte[] data = new byte[6];
        byte[] expected = new byte[48];
        expected[0] = (byte) 0x80;
        expected[1] = 0;
        expected[2] = 0;
        expected[3] = 0;
        expected[4] = 0;
        expected[5] = 0;
        expected[6] = 0;
        expected[7] = 0;
        expected[8] = 0;
        expected[9] = 0;
        expected[10] = 0;
        expected[11] = 0;
        expected[12] = 0;
        expected[13] = 0;
        expected[14] = 0;
        expected[15] = 0;
        expected[16] = 0;
        expected[17] = 0;
        expected[18] = 0;
        expected[19] = 0;
        expected[20] = 0;
        expected[21] = 0;
        expected[22] = 0;
        expected[23] = 0;
        expected[24] = 0;
        expected[25] = 0;
        expected[26] = 0;
        expected[27] = 0;
        expected[28] = 0;
        expected[29] = 0;
        expected[30] = 0;
        expected[31] = 0;
        expected[32] = 0;
        expected[33] = 0;
        expected[34] = 0;
        expected[35] = 0;
        expected[36] = 0;
        expected[37] = 0;
        expected[38] = 0;
        expected[39] = 0;
        expected[40] = 0;
        expected[41] = 0;
        expected[42] = 0;
        expected[43] = 0;
        expected[44] = 0;
        expected[45] = 0;
        expected[46] = 0;
        expected[47] = 0;
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_7_WMwJ7_zOCV0() {
        byte[] data = new byte[7];
        byte[] expected = new byte[48];
        expected[0] = (byte) 0x80;
        expected[1] = 0;
        expected[2] = 0;
        expected[3] = 0;
        expected[4] = 0;
        expected[5] = 0;
        expected[6] = 0;
        expected[7] = 0;
        expected[8] = 0;
        expected[9] = 0;
        expected[10] = 0;
        expected[11] = 0;
        expected[12] = 0;
        expected[13] = 0;
        expected[14] = 0;
        expected[15] = 0;
        expected[16] = 0;
        expected[17] = 0;
        expected[18] = 0;
        expected[19] = 0;
        expected[20] = 0;
        expected[21] = 0;
        expected[22] = 0;
        expected[23] = 0;
        expected[24] = 0;
        expected[25] = 0;
        expected[26] = 0;
        expected[27] = 0;
        expected[28] = 0;
        expected[29] = 0;
        expected[30] = 0;
        expected[31] = 0;
        expected[32] = 0;
        expected[33] = 0;
        expected[34] = 0;
        expected[35] = 0;
        expected[36] = 0;
        expected[37] = 0;
        expected[38] = 0;
        expected[39] = 0;
        expected[40] = 0;
        expected[41] = 0;
        expected[42] = 0;
        expected[43] = 0;
        expected[44] = 0;
        expected[45] = 0;
        expected[46] = 0;
        expected[47] = 0;
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithNullString_DrdM8_Ogji0() throws IOException {
        String expected = "d41d8cd98f00b204e9800998ecf8427e";
        String actual = DigestUtils.md5Hex((String) null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_multipleInputs_QVEJ11_Nsbp0_1() {
        assertEquals("expected_result", DigestUtils.sha1Hex("input_data1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_multipleInputs_QVEJ11_Nsbp0_2() {
        assertEquals("expected_result", DigestUtils.sha1Hex("input_data2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_multipleInputs_QVEJ11_Nsbp0_3() {
        assertEquals("expected_result", DigestUtils.sha1Hex("input_data3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullDigest_Sspv1_cVrv0() throws IOException {
        MessageDigest digest = null;
        RandomAccessFile data = new RandomAccessFile("test.txt", "r");
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithByteArray_mAxh1_TfRS0() throws IOException {
        String expected = "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b";
        byte[] input = {1, 2, 3};
        assertEquals(expected, DigestUtils.sha512_256Hex(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_gJYN0_amqs0_2() {
        assertEquals("9e107d9d372bb6826bd81d3542a419d6", DigestUtils.sha256Hex("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_fWlS0_ExUW0_1() {
        assertEquals("ec014982885162f8f21b3b940d8a0c950a2318c0c20b5a2f2a9a2a6e0312c132", DigestUtils.sha3_384Hex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_fWlS0_ExUW0_2() {
        assertEquals("ec014982885162f8f21b3b940d8a0c950a2318c0c20b5a2f2a9a2a6e0312c132", DigestUtils.sha3_384Hex("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_fWlS0_ExUW0_3() {
        assertEquals("ec014982885162f8f21b3b940d8a0c950a2318c0c20b5a2f2a9a2a6e0312c132", DigestUtils.sha3_384Hex("ABC"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_VIWQ1_eXHP0() {
        byte[] data = new byte[1];
        assertEquals("a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26", DigestUtils.sha3_384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_wtaO0_UDHu0() throws IOException {
        final String data = "Hello World";
        final byte[] expected = {-115, -119, 102, -115, 101, -111, -128, -118, 104, -128, -110, -107, 122, -115, 110, 110, -100, -111, -119, 100};
        assertArrayEquals(expected, DigestUtils.getSha512_256Digest().digest(data.getBytes()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Empty_rLSe1_aJLL0() throws IOException {
        final byte[] expected = {-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10};
        assertArrayEquals(expected, DigestUtils.getSha512_256Digest().digest("".getBytes()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_XcmJ0_PUTT0() {
        byte[] data = new byte[0];
        byte[] expected = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        byte[] actual = DigestUtils.sha512_256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_1_BRnu1_OaHC0() {
        byte[] data = new byte[1];
        byte[] expected = new byte[32];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_2_Vpgr2_lAEq0() {
        byte[] data = new byte[2];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_3_lhSC3_IRQz0() {
        byte[] data = new byte[3];
        byte[] expected = new byte[32];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_4_tqF4_AMzL0() {
        byte[] data = new byte[4];
        byte[] expected = new byte[32];
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        byte[] actual = digest.digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_5_ZNpJ5_dPOa0() {
        byte[] data = new byte[5];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_6_rign6_ToWI0() {
        byte[] data = new byte[6];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_7_VPzs7_aExO0() {
        byte[] data = new byte[7];
        byte[] expected = new byte[32];
        MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
        byte[] actual = messageDigest.digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_8_JMLH8_ZvWB0() {
        byte[] data = new byte[8];
        byte[] expected = new byte[32];
        MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
        byte[] actual = messageDigest.digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_9_dUNy9_MGpd0() {
        byte[] data = new byte[9];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_10_YeMs10_VZEP0() {
        byte[] data = new byte[10];
        byte[] expected = new byte[32];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_11_wfeO11_IzKl0() {
        byte[] data = new byte[11];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_12_FPRt12_SFxH0() {
        byte[] data = new byte[12];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_13_BKhx13_dXSH0() {
        byte[] data = new byte[13];
        byte[] expected = new byte[32];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_1_fcst1_JPQM0() {
        byte[] data = new byte[1];
        byte[] expected = new byte[32];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        org.junit.jupiter.api.Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_3_bLNb3_uxVR0() {
        byte[] data = new byte[3];
        byte[] expected = new byte[48];
        byte[] actual = DigestUtils.getSha3_384Digest().digest(data);
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_4_lapm4_Ycon0() {
        byte[] data = new byte[4];
        byte[] expected = new byte[4];
        byte[] actual = DigestUtils.getSha3_384Digest().digest(data);
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_5_rbGU5_PSSQ0() {
        byte[] data = new byte[5];
        byte[] expected = new byte[5];
        byte[] actual = DigestUtils.getSha3_384Digest().digest(data);
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_6_AKrn6_XLWH0() {
        byte[] data = new byte[6];
        byte[] expected = new byte[48];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        org.junit.jupiter.api.Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_0_null_subN0() {
        byte[] data = null;
        byte[] expected = null;
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_8_NvEk8_OvJo0() {
        byte[] data = new byte[8];
        byte[] expected = new byte[8];
        byte[] actual = DigestUtils.getSha3_384Digest().digest(data);
        Arrays.fill(expected, (byte) 0);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_10_KIVV10_ZDea0() {
        byte[] data = new byte[10];
        byte[] expected = new byte[48];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_11_ilxU11_ZimH0() {
        byte[] data = new byte[11];
        byte[] expected = new byte[48];
        byte[] actual = DigestUtils.getSha3_384Digest().digest(data);
        Arrays.fill(expected, (byte) 0);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_12_EIMN12_pjCN0() {
        byte[] data = new byte[12];
        byte[] expected = new byte[48];
        byte[] actual = DigestUtils.getSha3_384Digest().digest(data);
        Arrays.fill(expected, (byte) 0);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_WoeB0_EUzT0() {
        byte[] input = new byte[]{0x01, 0x02, 0x03};
        byte[] expected = new byte[]{(byte) 0x6a, (byte) 0x2a, (byte) 0x2b, (byte) 0x80, (byte) 0x2f, (byte) 0x6c, (byte) 0x53, (byte) 0x0a, (byte) 0x34, (byte) 0x9a, (byte) 0x7a, (byte) 0x38, (byte) 0x20, (byte) 0x27, (byte) 0x80, (byte) 0x81, (byte) 0x4c, (byte) 0x6b, (byte) 0x7f, (byte) 0x80, (byte) 0x4f, (byte) 0x47, (byte) 0x8b, (byte) 0x1c, (byte) 0x5d, (byte) 0x46, (byte) 0x30, (byte) 0x5a, (byte) 0x1f, (byte) 0x0d, (byte) 0x8a, (byte) 0x22};
        byte[] actual = DigestUtils.getSha3_256Digest().digest(input);
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_vcvg0_gqdJ0() throws IOException {
        byte[] expected = null;
        InputStream data = null;
        byte[] actual = DigestUtils.md5(data);
        expected = actual;
        org.junit.jupiter.api.Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_meAX0_RASg0_1() {
        byte[] data = new byte[0];
        data = new byte[]{(byte) 0x61};
        data = new byte[]{(byte) 0x61, (byte) 0x62};
        data = new byte[]{(byte) 0x61, (byte) 0x62, (byte) 0x63};
        data = new byte[]{(byte) 0x61, (byte) 0x62, (byte) 0x63, (byte) 0x64};
        assertEquals("c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470", DigestUtils.sha3_256Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_meAX0_RASg0_3() {
        byte[] data = new byte[0];
        data = new byte[]{(byte) 0x61};
        data = new byte[]{(byte) 0x61, (byte) 0x62};
        data = new byte[]{(byte) 0x61, (byte) 0x62, (byte) 0x63};
        data = new byte[]{(byte) 0x61, (byte) 0x62, (byte) 0x63, (byte) 0x64};
        assertEquals("66c4a0aa75c8d72a9d4500b78b3b36a4f4c0382f24e28332a83a36101045d1d7", DigestUtils.sha3_256Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_meAX0_RASg0_4() {
        byte[] data = new byte[0];
        data = new byte[]{(byte) 0x61};
        data = new byte[]{(byte) 0x61, (byte) 0x62};
        data = new byte[]{(byte) 0x61, (byte) 0x62, (byte) 0x63};
        data = new byte[]{(byte) 0x61, (byte) 0x62, (byte) 0x63, (byte) 0x64};
        assertEquals("8a516868747dec58e219b56d032b0b1b3c3d3e3e3e3e3e3e3e3e3e3e3e3e3e3e", DigestUtils.sha3_256Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_meAX0_RASg0_5() {
        byte[] data = new byte[0];
        data = new byte[]{(byte) 0x61};
        data = new byte[]{(byte) 0x61, (byte) 0x62};
        data = new byte[]{(byte) 0x61, (byte) 0x62, (byte) 0x63};
        data = new byte[]{(byte) 0x61, (byte) 0x62, (byte) 0x63, (byte) 0x64};
        assertEquals("a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3", DigestUtils.sha3_256Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_5_GHXX4_rKHi0() {
        byte[] expected = DigestUtils.sha256("test5");
        byte[] actual = DigestUtils.getSha512_256Digest().digest("test5".getBytes());
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestString_HHDX1_gpip0_1() {
        String data = "test string";
        DigestUtils digestUtils = new DigestUtils();
        byte[] digest = digestUtils.digest(data);
        Assertions.assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestString_HHDX1_gpip0_2() {
        String data = "test string";
        DigestUtils digestUtils = new DigestUtils();
        byte[] digest = digestUtils.digest(data);
        Assertions.assertEquals(32, digest.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestMultipleTimes_KeSk3_RUry0() {
        String data = "test string";
        DigestUtils digestUtils = new DigestUtils();
        byte[] digest1 = digestUtils.digest(data);
        byte[] digest2 = digestUtils.digest(data);
        Assertions.assertArrayEquals(digest1, digest2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithEmptyData_rGYZ4_FPsB0_1() {
        byte[] data = new byte[0];
        DigestUtils digestUtils = new DigestUtils();
        byte[] digest = digestUtils.digest(data);
        Assertions.assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithEmptyData_rGYZ4_FPsB0_2() {
        byte[] data = new byte[0];
        DigestUtils digestUtils = new DigestUtils();
        byte[] digest = digestUtils.digest(data);
        Assertions.assertEquals(32, digest.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_XxYK0_sqZA0() {
        byte[] expected = new byte[]{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF};
        byte[] actual = DigestUtils.sha384("test");
        org.junit.jupiter.api.Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_2_wcmJ1_pANV0() {
        byte[] expected = new byte[]{0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0};
        byte[] actual = DigestUtils.sha384("test2");
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    public void testSha384_3_BRop2_tFKX0() {
        byte[] expected = new byte[]{0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x1};
        byte[] actual = DigestUtils.sha384("test3");
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_4_TPUK3_Ihfh0() {
        byte[] expected = new byte[]{0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x1, 0x2};
        byte[] actual = DigestUtils.getSha384Digest().digest("test4".getBytes());
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_6_7_8_9_A_B_C_D_E_F_0_1_2_3_4_5_GQAU0() {
        byte[] expected = new byte[]{0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5};
        byte[] actual = DigestUtils.getSha512_256Digest().digest("test7".getBytes());
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_arta0_XGTZ0() {
        String data = "example";
        byte[] expected = {0x01, (byte) 0x23, (byte) 0x45, (byte) 0x67, (byte) 0x89, (byte) 0xab, (byte) 0xcd, (byte) 0xef};
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_empty_Cnsc2_dCKH0() {
        String data = "";
        byte[] expected = {(byte) 0x8d, (byte) 0x77, (byte) 0x7f, (byte) 0x3a, (byte) 0x77, (byte) 0x5e, (byte) 0x4e, (byte) 0xc4};
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_GmrG0_ahWu0() {
        byte[] input = new byte[]{0x01, 0x02, 0x03};
        byte[] expected = new byte[]{(byte) 0xa9, (byte) 0x4a, (byte) 0x8f, (byte) 0xe5, (byte) 0xcc, (byte) 0xb1, (byte) 0x9b, (byte) 0xa6, (byte) 0x1c, (byte) 0x4c, (byte) 0x08, (byte) 0x73, (byte) 0xd3, (byte) 0x91, (byte) 0xe9, (byte) 0x87, (byte) 0x98, (byte) 0x2f, (byte) 0x5d};
        assertArrayEquals(expected, DigestUtils.getSha1Digest().digest(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_NeDG0_brbO0_7() {
        assertEquals("2a9d6e614207b70e", DigestUtils.sha3_224Hex("1234567890123456789012345678901234567890123456789012345678901234567890123456789"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_1_QMGn1_fid2() {
        byte[] data = new byte[1];
        byte[] expected = new byte[48];
        expected[0] = -66;
        assertArrayEquals(expected, DigestUtils.sha384(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_2_iLST2_fid2() {
        byte[] data = new byte[2];
        byte[] expected = new byte[48];
        expected[0] = 29;
        expected[1] = 0;
        assertArrayEquals(expected, DigestUtils.sha384(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_6_Beot6_fid2() {
        byte[] data = new byte[6];
        byte[] expected = new byte[48];
        expected[0] = 5;
        expected[1] = 0;
        expected[2] = 0;
        expected[3] = 0;
        expected[4] = 0;
        expected[5] = 0;
        assertArrayEquals(expected, DigestUtils.sha384(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_7_WMwJ7_fid2() {
        byte[] data = new byte[7];
        byte[] expected = new byte[48];
        expected[0] = -75;
        expected[1] = 0;
        expected[2] = 0;
        expected[3] = 0;
        expected[4] = 0;
        expected[5] = 0;
        expected[6] = 0;
        assertArrayEquals(expected, DigestUtils.sha384(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestUtils3_dldZ3_fid2() throws Throwable {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        digestUtils.getDigest((String) null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_AIfl0_fid2() {
        String data = "hello";
        byte[] expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};
        byte[] actual = DigestUtils.sha512_224(data);
        expected = Arrays.copyOf(expected, 28);
        assertArrayEquals(expected, actual);
    }
}