/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash3_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_FVaI0() {
        byte[] data = new byte[0];
        int length = 0;
        int seed = 0;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_eGYw0_1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 123;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_HMRi0_1() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        int seed = 0;
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_HMRi0_2() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        int seed = 0;
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNonZeroData_Iaip2_1() {
        byte[] data = {1, 2, 3};
        int offset = 0;
        int length = 3;
        int seed = 0;
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertNotEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNonZeroData_Iaip2_2() {
        byte[] data = {1, 2, 3};
        int offset = 0;
        int length = 3;
        int seed = 0;
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertNotEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_QiZV0() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 123;
        int expected = MurmurHash3.hash32x86(data, offset, length, seed);
        int actual = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_nRCn0() {
        byte[] data = new byte[0];
        long[] expected = new long[2];
        long[] actual = MurmurHash3.hash128x64(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_HMRi0_acjn0() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        int seed = 0;
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(new long[]{0, 0}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNonZeroData_Iaip2_eVpW0_1() {
        byte[] data = {1, 2, 3};
        int length = 3;
        int seed = 0;
        long[] result = MurmurHash3.hash128(data, 0, length, seed);
        assertNotEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNonZeroData_Iaip2_eVpW0_2() {
        byte[] data = {1, 2, 3};
        int length = 3;
        int seed = 0;
        long[] result = MurmurHash3.hash128(data, 0, length, seed);
        assertNotEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_aCVL1_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 10;
        int expected = 10;
        int actual = MurmurHash3.hash32(data, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_aQVe0_fid1() {
        int data = 123456789;
        long expectedHash = 7658610815084095258L; // replace with actual expected hash value
        long actualHash = MurmurHash3.hash64(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testHash64_llmE0_fid1() {
        byte[] data = new byte[0];
        long expected = 8404154273843829576L;
        long actual = MurmurHash3.hash64(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testHash64WithOffsetAndLength_vEAL3_fid1() {
        byte[] data = new byte[20];
        int offset = 10;
        int length = 10;
        long expected = -6293784870977145340L;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_yhQb0_fid1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 123;
        int expected = -37924533; // Replace with the expected hash value
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_OmZk0_fid1() {
        byte[] data = new byte[10];
        int offset = 1;
        int length = 2;
        int seed = 3;
        int expected = 1364076727; // Replace with the expected hash value
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_PkTN0_fid1() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNonZeroData_FGXC1_fid1() {
        int actual = MurmurHash3.hash32(1234567890L, 123);
        int expected = 1519243725;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_djzo0_fid1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 123;
        int expected = -37924533; // Replace with the expected hash value
        int actual = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_jcCg0_fid1() {
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int seed = 123;
        int expected = 1493362130;
        int actual = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_eGYw0_BPiF0_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 123;
        int result = MurmurHash3.hash32(data, length, seed);
        assertEquals(-37924533, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_RcFB0_uDYM0_fid1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 123;
        long expected = 3411840730248437491L; // Replace with the expected hash value
        long actual = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_2_yKMZ1_GYju0_fid1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        long expected = -6293784870977145340L;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaximumValues_Xyij3_cfkJ1_fid1() {
        int expected = -905413510; // Define the expected value
        assertEquals(expected, MurmurHash3.hash32(Long.MAX_VALUE, Long.MAX_VALUE));
    }
}