/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DoubleMetaphone_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_Pvqs0_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual("test", "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_Pvqs0_2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual("test", "test", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_Pvqs0_3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual("test", "test", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_LRuL0_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        boolean actual = doubleMetaphone.isDoubleMetaphoneEqual("test", "test", true);
        boolean expected = true;
        actual = doubleMetaphone.isDoubleMetaphoneEqual("test", "example", true);
        expected = false;
        actual = doubleMetaphone.isDoubleMetaphoneEqual(null, null, true);
        expected = true;
        actual = doubleMetaphone.isDoubleMetaphoneEqual(null, "example", true);
        expected = false;
        actual = doubleMetaphone.isDoubleMetaphoneEqual("test", null, true);
        expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcharAtWithInvalidIndex_zYDY1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "example";
        int index = 10;
        char expected = Character.MIN_VALUE;
        char actual = doubleMetaphone.charAt(value, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcharAtWithNegativeIndex_DxvR2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "example";
        int index = -1;
        char expected = Character.MIN_VALUE;
        char actual = doubleMetaphone.charAt(value, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Kprt0() throws EncoderException {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "test";
        Object expected = doubleMetaphone.doubleMetaphone(input);
        Object actual = doubleMetaphone.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNullInput_qUuQ3() {
        String value = null;
        boolean alternate = true;
        String expected = null;
        String actual = new DoubleMetaphone().doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_0_KRZl0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "A";
        boolean alternate = true;
        String expected = "A";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_1_XXOv1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "A";
        boolean alternate = false;
        String expected = "A";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_2_tzMv2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "AA";
        boolean alternate = true;
        String expected = "A";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_3_LAmg3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "AA";
        boolean alternate = false;
        String expected = "A";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_005_Aytd4() {
        String value = "Jackson";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "JKSN";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_007_EaQu6() {
        String value = "Jones";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "JNS";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_String_boolean_3_tAce2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "B";
        boolean alternate = true;
        String expected = "P";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_String_boolean_4_OsBN3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "B";
        boolean alternate = false;
        String expected = "P";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_String_boolean_5_ywdy4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "C";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_String_boolean_6_rssi5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "C";
        boolean alternate = false;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_String_boolean_7_mcIj6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "D";
        boolean alternate = true;
        String expected = "T";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_String_boolean_8_FZif7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "D";
        boolean alternate = false;
        String expected = "T";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_String_boolean_11_QsOc10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "F";
        boolean alternate = true;
        String expected = "F";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_jyzJ0() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "test";
        String actual = d.doubleMetaphone(value, false);
        String expected = "TST";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone1_ZJuO1() {
        DoubleMetaphone d = new DoubleMetaphone();
        String value = "test";
        String actual = d.doubleMetaphone(value, true);
        String expected = "TST";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNullInput_YLsd0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(null, false);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEmptyInput_imZX1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("", false);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSingleLetterInput_ihMj2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("A", false);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_1_TwgQ1() {
        String value = "A";
        boolean alternate = false;
        String expected = "A";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_2_mjvA2() {
        String value = "AA";
        boolean alternate = false;
        String expected = "A";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_8_Kbjm8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "AY";
        boolean alternate = false;
        String expected = "A";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_9_pKGJ9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "AY";
        boolean alternate = true;
        String expected = "A";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_11_gBQc11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "C";
        boolean alternate = false;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_10_OdvV10() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEightLetters_dPGy11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "abcdefgh";
        String expected = "ABK";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_1_AjxW0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = false;
        String expected = "TST";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_2_gsGP1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = true;
        String expected = "TST";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsWithInvalidInput_iwIA1() {
        String value = "example";
        int start = 0;
        int length = 7;
        String[] criteria = {"ex", "amp", "e"};
        assertFalse(DoubleMetaphone.contains(value, start, length, criteria));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsWithEmptyCriteria_kgtm2() {
        String value = "example";
        int start = 0;
        int length = 7;
        String[] criteria = {};
        assertFalse(DoubleMetaphone.contains(value, start, length, criteria));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsWithNegativeStart_yHef3() {
        String value = "example";
        int start = -1;
        int length = 7;
        String[] criteria = {"ex", "ampl", "e"};
        assertFalse(DoubleMetaphone.contains(value, start, length, criteria));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsWithStartExceedingLength_znXB5() {
        String value = "example";
        int start = 8;
        int length = 7;
        String[] criteria = {"ex", "ampl", "e"};
        assertFalse(DoubleMetaphone.contains(value, start, length, criteria));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void encode_null_returnsNull_odOG0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String encoded = doubleMetaphone.encode(null);
        org.junit.jupiter.api.Assertions.assertNull(encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void encode_emptyString_returnsNull_JHhd1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String encoded = doubleMetaphone.encode("");
        org.junit.jupiter.api.Assertions.assertNull(encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void encode_singleLetter_returnsSingleLetter_CwED2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String encoded = doubleMetaphone.encode("A");
        org.junit.jupiter.api.Assertions.assertEquals("A", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_tLmw0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        doubleMetaphone.setMaxCodeLen(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_validInput_YlMu1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        doubleMetaphone.setMaxCodeLen(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_invalidInput_nAYu2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_boundaryValues_jNza3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        doubleMetaphone.setMaxCodeLen(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_extremeValues_gAPB4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        doubleMetaphone.setMaxCodeLen(Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_multipleInputs_jLTK9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        doubleMetaphone.setMaxCodeLen(5);
        doubleMetaphone.setMaxCodeLen(10);
        doubleMetaphone.setMaxCodeLen(15);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_validInputs_IEsB12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        doubleMetaphone.setMaxCodeLen(1);
        doubleMetaphone.setMaxCodeLen(10);
        doubleMetaphone.setMaxCodeLen(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxCodeLenWithParam_tvdP1_vrTa0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        int param = 0; // Replace with the parameter value
        int expected = 0; // Replace with the expected value
        doubleMetaphone.setMaxCodeLen(param);
        int actual = doubleMetaphone.getMaxCodeLen();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxCodeLen_NROa0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        int expected = 4; // Replace with the expected value
        int actual = doubleMetaphone.getMaxCodeLen();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcharAtWithValidIndex_cpue0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "example";
        int index = 3;
        char expected = 'm';
        char actual = doubleMetaphone.charAt(value, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_4_zSzv4_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "value";
        boolean alternate = true;
        String expected = "expected";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_7_dPep7_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "value";
        boolean alternate = false;
        String expected = "expected";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_NdOc1_fid1() {
        String value = "test";
        boolean alternate = true;
        String expected = "primary";
        String actual = new DoubleMetaphone().doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone5_Oxsz4_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = true;
        String expected = "KNT";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone6_yENt5_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = false;
        String expected = "KNT";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_005_ZyLm4_fid1() {
        String value = "value";
        boolean alternate = true;
        String expected = "expected";
        String actual = new DoubleMetaphone().doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_001_mgos0_fid1() {
        String value = "DoubleMetaphone";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "TPLM";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_002_CXJB1_fid1() {
        String value = "DoubleMetaphone";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, true);
        String expected = "TPLM";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_003_YGbw2_fid1() {
        String value = "McCormick";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "MKRM";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_004_fdXy3_fid1() {
        String value = "McCormick";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, true);
        String expected = "MKRM";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_006_nOPH5_fid1() {
        String value = "Jackson";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, true);
        String expected = "AKSN";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_008_VoKE7_fid1() {
        String value = "Jones";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, true);
        String expected = "ANS";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_009_rSfO8_fid1() {
        String value = "Jacobs";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "JKPS";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_010_yygq9_fid1() {
        String value = "Jacobs";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, true);
        String expected = "AKPS";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_011_VKEL10_fid1() {
        String value = "Jacquemet";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        String expected = "JKMT";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithMultipleLetterInput_hJYi3_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("APPLE", false);
        assertEquals("APL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternatingInput_VGBY4_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("APPLE", true);
        assertEquals("APL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSlavoGermanicInput_PkfM5_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("JOS\u00C7A", false);
        assertEquals("JSS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNonSlavoGermanicInput_XCGS6_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("JOSE", false);
        assertEquals("HS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_3_kINY3_fid1() {
        String value = "AX";
        boolean alternate = false;
        String expected = "AX";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_4_iCKA4_fid1() {
        String value = "AX";
        boolean alternate = true;
        String expected = "AX";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_6_rgdj6_fid1() {
        String value = "OO";
        boolean alternate = false;
        String expected = "O";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_7_VNUj7_fid1() {
        String value = "OA";
        boolean alternate = false;
        String expected = "O";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_9_jPtb9_fid1() {
        String value = "AKS";
        boolean alternate = true;
        String expected = "AKS";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_10_qVwk10_fid1() {
        String value = "O";
        boolean alternate = false;
        String expected = "O";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_0_VEYF0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "";
        boolean alternate = false;
        String expected = "";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_6_yhJi6_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "AX";
        boolean alternate = false;
        String expected = "AX";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_7_EQqQ7_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "AX";
        boolean alternate = true;
        String expected = "AX";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_OOZL2_1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "smith";
        boolean alternate = false;
        String expectedResult = "XMT";
        value = "schmidt";
        alternate = false;
        expectedResult = "XMT";
        assertEquals(expectedResult, doubleMetaphone.doubleMetaphone(value, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_koOG0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = true;
        String expected = "t3st";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_jolu1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = false;
        String expected = "t3st";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsWithValidInput_uoGm0_fid1() {
        String value = "example";
        int start = 0;
        int length = 7;
        String[] criteria = {"ex", "ampl", "e"};
        assertFalse(DoubleMetaphone.contains(value, start, length, criteria));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNullInput_BSuy1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertNull(doubleMetaphone.doubleMetaphone(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEmptyInput_ntXS2_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertNull(doubleMetaphone.doubleMetaphone(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void encode_multipleLetters_returnsCorrectEncoding_wcRs3_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String encoded = doubleMetaphone.encode("APPLE");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void encode_multipleWords_returnsCorrectEncoding_WyUI4_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String encoded = doubleMetaphone.encode("APPLE BANANA");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_String_boolean_001_ImZv0_gIza0_fid1() {
        String value = "DoubleMetaphone";
        boolean alternate = true;
        String expected = "TPLM";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doubleMetaphone_String_boolean_002_fTCs1_qgmC0_fid1() {
        String value = "DoubleMetaphone";
        boolean alternate = false;
        String expected = "TPLM";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_Pvqs0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual("test", "test"));
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual("test", "test", false));
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual("test", "test", true));
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual("test", "test", false));
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual("test", "test", true));
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual("test", "test", false));
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual("test", "test", true));
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual("test", "test", false));
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual("test", "test", true));
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual("test", "test", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_LRuL0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        boolean actual = doubleMetaphone.isDoubleMetaphoneEqual("test", "test", true);
        boolean expected = true;
        assertEquals(expected, actual);
        actual = doubleMetaphone.isDoubleMetaphoneEqual("test", "example", true);
        expected = false;
        assertEquals(expected, actual);
        actual = doubleMetaphone.isDoubleMetaphoneEqual(null, null, true);
        expected = true;
        assertEquals(expected, actual);
        actual = doubleMetaphone.isDoubleMetaphoneEqual(null, "example", true);
        expected = false;
        assertEquals(expected, actual);
        actual = doubleMetaphone.isDoubleMetaphoneEqual("test", null, true);
        expected = false;
        assertEquals(expected, actual);
    }
}