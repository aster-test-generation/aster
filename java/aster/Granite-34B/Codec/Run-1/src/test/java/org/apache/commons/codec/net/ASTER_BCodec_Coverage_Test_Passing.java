/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNull_BBUc0() {
        BCodec bCodec = new BCodec();
        byte[] bytes = null;
        byte[] result = bCodec.doEncoding(bytes);
        assert (result == null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNotNull_VMze1() {
        BCodec bCodec = new BCodec();
        byte[] bytes = "test".getBytes();
        byte[] result = bCodec.doEncoding(bytes);
        assert (result != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_PPBo0() throws EncoderException {
        BCodec bCodec = new BCodec();
        Object value = null;
        Object result = bCodec.encode(value);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringObject_XOEz2() throws EncoderException {
        BCodec bCodec = new BCodec();
        Object value = new Object();
        try {
            bCodec.encode(value);
            Assertions.fail("Expected EncoderException");
        } catch (EncoderException e) {
            Assertions.assertEquals(e.getMessage(), "Objects of type " + value.getClass().getName() + " cannot be encoded using BCodec");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidInput_PozZ3() throws EncoderException {
        BCodec bCodec = new BCodec();
        Object value = 123;
        try {
            bCodec.encode(value);
            Assertions.fail("Expected EncoderException");
        } catch (EncoderException e) {
            Assertions.assertEquals(e.getMessage(), "Objects of type " + value.getClass().getName() + " cannot be encoded using BCodec");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNull_btMN0() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        Object value = null;
        Object actual = bCodec.decode(value);
        Assertions.assertEquals(null, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNonStringObject_OAYi2() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        Object value = new Object();
        try {
            bCodec.decode(value);
            Assertions.fail("DecoderException expected");
        } catch (DecoderException e) {
            Assertions.assertEquals("Objects of type " + value.getClass().getName() + " cannot be decoded using BCodec", e.getMessage());
        }
    }
}