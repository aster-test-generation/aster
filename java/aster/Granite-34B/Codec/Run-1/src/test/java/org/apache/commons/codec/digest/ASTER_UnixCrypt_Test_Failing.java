/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_UnixCrypt_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullOriginal_ViWR1() {
        String original = null;
        String salt = "salt";
        String expected = null; // replace with the expected result
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptySalt_HwcJ4() {
        String original = "password";
        String salt = "";
        String expected = "$1$$"; // replace with the expected result
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithoutOriginal_XJWS1() {
        byte[] original = null;
        String expected = UnixCrypt.crypt(original);
        assertEquals("expectedResult", expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginalAndEmptySalt_YGNb0() {
        byte[] original = new byte[0];
        String salt = "";
        String expected = "AA";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndEmptySalt_QepY2() {
        byte[] original = "password".getBytes();
        String salt = "";
        String expected = "AA";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyPasswordAndSalt_noda0() {
        String password = "";
        String salt = "";
        String expected = "*0";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordLength1AndSaltLength1_TDtv1() {
        String password = "a";
        String salt = "b";
        String expected = "a*1";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordLength2AndSaltLength1_jWgS3() {
        String password = "ab";
        String salt = "c";
        String expected = "ab*3";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordLength3AndSaltLength1_NPHS5() {
        String password = "abc";
        String salt = "d";
        String expected = "abc*5";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordLength4AndSaltLength1_wIma7() {
        String password = "abcd";
        String salt = "e";
        String expected = "abcd*7";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndEmptySalt_Xjtw3() {
        UnixCrypt unixCrypt = new UnixCrypt();
        String salt = "";
        byte[] original = {0, 1, 2, 3, 4, 5, 6, 7};
        String result = unixCrypt.crypt(original, salt);
        assertEquals(".BdefgHij", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndSaltLengthLessThanTwo_vLlj5() {
        UnixCrypt unixCrypt = new UnixCrypt();
        String salt = "a";
        byte[] original = {0, 1, 2, 3, 4, 5, 6, 7};
        String result = unixCrypt.crypt(original, salt);
        assertEquals("a.BdefgHij", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndSaltLengthLessThanTwoAndInvalid_DKRv8() {
        UnixCrypt unixCrypt = new UnixCrypt();
        String salt = "1";
        byte[] original = {0, 1, 2, 3, 4, 5, 6, 7};
        String result = unixCrypt.crypt(original, salt);
        assertEquals("1.BdefgHij", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNull_nXJp1() {
        String original = null;
        String expected = null;
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmpty_bFSK2() {
        String original = "";
        String expected = "eW.o.v0vVO0VM";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLength1_IXJs3() {
        String original = "a";
        String expected = "ClziubpVNyofU";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLength2_ivkh4() {
        String original = "ab";
        String expected = "ukg9UPPLJDtn.";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLength3_Shjv5() {
        String original = "abc";
        String expected = "OJ2OQ9mXhWVVI";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLength4_txip6() {
        String original = "abcd";
        String expected = "0i7TTVrPJPF0.";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLength5_RNiy7() {
        String original = "abcde";
        String expected = "6U0f0qq.DwMJU";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLength6_ugfL8() {
        String original = "abcdef";
        String expected = "rnkb/DGA7Ca0E";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLength7_QnsT9() {
        String original = "abcdefg";
        String expected = "xVIzF1trwyl0U";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLength8_NgQK10() {
        String original = "abcdefgh";
        String expected = "svFXnyjevxwag";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidOriginalAndSaltTypes_sciO7_AFEg0() {
        Object original = new Object();
        Object salt = new Object();
        String expected = null; // replace with the expected result
        String actual = UnixCrypt.crypt(original.toString(), salt.toString());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_DrWe0_fid1() {
        String original = "password";
        String salt = "salt";
        String expected = "$1$salt$"; // replace with the expected result
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_pFbM2_fid1() {
        String original = "";
        String salt = "salt";
        String expected = "$1$salt$"; // replace with the expected result
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_jxxh3_fid1() {
        String original = "password";
        String salt = null;
        String expected = null; // replace with the expected result
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginalAndSalt_Odjr1_fid1() {
        byte[] original = new byte[0];
        String salt = "AB";
        String expected = "AB";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndSalt_wrSG3_fid1() {
        byte[] original = "password".getBytes();
        String salt = "AB";
        String expected = "AB";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndInvalidSalt_pcnW4_fid1() {
        byte[] original = "password".getBytes();
        String salt = "12";
        String expected = "12";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordLength1AndSaltLength2_NRtS2_fid1() {
        String password = "a";
        String salt = "bc";
        String expected = "a*2";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordLength2AndSaltLength2_MxVD4_fid1() {
        String password = "ab";
        String salt = "cd";
        String expected = "ab*4";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordLength3AndSaltLength2_VaWh6_fid1() {
        String password = "abc";
        String salt = "de";
        String expected = "abc*6";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordLength4AndSaltLength2_Gcxm8_fid1() {
        String password = "abcd";
        String salt = "ef";
        String expected = "abcd*8";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyPasswordAndRandomSalt_FwyL1_fid1() {
        String password = "";
        String salt = "ab";
        String expected = "ab0";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordLongerThan8BytesAndSalt_gdsM2_fid1() {
        String password = "password123";
        String salt = "cd";
        String expected = "cdS6.5,";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordShorterThan8BytesAndSalt_Vclb3_fid1() {
        String password = "pass";
        String salt = "ef";
        String expected = "ef.u";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordLongerThan8BytesAndRandomSalt_Evyc4_fid1() {
        String password = "password123";
        String salt = "gh";
        String expected = "gh,5/1.";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordShorterThan8BytesAndRandomSalt_Mhcz5_fid1() {
        String password = "pass";
        String salt = "ij";
        String expected = "ij,x";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndSalt_EgoY0_fid1() {
        UnixCrypt unixCrypt = new UnixCrypt();
        String salt = "ab";
        byte[] original = {0, 1, 2, 3, 4, 5, 6, 7};
        String result = unixCrypt.crypt(original, salt);
        assertEquals("ab.cdefgHij", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndNullSalt_Qaes1_fid1() {
        UnixCrypt unixCrypt = new UnixCrypt();
        String salt = null;
        byte[] original = {0, 1, 2, 3, 4, 5, 6, 7};
        String result = unixCrypt.crypt(original, salt);
        assertEquals("A.BdefgHij", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndInvalidSalt_Knkm2_fid1() {
        UnixCrypt unixCrypt = new UnixCrypt();
        String salt = "12";
        byte[] original = {0, 1, 2, 3, 4, 5, 6, 7};
        String result = unixCrypt.crypt(original, salt);
        assertEquals("12.cdefgHij", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndSaltLengthMoreThanTwo_NRbu4_fid1() {
        UnixCrypt unixCrypt = new UnixCrypt();
        String salt = "abcd";
        byte[] original = {0, 1, 2, 3, 4, 5, 6, 7};
        String result = unixCrypt.crypt(original, salt);
        assertEquals("ab.cdefgHij", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndSaltLengthMoreThanTwoAndInvalid_KDpP7_fid1() {
        UnixCrypt unixCrypt = new UnixCrypt();
        String salt = "1234";
        byte[] original = {0, 1, 2, 3, 4, 5, 6, 7};
        String result = unixCrypt.crypt(original, salt);
        assertEquals("12.cdefgHij", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidSalt_jpSy1_fid1() {
        byte[] original = new byte[8];
        String salt = "abc";
        String expected = "aa";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual.substring(0, 2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_zhUM2_fid1() {
        byte[] original = new byte[8];
        String salt = "aa";
        String expected = "aaa";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual.substring(0, 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_PvZr3_fid1() {
        byte[] original = new byte[0];
        String salt = "aa";
        String expected = "aaa";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual.substring(0, 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithShortOriginal_LRVP4_fid1() {
        byte[] original = new byte[3];
        String salt = "aa";
        String expected = "aaa";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual.substring(0, 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_SQpk5_fid1() {
        byte[] original = new byte[10];
        String salt = "aa";
        String expected = "aaa";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual.substring(0, 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllOnesOriginal_hroo7_fid1() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0xFF);
        String salt = "aa";
        String expected = "aaa";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual.substring(0, 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmpty_bFSK2_fid1() {
        String original = "";
        String expected = "$1$12345678$abcdefg";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLength1_IXJs3_fid1() {
        String original = "a";
        String expected = "$1$12345678$abcdefg";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLength2_ivkh4_fid1() {
        String original = "ab";
        String expected = "$1$12345678$abcdefg";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLength3_Shjv5_fid1() {
        String original = "abc";
        String expected = "$1$12345678$abcdefg";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLength4_txip6_fid1() {
        String original = "abcd";
        String expected = "$1$12345678$abcdefg";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLength5_RNiy7_fid1() {
        String original = "abcde";
        String expected = "$1$12345678$abcdefg";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLength6_ugfL8_fid1() {
        String original = "abcdef";
        String expected = "$1$12345678$abcdefg";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLength7_QnsT9_fid1() {
        String original = "abcdefg";
        String expected = "$1$12345678$abcdefg";
        assertEquals(expected, UnixCrypt.crypt(original));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLength8_NgQK10_fid1() {
        String original = "abcdefgh";
        String expected = "$1$12345678$abcdefg";
        assertEquals(expected, UnixCrypt.crypt(original));
    }
}