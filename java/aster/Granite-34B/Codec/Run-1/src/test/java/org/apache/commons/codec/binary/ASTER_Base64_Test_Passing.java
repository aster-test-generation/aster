/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base64_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_LTGk0() {
        Base64 base64 = new Base64(true);
        assertTrue(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe2_YnTD1() {
        Base64 base64 = new Base64(10, new byte[10], true);
        assertTrue(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe3_PBFa2() {
        Base64 base64 = new Base64(10, new byte[10], true, CodecPolicy.STRICT);
        assertTrue(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe4_rKQy3() {
        Base64 base64 = new Base64(10, new byte[10]);
        assertFalse(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe5_dXVX4() {
        Base64 base64 = new Base64(10);
        assertFalse(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe6_SVuu5() {
        Base64 base64 = new Base64();
        assertFalse(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_uApq0() {
        String base64String = "SGVsbG8gV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = Base64.decodeBase64(base64String);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithUrlSafe_BbKd1() {
        String base64String = "SGVsbG8gV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = new Base64(true).decode(base64String);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithLineLength_TyHC2() {
        String base64String = "SGVsbG8gV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = new Base64(76).decode(base64String);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithLineLengthAndSeparator_sxmP3() {
        String base64String = "SGVsbG8gV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = new Base64(76, "\n".getBytes()).decode(base64String);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithLineLengthAndSeparatorAndUrlSafe_wUdd4() {
        String base64String = "SGVsbG8gV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = new Base64(76, "\n".getBytes(), true).decode(base64String);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithLineLengthAndSeparatorAndUrlSafeAndPolicy_YCVb5() {
        String base64String = "SGVsbG8gV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = new Base64(76, "\n".getBytes(), true, CodecPolicy.LENIENT).decode(base64String);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String_lAby0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        String encodedString = Base64.encodeBase64String(binaryData);
        assertEquals("AAECAwQFBgcICQ==", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_VALk0() {
        Base64 base64 = new Base64(1, new byte[]{1}, true);
        assertArrayEquals(new byte[]{1}, base64.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithNoLineSeparator_CgjN1() {
        Base64 base64 = new Base64(1, null, true);
        assertArrayEquals(null, base64.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithNoBase64Object_xARq2() {
        Base64 base64 = new Base64();
        assertArrayEquals(null, base64.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString_Lawu0() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        String encodedString = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals("AQIDBAU", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_uqtd0() {
        assertTrue(Base64.isBase64("dGVzdA=="));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_2_rKwb1() {
        assertTrue(Base64.isBase64("dGVzdA"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_3_wnxG2() {
        assertTrue(Base64.isBase64("dGVzdA==dGVzdA=="));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_4_cXqM3() {
        assertTrue(Base64.isBase64("dGVzdA==dGVzdA"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_0_nNgT0() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet((byte) 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_1_vWUL1() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.LENIENT);
        assertFalse(base64.isInAlphabet((byte) 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_2_yPqs2() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet((byte) 2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_3_QVqB3() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.LENIENT);
        assertFalse(base64.isInAlphabet((byte) 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_4_QBNG4() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet((byte) 4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_5_lFkI5() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.LENIENT);
        assertFalse(base64.isInAlphabet((byte) 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_6_WFEu6() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet((byte) 6));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_7_Pokh7() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.LENIENT);
        assertFalse(base64.isInAlphabet((byte) 7));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_8_JENu8() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet((byte) 8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_9_Yatu9() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.LENIENT);
        assertFalse(base64.isInAlphabet((byte) 9));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_10_ALbA10() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet((byte) 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_11_JtBc11() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.LENIENT);
        assertFalse(base64.isInAlphabet((byte) 11));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_12_sSlf12() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet((byte) 12));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_13_wgFP13() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.LENIENT);
        assertFalse(base64.isInAlphabet((byte) 13));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_14_dBzv14() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet((byte) 14));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_15_aZsE15() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.LENIENT);
        assertFalse(base64.isInAlphabet((byte) 15));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isArrayByteBase64Test_DCdp0() {
        byte[] arrayOctet = new byte[10];
        assertFalse(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_isEmpty_dZTz1() {
        byte[] binaryData = new byte[]{};
        boolean isChunked = true;
        boolean urlSafe = true;
        int maxResultSize = 100;
        byte[] expected = new byte[]{};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_maxResultSize_CiGg4_1() {
        byte[] binaryData = new byte[]{1, 2, 3};
        boolean isChunked = true;
        boolean urlSafe = true;
        int maxResultSize = 2;
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,
        () -> Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_1_lMOq1() {
        byte[] arrayOctet = new byte[0];
        boolean result = Base64.isBase64(arrayOctet);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_2_XruI2() {
        byte[] arrayOctet = new byte[1];
        boolean result = Base64.isBase64(arrayOctet);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_VPHI0() {
        Base64 base64 = new Base64();
        String input = "SGVsbG8gV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        assertArrayEquals(expected, base64.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUrlSafe_Fsqv1() {
        Base64 base64 = new Base64(true);
        String input = "SGVsbG8gV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        assertArrayEquals(expected, base64.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithLineLength_JQae2() {
        Base64 base64 = new Base64(76);
        String input = "SGVsbG8gV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        assertArrayEquals(expected, base64.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithLineLengthAndSeparator_puzj3() {
        Base64 base64 = new Base64(76, "\n".getBytes());
        String input = "SGVsbG8gV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        assertArrayEquals(expected, base64.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithDecodingPolicy_NQwP4() {
        Base64 base64 = new Base64(76, "\n".getBytes(), true, CodecPolicy.LENIENT);
        String input = "SGVsbG8gV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        assertArrayEquals(expected, base64.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_kRik0() {
        Base64 base64 = new Base64();
        byte[] pArray = new byte[0];
        assertEquals("", base64.encodeAsString(pArray));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString2_ZrxJ1() {
        Base64 base64 = new Base64(76, new byte[0]);
        byte[] pArray = new byte[0];
        assertEquals("", base64.encodeAsString(pArray));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString3_EKtR2() {
        Base64 base64 = new Base64(76, new byte[0], true);
        byte[] pArray = new byte[0];
        assertEquals("", base64.encodeAsString(pArray));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString4_gqmV3() {
        Base64 base64 = new Base64(76, new byte[0], true, CodecPolicy.STRICT);
        byte[] pArray = new byte[0];
        assertEquals("", base64.encodeAsString(pArray));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLengthWithNullArray_kwZA0() {
        byte[] array = null;
        int expected = 0;
        int actual = Base64.toLength(array);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLengthWithNonNullArray_LRty1() {
        byte[] array = new byte[10];
        int expected = 10;
        int actual = Base64.toLength(array);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_akQw0() {
        Base64 base64 = new Base64(0, new byte[0]);
        byte[] pArray = new byte[10];
        long expected = 16;
        long actual = base64.getEncodedLength(pArray);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyArray_prkm0() {
        Base64 base64 = new Base64();
        byte[] input = {};
        byte[] expected = {};
        byte[] actual = base64.encode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithArrayOctetAndAllowWSPad_uahK0() {
        Base64 base64 = new Base64(0, new byte[0], false);
        byte[] arrayOctet = new byte[1];
        arrayOctet[0] = 65;
        boolean result = base64.isInAlphabet(arrayOctet, true);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithArrayOctetAndAllowWSPadAndNotisInAlphabet_KMLJ2() {
        Base64 base64 = new Base64(0, new byte[0], false);
        byte[] arrayOctet = new byte[1];
        arrayOctet[0] = 66;
        boolean result = base64.isInAlphabet(arrayOctet, true);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_cLoG0() {
        Base64 base64 = new Base64();
        byte[] array = new byte[0];
        assertEquals("", base64.encodeToString(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_UChW0_1() {
        Base64 base64 = new Base64();
        assertTrue(Base64.isWhiteSpace((byte) ' '));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_UChW0_2() {
        Base64 base64 = new Base64();
        assertTrue(Base64.isWhiteSpace((byte) '\n'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_UChW0_3() {
        Base64 base64 = new Base64();
        assertTrue(Base64.isWhiteSpace((byte) '\r'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_UChW0_4() {
        Base64 base64 = new Base64();
        assertTrue(Base64.isWhiteSpace((byte) '\t'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_UChW0_5() {
        Base64 base64 = new Base64();
        assertTrue(Base64.isWhiteSpace((byte) '\f'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_UChW0_6() {
        Base64 base64 = new Base64();
        assertTrue(!Base64.isWhiteSpace((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingWithStrictPolicy_djbK0() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.STRICT);
        assertTrue(base64.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingWithLenientPolicy_Cvxy1() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.LENIENT);
        assertTrue(!base64.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidStringInput_VspV2() throws DecoderException {
        Base64 base64 = new Base64();
        String input = "SGVsbG8sIFdvcmxkIQ==";
        byte[] expected = "Hello, World!".getBytes();
        assertArrayEquals(expected, base64.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCodecPolicy_5_bbZQ4() {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3}, true, CodecPolicy.LENIENT);
        assertEquals(base64.getCodecPolicy(), CodecPolicy.LENIENT);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCodecPolicy_6_ZBkL5() {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3}, false, CodecPolicy.LENIENT);
        assertEquals(base64.getCodecPolicy(), CodecPolicy.LENIENT);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCodecPolicy_7_FqCh6() {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3}, true, CodecPolicy.STRICT);
        assertEquals(base64.getCodecPolicy(), CodecPolicy.STRICT);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCodecPolicy_8_heJY7() {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3}, false, CodecPolicy.STRICT);
        assertEquals(base64.getCodecPolicy(), CodecPolicy.STRICT);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_1_HTXU0() {
        Base64 base64 = new Base64();
        byte[] pArray = new byte[0];
        byte[] expected = new byte[0];
        assertArrayEquals(expected, base64.decode(pArray));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChunkSeparatorWithLineLengthAndLineSeparator_fHMe2_oSEv0() {
        Base64 base64 = new Base64(10, new byte[]{0x0A});
        byte[] expected = Base64.CHUNK_SEPARATOR;
        byte[] actual = base64.getChunkSeparator();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChunkSeparatorWithLineLengthAndLineSeparatorAndUrlSafe_JpGk3_rpxr0() {
        Base64 base64 = new Base64(10, new byte[]{0x0A}, true);
        byte[] expected = Base64.CHUNK_SEPARATOR;
        byte[] actual = base64.getChunkSeparator();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChunkSeparatorWithLineLengthAndLineSeparatorAndUrlSafeAndDecodingPolicy_sKcn4_encx0() {
        Base64 base64 = new Base64(10, new byte[]{0x0A}, true, CodecPolicy.STRICT);
        byte[] expected = Base64.CHUNK_SEPARATOR;
        byte[] actual = base64.getChunkSeparator();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChunkSeparatorWithLineLengthAndUrlSafe_uEdz6_FImU0() {
        Base64 base64 = new Base64(10, new byte[0]);
        byte[] expected = Base64.CHUNK_SEPARATOR;
        byte[] actual = base64.getChunkSeparator();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChunkSeparatorWithLineLengthAndLineSeparatorAndDecodingPolicy_zdkN7_BucA0() {
        Base64 base64 = new Base64(10, new byte[]{0x0A}, true);
        byte[] expected = Base64.CHUNK_SEPARATOR.clone();
        byte[] actual = base64.getChunkSeparator();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChunkSeparatorWithLineLengthAndUrlSafeAndDecodingPolicy_LdLy8_nnGY0() {
        Base64 base64 = new Base64(10, new byte[1], true, CodecPolicy.STRICT);
        byte[] expected = Base64.CHUNK_SEPARATOR;
        byte[] actual = base64.getChunkSeparator();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithArrayOctetAndNotAllowWSPad_OOOq1_fid2() {
        Base64 base64 = new Base64(0, new byte[0], false);
        byte[] arrayOctet = new byte[1];
        arrayOctet[0] = 65;
        boolean result = base64.isInAlphabet(arrayOctet, false);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithArrayOctetAndAllowWSPadAndOctetIsPad_Fboz4_fid2() {
        Base64 base64 = new Base64(0, new byte[0], false);
        byte[] arrayOctet = new byte[1];
        arrayOctet[0] = 61;
        boolean result = base64.isInAlphabet(arrayOctet, true);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithArrayOctetAndAllowWSPadAndOctetIsWhitespace_VvpK6_fid2() {
        Base64 base64 = new Base64(0, new byte[0], false);
        byte[] arrayOctet = new byte[1];
        arrayOctet[0] = 32;
        boolean result = base64.isInAlphabet(arrayOctet, true);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_UChW0() {
        Base64 base64 = new Base64();
        assertTrue(Base64.isWhiteSpace((byte) ' '));
        assertTrue(Base64.isWhiteSpace((byte) '\n'));
        assertTrue(Base64.isWhiteSpace((byte) '\r'));
        assertTrue(Base64.isWhiteSpace((byte) '\t'));
        assertTrue(Base64.isWhiteSpace((byte) '\f'));
        assertTrue(!Base64.isWhiteSpace((byte) 'A'));
    }
}