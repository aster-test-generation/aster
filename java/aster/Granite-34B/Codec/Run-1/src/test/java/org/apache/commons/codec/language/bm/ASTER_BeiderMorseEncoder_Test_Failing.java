/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BeiderMorseEncoder_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuleType_RULES_WIqW2() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setRuleType(RuleType.RULES);
        assertEquals(RuleType.RULES, encoder.getRuleType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType_celD1() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        RuleType expected = encoder.getRuleType();
        assertEquals(expected, RuleType.values()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType_KPiG2() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        RuleType expected = encoder.getRuleType();
        assertEquals(expected, RuleType.values()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType_vpea3() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        RuleType expected = encoder.getRuleType();
        assertEquals(expected, RuleType.values()[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType_tpnq4() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        RuleType expected = encoder.getRuleType();
        assertEquals(expected, RuleType.values()[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType_owhA5() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        RuleType expected = encoder.getRuleType();
        assertEquals(expected, RuleType.values()[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType_RxUW6() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        RuleType expected = encoder.getRuleType();
        assertEquals(expected, RuleType.values()[6]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType_CtbN7() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        RuleType expected = encoder.getRuleType();
        assertEquals(expected, RuleType.values()[7]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType_bDtX8() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        RuleType expected = encoder.getRuleType();
        assertEquals(expected, RuleType.values()[8]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType_hsGK9() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        RuleType expected = encoder.getRuleType();
        assertEquals(expected, RuleType.values()[9]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_fZgA0() throws EncoderException {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String source = "Hello, World!";
        String expected = ".... . .-.. .-.. ---  .-- --- .-. .-.. -..";
        assertEquals(expected, encoder.encode(source));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNumbers_SoTt1() throws EncoderException {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String source = "12345";
        String expected = ".. --- ... - .... ..";
        assertEquals(expected, encoder.encode(source));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonNullSource_GlFr1_ijrM0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String source = "Hello, World!";
        String encoded = null;
        try {
            encoded = encoder.encode(source);
        } catch (EncoderException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        assertEquals(".... . .-.. .-.. ---  .-- --- .-. .-.. -..", encoded);
    }
}