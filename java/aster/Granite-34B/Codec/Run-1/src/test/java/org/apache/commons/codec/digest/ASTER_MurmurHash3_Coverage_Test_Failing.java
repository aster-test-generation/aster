/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash3_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_ArEv0() {
        String data = "someString";
        int expected = 12345;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_ivcS1() {
        String data = "someOtherString";
        int expected = 54321;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_KyOz0_Oqhg0() {
        byte[] data = new byte[10];
        assertEquals(MurmurHash3.hash32(data, -1127693702, data.length, MurmurHash3.DEFAULT_SEED), -1127693702);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hash128x64Test2_IuVI1_Lmit0_1() {
        byte[] data = new byte[10];
        int offset = 1;
        int length = 10;
        int seed = 2;
        long[] expected = {2, 3};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(expected[0], actual[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hash128x64Test2_IuVI1_Lmit0_2() {
        byte[] data = new byte[10];
        int offset = 1;
        int length = 10;
        int seed = 2;
        long[] expected = {2, 3};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(expected[1], actual[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hash128x64Test3_LGrm2_sSKY0_1() {
        byte[] data = new byte[10];
        int offset = 2;
        int length = 10;
        int seed = 1;
        long[] expected = {3, 4};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(expected[0], actual[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hash128x64Test3_LGrm2_sSKY0_2() {
        byte[] data = new byte[10];
        int offset = 2;
        int length = 10;
        int seed = 1;
        long[] expected = {3, 4};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(expected[1], actual[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hash128x64Test4_mWYU3_lvtX0_1() {
        byte[] data = new byte[10];
        int offset = 2;
        int length = 10;
        int seed = 2;
        long[] expected = {4, 5};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(expected[0], actual[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hash128x64Test4_mWYU3_lvtX0_2() {
        byte[] data = new byte[10];
        int offset = 2;
        int length = 10;
        int seed = 2;
        long[] expected = {4, 5};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(expected[1], actual[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hash128x64Test5_lXxS4_alIP0_1() {
        byte[] data = new byte[10];
        int offset = 3;
        int length = 10;
        int seed = 1;
        long[] expected = {5, 6};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(expected[0], actual[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hash128x64Test5_lXxS4_alIP0_2() {
        byte[] data = new byte[10];
        int offset = 3;
        int length = 10;
        int seed = 1;
        long[] expected = {5, 6};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(expected[1], actual[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hash128x64Test6_OyxA5_GbiN0_1() {
        byte[] data = new byte[10];
        int offset = 3;
        int length = 10;
        int seed = 2;
        long[] expected = {6, 7};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(expected[0], actual[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hash128x64Test6_OyxA5_GbiN0_2() {
        byte[] data = new byte[10];
        int offset = 3;
        int length = 10;
        int seed = 2;
        long[] expected = {6, 7};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(expected[1], actual[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hash128x64Test7_McRS6_Ljxt0_1() {
        byte[] data = new byte[10];
        int offset = 4;
        int length = 10;
        int seed = 1;
        long[] expected = {7, 8};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(expected[0], actual[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hash128x64Test7_McRS6_Ljxt0_2() {
        byte[] data = new byte[10];
        int offset = 4;
        int length = 10;
        int seed = 1;
        long[] expected = {7, 8};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(expected[1], actual[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hash128x64Test9_JOcC8_wAwx0_1() {
        byte[] data = new byte[10];
        int offset = 5;
        int length = 10;
        int seed = 1;
        long[] expected = {9, 10};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(expected[0], actual[0]);
        assertEquals(expected.length, actual.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hash128x64Test9_JOcC8_wAwx0_2() {
        byte[] data = new byte[10];
        int offset = 5;
        int length = 10;
        int seed = 1;
        long[] expected = {9, 10};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(expected[1], actual[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_KyOz0_Oqhg0_fid3() {
        byte[] data = new byte[10];
        assertEquals(MurmurHash3.hash32(data, 0, data.length, MurmurHash3.DEFAULT_SEED), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hash128x64Test9_JOcC8_wAwx0_1_fid3() {
        byte[] data = new byte[10];
        int offset = 5;
        int length = 10;
        int seed = 1;
        long[] expected = {9, 10};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(expected[0], actual[0]);
    }
}