/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base16_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_0_LeuB0() {
        Base16 base16 = new Base16(true, CodecPolicy.LENIENT);
        byte octet = (byte) 0;
        boolean result = base16.isInAlphabet(octet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_1_tJRN1() {
        Base16 base16 = new Base16(false, CodecPolicy.STRICT);
        byte octet = (byte) 1;
        boolean result = base16.isInAlphabet(octet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_2_Blkb2() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte octet = (byte) 2;
        boolean result = base16.isInAlphabet(octet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_PecL0() {
        Base16 base16 = new Base16();
        String input = "49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d";
        byte[] expected = new byte[]{73, 39, 109, 32, 107, 105, 108, 108, 105, 110, 103, 32, 121, 111, 117, 114, 32, 98, 114, 97, 105, 110, 32, 108, 105, 107, 101, 32, 97, 32, 112, 111, 105, 115, 111, 110, 111, 117, 115, 32, 109, 117, 115, 104, 114, 111, 111, 109};
        assertArrayEquals(expected, base16.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithPolicy_DUsF1() {
        Base16 base16 = new Base16(false, CodecPolicy.LENIENT);
        String input = "49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d";
        byte[] expected = new byte[]{73, 39, 109, 32, 107, 105, 108, 108, 105, 110, 103, 32, 121, 111, 117, 114, 32, 98, 114, 97, 105, 110, 32, 108, 105, 107, 101, 32, 97, 32, 112, 111, 105, 115, 111, 110, 111, 117, 115, 32, 109, 117, 115, 104, 114, 111, 111, 109};
        assertArrayEquals(expected, base16.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString2_mNhe1() {
        Base16 base16 = new Base16(false, CodecPolicy.LENIENT);
        byte[] array = new byte[]{-1, -2, -3, -4, -5, -6, -7, -8, -9, -10};
        String expected = "FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0";
        String actual = base16.encodeAsString(array);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_WszC0() {
        Base16 base16 = new Base16(true, CodecPolicy.LENIENT);
        assertTrue(base16.isInAlphabet("0123456789ABCDEF"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet7_LNjl6() {
        Base16 base16 = new Base16(true, CodecPolicy.LENIENT);
        assertTrue(base16.isInAlphabet(StringUtils.getBytesUtf8("0123456789ABCDEF"), true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet9_EIIO8() {
        Base16 base16 = new Base16(true, CodecPolicy.LENIENT);
        assertTrue(base16.isInAlphabet(StringUtils.getBytesUtf8("0123456789ABCDEF"), false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isInAlphabet_WithArrayOctetAndAllowWSPad_ReturnsTrue_xxgr0() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        boolean actual = base16.isInAlphabet(arrayOctet, true);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isInAlphabet_WithArrayOctetAndAllowWSPad_ReturnsTrue_2_tjXw2() {
        Base16 base16 = new Base16(true, CodecPolicy.LENIENT);
        byte[] arrayOctet = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        boolean actual = base16.isInAlphabet(arrayOctet, true);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void isInAlphabet_WithArrayOctetAndAllowWSPad_ReturnsTrue_3_vSJX4() {
        Base16 base16 = new Base16(false, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        boolean actual = base16.isInAlphabet(arrayOctet, true);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString2_qbeJ1() {
        Base16 base16 = new Base16(false, CodecPolicy.LENIENT);
        byte[] array = new byte[]{-1, -2, -3, -4, -5, -6, -7, -8, -9, -10};
        String encodedString = base16.encodeToString(array);
        assertEquals("fffefdfcfbfaf9f8f7f6f5f4f3f2f1f0", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidByteArray_lTsE0() throws DecoderException {
        Base16 base16 = new Base16();
        byte[] input = new byte[]{0, 1, 2, 3, 4, 5};
        Object result = base16.decode(input);
        assertTrue(result instanceof byte[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_WithArray_ReturnsExpectedResult_mDuq0() {
        Base16 base16 = new Base16();
        byte[] input = new byte[]{0x00, 0x0F, 0x3F};
        byte[] expected = new byte[]{'0', '0', 'F', 'F', '3', 'F'};
        assertArrayEquals(expected, base16.encode(input, 0, input.length));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_WithArrayAndOffset_ReturnsExpectedResult_qMhN1() {
        Base16 base16 = new Base16();
        byte[] input = new byte[]{0x00, 0x0F, 0x3F};
        byte[] expected = new byte[]{'F', '3', 'F'};
        assertArrayEquals(expected, base16.encode(input, 1, input.length - 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy3_bMVL2() {
        Base16 base16 = new Base16(true);
        assertEquals(null, base16.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy4_Xoty3() {
        Base16 base16 = new Base16();
        assertEquals(null, base16.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNonEmptyArray_PauJ1() {
        Base16 base16 = new Base16();
        byte[] input = new byte[]{0x41, 0x42, 0x43};
        byte[] expected = new byte[]{0x41, 0x42, 0x43};
        assertArrayEquals(expected, base16.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getChunkSeparatorTest_zUyk0() {
        Base16 base16 = new Base16();
        byte[] expected = {10};
        assertArrayEquals(expected, Base16.getChunkSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getChunkSeparatorTest_LzET1() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] expected = {10};
        assertArrayEquals(expected, Base16.getChunkSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getChunkSeparatorTest_lATM2() {
        Base16 base16 = new Base16(true);
        byte[] expected = {10};
        assertArrayEquals(expected, Base16.getChunkSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_1_jYbz0() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{0x01, 0x02, 0x03};
        assertTrue(base16.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_2_JPjx1() {
        Base16 base16 = new Base16(true, CodecPolicy.LENIENT);
        byte[] arrayOctet = new byte[]{0x01, 0x02, 0x03};
        assertTrue(base16.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_3_aPCQ2() {
        Base16 base16 = new Base16(false, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{0x01, 0x02, 0x03};
        assertTrue(base16.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_4_VAwT3() {
        Base16 base16 = new Base16(false, CodecPolicy.LENIENT);
        byte[] arrayOctet = new byte[]{0x01, 0x02, 0x03};
        assertTrue(base16.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_5_SqbD4() {
        Base16 base16 = new Base16(true);
        byte[] arrayOctet = new byte[]{0x01, 0x02, 0x03};
        assertTrue(base16.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPolicy_IKjE1_NwZI0() throws EncoderException {
        Base16 base16 = new Base16(true, CodecPolicy.LENIENT);
        byte[] input = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        String expected = "0123456789";
        String actual = new String(base16.encode(input));
        assertEquals(expected, actual);
    }
}