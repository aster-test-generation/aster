/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_rGsQ0() throws DecoderException {
        QCodec qCodec = new QCodec();
        String str = "Hello World";
        assertEquals("Hello World", qCodec.decode(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_ekjl1() throws DecoderException {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        String str = "Hello World";
        assertEquals("Hello World", qCodec.decode(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetName_Zwrl2() throws DecoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String str = "Hello World";
        assertEquals("Hello World", qCodec.decode(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidString_dswR3() {
        QCodec qCodec = new QCodec();
        String str = "Invalid String";
        try {
            qCodec.decode(str);
        } catch (DecoderException e) {
            assertEquals("Invalid String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingNoBlanks_HMbB2() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(false);
        byte[] bytes = "test".getBytes();
        byte[] result = qCodec.doEncoding(bytes);
        assert result.length == 10;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithBlanks_IMPO3() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        byte[] bytes = "test".getBytes();
        byte[] result = qCodec.doEncoding(bytes);
        assert result.length == 12;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingAllPrintable_XgvR4() {
        QCodec qCodec = new QCodec();
        byte[] bytes = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~".getBytes();
        byte[] result = qCodec.doEncoding(bytes);
        assert result.length == bytes.length;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_WafB1() throws EncoderException {
        QCodec qCodec = new QCodec("charsetName");
        String sourceStr = "source string";
        String expected = qCodec.encode(sourceStr, "charsetName");
        assertEquals(expected, qCodec.encode(sourceStr, "charsetName"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_zjpu2() throws EncoderException {
        QCodec qCodec = new QCodec();
        assertEquals("", qCodec.encode(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetAndString_znyn3() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        assertEquals("", qCodec.encode(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_PlHz0() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String actual = qCodec.encode("Hello, World!", "UTF-8");
        assertEquals("Hello, World!", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_QMeC1() throws EncoderException {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        String actual = qCodec.encode("Hello, World!", "UTF-8");
        assertEquals("Hello, World!", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoCharset_TwNr2() throws EncoderException {
        QCodec qCodec = new QCodec();
        String actual = qCodec.encode("Hello, World!", "UTF-8");
        assertEquals("Hello, World!", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithCharset_vwns0() throws EncoderException {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        String encodedText = qCodec.encodeText("Hello, World!", "UTF-8");
        assertEquals("Hello, World!", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithString_rFXP1() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String encodedText = qCodec.encodeText("Hello, World!", "UTF-8");
        assertEquals("Hello, World!", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithInvalidCharset_nxNi3() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            qCodec.encodeText("Hello, World!", "InvalidCharset");
        } catch (EncoderException e) {
            assertEquals("java.nio.charset.UnsupportedCharsetException: InvalidCharset", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithCharset_HpGU1() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
        String text = "=?UTF-8?Q?Caf=C3=A9_d'Avignon?=";
        String decodedText = qCodec.decodeText(text);
        assertEquals("Caf d'Avignon", decodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithUnsupportedEncoding_YelI2_1() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        String text = "=?US-ASCII?Q?Keith_Moore?=";
        DecoderException exception = assertThrows(DecoderException.class, () -> qCodec.decodeText(text));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithEmptyInput_VyeP5() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        String decodedText = qCodec.decodeText("");
        assertEquals("", decodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_pAYY0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello, World!";
        String expected = "Hello, World!";
        assertEquals(expected, qCodec.encodeText(text, Charset.defaultCharset()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithCharset_lSyv1() throws EncoderException {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        String text = "Hello, World!";
        String expected = "Hello, World!";
        assertEquals(expected, qCodec.encodeText(text, Charset.forName("UTF-8")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_PlHz0_fid1() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String actual = qCodec.encode("=?UTF-8?Q?Hello, World!?=", "UTF-8");
        assertEquals("=?UTF-8?Q?Hello, World!?=", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_QMeC1_fid1() throws EncoderException {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        String actual = qCodec.encode("=?UTF-8?Q?Hello, World!?=", "UTF-8");
        assertEquals("=?UTF-8?Q?Hello, World!?=", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoCharset_TwNr2_fid1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String actual = qCodec.encode("=?UTF-8?Q?Hello, World!?=", "UTF-8");
        assertEquals("=?UTF-8?Q?Hello, World!?=", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithCharset_vwns0_fid1() throws EncoderException {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        String encodedText = qCodec.encodeText("=?UTF-8?Q?Hello, World!?=", "UTF-8");
        assertEquals("=?UTF-8?Q?Hello, World!?=", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithString_rFXP1_fid1() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String encodedText = qCodec.encodeText("=?UTF-8?Q?Hello, World!?=", "UTF-8");
        assertEquals("=?UTF-8?Q?Hello, World!?=", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithUnsupportedEncoding_YelI2() throws DecoderException, UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        String text = "=?US-ASCII?Q?Keith_Moore?=";
        DecoderException exception = assertThrows(DecoderException.class, () -> qCodec.decodeText(text));
        assertTrue(exception.getMessage().contains("This codec cannot decode"));
    }
}