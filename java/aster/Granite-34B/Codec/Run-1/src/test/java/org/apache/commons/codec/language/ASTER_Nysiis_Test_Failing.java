/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Nysiis_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDefaultConstructor_vSLd0() {
        Nysiis nysiis = new Nysiis();
        assertEquals(false, nysiis.isStrict());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_QfpD0_1() {
        Nysiis nysiis = new Nysiis();
        assertEquals("Jones", nysiis.nysiis("Jones"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_QfpD0_2() {
        Nysiis nysiis = new Nysiis();
        assertEquals("Jones", nysiis.nysiis("Jonez"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_QfpD0_3() {
        Nysiis nysiis = new Nysiis();
        assertEquals("Jones", nysiis.nysiis("Joneses"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_10_PoFu9() {
        Nysiis nysiis = new Nysiis();
        assertEquals("K", nysiis.nysiis("K"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_RClL0() {
        Nysiis nysiis = new Nysiis();
        assertEquals("encode result", nysiis.encode("input string"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrict_Ggkm1() {
        Nysiis nysiis = new Nysiis(true);
        assertEquals("encode result", nysiis.encode("input string"));
    }
}