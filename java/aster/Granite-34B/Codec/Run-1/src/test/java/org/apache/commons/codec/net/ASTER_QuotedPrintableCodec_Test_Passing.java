/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.StandardCharsets;
import java.nio.charset.UnsupportedCharsetException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QuotedPrintableCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_KJQv0() throws DecoderException, UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "This is a test string";
        String sourceCharset = "UTF-8";
        String expected = "This is a test string";
        assertEquals(expected, codec.decode(sourceStr, sourceCharset));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_iurr1() throws DecoderException, UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        String sourceStr = "This is a test string";
        String sourceCharset = "UTF-8";
        String expected = "This is a test string";
        assertEquals(expected, codec.decode(sourceStr, sourceCharset));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetName_rpUg2() throws DecoderException, UnsupportedEncodingException, IllegalCharsetNameException, IllegalArgumentException, UnsupportedCharsetException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String sourceStr = "This is a test string";
        String sourceCharset = "UTF-8";
        String expected = "This is a test string";
        assertEquals(expected, codec.decode(sourceStr, sourceCharset));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStrict_MKFA3() throws DecoderException, UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "This is a test string";
        String sourceCharset = "UTF-8";
        String expected = "This is a test string";
        assertEquals(expected, codec.decode(sourceStr, sourceCharset));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetAndStrict_eWeu4() throws DecoderException, UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        String sourceStr = "This is a test string";
        String sourceCharset = "UTF-8";
        String expected = "This is a test string";
        assertEquals(expected, codec.decode(sourceStr, sourceCharset));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullSourceStr_nVVQ5() throws DecoderException, UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = null;
        String sourceCharset = "UTF-8";
        String expected = null;
        assertEquals(expected, codec.decode(sourceStr, sourceCharset));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_WhUU0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "This is a test string";
        String expected = "This is a test string";
        assertEquals(expected, codec.decode(sourceStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_mhHq1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String sourceStr = "This is a test string";
        String expected = "This is a test string";
        assertEquals(expected, codec.decode(sourceStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStrict_oezE2() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "This is a test string";
        String expected = "This is a test string";
        assertEquals(expected, codec.decode(sourceStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_BJnc0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertEquals(Charset.defaultCharset().name(), codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithCharset_YlaR1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.defaultCharset());
        assertEquals(Charset.defaultCharset().name(), codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithCharsetName_KyTk2() throws IllegalCharsetNameException, UnsupportedCharsetException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.defaultCharset().name());
        assertEquals(Charset.defaultCharset().name(), codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithStrict_aYjM3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        assertEquals(Charset.defaultCharset().name(), codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithCharsetAndStrict_DPWR4() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.defaultCharset(), true);
        assertEquals(Charset.defaultCharset().name(), codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_Wrqw0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        BitSet printable = new BitSet();
        byte[] bytes = new byte[0];
        byte[] encodedBytes = codec.encodeQuotedPrintable(printable, bytes);
        assertArrayEquals(new byte[0], encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithStrictMode_KaXk1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        BitSet printable = new BitSet();
        byte[] bytes = new byte[0];
        byte[] encodedBytes = codec.encodeQuotedPrintable(printable, bytes);
        assertArrayEquals(new byte[0], encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithCharset_oYIR2() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        BitSet printable = new BitSet();
        byte[] bytes = new byte[0];
        byte[] encodedBytes = codec.encodeQuotedPrintable(printable, bytes);
        assertArrayEquals(new byte[0], encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_Rxfh1() throws DecoderException {
        final QuotedPrintableCodec codec = new QuotedPrintableCodec();
        final byte[] bytes = new byte[]{1, 2, 3};
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_nOeo2() throws DecoderException {
        final QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidObject_MbrW3() {
        final QuotedPrintableCodec codec = new QuotedPrintableCodec();
        try {
            codec.decode(new Object());
            fail("DecoderException should have been thrown");
        } catch (final DecoderException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_HRpu2() throws EncoderException {
        QuotedPrintableCodec qp = new QuotedPrintableCodec();
        assertEquals("Hello World!", qp.encode("Hello World!"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrictOption_DSAf4() throws EncoderException {
        QuotedPrintableCodec qp = new QuotedPrintableCodec(true);
        assertEquals("Hello World!", qp.encode("Hello World!"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_wPIN5() throws EncoderException {
        QuotedPrintableCodec qp = new QuotedPrintableCodec("UTF-8");
        assertEquals("Hello World!", qp.encode("Hello World!"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrictTrue_PTKj0() {
        QuotedPrintableCodec qp = new QuotedPrintableCodec(true);
        String sourceStr = "This is a test string";
        String expected = "This is a test string";
        assertEquals(expected, qp.encode(sourceStr, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrictFalse_HKkA1() {
        QuotedPrintableCodec qp = new QuotedPrintableCodec(false);
        String sourceStr = "This is a test string";
        String expected = "This is a test string";
        assertEquals(expected, qp.encode(sourceStr, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_MNey2() {
        QuotedPrintableCodec qp = new QuotedPrintableCodec(StandardCharsets.ISO_8859_1);
        String sourceStr = "This is a test string";
        String expected = "This is a test string";
        assertEquals(expected, qp.encode(sourceStr, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetName_rKoQ3() {
        QuotedPrintableCodec qp = new QuotedPrintableCodec("ISO-8859-1");
        String sourceStr = "This is a test string";
        String expected = "This is a test string";
        assertEquals(expected, qp.encode(sourceStr, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutCharset_iJuw4() {
        QuotedPrintableCodec qp = new QuotedPrintableCodec();
        String sourceStr = "This is a test string";
        String expected = "This is a test string";
        assertEquals(expected, qp.encode(sourceStr, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetAndStrictTrue_iNDS5() {
        QuotedPrintableCodec qp = new QuotedPrintableCodec(StandardCharsets.ISO_8859_1, true);
        String sourceStr = "This is a test string";
        String expected = "This is a test string";
        assertEquals(expected, qp.encode(sourceStr, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharset_zFeo0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.defaultCharset());
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithString_Ruaz1() throws UnsupportedCharsetException, IllegalCharsetNameException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        assertEquals(Charset.forName("UTF-8"), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithBoolean_FUuG2() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharsetAndBoolean_jGVd3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.defaultCharset(), true);
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithoutParameter_ZUnr4() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithPrintableBitSetAndNullBytesAndStrict_Abox3() {
        BitSet printable = new BitSet(256);
        byte[] bytes = null;
        boolean strict = true;
        byte[] expected = null;
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithPrintableBitSetAndNullBytesAndNotStrict_cQRM4() {
        BitSet printable = new BitSet(256);
        byte[] bytes = null;
        boolean strict = false;
        byte[] expected = null;
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithInvalidEscapeChar_pBfX4_1() {
        byte[] input = "This=0Gis a test".getBytes();
        DecoderException exception = assertThrows(DecoderException.class, () -> QuotedPrintableCodec.decodeQuotedPrintable(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_IDis0() throws DecoderException {
        final byte[] bytes = {};
        final byte[] expected = {};
        assertArrayEquals(expected, new QuotedPrintableCodec().decode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_NNrD1() throws DecoderException {
        final byte[] bytes = {};
        final byte[] expected = {};
        assertArrayEquals(expected, new QuotedPrintableCodec(Charset.defaultCharset()).decode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetName_IyXY2() throws DecoderException, IllegalCharsetNameException, UnsupportedCharsetException {
        final byte[] bytes = {};
        final byte[] expected = {};
        assertArrayEquals(expected, new QuotedPrintableCodec("UTF-8").decode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStrict_IVgH3() throws DecoderException {
        final byte[] bytes = {};
        final byte[] expected = {};
        assertArrayEquals(expected, new QuotedPrintableCodec(true).decode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetAndStrict_uOTD4() throws DecoderException {
        final byte[] bytes = {};
        final byte[] expected = {};
        assertArrayEquals(expected, new QuotedPrintableCodec(Charset.defaultCharset(), true).decode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetAndStrict_qnZw3_KbCR0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        String sourceStr = "This is a test string";
        String expected = "This is a test string";
        assertEquals(expected, codec.decode(sourceStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithCharsetAndStrictMode_gwVO3_xrow0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        BitSet printable = new BitSet();
        byte[] bytes = new byte[0];
        byte[] encodedBytes = codec.encodeQuotedPrintable(printable, bytes);
        assertArrayEquals(new byte[0], encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithNullInput_ESvj0_dnrE0() {
        byte[] input = null;
        byte[] expected = null;
        byte[] actual = null;
        try {
            actual = QuotedPrintableCodec.decodeQuotedPrintable(input);
        } catch (DecoderException e) {
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithLineBreak_pbaN6_vBNy0() throws DecoderException {
        byte[] input = "This is a test=0D=0AThis is another test".getBytes();
        byte[] expected = "This is a test\r\nThis is another test".getBytes();
        byte[] actual = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals(expected, actual);
    }
}