/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.IOException;
import java.io.RandomAccessFile;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DigestUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_ZpoU0() {
        DigestUtils digestUtils = new DigestUtils("SHA");
        String data = "data";
        byte[] result = digestUtils.sha(data);
        byte[] expected = digestUtils.sha1(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_PRxV0() {
        DigestUtils digestUtils = new DigestUtils("SHA-1");
        String result = digestUtils.shaHex(new byte[]{1, 2, 3});
        assertEquals("7037807198c22a7d2b0807371d763779a84fdfcf", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_YryN0_uRIf0() throws IOException, NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("test.txt", "rw");
        DigestUtils.updateDigest(digest, data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithDigest_bOZY1_oqTT0() throws IOException, NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("test.txt", "rw");
        DigestUtils digestUtils = new DigestUtils(digest);
        digestUtils.updateDigest(digest, data);
    }
}