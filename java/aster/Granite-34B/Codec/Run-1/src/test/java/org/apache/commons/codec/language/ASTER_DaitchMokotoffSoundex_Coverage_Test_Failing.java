/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DaitchMokotoffSoundex_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_withNull_HwuG3() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String source = null;
        String expected = null;
        String actual = soundex.soundex(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringObject_BqtH1_fid1() throws org.apache.commons.codec.EncoderException {
        DaitchMokotoffSoundex daitchMokotoffSoundex = new DaitchMokotoffSoundex();
        String encodedString = daitchMokotoffSoundex.encode("test");
        assertEquals("T000", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithWhitespace_LkWd0_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String source = "John  smith";
        String expected = "J515|S530";
        String actual = soundex.soundex(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_withWhitespace_OEsE0_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String source = "John  smith";
        String expected = "J515|J515";
        String actual = soundex.soundex(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_withBranching_kZXQ1_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String source = "Jones";
        String expected = "J500|J520";
        String actual = soundex.soundex(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_withEmpty_coYF4() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String source = "";
        String expected = "";
        String actual = soundex.soundex(source);
        assertEquals(expected, actual);
    }
}