/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Soundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_String_null_pIkK0() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_String_empty_JHVk1() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_String_1char_LuQM2() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("A");
        assertEquals("A000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_String_2char_Lxkv3() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("AB");
        assertEquals("A100", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_String_3char_evbM4() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABC");
        assertEquals("A120", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_String_4char_kRUo5() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCD");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_String_5char_aINf6() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDE");
        assertEquals("A123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_String_6char_loQv7() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDEF");
        assertEquals("A123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_String_7char_yQgb8() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDEFG");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_String_8char_aOMr9() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDEFGH");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_String_9char_dTsi10() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDEFGHI");
        assertEquals("A123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_String_10char_oylJ11() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDEFGHIJ");
        assertEquals("A123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_String_11char_THsV12() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDEFGHIJK");
        assertEquals("A123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_String_12char_bKFz13() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDEFGHIJKL");
        assertEquals("A123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_String_13char_sJKy14() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDEFGHIJKLL");
        assertEquals("A123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_String_14char_pHKm15() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDEFGHIJKLLL");
        assertEquals("A123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_String_15char_RdtY16() {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("ABCDEFGHIJKLLLL");
        assertEquals("A123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength_fcEI4() {
        Soundex soundex = new Soundex();
        assertEquals(4, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithMapping_bsoY1() {
        Soundex soundex = new Soundex("mapping");
        assertEquals(4, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithMappingAndSpecialCaseHW_lQnY2() {
        Soundex soundex = new Soundex("mapping", true);
        assertEquals(4, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithMappingArray_gRoe3() {
        Soundex soundex = new Soundex(new char[]{'a', 'b', 'c'});
        assertEquals(4, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_yfkr0() throws EncoderException {
        Soundex soundex = new Soundex();
        String s1 = "example";
        String s2 = "example";
        int expected = SoundexUtils.difference(soundex, s1, s2);
        int actual = soundex.difference(s1, s2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_lPsm0() {
        Soundex soundex = new Soundex();
        String input = "Hello";
        Object result = soundex.encode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonString_LHHN1() {
        Soundex soundex = new Soundex();
        Object input = 123;
        try {
            soundex.encode(input);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to Soundex encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_iWws2() {
        Soundex soundex = new Soundex();
        Object input = null;
        try {
            soundex.encode(input);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to Soundex encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmpty_lyco3() {
        Soundex soundex = new Soundex();
        String input = "";
        Object result = soundex.encode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLength_xvfs0() {
        Soundex soundex = new Soundex();
        soundex.setMaxLength(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLengthWithMapping_wbWP1() {
        Soundex soundex = new Soundex("mapping");
        soundex.setMaxLength(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLengthWithSpecialCaseHW_dpSE2() {
        Soundex soundex = new Soundex("mapping", true);
        soundex.setMaxLength(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLengthWithMappingAsArray_YFNS3() {
        Soundex soundex = new Soundex(new char[]{'a', 'b', 'c'});
        soundex.setMaxLength(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jJVW0_1() {
        Soundex soundex = new Soundex();
        assertEquals("S530", soundex.encode("Smith"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jJVW0_2() {
        Soundex soundex = new Soundex();
        assertEquals("W452", soundex.encode("Williams"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jJVW0_3() {
        Soundex soundex = new Soundex();
        assertEquals("A536", soundex.encode("Andersen"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jJVW0_4() {
        Soundex soundex = new Soundex();
        assertEquals("L000", soundex.encode("Lee"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jJVW0_5() {
        Soundex soundex = new Soundex();
        assertEquals("R262", soundex.encode("Rogers"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jJVW0_6() {
        Soundex soundex = new Soundex();
        assertEquals("T460", soundex.encode("Taylor"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jJVW0_7() {
        Soundex soundex = new Soundex();
        assertEquals("M460", soundex.encode("Miller"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jJVW0_8() {
        Soundex soundex = new Soundex();
        assertEquals("E420", soundex.encode("Ellis"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jJVW0_9() {
        Soundex soundex = new Soundex();
        assertEquals("G620", soundex.encode("Garcia"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jJVW0_10() {
        Soundex soundex = new Soundex();
        assertEquals("C636", soundex.encode("Carter"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jJVW0_11() {
        Soundex soundex = new Soundex();
        assertEquals("J520", soundex.encode("Jones"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jJVW0_12() {
        Soundex soundex = new Soundex();
        assertEquals("K530", soundex.encode("Kent"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jJVW0_13() {
        Soundex soundex = new Soundex();
        assertEquals("P600", soundex.encode("Perry"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jJVW0_14() {
        Soundex soundex = new Soundex();
        assertEquals("W425", soundex.encode("Wilson"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jJVW0_15() {
        Soundex soundex = new Soundex();
        assertEquals("Z565", soundex.encode("Zimmerman"));
    }
}