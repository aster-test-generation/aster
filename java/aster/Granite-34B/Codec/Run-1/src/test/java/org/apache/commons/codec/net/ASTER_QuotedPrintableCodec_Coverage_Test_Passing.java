/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QuotedPrintableCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullSourceStr_qVFX0() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String actual = codec.encode(null, "UTF-8");
        Assertions.assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptySourceStr_kxLW1() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String actual = codec.encode("", "UTF-8");
        Assertions.assertEquals("", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_YJeH0() throws EncoderException {
        QuotedPrintableCodec qp = new QuotedPrintableCodec();
        Object obj = null;
        Object actual = qp.encode(obj);
        Object expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_RVqW1() throws EncoderException {
        QuotedPrintableCodec qp = new QuotedPrintableCodec();
        Object obj = new byte[]{1, 4, 5};
        Object actual = qp.encode(obj);
        Object expected = new byte[]{1, 4, 5};
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedType_QKVH3() throws EncoderException {
        QuotedPrintableCodec qp = new QuotedPrintableCodec();
        Object obj = new Object();
        try {
            qp.encode(obj);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Objects of type " + obj.getClass().getName() + " cannot be quoted-printable encoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedType_rBru3() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object input = new Object();
        try {
            codec.decode(input);
        } catch (DecoderException e) {
            assertEquals("Objects of type " + input.getClass().getName() + " cannot be quoted-printable decoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void decodeQuotedPrintableTest1_AVFy0() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[]{65, 66, 67};
        byte[] expected = new byte[]{65, 66, 67};
        byte[] actual = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void decodeQuotedPrintableTest2_teXN1() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[]{65, 66, 67, 33};
        byte[] expected = new byte[]{65, 66, 67, 33};
        byte[] actual = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void decodeQuotedPrintableTest3_AWIc2() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[]{65, 66, 67, 33, 33};
        byte[] expected = new byte[]{65, 66, 67, 33, 33};
        byte[] actual = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void decodeQuotedPrintableTest4_KFXf3() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[]{65, 66, 67, 33, 33, 33};
        byte[] expected = new byte[]{65, 66, 67, 33, 33, 33};
        byte[] actual = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void decodeQuotedPrintableTest5_TyzL4() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[]{65, 66, 67, 33, 33, 33, 33};
        byte[] expected = new byte[]{65, 66, 67, 33, 33, 33, 33};
        byte[] actual = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_RbtR1_hHvg0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = new byte[]{1, 2, 3};
        Object result = codec.decode(input);
        byte[] expected = new byte[]{1, 2, 3};
        assertArrayEquals(expected, (byte[]) result);
    }
}