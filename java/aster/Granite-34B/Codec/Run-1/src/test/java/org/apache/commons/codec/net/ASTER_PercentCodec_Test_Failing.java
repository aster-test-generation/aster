/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PercentCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncoderException_uBVy5() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{-128};
        try {
            percentCodec.encode(bytes);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            // Expected exception
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoEncoding_PpBR0_3() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127};
        byte[] result = percentCodec.encode(bytes);
        for (int i = 0; i < bytes.length; i++) {
        }
        assertEquals(bytes.length, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutPlusForSpaceAndContainsSpace_bgiF2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[0], false);
        byte[] bytes = new byte[]{'a', 'b', ' '};
        byte[] expected = new byte[]{'a', 'b', '%', '2', '0'};
        assertArrayEquals(expected, percentCodec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAllParameters_vrao3() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, true);
        byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        assertArrayEquals(expected, percentCodec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_XTbY2_GFEc0() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, false);
        byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        assertArrayEquals(expected, percentCodec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncoderException_uBVy5_fid1() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{-128};
        try {
            percentCodec.encode(bytes);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_xhDX1_Ikbm0() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[0], false);
        Object result = percentCodec.encode(new byte[]{0x41, 0x42, 0x43});
        assertEquals("%41%42%43", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoEncoding_rtCk0_iOAl0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127};
        try {
            assertArrayEquals(bytes, percentCodec.encode(bytes));
        } catch (EncoderException e) {
            fail("An unexpected exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_CPiP0_yDaM0() {
        final byte[] alwaysEncodeChars = new byte[]{'a', 'b', 'c'};
        final boolean plusForSpace = true;
        PercentCodec percentCodec = new PercentCodec(alwaysEncodeChars, plusForSpace);
        byte[] bytes = new byte[]{'a', 'b', 'c'};
        byte[] expected = new byte[]{'a', 'b', 'c'};
        try {
            assertArrayEquals(expected, percentCodec.encode(bytes));
        } catch (EncoderException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAllParameters_jEWg4_spTL0() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, true);
        byte[] bytes = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        try {
            byte[] actual = percentCodec.encode(bytes);
            byte[] expected = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
            assertTrue(Arrays.equals(expected, actual));
        } catch (EncoderException e) {
            fail("Exception not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutPlusForSpace_hvvz1_laEz0() {
        PercentCodec percentCodec = new PercentCodec(new byte[0], false);
        byte[] bytes = "This is a test".getBytes();
        byte[] expected = "This%20is%20a%20test".getBytes();
        try {
            assertArrayEquals(expected, percentCodec.encode(bytes));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_sELc2_EkTB0() {
        PercentCodec percentCodec = new PercentCodec("!@#$%^&*()".getBytes(), false);
        byte[] bytes = "This is a test".getBytes();
        byte[] expected = "This%21%40%23%24%25%5E%26%2A%28%29is%20a%20test".getBytes();
        try {
            assertArrayEquals(expected, percentCodec.encode(bytes));
        } catch (EncoderException e) {
            fail("Exception not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_vIAi0_maff0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = {37, 50, 65};
        byte[] expected = {0, 0};
        try {
            byte[] actual = percentCodec.decode(bytes);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            fail("Exception not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoEncoding_PpBR0() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127};
        byte[] result = percentCodec.encode(bytes);
        assertNotEquals(null, result);
        assertNotEquals(0, result.length);
        assertEquals(bytes.length, result.length);
        for (int i = 0; i < bytes.length; i++) {
            assertEquals(bytes[i], result[i]);
        }
    }
}