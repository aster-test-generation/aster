/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base64_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_1_Omru0() {
        byte[] arrayOctet = {1, 2, 3};
        boolean expected = false;
        boolean actual = Base64.isBase64(arrayOctet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_01_aiCs0() {
        byte octet = 0;
        boolean expected = false;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_02_FAZm1() {
        byte octet = 1;
        boolean expected = false;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_03_ZBuc2() {
        byte octet = 2;
        boolean expected = false;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_04_JicV3() {
        byte octet = 3;
        boolean expected = false;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_05_Vhtq4() {
        byte octet = 4;
        boolean expected = false;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_06_flXq5() {
        byte octet = 5;
        boolean expected = false;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_07_PnaU6() {
        byte octet = 6;
        boolean expected = false;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_08_ncUb7() {
        byte octet = 7;
        boolean expected = false;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_09_vORW8() {
        byte octet = 8;
        boolean expected = false;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_10_IWeR9() {
        byte octet = 9;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_11_SZhF10() {
        byte octet = 10;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_12_CYWL11() {
        byte octet = 11;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_13_miTk12() {
        byte octet = 12;
        boolean expected = false;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_14_xvoC13() {
        byte octet = 13;
        boolean expected = false;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_15_dvmM14() {
        byte octet = 14;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_16_ufls15() {
        byte octet = 15;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_17_eFPi16() {
        byte octet = 16;
        boolean expected = false;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }
}