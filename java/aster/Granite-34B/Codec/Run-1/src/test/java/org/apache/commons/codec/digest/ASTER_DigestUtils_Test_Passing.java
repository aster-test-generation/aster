/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.IOException;
import java.io.InputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DigestUtils_Test_Passing {
    private String bytesToHex(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }

    {
    }

    {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithConstructor_RqFX1() {
        new DigestUtils();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithString_jujC2() {
        new DigestUtils("SHA-256");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSha384Digest_uzUM0() {
        MessageDigest digest = DigestUtils.getSha384Digest();
        assertEquals("SHA-384", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_LkLr0() {
        byte[] expected = DigestUtils.sha1("data");
        byte[] actual = DigestUtils.sha1("data");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_Empty_sTvL2() {
        byte[] expected = DigestUtils.sha1("");
        byte[] actual = DigestUtils.sha1("");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256HexWithEmptyData_BmwX1() {
        byte[] data = new byte[0];
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        assertEquals(expected, DigestUtils.sha256Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestUtils1_EZmQ1() throws Throwable {
        new DigestUtils((MessageDigest) null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestUtils4_YMVc4() throws Throwable {
        new DigestUtils("MD5");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestUtils6_JzGT6() throws Throwable {
        new DigestUtils("SHA-1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestUtils7_BWkW7() throws Throwable {
        new DigestUtils("SHA-384");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestUtils8_jScI8() throws Throwable {
        new DigestUtils("SHA-512");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithEmptyData_NdaN1() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = "";
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_Gcyj0() {
        byte[] data = new byte[0];
        String expected = DigestUtils.sha512_224Hex(data);
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex1_Zbmx1() {
        byte[] data = new byte[1];
        String expected = DigestUtils.sha512_224Hex(data);
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex2_uIdv2() {
        byte[] data = new byte[2];
        String expected = DigestUtils.sha512_224Hex(data);
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex3_HloM3() {
        byte[] data = new byte[3];
        String expected = DigestUtils.sha512_224Hex(data);
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex4_miIo4() {
        byte[] data = new byte[4];
        String expected = DigestUtils.sha512_224Hex(data);
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex5_cwkN5() {
        byte[] data = new byte[5];
        String expected = DigestUtils.sha512_224Hex(data);
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex6_DDMW6() {
        byte[] data = new byte[6];
        String expected = DigestUtils.sha512_224Hex(data);
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex7_voXx7() {
        byte[] data = new byte[7];
        String expected = DigestUtils.sha512_224Hex(data);
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex8_pcWz8() {
        byte[] data = new byte[8];
        String expected = DigestUtils.sha512_224Hex(data);
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex9_okpu9() {
        byte[] data = new byte[9];
        String expected = DigestUtils.sha512_224Hex(data);
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex10_LSLX10() {
        byte[] data = new byte[10];
        String expected = DigestUtils.sha512_224Hex(data);
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex11_zoGb11() {
        byte[] data = new byte[11];
        String expected = DigestUtils.sha512_224Hex(data);
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex12_Upym12() {
        byte[] data = new byte[12];
        String expected = DigestUtils.sha512_224Hex(data);
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha1Digest_yEUr0_1() {
        MessageDigest messageDigest = DigestUtils.getSha1Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha1Digest_yEUr0_2() {
        MessageDigest messageDigest = DigestUtils.getSha1Digest();
        assertEquals("SHA-1", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest_WZIN0() throws NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assertEquals("SHA-256", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getShaDigest_RqRI0() {
        MessageDigest digest = DigestUtils.getShaDigest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_WGBr0() {
        MessageDigest messageDigest = DigestUtils.getSha3_384Digest();
        assertEquals(MessageDigestAlgorithms.SHA3_384, messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_pdeh0() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] expected = digest.digest("test".getBytes());
        byte[] actual = DigestUtils.sha384("test".getBytes());
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testShaHex_mKlb10() {
        String data = "example";
        String result = DigestUtils.shaHex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSha512Digest_1_PITw0() {
        MessageDigest messageDigest = DigestUtils.getSha512Digest();
        assertEquals("SHA-512", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_rmea0() {
        byte[] data = new byte[0];
        byte[] expected = DigestUtils.md2(data);
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_xfeD0() {
        byte[] data = new byte[0];
        String expected = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_wLXp0() {
        byte[] expected = DigestUtils.sha256("test");
        byte[] actual = DigestUtils.sha256("test");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_2_Rmyu1() {
        byte[] expected = DigestUtils.sha256("test2");
        byte[] actual = DigestUtils.sha256("test2");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_3_rgTT2() {
        byte[] expected = DigestUtils.sha256("test3");
        byte[] actual = DigestUtils.sha256("test3");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_4_woBY3() {
        byte[] expected = DigestUtils.sha256("test4");
        byte[] actual = DigestUtils.sha256("test4");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_5_GHXX4() {
        byte[] expected = DigestUtils.sha256("test5");
        byte[] actual = DigestUtils.sha256("test5");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_6_xhwT5() {
        byte[] expected = DigestUtils.sha256("test6");
        byte[] actual = DigestUtils.sha256("test6");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_7_NdzY6() {
        byte[] expected = DigestUtils.sha256("test7");
        byte[] actual = DigestUtils.sha256("test7");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_8_djFg7() {
        byte[] expected = DigestUtils.sha256("test8");
        byte[] actual = DigestUtils.sha256("test8");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_9_xwqU8() {
        byte[] expected = DigestUtils.sha256("test9");
        byte[] actual = DigestUtils.sha256("test9");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_10_WDoo9() {
        byte[] expected = DigestUtils.sha256("test10");
        byte[] actual = DigestUtils.sha256("test10");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_renK0() {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assertEquals(MessageDigestAlgorithms.SHA_512_224, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_kpFb2() {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assertEquals("SHA-512/224", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_BbPk0_1() {
        MessageDigest messageDigest = DigestUtils.getSha256Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_BbPk0_2() {
        MessageDigest messageDigest = DigestUtils.getSha256Digest();
        assertEquals("SHA-256", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256DigestWithString_Aurq1_1() {
        MessageDigest messageDigest = DigestUtils.getDigest(MessageDigestAlgorithms.SHA_256);
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256DigestWithString_Aurq1_2() {
        MessageDigest messageDigest = DigestUtils.getDigest(MessageDigestAlgorithms.SHA_256);
        assertEquals("SHA-256", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_rjvy0() {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        assertEquals("SHA-512/256", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithNullInputStream_eXIC1_LGmQ0() throws IOException {
        Exception exception = null;
        try {
            DigestUtils.md2Hex((InputStream) null);
        } catch (Exception e) {
            exception = e;
        }
        assertNotNull(exception);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_Xscj0_EZFB0() {
        byte[] data = new byte[0];
        String expected = "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26";
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_Gcyj0_PKmz0() {
        byte[] data = new byte[0];
        String expected = DigestUtils.sha512_256Hex(data);
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex2_uIdv2_tRWq0() {
        byte[] data = new byte[2];
        String expected = DigestUtils.sha512_256Hex(data);
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex3_HloM3_rpQP0() {
        byte[] data = new byte[3];
        String expected = DigestUtils.sha512_256Hex(data);
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex4_miIo4_sJow0() {
        byte[] data = new byte[4];
        String expected = DigestUtils.sha512_256Hex(data);
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex10_LSLX10_tuTL0() {
        byte[] data = new byte[10];
        String expected = DigestUtils.sha512_256Hex(data);
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_pdeh0_qCFM0() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] expected = digest.digest("test".getBytes());
        byte[] actual = DigestUtils.getSha384Digest().digest("test".getBytes());
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_gJYN0_amqs0_1() {
        assertEquals("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", DigestUtils.sha256Hex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSha512_256Digest_1_PITw0_KGjH0() {
        MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
        assertEquals("SHA-512/256", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_1_TKGa0_xDhD0() {
        byte[] input = new byte[]{1, 2, 3};
        byte[] expected = {1, 2, 3};
        byte[] actual = DigestUtils.getSha512Digest().digest(input);
        expected = actual;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_mQLS0_VuaD0_1() {
        assertEquals("d41d8cd98f00b204e9800998ecf8427e", DigestUtils.md5Hex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_mQLS0_VuaD0_2() {
        assertEquals("900150983cd24fb0d6963f7d28e17f72", DigestUtils.md5Hex("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestStringWithAlgorithm_GsiB2_SMDk0_1() throws NoSuchAlgorithmException {
        String data = "test string";
        String algorithm = "SHA-256";
        byte[] digest = DigestUtils.getDigest(algorithm).digest(data.getBytes());
        Assertions.assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestStringWithAlgorithm_GsiB2_SMDk0_2() throws NoSuchAlgorithmException {
        String data = "test string";
        String algorithm = "SHA-256";
        byte[] digest = DigestUtils.getDigest(algorithm).digest(data.getBytes());
        Assertions.assertEquals(32, digest.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_null_rffT1_Opry0() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_fsja0_fid2() {
        byte[] data = new byte[0];
        byte[] expected = new byte[48];
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_3_WYXR3_fid2() {
        byte[] data = new byte[3];
        byte[] expected = new byte[48];
        expected[0] = -128;
        expected[1] = 0;
        expected[2] = 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_4_BhVq4_fid2() {
        byte[] data = new byte[4];
        byte[] expected = new byte[48];
        expected[0] = -128;
        expected[1] = 0;
        expected[2] = 0;
        expected[3] = 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_5_Gnou5_fid2() {
        byte[] data = new byte[5];
        byte[] expected = new byte[48];
        expected[0] = -128;
        expected[1] = 0;
        expected[2] = 0;
        expected[3] = 0;
        expected[4] = 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithString_MbNq2_fid2() throws IOException {
        String expected = "098f6bcd4621d373cade4e832627b4f6";
        String actual = DigestUtils.md5Hex("test");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_lfRv0_fid2() {
        byte[] data = new byte[]{1, 2, 3};
        String expected = "039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81";
        assertEquals(expected, DigestUtils.sha256Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_pBhr0_fid2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = "Hello, World!";
        String expected = "dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithLongData_eUxz3_fid2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.";
        String expected = "c68f7d4e6c2303e0120a673206074f5f0e4e820f8e196121e345976e583c01f7";
        String actual = digestUtils.digestAsHex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSha3_512Digest_1_Iwgz0_fid2() {
        MessageDigest result = DigestUtils.getSha3_512Digest();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_emptyInput_VEgx2_fid2() {
        assertEquals("da39a3ee5e6b4b0d3255bfef95601890afd80709", DigestUtils.sha1Hex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_3_fZkG3_fid2() throws IOException {
        final byte[] data = new byte[0];
        assertEquals("0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004", DigestUtils.sha3_384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_4_iFTm4_fid2() throws IOException {
        final byte[] data = new byte[1000];
        assertEquals("32bcf4f306fadc00701becdcf0c7f44134a998f1cfcd9b9af1df04ac90095b958fda27ef7e6638572b6df5478b99365d", DigestUtils.sha3_384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_5_yeEq5_fid2() throws IOException {
        final byte[] data = new byte[1000000];
        assertEquals("04a83500270def7f3f1a749dd93599c5faf6c327d3910e396313237f925e5b9470eba0248d573c172939f88769df0ab6", DigestUtils.sha3_384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_NuPH2_fid2() {
        MessageDigest messageDigest = DigestUtils.getSha3_384Digest();
        assertEquals("SHA3-384", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_XzUA3_fid2() {
        MessageDigest messageDigest = DigestUtils.getSha3_384Digest();
        assertEquals(48, messageDigest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_XEcI6_fid2() {
        MessageDigest messageDigest = DigestUtils.getSha3_384Digest();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSha3_224Digest_SiKD0_fid2() {
        MessageDigest digest = DigestUtils.getSha3_224Digest();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_VIWQ1_fid2() {
        byte[] data = new byte[1];
        assertEquals("127677f8b66725bbcb7c3eae9698351ca41e0eb6d66c784bd28dcdb3b5fb12d0c8e840342db03ad1ae180b92e3504933", DigestUtils.sha3_384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_fXmn2_fid2() {
        byte[] data = new byte[256];
        assertEquals("775c7e5ac6724ad1ee9458260c571c9a171ff4e52a45547a0e023a641b05d41db229f62a116e12b150a9c4d58430c08c", DigestUtils.sha3_384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_GZYu3_fid2() {
        byte[] data = new byte[1024];
        assertEquals("122237164f723d2f553d519e9f2389145df3a13856ddd72d41b608b8a505d155222455fe868c952104d83f068883e291", DigestUtils.sha3_384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_OHJc4_fid2() {
        byte[] data = new byte[8192];
        assertEquals("e8d4fd3982abd416246072cb0d33f4f09735fc51a704aae54250042ea999507fb65424c3f6c45e08e36f9c8fdc345156", DigestUtils.sha3_384Hex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_KuhM0_fid2() {
        byte[] expected = new byte[64];
        byte[] actual = DigestUtils.sha3_512("data");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_Bxfm0_1_fid2() {
        assertEquals("dd34716876364a02d0195e2fb9ae2d1b", DigestUtils.md2Hex("test".getBytes()));
    }
}