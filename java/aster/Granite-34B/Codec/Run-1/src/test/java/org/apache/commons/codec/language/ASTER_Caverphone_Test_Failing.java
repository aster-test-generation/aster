/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Caverphone_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_WOCW0() {
        Caverphone caverphone = new Caverphone();
        String source = "source";
        String expected = "expected";
        assertEquals(expected, caverphone.caverphone(source));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithNull_tpGM1() {
        Caverphone caverphone = new Caverphone();
        String source = null;
        String expected = null;
        assertEquals(expected, caverphone.caverphone(source));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithEmpty_mmED2() {
        Caverphone caverphone = new Caverphone();
        String source = "";
        String expected = "";
        assertEquals(expected, caverphone.caverphone(source));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithLength1_nNrR3() {
        Caverphone caverphone = new Caverphone();
        String source = "a";
        String expected = "expected";
        assertEquals(expected, caverphone.caverphone(source));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithLength2_FoGL4() {
        Caverphone caverphone = new Caverphone();
        String source = "ab";
        String expected = "expected";
        assertEquals(expected, caverphone.caverphone(source));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithLength3_vlrr5() {
        Caverphone caverphone = new Caverphone();
        String source = "abc";
        String expected = "expected";
        assertEquals(expected, caverphone.caverphone(source));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithLength4_bXzZ6() {
        Caverphone caverphone = new Caverphone();
        String source = "abcd";
        String expected = "expected";
        assertEquals(expected, caverphone.caverphone(source));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithLength5_rWXt7() {
        Caverphone caverphone = new Caverphone();
        String source = "abcde";
        String expected = "expected";
        assertEquals(expected, caverphone.caverphone(source));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithLength6_QllR8() {
        Caverphone caverphone = new Caverphone();
        String source = "abcdef";
        String expected = "expected";
        assertEquals(expected, caverphone.caverphone(source));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithLength7_QSxU9() {
        Caverphone caverphone = new Caverphone();
        String source = "abcdefg";
        String expected = "expected";
        assertEquals(expected, caverphone.caverphone(source));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_YRPD0() {
        Caverphone caverphone = new Caverphone();
        String str = "encode";
        String result = caverphone.encode(str);
        assert result.equals("encode");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_enSg1() {
        Caverphone caverphone = new Caverphone();
        String str = "";
        String result = caverphone.encode(str);
        assert result.equals("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_lXER2() {
        Caverphone caverphone = new Caverphone();
        String str = null;
        String result = caverphone.encode(str);
        assert result.equals(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_fqoT3() {
        Caverphone caverphone = new Caverphone();
        String str = "encode";
        String result = caverphone.encode(str);
        assert result.length() == 6;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ACkB4() {
        Caverphone caverphone = new Caverphone();
        String str = "encode";
        String result = caverphone.encode(str);
        assert result.matches("[a-z]+");
    }
}