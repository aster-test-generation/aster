/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Hex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_FRRV0() throws DecoderException {
        char[] data = new char[]{'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] out = new byte[3];
        int outOffset = 1;
        int expected = 3;
        int actual = Hex.decodeHex(data, out, outOffset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_PzlQ0() {
        byte[] data = new byte[]{0x00, 0x0F, (byte) 0xF0, (byte) 0xFF};
        char[] encoded = Hex.encodeHex(data);
        assert encoded.length == 8;
        assert encoded[0] == '0';
        assert encoded[1] == '0';
        assert encoded[2] == '0';
        assert encoded[3] == 'F';
        assert encoded[4] == 'F';
        assert encoded[5] == '0';
        assert encoded[6] == 'F';
        assert encoded[7] == 'F';
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithBranchCoverage_EOSk1() {
        byte[] data = new byte[]{0x00, 0x0F, (byte) 0xF0, (byte) 0xFF};
        char[] encoded = Hex.encodeHex(data);
        assert encoded[0] == '0';
        assert encoded[1] == '0';
        assert encoded[2] == '0';
        assert encoded[3] == 'F';
        assert encoded[4] == 'F';
        assert encoded[5] == '0';
        assert encoded[6] == 'F';
        assert encoded[7] == 'F';
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_LSyj0() {
        byte[] data = new byte[]{0x00, 0x0F, 0x32, 0x77, (byte) 0x80, (byte) 0xFF};
        char[] expected = {'0', '0', 'F', '3', '2', '7', '7', '8', '0', 'F', 'F'};
        char[] actual = Hex.encodeHex(data, 0, data.length, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithOffset_mzFo1() {
        byte[] data = new byte[]{0x00, 0x0F, 0x32, 0x77, (byte) 0x80, (byte) 0xFF};
        char[] expected = {'F', '3', '2', '7', '7', '8', '0', 'F', 'F'};
        char[] actual = Hex.encodeHex(data, 1, data.length - 1, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithCustomCase_ZQdo2() {
        byte[] data = new byte[]{0x00, 0x0F, 0x32, 0x77, (byte) 0x80, (byte) 0xFF};
        char[] expected = {'0', '0', 'f', '3', '2', '7', '7', '8', '0', 'f', 'f'};
        char[] actual = Hex.encodeHex(data, 0, data.length, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithOffset_xHdW1() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F, (byte) 0xFF};
        char[] expected = new char[]{'0', '0', '0', 'F', '3', 'F', 'F', 'F'};
        char[] actual = Hex.encodeHex(data, 1, 2, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_ZIta0() {
        byte[] data = new byte[]{0x00, 0x0F, (byte) 0xF0, (byte) 0xFF};
        boolean toLowerCase = true;
        char[] expected = new char[]{'0', 'f', 'f', '0', 'f', 'f'};
        char[] actual = Hex.encodeHex(data, toLowerCase);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithLowerCaseFalse_Drpt1() {
        byte[] data = new byte[]{0x00, 0x0F, (byte) 0xF0, (byte) 0xFF};
        boolean toLowerCase = false;
        char[] expected = new char[]{'0', 'F', 'F', '0', 'F', 'F'};
        char[] actual = Hex.encodeHex(data, toLowerCase);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_itmW0() {
        final byte[] array = new byte[]{0x00, 0x0F, 0x32, 0x77, (byte) 0x80};
        final Hex hex = new Hex("UTF-8");
        final byte[] result = hex.encode(array);
        final byte[] expected = new byte[]{0x30, 0x30, 0x30, 0x46, 0x33, 0x32, 0x37, 0x37, (byte) 0x80};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_JCbP1() {
        final byte[] array = new byte[]{0x00, 0x0F, 0x32, 0x77, (byte) 0x80};
        final Hex hex = new Hex(Charset.forName("UTF-8"));
        final byte[] result = hex.encode(array);
        final byte[] expected = new byte[]{0x30, 0x30, 0x30, 0x46, 0x33, 0x32, 0x37, 0x37, (byte) 0x80};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_SXND2() {
        final byte[] array = new byte[]{0x00, 0x0F, 0x32, 0x77, (byte) 0x80};
        final Hex hex = new Hex();
        final byte[] result = hex.encode(array);
        final byte[] expected = new byte[]{0x30, 0x30, 0x30, 0x46, 0x33, 0x32, 0x37, 0x37, (byte) 0x80};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_dBWA3() {
        final String charsetName = "ASCII";
        final Hex hex = new Hex(charsetName);
        assertEquals(charsetName, hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_sDWu5() {
        final String charsetName = "Windows-1252";
        final Hex hex = new Hex(charsetName);
        assertEquals(charsetName, hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString5_VZbk4() {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put((byte) 0x7F);
        String result = Hex.encodeHexString(data);
        Assertions.assertEquals(result, "7F");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString6_dRwL5() {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put((byte) 0x80);
        String result = Hex.encodeHexString(data);
        Assertions.assertEquals(result, "80");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString7_vJfL6() {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put((byte) 0xFF);
        String result = Hex.encodeHexString(data);
        Assertions.assertEquals(result, "0000000000000000");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString8_kaZF7() {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put((byte) 0x00);
        String result = Hex.encodeHexString(data);
        Assertions.assertEquals(result, "00");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString9_NIuC8() {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put((byte) 0x7F);
        data.put((byte) 0x80);
        String result = Hex.encodeHexString(data);
        Assertions.assertEquals(result, "7F80");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullArray_ocVy1_1() {
        Hex hex = new Hex("UTF-8");
        byte[] array = null;
        DecoderException exception = assertThrows(DecoderException.class, () -> hex.decode(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithEmptyToDigits_GzGz6() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(10);
        char[] toDigits = new char[0];
        try {
            Hex.encodeHex(byteBuffer, toDigits);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithInvalidToDigitsLength_TSuc7() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(10);
        char[] toDigits = new char[15];
        try {
            Hex.encodeHex(byteBuffer, toDigits);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithNegativeToDigitsLength_RKHo8() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(10);
        char[] toDigits = new char[-1];
        try {
            Hex.encodeHex(byteBuffer, toDigits);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_deHT0_cYLu0() {
        ByteBuffer data = ByteBuffer.allocate(10);
        boolean toLowerCase = true;
        String expected = new String(Hex.encodeHex(data, toLowerCase));
        String actual = Hex.encodeHexString(data, toLowerCase);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_qpUj1_eXYG0() throws DecoderException {
        final Hex hex = new Hex();
        final String input = "Hello, World!";
        final byte[] expected = input.getBytes();
        final byte[] actual = hex.decode(input.getBytes());
        assertTrue(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_hFLk4_GPHV0() throws DecoderException {
        final Hex hex = new Hex(Charset.forName("UTF-8"));
        final String input = "Hello, World!";
        final byte[] expected = input.getBytes(Charset.forName("UTF-8"));
        final byte[] actual = hex.decode(input.getBytes(Charset.forName("UTF-8")));
        assertTrue(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetName_SxVc5_QtRQ0() throws DecoderException {
        final Hex hex = new Hex("UTF-8");
        final String input = "Hello, World!";
        final byte[] expected = input.getBytes(StandardCharsets.UTF_8);
        final byte[] actual = hex.decode(input.getBytes(StandardCharsets.UTF_8));
        assertTrue(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithFullCoverage_qXxy3_VzdO0() {
        char[] data = new char[]{'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] out = new byte[3];
        int outOffset = 1;
        try {
            int actual = Hex.decodeHex(data, out, outOffset);
            assertEquals(3, actual);
        } catch (DecoderException e) {
            fail("Exception not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_Wvdc0_vtnB0() {
        char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] expected = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        try {
            assertArrayEquals(expected, Hex.decodeHex(data));
        } catch (DecoderException e) {
            fail("An unexpected exception was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_kXhv0_zHAy0() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F, (byte) 0xFF};
        char[] expected = new char[]{'0', '0', '0', 'F', '3', 'F', 'F', 'F'};
        char[] actual = Hex.encodeHex(data, 0, data.length, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithCustomCase_CkNr2_evNE0() {
        byte[] data = new byte[]{0x00, 0x0F, 0x3F, (byte) 0xFF};
        char[] expected = new char[]{'0', '0', '0', 'f', '3', 'F', 'F', 'f'};
        char[] actual = Hex.encodeHex(data, 0, data.length, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString7_vJfL6_hJYR0() {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put((byte) 0xFF);
        data.put((byte) 0x00);
        String result = Hex.encodeHexString(data);
        Assertions.assertEquals(result, "FF00");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString8_kaZF7_szZt0() {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put((byte) 0x00);
        data.put((byte) 0xFF);
        String result = Hex.encodeHexString(data);
        Assertions.assertEquals(result, "00FF");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString10_QTbZ9_nPFL0() {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put((byte) 0x80);
        data.put((byte) 0x7F);
        String result = Hex.encodeHexString(data);
        Assertions.assertEquals(result, "807F");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString11_eGiG10_Tbyn0() {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put((byte) 0xFF);
        data.put((byte) 0x00);
        data.put((byte) 0x00);
        String result = Hex.encodeHexString(data);
        Assertions.assertEquals(result, "FF0000");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString12_lhmR11_Ddmg0() {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put((byte) 0x00);
        data.put((byte) 0xFF);
        data.put((byte) 0x00);
        String result = Hex.encodeHexString(data);
        Assertions.assertEquals(result, "00FF00");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString13_glJE12_ALxG0() {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put((byte) 0x00);
        data.put((byte) 0x00);
        data.put((byte) 0xFF);
        String result = Hex.encodeHexString(data);
        Assertions.assertEquals(result, "0000FF");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString14_DBbU13_SCFS0() {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put((byte) 0x7F);
        data.put((byte) 0x80);
        data.put((byte) 0xFF);
        String result = Hex.encodeHexString(data);
        Assertions.assertEquals(result, "7F80FF");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_tHyf0_oudT0() {
        final String charsetName = "UTF-8";
        final Charset charset = Charset.forName(charsetName);
        final Hex hex = new Hex(charset);
        assertEquals(hex.toString(), Hex.class.getSimpleName() + "[charsetName=" + charset + "]");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_nkwc0_Cgwa0() {
        byte[] data = new byte[]{0x00, 0x0F, (byte) 0xF0, (byte) 0xFF};
        String expected = "000ff0ff";
        assertEquals(expected, Hex.encodeHexString(data, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexStringWithLowerCase_DllS1_CyFn0() {
        byte[] data = new byte[]{0x00, 0x0F, (byte) 0xF0, (byte) 0xFF};
        String expected = "000fF0FF";
        assertEquals(expected, Hex.encodeHexString(data, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_IIoa0_Aesg0() throws DecoderException {
        final Hex hex = new Hex();
        final Object object = new Object();
        try {
            hex.decode(object);
            fail("DecoderException expected");
        } catch (final DecoderException e) {
            assertEquals("Hex Decoder: Input object must be of type String, byte[], or ByteBuffer", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_RGCQ2_aOOc0() throws DecoderException {
        final Hex hex = new Hex();
        final byte[] input = new byte[]{0x48, 0x65, 0x6C, 0x6C, 0x6F};
        final byte[] expected = new byte[]{0x48, 0x65, 0x6C, 0x6C, 0x6F};
        final byte[] actual = hex.decode(input);
        assertTrue(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteBuffer_urwi3_xdGD0() throws DecoderException {
        final Hex hex = new Hex();
        final ByteBuffer input = ByteBuffer.allocate(5);
        input.put(new byte[]{0x48, 0x65, 0x6C, 0x6C, 0x6F});
        input.flip();
        final byte[] expected = new byte[]{0x48, 0x65, 0x6C, 0x6C, 0x6F};
        final byte[] actual = hex.decode(input);
        assertTrue(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullArray_ocVy1_MGvA0_1() {
        Hex hex = new Hex("UTF-8");
        byte[] array = null;
        DecoderException exception = Assertions.assertThrows(DecoderException.class, () -> hex.decode(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString3_NWUk2() {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put((byte) 0xFF);
        String result = Hex.encodeHexString(data);
        Assertions.assertEquals(result, "FF");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithString_ewiN1() {
        final String charsetName = "UTF-8";
        final Hex hex = new Hex(charsetName);
        assertEquals(hex.toString(), Hex.class.getSimpleName() + "[charsetName=" + charsetName + "]");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringDefault_jqTs2() {
        final Hex hex = new Hex();
        assertEquals(hex.toString(), Hex.class.getSimpleName() + "[charsetName=UTF-8]");
    }
}