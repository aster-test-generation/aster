/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_UnixCrypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_DrWe0() {
        String original = "password";
        String salt = "salt";
        String expected = "sa3tHJ3/KuYvI"; // replace with the expected result
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_pFbM2() {
        String original = "";
        String salt = "salt";
        String expected = "saFLGt/QKS6yw"; // replace with the expected result
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_jxxh3() {
        String original = "password";
        String salt = null;
        String expected = null; // replace with the expected result
        String actual = UnixCrypt.crypt(original, salt);
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithCoverage_ubbr2() {
        byte[] original = new byte[]{0x00, 0x01, 0x02, 0x03};
        UnixCrypt.crypt(original);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_bsny1() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "aa";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("aa", result.substring(0, 2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSalt_nPzT2() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "aa";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongSalt_hEir3() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "aaa";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidSalt_llvs4() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "a";
        try {
            UnixCrypt.crypt(original, salt);
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid salt value: a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginalAndSalt_Odjr1() {
        byte[] original = new byte[0];
        String salt = "AB/PLgjMdnCMg";
        String expected = "AB/PLgjMdnCMg";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndSalt_wrSG3() {
        byte[] original = "password".getBytes();
        String salt = "ABRCL9ijBr2LY";
        String expected = "ABRCL9ijBr2LY";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndInvalidSalt_pcnW4() {
        byte[] original = "password".getBytes();
        String salt = "12CsGd8FRcMSM";
        String expected = "12CsGd8FRcMSM";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_HIsg3() {
        byte[] original = new byte[8];
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_XJYp0() {
        byte[] original = new byte[10];
        String salt = "ab";
        UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_fwnj2_1() {
        byte[] original = new byte[8];
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_fwnj2_2() {
        byte[] original = new byte[8];
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        Assertions.assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordLength1AndSaltLength2_NRtS2() {
        String password = "a";
        String salt = "bc";
        String expected = "bcshMw5X24ayQ";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordLength2AndSaltLength2_MxVD4() {
        String password = "ab";
        String salt = "cd";
        String expected = "cdAnWIPvTrb.2";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordLength3AndSaltLength2_VaWh6() {
        String password = "abc";
        String salt = "de";
        String expected = "de86L5W89BsXE";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordLength4AndSaltLength2_Gcxm8() {
        String password = "abcd";
        String salt = "ef";
        String expected = "efwppYY96/LRg";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyPasswordAndRandomSalt_FwyL1() {
        String password = "";
        String salt = "ab";
        String expected = "abmF1QH4PEr.E";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordLongerThan8BytesAndSalt_gdsM2() {
        String password = "password123";
        String salt = "cd";
        String expected = "cdlRbNJGImptk";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordShorterThan8BytesAndSalt_Vclb3() {
        String password = "pass";
        String salt = "ef";
        String expected = "eflt0/ad0.Km2";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordLongerThan8BytesAndRandomSalt_Evyc4() {
        String password = "password123";
        String salt = "gh";
        String expected = "ghwZAKbC0Hozc";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordShorterThan8BytesAndRandomSalt_Mhcz5() {
        String password = "pass";
        String salt = "ij";
        String expected = "ij9O758lVWbaU";
        String actual = UnixCrypt.crypt(password.getBytes(), salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndSalt_EgoY0() {
        UnixCrypt unixCrypt = new UnixCrypt();
        String salt = "ab";
        byte[] original = {0, 1, 2, 3, 4, 5, 6, 7};
        String result = unixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndNullSalt_Qaes1() {
        UnixCrypt unixCrypt = new UnixCrypt();
        String salt = null;
        byte[] original = {0, 1, 2, 3, 4, 5, 6, 7};
        String result = unixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndInvalidSalt_Knkm2() {
        UnixCrypt unixCrypt = new UnixCrypt();
        String salt = "12";
        byte[] original = {0, 1, 2, 3, 4, 5, 6, 7};
        String result = unixCrypt.crypt(original, salt);
        assertEquals("12TeA/sl9KHig", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndSaltLengthMoreThanTwo_NRbu4() {
        UnixCrypt unixCrypt = new UnixCrypt();
        String salt = "abcd";
        byte[] original = {0, 1, 2, 3, 4, 5, 6, 7};
        String result = unixCrypt.crypt(original, salt);
        assertEquals("abQeX8x7ieVh2", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalAndSaltLengthMoreThanTwoAndInvalid_KDpP7() {
        UnixCrypt unixCrypt = new UnixCrypt();
        String salt = "1234";
        byte[] original = {0, 1, 2, 3, 4, 5, 6, 7};
        String result = unixCrypt.crypt(original, salt);
        assertEquals("12TeA/sl9KHig", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidSalt_jpSy1() {
        byte[] original = new byte[8];
        String salt = "abc";
        String expected = "ab";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual.substring(0, 2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_zhUM2() {
        byte[] original = new byte[8];
        String salt = "aa";
        String expected = "aaQ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual.substring(0, 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_PvZr3() {
        byte[] original = new byte[0];
        String salt = "aa";
        String expected = "aaQ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual.substring(0, 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithShortOriginal_LRVP4() {
        byte[] original = new byte[3];
        String salt = "aa";
        String expected = "aaQ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual.substring(0, 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_SQpk5() {
        byte[] original = new byte[10];
        String salt = "aa";
        String expected = "aaQ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual.substring(0, 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllOnesOriginal_hroo7() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0xFF);
        String salt = "aa";
        String expected = "aaR";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual.substring(0, 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_fwnj2() {
        byte[] original = new byte[8];
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        Assertions.assertNotNull(result);
        Assertions.assertEquals(13, result.length());
    }
}