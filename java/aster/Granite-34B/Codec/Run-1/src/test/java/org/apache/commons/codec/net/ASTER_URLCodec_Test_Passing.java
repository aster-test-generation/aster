/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_URLCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_vkiD0() throws DecoderException, UnsupportedEncodingException {
        URLCodec codec = new URLCodec("UTF-8");
        String decoded = codec.decode("Hello%20World", "UTF-8");
        assertEquals("Hello World", decoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_afnL2() throws DecoderException, UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        String decoded = codec.decode(null, "UTF-8");
        assertEquals(null, decoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyInput_Wjff3() throws DecoderException, UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        String decoded = codec.decode("", "UTF-8");
        assertEquals("", decoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_sSmj0() throws DecoderException {
        final String charset = "UTF-8";
        final String str = "This is a test";
        final URLCodec codec = new URLCodec(charset);
        assertEquals("This is a test", codec.decode(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithoutCharset_vVfZ1() throws DecoderException {
        final String str = "This+is+a+test";
        final URLCodec codec = new URLCodec();
        assertEquals("This is a test", codec.decode(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getEncoding_withCharset_Lcdt0() {
        URLCodec urlCodec = new URLCodec("UTF-8");
        assertEquals("UTF-8", urlCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getEncoding_withoutCharset_VWyS1() {
        URLCodec urlCodec = new URLCodec();
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_Gtyo0() {
        URLCodec urlCodec = new URLCodec("UTF-8");
        assertEquals("UTF-8", urlCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithNull_MBqF0() throws DecoderException {
        byte[] bytes = null;
        byte[] expected = null;
        byte[] actual = URLCodec.decodeUrl(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithEmptyArray_jbzI1() throws DecoderException {
        byte[] bytes = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = URLCodec.decodeUrl(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPlusSign_AxRP2() throws DecoderException {
        byte[] bytes = "+".getBytes();
        byte[] expected = " ".getBytes();
        byte[] actual = URLCodec.decodeUrl(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPercentSignAndTwoDigits_blaI3() throws DecoderException {
        byte[] bytes = "%20".getBytes();
        byte[] expected = " ".getBytes();
        byte[] actual = URLCodec.decodeUrl(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPercentSignAndInvalidDigits_wswX4() throws DecoderException {
        byte[] bytes = "%2G".getBytes();
        try {
            URLCodec.decodeUrl(bytes);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPercentSignAndMissingDigits_NnqM5() throws DecoderException {
        byte[] bytes = "%".getBytes();
        try {
            URLCodec.decodeUrl(bytes);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPercentSignAndMissingSecondDigit_uACQ6() throws DecoderException {
        byte[] bytes = "%2".getBytes();
        try {
            URLCodec.decodeUrl(bytes);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPercentSignAndMissingFirstDigit_yumB7() throws DecoderException {
        byte[] bytes = "%G".getBytes();
        try {
            URLCodec.decodeUrl(bytes);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPercentSignAndInvalidFirstDigit_zCFF8() throws DecoderException {
        byte[] bytes = "%Z".getBytes();
        try {
            URLCodec.decodeUrl(bytes);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPercentSignAndInvalidFirstAndSecondDigits_tNcE10() throws DecoderException {
        byte[] bytes = "%ZZ".getBytes();
        try {
            URLCodec.decodeUrl(bytes);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPercentSignAndInvalidFirstAndSecondDigits2_rWVB11() throws DecoderException {
        byte[] bytes = "%Z2".getBytes();
        try {
            URLCodec.decodeUrl(bytes);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPercentSignAndInvalidFirstAndSecondDigits3_gMsb12() throws DecoderException {
        byte[] bytes = "%2Z".getBytes();
        try {
            URLCodec.decodeUrl(bytes);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPercentSignAndInvalidFirstAndSecondDigits4_Onkf13() throws DecoderException {
        byte[] bytes = "%Z%".getBytes();
        try {
            URLCodec.decodeUrl(bytes);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_kLoZ0() {
        URLCodec codec = new URLCodec();
        String input = "Hello World";
        try {
            Object result = codec.decode(input);
            assertTrue(result instanceof String);
            assertEquals("Hello World", result);
        } catch (DecoderException e) {
            fail("DecoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_kYxK1() {
        URLCodec codec = new URLCodec();
        String input = null;
        try {
            Object result = codec.decode(input);
            assertEquals(null, result);
        } catch (DecoderException e) {
            fail("DecoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_bfrT0() throws Exception {
        URLCodec urlCodec = new URLCodec("UTF-8");
        assertEquals(urlCodec.encode("Hello World"), "Hello+World");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutCharset_sPmU1() throws Exception {
        URLCodec urlCodec = new URLCodec();
        assertEquals(urlCodec.encode("Hello World"), "Hello+World");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithNullBytes_liTu0() {
        byte[] bytes = null;
        byte[] encodedBytes = URLCodec.encodeUrl(null, bytes);
        assertNull(encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithEmptyBytes_XBLf1_1() {
        byte[] bytes = new byte[0];
        byte[] encodedBytes = URLCodec.encodeUrl(null, bytes);
        assertNotNull(encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithEmptyBytes_XBLf1_2() {
        byte[] bytes = new byte[0];
        byte[] encodedBytes = URLCodec.encodeUrl(null, bytes);
        assertEquals(0, encodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytes_ZySL2_1() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] bytes = new byte[]{'a', 'b', 'c'};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertNotNull(encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytes_ZySL2_2() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] bytes = new byte[]{'a', 'b', 'c'};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals(3, encodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytes_ZySL2_3() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] bytes = new byte[]{'a', 'b', 'c'};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('a', encodedBytes[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytes_ZySL2_4() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] bytes = new byte[]{'a', 'b', 'c'};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('b', encodedBytes[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytes_ZySL2_5() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] bytes = new byte[]{'a', 'b', 'c'};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('c', encodedBytes[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncoding_oslZ3_1() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] bytes = new byte[]{'d', 'e', 'f'};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertNotNull(encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncoding_oslZ3_2() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] bytes = new byte[]{'d', 'e', 'f'};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals(9, encodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncoding_oslZ3_3() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] bytes = new byte[]{'d', 'e', 'f'};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('%', encodedBytes[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncoding_oslZ3_6() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] bytes = new byte[]{'d', 'e', 'f'};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('%', encodedBytes[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncodingAndPlusSign_IXEG4_1() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        urlsafe.set('+');
        byte[] bytes = new byte[]{'d', 'e', 'f', ' '};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertNotNull(encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncodingAndPlusSign_IXEG4_2() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        urlsafe.set('+');
        byte[] bytes = new byte[]{'d', 'e', 'f', ' '};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals(12, encodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncodingAndPlusSign_IXEG4_3() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        urlsafe.set('+');
        byte[] bytes = new byte[]{'d', 'e', 'f', ' '};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('%', encodedBytes[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncodingAndPlusSign_IXEG4_6() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        urlsafe.set('+');
        byte[] bytes = new byte[]{'d', 'e', 'f', ' '};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('%', encodedBytes[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_final_byte_czmK0() {
        URLCodec urlCodec = new URLCodec();
        byte[] result = urlCodec.encode(new byte[]{});
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_final_byte_with_charset_maHE1() {
        URLCodec urlCodec = new URLCodec("UTF-8");
        byte[] result = urlCodec.encode(new byte[]{});
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_dxxY0() throws DecoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] bytes = new byte[0];
        byte[] expected = new byte[0];
        assertArrayEquals(expected, urlCodec.decode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_YHbQ1() throws DecoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        byte[] bytes = new byte[0];
        byte[] expected = new byte[0];
        assertArrayEquals(expected, urlCodec.decode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_aqmj0() throws EncoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String input = "Hello World";
        String expected = "Hello+World";
        assertEquals(expected, urlCodec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutCharset_QqJM1() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        String input = "Hello World";
        String expected = "Hello+World";
        assertEquals(expected, urlCodec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_GhGB0() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String encodedString = urlCodec.encode("Hello World", "UTF-8");
        assertEquals("Hello+World", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutCharset_BTeA1() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String encodedString = urlCodec.encode("Hello World", "US-ASCII");
        assertEquals("Hello+World", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidInput_sXnt1_CVhY0() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        try {
            codec.decode("Hello%2", "UTF-8");
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithEmptyBytes_XBLf1() {
        byte[] bytes = new byte[0];
        byte[] encodedBytes = URLCodec.encodeUrl(null, bytes);
        assertNotNull(encodedBytes);
        assertEquals(0, encodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytes_ZySL2() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] bytes = new byte[]{'a', 'b', 'c'};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertNotNull(encodedBytes);
        assertEquals(3, encodedBytes.length);
        assertEquals('a', encodedBytes[0]);
        assertEquals('b', encodedBytes[1]);
        assertEquals('c', encodedBytes[2]);
    }
}