/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MatchRatingApproachEncoder_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessingWithNullNames_pVbr2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name1 = null;
        String name2 = null;
        int result = encoder.leftToRightThenRightToLeftProcessing(name1, name2);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonantsWithNullName_FNYz2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = null;
        try {
            encoder.removeDoubleConsonants(name);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Name cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_QoXY0_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name1 = "John";
        String name2 = "Jane";
        int result = encoder.leftToRightThenRightToLeftProcessing(name1, name2);
        assertEquals(2, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessingWithNullNames_pVbr2_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name1 = null;
        String name2 = null;
        int result = encoder.leftToRightThenRightToLeftProcessing(name1, name2);
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowels_WithVowels_yOJS1_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Johan";
        String expected = "John";
        String actual = encoder.removeVowels(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_1_kwUf0_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean actual = encoder.isEncodeEquals("name1", "name2");
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants_bivJ0_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John";
        String expected = "JHN";
        assertEquals(expected, encoder.removeDoubleConsonants(name));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonantsWithNoDoubleConsonants_TGEo1_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Johnny";
        String expected = "JHNNY";
        assertEquals(expected, encoder.removeDoubleConsonants(name));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_1_RJey0_fid1() {
        MatchRatingApproachEncoder m = new MatchRatingApproachEncoder();
        String input = "";
        String expected = "aeiou";
        assertEquals(expected, m.removeAccents(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_2_griz1_fid1() {
        MatchRatingApproachEncoder m = new MatchRatingApproachEncoder();
        String input = "";
        String expected = "AEIOU";
        assertEquals(expected, m.removeAccents(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_7_qBhs6_fid1() {
        MatchRatingApproachEncoder m = new MatchRatingApproachEncoder();
        String input = "";
        String expected = "auo";
        assertEquals(expected, m.removeAccents(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_8_OjAO7_fid1() {
        MatchRatingApproachEncoder m = new MatchRatingApproachEncoder();
        String input = "";
        String expected = "AUO";
        assertEquals(expected, m.removeAccents(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_9_cntX8() {
        MatchRatingApproachEncoder m = new MatchRatingApproachEncoder();
        String input = "";
        String expected = "c";
        assertEquals(expected, m.removeAccents(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_10_VfqO9() {
        MatchRatingApproachEncoder m = new MatchRatingApproachEncoder();
        String input = "";
        String expected = "C";
        assertEquals(expected, m.removeAccents(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_11_ukDL10() {
        MatchRatingApproachEncoder m = new MatchRatingApproachEncoder();
        String input = "";
        String expected = "n";
        assertEquals(expected, m.removeAccents(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_12_vqOx11() {
        MatchRatingApproachEncoder m = new MatchRatingApproachEncoder();
        String input = "";
        String expected = "N";
        assertEquals(expected, m.removeAccents(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanName_HNgp0_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John-Doe";
        String expected = "JOHNEOE";
        assertEquals(expected, encoder.cleanName(name));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanNameWithAccents_VSek1_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Jos";
        String expected = "JOSE";
        assertEquals(expected, encoder.cleanName(name));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_RKdR0_fid1() throws EncoderException {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "example";
        Object encoded = encoder.encode(input);
        assertEquals("expectedOutput", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_uTwW1_fid1() throws EncoderException {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        Object encoded = encoder.encode(null);
        assertEquals("expectedOutput", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCleanedName_cYRd3_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encodedName = encoder.encode("John");
        assertEquals("Jhn", encodedName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAllStepsAndCoverage_PlEG8_1_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encodedName = encoder.encode("John");
        encodedName = encoder.encode("Doe");
        encodedName = encoder.encode("Jane");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        assertEquals("Jhn", encodedName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAllStepsAndCoverage_PlEG8_2_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encodedName = encoder.encode("John");
        encodedName = encoder.encode("Doe");
        encodedName = encoder.encode("Jane");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        assertEquals("D", encodedName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAllStepsAndCoverage_PlEG8_3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encodedName = encoder.encode("John");
        encodedName = encoder.encode("Doe");
        encodedName = encoder.encode("Jane");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        assertEquals("Jan", encodedName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAllStepsAndCoverage_PlEG8_4() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encodedName = encoder.encode("John");
        encodedName = encoder.encode("Doe");
        encodedName = encoder.encode("Jane");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        encodedName = encoder.encode("Jones");
        assertEquals("Jon", encodedName);
    }
}