/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base64_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes_1_PzbU0() {
        BigInteger bigInt = new BigInteger("1234567890");
        byte[] result = Base64.toIntegerBytes(bigInt);
        byte[] expected = new byte[]{0, 0, 0, 0, 0, 0, 45, 57};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_0_TxZk0() {
        Base64 base64 = new Base64(0, new byte[0], false, null);
        boolean actual = base64.isInAlphabet((byte) 0);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_1_tYJz1() {
        Base64 base64 = new Base64(0, new byte[0], false, null);
        boolean actual = base64.isInAlphabet((byte) 1);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_2_gXuU2() {
        Base64 base64 = new Base64(0, new byte[0], false, null);
        boolean actual = base64.isInAlphabet((byte) 2);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_3_TIbq3() {
        Base64 base64 = new Base64(0, new byte[0], false, null);
        boolean actual = base64.isInAlphabet((byte) 3);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_4_dtmY4() {
        Base64 base64 = new Base64(0, new byte[0], false, null);
        boolean actual = base64.isInAlphabet((byte) 4);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_5_jsLC5() {
        Base64 base64 = new Base64(0, new byte[0], false, null);
        boolean actual = base64.isInAlphabet((byte) 5);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_6_ANzC6() {
        Base64 base64 = new Base64(0, new byte[0], false, null);
        boolean actual = base64.isInAlphabet((byte) 6);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_7_xTCO7() {
        Base64 base64 = new Base64(0, new byte[0], false, null);
        boolean actual = base64.isInAlphabet((byte) 7);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_8_Nwcm8() {
        Base64 base64 = new Base64(0, new byte[0], false, null);
        boolean actual = base64.isInAlphabet((byte) 8);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_9_zFxT9() {
        Base64 base64 = new Base64(0, new byte[0], false, null);
        boolean actual = base64.isInAlphabet((byte) 9);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_10_IOWj10() {
        Base64 base64 = new Base64(0, new byte[0], false, null);
        boolean actual = base64.isInAlphabet((byte) 10);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_11_NWIZ11() {
        Base64 base64 = new Base64(0, new byte[0], false, null);
        boolean actual = base64.isInAlphabet((byte) 11);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_12_hlPU12() {
        Base64 base64 = new Base64(0, new byte[0], false, null);
        boolean actual = base64.isInAlphabet((byte) 12);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_1_Omru0_fid1() {
        byte[] arrayOctet = {1, 2, 3};
        boolean expected = true;
        boolean actual = Base64.isBase64(arrayOctet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_01_aiCs0_fid1() {
        byte octet = 0;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_02_FAZm1_fid1() {
        byte octet = 1;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_03_ZBuc2_fid1() {
        byte octet = 2;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_04_JicV3_fid1() {
        byte octet = 3;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_05_Vhtq4_fid1() {
        byte octet = 4;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_06_flXq5_fid1() {
        byte octet = 5;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_07_PnaU6_fid1() {
        byte octet = 6;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_08_ncUb7_fid1() {
        byte octet = 7;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_09_vORW8_fid1() {
        byte octet = 8;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_10_IWeR9_fid1() {
        byte octet = 9;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_11_SZhF10_fid1() {
        byte octet = 10;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_12_CYWL11_fid1() {
        byte octet = 11;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_13_miTk12_fid1() {
        byte octet = 12;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_14_xvoC13_fid1() {
        byte octet = 13;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_15_dvmM14_fid1() {
        byte octet = 14;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_16_ufls15_fid1() {
        byte octet = 15;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_17_eFPi16_fid1() {
        byte octet = 16;
        boolean expected = true;
        boolean actual = Base64.isBase64(octet);
        assertEquals(expected, actual);
    }
}