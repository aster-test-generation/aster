/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Caverphone_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_YVxT0() {
        Caverphone caverphone = new Caverphone();
        assertTrue(caverphone.isCaverphoneEqual("caverphone", "caverphone"));
        assertTrue(caverphone.isCaverphoneEqual("caverphone", "caverphone"));
        assertTrue(caverphone.isCaverphoneEqual("caverphone", "caverphone"));
        assertTrue(caverphone.isCaverphoneEqual("caverphone", "caverphone"));
        assertTrue(caverphone.isCaverphoneEqual("caverphone", "caverphone"));
        assertTrue(caverphone.isCaverphoneEqual("caverphone", "caverphone"));
        assertTrue(caverphone.isCaverphoneEqual("caverphone", "caverphone"));
        assertTrue(caverphone.isCaverphoneEqual("caverphone", "caverphone"));
        assertTrue(caverphone.isCaverphoneEqual("caverphone", "caverphone"));
        assertTrue(caverphone.isCaverphoneEqual("caverphone", "caverphone"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidInput_tkoP0() {
        Caverphone caverphone = new Caverphone();
        String input = "validInput";
        Object expected = caverphone.caverphone(input);
        Object actual = caverphone.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidInput_TuxR1() {
        Caverphone caverphone = new Caverphone();
        Object input = new Object();
        try {
            caverphone.encode(input);
            fail("Expected EncoderException not thrown");
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to Caverphone encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_AIbm5() {
        Caverphone caverphone = new Caverphone();
        String str = "encode";
        String result = caverphone.encode(str);
        assert !result.isEmpty();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_uBVB7() {
        Caverphone caverphone = new Caverphone();
        String str = "encode";
        String result = caverphone.encode(str);
        assert !result.contains(" ");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_eLsK8() {
        Caverphone caverphone = new Caverphone();
        String str = "encode";
        String result = caverphone.encode(str);
        assert !result.contains("-");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ubDK9() {
        Caverphone caverphone = new Caverphone();
        String str = "encode";
        String result = caverphone.encode(str);
        assert !result.contains("_");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_tYeL10() {
        Caverphone caverphone = new Caverphone();
        String str = "encode";
        String result = caverphone.encode(str);
        assert !result.contains("'");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_azeP11() {
        Caverphone caverphone = new Caverphone();
        String str = "encode";
        String result = caverphone.encode(str);
        assert !result.contains(".");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_YVxT0_1() {
        Caverphone caverphone = new Caverphone();
        assertTrue(caverphone.isCaverphoneEqual("caverphone", "caverphone"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithNull_tpGM1_fid2() {
        Caverphone caverphone = new Caverphone();
        String source = null;
        String expected = null;
        assertNull(expected);
    }
}