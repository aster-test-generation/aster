/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_URLCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidInput_nFSx2() {
        URLCodec codec = new URLCodec();
        String input = "Invalid Input";
        try {
            codec.decode(input);
            fail("DecoderException should be thrown");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Objects of type"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArrayInput_dsCu3() {
        URLCodec codec = new URLCodec();
        byte[] input = "Hello World".getBytes();
        try {
            Object result = codec.decode(input);
            assertFalse(result instanceof String);
            assertEquals("Hello World", result);
        } catch (DecoderException e) {
            fail("DecoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidByteArrayInput_eGkI4() {
        URLCodec codec = new URLCodec();
        byte[] input = "Invalid Input".getBytes();
        try {
            codec.decode(input);
            fail("DecoderException should be thrown");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Objects of type"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_vpDk2() throws Exception {
        URLCodec urlCodec = new URLCodec();
        assertEquals(urlCodec.encode("Hello World".getBytes()), "[72, 101, 108, 108, 111, 43, 87, 111, 114, 108, 100]");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncoding_oslZ3_4() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] bytes = new byte[]{'d', 'e', 'f'};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('2', encodedBytes[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncoding_oslZ3_5() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] bytes = new byte[]{'d', 'e', 'f'};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('d', encodedBytes[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncoding_oslZ3_7() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] bytes = new byte[]{'d', 'e', 'f'};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('2', encodedBytes[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncoding_oslZ3_8() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] bytes = new byte[]{'d', 'e', 'f'};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('e', encodedBytes[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncodingAndPlusSign_IXEG4_4() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        urlsafe.set('+');
        byte[] bytes = new byte[]{'d', 'e', 'f', ' '};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('2', encodedBytes[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncodingAndPlusSign_IXEG4_5() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        urlsafe.set('+');
        byte[] bytes = new byte[]{'d', 'e', 'f', ' '};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('d', encodedBytes[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncodingAndPlusSign_IXEG4_7() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        urlsafe.set('+');
        byte[] bytes = new byte[]{'d', 'e', 'f', ' '};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('2', encodedBytes[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncodingAndPlusSign_IXEG4_8() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        urlsafe.set('+');
        byte[] bytes = new byte[]{'d', 'e', 'f', ' '};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('e', encodedBytes[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncodingAndPlusSign_IXEG4_9() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        urlsafe.set('+');
        byte[] bytes = new byte[]{'d', 'e', 'f', ' '};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals('+', encodedBytes[6]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithException_DUjG2() {
        URLCodec urlCodec = new URLCodec();
        byte[] bytes = new byte[0];
        try {
            urlCodec.decode(bytes);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_sSmj0_fid1() throws DecoderException {
        final String charset = "UTF-8";
        final String str = "This is a test";
        final URLCodec codec = new URLCodec(charset);
        assertEquals("This+is+a+test", codec.decode(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getEncoding_withoutCharset_VWyS1_fid1() {
        URLCodec urlCodec = new URLCodec();
        assertEquals(null, urlCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithNoArgConstructor_zYMs1_fid1() {
        URLCodec urlCodec = new URLCodec();
        assertEquals(null, urlCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArrayInput_dsCu3_fid1() {
        URLCodec codec = new URLCodec();
        byte[] input = "Hello World".getBytes();
        try {
            Object result = codec.decode(input);
            assertTrue(result instanceof String);
            assertEquals("Hello World", result);
        } catch (DecoderException e) {
            fail("DecoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_bfrT0_fid1() throws Exception {
        URLCodec urlCodec = new URLCodec("UTF-8");
        assertEquals(urlCodec.encode("Hello World"), "Hello%20World");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutCharset_sPmU1_fid1() throws Exception {
        URLCodec urlCodec = new URLCodec();
        assertEquals(urlCodec.encode("Hello World"), "Hello%20World");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_vpDk2_fid1() throws Exception {
        URLCodec urlCodec = new URLCodec();
        assertEquals(urlCodec.encode("Hello World".getBytes()), "Hello%20World");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncoding_oslZ3_2_fid1() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] bytes = new byte[]{'d', 'e', 'f'};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals(6, encodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncodingAndPlusSign_IXEG4_2_fid1() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        urlsafe.set('+');
        byte[] bytes = new byte[]{'d', 'e', 'f', ' '};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals(7, encodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_aqmj0_fid1() throws EncoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String input = "Hello World";
        String expected = "Hello%20World";
        assertEquals(expected, urlCodec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutCharset_QqJM1_fid1() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        String input = "Hello World";
        String expected = "Hello%20World";
        assertEquals(expected, urlCodec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_GhGB0_fid1() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String encodedString = urlCodec.encode("Hello World", "UTF-8");
        assertEquals("Hello%20World", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutCharset_BTeA1_fid1() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String encodedString = urlCodec.encode("Hello World", "US-ASCII");
        assertEquals("Hello%20World", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncoding_oslZ3() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] bytes = new byte[]{'d', 'e', 'f'};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertNotNull(encodedBytes);
        assertEquals(6, encodedBytes.length);
        assertEquals('%', encodedBytes[0]);
        assertEquals('2', encodedBytes[1]);
        assertEquals('d', encodedBytes[2]);
        assertEquals('%', encodedBytes[3]);
        assertEquals('2', encodedBytes[4]);
        assertEquals('e', encodedBytes[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithUrlSafeAndBytesThatNeedEncodingAndPlusSign_IXEG4() {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        urlsafe.set('+');
        byte[] bytes = new byte[]{'d', 'e', 'f', ' '};
        byte[] encodedBytes = URLCodec.encodeUrl(urlsafe, bytes);
        assertNotNull(encodedBytes);
        assertEquals(7, encodedBytes.length);
        assertEquals('%', encodedBytes[0]);
        assertEquals('2', encodedBytes[1]);
        assertEquals('d', encodedBytes[2]);
        assertEquals('%', encodedBytes[3]);
        assertEquals('2', encodedBytes[4]);
        assertEquals('e', encodedBytes[5]);
        assertEquals('+', encodedBytes[6]);
    }
}