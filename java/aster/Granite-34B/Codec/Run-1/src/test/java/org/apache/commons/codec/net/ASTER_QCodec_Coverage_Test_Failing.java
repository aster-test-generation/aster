/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.charset.UnsupportedCharsetException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNoException_RnzV1() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        assertEquals("test", qCodec.decode("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNull_eDSJ0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        Object actual = qCodec.decode(null);
        Object expected = null;
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_NKeu1() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        Object actual = qCodec.decode("hello");
        Object expected = "hello";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNonString_jEvd2() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        Object actual = qCodec.decode(123);
        Object expected = "Objects of type java.lang.Integer cannot be decoded using Q codec";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidString_ZMiB3() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        Object actual = qCodec.decode("hello world");
        Object expected = "Objects of type java.lang.String cannot be decoded using Q codec";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyObject_EbeM3() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        Object obj = new Object();
        Object actual = qCodec.encode(obj);
        Object expected = new Object();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedCharset_MwxF0() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        try {
            qCodec.encode("sourceString", "unsupportedCharset");
        } catch (UnsupportedCharsetException e) {
            assertEquals("Charset unsupportedCharset is not supported", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncodingException_zkbK0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        try {
            qCodec.decode("test");
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("test", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_vCtP1_fid1() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        Object obj = "test";
        Object actual = qCodec.encode(obj);
        Object expected = "test";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncoderException_WXBE1_fid1() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        try {
            qCodec.encode("sourceString", "unsupportedCharset");
        } catch (EncoderException e) {
            assertEquals("Charset unsupportedCharset is not supported", e.getMessage());
        }
    }
}