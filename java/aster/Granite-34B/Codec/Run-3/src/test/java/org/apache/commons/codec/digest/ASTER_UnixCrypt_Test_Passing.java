/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_UnixCrypt_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCryptWithOriginalAndGeneratedSalt_VezJ0() throws Exception {
        byte[] original = new byte[1];
        String generatedSalt = UnixCrypt.crypt(original);
        assertEquals(60, generatedSalt.length());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCryptWithOriginalAndStaticSalt_wRxO1() throws Exception {
        byte[] original = new byte[1];
        String staticSalt = "$1$";
        String generatedSalt = UnixCrypt.crypt(original, staticSalt);
        assertEquals(60, generatedSalt.length());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_nbLB2() throws Exception {
    byte[] original = new byte[8];
    String salt = "ab";
    String result = UnixCrypt.crypt(original, salt);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_HyeQ0() throws Exception {
        final byte[] original = {0, 1, 2, 3, 4, 5, 6, 7};
        final String expected = "*0*";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidSalt_pnBL1() throws Exception {
        final byte[] original = {0, 1, 2, 3, 4, 5, 6, 7};
        final String salt = "12";
        final String expected = "*0*";
        final String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_nftj2() throws Exception {
        final byte[] original = {0, 1, 2, 3, 4, 5, 6, 7};
        final String salt = "ab";
        final String expected = "ab.c.d.";
        final String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCryptWithSalt_Fkss0() throws Exception {
		String salt = "ab";
		byte[] original = {0x01, 0x02, 0x03, 0x04};
		String expected = "abF2n03Y";
		assertEquals(expected, UnixCrypt.crypt(original, salt));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCryptWithoutSalt_FfcH1() throws Exception {
		String salt = null;
		byte[] original = {0x01, 0x02, 0x03, 0x04};
		String expected = "Ad4$/7";
		assertEquals(expected, UnixCrypt.crypt(original, salt));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCryptWithInvalidSalt_Mldn2() throws Exception {
		String salt = "123";
		byte[] original = {0x01, 0x02, 0x03, 0x04};
		String expected = null;
		assertEquals(expected, UnixCrypt.crypt(original, salt));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSalt_fLcR1() throws Exception {
        byte[] original = {};
        String salt = "ab";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals("$2a$00$ab./", actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSaltAndOriginal_rBet2() throws Exception {
        byte[] original = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        String salt = "ab";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals("$2a$00$ab.9X5U6g4G.G0.J2l9h0", actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSaltAndOriginalAndRandomSalt_Hyff3_1() throws Exception {
        byte[] original = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        Random random = new Random();
        String salt = "" + (char) (random.nextInt(62) + 48) + (char) (random.nextInt(62) + 48);
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(13 + 22, actual.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSaltAndOriginalAndRandomSalt_Hyff3_2() throws Exception {
        byte[] original = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        Random random = new Random();
        String salt = "" + (char) (random.nextInt(62) + 48) + (char) (random.nextInt(62) + 48);
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals("$2a$00$" + salt + ".", actual.substring(0, 13 + 22));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidSalt_VYBX1() throws Exception {
        final String invalidSalt = "12";
        final String expected = "12";
        final String actual = UnixCrypt.crypt(new byte[8], invalidSalt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_yeqs2() throws Exception {
        final String validSalt = "ab";
        final String expected = "ab";
        final String actual = UnixCrypt.crypt(new byte[8], validSalt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_kkYj3() throws Exception {
        final String expected = "aa";
        final String actual = UnixCrypt.crypt(new byte[0], null);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithShortOriginal_VIFc4() throws Exception {
        final byte[] original = {0x01, 0x02, 0x03};
        final String expected = "aa";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_ipUD5() throws Exception {
        final byte[] original = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09};
        final String expected = "aa";
        final String actual = UnixCrypt.crypt(original, null);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
void testCrypt_Aiuv1() throws Exception {
    final byte[] original = new byte[8];
    Arrays.fill(original, (byte) 0);
    String salt = "aa";
    final String result = UnixCrypt.crypt(original, salt);
    assertEquals(13, result.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
void testCryptWithSalt_bcRP2_2() throws Exception {
    final byte[] original = new byte[8];
    Arrays.fill(original, (byte) 0);
    String salt = "aa";
    final String result = UnixCrypt.crypt(original, salt);
    assertEquals(salt.charAt(0), result.charAt(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
void testCryptWithSalt_bcRP2_3() throws Exception {
    final byte[] original = new byte[8];
    Arrays.fill(original, (byte) 0);
    String salt = "aa";
    final String result = UnixCrypt.crypt(original, salt);
    assertEquals(salt.charAt(1), result.charAt(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
void testCryptWithInvalidSalt_oVfH4() throws Exception {
    final byte[] original = new byte[8];
    Arrays.fill(original, (byte) 0);
    String salt = "a";
    try {
        UnixCrypt.crypt(original, salt);
    } catch (final IllegalArgumentException e) {
        assertEquals("Invalid salt value: a", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_crypt_0_LZXl0() throws Exception {
	byte[] original = new byte[0];
	String expected = "AA";
	UnixCrypt tested = new UnixCrypt();
	String actual = tested.crypt(original, expected);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_crypt_1_iVWK1() throws Exception {
	byte[] original = new byte[1];
	String expected = "AA";
	UnixCrypt tested = new UnixCrypt();
	String actual = tested.crypt(original, expected);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_crypt_2_lhIJ2() throws Exception {
	byte[] original = new byte[2];
	String expected = "AA";
	UnixCrypt tested = new UnixCrypt();
	String actual = tested.crypt(original, expected);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_crypt_3_msPW3() throws Exception {
	byte[] original = new byte[3];
	String expected = "AA";
	UnixCrypt tested = new UnixCrypt();
	String actual = tested.crypt(original, expected);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_crypt_4_hmXW4() throws Exception {
	byte[] original = new byte[4];
	String expected = "AA";
	UnixCrypt tested = new UnixCrypt();
	String actual = tested.crypt(original, expected);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_crypt_5_HPih5() throws Exception {
	byte[] original = new byte[5];
	String expected = "AA";
	UnixCrypt tested = new UnixCrypt();
	String actual = tested.crypt(original, expected);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_crypt_6_kKNi6() throws Exception {
	byte[] original = new byte[6];
	String expected = "AA";
	UnixCrypt tested = new UnixCrypt();
	String actual = tested.crypt(original, expected);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_crypt_7_FVZE7() throws Exception {
	byte[] original = new byte[7];
	String expected = "AA";
	UnixCrypt tested = new UnixCrypt();
	String actual = tested.crypt(original, expected);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_crypt_8_llgV8() throws Exception {
	byte[] original = new byte[8];
	String expected = "AA";
	UnixCrypt tested = new UnixCrypt();
	String actual = tested.crypt(original, expected);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_crypt_9_nPUC9() throws Exception {
	byte[] original = new byte[9];
	String expected = "AA";
	UnixCrypt tested = new UnixCrypt();
	String actual = tested.crypt(original, expected);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_crypt_10_buPk10() throws Exception {
	byte[] original = new byte[10];
	String expected = "AA";
	UnixCrypt tested = new UnixCrypt();
	String actual = tested.crypt(original, expected);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_crypt_11_LkRE11() throws Exception {
	byte[] original = new byte[11];
	String expected = "AA";
	UnixCrypt tested = new UnixCrypt();
	String actual = tested.crypt(original, expected);
	assertEquals(expected, actual);
}
}