/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PhoneticEngine_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuleType_lGaE0_1() throws Exception {
    PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
    PhoneticEngine phoneticEngine2 = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, false);
    assertEquals(RuleType.APPROX, phoneticEngine.getRuleType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuleType_lGaE0_2() throws Exception {
    PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
    PhoneticEngine phoneticEngine2 = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, false);
    assertEquals(RuleType.EXACT, phoneticEngine2.getRuleType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat_LxAM0_1() throws Exception {
        PhoneticEngine phoneticEngine1 = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        PhoneticEngine phoneticEngine2 = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, false, 5);
        assertEquals(true, phoneticEngine1.isConcat());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat_LxAM0_2() throws Exception {
        PhoneticEngine phoneticEngine1 = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        PhoneticEngine phoneticEngine2 = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, false, 5);
        assertEquals(false, phoneticEngine2.isConcat());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLang_iBcO0() throws Exception {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        Lang lang = phoneticEngine.getLang();
        assertEquals(Lang.class, lang.getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLangWithNoMaxPhonemes_pmoI1() throws Exception {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.EXACT, false);
        Lang lang = phoneticEngine.getLang();
        assertEquals(Lang.class, lang.getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetMaxPhonemes_upSR0() throws Exception {
		PhoneticEngine pe = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
		int maxPhonemes = pe.getMaxPhonemes();
		assertEquals(10, maxPhonemes);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameType_WhenNameTypeIsASHKENAZI_ThenReturnASHKENAZI_JCwS0() throws Exception {
        PhoneticEngine target = new PhoneticEngine(NameType.ASHKENAZI, null, false, 0);
        NameType actual = target.getNameType();
        assertEquals(NameType.ASHKENAZI, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameType_WhenNameTypeIsGENERIC_ThenReturnGENERIC_ZtVj1() throws Exception {
        PhoneticEngine target = new PhoneticEngine(NameType.GENERIC, null, false, 0);
        NameType actual = target.getNameType();
        assertEquals(NameType.GENERIC, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNameType_WhenNameTypeIsSEPHARDIC_ThenReturnSEPHARDIC_cdYH2() throws Exception {
        PhoneticEngine target = new PhoneticEngine(NameType.SEPHARDIC, null, false, 0);
        NameType actual = target.getNameType();
        assertEquals(NameType.SEPHARDIC, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_OhNs0() throws Exception {
        final NameType nameType = NameType.ASHKENAZI;
        final RuleType ruleType = RuleType.EXACT;
        final boolean concatenate = true;
        final int maxPhonemes = 5;
        final PhoneticEngine phoneticEngine = new PhoneticEngine(nameType, ruleType, concatenate, maxPhonemes);
        final String input = "input";
        final String expected = "expected"; // Replace with the expected result
        final String actual = phoneticEngine.encode(input);
        assertEquals(expected, actual);
    }
}