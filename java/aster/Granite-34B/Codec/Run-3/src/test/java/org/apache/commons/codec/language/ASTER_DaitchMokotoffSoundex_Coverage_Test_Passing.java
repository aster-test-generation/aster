/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DaitchMokotoffSoundex_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEncodeWithStringParam_uNXp0() throws org.apache.commons.codec.EncoderException {
		DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
		Object obj = "test";
		try {
			Object actual = dms.encode(obj);
		} catch (EncoderException e) {
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEncodeWithNonStringParam_pmPd1() throws org.apache.commons.codec.EncoderException {
		DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
		Object obj = 123;
		try {
			Object actual = dms.encode(obj);
		} catch (EncoderException e) {
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_WithWhitespace_jjiW0() {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    String source = "John Wick";
    String expected = "J530|W250";
    String actual = soundex.soundex(source);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_WithFolding_iexF1() {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
    String source = "John Wick";
    String expected = "J530|W250";
    String actual = soundex.soundex(source);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_WithNullSource_Efhg2() {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    String source = null;
    String expected = null;
    String actual = soundex.soundex(source);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_WithEmptySource_ejpL3() {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    String source = "";
    String expected = "";
    String actual = soundex.soundex(source);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WhenSourceIsNull_ThenReturnNull_HQOx0() {
        final DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        final String actual = soundex.soundex(null);
        assertEquals(null, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WhenSourceHasOnlyWhitespace_ThenReturnEmpty_qNIM1() {
        final DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        final String source = "   \t\n";
        final String actual = soundex.soundex(source);
        assertEquals("", actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WhenRulesIsNullOrEmpty_ThenReturnEmpty_pskQ2() {
        final DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        final String source = "A";
        final String actual = soundex.soundex(source);
        assertEquals("", actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WhenReplacementsLengthIsMoreThanOneAndBranchingIsTrue_ThenReturnExpected_EliV3() {
        final DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        final String source = "A";
        final String actual = soundex.soundex(source);
        assertEquals("expected", actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_WithWhitespace_LvLm0() {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    String source = "J. C. Penney";
    String expected = "J520|J520|J520";
    String actual = soundex.soundex(source);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_WithNoMatchingRule_PJrY2() {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    String source = "12345";
    String expected = "";
    String actual = soundex.soundex(source);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_WithMultipleReplacements_RsAS3() {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    String source = "Johnson";
    String expected = "J530|J530|J530";
    String actual = soundex.soundex(source);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_WithForceFlag_xYbw4() {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    String source = "Campbell";
    String expected = "C110|C110|C110";
    String actual = soundex.soundex(source);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_WithInvalidInput_qruN5() {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    String source = "Invalid Input";
    String expected = "";
    String actual = soundex.soundex(source);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_WithMultipleBranches_dDnQ6() {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    String source = "Williams";
    String expected = "W450|W450|W450";
    String actual = soundex.soundex(source);
    assertEquals(expected, actual);
}
}