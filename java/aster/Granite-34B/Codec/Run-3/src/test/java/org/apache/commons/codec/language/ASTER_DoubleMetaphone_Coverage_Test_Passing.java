/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DoubleMetaphone_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNonStringObject_PrBb0() throws org.apache.commons.codec.EncoderException {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    try {
        doubleMetaphone.encode(new Object());
    } catch (EncoderException e) {
        assertEquals("DoubleMetaphone encode parameter is not of type String", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithStringObject_eTbJ1() throws org.apache.commons.codec.EncoderException {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals(doubleMetaphone.doubleMetaphone("test"), doubleMetaphone.encode("test"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithL_hfhh0() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "hello";
    String actual = doubleMetaphone.doubleMetaphone(value, true);
    String expected = "h600";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithConditionL0_PuQL1() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "hello";
    String actual = doubleMetaphone.doubleMetaphone(value, false);
    String expected = "h600";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleR1_oyzH0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "IER";
        boolean alternate = true;
        String expected = "R";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleR2_VLLq1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "IER";
        boolean alternate = false;
        String expected = "R";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleX1_QaVf0() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "breaux";
    String expected = "KS";
    String actual = doubleMetaphone.doubleMetaphone(value, false);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleX2_pKhA1() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "breaux";
    String expected = "KS";
    String actual = doubleMetaphone.doubleMetaphone(value, true);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithVANVON_KMSU0() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "VAN";
    String actual = doubleMetaphone.doubleMetaphone(value, false);
    String expected = "AN";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithORCHES_RdVV1() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "ORCHES";
    String actual = doubleMetaphone.doubleMetaphone(value, false);
    String expected = "AX54";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithARCHIT_wjrl2() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "ARCHIT";
    String actual = doubleMetaphone.doubleMetaphone(value, false);
    String expected = "AX54";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithORCHID_AnmW3() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "ORCHID";
    String actual = doubleMetaphone.doubleMetaphone(value, false);
    String expected = "AX54";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithT_UufM4() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "T";
    String actual = doubleMetaphone.doubleMetaphone(value, false);
    String expected = "0000";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test1_DfKW0() {
	DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
	assertEquals("TK", doubleMetaphone.doubleMetaphone("Edge", true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test2_iYxu1() {
	DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
	assertEquals("TK", doubleMetaphone.doubleMetaphone("Edge", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test3_jJVF2() {
	DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
	assertEquals("TK", doubleMetaphone.doubleMetaphone("Edgar", true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test4_fajj3() {
	DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
	assertEquals("TK", doubleMetaphone.doubleMetaphone("Edgar", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test5_gWah4() {
	DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
	assertEquals("TF", doubleMetaphone.doubleMetaphone("Dge", true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test6_vZfS5() {
	DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
	assertEquals("TF", doubleMetaphone.doubleMetaphone("Dge", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test7_Otvj6() {
	DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
	assertEquals("TF", doubleMetaphone.doubleMetaphone("Dgy", true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test8_fsyT7() {
	DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
	assertEquals("TF", doubleMetaphone.doubleMetaphone("Dgy", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleSC1_puKw0() {
    DoubleMetaphone d = new DoubleMetaphone();
    String value = "school";
    boolean alternate = true;
    String expected = "SK";
    String actual = d.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleSC2_UOYz1() {
    DoubleMetaphone d = new DoubleMetaphone();
    String value = "schooner";
    boolean alternate = true;
    String expected = "SK";
    String actual = d.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleSC3_lAHJ2() {
    DoubleMetaphone d = new DoubleMetaphone();
    String value = "schermerhorn";
    boolean alternate = true;
    String expected = "SK";
    String actual = d.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleSC4_OXIa3() {
    DoubleMetaphone d = new DoubleMetaphone();
    String value = "schenker";
    boolean alternate = true;
    String expected = "SK";
    String actual = d.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleSC5_FJPQ4() {
    DoubleMetaphone d = new DoubleMetaphone();
    String value = "schmidt";
    boolean alternate = true;
    String expected = "SK";
    String actual = d.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleSC6_KXJZ5() {
    DoubleMetaphone d = new DoubleMetaphone();
    String value = "snider";
    boolean alternate = true;
    String expected = "SK";
    String actual = d.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleSC7_Jqfh6() {
    DoubleMetaphone d = new DoubleMetaphone();
    String value = "resnais";
    boolean alternate = true;
    String expected = "SK";
    String actual = d.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleSC8_NTdl7() {
    DoubleMetaphone d = new DoubleMetaphone();
    String value = "artois";
    boolean alternate = true;
    String expected = "SK";
    String actual = d.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleSC9_xRCG8() {
    DoubleMetaphone d = new DoubleMetaphone();
    String value = "schneider";
    boolean alternate = true;
    String expected = "SK";
    String actual = d.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleSC10_orDK9() {
    DoubleMetaphone d = new DoubleMetaphone();
    String value = "schooner";
    boolean alternate = false;
    String expected = "SK";
    String actual = d.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleSC11_kBGc10() {
    DoubleMetaphone d = new DoubleMetaphone();
    String value = "schermerhorn";
    boolean alternate = false;
    String expected = "SK";
    String actual = d.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleSC12_Urvv11() {
    DoubleMetaphone d = new DoubleMetaphone();
    String value = "schenker";
    boolean alternate = false;
    String expected = "SK";
    String actual = d.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithChia_LTlL0_1() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "CHIA";
    String expectedPrimary = "K";
    String expectedAlternate = "K";
    String actualPrimary = doubleMetaphone.doubleMetaphone(value, false);
    String actualAlternate = doubleMetaphone.doubleMetaphone(value, true);
    assertEquals(expectedPrimary, actualPrimary);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithChia_LTlL0_2() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "CHIA";
    String expectedPrimary = "K";
    String expectedAlternate = "K";
    String actualPrimary = doubleMetaphone.doubleMetaphone(value, false);
    String actualAlternate = doubleMetaphone.doubleMetaphone(value, true);
    assertEquals(expectedAlternate, actualAlternate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_doubleMetaphone_case1_AfWE0() {
    DoubleMetaphone d = new DoubleMetaphone();
    String value = "CHAE";
    String actual = d.doubleMetaphone(value, true);
    String expected = "K X";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_doubleMetaphone_case2_QPcc1() {
    DoubleMetaphone d = new DoubleMetaphone();
    String value = "CH";
    String actual = d.doubleMetaphone(value, true);
    String expected = "X K";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_doubleMetaphone_case3_cSuC2() {
    DoubleMetaphone d = new DoubleMetaphone();
    String value = "MC";
    String actual = d.doubleMetaphone(value, true);
    String expected = "K";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleH_dwMw10() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_doubleMetaphone_conditionC0_true_LuzK0() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "CHI";
    int index = 0;
    boolean alternate = true;
    String expected = "K";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_doubleMetaphone_conditionC0_false_icOv1() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "MAC";
    int index = 0;
    boolean alternate = true;
    String expected = "M";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_doubleMetaphone_contains_CAESAR_kUwi3() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "MAC";
    int index = 0;
    boolean alternate = true;
    String expected = "S";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_doubleMetaphone_contains_CH_piSG4() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "MAC";
    int index = 0;
    boolean alternate = true;
    String expected = "K";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_doubleMetaphone_contains_CIA_xdqC6() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "MAC";
    int index = 0;
    boolean alternate = true;
    String expected = "X";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS1_LRJW0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "island";
        boolean alternate = true;
        String expected = "XSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS2_pUXA1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "isle";
        boolean alternate = false;
        String expected = "ISL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS3_SkiA2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "carlisle";
        boolean alternate = true;
        String expected = "KRLSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS4_uvFw3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "carlysle";
        boolean alternate = false;
        String expected = "KRLSL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS5_lGKf4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sugar-";
        boolean alternate = true;
        String expected = "XSR";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS6_tKLz5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "smith";
        boolean alternate = false;
        String expected = "SKMT";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS7_osdb6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "snider";
        boolean alternate = true;
        String expected = "SKNDR";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS8_gxAm7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "schmidt";
        boolean alternate = false;
        String expected = "SKMTD";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS9_FNOH8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "schneider";
        boolean alternate = true;
        String expected = "SKNDR";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS10_LqZI9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "resnais";
        boolean alternate = false;
        String expected = "RSKNS";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS11_fKKp10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "artois";
        boolean alternate = true;
        String expected = "ARTS";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_ZohF0_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("B", true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_ZohF0_2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("H", true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_ZohF0_3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("D", true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_doubleMetaphone_with_CHAE_HEhJ0() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String input = "CHAE";
    String expected = "K X";
    String actual = doubleMetaphone.doubleMetaphone(input, false);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_doubleMetaphone_with_CH_GPsW1() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String input = "CH";
    String expected = "X K";
    String actual = doubleMetaphone.doubleMetaphone(input, false);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_doubleMetaphone_with_CH_and_MC_Ftdc2() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String input = "CH";
    String expected = "K";
    String actual = doubleMetaphone.doubleMetaphone(input, false);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_doubleMetaphone_michael_Ccrq0() {
		DoubleMetaphone dMetaphone = new DoubleMetaphone();
		assertEquals("K512", dMetaphone.doubleMetaphone("Michael", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_doubleMetaphone_maccaffrey_HMop1() {
		DoubleMetaphone dMetaphone = new DoubleMetaphone();
		assertEquals("K5120", dMetaphone.doubleMetaphone("Mac Caffrey", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_doubleMetaphone_macgregor_TAhK2() {
		DoubleMetaphone dMetaphone = new DoubleMetaphone();
		assertEquals("K350", dMetaphone.doubleMetaphone("Mac Gregor", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_doubleMetaphone_maccaffrey_alternate_sWuB3() {
		DoubleMetaphone dMetaphone = new DoubleMetaphone();
		assertEquals("K5120", dMetaphone.doubleMetaphone("Mac Caffrey", true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_doubleMetaphone_macgregor_alternate_ZviA4() {
		DoubleMetaphone dMetaphone = new DoubleMetaphone();
		assertEquals("K350", dMetaphone.doubleMetaphone("Mac Gregor", true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_doubleMetaphone_focaccia_ayAX5() {
		DoubleMetaphone dMetaphone = new DoubleMetaphone();
		assertEquals("1200", dMetaphone.doubleMetaphone("focaccia", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_doubleMetaphone_mcclelland_pYWv6() {
		DoubleMetaphone dMetaphone = new DoubleMetaphone();
		assertEquals("K255346", dMetaphone.doubleMetaphone("McClelland", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_doubleMetaphone_mcclelland_alternate_Hetd7() {
		DoubleMetaphone dMetaphone = new DoubleMetaphone();
		assertEquals("K255346", dMetaphone.doubleMetaphone("McClelland", true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_doubleMetaphone_mac_xsKb8() {
		DoubleMetaphone dMetaphone = new DoubleMetaphone();
		assertEquals("K000", dMetaphone.doubleMetaphone("Mac", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_doubleMetaphone_mac_alternate_RvNf9() {
		DoubleMetaphone dMetaphone = new DoubleMetaphone();
		assertEquals("K000", dMetaphone.doubleMetaphone("Mac", true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_doubleMetaphone_caesar_sXDR10() {
		DoubleMetaphone dMetaphone = new DoubleMetaphone();
		assertEquals("S000", dMetaphone.doubleMetaphone("Caesar", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_doubleMetaphone_caesar_alternate_pzJJ11() {
		DoubleMetaphone dMetaphone = new DoubleMetaphone();
		assertEquals("S000", dMetaphone.doubleMetaphone("Caesar", true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_doubleMetaphone_cc_uKbP12() {
		DoubleMetaphone dMetaphone = new DoubleMetaphone();
		assertEquals("K000", dMetaphone.doubleMetaphone("cc", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_doubleMetaphone_cc_alternate_vFHh13() {
		DoubleMetaphone dMetaphone = new DoubleMetaphone();
		assertEquals("K000", dMetaphone.doubleMetaphone("cc", true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_doubleMetaphone_ch_ImRB14() {
		DoubleMetaphone dMetaphone = new DoubleMetaphone();
		assertEquals("X300", dMetaphone.doubleMetaphone("ch", false));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleS1_GlWF0() {
	DoubleMetaphone d = new DoubleMetaphone();
	String value = "island";
	boolean alternate = false;
	String expected = "SLN";
	String actual = d.doubleMetaphone(value, alternate);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleS2_KnEO1() {
	DoubleMetaphone d = new DoubleMetaphone();
	String value = "isle";
	boolean alternate = false;
	String expected = "SL";
	String actual = d.doubleMetaphone(value, alternate);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleS3_UyPR2() {
	DoubleMetaphone d = new DoubleMetaphone();
	String value = "carlisle";
	boolean alternate = false;
	String expected = "KLSL";
	String actual = d.doubleMetaphone(value, alternate);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleS4_jtLW3() {
	DoubleMetaphone d = new DoubleMetaphone();
	String value = "carlysle";
	boolean alternate = false;
	String expected = "KLSL";
	String actual = d.doubleMetaphone(value, alternate);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleS5_GxAQ4() {
	DoubleMetaphone d = new DoubleMetaphone();
	String value = "sugar-";
	boolean alternate = false;
	String expected = "XSG";
	String actual = d.doubleMetaphone(value, alternate);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleS6_lUSQ5() {
	DoubleMetaphone d = new DoubleMetaphone();
	String value = "smith";
	boolean alternate = false;
	String expected = "SKMT";
	String actual = d.doubleMetaphone(value, alternate);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleS7_oCJJ6() {
	DoubleMetaphone d = new DoubleMetaphone();
	String value = "snider";
	boolean alternate = false;
	String expected = "SKNTR";
	String actual = d.doubleMetaphone(value, alternate);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleS8_eLHI7() {
	DoubleMetaphone d = new DoubleMetaphone();
	String value = "schmidt";
	boolean alternate = false;
	String expected = "SKMT";
	String actual = d.doubleMetaphone(value, alternate);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleS9_Upci8() {
	DoubleMetaphone d = new DoubleMetaphone();
	String value = "schneider";
	boolean alternate = false;
	String expected = "SKNTR";
	String actual = d.doubleMetaphone(value, alternate);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleS10_NlVq9() {
	DoubleMetaphone d = new DoubleMetaphone();
	String value = "resnais";
	boolean alternate = false;
	String expected = "RSKS";
	String actual = d.doubleMetaphone(value, alternate);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleS11_hbyF10() {
	DoubleMetaphone d = new DoubleMetaphone();
	String value = "artois";
	boolean alternate = false;
	String expected = "ARTS";
	String actual = d.doubleMetaphone(value, alternate);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHandleS12_YcGG11() {
	DoubleMetaphone d = new DoubleMetaphone();
	String value = "island";
	boolean alternate = true;
	String expected = "SLN";
	String actual = d.doubleMetaphone(value, alternate);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithChia_LTlL0() {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "CHIA";
    String expectedPrimary = "K";
    String expectedAlternate = "K";
    String actualPrimary = doubleMetaphone.doubleMetaphone(value, false);
    String actualAlternate = doubleMetaphone.doubleMetaphone(value, true);
    assertEquals(expectedPrimary, actualPrimary);
    assertEquals(expectedAlternate, actualAlternate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_ZohF0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("B", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("H", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("D", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("B", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("H", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("D", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("B", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("H", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("D", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("B", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("H", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("D", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("B", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("H", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("D", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("B", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("H", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("D", true));
}
}