/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Crypt_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyKeyAndSalt_yOTX1() throws Exception {
        String expected = "";
        String actual = Crypt.crypt("", "");
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonNullKeyAndSalt_gLst2() throws Exception {
        String expected = "encryptedString";
        String actual = Crypt.crypt("key", "salt");
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSalt_jfQi1() throws Exception {
        byte[] keyBytes = new byte[] { 0, 1, 2, 3 };
        String salt = "salt";
        String expected = "cryptWithSalt";
        String actual = Crypt.crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSha512Salt_Wnjl1() throws Exception {
        byte[] keyBytes = new byte[10];
        String salt = Sha2Crypt.SHA512_PREFIX + "salt";
        String result = Crypt.crypt(keyBytes, salt);
        Assertions.assertEquals("Result should match", "expectedResult", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSha256Salt_BSjA2() throws Exception {
        byte[] keyBytes = new byte[10];
        String salt = Sha2Crypt.SHA256_PREFIX + "salt";
        String result = Crypt.crypt(keyBytes, salt);
        Assertions.assertEquals("Result should match", "expectedResult", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMd5Salt_braD3() throws Exception {
        byte[] keyBytes = new byte[10];
        String salt = Md5Crypt.MD5_PREFIX + "salt";
        String result = Crypt.crypt(keyBytes, salt);
        Assertions.assertEquals("Result should match", "expectedResult", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithUnknownSalt_txTw4() throws Exception {
        byte[] keyBytes = new byte[10];
        String salt = "unknownPrefix" + "salt";
        String result = Crypt.crypt(keyBytes, salt);
        Assertions.assertEquals("Result should match", "expectedResult", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyKey_pAtr1() throws Exception {
        assertEquals("", Crypt.crypt(""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithShortKey_nynj2() throws Exception {
        assertEquals("key", Crypt.crypt("key"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongKey_DuCp3() throws Exception {
        assertEquals("key", Crypt.crypt("keykeykeykeykeykeykeykey"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharacters_CgYi4() throws Exception {
        assertEquals("!@#$%^&*()_+", Crypt.crypt("!@#$%^&*()_+"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumbers_FcMA5() throws Exception {
        assertEquals("1234567890", Crypt.crypt("1234567890"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithUppercaseLetters_usai6() throws Exception {
        assertEquals("KEY", Crypt.crypt("KEY"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMixedCaseLetters_XViL8() throws Exception {
        assertEquals("kEy", Crypt.crypt("kEy"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithUnicodeLetters_ygap9() throws Exception {
        assertEquals("\u0393\u03B5\u03C9\u03B3\u03C1\u03B1\u03C6\u03B9\u03BA\u03CC", Crypt.crypt("\u0393\u03B5\u03C9\u03B3\u03C1\u03B1\u03C6\u03B9\u03BA\u03CC"));
    }
}