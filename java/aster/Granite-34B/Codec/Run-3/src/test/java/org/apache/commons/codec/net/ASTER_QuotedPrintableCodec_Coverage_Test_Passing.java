/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QuotedPrintableCodec_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeWithSourceStrNull_BxmM0() throws DecoderException {
    QuotedPrintableCodec qp = new QuotedPrintableCodec();
    String actual = qp.decode(null, StandardCharsets.UTF_8);
    Assertions.assertNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeWithSourceStrNotNull_wNCp1() throws DecoderException {
    QuotedPrintableCodec qp = new QuotedPrintableCodec();
    String sourceStr = "test";
    String actual = qp.decode(sourceStr, StandardCharsets.UTF_8);
    Assertions.assertNotNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNegativeByte_bUts0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] bytes = new byte[]{-1};
        byte[] encodedBytes = codec.encodeQuotedPrintable(null, bytes, false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithPositiveByte_ANAq1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] bytes = new byte[]{1};
        byte[] encodedBytes = codec.encodeQuotedPrintable(null, bytes, false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeWithByteArray_fJQs1() throws org.apache.commons.codec.DecoderException {
  QuotedPrintableCodec codec = new QuotedPrintableCodec();
  byte[] input = new byte[]{0x41, 0x42, 0x43};
  Object result = codec.decode(input);
  assertEquals("ABC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeWithString_uhBc2() throws org.apache.commons.codec.DecoderException {
  QuotedPrintableCodec codec = new QuotedPrintableCodec();
  String input = "ABC";
  Object result = codec.decode(input);
  assertEquals(new byte[]{0x41, 0x42, 0x43}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeWithUnsupportedType_YcYh3() throws org.apache.commons.codec.DecoderException {
  QuotedPrintableCodec codec = new QuotedPrintableCodec();
  Object input = new Object();
  try {
    codec.decode(input);
    fail("DecoderException expected");
  } catch (DecoderException e) {
    assertEquals("Objects of type " + input.getClass().getName() + " cannot be quoted-printable decoded", e.getMessage());
  }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithString_FcFz2() throws EncoderException {
	QuotedPrintableCodec qp = new QuotedPrintableCodec();
	String input = "Hello World";
	String expected = "Hello=20World";
	String actual = (String) qp.encode(input);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithStrictCharset_mJWE4() throws EncoderException {
	Charset charset = Charset.forName("UTF-8");
	QuotedPrintableCodec qp = new QuotedPrintableCodec(charset, true);
	String input = "Hello World";
	String expected = "Hello=20World";
	String actual = (String) qp.encode(input);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNonStrictCharset_EAIV5() throws EncoderException {
	Charset charset = Charset.forName("UTF-8");
	QuotedPrintableCodec qp = new QuotedPrintableCodec(charset, false);
	String input = "Hello World";
	String expected = "Hello=20World";
	String actual = (String) qp.encode(input);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithException_GfvY4_1() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[] { 65, 66, 67, 68 };
        DecoderException actual = assertThrows(DecoderException.class, () -> QuotedPrintableCodec.decodeQuotedPrintable(bytes));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeWithStrictCharset_TWgj4_zgVx0() throws org.apache.commons.codec.DecoderException {
  QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
  String input = "ABC";
  Object result = codec.decode(input);
  assertEquals(new byte[]{0x41, 0x42, 0x43}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeWithLenientCharset_vJyx5_njgI0() throws org.apache.commons.codec.DecoderException {
  QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), false);
  String input = "ABC";
  Object result = codec.decode(input);
  assertEquals(new byte[]{0x41, 0x42, 0x43}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintableWithTabAndSpace_Sico2_JqwV0() {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = { 32, 9 };
    byte[] actual = codec.encodeQuotedPrintable(null, bytes, false);
    byte[] expected = { 33, 61, 32, 61, 61, 33, 61, 97, 61, 61 };
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithException_GfvY4() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[] { 65, 66, 67, 68 };
        DecoderException actual = assertThrows(DecoderException.class, () -> QuotedPrintableCodec.decodeQuotedPrintable(bytes));
        assertEquals("Invalid quoted-printable encoding", actual.getMessage());
    }
}