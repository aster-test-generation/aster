/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MurmurHash2_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithLength7_yNfc0() {
    byte[] data = new byte[7];
    int length = 7;
    int seed = 0;
    long expected = 0;
    long actual = MurmurHash2.hash64(data, length, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithLength6_OvAY1() {
    byte[] data = new byte[6];
    int length = 6;
    int seed = 0;
    long expected = 0;
    long actual = MurmurHash2.hash64(data, length, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithLength5_ytzE2() {
    byte[] data = new byte[5];
    int length = 5;
    int seed = 0;
    long expected = 0;
    long actual = MurmurHash2.hash64(data, length, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithLength4_GGjy3() {
    byte[] data = new byte[4];
    int length = 4;
    int seed = 0;
    long expected = 0;
    long actual = MurmurHash2.hash64(data, length, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithLength3_CQIR4() {
    byte[] data = new byte[3];
    int length = 3;
    int seed = 0;
    long expected = 0;
    long actual = MurmurHash2.hash64(data, length, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithLength2_riMy5() {
    byte[] data = new byte[2];
    int length = 2;
    int seed = 0;
    long expected = 0;
    long actual = MurmurHash2.hash64(data, length, seed);
    assertEquals(expected, actual);
}
}