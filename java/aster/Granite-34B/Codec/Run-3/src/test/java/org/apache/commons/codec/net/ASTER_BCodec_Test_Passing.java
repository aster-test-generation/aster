/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import java.nio.charset.Charset;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingWithStrictPolicy_JVuf0() throws Exception {
        BCodec bCodec = new BCodec(Charset.defaultCharset(), CodecPolicy.STRICT);
        assertTrue(bCodec.isStrictDecoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingWithLenientPolicy_YPeG1() throws Exception {
        BCodec bCodec = new BCodec(Charset.defaultCharset(), CodecPolicy.LENIENT);
        assertFalse(bCodec.isStrictDecoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_bytes_null_QPIw0() throws Exception {
        BCodec bCodec = new BCodec();
        byte[] bytes = null;
        byte[] actual = bCodec.doDecoding(bytes);
        byte[] expected = null;
        assert actual == expected;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_bytes_not_null_qvov1() throws Exception {
        BCodec bCodec = new BCodec();
        byte[] bytes = new byte[]{0, 1, 2, 3};
        byte[] actual = bCodec.doDecoding(bytes);
        byte[] expected = new byte[]{0, 1, 2, 3};
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getEncodingTest3_FUjk2() throws Exception {
        BCodec bCodec = new BCodec();
        String encoding = bCodec.getEncoding();
        assert encoding.equals("B");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_Eqvt0() throws Exception {
        BCodec bCodec = new BCodec("UTF-8");
        String result = (String) bCodec.decode("This is a test");
        assertEquals("This is a test", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNull_QFMi1() throws Exception {
        BCodec bCodec = new BCodec("UTF-8");
        String result = (String) bCodec.decode(null);
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidObject_WtCc2_1() throws Exception {
        BCodec bCodec = new BCodec("UTF-8");
        DecoderException exception = assertThrows(DecoderException.class, () -> bCodec.decode(123));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_yFwo0() throws Exception {
        BCodec bCodec = new BCodec("UTF-8");
        String input = "Hello, World!";
        Object expected = "SGVsbG8sIFdvcmxkIQ==";
        Object actual = bCodec.encode(input);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_clBw1() throws Exception {
        BCodec bCodec = new BCodec("UTF-8");
        Object input = null;
        Object expected = null;
        Object actual = bCodec.encode(input);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncode_jUZd0() throws Exception {
        BCodec bCodec = new BCodec(Charset.defaultCharset(), CodecPolicy.STRICT);
        assertEquals("encodedString", bCodec.encode("sourceString"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeWithCharset_uGik1() throws Exception {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"));
        assertEquals("encodedString", bCodec.encode("sourceString"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeWithException_WhWA2_1() throws Exception {
        BCodec bCodec = new BCodec(Charset.defaultCharset(), CodecPolicy.LENIENT);
        Exception exception = assertThrows(EncoderException.class, () -> bCodec.encode("sourceString"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_qzZH0() throws DecoderException {
        BCodec bCodec = new BCodec(Charset.defaultCharset(), CodecPolicy.STRICT);
        String value = "test";
        String result = bCodec.decode(value);
        Assertions.assertEquals("decoded value should match", "decoded value", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_MPwe1() throws DecoderException {
        BCodec bCodec = new BCodec(Charset.defaultCharset());
        String value = "test";
        String result = bCodec.decode(value);
        Assertions.assertEquals("decoded value should match", "decoded value", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetName_bEMO2() throws DecoderException {
        BCodec bCodec = new BCodec("charsetName");
        String value = "test";
        String result = bCodec.decode(value);
        Assertions.assertEquals("decoded value should match", "decoded value", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNoArgs_FJVG3() throws DecoderException {
        BCodec bCodec = new BCodec();
        String value = "test";
        String result = bCodec.decode(value);
        Assertions.assertEquals("decoded value should match", "decoded value", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_MIyj0() throws EncoderException {
        BCodec bCodec = new BCodec("UTF-8");
        String encoded = bCodec.encode("Hello, World!", "UTF-8");
        assertEquals("Hello, World!", encoded);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithDifferentCharset_PaOX1() throws EncoderException {
        BCodec bCodec = new BCodec("UTF-16");
        String encoded = bCodec.encode("Hello, World!", "UTF-16");
        assertEquals("Hello, World!", encoded);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidCharset_aWKT2() throws Exception {
        BCodec bCodec = new BCodec("UTF-32");
        try {
            bCodec.encode("Hello, World!", "UTF-32");
        } catch (EncoderException e) {
            assertEquals("java.nio.charset.UnsupportedCharsetException: UTF-32", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_uVTY0() throws EncoderException {
	BCodec bCodec = new BCodec(Charset.defaultCharset(), CodecPolicy.STRICT);
	String encodedString = bCodec.encode("sourceString", Charset.defaultCharset());
	assertEquals("encodedString", encodedString);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode2_kKOq1() throws EncoderException {
	BCodec bCodec = new BCodec(Charset.defaultCharset());
	String encodedString = bCodec.encode("sourceString", Charset.defaultCharset());
	assertEquals("encodedString", encodedString);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode3_LebM2() throws EncoderException {
	BCodec bCodec = new BCodec("charsetName");
	String encodedString = bCodec.encode("sourceString", Charset.defaultCharset());
	assertEquals("encodedString", encodedString);
}
}