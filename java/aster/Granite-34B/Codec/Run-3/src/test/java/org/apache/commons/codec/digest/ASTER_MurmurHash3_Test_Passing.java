/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import org.apache.commons.codec.binary.StringUtils;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MurmurHash3_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_YuPJ0() throws Exception {
        byte[] data = new byte[0];
        int expected = 0;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_nMQz0_1() throws Exception {
        long hash = MurmurHash3.hash64(0);
        hash = MurmurHash3.hash64(1);
        hash = MurmurHash3.hash64(-1);
        assertEquals(0, hash);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_nMQz0_2() throws Exception {
        long hash = MurmurHash3.hash64(0);
        hash = MurmurHash3.hash64(1);
        hash = MurmurHash3.hash64(-1);
        assertEquals(1, hash);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_nMQz0_3() throws Exception {
        long hash = MurmurHash3.hash64(0);
        hash = MurmurHash3.hash64(1);
        hash = MurmurHash3.hash64(-1);
        assertEquals(-1, hash);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_Tmjb0() throws Exception {
    final String data = "some data";
    final byte[] bytes = StringUtils.getBytesUtf8(data);
    final long[] hash128 = MurmurHash3.hash128(bytes, 0, bytes.length, MurmurHash3.DEFAULT_SEED);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash64_1_GYIK0() throws Exception {
		long data = 1;
		long expected = -8066521488952539991L;
		long actual = MurmurHash3.hash64(data);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithEmptyData_BKyT0() throws Exception {
        byte[] data = {};
        int expected = 0;
        int actual = MurmurHash3.hash32x86(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithNonEmptyData_SsSs1() throws Exception {
        byte[] data = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        int expected = -1076434211;
        int actual = MurmurHash3.hash32x86(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_1_Ysip0() throws Exception {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        int seed = 0;
        long expected = 0;
        long actual = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_2_OsZJ1() throws Exception {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 123;
        long expected = 1234567890;
        long actual = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_wBQk0() throws Exception {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 123;
        int expected = 123456789; // replace with expected value
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_lZCZ0() throws Exception {
        long data1 = 1234567890L;
        long data2 = 987654321L;
        int expected =MurmurHash3.hash32(data1, data2);
        int actual = MurmurHash3.hash32(data1, data2);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32x86_obNO0() throws Exception {
	byte[] data = new byte[10];
	int offset = 0;
	int length = 10;
	int seed = 0;
	int expected = 0;
	int actual = MurmurHash3.hash32x86(data, offset, length, seed);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32x86WithOffsetAndLength_aTxD1() throws Exception {
	byte[] data = new byte[10];
	int offset = 2;
	int length = 8;
	int seed = 0;
	int expected = 0;
	int actual = MurmurHash3.hash32x86(data, offset, length, seed);
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_VecL0_1() throws Exception {
        assertEquals(-7615863508304953276L, MurmurHash3.hash64((short) 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_VecL0_2() throws Exception {
        assertEquals(-833078991290343596L, MurmurHash3.hash64((short) 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_VecL0_3() throws Exception {
        assertEquals(1700137106649322445L, MurmurHash3.hash64((short) 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_VecL0_4() throws Exception {
        assertEquals(1220277840257908480L, MurmurHash3.hash64((short) 3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_VecL0_5() throws Exception {
        assertEquals(-3393224480183707454L, MurmurHash3.hash64((short) 4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_toOY0() throws Exception {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        int offset = 0;
        int length = 10;
        int seed = 123;
        int expected = -1529398345;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_jgXU1() throws Exception {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        int seed = 456;
        int expected = 456;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash128_1_kDxY0() throws Exception {
		byte[] data = new byte[0];
		int offset = 0;
		int length = 0;
		int seed = 0;
		long[] expected = new long[2];
		expected[0] = 0L;
		expected[1] = 0L;
		long[] actual = MurmurHash3.hash128(data, offset, length, seed);
		Assertions.assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash32_1_HSgT0() throws Exception {
		byte[] data = new byte[0];
		int length = 0;
		int expected = 0;
		int actual = MurmurHash3.hash32(data, length);
		assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash32_2_MQZy1() throws Exception {
		byte[] data = new byte[10];
		int length = 10;
		int expected = 12345;
		int actual = MurmurHash3.hash32(data, length);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_TGSh0() throws Exception {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 123;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(2, result.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithOffset_eEDx1() throws Exception {
        byte[] data = new byte[10];
        int offset = 2;
        int length = 8;
        int seed = 456;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(2, result.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithEmptyData_mwef2() throws Exception {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        int seed = 789;
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertEquals(2, result.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash32_BIzz0() throws Exception {
		byte[] data = new byte[0];
		int length = 0;
		int seed = 0;
		int expected = 0;
		int actual = MurmurHash3.hash32(data, length, seed);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash32WithLength_dEHu1() throws Exception {
		byte[] data = new byte[10];
		int length = 10;
		int seed = 0;
		int expected = -102801527;
		int actual = MurmurHash3.hash32(data, length, seed);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash32WithSeed_IkXV2() throws Exception {
		byte[] data = new byte[0];
		int length = 0;
		int seed = 10;
		int expected = 1522570985;
		int actual = MurmurHash3.hash32(data, length, seed);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash32WithAllParameters_bEdl3() throws Exception {
		byte[] data = new byte[10];
		int length = 10;
		int seed = 10;
		int expected = 1341400540;
		int actual = MurmurHash3.hash32(data, length, seed);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Oszw0() throws Exception {
        String data = "test";
        final byte[] bytes = StringUtils.getBytesUtf8(data);
        int actual = MurmurHash3.hash32(bytes, 0, bytes.length, MurmurHash3.DEFAULT_SEED);
        int expected = -1003808687;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_NdCe1() throws Exception {
        String data = "";
        final byte[] bytes = StringUtils.getBytesUtf8(data);
        int actual = MurmurHash3.hash32(bytes, 0, bytes.length, MurmurHash3.DEFAULT_SEED);
        int expected = 0;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_peNa2() throws Exception {
        String data = null;
        final byte[] bytes = StringUtils.getBytesUtf8(data);
        int actual = MurmurHash3.hash32(bytes, 0, bytes.length, MurmurHash3.DEFAULT_SEED);
        int expected = 0;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash128_CKeb0_1() throws Exception {
		byte[] data = new byte[0];
		long[] expected = new long[2];
		expected[0] = 0x23955DDE94F9C804L;
		expected[1] = 0x9C06A5503B61E3BCL;
		long[] actual = MurmurHash3.hash128(data);
		assertEquals(expected[0], actual[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash128_CKeb0_2() throws Exception {
		byte[] data = new byte[0];
		long[] expected = new long[2];
		expected[0] = 0x23955DDE94F9C804L;
		expected[1] = 0x9C06A5503B61E3BCL;
		long[] actual = MurmurHash3.hash128(data);
		assertEquals(expected[1], actual[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash1281_mRrT1_1() throws Exception {
		byte[] data = new byte[1000];
		long[] expected = new long[2];
		expected[0] = 0x50F2B82F0D02A16CL;
		expected[1] = 0x7D893B0A2B2F065CL;
		long[] actual = MurmurHash3.hash128(data);
		assertEquals(expected[0], actual[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash1281_mRrT1_2() throws Exception {
		byte[] data = new byte[1000];
		long[] expected = new long[2];
		expected[0] = 0x50F2B82F0D02A16CL;
		expected[1] = 0x7D893B0A2B2F065CL;
		long[] actual = MurmurHash3.hash128(data);
		assertEquals(expected[1], actual[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithEmptyByteArray_EGIR0() throws Exception {
        byte[] data = {};
        long expected = 0x2398761c9c18d6a9L;
        long actual = MurmurHash3.hash64(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithNonEmptyByteArray_tRUG1() throws Exception {
        byte[] data = {0x01, 0x02, 0x03};
        long expected = 0x66a4a8e1c396a627L;
        long actual = MurmurHash3.hash64(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithByteArrayOffsetAndLength_MrdR3() throws Exception {
        byte[] data = {0x01, 0x02, 0x03, 0x04, 0x05};
        int offset = 1;
        int length = 3;
        long expected = 0x66a4a8e1c396a627L;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithByteArrayOffsetLengthAndSeed_heJs4() throws Exception {
        byte[] data = {0x01, 0x02, 0x03, 0x04, 0x05};
        int offset = 1;
        int length = 3;
        int seed = 0x12345678;
        long expected = 0x55c30a0776405917L;
        long actual = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_1_GtMv0() throws Exception {
    final byte[] data = new byte[0];
    final int offset = 0;
    final int length = 0;
    final long expected = 0x0L;
    long actual = MurmurHash3.hash64(data, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_2_epke1() throws Exception {
    final byte[] data = new byte[100];
    final int offset = 0;
    final int length = 100;
    final long expected = 0x396D01534A0B4872L;
    long actual = MurmurHash3.hash64(data, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_3_HpYe2() throws Exception {
    final byte[] data = new byte[1000];
    final int offset = 0;
    final int length = 1000;
    final long expected = 0x32D7E1F9C720B89CL;
    long actual = MurmurHash3.hash64(data, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_4_bLMM3() throws Exception {
    final byte[] data = new byte[10000];
    final int offset = 0;
    final int length = 10000;
    final long expected = 0x913D03A336C73B1FL;
    long actual = MurmurHash3.hash64(data, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_5_ABBu4() throws Exception {
    final byte[] data = new byte[100000];
    final int offset = 0;
    final int length = 100000;
    final long expected = 0x1B28E6D22B00A019L;
    long actual = MurmurHash3.hash64(data, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_6_Ufkj5() throws Exception {
    final byte[] data = new byte[1000000];
    final int offset = 0;
    final int length = 1000000;
    final long expected = 0x6A88E0C95A6805B6L;
    long actual = MurmurHash3.hash64(data, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_7_lXOA6() throws Exception {
    final byte[] data = new byte[10000000];
    final int offset = 0;
    final int length = 10000000;
    final long expected = 0x814E672394E88322L;
    long actual = MurmurHash3.hash64(data, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash32_0_WuKP0() throws Exception {
		int seed = 0;
		long data1 = 0L;
		long data2 = 0L;
		int expected = 0;
		int actual = MurmurHash3.hash32(data1, data2, seed);
		assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash32_1_POAH1() throws Exception {
		int seed = 1;
		long data1 = 1L;
		long data2 = 1L;
		int expected = -1092616150;
		int actual = MurmurHash3.hash32(data1, data2, seed);
		assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash32_2_rOhH2() throws Exception {
		int seed = 2;
		long data1 = 2L;
		long data2 = 2L;
		int expected = -113570195;
		int actual = MurmurHash3.hash32(data1, data2, seed);
		assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash32_3_jerP3() throws Exception {
		int seed = 3;
		long data1 = 3L;
		long data2 = 3L;
		int expected = 1276567071;
		int actual = MurmurHash3.hash32(data1, data2, seed);
		assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash32_4_VPPs4() throws Exception {
		int seed = 4;
		long data1 = 4L;
		long data2 = 4L;
		int expected = 1994248900;
		int actual = MurmurHash3.hash32(data1, data2, seed);
		assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash32_5_pKFe5() throws Exception {
		int seed = 5;
		long data1 = 5L;
		long data2 = 5L;
		int expected = -1345130316;
		int actual = MurmurHash3.hash32(data1, data2, seed);
		assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash32_6_GEHK6() throws Exception {
		int seed = 6;
		long data1 = 6L;
		long data2 = 6L;
		int expected = 1068368939;
		int actual = MurmurHash3.hash32(data1, data2, seed);
		assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash32_7_jfzA7() throws Exception {
		int seed = 7;
		long data1 = 7L;
		long data2 = 7L;
		int expected = -1342428354;
		int actual = MurmurHash3.hash32(data1, data2, seed);
		assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHash32_8_SGpE8() throws Exception {
		int seed = 8;
		long data1 = 8L;
		long data2 = 8L;
		int expected = 2037334709;
		int actual = MurmurHash3.hash32(data1, data2, seed);
		assertEquals(expected, actual);
	}
}