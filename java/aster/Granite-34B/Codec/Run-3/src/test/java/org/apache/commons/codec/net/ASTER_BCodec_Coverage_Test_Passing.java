/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.apache.commons.codec.binary.Base64;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BCodec_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testDecode_Catch1_OjKh0() throws org.apache.commons.codec.DecoderException {
		BCodec bCodec = new BCodec();
		try {
			bCodec.decode("value");
		} catch (final DecoderException e) {
			assertEquals("e.getMessage()", "e.getMessage()", e.getMessage());
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoEncodingWithNullInput_pSGB0() {
    BCodec bCodec = new BCodec();
    byte[] bytes = null;
    byte[] actual = bCodec.doEncoding(bytes);
    byte[] expected = null;
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoEncodingWithValidInput_WdXA1() {
    BCodec bCodec = new BCodec();
    byte[] bytes = new byte[]{0, 1, 2, 3};
    byte[] actual = bCodec.doEncoding(bytes);
    byte[] expected = Base64.encodeBase64(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeWithNull_sJeS0() throws org.apache.commons.codec.DecoderException {
    BCodec bCodec = new BCodec();
    Object value = null;
    Object expected = null;
    Object actual = bCodec.decode(value);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeWithNonString_sBtv2() throws org.apache.commons.codec.DecoderException {
    BCodec bCodec = new BCodec();
    Object value = 100;
    try {
        bCodec.decode(value);
        fail("DecoderException expected");
    } catch (DecoderException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeWithInvalidString_FooT3() throws org.apache.commons.codec.DecoderException {
    BCodec bCodec = new BCodec();
    Object value = "invalid";
    try {
        bCodec.decode(value);
        fail("DecoderException expected");
    } catch (DecoderException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNull_klDL0() throws org.apache.commons.codec.EncoderException {
	BCodec bCodec = new BCodec();
	Object value = null;
	try {
		bCodec.encode(value);
	} catch (EncoderException e) {
		assertEquals("Objects of type null cannot be encoded using BCodec", e.getMessage());
	}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNonStringObject_EfcA2() throws org.apache.commons.codec.EncoderException {
	BCodec bCodec = new BCodec();
	Object value = new Object();
	try {
		bCodec.encode(value);
	} catch (EncoderException e) {
		assertEquals("Objects of type java.lang.Object cannot be encoded using BCodec", e.getMessage());
	}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testDecode_Catch2_gIYs1_GoWO0() throws org.apache.commons.codec.DecoderException {
		BCodec bCodec = new BCodec();
		try {
			bCodec.decode("value");
		} catch (final DecoderException e) {
			assertNotNull(e);
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNonStringAndNonObject_ZExv3_fid2() throws org.apache.commons.codec.EncoderException {
	BCodec bCodec = new BCodec();
	int value = 10;
	try {
		bCodec.encode(value);
	} catch (EncoderException e) {
		assertEquals("Objects of type java.lang.Integer cannot be encoded using BCodec", e.getMessage());
	}
}
}