/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Ymrc0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "source";
        String expected = qCodec.encode(sourceStr);
        assertEquals(expected, qCodec.encode(sourceStr));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_pxIz0() throws Exception {
        QCodec qCodec = new QCodec();
        assertEquals("Q", qCodec.getEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharset_SgpM1() throws Exception {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        assertEquals("Q", qCodec.getEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharsetName_rniK2() throws Exception {
        QCodec qCodec = new QCodec("UTF-8");
        assertEquals("Q", qCodec.getEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks_upLJ0_1() throws Exception {
        QCodec qCodec1 = new QCodec(Charset.defaultCharset());
        QCodec qCodec2 = new QCodec("UTF-8");
        QCodec qCodec3 = new QCodec();
        assertTrue(qCodec1.isEncodeBlanks());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks_upLJ0_2() throws Exception {
        QCodec qCodec1 = new QCodec(Charset.defaultCharset());
        QCodec qCodec2 = new QCodec("UTF-8");
        QCodec qCodec3 = new QCodec();
        assertTrue(qCodec2.isEncodeBlanks());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks_upLJ0_3() throws Exception {
        QCodec qCodec1 = new QCodec(Charset.defaultCharset());
        QCodec qCodec2 = new QCodec("UTF-8");
        QCodec qCodec3 = new QCodec();
        assertTrue(qCodec3.isEncodeBlanks());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_wyYc0() throws Exception {
        QCodec qCodec = new QCodec();
        Object result = qCodec.decode(null);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStringInput_Ojrd1() throws Exception {
        QCodec qCodec = new QCodec();
        Object result = qCodec.decode("Hello World");
        assertEquals("Hello World", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanks_Nxlb0() throws Exception {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanks2_CIsJ1() throws Exception {
        QCodec qCodec = new QCodec("charsetName");
        qCodec.setEncodeBlanks(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanks3_MvnV2() throws Exception {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        qCodec.setEncodeBlanks(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_XEXc0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String input = "Hello, World!";
        String expected = "Hello, World!";
        assertEquals(expected, qCodec.encode(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_CqPD1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String input = null;
        String expected = null;
        assertEquals(expected, qCodec.encode(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_lWqn0() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String encodedText = qCodec.encode("Hello, World!", "UTF-8");
        assertEquals("Hello, World!", encodedText);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedCharset_yuJI1() throws Exception {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            qCodec.encode("Hello, World!", "ISO-8859-1");
        } catch (EncoderException e) {
            assertEquals("Charset ISO-8859-1 is not supported", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_jLnz0() throws DecoderException {
    QCodec qCodec = new QCodec();
    String str = "Hello World";
    String result = qCodec.decode(str);
    assertEquals("Hello World", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeWithCharset_dUXO1() throws DecoderException {
    QCodec qCodec = new QCodec(Charset.defaultCharset());
    String str = "Hello World";
    String result = qCodec.decode(str);
    assertEquals("Hello World", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeWithCharsetName_WRmT2() throws DecoderException {
    QCodec qCodec = new QCodec("UTF-8");
    String str = "Hello World";
    String result = qCodec.decode(str);
    assertEquals("Hello World", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeWithInvalidInput_vpiy3() throws Exception {
    QCodec qCodec = new QCodec();
    String str = "Invalid Input";
    try {
        qCodec.decode(str);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
        assertEquals("java.io.UnsupportedEncodingException: " +
                "QCodec can only be used with the US-ASCII, UTF-8 and ISO-8859-1 charsets", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEncode_CnIS0() throws EncoderException {
		QCodec qCodec = new QCodec();
		String sourceStr = "Hello, World!";
		Charset sourceCharset = Charset.forName("UTF-8");
		String encodedText = qCodec.encode(sourceStr, sourceCharset);
		assertEquals("Hello, World!", encodedText);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEncodeWithCustomCharset_XVlF1() throws EncoderException {
		QCodec qCodec = new QCodec("ISO-8859-1");
		String sourceStr = "Hello, World!";
		Charset sourceCharset = Charset.forName("ISO-8859-1");
		String encodedText = qCodec.encode(sourceStr, sourceCharset);
		assertEquals("Hello, World!", encodedText);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEncodeWithNoCharset_KUTX2() throws EncoderException {
		QCodec qCodec = new QCodec();
		String sourceStr = "Hello, World!";
		Charset sourceCharset = null;
		String encodedText = qCodec.encode(sourceStr, sourceCharset);
		assertEquals("Hello, World!", encodedText);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoEncodingNull_ySDl0() throws Exception {
    final QCodec qcodec = new QCodec();
    final byte[] bytes = null;
    final byte[] result = qcodec.doEncoding(bytes);
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoEncodingEmpty_zzgf1() throws Exception {
    final QCodec qcodec = new QCodec();
    final byte[] bytes = new byte[0];
    final byte[] result = qcodec.doEncoding(bytes);
    Assertions.assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoEncodingText_pzHA2() throws Exception {
    final QCodec qcodec = new QCodec();
    final byte[] bytes = "text".getBytes(StandardCharsets.UTF_8);
    final byte[] result = qcodec.doEncoding(bytes);
    Assertions.assertArrayEquals("text".getBytes(StandardCharsets.UTF_8), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoEncodingNonText_wdiz3() throws Exception {
    final QCodec qcodec = new QCodec();
    final byte[] bytes = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 127 };
    final byte[] result = qcodec.doEncoding(bytes);
    Assertions.assertArrayEquals("=00=01=02=03=04=05=06=07=08=09=0A=0B=0C=0D=0E=0F=10=11=12=13=14=15=16=17=18=19=1A=1B=1C=1D=1E=1F=7F".getBytes(StandardCharsets.US_ASCII), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoEncodingEncodeBlanks_uApb4() throws Exception {
    final QCodec qcodec = new QCodec();
    qcodec.setEncodeBlanks(true);
    final byte[] bytes = "text with spaces".getBytes(StandardCharsets.UTF_8);
    final byte[] result = qcodec.doEncoding(bytes);
    Assertions.assertArrayEquals("text_with_spaces".getBytes(StandardCharsets.UTF_8), result);
}
}