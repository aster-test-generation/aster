/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XXHash32_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_MKkX0() throws Exception {
        XXHash32 xxHash32 = new XXHash32(0);
        byte[] oneByte = new byte[1];
        xxHash32.update(0);
        xxHash32.update(oneByte, 0, 0);
        xxHash32.update(oneByte, 0, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate_1_hBmb0() throws Exception {
    XXHash32 xXHash32 = new XXHash32(0);
    byte[] b = new byte[0];
    int off = 0;
    int len = 9;
    xXHash32.update(b, off, len);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate_2_vTjq1() throws Exception {
    XXHash32 xXHash32 = new XXHash32();
    byte[] b = new byte[0];
    int off = 0;
    int len = 9;
    xXHash32.update(b, off, len);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate_3_geZZ2() throws Exception {
    XXHash32 xXHash32 = new XXHash32(0);
    byte[] b = new byte[0];
    int off = 0;
    int len = 1;
    xXHash32.update(b, off, len);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate_4_PsGP3() throws Exception {
    XXHash32 xXHash32 = new XXHash32();
    byte[] b = new byte[0];
    int off = 0;
    int len = 1;
    xXHash32.update(b, off, len);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate_5_MMmI4() throws Exception {
    XXHash32 xXHash32 = new XXHash32(0);
    byte[] b = new byte[0];
    int off = 0;
    int len = 0;
    xXHash32.update(b, off, len);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithEmptyBuffer_iSRm0() throws Exception {
        XXHash32 hash = new XXHash32(0);
        byte[] buffer = new byte[0];
        hash.update(buffer, 0, 0);
        assertEquals(0, hash.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithNonEmptyBuffer_grsO1() throws Exception {
        XXHash32 hash = new XXHash32(0);
        byte[] buffer = new byte[] {0, 1, 2, 3};
        hash.update(buffer, 1, 2);
        assertEquals(0x50f9e35f, hash.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithMultipleBuffers_xLBr2() throws Exception {
        XXHash32 hash = new XXHash32(0);
        byte[] buffer1 = new byte[] {0, 1, 2, 3};
        byte[] buffer2 = new byte[] {4, 5, 6, 7};
        hash.update(buffer1, 1, 1);
        hash.update(buffer2, 0, 4);
        assertEquals(0x9d277a1a, hash.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithNegativeOffset_ioMA4() throws Exception {
        XXHash32 hash = new XXHash32(0);
        byte[] buffer = new byte[] {0, 1, 2, 3};
        hash.update(buffer, -1, 1);
        assertEquals(0, hash.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithNegativeLength_XUzo5() throws Exception {
        XXHash32 hash = new XXHash32(0);
        byte[] buffer = new byte[] {0, 1, 2, 3};
        hash.update(buffer, 0, -1);
        assertEquals(0, hash.getValue());
    }
}