/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Rule_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getInstanceMap_withValidInput_returnsNonEmptyMap_alwo0_1() throws Exception {
        Map<String, List<Rule>> result = Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.APPROX, "en");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getInstanceMap_withValidInput_returnsNonEmptyMap_alwo0_2() throws Exception {
        Map<String, List<Rule>> result = Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.APPROX, "en");
        assertFalse(result.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getInstanceMap_withInvalidInput_throwsIllegalArgumentException_KfPQ1() throws Exception {
        try {
            Rule.getInstanceMap(null, RuleType.APPROX, "en");
            fail("Expected IllegalArgumentException not thrown");
        } catch (IllegalArgumentException e) {
            assertEquals("No rules found for null, APPROX, en.", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_vsMg3() throws Exception {
	List<Rule> actual = Rule.getInstance(null, null, Languages.LanguageSet.from(new HashSet<String>(Arrays.asList("x"))));
	List<Rule> expected = new ArrayList<>();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_qFiY5() throws Exception {
	List<Rule> actual = Rule.getInstance(NameType.ASHKENAZI, null, Languages.LanguageSet.from(new HashSet<String>(Arrays.asList("x"))));
	List<Rule> expected = new ArrayList<>();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_ehDH6() throws Exception {
	List<Rule> actual = Rule.getInstance(null, RuleType.APPROX, Languages.LanguageSet.from(new HashSet<String>(Arrays.asList("x"))));
	List<Rule> expected = new ArrayList<>();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_bdrl7() throws Exception {
	List<Rule> actual = Rule.getInstance(NameType.ASHKENAZI, RuleType.APPROX, Languages.LanguageSet.from(new HashSet<String>(Arrays.asList("x"))));
	List<Rule> expected = new ArrayList<>();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_hZzS8() throws Exception {
	List<Rule> actual = Rule.getInstance(NameType.ASHKENAZI, RuleType.EXACT, Languages.LanguageSet.from(new HashSet<String>(Arrays.asList("x"))));
	List<Rule> expected = new ArrayList<>();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstance_hKdK9() throws Exception {
	List<Rule> actual = Rule.getInstance(NameType.GENERIC, RuleType.EXACT, Languages.LanguageSet.from(new HashSet<String>(Arrays.asList("x"))));
	List<Rule> expected = new ArrayList<>();
	assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_0_mcVK0() throws Exception {
    Languages.LanguageSet languageSet0 = Languages.LanguageSet.from((Set<String>) null);
    Map<String, List<Rule>> actual = Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.APPROX, languageSet0);
    Map<String, List<Rule>> expected = new HashMap<String, List<Rule>>();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_1_lfVe1() throws Exception {
    Languages.LanguageSet languageSet0 = Languages.LanguageSet.from((Set<String>) null);
    Map<String, List<Rule>> actual = Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.EXACT, languageSet0);
    Map<String, List<Rule>> expected = new HashMap<String, List<Rule>>();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_2_uMCf2() throws Exception {
    Languages.LanguageSet languageSet0 = Languages.LanguageSet.from((Set<String>) null);
    Map<String, List<Rule>> actual = Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.RULES, languageSet0);
    Map<String, List<Rule>> expected = new HashMap<String, List<Rule>>();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_3_UOkB3() throws Exception {
    Languages.LanguageSet languageSet0 = Languages.LanguageSet.from((Set<String>) null);
    Map<String, List<Rule>> actual = Rule.getInstanceMap(NameType.GENERIC, RuleType.APPROX, languageSet0);
    Map<String, List<Rule>> expected = new HashMap<String, List<Rule>>();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_4_QLfk4() throws Exception {
    Languages.LanguageSet languageSet0 = Languages.LanguageSet.from((Set<String>) null);
    Map<String, List<Rule>> actual = Rule.getInstanceMap(NameType.GENERIC, RuleType.EXACT, languageSet0);
    Map<String, List<Rule>> expected = new HashMap<String, List<Rule>>();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_5_yVih5() throws Exception {
    Languages.LanguageSet languageSet0 = Languages.LanguageSet.from((Set<String>) null);
    Map<String, List<Rule>> actual = Rule.getInstanceMap(NameType.GENERIC, RuleType.RULES, languageSet0);
    Map<String, List<Rule>> expected = new HashMap<String, List<Rule>>();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_6_HRxH6() throws Exception {
    Languages.LanguageSet languageSet0 = Languages.LanguageSet.from((Set<String>) null);
    Map<String, List<Rule>> actual = Rule.getInstanceMap(NameType.SEPHARDIC, RuleType.APPROX, languageSet0);
    Map<String, List<Rule>> expected = new HashMap<String, List<Rule>>();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_7_Vomh7() throws Exception {
    Languages.LanguageSet languageSet0 = Languages.LanguageSet.from((Set<String>) null);
    Map<String, List<Rule>> actual = Rule.getInstanceMap(NameType.SEPHARDIC, RuleType.EXACT, languageSet0);
    Map<String, List<Rule>> expected = new HashMap<String, List<Rule>>();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_8_kDkC8() throws Exception {
    Languages.LanguageSet languageSet0 = Languages.LanguageSet.from((Set<String>) null);
    Map<String, List<Rule>> actual = Rule.getInstanceMap(NameType.SEPHARDIC, RuleType.RULES, languageSet0);
    Map<String, List<Rule>> expected = new HashMap<String, List<Rule>>();
    assertEquals(expected, actual);
}
}