/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Caverphone_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Mulx0() throws Exception {
        Caverphone caverphone = new Caverphone();
        String actual = caverphone.encode("test");
        assertEquals("T53ST", actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_UOQd1() throws Exception {
        Caverphone caverphone = new Caverphone();
        String actual = caverphone.encode(null);
        assertEquals(null, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmpty_qgNo2() throws Exception {
        Caverphone caverphone = new Caverphone();
        String actual = caverphone.encode("");
        assertEquals("", actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void encode_WhenInputIsString_ThenReturnExpectedOutput_sQcj0() throws Exception {
        Caverphone caverphone = new Caverphone();
        String input = "input";
        String expectedOutput = "expectedOutput";
        String actualOutput = (String) caverphone.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void encode_WhenInputIsNotString_ThenThrowEncoderException_iOma1_1() throws Exception {
        Caverphone caverphone = new Caverphone();
        Object input = new Object();
        EncoderException exception = assertThrows(EncoderException.class, () -> caverphone.encode(input));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_bGoB0() throws Exception {
        Caverphone caverphone = new Caverphone();
        String str1 = "string1";
        String str2 = "string2";
        boolean expected = true;
        boolean actual = caverphone.isCaverphoneEqual(str1, str2);
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_HSzx1() throws Exception {
        Caverphone caverphone = new Caverphone();
        String str1 = "string1";
        String str2 = "string1";
        boolean expected = true;
        boolean actual = caverphone.isCaverphoneEqual(str1, str2);
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_bbUV2() throws Exception {
        Caverphone caverphone = new Caverphone();
        String str1 = "string1";
        String str2 = "string3";
        boolean expected = false;
        boolean actual = caverphone.isCaverphoneEqual(str1, str2);
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_tuoD3() throws Exception {
        Caverphone caverphone = new Caverphone();
        String str1 = "string1";
        String str2 = "string2";
        boolean expected = true;
        boolean actual = caverphone.isCaverphoneEqual(str2, str1);
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_KlHi4() throws Exception {
        Caverphone caverphone = new Caverphone();
        String str1 = "string1";
        String str2 = "string3";
        boolean expected = false;
        boolean actual = caverphone.isCaverphoneEqual(str2, str1);
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_eFRt5() throws Exception {
        Caverphone caverphone = new Caverphone();
        String str1 = "string1";
        String str2 = "string1";
        boolean expected = true;
        boolean actual = caverphone.isCaverphoneEqual(str2, str1);
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_JfzK6() throws Exception {
        Caverphone caverphone = new Caverphone();
        String str1 = "string1";
        String str2 = "string2";
        boolean expected = true;
        boolean actual = caverphone.isCaverphoneEqual(str1, str1);
        assert actual == expected;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_BtPL7() throws Exception {
        Caverphone caverphone = new Caverphone();
        String str1 = "string1";
        String str2 = "string3";
        boolean expected = false;
        boolean actual = caverphone.isCaverphoneEqual(str1, str1);
        assert actual == expected;
    }
}