/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MatchRatingApproachEncoder_Test_Passing {
    private static final String[] DOUBLE_CONSONANT = {"LL", "MM", "RR", "SS", "TT"};
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanName_wIKw0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String cleanName = encoder.cleanName("Jos");
        assertEquals("JOSE", cleanName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanNameWithSpecialCharacters_gfbI1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String cleanName = encoder.cleanName("Jos-Jos");
        assertEquals("JOSEJOSE", cleanName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowels_TRXm0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John";
        String expected = "John";
        String actual = encoder.removeVowels(name);
        Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowels_with_vowels_yugL1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Johnny";
        String expected = "Jhnny";
        String actual = encoder.removeVowels(name);
        Assertions.assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFirst3Last3_whenNameLengthIsMoreThan6_thenFirst3AndLast3AreConcatenated_txgB0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String actual = encoder.getFirst3Last3("JohnDoe");
        Assertions.assertEquals("JohDoe", actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFirst3Last3_whenNameLengthIsLessThan6_thenNameIsReturnedAsItIs_gcbV1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String actual = encoder.getFirst3Last3("Jane");
        Assertions.assertEquals("Jane", actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidInput_HEMj0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "hello";
        Object expected = encoder.encode(input);
        assertEquals(expected, encoder.encode(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidInput_elmA1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        Object input = 123;
        try {
            encoder.encode(input);
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to Match Rating Approach encoder is not of type java.lang.String", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants_AqCF0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John";
        String expected = "JHN";
        String actual = encoder.removeDoubleConsonants(name);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonantsWithNoDoubleConsonants_yMDG1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Johnny";
        String expected = "JHNNY";
        String actual = encoder.removeDoubleConsonants(name);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonantsWithNullName_yGeJ2() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = null;
        String expected = null;
        String actual = encoder.removeDoubleConsonants(name);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_withNullInput_returnsNull_pyvf0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeAccents(null);
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_withNoAccents_returnsInput_cdck1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "hello world";
        String result = encoder.removeAccents(input);
        assertEquals(input, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_withAccents_returnsExpectedOutput_XHkK2() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "hll wrld";
        String expected = "hello world";
        String result = encoder.removeAccents(input);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_withEmptyInput_returnsEmptyOutput_eCHA3() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "";
        String expected = "";
        String result = encoder.removeAccents(input);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMinRatingForSumLength4_HRIj0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int actual = encoder.getMinRating(4);
        assertEquals(5, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMinRatingForSumLength7_LvMk1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int actual = encoder.getMinRating(7);
        assertEquals(4, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMinRatingForSumLength11_PhhL2() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int actual = encoder.getMinRating(11);
        assertEquals(3, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMinRatingForSumLength12_gXja3() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int actual = encoder.getMinRating(12);
        assertEquals(2, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMinRatingForSumLengthMoreThan12_eMef4() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int actual = encoder.getMinRating(13);
        assertEquals(1, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowelWhenLetterIsE_PIor0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("E");
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowelWhenLetterIsA_GNdQ1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("A");
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowelWhenLetterIsO_hboo2() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("O");
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowelWhenLetterIsI_nyXY3() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("I");
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowelWhenLetterIsU_BEfZ4() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("U");
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowelWhenLetterIsZ_Nnct5() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("Z");
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowelWhenLetterIsEmpty_RfOS6() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isVowel("");
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullName_mrDy0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encodedName = encoder.encode(null);
        assertEquals("", encodedName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyName_aBjM1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encodedName = encoder.encode("");
        assertEquals("", encodedName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSingleLetterName_hQBr2() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encodedName = encoder.encode("A");
        assertEquals("", encodedName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCleanedName_QwXd3() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encodedName = encoder.encode("John");
        assertEquals("Jhn", encodedName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_BothNamesNull_yryh0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals(null, null);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_Name1Null_XvGw1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals(null, "name2");
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_Name2Null_zkkl2() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("name1", null);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_BothNamesEmpty_wtch3() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("", "");
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_Name1Empty_nIzM4() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("", "name2");
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_Name2Empty_RbyJ5() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("name1", "");
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_Name1Length1_UXTX9() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("a", "name2");
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_Name2Length1_NrKc10() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("name1", "a");
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_BothNamesEqual_FcCk11() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("name1", "name1");
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void test1_jXyX0() throws Exception {
		MatchRatingApproachEncoder mrae = new MatchRatingApproachEncoder();
		assertEquals(0, mrae.leftToRightThenRightToLeftProcessing("ABCDE", "ABCDE"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void test2_BdoY1() throws Exception {
		MatchRatingApproachEncoder mrae = new MatchRatingApproachEncoder();
		assertEquals(1, mrae.leftToRightThenRightToLeftProcessing("ABCDE", "ABCDF"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void test3_KfXu2() throws Exception {
		MatchRatingApproachEncoder mrae = new MatchRatingApproachEncoder();
		assertEquals(2, mrae.leftToRightThenRightToLeftProcessing("ABCDE", "ABCD"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void test4_yTOf3() throws Exception {
		MatchRatingApproachEncoder mrae = new MatchRatingApproachEncoder();
		assertEquals(3, mrae.leftToRightThenRightToLeftProcessing("ABCDE", "AB"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void test5_ucbd4() throws Exception {
		MatchRatingApproachEncoder mrae = new MatchRatingApproachEncoder();
		assertEquals(4, mrae.leftToRightThenRightToLeftProcessing("ABCDE", "A"));
	}
}