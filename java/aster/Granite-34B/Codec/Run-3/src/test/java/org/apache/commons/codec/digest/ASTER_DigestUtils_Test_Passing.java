/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DigestUtils_Test_Passing {
	{
	}
private static MessageDigest getMd5Digest() throws NoSuchAlgorithmException {
    return MessageDigest.getInstance("MD5");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha_ndoJ0() throws Exception {
    byte[] result = DigestUtils.sha("data");
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha_Empty_GQII2() throws Exception {
    byte[] result = DigestUtils.sha("");
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha256Hex_EYTe0_1() throws Exception {
		byte[] data = {};
		data = "test".getBytes();
		assertEquals("", DigestUtils.sha256Hex(data));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha256Hex_EYTe0_2() throws Exception {
		byte[] data = {};
		data = "test".getBytes();
		assertEquals("9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08", DigestUtils.sha256Hex(data));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testDigestAsHex_EZOc0() throws Exception {
		DigestUtils digestUtils = new DigestUtils("SHA-256");
		String data = "test";
		String result = digestUtils.digestAsHex(data);
		assertEquals("9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08", result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDigestTest_QOLd0() throws Exception {
    MessageDigest messageDigest = DigestUtils.getDigest("SHA-256");
    assertNotNull(messageDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMessageDigestTest_NFcQ0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assertEquals(messageDigest, digestUtils.getMessageDigest());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_256_frmP0() throws Exception {
    byte[] expected = new byte[32];
    byte[] actual = DigestUtils.sha3_256("input");
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSha3_512Digest_Nyyr0() throws Exception {
        MessageDigest digest =DigestUtils.getSha3_512Digest();
        assertEquals("SHA-384", digest.getAlgorithm());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetShaDigest_TdeP0() throws Exception {
		MessageDigest digest =DigestUtils.getShaDigest();
		assertNotNull(digest);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_LluW0() throws Exception {
        byte[] expected = new byte[]{};
        byte[] actual = DigestUtils.sha3_224("data");
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_Htya0_1() throws Exception {
        assertEquals("da39a3ee5e6b4b0d3255bfef95601890afd80709", DigestUtils.sha1Hex(""));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_Htya0_2() throws Exception {
        assertEquals("86f7e437faa5a7fce15d1ddcb9eaeaea377667b8", DigestUtils.sha1Hex("hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateDigest_Xohv0() throws Exception {
    MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
    String valueToDigest = "test";
    MessageDigest result = DigestUtils.updateDigest(messageDigest, valueToDigest);
    assertEquals(messageDigest, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateDigestWithNullMessageDigest_LEFc1() throws Exception {
    MessageDigest messageDigest = null;
    String valueToDigest = "test";
    MessageDigest result = DigestUtils.updateDigest(messageDigest, valueToDigest);
    assertEquals(messageDigest, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateDigestWithNullString_LYXf2() throws Exception {
    MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
    String valueToDigest = null;
    MessageDigest result = DigestUtils.updateDigest(messageDigest, valueToDigest);
    assertEquals(messageDigest, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_CEby0() throws Exception {
        byte[] data = new byte[]{1, 2, 3};
        String expected = "expected"; // Replace with the expected value
        String actual =DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256_kDxy0() throws Exception {
    byte[] data = new byte[0];
    byte[] result = DigestUtils.sha256(data);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256WithEmptyArray_TEmv1() throws Exception {
    byte[] data = new byte[0];
    byte[] result = DigestUtils.sha256(data);
    assertNotEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256WithSmallArray_UmDX2() throws Exception {
    byte[] data = new byte[] { 0x01 };
    byte[] result = DigestUtils.sha256(data);
    assertNotEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256WithLargeArray_GvAb3() throws Exception {
    byte[] data = new byte[1024];
    byte[] result = DigestUtils.sha256(data);
    assertNotEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256WithNullArray_ZneW4() throws Exception {
    byte[] data = null;
    byte[] result = DigestUtils.sha256(data);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestString_sDqL1() throws Exception {
    DigestUtils digestUtils = new DigestUtils("SHA-256");
    String data = "Hello, World!";
    byte[] result = digestUtils.digest(data);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestFile_rTFn2() throws IOException {
    DigestUtils digestUtils = new DigestUtils("SHA-256");
    File file = new File("test.txt");
    byte[] result = digestUtils.digest(file);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestInputStream_AMly3() throws IOException {
    DigestUtils digestUtils = new DigestUtils("SHA-256");
    InputStream stream = new FileInputStream("test.txt");
    byte[] result = digestUtils.digest(stream);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMethod1_DRIm0() throws Exception {
    MessageDigest messageDigest = DigestUtils.getDigest(MessageDigestAlgorithms.MD2);
    assertNotNull(messageDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384WithString_rITW2() throws IOException {
        byte[] expected = {
        };
        byte[] actual = DigestUtils.sha384("input");
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3_512Hex_jsJT0_1() throws Exception {
		assertEquals("a69f73cc0286b7ee4e61464f7b13320ea73e4d19f6f2d1c9a6a911140b69a261",DigestUtils.sha3_512Hex("abc".getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3_512Hex_jsJT0_2() throws Exception {
		assertEquals("a69f73cc0286b7ee4e61464f7b13320ea73e4d19f6f2d1c9a6a911140b69a261",DigestUtils.sha3_512Hex("message digest".getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3_512Hex_jsJT0_3() throws Exception {
		assertEquals("a69f73cc0286b7ee4e61464f7b13320ea73e4d19f6f2d1c9a6a911140b69a261",DigestUtils.sha3_512Hex("secure hash algorithm".getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3_512Hex_jsJT0_4() throws Exception {
		assertEquals("a69f73cc0286b7ee4e61464f7b13320ea73e4d19f6f2d1c9a6a911140b69a261",DigestUtils.sha3_512Hex("SHA3-512".getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd2WithNullStream_xFCw2() throws NoSuchAlgorithmException, IOException {
    MessageDigest md = MessageDigest.getInstance("MD2");
    InputStream in = null;
    byte[] expected = md.digest();
    byte[] actual = DigestUtils.md2(in);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Hex_String_XHQd2() throws Exception {
    String expected = "356a192b7913b04c54574d18c28d46e6395428ab";
    String data = "test";
    String actual = DigestUtils.md5Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5Hex_Bytes_hxUn3() throws Exception {
    String expected = "356a192b7913b04c54574d18c28d46e6395428ab";
    byte[] data = "test".getBytes();
    String actual = DigestUtils.md5Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_KODI0() throws Exception {
        assertEquals("d1a9a6a6c5c6c69e",DigestUtils.md2Hex("data"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_ZksG0() throws Exception {
        MessageDigest messageDigest = mock(MessageDigest.class);
        ByteBuffer data = mock(ByteBuffer.class);
        byte[] expected = new byte[]{1, 2, 3};
        when(messageDigest.digest()).thenReturn(expected);
        byte[] actual =DigestUtils.digest(messageDigest, data);
        assertArrayEquals(expected, actual);
        verify(messageDigest).update(data);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSha3_384Digest_1_JGob0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getSha3_384Digest();
        assertEquals(MessageDigestAlgorithms.SHA3_384, messageDigest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSha3_384Digest_3_ujKA2() throws Exception {
        DigestUtils digestUtils = new DigestUtils(MessageDigestAlgorithms.SHA3_384);
        MessageDigest messageDigest = digestUtils.getSha3_384Digest();
        assertEquals(MessageDigestAlgorithms.SHA3_384, messageDigest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_rAgw0() throws Exception {
        final MessageDigest messageDigest =DigestUtils.getSha3_224Digest();
        assertNotNull(messageDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3_384Hex_GbLh0() throws Exception {
		byte[] input = "test".getBytes();
		String expected = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
		String actual =DigestUtils.sha3_384Hex(input);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMd5_QTCA0() throws Exception {
    byte[] expected = { 104, -53, -66, 3, -106, 0, -26, -4, -70, 109, -85, -71, -21, -83, 36, -82 };
    byte[] actual = DigestUtils.md5("data");
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_RPCs0_1() throws Exception {
        assertEquals("2 seguid56502d20f1b61a96cf65d7a5e0f1d3a0a3a8",DigestUtils.shaHex("hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_RPCs0_2() throws Exception {
        assertEquals("2 seguid56502d20f1b61a96cf65d7a5e0f1d3a0a3a8",DigestUtils.shaHex("hello world"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_RPCs0_3() throws Exception {
        assertEquals("2 seguid56502d20f1b61a96cf65d7a5e0f1d3a0a3a8",DigestUtils.shaHex("Hello World"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testDigest_cWmg0() throws Exception {
		MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
		byte[] data = "Hello, World!".getBytes();
		byte[] expected = messageDigest.digest(data);
		byte[] actual = DigestUtils.digest(messageDigest, data);
		assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testDigestWithNullMessageDigest_Molz1() throws Exception {
		MessageDigest messageDigest = null;
		byte[] data = "Hello, World!".getBytes();
		byte[] expected = null;
		byte[] actual = DigestUtils.digest(messageDigest, data);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha1_gqnu0() throws Exception {
		final String data = "Hello, World!";
		final byte[] expected = { 45, 105, -70, -110, -37, 115, 102, -94, 61, -65, 122, 101, -27, -77, 106, 118, 103, -118, -91, 113 };
		final byte[] actual = DigestUtils.sha1(data);
		assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha1WithEmptyData_hLgl1() throws Exception {
		final String data = "";
		final byte[] expected = { -108, -9, -127, -101, -92, 42, -106, 111, 102, -122, -89, 110, -121, 104, -89, -114, -56, -108, 99, 0 };
		final byte[] actual = DigestUtils.sha1(data);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_coverage_zviD1() throws IOException {
        InputStream data = mock(InputStream.class);
        when(data.read()).thenReturn(1);
        when(data.read(new byte[8192])).thenReturn(1);
        when(data.read(new byte[8192], 0, 8192)).thenReturn(1);
        when(data.read(new byte[8192], 0, 8192)).thenReturn(-1);
        try {
           DigestUtils.sha3_512(data);
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha256Hex_tehT0_1() throws Exception {
		assertEquals("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", DigestUtils.sha256Hex(""));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha256Hex_tehT0_2() throws Exception {
		assertEquals("9e107d9d372bb6826bd81d3542a419d6", DigestUtils.sha256Hex("abc"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_ejqS0() throws Exception {
        byte[] data = new byte[0];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_VlmF0_1() throws Exception {
        byte[] data = new byte[0];
        data = "Hello World".getBytes();
        data = "Lorem ipsum dolor sit amet".getBytes();
        assertEquals("", DigestUtils.md2Hex(data));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_VlmF0_2() throws Exception {
        byte[] data = new byte[0];
        data = "Hello World".getBytes();
        data = "Lorem ipsum dolor sit amet".getBytes();
        assertEquals("e3d2976f03f9c0d725a6b84e55f3e5c6", DigestUtils.md2Hex(data));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_VlmF0_3() throws Exception {
        byte[] data = new byte[0];
        data = "Hello World".getBytes();
        data = "Lorem ipsum dolor sit amet".getBytes();
        assertEquals("c1b9a6a7f29e4a5c7a3b6a8f2a7b6a9f", DigestUtils.md2Hex(data));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_AOJv0() throws Exception {
        byte[] data = new byte[]{0x01, 0x02, 0x03};
        String expected = "36d6a37f61d48c1d3a66d408b2a93e3a12f58a2d81d2d3c8f7a6e1e4c4a0c11f";
        assertEquals(expected,DigestUtils.sha512Hex(data));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3_256_qTIZ0() throws Exception {
		byte[] input = new byte[]{1, 2, 3};
		byte[] expected = new byte[]{4, 5, 6};
		byte[] actual = DigestUtils.sha3_256(input);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3_256Hex_EZJj0() throws Exception {
		byte[] data = new byte[] {0x01, 0x02, 0x03};
		String expected = "0x66c4a0aa75c84f3a36c543b3e41c5996d5a1a604e29a94b6ce23a272a18a883c";
		String actual = DigestUtils.sha3_256Hex(data);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3_384Hex_eqRi0_1() throws Exception {
		assertEquals("69070TECNO5732B0A75B0F3A36B6124199D7B9B541C2C3C7D56503B470F95199", DigestUtils.sha3_384Hex(""));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3_384Hex_eqRi0_2() throws Exception {
		assertEquals("A7FFC6F8BF1ED76651C14756A061D662F580FF4DE43B49FA82D80A4B80F8434A", DigestUtils.sha3_384Hex("abc"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3_384Hex_eqRi0_3() throws Exception {
		assertEquals("0C63A75B845E4F7D01107D852E4C2485C51A50bbeA83F7D2C0C94152245A9E2", DigestUtils.sha3_384Hex("abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha384_QhHv0() throws Exception {
		byte[] data = new byte[0];
		byte[] expected = new byte[0];
		byte[] actual =DigestUtils.sha384(data);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3841_vXNO1() throws Exception {
		byte[] data = new byte[10];
		byte[] expected = new byte[0];
		byte[] actual =DigestUtils.sha384(data);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3842_KPcr2() throws Exception {
		byte[] data = new byte[20];
		byte[] expected = new byte[0];
		byte[] actual =DigestUtils.sha384(data);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3843_eRsS3() throws Exception {
		byte[] data = new byte[30];
		byte[] expected = new byte[0];
		byte[] actual =DigestUtils.sha384(data);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3844_tJFw4() throws Exception {
		byte[] data = new byte[40];
		byte[] expected = new byte[0];
		byte[] actual =DigestUtils.sha384(data);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3845_glhy5() throws Exception {
		byte[] data = new byte[50];
		byte[] expected = new byte[0];
		byte[] actual =DigestUtils.sha384(data);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3846_tAiA6() throws Exception {
		byte[] data = new byte[60];
		byte[] expected = new byte[0];
		byte[] actual =DigestUtils.sha384(data);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3847_urkQ7() throws Exception {
		byte[] data = new byte[70];
		byte[] expected = new byte[0];
		byte[] actual =DigestUtils.sha384(data);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3848_qHgL8() throws Exception {
		byte[] data = new byte[80];
		byte[] expected = new byte[0];
		byte[] actual =DigestUtils.sha384(data);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha3849_aTkL9() throws Exception {
		byte[] data = new byte[90];
		byte[] expected = new byte[0];
		byte[] actual =DigestUtils.sha384(data);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha38410_uOmV10() throws Exception {
		byte[] data = new byte[100];
		byte[] expected = new byte[0];
		byte[] actual =DigestUtils.sha384(data);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_XlnJ0() throws IOException {
        InputStream mockInputStream = mock(InputStream.class);
        when(mockInputStream.read()).thenReturn(1).thenReturn(2).thenReturn(3).thenReturn(-1);
        String result = DigestUtils.sha3_256Hex(mockInputStream);
        assertEquals("c6617f878d6e3f1c2f9e6a0a4c7f5d81d3a5c53d93a63a9f1d01e6960683e7a1", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha512WithValidData_QXnR0() throws Exception {
		byte[] data = new byte[] { 0x01, 0x02, 0x03 };
		byte[] expected = new byte[] { 0x0a, 0x0b, 0x0c };
		byte[] actual =DigestUtils.sha512(data);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha512WithEmptyData_LuwW1() throws Exception {
		byte[] data = new byte[0];
		byte[] expected = new byte[] { 0x0d, 0x0e, 0x0f };
		byte[] actual =DigestUtils.sha512(data);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha512WithNullData_SPNN2() throws Exception {
		byte[] data = null;
		byte[] expected = new byte[] { 0x10, 0x11, 0x12 };
		byte[] actual =DigestUtils.sha512(data);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMethod1_UHkn0() throws Exception {
		MessageDigest messageDigest =DigestUtils.getSha512_224Digest();
		assertNotNull(messageDigest);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha512_224Hex_fuks0_1() throws Exception {
		assertEquals("6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4", DigestUtils.sha512_224Hex("".getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha512_224Hex_fuks0_2() throws Exception {
		assertEquals("c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a", DigestUtils.sha512_224Hex("abc".getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha512_224Hex_fuks0_3() throws Exception {
		assertEquals("53048e2681941ef99b2e29b76b4c7dabe4c2d0c634fc6d46e0e2f13107e7af23", DigestUtils.sha512_224Hex("message digest".getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha512_224Hex_fuks0_4() throws Exception {
		assertEquals("72399001d3a6852002590892b3030f3f994495312b5b66a2a5b7336195d7915b", DigestUtils.sha512_224Hex("abcdefghijklmnopqrstuvwxyz".getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha512_224Hex_fuks0_5() throws Exception {
		assertEquals("4634270f707b6a54d8760a36ac842683625f452e93e529154316b33614256979", DigestUtils.sha512_224Hex("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha512_224Hex_fuks0_6() throws Exception {
		assertEquals("1e07be23c26a86ea37ea810c8ec7809352515a970e9253c26f53658568e28828", DigestUtils.sha512_224Hex("12345678901234567890123456789012345678901234567890123456789012345678901234567890".getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_rUHD0() throws Exception {
        byte[] expected =DigestUtils.md2("test");
        byte[] actual =DigestUtils.md2("test");
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_sha3_512Hex_EpDi0_1() throws Exception {
		assertEquals("a69f73cc7a20c7b1e9a4b25a346e485c7175b5d3e0a6c012c8a9d8a00001e46c",DigestUtils.sha3_512Hex(""));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_256Hex_uTva0() throws Exception {
    String data = "example";
    String result = DigestUtils.sha512_256Hex(data);
    assertEquals("e3d3c7f1d4c2a3a7d89b21b4c563c3e38a3b0a65e41a0e5a1b2c7c9d5a2a3a7d", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_256HexWithEmptyData_ZPna1() throws Exception {
    String data = "";
    String result = DigestUtils.sha512_256Hex(data);
    assertEquals("cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_256HexWithNullData_XzFE2() throws Exception {
    String data = null;
    String result = DigestUtils.sha512_256Hex(data);
    assertEquals("cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha512_256_with_empty_string_XkMI0() throws Exception {
		byte[] expected = {10, -66, -56, 125, -92, -11, -24, 119, -24, -30, -90, -46, -11, -40, 105, -31, -41, -125, 0, -112, -89, -110, -62, -100, -90, -116, -112, -64, 29, -92, 58};
		byte[] actual = DigestUtils.sha512_256("");
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha512_256_with_non_empty_string_fnKQ1() throws Exception {
		byte[] expected = {-0, -111, -70, 2, -112, 113, -7, -45, 43, 43, -63, -10, 111, -64, -75, 118, 49, 65, -62, 50, 30, 30, -102, 73, -11, -24, -5, 26, 6, -104, 96};
		byte[] actual = DigestUtils.sha512_256("test");
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUpdateDigest_GKjB0() throws Exception {
		MessageDigest digest = MessageDigest.getInstance("SHA-256");
		ByteBuffer buffer = ByteBuffer.allocate(1024);
		MessageDigest result = DigestUtils.updateDigest(digest, buffer);
		assertEquals(digest, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUpdateDigestWithNullDigest_atHn1() throws Exception {
		ByteBuffer buffer = ByteBuffer.allocate(1024);
		MessageDigest result = DigestUtils.updateDigest(null, buffer);
		assertEquals(null, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUpdateDigestWithEmptyBuffer_WJeS2() throws Exception {
		MessageDigest digest = MessageDigest.getInstance("SHA-256");
		ByteBuffer buffer = ByteBuffer.allocate(0);
		MessageDigest result = DigestUtils.updateDigest(digest, buffer);
		assertEquals(digest, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUpdateDigestWithEmptyDigestAndBuffer_MPkg4() throws Exception {
		ByteBuffer buffer = ByteBuffer.allocate(0);
		MessageDigest result = DigestUtils.updateDigest(null, buffer);
		assertEquals(null, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMd5Hex_rlAp0_1() throws Exception {
		assertEquals("d41d8cd98f00b204e9800998ecf8427e",DigestUtils.md5Hex(""));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMd5Hex_rlAp0_2() throws Exception {
		assertEquals("900150983cd24fb0d6963f7d28e17f72",DigestUtils.md5Hex("abc"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMd5Hex_rlAp0_3() throws Exception {
		assertEquals("9e107d9d372bb6826bd81d3542a419d6",DigestUtils.md5Hex("message digest"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMd5Hex_rlAp0_4() throws Exception {
		assertEquals("f96b697d7cb7938d525a2f31aa1c8ac1",DigestUtils.md5Hex("abcdefghijklmnopqrstuvwxyz"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMd5Hex_rlAp0_5() throws Exception {
		assertEquals("c3f5b9e8860b7e9a9a1a9f513b8e4f7d",DigestUtils.md5Hex("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMd5Hex_rlAp0_6() throws Exception {
		assertEquals("d174ab98d277d9f5a5611c2c9f419d9f",DigestUtils.md5Hex("12345678901234567890123456789012345678901234567890123456789012345678901234567890"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testDigest_FKKS0() throws Exception {
		DigestUtils digestUtils = new DigestUtils();
		byte[] data = new byte[0];
		byte[] expected = new byte[0];
		byte[] actual = digestUtils.digest(data);
		assertArrayEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getSha256Digest_esHk0() throws Exception {
    MessageDigest digest = DigestUtils.getSha256Digest();
    assertEquals("SHA-256", digest.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getSha256Digest_branchCoverage_zgPb1() throws Exception {
    MessageDigest digest = DigestUtils.getDigest(MessageDigestAlgorithms.SHA_256);
    assertEquals("SHA-256", digest.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_224_YwgV0() throws IOException {
    final byte[] input = new byte[0];
    final byte[] expected = new byte[28];
    final byte[] actual = DigestUtils.sha512_224(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_224WithString_Gacf3() throws IOException {
    final String input = "Hello, World!";
    final byte[] expected = new byte[28];
    final byte[] actual = DigestUtils.sha512_224(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void test1_DiDw0_1() throws Exception {
		final MessageDigest actual = DigestUtils.getSha512Digest();
		assertNotNull(actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void test1_DiDw0_2() throws Exception {
		final MessageDigest actual = DigestUtils.getSha512Digest();
		assertEquals("SHA-512", actual.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_EVdd0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = digestUtils.digest("data");
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigest_xMOh1() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        byte[] result = digestUtils.digest("data");
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithName_yuMv2() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] result = digestUtils.digest("data");
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMd5Hex_VJHp0_1() throws Exception {
		assertEquals("d41d8cd98f00b204e9800998ecf8427e",DigestUtils.md5Hex("".getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMd5Hex_VJHp0_2() throws Exception {
		assertEquals("900150983cd24fb0d6963f7d28e17f72",DigestUtils.md5Hex("abc".getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMd5Hex_VJHp0_3() throws Exception {
		assertEquals("9e107d9d372bb6826bd81d3542a419d6",DigestUtils.md5Hex("message digest".getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMd5Hex_VJHp0_4() throws Exception {
		assertEquals("f96b697d7cb7938d525a2f31AAF161D0",DigestUtils.md5Hex("abcdefghijklmnopqrstuvwxyz".getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMd5Hex_VJHp0_5() throws Exception {
		assertEquals("c3f5b88f0e743b96a76d87a4f0f3f1d7",DigestUtils.md5Hex("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMd5Hex_VJHp0_6() throws Exception {
		assertEquals("d174ab98d277d9f5a5611c2c9f419d9f",DigestUtils.md5Hex("12345678901234567890123456789012345678901234567890123456789012345678901234567890".getBytes()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_LGkt0() throws Exception {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{
                (byte) 0x90, (byte) 0x01, (byte) 0x50, (byte) 0x98,
                (byte) 0x3c, (byte) 0xd2, (byte) 0x4f, (byte) 0xb0,
                (byte) 0xd6, (byte) 0x96, (byte) 0x3f, (byte) 0x7d,
                (byte) 0x28, (byte) 0xe1, (byte) 0x7f, (byte) 0x72
        };
        assertArrayEquals(expected,DigestUtils.md5(data));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_tOey0() throws Exception {
        byte[] data = new byte[] { 0, 1, 2, 3, 4, 5 };
        byte[] expected = new byte[] { -53, -107, -124, -3, 99, 71, -111, 106, -61, -45, -82, 0, -27, -100, -115, 75, -121, -100, 84, 30 };
        assertArrayEquals(expected,DigestUtils.sha1(data));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha384Hex_Zuqg0() throws Exception {
		assertEquals("9c63d59a63c95cf372028c01d7a022bb98b4c5e17a6f3e989c3d3f616b9c2f9d0f0f0e727c8a9d1a8e6c4f9833c4e33a",DigestUtils.sha384Hex("test".getBytes()));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha512Hex_XOOJ0_1() throws Exception {
		assertEquals("1220936B8C7F4B1F73099D3B2FCC383F482D2B99219D73CA94E80132E187D3A3F164A2B82A014806B2C2A4C533F61E9A192C2B5F8D8D1C62C7814B98", DigestUtils.sha512Hex("test"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha512Hex_XOOJ0_2() throws Exception {
		assertEquals("1220E9C1E1F56B057B9C71F4E5B4F19F312244B2D66D78E78C49E71E1E8B5B7323A9F2A58F256E3C1D542A3D7C3D9E867A2D24B80D0C6E6BDC0476C8", DigestUtils.sha512Hex("hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_BSFY0() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = "Hello, World!".getBytes();
        String expected = "7509e5bda0c762d2bac7f90d758b5b2263fa01ccbc542ab5e3df163be08e6ca9";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithMessageDigest_fIeu1() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        byte[] data = "Hello, World!".getBytes();
        String expected = "7509e5bda0c762d2bac7f90d758b5b2263fa01ccbc542ab5e3df163be08e6ca9";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_UuNd0_1() throws Exception {
        MessageDigest digest1 = DigestUtils.getDigest(MessageDigestAlgorithms.MD5);
        MessageDigest digest2 = DigestUtils.getMd5Digest();
        assertNotNull(digest1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_UuNd0_2() throws Exception {
        MessageDigest digest1 = DigestUtils.getDigest(MessageDigestAlgorithms.MD5);
        MessageDigest digest2 = DigestUtils.getMd5Digest();
        assertNotNull(digest2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_UuNd0_3() throws Exception {
        MessageDigest digest1 = DigestUtils.getDigest(MessageDigestAlgorithms.MD5);
        MessageDigest digest2 = DigestUtils.getMd5Digest();
        assertEquals(digest1, digest2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_UuNd0_4() throws Exception {
        MessageDigest digest1 = DigestUtils.getDigest(MessageDigestAlgorithms.MD5);
        MessageDigest digest2 = DigestUtils.getMd5Digest();
       assertSame(digest1, digest2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_pLBV0_1() throws Exception {
        assertEquals("6b4e03423667db5f",DigestUtils.sha3_224Hex("test"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_pLBV0_2() throws Exception {
        assertEquals("a69f73cc0d02b614",DigestUtils.sha3_224Hex("hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_pLBV0_3() throws Exception {
        assertEquals("1a9d6e65d8428a7c",DigestUtils.sha3_224Hex("world"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1Hex_QjPC0() throws Exception {
    byte[] data = new byte[0];
    String expected = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
    String actual = DigestUtils.sha1Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1Hex1_etYm1() throws Exception {
    String expected = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
    String actual = DigestUtils.sha1Hex("");
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1Hex2_OCIc2() throws Exception {
    String expected = "86f7e437faa5a7fce15d1ddcb9eaeaea377667b8";
    String actual = DigestUtils.sha1Hex("abc");
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1Hex3_dsrS3() throws Exception {
    String expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3";
    String actual = DigestUtils.sha1Hex("message digest");
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1Hex4_QtnD4() throws Exception {
    String expected = "c12252ceda8be8994d5fa0290a47231c1d16aaeb";
    String actual = DigestUtils.sha1Hex("abcdefghijklmnopqrstuvwxyz");
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1Hex5_epem5() throws Exception {
    String expected = "32d10c7b8cf96570ca04ce37f2a19d84240d3a89";
    String actual = DigestUtils.sha1Hex("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1Hex6_XqCb6() throws Exception {
    String expected = "761c457bf73b14d27e9e9265c46f4b4dda11f940";
    String actual = DigestUtils.sha1Hex("12345678901234567890123456789012345678901234567890123456789012345678901234567890");
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getSha512_256Digest_YNhb0() throws Exception {
		MessageDigest messageDigest =DigestUtils.getSha512_256Digest();
		assertEquals("SHA-512/256", messageDigest.getAlgorithm());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha384HexWithMock_MKIt1() throws IOException {
		InputStream inputStream = mock(InputStream.class);
		byte[] data = new byte[1024];
		when(inputStream.read(data)).thenReturn(1024);
		String expected = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
		String actual =DigestUtils.sha384Hex(inputStream);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_CwiR0_1() throws Exception {
        assertEquals("a7ff5a86e9a7c61e77e91e3e0a4e4d24e93b3f5be6f5d3f9f2f4f1d61b342a1e",DigestUtils.sha3_256Hex(""));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_CwiR0_2() throws Exception {
        assertEquals("69070TECNO5512069574939411856708125798717270687840825031300617107491990368408451",DigestUtils.sha3_256Hex("abc"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_CwiR0_3() throws Exception {
        assertEquals("a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3",DigestUtils.sha3_256Hex("message digest"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSha256WithMockedInputStream_yYze1() throws IOException {
		InputStream mockedInputStream = mock(InputStream.class);
		when(mockedInputStream.read()).thenReturn(0);
		byte[] actual =DigestUtils.sha256(mockedInputStream);
		assertNotNull(actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_QXco0() throws Exception {
    byte[] data = new byte[0];
    byte[] expected = new byte[64];
    byte[] actual = DigestUtils.sha3_512(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_1_LBED1() throws Exception {
    byte[] data = new byte[55];
    byte[] expected = new byte[64];
    byte[] actual = DigestUtils.sha3_512(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_2_Wnhj2() throws Exception {
    byte[] data = new byte[64];
    byte[] expected = new byte[64];
    byte[] actual = DigestUtils.sha3_512(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_3_kVjl3() throws Exception {
    byte[] data = new byte[65];
    byte[] expected = new byte[64];
    byte[] actual = DigestUtils.sha3_512(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_4_dAFj4() throws Exception {
    byte[] data = new byte[256];
    byte[] expected = new byte[64];
    byte[] actual = DigestUtils.sha3_512(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_5_qHUv5() throws Exception {
    byte[] data = new byte[1024];
    byte[] expected = new byte[64];
    byte[] actual = DigestUtils.sha3_512(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_6_lfrw6() throws Exception {
    byte[] data = new byte[2048];
    byte[] expected = new byte[64];
    byte[] actual = DigestUtils.sha3_512(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_7_JOOA7() throws Exception {
    byte[] data = new byte[4096];
    byte[] expected = new byte[64];
    byte[] actual = DigestUtils.sha3_512(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_8_Cold8() throws Exception {
    byte[] data = new byte[8192];
    byte[] expected = new byte[64];
    byte[] actual = DigestUtils.sha3_512(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_9_SSnh9() throws Exception {
    byte[] data = new byte[16384];
    byte[] expected = new byte[64];
    byte[] actual = DigestUtils.sha3_512(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_10_CEDh10() throws Exception {
    byte[] data = new byte[32768];
    byte[] expected = new byte[64];
    byte[] actual = DigestUtils.sha3_512(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_11_erJA11() throws Exception {
    byte[] data = new byte[65536];
    byte[] expected = new byte[64];
    byte[] actual = DigestUtils.sha3_512(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_12_ETXc12() throws Exception {
    byte[] data = new byte[131072];
    byte[] expected = new byte[64];
    byte[] actual = DigestUtils.sha3_512(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_512_13_apYD13() throws Exception {
    byte[] data = new byte[262144];
    byte[] expected = new byte[64];
    byte[] actual = DigestUtils.sha3_512(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestAsHexWithFile_YzqX0() throws IOException {
    DigestUtils digestUtils = new DigestUtils("SHA-256");
    File file = new File("test.txt");
    String actual = digestUtils.digestAsHex(file);
    String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestAsHexWithNullFile_yGLn1() throws IOException {
    DigestUtils digestUtils = new DigestUtils("SHA-256");
    File file = null;
    String actual = digestUtils.digestAsHex(file);
    String expected = "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestAsHexWithEmptyFile_nzFX2() throws IOException {
    DigestUtils digestUtils = new DigestUtils("SHA-256");
    File file = new File("empty.txt");
    String actual = digestUtils.digestAsHex(file);
    String expected = "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testDigestAsHex_zNvU0() throws Exception {
		DigestUtils digestUtils = new DigestUtils("SHA-256");
		ByteBuffer data = ByteBuffer.allocate(10);
		String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
		String actual = digestUtils.digestAsHex(data);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testDigestAsHexWithEmptyByteBuffer_pNoU1() throws Exception {
		DigestUtils digestUtils = new DigestUtils("SHA-256");
		ByteBuffer data = ByteBuffer.allocate(0);
		String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
		String actual = digestUtils.digestAsHex(data);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testDigestAsHexWithNullByteBuffer_hpWY2() throws Exception {
		DigestUtils digestUtils = new DigestUtils("SHA-256");
		ByteBuffer data = null;
		String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
		String actual = digestUtils.digestAsHex(data);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testDigestAsHexWithByteBufferOfSize1_ZJUD3() throws Exception {
		DigestUtils digestUtils = new DigestUtils("SHA-256");
		ByteBuffer data = ByteBuffer.allocate(1);
		String expected = "ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb";
		String actual = digestUtils.digestAsHex(data);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_ffql0_1() throws Exception {
        assertArrayEquals(new byte[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, DigestUtils.sha384(""));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUpdateDigest14_sADd13() throws Exception {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_224Hex_tQck0() throws Exception {
    byte[] data = new byte[0];
    assertEquals("c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470", DigestUtils.sha3_224Hex(data));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_224Hex1_DnLt1() throws Exception {
    byte[] data = new byte[1];
    data[0] = (byte) 0x61;
    assertEquals("6e8b9a9c7b7c2f3e5d94c8e6a39c1f9e7b7c2f3e5d94c8e6a39c1f9e7b7c2f3e", DigestUtils.sha3_224Hex(data));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_224Hex2_aUUb2() throws Exception {
    byte[] data = new byte[2];
    data[0] = (byte) 0x61;
    data[1] = (byte) 0x62;
    assertEquals("c9a660b3c23b8b3e94c8e6a39c1f9e7b7c2f3e5d94c8e6a39c1f9e7b7c2f3e", DigestUtils.sha3_224Hex(data));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_224Hex3_Pgqr3() throws Exception {
    byte[] data = new byte[3];
    data[0] = (byte) 0x61;
    data[1] = (byte) 0x62;
    data[2] = (byte) 0x63;
    assertEquals("f3095286a9d43d5f4e90a5d1d50d81d39a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a", DigestUtils.sha3_224Hex(data));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_224Hex4_VuPp4() throws Exception {
    byte[] data = new byte[4];
    data[0] = (byte) 0x61;
    data[1] = (byte) 0x62;
    data[2] = (byte) 0x63;
    data[3] = (byte) 0x64;
    assertEquals("0f8e0d6a0d7e0d8e0d9e0da70d9e0d9e0d9e0d9e0d9e0d9e0d9e0d9e0d9e0d9e", DigestUtils.sha3_224Hex(data));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha3_224Hex5_mHxK5() throws Exception {
    byte[] data = new byte[5];
    data[0] = (byte) 0x61;
    data[1] = (byte) 0x62;
    data[2] = (byte) 0x63;
    data[3] = (byte) 0x64;
    data[4] = (byte) 0x65;
    assertEquals("42023a65b27f42023a65b27f42023a65b27f42023a65b27f42023a65b27f4202", DigestUtils.sha3_224Hex(data));
}
}