/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Soundex_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLength_yoxl0() throws Exception {
        Soundex soundex = new Soundex();
        soundex.setMaxLength(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMaxLength_OQlu0() throws Exception {
    Soundex soundex = new Soundex();
    int maxLength = soundex.getMaxLength();
    assertEquals(0, maxLength);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMaxLength1_XVKz1() throws Exception {
    Soundex soundex = new Soundex("mapping");
    int maxLength = soundex.getMaxLength();
    assertEquals(0, maxLength);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMaxLength2_rjod2() throws Exception {
    Soundex soundex = new Soundex("mapping", true);
    int maxLength = soundex.getMaxLength();
    assertEquals(0, maxLength);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInvalidInput_bxun1() throws Exception {
        Soundex soundex = new Soundex();
        try {
            soundex.encode(123);
            fail("Exception should be thrown");
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to Soundex encode is not of type java.lang.String", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_String_1_nWRf0() throws Exception {
    Soundex soundex = new Soundex();
    String expected = "0000";
    String actual = soundex.soundex(null);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_String_2_ZFse1() throws Exception {
    Soundex soundex = new Soundex();
    String expected = "0000";
    String actual = soundex.soundex("");
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_String_3_myfA2() throws Exception {
    Soundex soundex = new Soundex();
    String expected = "A000";
    String actual = soundex.soundex("A");
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_String_5_ffjK4() throws Exception {
    Soundex soundex = new Soundex();
    String expected = "A000";
    String actual = soundex.soundex("A1");
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_String_6_dCaF5() throws Exception {
    Soundex soundex = new Soundex();
    String expected = "A000";
    String actual = soundex.soundex("A1B");
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_String_7_kEIK6() throws Exception {
    Soundex soundex = new Soundex();
    String expected = "A000";
    String actual = soundex.soundex("A1B2");
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_String_8_sAJZ7() throws Exception {
    Soundex soundex = new Soundex();
    String expected = "A000";
    String actual = soundex.soundex("A1B2C");
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_String_9_PqTI8() throws Exception {
    Soundex soundex = new Soundex();
    String expected = "A000";
    String actual = soundex.soundex("A1B2C3");
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_String_10_kSzt9() throws Exception {
    Soundex soundex = new Soundex();
    String expected = "A000";
    String actual = soundex.soundex("A1B2C3D");
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_String_11_BRJV10() throws Exception {
    Soundex soundex = new Soundex();
    String expected = "A000";
    String actual = soundex.soundex("A1B2C3D4");
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_DmQi0() throws EncoderException {
        Soundex soundex = new Soundex();
        String s1 = "example";
        String s2 = "example";
        int expected = 0;
        int actual = soundex.difference(s1, s2);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_qCzT4() throws EncoderException {
        Soundex soundex = new Soundex();
        String firstString = "example";
        String secondString = "example";
        int expectedDifference = 0;
        int actualDifference = soundex.difference(firstString, secondString);
        assertEquals(expectedDifference, actualDifference);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QSFn0() throws Exception {
        Soundex soundex = new Soundex();
        String encoded = soundex.encode("Johnson");
        assertEquals("J520", encoded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithMapping_CXDV1() throws Exception {
        Soundex soundex = new Soundex("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        String encoded = soundex.encode("Johnson");
        assertEquals("J520", encoded);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCaseHW_cVJT4() throws Exception {
        Soundex soundex = new Soundex("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", true);
        String encoded = soundex.encode("Johnson");
        assertEquals("J520", encoded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithMappingArray_cmOG5() throws Exception {
        Soundex soundex = new Soundex(new char[] {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'});
        String encoded = soundex.encode("Johnson");
        assertEquals("J520", encoded);
    }
}