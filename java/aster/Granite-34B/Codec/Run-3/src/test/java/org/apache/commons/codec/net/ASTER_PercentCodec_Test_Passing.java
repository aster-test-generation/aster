/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PercentCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNoException_JQNi0() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        Object result = percentCodec.decode(new byte[]{});
        Assertions.assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_pWZf2() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        Object result = percentCodec.decode(null);
        Assertions.assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_YoFy0() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        assertEquals(null, percentCodec.encode(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_xeqy1() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = "Hello, World!".getBytes();
        byte[] expected = "Hello%2C%20World!".getBytes();
        assertArrayEquals(expected, percentCodec.encode(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedType_JIFq2_1() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        Object input = new Object();
        EncoderException expected = assertThrows(EncoderException.class, () -> percentCodec.encode(input));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEncodeWithEncoding_ifPf1() throws Exception {
		PercentCodec percentCodec = new PercentCodec();
		byte[] bytes = new byte[] { 1, 2, 3 };
		byte[] result = percentCodec.encode(bytes);
		assertTrue(result.length > bytes.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEncodeWithNullInput_cKkY4() throws Exception {
		PercentCodec percentCodec = new PercentCodec();
		byte[] bytes = null;
		byte[] result = percentCodec.encode(bytes);
		assertNull(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoBytes_NbDd0() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] result = percentCodec.encode(new byte[0]);
        assertArrayEquals(new byte[0], result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithBytes_qopL1() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = {0x20};
        byte[] result = percentCodec.encode(bytes);
        assertArrayEquals(new byte[]{0x25, 0x32, 0x30}, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_Rbwf2() throws Exception {
        PercentCodec percentCodec = new PercentCodec(new byte[0], true);
        byte[] bytes = {' '};
        byte[] result = percentCodec.encode(bytes);
        assertArrayEquals(new byte[]{0x2B}, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_XIkO3() throws Exception {
        PercentCodec percentCodec = new PercentCodec(new byte[]{0x20}, false);
        byte[] bytes = {0x20};
        byte[] result = percentCodec.encode(bytes);
        assertArrayEquals(new byte[]{0x25, 0x32, 0x30}, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncoderException_bMDB4() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = {0x20};
        try {
            percentCodec.encode(bytes);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertTrue(true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_Uxdo0() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.encode(null);
       assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoNeedToEncode_YRBM1() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] input = "Hello, World!".getBytes();
        byte[] result = codec.encode(input);
        assertArrayEquals(input, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNeedToEncode_GBvY2() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] input = "Hello, World!".getBytes();
        byte[] expected = "Hello%2C%20World!".getBytes();
        byte[] result = codec.encode(input);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAllParameters_xYqH5() throws Exception {
        PercentCodec codec = new PercentCodec("!".getBytes(), true);
        byte[] input = "Hello, World!".getBytes();
        byte[] expected = "Hello%2C+World%21".getBytes();
        byte[] result = codec.encode(input);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoBytes_skbA0() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = {};
        byte[] encodedBytes = percentCodec.encode(bytes);
        assertTrue(Arrays.equals(bytes, encodedBytes));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithBytes_TgLK1() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = {0x41, 0x42, 0x43};
        byte[] encodedBytes = percentCodec.encode(bytes);
        assertTrue(Arrays.equals(new byte[]{0x41, 0x42, 0x43}, encodedBytes));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_nCTQ3() throws Exception {
        PercentCodec percentCodec = new PercentCodec(new byte[]{0x41, 0x42, 0x43}, false);
        byte[] bytes = {0x41, 0x42, 0x43};
        byte[] encodedBytes = percentCodec.encode(bytes);
        assertTrue(Arrays.equals(new byte[]{0x41, 0x42, 0x43}, encodedBytes));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncoderException_OyKk4() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = {0x41, 0x42, 0x43};
        try {
            percentCodec.encode(bytes);
        } catch (EncoderException e) {
            assertTrue(e.getMessage().equals("Error encoding bytes"));
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNull_OHsJ0() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] actual = percentCodec.encode(null);
    assertTrue(Arrays.equals(null, actual));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNoNeedToEncode_cakc1() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] bytes = new byte[] { 0, 1, 2 };
    byte[] actual = percentCodec.encode(bytes);
    assertTrue(Arrays.equals(bytes, actual));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNeedToEncode_nQyy2() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] bytes = new byte[] { -1, -2, -3 };
    byte[] expected = new byte[] { '%', 'F', 'F', '%', 'F', 'E', '%', 'F', 'D' };
    byte[] actual = percentCodec.encode(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithAlwaysEncodeChars_xwye4() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[] { 0, 1, 2 }, false);
    byte[] bytes = new byte[] { 0, 1, 2, 4 };
    byte[] expected = new byte[] { '%', '0', '0', '%', '0', '1', '%', '0', '2', 4 };
    byte[] actual = percentCodec.encode(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithAllParameters_WQNx5() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[] { 0, 1, 2 }, true);
    byte[] bytes = new byte[] { 0, 1, 2, ' ', 3 };
    byte[] expected = new byte[] { '%', '0', '0', '%', '0', '1', '%', '0', '2', '+', 3 };
    byte[] actual = percentCodec.encode(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_EgRj0() throws EncoderException {
    PercentCodec percentCodec = new PercentCodec();
    byte[] bytes = null;
    byte[] result = percentCodec.encode(bytes);
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeEmpty_nRUD1() throws EncoderException {
    PercentCodec percentCodec = new PercentCodec();
    byte[] bytes = new byte[0];
    byte[] result = percentCodec.encode(bytes);
    Assertions.assertArrayEquals(bytes, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeOneByte_OCXk2() throws EncoderException {
    PercentCodec percentCodec = new PercentCodec();
    byte[] bytes = new byte[] { 65 };
    byte[] result = percentCodec.encode(bytes);
    Assertions.assertArrayEquals(new byte[] { 65 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeOneByteAlwaysEncodePlusForSpace_DWET5() throws EncoderException {
    PercentCodec percentCodec = new PercentCodec(new byte[] { 65 }, true);
    byte[] bytes = new byte[] { 65 };
    byte[] result = percentCodec.encode(bytes);
    Assertions.assertArrayEquals(new byte[] { 65 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeTwoBytes_NSwG6() throws EncoderException {
    PercentCodec percentCodec = new PercentCodec();
    byte[] bytes = new byte[] { 65, 66 };
    byte[] result = percentCodec.encode(bytes);
    Assertions.assertArrayEquals(new byte[] { 65, 66 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void decode_WithInputNull_ReturnsNull_blpv0() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] actual = percentCodec.decode(null);
    Assertions.assertNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void decode_WithInputEmptyArray_ReturnsEmptyArray_LhcF1() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] actual = percentCodec.decode(new byte[]{});
    Assertions.assertEquals(0, actual.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void decode_WithInputWithPlusForSpaceTrueAndPlusChar_ReturnsSpace_KWzU2() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[]{}, true);
    byte[] actual = percentCodec.decode(new byte[]{(byte) '+'});
    Assertions.assertEquals(new byte[]{' '}, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void decode_WithInputWithPlusForSpaceFalseAndPlusChar_ReturnsPlusChar_kRQt3() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[]{}, false);
    byte[] actual = percentCodec.decode(new byte[]{(byte) '+'});
    Assertions.assertEquals(new byte[]{(byte) '+'}, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void decode_WithInputWithPlusForSpaceTrueAndPercentChar_ReturnsPercentChar_fKjL4() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[]{}, true);
    byte[] actual = percentCodec.decode(new byte[]{(byte) '%'});
    Assertions.assertEquals(new byte[]{(byte) '%'}, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void decode_WithInputWithPlusForSpaceFalseAndPercentChar_ThrowsDecoderException_tdNO5_1() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[]{}, false);
    DecoderException exception = Assertions.assertThrows(DecoderException.class, () -> percentCodec.decode(new byte[]{(byte) '%'}));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void decode_WithInputWithPlusForSpaceTrueAndPercentCharFollowedByTwoDigits_ReturnsCorrectByte_sHtS6() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[]{}, true);
    byte[] actual = percentCodec.decode(new byte[]{(byte) '%', (byte) '4', (byte) '1'});
    Assertions.assertEquals(new byte[]{(byte) 'A'}, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void decode_WithInputWithPlusForSpaceFalseAndPercentCharFollowedByTwoDigits_ReturnsCorrectByte_fgXr7() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[]{}, false);
    byte[] actual = percentCodec.decode(new byte[]{(byte) '%', (byte) '4', (byte) '1'});
    Assertions.assertEquals(new byte[]{(byte) 'A'}, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void decode_WithInputWithPlusForSpaceTrueAndPercentCharFollowedByTwoInvalidDigits_ThrowsDecoderException_hkPW8_1() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[]{}, true);
    DecoderException exception = Assertions.assertThrows(DecoderException.class, () -> percentCodec.decode(new byte[]{(byte) '%', (byte) 'G', (byte) '1'}));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void decode_WithInputWithPlusForSpaceFalseAndPercentCharFollowedByTwoInvalidDigits_ThrowsDecoderException_tLvj9_1() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[]{}, false);
    DecoderException exception = Assertions.assertThrows(DecoderException.class, () -> percentCodec.decode(new byte[]{(byte) '%', (byte) 'G', (byte) '1'}));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void decode_WithInputWithPlusForSpaceTrueAndPercentCharFollowedByTwoDigitsFollowedByAnotherPercentChar_ReturnsCorrectBytes_hLWR10() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[]{}, true);
    byte[] actual = percentCodec.decode(new byte[]{(byte) '%', (byte) '4', (byte) '1', (byte) '%', (byte) '4', (byte) '2'});
    Assertions.assertEquals(new byte[]{(byte) 'A', (byte) '%', (byte) 'B'}, actual);
}
}