/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import java.math.BigInteger;
import java.util.Arrays;
import org.apache.commons.codec.CodecPolicy;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Base64_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUrlSafe_VInt0_1() throws Exception {
    Base64 base64 = new Base64(true);
    base64 = new Base64(10, new byte[] { 0x0a }, true);
    base64 = new Base64(10, new byte[] { 0x0a }, true, CodecPolicy.LENIENT);
    assertTrue(base64.isUrlSafe());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsBase64_aXgs0_1() throws Exception {
        assertTrue(Base64.isBase64("SGVsbG8gV29ybGQ="));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsBase64_aXgs0_2() throws Exception {
        assertTrue(Base64.isBase64("SGVsbG8gV29ybGQh"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsBase64_aXgs0_3() throws Exception {
        assertTrue(Base64.isBase64("SGVsbG8gV29ybGQg"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_hnld0() throws Exception {
        byte[] binaryData = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        byte[] expectedResult = new byte[] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K' };
        assertArrayEquals(expectedResult, Base64.encodeBase64URLSafe(binaryData));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_xnpZ0() throws Exception {
        String base64String = "SGVsbG8gd29ybGQh";
        byte[] expected = "Hello world!".getBytes();
        assertArrayEquals(expected, Base64.decodeBase64(base64String));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithLineLength_FSEM1() throws Exception {
        String base64String = "SGVsbG8=\nd29ybGQh";
        byte[] expected = "Hello\nworld!".getBytes();
        assertArrayEquals(expected, Base64.decodeBase64(base64String));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithUrlSafe_vjJA2() throws Exception {
        String base64String = "SGVsbG8_d29ybGQh";
        byte[] expected = "Hello_world!".getBytes();
        assertArrayEquals(expected, Base64.decodeBase64(base64String));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_0_UVwF0() throws Exception {
    Base64 base64 = new Base64(0);
    byte byte0 = (byte) (-128);
    boolean bool0 = base64.isInAlphabet(byte0);
    assertEquals(false, bool0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_1_SfaB1() throws Exception {
    Base64 base64 = new Base64();
    byte byte0 = (byte) (127);
    boolean bool0 = base64.isInAlphabet(byte0);
    assertEquals(true, bool0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_2_tWfA2() throws Exception {
    Base64 base64 = new Base64(0);
    byte byte0 = (byte) (127);
    boolean bool0 = base64.isInAlphabet(byte0);
    assertEquals(true, bool0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString_uIyd0() throws Exception {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5};
        Base64 base64 = new Base64(true);
        String encodedString = Base64.encodeBase64URLSafeString(binaryData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_kQdk0() throws Exception {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = true;
        boolean urlSafe = true;
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_2_sCgd1() throws Exception {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = false;
        boolean urlSafe = false;
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_AvDC0() throws Exception {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        byte[] actual = Base64.encodeBase64Chunked(binaryData);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes1_LIWO0() throws Exception {
        BigInteger bigInt = new BigInteger("1234567890");
        byte[] expected = new byte[] {0, 12, 54, 108, 40, 16, 8, 4};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes3_Kpon2() throws Exception {
        BigInteger bigInt = new BigInteger("12345678901234567890");
        byte[] expected = new byte[] {0, 0, 0, 0, 12, 54, 108, 40, 16, 8, 4, 0};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_rYrz0() throws Exception {
    byte[] binaryData = new byte[]{0, 1, 2, 3};
    byte[] expected = new byte[]{0, 1, 2, 3};
    assert Arrays.equals(expected, Base64.encodeBase64(binaryData));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64UrlSafe_gXyK1() throws Exception {
    byte[] binaryData = new byte[]{0, 1, 2, 3};
    byte[] expected = new byte[]{0, 1, 2, 3};
    assert Arrays.equals(expected, Base64.encodeBase64(binaryData, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withEmptyInput_returnsEmptyOutput_zvdK0() throws Exception {
        Base64 base64 = new Base64();
        byte[] input = new byte[0];
        byte[] output = base64.encode(input);
        assertEquals("", new String(output));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withSingleByteInput_returnsCorrectOutput_IRXu1() throws Exception {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{65}; // ASCII value of 'A'
        byte[] output = base64.encode(input);
        assertEquals("QQ==", new String(output));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withMultipleByteInput_returnsCorrectOutput_NEQY2() throws Exception {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{65, 66, 67}; // ASCII values of 'A', 'B', 'C'
        byte[] output = base64.encode(input);
        assertEquals("QUI=", new String(output));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withUrlSafeOption_returnsCorrectOutput_zpUP3() throws Exception {
        Base64 base64 = new Base64(true);
        byte[] input = new byte[]{65, 66, 67}; // ASCII values of 'A', 'B', 'C'
        byte[] output = base64.encode(input);
        assertEquals("QUI=", new String(output));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withLineLengthOption_returnsCorrectOutput_azbT4() throws Exception {
        Base64 base64 = new Base64(76);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base64.encode(input);
        assertEquals("QUIFQUEsRUQ=\nTUVUSE9E\n", new String(output));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withCustomLineSeparator_returnsCorrectOutput_jXGg5() throws Exception {
        Base64 base64 = new Base64(76, new byte[]{13, 10});
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base64.encode(input);
        assertEquals("QUIFQUEsRUQ=\r\nTUVUSE9E\r\n", new String(output));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorDefault_JHLd0() throws Exception {
        Base64 base64 = new Base64();
        byte[] expected = null;
        byte[] actual = base64.getLineSeparator();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithLineLength_dewt1() throws Exception {
        Base64 base64 = new Base64(10);
        byte[] expected = null;
        byte[] actual = base64.getLineSeparator();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithLineLengthAndSeparator_mfHu2() throws Exception {
        Base64 base64 = new Base64(10, new byte[]{'\n'});
        byte[] expected = new byte[]{'\n'};
        byte[] actual = base64.getLineSeparator();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithUrlSafe_FZtF3() throws Exception {
        Base64 base64 = new Base64(true);
        byte[] expected = null;
        byte[] actual = base64.getLineSeparator();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithLineLengthAndSeparatorAndUrlSafe_SgGy4() throws Exception {
        Base64 base64 = new Base64(10, new byte[]{'\n'}, true);
        byte[] expected = new byte[]{'\n'};
        byte[] actual = base64.getLineSeparator();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithDecodingPolicy_hUwf5() throws Exception {
        Base64 base64 = new Base64(10, new byte[]{'\n'}, true, CodecPolicy.STRICT);
        byte[] expected = new byte[]{'\n'};
        byte[] actual = base64.getLineSeparator();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_badB0() throws Exception {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = true;
        boolean urlSafe = true;
        int maxResultSize = 100;
        byte[] expected = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithNoData_Jxdh1() throws Exception {
        byte[] binaryData = new byte[]{};
        boolean isChunked = true;
        boolean urlSafe = true;
        int maxResultSize = 100;
        byte[] expected = new byte[]{};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithMaxResultSize_iPcB2() throws Exception {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = true;
        boolean urlSafe = true;
        int maxResultSize = 0;
        try {
            Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithNoChunking_zeHv3() throws Exception {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = false;
        boolean urlSafe = true;
        int maxResultSize = 100;
        byte[] expected = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithNoUrlSafe_DjaS4() throws Exception {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = true;
        boolean urlSafe = false;
        int maxResultSize = 100;
        byte[] expected = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String_dYna0() throws Exception {
        byte[] binaryData = new byte[0];
        String expected = "";
        String actual = Base64.encodeBase64String(binaryData);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger_OdXT0() throws Exception {
        byte[] pArray = {};
        BigInteger expected = new BigInteger("0");
        BigInteger actual = Base64.decodeInteger(pArray);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger1_FpYI1() throws Exception {
        byte[] pArray = {127};
        BigInteger expected = new BigInteger("127");
        BigInteger actual = Base64.decodeInteger(pArray);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger2_JfyQ2() throws Exception {
        byte[] pArray = {127, 127};
        BigInteger expected = new BigInteger("8388607");
        BigInteger actual = Base64.decodeInteger(pArray);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger3_bQRv3() throws Exception {
        byte[] pArray = {127, 127, 127};
        BigInteger expected = new BigInteger("50331648");
        BigInteger actual = Base64.decodeInteger(pArray);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger4_Xltw4() throws Exception {
        byte[] pArray = {127, 127, 127, 127};
        BigInteger expected = new BigInteger("3221225472");
        BigInteger actual = Base64.decodeInteger(pArray);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger5_ooSI5() throws Exception {
        byte[] pArray = {127, 127, 127, 127, 127};
        BigInteger expected = new BigInteger("2147483648");
        BigInteger actual = Base64.decodeInteger(pArray);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger6_vVrZ6() throws Exception {
        byte[] pArray = {127, 127, 127, 127, 127, 127};
        BigInteger expected = new BigInteger("16106127360");
        BigInteger actual = Base64.decodeInteger(pArray);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger7_MmZY7() throws Exception {
        byte[] pArray = {127, 127, 127, 127, 127, 127, 127};
        BigInteger expected = new BigInteger("117440512000");
        BigInteger actual = Base64.decodeInteger(pArray);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger8_BFjZ8() throws Exception {
        byte[] pArray = {127, 127, 127, 127, 127, 127, 127, 127};
        BigInteger expected = new BigInteger("858993459200");
        BigInteger actual = Base64.decodeInteger(pArray);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger9_rVJg9() throws Exception {
        byte[] pArray = {127, 127, 127, 127, 127, 127, 127, 127, 127};
        BigInteger expected = new BigInteger("6148914691232");
        BigInteger actual = Base64.decodeInteger(pArray);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger10_Frcw10() throws Exception {
        byte[] pArray = {127, 127, 127, 127, 127, 127, 127, 127, 127, 127};
        BigInteger expected = new BigInteger("42949672960000");
        BigInteger actual = Base64.decodeInteger(pArray);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInteger_UkBI0() throws Exception {
        BigInteger bigInteger = new BigInteger("1234567890");
        byte[] expected = {49, 50, 51, 52, 53, 54, 55, 56, 57, 48};
        byte[] actual = Base64.encodeInteger(bigInteger);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeIntegerWithNullBigInteger_Uhlk1() throws Exception {
        BigInteger bigInteger = null;
        byte[] expected = {};
        byte[] actual = Base64.encodeInteger(bigInteger);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeIntegerWithNegativeBigInteger_RIUA2() throws Exception {
        BigInteger bigInteger = new BigInteger("-1234567890");
        byte[] expected = {45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48};
        byte[] actual = Base64.encodeInteger(bigInteger);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeIntegerWithZeroBigInteger_JSXa3() throws Exception {
        BigInteger bigInteger = new BigInteger("0");
        byte[] expected = {48};
        byte[] actual = Base64.encodeInteger(bigInteger);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeIntegerWithMaxBigInteger_wGLu4() throws Exception {
        BigInteger bigInteger = new BigInteger("170141183460469231731687303715884105727");
        byte[] expected = {49, 55, 48, 49, 52, 49, 49, 56, 51, 52, 54, 48, 52, 54, 57, 50, 51, 49, 55, 51, 49, 54, 56, 55, 51, 48, 51, 55, 49, 53, 56, 56, 52, 49, 48, 53, 55, 50, 55};
        byte[] actual = Base64.encodeInteger(bigInteger);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNoInput_hGcU0() throws Exception {
        byte[] input = new byte[0];
        Base64 base64 = new Base64();
        byte[] output = base64.decode(input);
        assertArrayEquals(new byte[0], output);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSingleByteInput_IbHw1() throws Exception {
        byte[] input = new byte[]{65}; // 'A'
        Base64 base64 = new Base64();
        byte[] output = base64.decode(input);
        assertArrayEquals(new byte[]{65}, output);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithTwoByteInput_bvpX2() throws Exception {
        byte[] input = new byte[]{65, 66}; // 'AB'
        Base64 base64 = new Base64();
        byte[] output = base64.decode(input);
        assertArrayEquals(new byte[]{65, 66}, output);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithThreeByteInput_Pedi3() throws Exception {
        byte[] input = new byte[]{65, 66, 67}; // 'ABC'
        Base64 base64 = new Base64();
        byte[] output = base64.decode(input);
        assertArrayEquals(new byte[]{65, 66, 67}, output);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithFourByteInput_XTCv4() throws Exception {
        byte[] input = new byte[]{65, 66, 67, 68}; // 'ABCD'
        Base64 base64 = new Base64();
        byte[] output = base64.decode(input);
        assertArrayEquals(new byte[]{65, 66, 67, 68}, output);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithFiveByteInput_NeWn5() throws Exception {
        byte[] input = new byte[]{65, 66, 67, 68, 69}; // 'ABCDE'
        Base64 base64 = new Base64();
        byte[] output = base64.decode(input);
        assertArrayEquals(new byte[]{65, 66, 67, 68, 69}, output);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSixByteInput_StOR6() throws Exception {
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70}; // 'ABCDEF'
        Base64 base64 = new Base64();
        byte[] output = base64.decode(input);
        assertArrayEquals(new byte[]{65, 66, 67, 68, 69, 70}, output);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSevenByteInput_DOAE7() throws Exception {
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71}; // 'ABCDEFG'
        Base64 base64 = new Base64();
        byte[] output = base64.decode(input);
        assertArrayEquals(new byte[]{65, 66, 67, 68, 69, 70, 71}, output);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEightByteInput_CITJ8() throws Exception {
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72}; // 'ABCDEFGH'
        Base64 base64 = new Base64();
        byte[] output = base64.decode(input);
        assertArrayEquals(new byte[]{65, 66, 67, 68, 69, 70, 71, 72}, output);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNineByteInput_XMSE9() throws Exception {
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73}; // 'ABCDEFGHI'
        Base64 base64 = new Base64();
        byte[] output = base64.decode(input);
        assertArrayEquals(new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73}, output);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_0_QeMX0() throws Exception {
	byte[] arrayOctet = null;
	boolean result = Base64.isBase64(arrayOctet);
	assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_1_QVjJ1() throws Exception {
	byte[] arrayOctet = new byte[] { 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119 };
	boolean result = Base64.isBase64(arrayOctet);
	assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_0_VHVT0() throws Exception {
    byte octet = (byte) 0;
    boolean result = Base64.isBase64(octet);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_1_xLEl1() throws Exception {
    byte octet = (byte) 1;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_2_MeYn2() throws Exception {
    byte octet = (byte) 2;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_3_cqcp3() throws Exception {
    byte octet = (byte) 3;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_4_VPdc4() throws Exception {
    byte octet = (byte) 4;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_5_ELDy5() throws Exception {
    byte octet = (byte) 5;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_6_oHwI6() throws Exception {
    byte octet = (byte) 6;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_7_bkdU7() throws Exception {
    byte octet = (byte) 7;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_8_LSzy8() throws Exception {
    byte octet = (byte) 8;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_9_IiNq9() throws Exception {
    byte octet = (byte) 9;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_10_wPlm10() throws Exception {
    byte octet = (byte) 10;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_11_GvMi11() throws Exception {
    byte octet = (byte) 11;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_12_iYOD12() throws Exception {
    byte octet = (byte) 12;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_13_oLUF13() throws Exception {
    byte octet = (byte) 13;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_14_IpiW14() throws Exception {
    byte octet = (byte) 14;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_15_gncc15() throws Exception {
    byte octet = (byte) 15;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_16_xCXl16() throws Exception {
    byte octet = (byte) 16;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_17_zTXU17() throws Exception {
    byte octet = (byte) 17;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_18_SfmX18() throws Exception {
    byte octet = (byte) 18;
    boolean result = Base64.isBase64(octet);
    assertFalse(result);
}
}