/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Random;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Random;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sha2Crypt_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_DKgb0() throws Exception {
        byte[] keyBytes = new byte[10];
        Sha2Crypt.sha512Crypt(keyBytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithSalt_hhFb1() throws Exception {
        byte[] keyBytes = new byte[10];
        String salt = "salt";
        Sha2Crypt.sha512Crypt(keyBytes, salt);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithSalt_XhFn0() throws Exception {
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$12345678";
        SecureRandom random = new SecureRandom();
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt, random);
        Assertions.assertEquals("$5$12345678$Tq.vX6228G2lG307.5r.v1", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithoutSalt_YHLJ1_1() throws Exception {
        byte[] keyBytes = "password".getBytes();
        SecureRandom random = new SecureRandom();
        String result = Sha2Crypt.sha256Crypt(keyBytes, null, random);
        Assertions.assertTrue(result.startsWith("$5$"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithoutSalt_YHLJ1_2() throws Exception {
        byte[] keyBytes = "password".getBytes();
        SecureRandom random = new SecureRandom();
        String result = Sha2Crypt.sha256Crypt(keyBytes, null, random);
        Assertions.assertTrue(result.length() == 60);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_jezO0() throws Exception {
        String expected = "$5$rounds=5000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21";
        byte[] keyBytes = "test".getBytes();
        String salt = "$5$rounds=5000$usesomesillystri$";
        String actual = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptDefaultSalt_ECOu1() throws Exception {
        String expected = "$5$0123456789abcdef$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21";
        byte[] keyBytes = "test".getBytes();
        String actual = Sha2Crypt.sha256Crypt(keyBytes, null);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithSalt_traL0() throws NoSuchAlgorithmException {
        byte[] keyBytes = "password".getBytes();
        String salt = "$6$12345678$";
        Random random = new SecureRandom();
        String result = Sha2Crypt.sha512Crypt(keyBytes, salt, random);
        assertEquals("$6$12345678$cX.1.1.5.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithoutSalt_Euqw1() throws NoSuchAlgorithmException {
        byte[] keyBytes = "password".getBytes();
        String result = Sha2Crypt.sha512Crypt(keyBytes, null, new SecureRandom());
        assertEquals("$6$12345678$cX.1.1.5.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1", result.substring(0, 83));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt_vFSk0() throws Exception {
    byte[] keyBytes = new byte[0];
    String actual = Sha2Crypt.sha256Crypt(keyBytes);
    String expected = "";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt2_Xmcs1() throws Exception {
    byte[] keyBytes = new byte[1];
    String actual = Sha2Crypt.sha256Crypt(keyBytes);
    String expected = "";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt3_uMpg2() throws Exception {
    byte[] keyBytes = new byte[2];
    String actual = Sha2Crypt.sha256Crypt(keyBytes);
    String expected = "";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt4_bxLF3() throws Exception {
    byte[] keyBytes = new byte[3];
    String actual = Sha2Crypt.sha256Crypt(keyBytes);
    String expected = "";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt5_USiq4() throws Exception {
    byte[] keyBytes = new byte[4];
    String actual = Sha2Crypt.sha256Crypt(keyBytes);
    String expected = "";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt6_qRsY5() throws Exception {
    byte[] keyBytes = new byte[5];
    String actual = Sha2Crypt.sha256Crypt(keyBytes);
    String expected = "";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt7_TKLS6() throws Exception {
    byte[] keyBytes = new byte[6];
    String actual = Sha2Crypt.sha256Crypt(keyBytes);
    String expected = "";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt8_Eihi7() throws Exception {
    byte[] keyBytes = new byte[7];
    String actual = Sha2Crypt.sha256Crypt(keyBytes);
    String expected = "";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt9_kLDi8() throws Exception {
    byte[] keyBytes = new byte[8];
    String actual = Sha2Crypt.sha256Crypt(keyBytes);
    String expected = "";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt10_OIZV9() throws Exception {
    byte[] keyBytes = new byte[9];
    String actual = Sha2Crypt.sha256Crypt(keyBytes);
    String expected = "";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt11_Cmwb10() throws Exception {
    byte[] keyBytes = new byte[10];
    String actual = Sha2Crypt.sha256Crypt(keyBytes);
    String expected = "";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt12_qgtR11() throws Exception {
    byte[] keyBytes = new byte[11];
    String actual = Sha2Crypt.sha256Crypt(keyBytes);
    String expected = "";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt13_lVDE12() throws Exception {
    byte[] keyBytes = new byte[12];
    String actual = Sha2Crypt.sha256Crypt(keyBytes);
    String expected = "";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt14_Jjph13() throws Exception {
    byte[] keyBytes = new byte[13];
    String actual = Sha2Crypt.sha256Crypt(keyBytes);
    String expected = "";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt15_Bawu14() throws Exception {
    byte[] keyBytes = new byte[14];
    String actual = Sha2Crypt.sha256Crypt(keyBytes);
    String expected = "";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt16_ziHd15() throws Exception {
    byte[] keyBytes = new byte[15];
    String actual = Sha2Crypt.sha256Crypt(keyBytes);
    String expected = "";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Crypt17_NRXr16() throws Exception {
    byte[] keyBytes = new byte[16];
    String actual = Sha2Crypt.sha256Crypt(keyBytes);
    String expected = "";
    assertEquals(expected, actual);
}
}