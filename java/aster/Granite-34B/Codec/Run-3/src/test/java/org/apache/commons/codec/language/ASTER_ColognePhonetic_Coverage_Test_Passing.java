/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ColognePhonetic_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testColognePhonetic_EGhC1() {
		ColognePhonetic colognePhonetic = new ColognePhonetic();
		String text = "Eszett";
		String result = colognePhonetic.colognePhonetic(text);
		String expected = "80000000";
		assert result.equals(expected);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithInvalidInput_DZop0() throws org.apache.commons.codec.EncoderException {
    ColognePhonetic encoder = new ColognePhonetic();
    Object object = new Object();
    try {
        encoder.encode(object);
        fail("Expected EncoderException was not thrown");
    } catch (EncoderException e) {
        assertEquals("This method's parameter was expected to be of the type java.lang.String. But actually it was of the type java.lang.Object.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithValidInput_LKHn1() throws org.apache.commons.codec.EncoderException {
    ColognePhonetic encoder = new ColognePhonetic();
    String input = "Hello";
    String expectedOutput = "Hallw";
    assertEquals(expectedOutput, encoder.encode(input));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithEmptyInput_xqto3() throws org.apache.commons.codec.EncoderException {
    ColognePhonetic encoder = new ColognePhonetic();
    String input = "";
    String expectedOutput = "";
    assertEquals(expectedOutput, encoder.encode(input));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithInvalidInputOfWrongType_qjOi4() throws org.apache.commons.codec.EncoderException {
    ColognePhonetic encoder = new ColognePhonetic();
    Integer input = 123;
    try {
        encoder.encode(input);
        fail("Expected EncoderException was not thrown");
    } catch (EncoderException e) {
        assertEquals("This method's parameter was expected to be of the type java.lang.String. But actually it was of the type java.lang.Integer.", e.getMessage());
    }
}
}