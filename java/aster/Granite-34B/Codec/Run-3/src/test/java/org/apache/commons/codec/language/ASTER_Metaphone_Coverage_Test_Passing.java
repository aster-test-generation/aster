/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Metaphone_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithWrongInput_kuLs0_1() throws org.apache.commons.codec.EncoderException {
    Metaphone metaphone = new Metaphone();
    Object obj = 123;
    EncoderException exception = Assertions.assertThrows(EncoderException.class, () -> metaphone.encode(obj));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNullInput_IzHG2_1() throws org.apache.commons.codec.EncoderException {
    Metaphone metaphone = new Metaphone();
    Object obj = null;
    EncoderException exception = Assertions.assertThrows(EncoderException.class, () -> metaphone.encode(obj));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithWrongInput_kuLs0() throws org.apache.commons.codec.EncoderException {
    Metaphone metaphone = new Metaphone();
    Object obj = 123;
    EncoderException exception = Assertions.assertThrows(EncoderException.class, () -> metaphone.encode(obj));
    assertEquals("Parameter supplied to Metaphone encode is not of type java.lang.String", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNullInput_IzHG2() throws org.apache.commons.codec.EncoderException {
    Metaphone metaphone = new Metaphone();
    Object obj = null;
    EncoderException exception = Assertions.assertThrows(EncoderException.class, () -> metaphone.encode(obj));
    assertEquals("Parameter supplied to Metaphone encode is not of type java.lang.String", exception.getMessage());
}
}