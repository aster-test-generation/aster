/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BinaryCodec_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_WhenArgumentNotByteArray_ThenEncoderException_tiQH0() throws org.apache.commons.codec.EncoderException {
        BinaryCodec binaryCodec = new BinaryCodec();
        Object raw = new Object();
        try {
            binaryCodec.encode(raw);
        } catch (EncoderException e) {
            assert (true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromAscii3_JmRS2() {
    byte[] ascii = new byte[] {'0', '0', '0', '0', '0', '0', '0', '0'};
    byte[] expected = new byte[] {0};
    assertArrayEquals(expected, BinaryCodec.fromAscii(ascii));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_5_Vorf4() throws org.apache.commons.codec.DecoderException {
	BinaryCodec binaryCodec = new BinaryCodec();
	Object ascii = new Object();
	try {
		binaryCodec.decode(ascii);
		fail("Exception expected");
	} catch (Exception e) {
		assertEquals("argument not a byte array", e.getMessage());
	}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromAscii2_XWRE1_HngE0() {
    byte[] ascii = new byte[] {'1', '1', '1', '1', '1', '1', '1', '1'};
    byte[] expected = new byte[] {(byte) 255};
    assertArrayEquals(expected, BinaryCodec.fromAscii(ascii));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromAscii1_dXTr0_fid2() {
    byte[] ascii = new byte[] {'1', '0', '1', '0', '1', '0', '1', '0'};
    byte[] expected = new byte[] {-86};
    assertArrayEquals(expected, BinaryCodec.fromAscii(ascii));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_4_ofjY3_fid2() throws org.apache.commons.codec.DecoderException {
	BinaryCodec binaryCodec = new BinaryCodec();
	String ascii = "";
	Object expected = new byte[0];
	Object actual = binaryCodec.decode(ascii);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_6_haon5_fid2() throws org.apache.commons.codec.DecoderException {
	BinaryCodec binaryCodec = new BinaryCodec();
	byte[] ascii = new byte[] { 0 };
	Object expected = new byte[] { 0 };
	Object actual = binaryCodec.decode(ascii);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_7_DeVM6_fid2() throws org.apache.commons.codec.DecoderException {
	BinaryCodec binaryCodec = new BinaryCodec();
	char[] ascii = new char[] { 0 };
	Object expected = new byte[] { 0 };
	Object actual = binaryCodec.decode(ascii);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_8_xXLC7_fid2() throws org.apache.commons.codec.DecoderException {
	BinaryCodec binaryCodec = new BinaryCodec();
	String ascii = "0";
	Object expected = new byte[] { 0 };
	Object actual = binaryCodec.decode(ascii);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_fromAscii_with1_wUsF2_oajz0_fid2() {
	char[] ascii = {'1', '0', '1', '0', '1', '0', '1', '0'};
	byte[] expected = {-86};
	byte[] actual = BinaryCodec.fromAscii(ascii);
	assertEquals(expected[0], actual[0]);
}
}