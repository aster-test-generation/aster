/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.security.NoSuchAlgorithmException;
import javax.crypto.Mac;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_HmacUtils_Coverage_Test_Passing {
	private static Mac getInitializedMac(final HmacAlgorithms algorithm, final byte[] key)
	{
		return null;
	}
private void assertArraysEqual(byte[] expected, byte[] actual) {
    assertEquals(expected.length, actual.length);
    for (int i = 0; i < expected.length; i++) {
        assertEquals(expected[i], actual[i]);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getHmacSha256_0_ihJH0() throws Exception {
		HmacUtils tested = new HmacUtils();
		Mac result = HmacUtils.getHmacSha256(new byte[0]);
		assertNotNull(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacSha512Test1_bTMp0() {
	byte[] key = new byte[0];
	byte[] valueToDigest = new byte[0];
	byte[] expected =HmacUtils.hmacSha512(key, valueToDigest);
	byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
	assertArraysEqual(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacSha384Test_kibA0() {
    String key = "key";
    String valueToDigest = "valueToDigest";
    byte[] expected =HmacUtils.hmacSha384(key, valueToDigest);
    byte[] actual = HmacUtils.hmacSha384(key, valueToDigest);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacSha384HexTest1_sZFj0() {
    String key = "key";
    String valueToDigest = "value";
    String expected = "3b4c4f9d4d1f2c6c62c6c9153b153f4f";
    String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_with_null_MAZz2() {
    String name = null;
    boolean actual = HmacUtils.isAvailable(name);
    assertFalse(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_with_empty_string_dpFp3() {
    String name = "";
    boolean actual = HmacUtils.isAvailable(name);
    assertFalse(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacSha1_hmac_sha_1_Vcya0() {
    byte[] key = new byte[0];
    byte[] valueToDigest = new byte[0];
    byte[] hmac = HmacUtils.hmacSha1(key, valueToDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacSha512HexTest1_Gkgw0() {
    String key = "key";
    String valueToDigest = "valueToDigest";
    String expected = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmacHex(valueToDigest);
    String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getHmacMd5Test1_jBaa0() {
	HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
	Mac mac = hmacUtils.getHmacMd5("key".getBytes());
	assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHmacSha256Hex_sggJ0() {
    byte[] key = new byte[10];
    byte[] valueToDigest = new byte[10];
    String expected = "expected";
    String actual = HmacUtils.hmacSha256Hex(key, valueToDigest);
    assertEquals(expected, actual);
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void hmacSha256Test1_dlOt0() {
		String key = "key";
		String valueToDigest = "valueToDigest";
		byte[] expected = new byte[0]; // set the expected value here
		byte[] actual = HmacUtils.hmacSha256(key, valueToDigest);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_kxvN0() {
		HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
		assertEquals("expected", hmacUtils.getHmacSha1(new byte[] {0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b}));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHmacSha256Hex_byTZ0() {
		String key = "key";
		String valueToDigest = "valueToDigest";
		String expected = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key).hmacHex(valueToDigest);
		String actual = HmacUtils.hmacSha256Hex(key, valueToDigest);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacSha512HexTest_xLto0() {
    byte[] key = new byte[0];
    byte[] valueToDigest = new byte[0];
    String expected = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmacHex(valueToDigest);
    String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacMd5HexTest_UQQw0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        assertEquals("expected", hmacUtils.hmacHex("valueToDigest"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacSha1Test1_yqYE0() {
    byte[] expected =HmacUtils.hmacSha1("key", "valueToDigest");
    byte[] actual = HmacUtils.hmacSha1("key", "valueToDigest");
    assertArraysEqual(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacSha1Test2_Hpmq1() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
    byte[] expected = hmacUtils.hmac("valueToDigest");
    byte[] actual = HmacUtils.hmacSha1("key", "valueToDigest");
    assertArraysEqual(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacSha1Test3_dXij2() {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
    byte[] expected = hmacUtils.hmac("valueToDigest");
    byte[] actual = HmacUtils.hmacSha1("key", "valueToDigest");
    assertArraysEqual(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacSha1Test4_gtzk3() {
    HmacUtils hmacUtils = new HmacUtils("HmacSHA1", "key".getBytes());
    byte[] expected = hmacUtils.hmac("valueToDigest");
    byte[] actual = HmacUtils.hmacSha1("key", "valueToDigest");
    assertArraysEqual(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacSha1Test5_jUly4() {
    HmacUtils hmacUtils = new HmacUtils("HmacSHA1", "key");
    byte[] expected = hmacUtils.hmac("valueToDigest");
    byte[] actual = HmacUtils.hmacSha1("key", "valueToDigest");
    assertArraysEqual(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacMd5Hex_shouldReturnCorrectHexdigest_whenCalledWithValidArguments_psAQ0() {
    byte[] key = new byte[] {0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b};
    byte[] valueToDigest = "Hi There".getBytes();
    String expectedHexDigest = "9294727a3638bb1c13f48ef8158b05a0";
    String actualHexDigest = HmacUtils.hmacMd5Hex(key, valueToDigest);
    assertEquals(expectedHexDigest, actualHexDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacMd5_test1_hSoL0() {
	HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
	byte[] valueToDigest = new byte[] { 1, 2, 3 };
	byte[] result = hmacUtils.hmac(valueToDigest);
	byte[] expected = new byte[] { -42, 57, -10, -97, 58, 80, 61, -73, -95, -44, -35, -64, -35, -65, 39, -83, 55, -21, -56, 104 };
	assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacMd5Test1_IQcl0() {
	String key = "key";
	String valueToDigest = "valueToDigest";
	byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
	byte[] expected = new byte[0];
	assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacMd5Test2_HxXp1() {
	String key = "key";
	String valueToDigest = "valueToDigest";
	byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
	byte[] expected = new byte[10];
	assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacMd5Test3_AMyZ2() {
	String key = "key";
	String valueToDigest = "valueToDigest";
	byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
	byte[] expected = new byte[20];
	assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_qYAT0() {
        String expected = "123456";
        String actual = HmacUtils.hmacSha384Hex("key".getBytes(), "value".getBytes());
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getHmacSha384_0_sNMy0() throws Exception {
    byte[] key = new byte[0];
    Mac mac = HmacUtils.getHmacSha384(key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getHmacSha384_1_MoLu1() throws Exception {
    byte[] key = new byte[20];
    Mac mac = HmacUtils.getHmacSha384(key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getHmacSha384_2_wClx2() throws Exception {
    byte[] key = new byte[32];
    Mac mac = HmacUtils.getHmacSha384(key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getHmacSha384_3_cpog3() throws Exception {
    byte[] key = new byte[64];
    Mac mac = HmacUtils.getHmacSha384(key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getHmacSha384_4_bQkm4() throws Exception {
    byte[] key = new byte[16];
    Mac mac = HmacUtils.getHmacSha384(key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getHmacSha384_5_xqnN5() throws Exception {
    byte[] key = new byte[48];
    Mac mac = HmacUtils.getHmacSha384(key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getHmacSha384_6_faHo6() throws Exception {
    byte[] key = new byte[8];
    Mac mac = HmacUtils.getHmacSha384(key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getHmacSha384_7_GMOp7() throws Exception {
    byte[] key = new byte[5];
    Mac mac = HmacUtils.getHmacSha384(key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getHmacSha384_8_xobn8() throws Exception {
    byte[] key = new byte[7];
    Mac mac = HmacUtils.getHmacSha384(key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_getHmacSha384_9_bted9() throws Exception {
    byte[] key = new byte[1];
    Mac mac = HmacUtils.getHmacSha384(key);
    assertNotNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacSha1Hex1_SdjR0() {
    String key = "key";
    String valueToDigest = "valueToDigest";
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
    String hmacHex = hmacUtils.hmacHex(valueToDigest);
    Assertions.assertEquals("1a5e1e6d2c2c7a3d2e2e7a3d", hmacHex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacSha1HexTest1_cdXp0() {
    String expected = "4f4ca3d5d68ba7cc0a1208c9c61e9c5da0403c0a";
    String result = HmacUtils.hmacSha1Hex(new byte[]{0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b}, new byte[]{0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65});
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacSha1HexTest2_oTMl1() {
    String expected = "de7c9b85b8b78aa6bc8a7a36f70a90701c9db4d9";
    String result = HmacUtils.hmacSha1Hex(new byte[]{0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a}, new byte[]{0x54, 0x65, 0x73, 0x74, 0x20, 0x57, 0x69, 0x74, 0x68, 0x20, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e});
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacSha1HexTest3_Erlt2() {
    String expected = "b617318655057264e28bc0b6fb378c8ef146be00";
    String result = HmacUtils.hmacSha1Hex(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}, new byte[50]);
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_TCTA0_AECA0() {
    HmacAlgorithms name = HmacAlgorithms.HMAC_SHA_512;
    try {
        Mac.getInstance(name.getName());
        assertTrue(true);
    } catch (final NoSuchAlgorithmException e) {
        assertTrue(false);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacSha1Test1_yqYE0_StOK0() {
    byte[] expected =HmacUtils.hmacSha1("key", "valueToDigest");
    byte[] actual = HmacUtils.hmacSha1("key", "valueToDigest");
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void hmacSha512Test1_bTMp0_jRFZ0() {
	byte[] key = new byte[0];
	byte[] valueToDigest = new byte[0];
	byte[] expected =HmacUtils.hmacSha512(key, valueToDigest);
	byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
	Arrays.equals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_Itru0_lLaa0() throws NoSuchAlgorithmException {
    String name = "hmac";
    Mac mac = Mac.getInstance(name);
    boolean actual = HmacUtils.isAvailable(name);
    assertTrue(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_with_no_such_algorithm_dqsV1_FZxg0() {
    String name = "hmac";
    Mac mac = null;
    try {
        mac = Mac.getInstance(name);
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }
    boolean actual = HmacUtils.isAvailable(name);
    assertFalse(actual);
}
}