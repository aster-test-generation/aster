/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Base32_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsInAlphabet_mSfE0_1() {
		Base32 base32 = new Base32();
		assertTrue(base32.isInAlphabet((byte) 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsInAlphabet_mSfE0_2() {
		Base32 base32 = new Base32();
		assertFalse(base32.isInAlphabet((byte) -1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsInAlphabet_mSfE0_3() {
		Base32 base32 = new Base32();
		assertFalse(base32.isInAlphabet((byte) 100));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_1_NDIJ0_WCwa0() {
        Base32 base32 = new Base32();
        byte[] input = new byte[0];
        int inPos = 0;
        int inAvail = 0;
        Base32.Context context = new Base32.Context();
        byte[] expected = new byte[0];
        base32.encode(input, inPos, inAvail, context);
        byte[] actual = context.buffer;
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_6_iKrv5_sQZB0() {
        Base32 base32 = new Base32();
        byte[] input = new byte[5];
        int inPos = 0;
        int inAvail = -1;
        Base32.Context context = new Base32.Context();
        context.eof = true;
        byte[] expected = new byte[0];
        base32.encode(input, inPos, inAvail, context);
        byte[] actual = context.buffer;
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_3_nqUL2_dYzB0() {
        Base32 base32 = new Base32();
        byte[] input = new byte[2];
        int inPos = 0;
        int inAvail = -1;
        Base32.Context context = new Base32.Context();
        context.eof = true;
        byte[] expected = new byte[0];
        base32.encode(input, inPos, inAvail, context);
        byte[] actual = context.buffer;
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_8_tOjW7_HLsq0() {
        Base32 base32 = new Base32();
        byte[] input = new byte[7];
        int inPos = 0;
        int inAvail = -1;
        Base32.Context context = new Base32.Context();
        context.eof = true;
        byte[] expected = new byte[0];
        byte[] actual = new byte[0];
        base32.encode(input, inPos, inAvail, context);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_2_ZPPV1_oomo0() {
        Base32 base32 = new Base32();
        byte[] input = new byte[1];
        int inPos = 0;
        int inAvail = -1;
        Base32.Context context = new Base32.Context();
        context.eof = true;
        byte[] expected = new byte[0];
        base32.encode(input, inPos, inAvail, context);
        assertTrue(context.pos >= 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsInAlphabet_mSfE0() {
		Base32 base32 = new Base32();
		assertTrue(base32.isInAlphabet((byte) 0));
		assertFalse(base32.isInAlphabet((byte) -1));
		assertFalse(base32.isInAlphabet((byte) 100));
	}
}