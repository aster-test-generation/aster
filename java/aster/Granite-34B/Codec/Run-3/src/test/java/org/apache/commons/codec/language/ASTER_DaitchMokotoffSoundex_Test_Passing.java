/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DaitchMokotoffSoundex_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNullSource_BqIi0() throws Exception {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String actual = soundex.encode(null);
        String expected = null;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmptySource_yFSH1() throws Exception {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String actual = soundex.encode("");
        String expected = "";
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithString_cPKp0() throws EncoderException {
    DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
    String input = "test";
    String expected = dms.encode(input);
    String actual = dms.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNonString_IvFp1() throws Exception {
    DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
    Object input = 123;
    try {
        dms.encode(input);
        fail("Expected EncoderException");
    } catch (EncoderException e) {
        assertEquals("Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_OneBranch_pauL0() throws Exception {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String source = "John";
        String expected = "J500";
        String actual = soundex.soundex(source);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_MultipleBranches_IZZY1() throws Exception {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String source = "Jackson";
        String expected = "J250|J251";
        String actual = soundex.soundex(source);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_NullInput_JiOL2() throws Exception {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String source = null;
        String expected = null;
        String actual = soundex.soundex(source);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_luak0_1() throws Exception {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("0000", soundex.soundex(""));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_luak0_2() throws Exception {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("0000", soundex.soundex(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_luak0_3() throws Exception {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("W630", soundex.soundex("Woonsocket"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithFolding_BPUz1_1() throws Exception {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
        assertEquals("W630", soundex.soundex("Woonsocket"));}
}