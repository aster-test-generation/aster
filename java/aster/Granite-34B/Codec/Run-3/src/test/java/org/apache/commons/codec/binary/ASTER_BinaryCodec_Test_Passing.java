/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BinaryCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_nwIb0() throws Exception {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] ascii = new byte[]{65, 66, 67};
        byte[] expected = new byte[]{65, 66, 67};
        assertArrayEquals(expected, binaryCodec.decode(ascii));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncode_XBNb0() throws Exception {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] expected = {49, 50, 51};
        byte[] actual = binaryCodec.encode(new byte[]{1, 2, 3});
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtoByteArrayWithNullInput_bdhB0() throws Exception {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] expected = new byte[0];
        assertArrayEquals(expected, binaryCodec.toByteArray(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtoByteArrayWithNonNullInput_evRe1() throws Exception {
        BinaryCodec binaryCodec = new BinaryCodec();
        String ascii = "Hello, World!";
        byte[] expected = binaryCodec.fromAscii(ascii.toCharArray());
        assertArrayEquals(expected, binaryCodec.toByteArray(ascii));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithNullArray_HrIw0() throws Exception {
        byte[] array = null;
        assertTrue(BinaryCodec.isEmpty(array));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithEmptyArray_gVIF1() throws Exception {
        byte[] array = new byte[0];
        assertTrue(BinaryCodec.isEmpty(array));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithNonEmptyArray_TUtR2() throws Exception {
        byte[] array = new byte[]{1, 2, 3};
        assertFalse(BinaryCodec.isEmpty(array));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_CnFo0() throws DecoderException {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] ascii = new byte[0];
        byte[] expected = new byte[0];
        assertArrayEquals(expected, binaryCodec.decode(ascii));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidInput_Pxqk1() throws Exception {
        BinaryCodec binaryCodec = new BinaryCodec();
        Object raw = new Object();
        try {
            binaryCodec.encode(raw);
        } catch (EncoderException e) {
            assertEquals("argument not a byte array", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiChars_EmptyArray_iTKp0() throws Exception {
        char[] result = BinaryCodec.toAsciiChars(new byte[0]);
        assertTrue(result.length == 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiChars_OneByte_LTRT1_1() throws Exception {
        byte[] input = new byte[] { 0x01 };
        char[] result = BinaryCodec.toAsciiChars(input);
        assertTrue(result.length == 8);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiChars_OneByte_LTRT1_2() throws Exception {
        byte[] input = new byte[] { 0x01 };
        char[] result = BinaryCodec.toAsciiChars(input);
        assertTrue(new String(result).equals("00000001"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiChars_TwoBytes_MkPt2_1() throws Exception {
        byte[] input = new byte[] { 0x01, 0x02 };
        char[] result = BinaryCodec.toAsciiChars(input);
        assertTrue(result.length == 16);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiChars_TwoBytes_MkPt2_2() throws Exception {
        byte[] input = new byte[] { 0x01, 0x02 };
        char[] result = BinaryCodec.toAsciiChars(input);
        assertTrue(new String(result).equals("0000000100000010"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiChars_MaxByte_OqyX3_1() throws Exception {
        byte[] input = new byte[] { (byte) 0xFF };
        char[] result = BinaryCodec.toAsciiChars(input);
        assertTrue(result.length == 8);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiChars_MaxByte_OqyX3_2() throws Exception {
        byte[] input = new byte[] { (byte) 0xFF };
        char[] result = BinaryCodec.toAsciiChars(input);
        assertTrue(new String(result).equals("11111111"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_EmptyArray_OWwb0() throws Exception {
    byte[] raw = new byte[0];
    byte[] expected = new byte[0];
    byte[] actual = BinaryCodec.toAsciiBytes(raw);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_NonEmptyArray_QyWB1() throws Exception {
    byte[] raw = new byte[] { 0x01, 0x02, 0x03 };
    byte[] expected = new byte[] { '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '1' };
    byte[] actual = BinaryCodec.toAsciiBytes(raw);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_MaxArray_rbJN2() throws Exception {
    byte[] raw = new byte[] { (byte) 0xFF };
    byte[] expected = new byte[] { '1', '1', '1', '1', '1', '1', '1', '1' };
    byte[] actual = BinaryCodec.toAsciiBytes(raw);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_MinArray_ACqK3() throws Exception {
    byte[] raw = new byte[] { (byte) 0x00 };
    byte[] expected = new byte[] { '0', '0', '0', '0', '0', '0', '0', '0' };
    byte[] actual = BinaryCodec.toAsciiBytes(raw);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_RandomArray_pMrl4() throws Exception {
    byte[] raw = new byte[] { (byte) 0x7F };
    byte[] expected = new byte[] { '0', '1', '1', '1', '1', '1', '1', '1' };
    byte[] actual = BinaryCodec.toAsciiBytes(raw);
    assertArrayEquals(expected, actual);
}
}