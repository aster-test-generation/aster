/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.security.SecureRandom;
import java.util.Random;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_B64_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomSalt_bZbQ0() throws Exception {
assertEquals("Expected output", B64.getRandomSalt(10), "Actual output");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomSalt1_ObVS1() throws Exception {
assertEquals("Expected output", B64.getRandomSalt(10, new SecureRandom()), "Actual output");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomSaltTest1_AtVv0_1() throws Exception {
        final int num = 10;
        final Random random = new Random();
        String salt = B64.getRandomSalt(num, random);
        for (char c : salt.toCharArray()) {
        }
        assertEquals(10, salt.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomSaltTest2_oNCa1_1() throws Exception {
        final int num = 5;
        final Random random = new Random();
        String salt = B64.getRandomSalt(num, random);
        for (char c : salt.toCharArray()) {
        }
        assertEquals(5, salt.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testB64from24bit_eDtd0() throws Exception {
        byte b2 = 0;
        byte b1 = 0;
        byte b0 = 0;
        int outLen = 0;
        StringBuilder buffer = new StringBuilder();
        B64.b64from24bit(b2, b1, b0, outLen, buffer);
        assertEquals("", buffer.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testB64from24bitWithValues_zbJw1() throws Exception {
        byte b2 = 1;
        byte b1 = 2;
        byte b0 = 3;
        int outLen = 4;
        StringBuilder buffer = new StringBuilder();
        B64.b64from24bit(b2, b1, b0, outLen, buffer);
        assertEquals("AQIDBAUGBwg=", buffer.toString());
    }
}