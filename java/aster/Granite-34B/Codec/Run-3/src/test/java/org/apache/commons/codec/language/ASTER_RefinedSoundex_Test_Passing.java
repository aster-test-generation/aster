/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_RefinedSoundex_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_pLym0() throws EncoderException {
        RefinedSoundex soundex = new RefinedSoundex();
        String input = "example";
        Object result = soundex.encode(input);
        assertEquals("E250", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonString_vEDa1() throws Exception {
        RefinedSoundex soundex = new RefinedSoundex();
        Object input = 123;
        try {
            soundex.encode(input);
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to RefinedSoundex encode is not of type java.lang.String", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_suGV0() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String encoded = refinedSoundex.encode("example");
        Assertions.assertEquals("E200", encoded);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithMapping_FtwJ1() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        String encoded = refinedSoundex.encode("example");
        Assertions.assertEquals("E200", encoded);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharMapping_tWNW2() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex(new char[] {'a', 'b', 'c'});
        String encoded = refinedSoundex.encode("example");
        Assertions.assertEquals("E200", encoded);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMappingCode_LuVw0() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        char result = refinedSoundex.getMappingCode('c');
        assertEquals('m', result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMappingCodeWithInvalidInput_CGBg1() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        char result = refinedSoundex.getMappingCode('#');
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMappingCodeWithInvalidIndex_ptHS2() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        char result = refinedSoundex.getMappingCode('Z');
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMappingCodeWithInvalidChar_Ztum3() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        char result = refinedSoundex.getMappingCode('1');
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithNullString_ReturnsNull_yTfs0() throws Exception {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex(null);
        assertEquals(null, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithCleanedNullString_ReturnsNull_DYFC1() throws Exception {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex(SoundexUtils.clean(null));
        assertEquals(null, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithEmptyCleanedNullString_ReturnsEmpty_gYaG2() throws Exception {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex(SoundexUtils.clean(""));
        assertEquals("", actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithNonEmptyCleanedString_ReturnsSoundex_uWFo3() throws Exception {
        RefinedSoundex soundex = new RefinedSoundex();
        String actual = soundex.soundex(SoundexUtils.clean("test"));
        assertEquals("t000", actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithNonEmptyCleanedString_ReturnsSoundexWithCorrectMapping_jgkz4() throws Exception {
        RefinedSoundex soundex = new RefinedSoundex(new char[] {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'});
        String actual = soundex.soundex(SoundexUtils.clean("test"));
        assertEquals("t000", actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_WithNonEmptyCleanedString_ReturnsSoundexWithCorrectMapping2_ktHI5() throws Exception {
        RefinedSoundex soundex = new RefinedSoundex(new String("01230120022455012623010202"));
        String actual = soundex.soundex(SoundexUtils.clean("test"));
        assertEquals("t000", actual);
    }
}