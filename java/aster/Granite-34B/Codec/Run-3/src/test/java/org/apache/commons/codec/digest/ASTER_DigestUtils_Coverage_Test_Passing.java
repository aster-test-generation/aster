/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.security.MessageDigest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DigestUtils_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha_IVlC0() {
    DigestUtils digestUtils = new DigestUtils("SHA");
    byte[] data = new byte[0];
    byte[] result = DigestUtils.sha(data);
    assertNotEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1_vaex1() {
    DigestUtils digestUtils = new DigestUtils("SHA-1");
    byte[] data = new byte[0];
    byte[] result = DigestUtils.sha1(data);
    assertNotEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256_Glhz2() {
    DigestUtils digestUtils = new DigestUtils("SHA-256");
    byte[] data = new byte[0];
    byte[] result = DigestUtils.sha256(data);
    assertNotEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha384_BNpU3() {
    DigestUtils digestUtils = new DigestUtils("SHA-384");
    byte[] data = new byte[0];
    byte[] result = DigestUtils.sha384(data);
    assertNotEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_YXJL4() {
    DigestUtils digestUtils = new DigestUtils("SHA-512");
    byte[] data = new byte[0];
    byte[] result = DigestUtils.sha512(data);
    assertNotEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDigest_digestNull_returnDefaultMessageDigest_KeXt2() {
    MessageDigest digest = DigestUtils.getDigest("SHA-256", null);
    assertNotNull(digest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_1_GEZa0_fid2() {
    DigestUtils digestUtils = new DigestUtils();
    String messageDigestAlgorithm = "messageDigestAlgorithm";
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_7_iFui6_fid2() {
    DigestUtils digestUtils = new DigestUtils();
    String messageDigestAlgorithm = "messageDigestAlgorithm";
    Assertions.assertFalse(DigestUtils.isAvailable(messageDigestAlgorithm));
}
}