/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Hex_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_eWQJ0() throws Exception {
        Hex hex = new Hex("UTF-8");
        byte[] array = "Hello, World!".getBytes();
        byte[] expected = hex.encode(array);
        byte[] actual = hex.encode(array);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_DHdW0_1() throws DecoderException {
        assertEquals(10, Hex.toDigit('a', 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_DHdW0_2() throws DecoderException {
        assertEquals(15, Hex.toDigit('f', 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitWithInvalidChar_UIdp1_1() throws Exception {
        DecoderException exception = assertThrows(DecoderException.class, () -> Hex.toDigit('g', 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_xdCo0() throws Exception {
        byte[] data = new byte[] { 0x00, 0x0F, (byte) 0xF0, (byte) 0xFF };
        String expected = "000FF0FF";
        String actual = Hex.encodeHexString(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCharsetNameTest2_JoDc1() throws Exception {
        Hex hex = new Hex(new String("UTF-16"));
        assertEquals("UTF-16", hex.getCharsetName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCharsetNameTest3_kRKx2() throws Exception {
        Hex hex = new Hex();
        assertEquals("UTF-8", hex.getCharsetName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeHex_uZHc0() throws Exception {
        ByteBuffer data = ByteBuffer.allocate(10);
        boolean toLowerCase = true;
        char[] expected = new char[20];
        char[] actual = Hex.encodeHex(data, toLowerCase);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeHex2_YpfW1() throws Exception {
        ByteBuffer data = ByteBuffer.allocate(10);
        boolean toLowerCase = false;
        char[] expected = new char[20];
        char[] actual = Hex.encodeHex(data, toLowerCase);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_XyiA0() throws Exception {
        byte[] data = new byte[0];
        boolean toLowerCase = false;
        char[] expected = new char[0];
        assertArrayEquals(expected, Hex.encodeHex(data, toLowerCase));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex2_FzuE1() throws Exception {
        byte[] data = new byte[10];
        boolean toLowerCase = true;
        char[] expected = new char[20];
        assertArrayEquals(expected, Hex.encodeHex(data, toLowerCase));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex3_jvpZ2() throws Exception {
        byte[] data = new byte[15];
        boolean toLowerCase = false;
        char[] expected = new char[30];
        assertArrayEquals(expected, Hex.encodeHex(data, toLowerCase));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharsetConstructor_LKbY0() throws Exception {
        Hex hex = new Hex(Charset.defaultCharset());
        assertEquals(Charset.defaultCharset(), hex.getCharset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithStringConstructor_xrOz1() throws Exception {
        Hex hex = new Hex("UTF-8");
        assertEquals(Charset.forName("UTF-8"), hex.getCharset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithDefaultConstructor_UkAu2() throws Exception {
        Hex hex = new Hex();
        assertEquals(Charset.defaultCharset(), hex.getCharset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_JkZi0() throws Exception {
        byte[] data = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05};
        int dataOffset = 0;
        int dataLen = 6;
        boolean toLowerCase = true;
        char[] expected = {'0', '0', '1', '0', '2', '0', '3', '0', '4', '0', '5', '0'};
        char[] actual = Hex.encodeHex(data, dataOffset, dataLen, toLowerCase);
        assertAll(
        );
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeHex_DQFb0() throws Exception {
        byte[] data = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09};
        char[] toDigits = new char[16];
        char[] result = Hex.encodeHex(data, toDigits);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_SpCU0() throws EncoderException {
        Hex hex = new Hex("UTF-8");
        String input = "Hello, World!";
        Object result = hex.encode(input);
        assertEquals("48656C6C6F2C20576F726C6421", result.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteBuffer_DGCh1() throws EncoderException {
        Hex hex = new Hex();
        ByteBuffer input = ByteBuffer.wrap("Hello, World!".getBytes());
        Object result = hex.encode(input);
        assertEquals("48656C6C6F2C20576F726C6421", result.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_KzUV2() throws EncoderException {
        Hex hex = new Hex(StandardCharsets.UTF_16);
        byte[] input = "Hello, World!".getBytes(StandardCharsets.UTF_16);
        Object result = hex.encode(input);
        assertEquals("480065006C006C006F002C00200057006F0072006C0064002100", result.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_naaz0() throws Exception {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put((byte) 0xFF);
        data.flip();
        char[] expected = {'F', 'F'};
        assertArrayEquals(expected, Hex.encodeHex(data));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithCharset_WVXq1() throws Exception {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put((byte) 0xFF);
        data.flip();
        Hex hex = new Hex("UTF-8");
        char[] expected = {'F', 'F'};
        assertArrayEquals(expected, hex.encodeHex(data));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithoutCharset_lonM2() throws Exception {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put((byte) 0xFF);
        data.flip();
        Hex hex = new Hex();
        char[] expected = {'F', 'F'};
        assertArrayEquals(expected, hex.encodeHex(data));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_TYds0() throws DecoderException {
        String data = "48656C6C6F20776F726C6421";
        byte[] expected = "Hello world!".getBytes();
        assertArrayEquals(expected, Hex.decodeHex(data));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithOddLength_KIQh1_1() throws Exception {
        String data = "48656C6C6F20776F726C642122";
        DecoderException exception = assertThrows(DecoderException.class, () -> Hex.decodeHex(data));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithInvalidCharacter_QtBN2_1() throws Exception {
        String data = "48656C6C6F20776F726C6421FF";
        DecoderException exception = assertThrows(DecoderException.class, () -> Hex.decodeHex(data));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithEmptyArray_OevC2() throws Exception {
        byte[] data = new byte[0];
        char[] expected = new char[0];
        assertArrayEquals(expected, Hex.encodeHex(data));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_lCdM0_1() throws Exception {
        byte[] data = new byte[] { 0x00, 0x0F, (byte) 0xF0, (byte) 0xFF };
        char[] out = new char[data.length * 2];
        Hex.encodeHex(data, 0, data.length, false, out, 0);
        Hex.encodeHex(data, 0, data.length, true, out, 0);
        assertEquals("000FF0FF", new String(out));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_lCdM0_2() throws Exception {
        byte[] data = new byte[] { 0x00, 0x0F, (byte) 0xF0, (byte) 0xFF };
        char[] out = new char[data.length * 2];
        Hex.encodeHex(data, 0, data.length, false, out, 0);
        Hex.encodeHex(data, 0, data.length, true, out, 0);
        assertEquals("000ff0ff", new String(out));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_TmzV0() throws Exception {
        byte[] data = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05 };
        boolean toLowerCase = true;
        String expected = "000102030405";
        Hex hex = new Hex();
        String actual = hex.encodeHexString(data, toLowerCase);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexStringWithCharset_tLWh1() throws Exception {
        byte[] data = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05 };
        boolean toLowerCase = true;
        String expected = "000102030405";
        Hex hex = new Hex("UTF-8");
        String actual = hex.encodeHexString(data, toLowerCase);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_iGvs0() throws Exception {
        byte[] bytes = {0x00, 0x0F, 0x3F, (byte) 0x80, (byte) 0xFF};
        char[] expected = {'0', '0', '0', 'F', '3', 'F', '8', '0', 'F', 'F'};
        assertArrayEquals(expected, Hex.encodeHex(bytes));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithToDigits_RXru1() throws Exception {
        byte[] bytes = {0x00, 0x0F, 0x3F, (byte) 0x80, (byte) 0xFF};
        char[] toDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        char[] expected = {'0', '0', '0', 'F', '3', 'F', '8', '0', 'F', 'F'};
        assertArrayEquals(expected, Hex.encodeHex(bytes, toDigits));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithCharset_WMmy0() throws DecoderException {
        final char[] data = "48656C6C6F".toCharArray();
        final byte[] expected = "Hello".getBytes(StandardCharsets.UTF_8);
        final Hex hex = new Hex(StandardCharsets.UTF_8);
        final byte[] actual = Hex.decodeHex(data);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithString_PByD1() throws DecoderException {
        final char[] data = "48656C6C6F".toCharArray();
        final byte[] expected = "Hello".getBytes(StandardCharsets.UTF_8);
        final Hex hex = new Hex("UTF-8");
        final byte[] actual = Hex.decodeHex(data);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithoutCharset_qVEQ2() throws DecoderException {
        final char[] data = "48656C6C6F".toCharArray();
        final byte[] expected = "Hello".getBytes(StandardCharsets.US_ASCII);
        final Hex hex = new Hex();
        final byte[] actual = Hex.decodeHex(data);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithOffset_WgLy3() throws DecoderException {
        final char[] data = "48656C6C6F".toCharArray();
        final byte[] expected = "Hello".getBytes(StandardCharsets.UTF_8);
        final byte[] out = new byte[expected.length];
        final Hex hex = new Hex(StandardCharsets.UTF_8);
        final int offset = 0;
        final int actual = Hex.decodeHex(data, out, offset);
        assertArrayEquals(expected, out);
        assert actual == expected.length;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_tYlh0() throws Exception {
        char[] data = new char[] {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] out = new byte[16];
        int outOffset = 0;
        int result = Hex.decodeHex(data, out, outOffset);
        assertEquals(16, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithOddNumberOfCharacters_ruxJ1() throws Exception {
        char[] data = new char[] {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g'};
        byte[] out = new byte[16];
        int outOffset = 0;
        try {
            Hex.decodeHex(data, out, outOffset);
        } catch (DecoderException e) {
            assertEquals("Odd number of characters.", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithInsufficientOutputArraySize_RNqI2() throws Exception {
        char[] data = new char[] {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] out = new byte[15];
        int outOffset = 0;
        try {
            Hex.decodeHex(data, out, outOffset);
        } catch (DecoderException e) {
            assertEquals("Output array is not large enough to accommodate decoded data.", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithInvalidCharacter_Wrkz3() throws Exception {
        char[] data = new char[] {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'g'};
        byte[] out = new byte[16];
        int outOffset = 0;
        try {
            Hex.decodeHex(data, out, outOffset);
        } catch (DecoderException e) {
            assertEquals("Invalid hexadecimal character: g", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_TmcF0() throws Exception {
        Hex hex = new Hex(StandardCharsets.UTF_8);
        String input = "48656C6C6F";
        Object result = hex.decode(input);
        assertEquals("Hello", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_kyJB1() throws Exception {
        Hex hex = new Hex();
        byte[] input = {(byte) 0x48, (byte) 0x65, (byte) 0x6C, (byte) 0x6C, (byte) 0x6F};
        Object result = hex.decode(input);
        assertEquals("Hello", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteBuffer_eWrh2() throws Exception {
        Hex hex = new Hex(StandardCharsets.UTF_16BE);
        ByteBuffer input = ByteBuffer.wrap(new byte[] {(byte) 0x48, (byte) 0x65, (byte) 0x6C, (byte) 0x6C, (byte) 0x6F});
        Object result = hex.decode(input);
        assertEquals("Hello", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharArray_Ftyr3() throws Exception {
        Hex hex = new Hex();
        char[] input = {'4', '8', '6', '5', '6', 'C', '6', 'C', '6', 'F'};
        Object result = hex.decode(input);
        assertEquals("Hello", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidInput_imgi4_1() throws Exception {
        Hex hex = new Hex();
        Object input = new Object();
        DecoderException exception = assertThrows(DecoderException.class, () -> hex.decode(input));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_veLm0() throws Exception {
        Hex hex = new Hex("UTF-8");
        ByteBuffer array = ByteBuffer.allocate(10);
        byte[] expected = hex.encode(array);
        byte[] actual = {48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_wtEA1() throws Exception {
        Hex hex = new Hex("UTF-16");
        ByteBuffer array = ByteBuffer.allocate(10);
        byte[] expected = hex.encode(array);
        byte[] actual = {48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_PuFE2() throws Exception {
        Hex hex = new Hex("UTF-32");
        ByteBuffer array = ByteBuffer.allocate(10);
        byte[] expected = hex.encode(array);
        byte[] actual = {48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_eQOp0() throws Exception {
        byte[] data = new byte[] {0x00, 0x0F, 0x3F};
        char[] expected = new char[] {'0', '0', 'F', 'F', '3', 'F'};
        char[] actual = Hex.encodeHex(data, 0, data.length, true);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexEmpty_DNFE1() throws Exception {
    byte[] data = new byte[0];
    char[] expected = new char[0];
    char[] actual = Hex.encodeHex(data, 0, data.length, true);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_aWbb0() throws Exception {
        ByteBuffer data = ByteBuffer.allocate(10);
        String result = Hex.encodeHexString(data);
        System.out.println(result);
    }
}