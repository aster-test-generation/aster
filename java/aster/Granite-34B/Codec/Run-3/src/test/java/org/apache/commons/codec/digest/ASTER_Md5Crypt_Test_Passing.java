/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.util.Random;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Md5Crypt_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testApr1Crypt_cSil0() throws Exception {
		String expected = "expected";
		String actual = Md5Crypt.apr1Crypt("keyBytes");
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_ahSD0() throws Exception {
        byte[] keyBytes = {}; // initialize with actual value
        String expected = ""; // initialize with expected value
        String actual = Md5Crypt.md5Crypt(keyBytes);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithSalt_wutl1() throws Exception {
        byte[] keyBytes = {}; // initialize with actual value
        String salt = ""; // initialize with actual value
        String expected = ""; // initialize with expected value
        String actual = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_abMP0() throws Exception {
        byte[] keyBytes = new byte[]{0x00, 0x01, 0x02, 0x03};
        Random random = new Random();
        String expected = "expected";
        String actual = Md5Crypt.apr1Crypt(keyBytes, random);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithSalt_EGYZ1() throws Exception {
        byte[] keyBytes = new byte[]{0x00, 0x01, 0x02, 0x03};
        String salt = "salt";
        String expected = "expected";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_uPop0() throws Exception {
        byte[] keyBytes = new byte[]{0x00, 0x01, 0x02, 0x03};
        Random random = new Random();
        String expected = "md5Crypt(byte[4], Random)";
        String actual = Md5Crypt.md5Crypt(keyBytes, random);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithSalt_sUUO1() throws Exception {
        byte[] keyBytes = new byte[]{0x00, 0x01, 0x02, 0x03};
        String salt = "$1$12345678$";
        String expected = "md5Crypt(byte[4], $1$12345678$)";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithSaltAndRandom_Xcur0_1() throws Exception {
        byte[] keyBytes = new byte[] { 0, 1, 2, 3 };
        String salt = "$1$abcde$";
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertTrue(result.startsWith("$1$abcde$"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithSaltAndRandom_Xcur0_2() throws Exception {
        byte[] keyBytes = new byte[] { 0, 1, 2, 3 };
        String salt = "$1$abcde$";
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(34, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithoutSaltAndRandom_LxvQ1_1() throws Exception {
        byte[] keyBytes = new byte[] { 0, 1, 2, 3 };
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, null, prefix, random);
        assertTrue(result.startsWith("$1$"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithoutSaltAndRandom_LxvQ1_2() throws Exception {
        byte[] keyBytes = new byte[] { 0, 1, 2, 3 };
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, null, prefix, random);
        assertEquals(34, result.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithInvalidSalt_PruK2_1() throws Exception {
        byte[] keyBytes = new byte[] { 0, 1, 2, 3 };
        String salt = "$2$defgh$";
        String prefix = "$1$";
        Random random = new Random();
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullKeyBytes_asif3_1() throws Exception {
        byte[] keyBytes = null;
        String salt = "$1$abcde$";
        String prefix = "$1$";
        Random random = new Random();
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullPrefix_UNQL4_1() throws Exception {
        byte[] keyBytes = new byte[] { 0, 1, 2, 3 };
        String salt = "$1$abcde$";
        String prefix = null;
        Random random = new Random();
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullRandom_EvHX5_1() throws Exception {
        byte[] keyBytes = new byte[] { 0, 1, 2, 3 };
        String salt = "$1$abcde$";
        String prefix = "$1$";
        Random random = null;
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        });}
}